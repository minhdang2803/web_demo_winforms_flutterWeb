define(['dart_sdk', 'packages/flutter/src/widgets/title.dart', 'packages/flutter/src/services/mouse_cursor.dart', 'packages/flutter/src/material/material_state.dart', 'packages/flutter/src/material/icon_button.dart', 'packages/flutter/src/material/toggleable.dart', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/flutter/src/rendering/custom_paint.dart'], (function load__packages__flutter__src__material__radio_dart(dart_sdk, packages__flutter__src__widgets__title$46dart, packages__flutter__src__services__mouse_cursor$46dart, packages__flutter__src__material__material_state$46dart, packages__flutter__src__material__icon_button$46dart, packages__flutter__src__material__toggleable$46dart, packages__flutter__src__foundation__change_notifier$46dart, packages__flutter__src__rendering__custom_paint$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const widget_inspector = packages__flutter__src__widgets__title$46dart.src__widgets__widget_inspector;
  const framework = packages__flutter__src__widgets__title$46dart.src__widgets__framework;
  const focus_manager = packages__flutter__src__widgets__title$46dart.src__widgets__focus_manager;
  const basic = packages__flutter__src__widgets__title$46dart.src__widgets__basic;
  const ticker_provider = packages__flutter__src__widgets__title$46dart.src__widgets__ticker_provider;
  const mouse_cursor = packages__flutter__src__services__mouse_cursor$46dart.src__services__mouse_cursor;
  const material_state = packages__flutter__src__material__material_state$46dart.src__material__material_state;
  const theme_data = packages__flutter__src__material__icon_button$46dart.src__material__theme_data;
  const theme = packages__flutter__src__material__icon_button$46dart.src__material__theme;
  const debug = packages__flutter__src__material__icon_button$46dart.src__material__debug;
  const radio_theme = packages__flutter__src__material__icon_button$46dart.src__material__radio_theme;
  const toggleable = packages__flutter__src__material__toggleable$46dart.src__material__toggleable;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const custom_paint = packages__flutter__src__rendering__custom_paint$46dart.src__rendering__custom_paint;
  var radio = Object.create(dart.library);
  var $noSuchMethod = dartx.noSuchMethod;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T$ = {
    ColorN: () => (T$.ColorN = dart.constFn(dart.nullable(ui.Color)))(),
    SetOfMaterialState: () => (T$.SetOfMaterialState = dart.constFn(core.Set$(material_state.MaterialState)))(),
    SetOfMaterialStateToColorN: () => (T$.SetOfMaterialStateToColorN = dart.constFn(dart.fnType(T$.ColorN(), [T$.SetOfMaterialState()])))(),
    SetOfMaterialStateToColor: () => (T$.SetOfMaterialStateToColor = dart.constFn(dart.fnType(ui.Color, [T$.SetOfMaterialState()])))(),
    MouseCursorN: () => (T$.MouseCursorN = dart.constFn(dart.nullable(mouse_cursor.MouseCursor)))(),
    SetOfMaterialStateToMouseCursor: () => (T$.SetOfMaterialStateToMouseCursor = dart.constFn(dart.fnType(mouse_cursor.MouseCursor, [T$.SetOfMaterialState()])))(),
    ListenableN: () => (T$.ListenableN = dart.constFn(dart.nullable(change_notifier.Listenable)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "Radio",
        [_Location_column]: 9,
        [_Location_line]: 71,
        [_Location_file]: "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/material/radio.dart"
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 48,
        [OffsetBase__dx]: 48
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: theme_data.MaterialTapTargetSize.prototype,
        [_Enum__name]: "padded",
        [_Enum_index]: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 40,
        [OffsetBase__dx]: 40
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: theme_data.MaterialTapTargetSize.prototype,
        [_Enum__name]: "shrinkWrap",
        [_Enum_index]: 1
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "Semantics",
        [_Location_column]: 12,
        [_Location_line]: 433,
        [_Location_file]: "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/material/radio.dart"
      });
    },
    get C6() {
      return C[6] = dart.const(new _js_helper.PrivateSymbol.new('_repaint', _repaint));
    }
  }, false);
  var C = Array(7).fill(void 0);
  var I = [
    "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/material/radio.dart",
    "package:flutter/src/material/radio.dart"
  ];
  var value$ = dart.privateName(radio, "Radio.value");
  var groupValue$ = dart.privateName(radio, "Radio.groupValue");
  var onChanged$ = dart.privateName(radio, "Radio.onChanged");
  var mouseCursor$ = dart.privateName(radio, "Radio.mouseCursor");
  var toggleable$ = dart.privateName(radio, "Radio.toggleable");
  var activeColor$ = dart.privateName(radio, "Radio.activeColor");
  var fillColor$ = dart.privateName(radio, "Radio.fillColor");
  var materialTapTargetSize$ = dart.privateName(radio, "Radio.materialTapTargetSize");
  var visualDensity$ = dart.privateName(radio, "Radio.visualDensity");
  var focusColor$ = dart.privateName(radio, "Radio.focusColor");
  var hoverColor$ = dart.privateName(radio, "Radio.hoverColor");
  var overlayColor$ = dart.privateName(radio, "Radio.overlayColor");
  var splashRadius$ = dart.privateName(radio, "Radio.splashRadius");
  var focusNode$ = dart.privateName(radio, "Radio.focusNode");
  var autofocus$ = dart.privateName(radio, "Radio.autofocus");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  var _selected = dart.privateName(radio, "_selected");
  const _is_Radio_default = Symbol('_is_Radio_default');
  radio.Radio$ = dart.generic(T => {
    var __t$_RadioStateOfT = () => (__t$_RadioStateOfT = dart.constFn(radio._RadioState$(T)))();
    class Radio extends framework.StatefulWidget {
      get value() {
        return this[value$];
      }
      set value(value) {
        super.value = value;
      }
      get groupValue() {
        return this[groupValue$];
      }
      set groupValue(value) {
        super.groupValue = value;
      }
      get onChanged() {
        return this[onChanged$];
      }
      set onChanged(value) {
        super.onChanged = value;
      }
      get mouseCursor() {
        return this[mouseCursor$];
      }
      set mouseCursor(value) {
        super.mouseCursor = value;
      }
      get toggleable() {
        return this[toggleable$];
      }
      set toggleable(value) {
        super.toggleable = value;
      }
      get activeColor() {
        return this[activeColor$];
      }
      set activeColor(value) {
        super.activeColor = value;
      }
      get fillColor() {
        return this[fillColor$];
      }
      set fillColor(value) {
        super.fillColor = value;
      }
      get materialTapTargetSize() {
        return this[materialTapTargetSize$];
      }
      set materialTapTargetSize(value) {
        super.materialTapTargetSize = value;
      }
      get visualDensity() {
        return this[visualDensity$];
      }
      set visualDensity(value) {
        super.visualDensity = value;
      }
      get focusColor() {
        return this[focusColor$];
      }
      set focusColor(value) {
        super.focusColor = value;
      }
      get hoverColor() {
        return this[hoverColor$];
      }
      set hoverColor(value) {
        super.hoverColor = value;
      }
      get overlayColor() {
        return this[overlayColor$];
      }
      set overlayColor(value) {
        super.overlayColor = value;
      }
      get splashRadius() {
        return this[splashRadius$];
      }
      set splashRadius(value) {
        super.splashRadius = value;
      }
      get focusNode() {
        return this[focusNode$];
      }
      set focusNode(value) {
        super.focusNode = value;
      }
      get autofocus() {
        return this[autofocus$];
      }
      set autofocus(value) {
        super.autofocus = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let value = opts && 'value' in opts ? opts.value : null;
        let groupValue = opts && 'groupValue' in opts ? opts.groupValue : null;
        let onChanged = opts && 'onChanged' in opts ? opts.onChanged : null;
        let mouseCursor = opts && 'mouseCursor' in opts ? opts.mouseCursor : null;
        let toggleable = opts && 'toggleable' in opts ? opts.toggleable : false;
        let activeColor = opts && 'activeColor' in opts ? opts.activeColor : null;
        let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
        let focusColor = opts && 'focusColor' in opts ? opts.focusColor : null;
        let hoverColor = opts && 'hoverColor' in opts ? opts.hoverColor : null;
        let overlayColor = opts && 'overlayColor' in opts ? opts.overlayColor : null;
        let splashRadius = opts && 'splashRadius' in opts ? opts.splashRadius : null;
        let materialTapTargetSize = opts && 'materialTapTargetSize' in opts ? opts.materialTapTargetSize : null;
        let visualDensity = opts && 'visualDensity' in opts ? opts.visualDensity : null;
        let focusNode = opts && 'focusNode' in opts ? opts.focusNode : null;
        let autofocus = opts && 'autofocus' in opts ? opts.autofocus : false;
        return new (radio.Radio$(T)).new({key: key, value: value, groupValue: groupValue, onChanged: onChanged, mouseCursor: mouseCursor, toggleable: toggleable, activeColor: activeColor, fillColor: fillColor, focusColor: focusColor, hoverColor: hoverColor, overlayColor: overlayColor, splashRadius: splashRadius, materialTapTargetSize: materialTapTargetSize, visualDensity: visualDensity, focusNode: focusNode, autofocus: autofocus, $creationLocationd_0dea112b090073317d4: C[0] || CT.C0});
      }
      get [_selected]() {
        return dart.equals(this.value, this.groupValue);
      }
      createState() {
        return new (__t$_RadioStateOfT()).new();
      }
    }
    (Radio.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let groupValue = opts && 'groupValue' in opts ? opts.groupValue : null;
      let onChanged = opts && 'onChanged' in opts ? opts.onChanged : null;
      let mouseCursor = opts && 'mouseCursor' in opts ? opts.mouseCursor : null;
      let toggleable = opts && 'toggleable' in opts ? opts.toggleable : false;
      let activeColor = opts && 'activeColor' in opts ? opts.activeColor : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let focusColor = opts && 'focusColor' in opts ? opts.focusColor : null;
      let hoverColor = opts && 'hoverColor' in opts ? opts.hoverColor : null;
      let overlayColor = opts && 'overlayColor' in opts ? opts.overlayColor : null;
      let splashRadius = opts && 'splashRadius' in opts ? opts.splashRadius : null;
      let materialTapTargetSize = opts && 'materialTapTargetSize' in opts ? opts.materialTapTargetSize : null;
      let visualDensity = opts && 'visualDensity' in opts ? opts.visualDensity : null;
      let focusNode = opts && 'focusNode' in opts ? opts.focusNode : null;
      let autofocus = opts && 'autofocus' in opts ? opts.autofocus : false;
      let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
      this[value$] = value;
      this[groupValue$] = groupValue;
      this[onChanged$] = onChanged;
      this[mouseCursor$] = mouseCursor;
      this[toggleable$] = toggleable;
      this[activeColor$] = activeColor;
      this[fillColor$] = fillColor;
      this[focusColor$] = focusColor;
      this[hoverColor$] = hoverColor;
      this[overlayColor$] = overlayColor;
      this[splashRadius$] = splashRadius;
      this[materialTapTargetSize$] = materialTapTargetSize;
      this[visualDensity$] = visualDensity;
      this[focusNode$] = focusNode;
      this[autofocus$] = autofocus;
      if (!(autofocus !== null)) dart.assertFailed(null, I[0], 88, 15, "autofocus != null");
      if (!(toggleable !== null)) dart.assertFailed(null, I[0], 89, 15, "toggleable != null");
      Radio.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
      ;
    }).prototype = Radio.prototype;
    dart.addTypeTests(Radio);
    Radio.prototype[_is_Radio_default] = true;
    dart.addTypeCaches(Radio);
    dart.setMethodSignature(Radio, () => ({
      __proto__: dart.getMethods(Radio.__proto__),
      createState: dart.fnType(framework.State$(radio.Radio$(T)), [])
    }));
    dart.setGetterSignature(Radio, () => ({
      __proto__: dart.getGetters(Radio.__proto__),
      [_selected]: core.bool
    }));
    dart.setLibraryUri(Radio, I[1]);
    dart.setFieldSignature(Radio, () => ({
      __proto__: dart.getFields(Radio.__proto__),
      value: dart.finalFieldType(T),
      groupValue: dart.finalFieldType(dart.nullable(T)),
      onChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [dart.nullable(T)]))),
      mouseCursor: dart.finalFieldType(dart.nullable(mouse_cursor.MouseCursor)),
      toggleable: dart.finalFieldType(core.bool),
      activeColor: dart.finalFieldType(dart.nullable(ui.Color)),
      fillColor: dart.finalFieldType(dart.nullable(material_state.MaterialStateProperty$(dart.nullable(ui.Color)))),
      materialTapTargetSize: dart.finalFieldType(dart.nullable(theme_data.MaterialTapTargetSize)),
      visualDensity: dart.finalFieldType(dart.nullable(theme_data.VisualDensity)),
      focusColor: dart.finalFieldType(dart.nullable(ui.Color)),
      hoverColor: dart.finalFieldType(dart.nullable(ui.Color)),
      overlayColor: dart.finalFieldType(dart.nullable(material_state.MaterialStateProperty$(dart.nullable(ui.Color)))),
      splashRadius: dart.finalFieldType(dart.nullable(core.double)),
      focusNode: dart.finalFieldType(dart.nullable(focus_manager.FocusNode)),
      autofocus: dart.finalFieldType(core.bool)
    }));
    return Radio;
  });
  radio.Radio = radio.Radio$();
  dart.addTypeTests(radio.Radio, _is_Radio_default);
  var _painter = dart.privateName(radio, "_painter");
  var _handleChanged = dart.privateName(radio, "_handleChanged");
  var _widgetFillColor = dart.privateName(radio, "_widgetFillColor");
  var _defaultFillColor = dart.privateName(radio, "_defaultFillColor");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  const _is__RadioState_default = Symbol('_is__RadioState_default');
  radio._RadioState$ = dart.generic(T => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    var __t$TNTovoid = () => (__t$TNTovoid = dart.constFn(dart.fnType(dart.void, [__t$TN()])))();
    var __t$TNToNvoid = () => (__t$TNToNvoid = dart.constFn(dart.nullable(__t$TNTovoid())))();
    var __t$RadioOfT = () => (__t$RadioOfT = dart.constFn(radio.Radio$(T)))();
    const State_TickerProviderStateMixin$36 = class State_TickerProviderStateMixin extends framework.State$(radio.Radio$(T)) {};
    (State_TickerProviderStateMixin$36.new = function() {
      ticker_provider.TickerProviderStateMixin$(radio.Radio$(T))[dart.mixinNew].call(this);
      State_TickerProviderStateMixin$36.__proto__.new.call(this);
    }).prototype = State_TickerProviderStateMixin$36.prototype;
    dart.applyMixin(State_TickerProviderStateMixin$36, ticker_provider.TickerProviderStateMixin$(radio.Radio$(T)));
    const State_ToggleableStateMixin$36 = class State_ToggleableStateMixin extends State_TickerProviderStateMixin$36 {};
    (State_ToggleableStateMixin$36.new = function() {
      toggleable.ToggleableStateMixin$(radio.Radio$(T))[dart.mixinNew].call(this);
      State_ToggleableStateMixin$36.__proto__.new.call(this);
    }).prototype = State_ToggleableStateMixin$36.prototype;
    dart.applyMixin(State_ToggleableStateMixin$36, toggleable.ToggleableStateMixin$(radio.Radio$(T)));
    class _RadioState extends State_ToggleableStateMixin$36 {
      [_handleChanged](selected) {
        if (selected == null) {
          dart.nullCheck(__t$TNToNvoid().as(this.widget.onChanged))(null);
          return;
        }
        if (dart.test(selected)) {
          dart.nullCheck(__t$TNToNvoid().as(this.widget.onChanged))(this.widget.value);
        }
      }
      didUpdateWidget(oldWidget) {
        __t$RadioOfT().as(oldWidget);
        super.didUpdateWidget(oldWidget);
        if (this.widget[_selected] !== oldWidget[_selected]) {
          this.animateToValue();
        }
      }
      dispose() {
        this[_painter].dispose();
        super.dispose();
      }
      get onChanged() {
        return __t$TNToNvoid().as(this.widget.onChanged) != null ? dart.bind(this, _handleChanged) : null;
      }
      get tristate() {
        return this.widget.toggleable;
      }
      get value() {
        return this.widget[_selected];
      }
      get [_widgetFillColor]() {
        return material_state.MaterialStateProperty.resolveWith(T$.ColorN(), dart.fn(states => {
          if (states.contains(material_state.MaterialState.disabled)) {
            return null;
          }
          if (states.contains(material_state.MaterialState.selected)) {
            return this.widget.activeColor;
          }
          return null;
        }, T$.SetOfMaterialStateToColorN()));
      }
      get [_defaultFillColor]() {
        let themeData = theme.Theme.of(this.context);
        return material_state.MaterialStateProperty.resolveWith(ui.Color, dart.fn(states => {
          if (states.contains(material_state.MaterialState.disabled)) {
            return themeData.disabledColor;
          }
          if (states.contains(material_state.MaterialState.selected)) {
            return themeData.toggleableActiveColor;
          }
          return themeData.unselectedWidgetColor;
        }, T$.SetOfMaterialStateToColor()));
      }
      build(context) {
        let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t1, t0$6, t0$7, t0$8, t0$9, t1$, t0$10, t0$11, t0$12, t0$13, t0$14, t1$0, t0$15, t0$16, t0$17, t0$18, t0$19, t1$1, t0$20, t0$21, t0$22, t0$23, t1$2, t0$24, t0$25, t0$26, t0$27, t1$3, t0$28, t0$29, t1$4, t1$5, t0$30;
        if (!debug.debugCheckHasMaterial(context)) dart.assertFailed(null, I[0], 372, 12, "debugCheckHasMaterial(context)");
        let themeData = theme.Theme.of(context);
        let radioTheme = radio_theme.RadioTheme.of(context);
        let effectiveMaterialTapTargetSize = (t0$ = (t0 = this.widget.materialTapTargetSize, t0 == null ? radioTheme.materialTapTargetSize : t0), t0$ == null ? themeData.materialTapTargetSize : t0$);
        let effectiveVisualDensity = (t0$1 = (t0$0 = this.widget.visualDensity, t0$0 == null ? radioTheme.visualDensity : t0$0), t0$1 == null ? themeData.visualDensity : t0$1);
        let size = null;
        switch (effectiveMaterialTapTargetSize) {
          case C[2] || CT.C2:
            {
              size = C[1] || CT.C1;
              break;
            }
          case C[4] || CT.C4:
            {
              size = C[3] || CT.C3;
              break;
            }
        }
        size = size['+'](effectiveVisualDensity.baseSizeAdjustment);
        let effectiveMouseCursor = material_state.MaterialStateProperty.resolveWith(mouse_cursor.MouseCursor, dart.fn(states => {
          let t1, t0, t0$;
          t0$ = (t0 = material_state.MaterialStateProperty.resolveAs(T$.MouseCursorN(), this.widget.mouseCursor, states), t0 == null ? (t1 = radioTheme.mouseCursor, t1 == null ? null : t1.resolve(states)) : t0);
          return t0$ == null ? material_state.MaterialStateProperty.resolveAs(mouse_cursor.MouseCursor, material_state.MaterialStateMouseCursor.clickable, states) : t0$;
        }, T$.SetOfMaterialStateToMouseCursor()));
        let activeStates = (t0$2 = this.states, (() => {
          t0$2.add(material_state.MaterialState.selected);
          return t0$2;
        })());
        let inactiveStates = (t0$3 = this.states, (() => {
          t0$3.remove(material_state.MaterialState.selected);
          return t0$3;
        })());
        let effectiveActiveColor = (t0$7 = (t0$6 = (t0$5 = (t0$4 = this.widget.fillColor, t0$4 == null ? null : t0$4.resolve(activeStates)), t0$5 == null ? this[_widgetFillColor].resolve(activeStates) : t0$5), t0$6 == null ? (t1 = radioTheme.fillColor, t1 == null ? null : t1.resolve(activeStates)) : t0$6), t0$7 == null ? this[_defaultFillColor].resolve(activeStates) : t0$7);
        let effectiveInactiveColor = (t0$11 = (t0$10 = (t0$9 = (t0$8 = this.widget.fillColor, t0$8 == null ? null : t0$8.resolve(inactiveStates)), t0$9 == null ? this[_widgetFillColor].resolve(inactiveStates) : t0$9), t0$10 == null ? (t1$ = radioTheme.fillColor, t1$ == null ? null : t1$.resolve(inactiveStates)) : t0$10), t0$11 == null ? this[_defaultFillColor].resolve(inactiveStates) : t0$11);
        let focusedStates = (t0$12 = this.states, (() => {
          t0$12.add(material_state.MaterialState.focused);
          return t0$12;
        })());
        let effectiveFocusOverlayColor = (t0$16 = (t0$15 = (t0$14 = (t0$13 = this.widget.overlayColor, t0$13 == null ? null : t0$13.resolve(focusedStates)), t0$14 == null ? this.widget.focusColor : t0$14), t0$15 == null ? (t1$0 = radioTheme.overlayColor, t1$0 == null ? null : t1$0.resolve(focusedStates)) : t0$15), t0$16 == null ? themeData.focusColor : t0$16);
        let hoveredStates = (t0$17 = this.states, (() => {
          t0$17.add(material_state.MaterialState.hovered);
          return t0$17;
        })());
        let effectiveHoverOverlayColor = (t0$21 = (t0$20 = (t0$19 = (t0$18 = this.widget.overlayColor, t0$18 == null ? null : t0$18.resolve(hoveredStates)), t0$19 == null ? this.widget.hoverColor : t0$19), t0$20 == null ? (t1$1 = radioTheme.overlayColor, t1$1 == null ? null : t1$1.resolve(hoveredStates)) : t0$20), t0$21 == null ? themeData.hoverColor : t0$21);
        let activePressedStates = (t0$22 = activeStates, (() => {
          t0$22.add(material_state.MaterialState.pressed);
          return t0$22;
        })());
        let effectiveActivePressedOverlayColor = (t0$25 = (t0$24 = (t0$23 = this.widget.overlayColor, t0$23 == null ? null : t0$23.resolve(activePressedStates)), t0$24 == null ? (t1$2 = radioTheme.overlayColor, t1$2 == null ? null : t1$2.resolve(activePressedStates)) : t0$24), t0$25 == null ? effectiveActiveColor.withAlpha(31) : t0$25);
        let inactivePressedStates = (t0$26 = inactiveStates, (() => {
          t0$26.add(material_state.MaterialState.pressed);
          return t0$26;
        })());
        let effectiveInactivePressedOverlayColor = (t0$29 = (t0$28 = (t0$27 = this.widget.overlayColor, t0$27 == null ? null : t0$27.resolve(inactivePressedStates)), t0$28 == null ? (t1$3 = radioTheme.overlayColor, t1$3 == null ? null : t1$3.resolve(inactivePressedStates)) : t0$28), t0$29 == null ? effectiveActiveColor.withAlpha(31) : t0$29);
        return new basic.Semantics.new({inMutuallyExclusiveGroup: true, checked: this.widget[_selected], child: this.buildToggleable({focusNode: this.widget.focusNode, autofocus: this.widget.autofocus, mouseCursor: effectiveMouseCursor, size: size, painter: (t0$30 = this[_painter], (() => {
              t0$30.position = this.position;
              t0$30.reaction = this.reaction;
              t0$30.reactionFocusFade = this.reactionFocusFade;
              t0$30.reactionHoverFade = this.reactionHoverFade;
              t0$30.inactiveReactionColor = effectiveInactivePressedOverlayColor;
              t0$30.reactionColor = effectiveActivePressedOverlayColor;
              t0$30.hoverColor = effectiveHoverOverlayColor;
              t0$30.focusColor = effectiveFocusOverlayColor;
              t0$30.splashRadius = (t1$5 = (t1$4 = this.widget.splashRadius, t1$4 == null ? radioTheme.splashRadius : t1$4), t1$5 == null ? 20 : t1$5);
              t0$30.downPosition = this.downPosition;
              t0$30.isFocused = this.states.contains(material_state.MaterialState.focused);
              t0$30.isHovered = this.states.contains(material_state.MaterialState.hovered);
              t0$30.activeColor = effectiveActiveColor;
              t0$30.inactiveColor = effectiveInactiveColor;
              return t0$30;
            })())}), $creationLocationd_0dea112b090073317d4: C[5] || CT.C5});
      }
      static ['_#new#tearOff'](T) {
        return new (radio._RadioState$(T)).new();
      }
    }
    (_RadioState.new = function() {
      this[_painter] = new radio._RadioPainter.new();
      _RadioState.__proto__.new.call(this);
      ;
    }).prototype = _RadioState.prototype;
    dart.addTypeTests(_RadioState);
    _RadioState.prototype[_is__RadioState_default] = true;
    dart.addTypeCaches(_RadioState);
    dart.setMethodSignature(_RadioState, () => ({
      __proto__: dart.getMethods(_RadioState.__proto__),
      [_handleChanged]: dart.fnType(dart.void, [dart.nullable(core.bool)]),
      build: dart.fnType(framework.Widget, [framework.BuildContext])
    }));
    dart.setGetterSignature(_RadioState, () => ({
      __proto__: dart.getGetters(_RadioState.__proto__),
      onChanged: dart.nullable(dart.fnType(dart.void, [dart.nullable(core.bool)])),
      tristate: core.bool,
      value: dart.nullable(core.bool),
      [_widgetFillColor]: material_state.MaterialStateProperty$(dart.nullable(ui.Color)),
      [_defaultFillColor]: material_state.MaterialStateProperty$(ui.Color)
    }));
    dart.setLibraryUri(_RadioState, I[1]);
    dart.setFieldSignature(_RadioState, () => ({
      __proto__: dart.getFields(_RadioState.__proto__),
      [_painter]: dart.finalFieldType(radio._RadioPainter)
    }));
    return _RadioState;
  });
  radio._RadioState = radio._RadioState$();
  dart.addTypeTests(radio._RadioState, _is__RadioState_default);
  var _repaint = dart.privateName(radio, "_repaint");
  var _repaint$ = dart.privateName(custom_paint, "_repaint");
  radio._RadioPainter = class _RadioPainter extends toggleable.ToggleablePainter {
    paint(canvas, size) {
      let t0;
      this.paintRadialReaction({canvas: canvas, origin: size.center(ui.Offset.zero)});
      let center = ui.Offset.zero['&'](size).center;
      let paint = (t0 = ui.Paint.new(), (() => {
        t0.color = dart.nullCheck(ui.Color.lerp(this.inactiveColor, this.activeColor, this.position.value));
        t0.style = ui.PaintingStyle.stroke;
        t0.strokeWidth = 2.0;
        return t0;
      })());
      canvas.drawCircle(center, 8, paint);
      if (!this.position.isDismissed) {
        paint.style = ui.PaintingStyle.fill;
        canvas.drawCircle(center, 4.5 * this.position.value, paint);
      }
    }
    static ['_#new#tearOff']() {
      return new radio._RadioPainter.new();
    }
    get [_repaint$]() {
      return T$.ListenableN().as(this[$noSuchMethod](new core._Invocation.getter(C[6] || CT.C6)));
    }
  };
  (radio._RadioPainter.new = function() {
    radio._RadioPainter.__proto__.new.call(this);
    ;
  }).prototype = radio._RadioPainter.prototype;
  dart.addTypeTests(radio._RadioPainter);
  dart.addTypeCaches(radio._RadioPainter);
  dart.setMethodSignature(radio._RadioPainter, () => ({
    __proto__: dart.getMethods(radio._RadioPainter.__proto__),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Size])
  }));
  dart.setGetterSignature(radio._RadioPainter, () => ({
    __proto__: dart.getGetters(radio._RadioPainter.__proto__),
    [_repaint$]: dart.nullable(change_notifier.Listenable)
  }));
  dart.setLibraryUri(radio._RadioPainter, I[1]);
  dart.defineLazy(radio, {
    /*radio._kOuterRadius*/get _kOuterRadius() {
      return 8;
    },
    /*radio._kInnerRadius*/get _kInnerRadius() {
      return 4.5;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/material/radio.dart", {
    "package:flutter/src/material/radio.dart": radio
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["radio.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../packages/flutter/src/material/radio.dart.lib.js"}');
  // Exports:
  return {
    src__material__radio: radio
  };
}));

//# sourceMappingURL=radio.dart.lib.js.map
