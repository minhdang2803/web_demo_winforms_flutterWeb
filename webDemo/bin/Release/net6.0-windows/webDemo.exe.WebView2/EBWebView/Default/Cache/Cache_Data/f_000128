define(['dart_sdk', 'packages/petitparser/src/parser/character/predicate.dart', 'packages/petitparser/src/parser/character/code.dart', 'packages/petitparser/src/parser/character/constant.dart'], (function load__packages__petitparser__src__parser__combinator__optional_dart(dart_sdk, packages__petitparser__src__parser__character__predicate$46dart, packages__petitparser__src__parser__character__code$46dart, packages__petitparser__src__parser__character__constant$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const _native_typed_data = dart_sdk._native_typed_data;
  const typed_data = dart_sdk.typed_data;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const predicate = packages__petitparser__src__parser__character__predicate$46dart.src__parser__character__predicate;
  const code = packages__petitparser__src__parser__character__code$46dart.src__parser__character__code;
  const constant = packages__petitparser__src__parser__character__constant$46dart.src__parser__character__constant;
  var optional = Object.create(dart.library);
  var parser = Object.create(dart.library);
  var range = Object.create(dart.library);
  var lookup = Object.create(dart.library);
  var optimize = Object.create(dart.library);
  var char$ = Object.create(dart.library);
  var token$ = Object.create(dart.library);
  var sequence = Object.create(dart.library);
  var and = Object.create(dart.library);
  var matches = Object.create(dart.library);
  var repeating = Object.create(dart.library);
  var possessive = Object.create(dart.library);
  var any = Object.create(dart.library);
  var list = Object.create(dart.library);
  var failure_joiner = Object.create(dart.library);
  var choice = Object.create(dart.library);
  var delegate = Object.create(dart.library);
  var map = Object.create(dart.library);
  var success = Object.create(dart.library);
  var parser$ = Object.create(dart.library);
  var matches_skipping = Object.create(dart.library);
  var token$0 = Object.create(dart.library);
  var context = Object.create(dart.library);
  var result = Object.create(dart.library);
  var failure = Object.create(dart.library);
  var exception = Object.create(dart.library);
  var $_equals = dartx._equals;
  var $runtimeType = dartx.runtimeType;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $codeUnitAt = dartx.codeUnitAt;
  var $toString = dartx.toString;
  var $first = dartx.first;
  var $last = dartx.last;
  var $rightShift = dartx['>>'];
  var $_set = dartx._set;
  var $codeUnits = dartx.codeUnits;
  var $map = dartx.map;
  var $sort = dartx.sort;
  var $isEmpty = dartx.isEmpty;
  var $add = dartx.add;
  var $fold = dartx.fold;
  var $toLowerCase = dartx.toLowerCase;
  var $toUpperCase = dartx.toUpperCase;
  var $substring = dartx.substring;
  var $hashCode = dartx.hashCode;
  var $iterator = dartx.iterator;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T$ = {
    JSArrayOfParser: () => (T$.JSArrayOfParser = dart.constFn(_interceptors.JSArray$(parser$.Parser)))(),
    LinkedHashSetOfParser: () => (T$.LinkedHashSetOfParser = dart.constFn(collection.LinkedHashSet$(parser$.Parser)))(),
    intToRangeCharPredicate: () => (T$.intToRangeCharPredicate = dart.constFn(dart.fnType(range.RangeCharPredicate, [core.int])))(),
    ListOfRangeCharPredicate: () => (T$.ListOfRangeCharPredicate = dart.constFn(core.List$(range.RangeCharPredicate)))(),
    RangeCharPredicateAndRangeCharPredicateToint: () => (T$.RangeCharPredicateAndRangeCharPredicateToint = dart.constFn(dart.fnType(core.int, [range.RangeCharPredicate, range.RangeCharPredicate])))(),
    JSArrayOfRangeCharPredicate: () => (T$.JSArrayOfRangeCharPredicate = dart.constFn(_interceptors.JSArray$(range.RangeCharPredicate)))(),
    intAndRangeCharPredicateToint: () => (T$.intAndRangeCharPredicateToint = dart.constFn(dart.fnType(core.int, [core.int, range.RangeCharPredicate])))(),
    JSArrayOfint: () => (T$.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    ListOfParser: () => (T$.ListOfParser = dart.constFn(core.List$(parser$.Parser)))(),
    ParserOfList: () => (T$.ParserOfList = dart.constFn(parser$.Parser$(core.List)))(),
    ParserToParserOfList: () => (T$.ParserToParserOfList = dart.constFn(dart.fnType(T$.ParserOfList(), [parser$.Parser])))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    FailureOfTAndFailureOfTToFailureOfT: () => (T$.FailureOfTAndFailureOfTToFailureOfT = dart.constFn(dart.gFnType(T => [failure.Failure$(T), [failure.Failure$(T), failure.Failure$(T)]], T => [T$.ObjectN()])))(),
    FailureAndFailureToFailure: () => (T$.FailureAndFailureToFailure = dart.constFn(dart.fnType(failure.Failure, [failure.Failure, failure.Failure])))(),
    FailureAndFailureToNFailure: () => (T$.FailureAndFailureToNFailure = dart.constFn(dart.nullable(T$.FailureAndFailureToFailure())))(),
    Parser__ToChoiceParser: () => (T$.Parser__ToChoiceParser = dart.constFn(dart.fnType(choice.ChoiceParser, [parser$.Parser], {failureJoiner: T$.FailureAndFailureToNFailure()}, {})))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.constList([], parser$.Parser);
    },
    get C1() {
      return C[1] = dart.constList([1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648.0], core.int);
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: constant.ConstantCharPredicate.prototype,
        [ConstantCharPredicate_constant]: false
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: constant.ConstantCharPredicate.prototype,
        [ConstantCharPredicate_constant]: true
      });
    },
    get C4() {
      return C[4] = dart.fn(failure_joiner.selectLast, T$.FailureOfTAndFailureOfTToFailureOfT());
    }
  }, false);
  var C = Array(5).fill(void 0);
  var I = [
    "package:petitparser/src/core/parser.dart",
    "package:petitparser/src/parser/combinator/delegate.dart",
    "package:petitparser/src/parser/combinator/optional.dart",
    "package:petitparser/src/parser/character/parser.dart",
    "package:petitparser/src/parser/character/range.dart",
    "package:petitparser/src/parser/character/lookup.dart",
    "package:petitparser/src/parser/character/char.dart",
    "package:petitparser/src/core/token.dart",
    "package:petitparser/src/parser/action/token.dart",
    "package:petitparser/src/parser/combinator/list.dart",
    "package:petitparser/src/parser/combinator/sequence.dart",
    "package:petitparser/src/parser/combinator/and.dart",
    "package:petitparser/src/parser/repeater/repeating.dart",
    "package:petitparser/src/parser/repeater/possessive.dart",
    "package:petitparser/src/parser/predicate/any.dart",
    "package:petitparser/src/parser/combinator/choice.dart",
    "package:petitparser/src/parser/action/map.dart",
    "package:petitparser/src/context/context.dart",
    "package:petitparser/src/context/result.dart",
    "package:petitparser/src/context/success.dart",
    "package:petitparser/src/context/failure.dart",
    "package:petitparser/src/core/exception.dart"
  ];
  var otherwise$ = dart.privateName(optional, "OptionalParser.otherwise");
  var delegate$ = dart.privateName(delegate, "DelegateParser.delegate");
  const _is_Parser_default = Symbol('_is_Parser_default');
  parser$.Parser$ = dart.generic(R => {
    class Parser extends core.Object {
      fastParseOn(buffer, position) {
        let result = this.parseOn(new context.Context.new(buffer, position));
        return result.isSuccess ? result.position : -1;
      }
      parse(input) {
        return this.parseOn(new context.Context.new(input, 0));
      }
      isEqualTo(other, seen = null) {
        if (this[$_equals](other)) {
          return true;
        }
        if (!this[$runtimeType]._equals(other[$runtimeType]) || !this.hasEqualProperties(other)) {
          return false;
        }
        seen == null ? seen = T$.LinkedHashSetOfParser().new() : null;
        return !seen.add(this) || this.hasEqualChildren(other, seen);
      }
      hasEqualProperties(other) {
        parser$.Parser.as(other);
        return true;
      }
      hasEqualChildren(other, seen) {
        parser$.Parser.as(other);
        let thisChildren = this.children;
        let otherChildren = other.children;
        if (thisChildren[$length] !== otherChildren[$length]) {
          return false;
        }
        for (let i = 0; i < thisChildren[$length]; i = i + 1) {
          if (!thisChildren[$_get](i).isEqualTo(otherChildren[$_get](i), seen)) {
            return false;
          }
        }
        return true;
      }
      get children() {
        return C[0] || CT.C0;
      }
      replace(source, target) {
      }
      captureResultGeneric(T, callback) {
        return callback(R, this);
      }
    }
    (Parser.new = function() {
      ;
    }).prototype = Parser.prototype;
    dart.addTypeTests(Parser);
    Parser.prototype[_is_Parser_default] = true;
    dart.addTypeCaches(Parser);
    dart.setMethodSignature(Parser, () => ({
      __proto__: dart.getMethods(Parser.__proto__),
      fastParseOn: dart.fnType(core.int, [core.String, core.int]),
      parse: dart.fnType(result.Result$(R), [core.String]),
      isEqualTo: dart.fnType(core.bool, [parser$.Parser], [dart.nullable(core.Set$(parser$.Parser))]),
      hasEqualProperties: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      hasEqualChildren: dart.fnType(core.bool, [dart.nullable(core.Object), core.Set$(parser$.Parser)]),
      replace: dart.fnType(dart.void, [parser$.Parser, parser$.Parser]),
      captureResultGeneric: dart.gFnType(T => [T, [dart.gFnType(R => [T, [parser$.Parser$(R)]], R => [dart.nullable(core.Object)])]], T => [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(Parser, () => ({
      __proto__: dart.getGetters(Parser.__proto__),
      children: core.List$(parser$.Parser)
    }));
    dart.setLibraryUri(Parser, I[0]);
    return Parser;
  });
  parser$.Parser = parser$.Parser$();
  dart.addTypeTests(parser$.Parser, _is_Parser_default);
  const _is_DelegateParser_default = Symbol('_is_DelegateParser_default');
  delegate.DelegateParser$ = dart.generic((T, R) => {
    var __t$ParserOfT = () => (__t$ParserOfT = dart.constFn(parser$.Parser$(T)))();
    class DelegateParser extends parser$.Parser$(R) {
      get delegate() {
        return this[delegate$];
      }
      set delegate(value) {
        this[delegate$] = __t$ParserOfT().as(value);
      }
      get children() {
        return T$.JSArrayOfParser().of([this.delegate]);
      }
      replace(source, target) {
        super.replace(source, target);
        if (this.delegate[$_equals](source)) {
          this.delegate = __t$ParserOfT().as(target);
        }
      }
    }
    (DelegateParser.new = function(delegate) {
      this[delegate$] = delegate;
      DelegateParser.__proto__.new.call(this);
      ;
    }).prototype = DelegateParser.prototype;
    dart.addTypeTests(DelegateParser);
    DelegateParser.prototype[_is_DelegateParser_default] = true;
    dart.addTypeCaches(DelegateParser);
    dart.setLibraryUri(DelegateParser, I[1]);
    dart.setFieldSignature(DelegateParser, () => ({
      __proto__: dart.getFields(DelegateParser.__proto__),
      delegate: dart.fieldType(parser$.Parser$(T))
    }));
    return DelegateParser;
  });
  delegate.DelegateParser = delegate.DelegateParser$();
  dart.addTypeTests(delegate.DelegateParser, _is_DelegateParser_default);
  const _is_OptionalParser_default = Symbol('_is_OptionalParser_default');
  optional.OptionalParser$ = dart.generic(R => {
    var __t$OptionalParserOfR = () => (__t$OptionalParserOfR = dart.constFn(optional.OptionalParser$(R)))();
    class OptionalParser extends delegate.DelegateParser$(R, R) {
      get otherwise() {
        return this[otherwise$];
      }
      set otherwise(value) {
        super.otherwise = value;
      }
      static ['_#new#tearOff'](R, delegate, otherwise) {
        return new (optional.OptionalParser$(R)).new(delegate, otherwise);
      }
      parseOn(context) {
        let result = this.delegate.parseOn(context);
        if (result.isSuccess) {
          return result;
        } else {
          return context.success(R, this.otherwise);
        }
      }
      fastParseOn(buffer, position) {
        let result = this.delegate.fastParseOn(buffer, position);
        return result < 0 ? position : result;
      }
      copy() {
        return new (__t$OptionalParserOfR()).new(this.delegate, this.otherwise);
      }
      hasEqualProperties(other) {
        __t$OptionalParserOfR().as(other);
        return super.hasEqualProperties(other) && dart.equals(this.otherwise, other.otherwise);
      }
    }
    (OptionalParser.new = function(delegate, otherwise) {
      this[otherwise$] = otherwise;
      OptionalParser.__proto__.new.call(this, delegate);
      ;
    }).prototype = OptionalParser.prototype;
    dart.addTypeTests(OptionalParser);
    OptionalParser.prototype[_is_OptionalParser_default] = true;
    dart.addTypeCaches(OptionalParser);
    dart.setMethodSignature(OptionalParser, () => ({
      __proto__: dart.getMethods(OptionalParser.__proto__),
      parseOn: dart.fnType(result.Result$(R), [context.Context]),
      copy: dart.fnType(optional.OptionalParser$(R), [])
    }));
    dart.setLibraryUri(OptionalParser, I[2]);
    dart.setFieldSignature(OptionalParser, () => ({
      __proto__: dart.getFields(OptionalParser.__proto__),
      otherwise: dart.finalFieldType(R)
    }));
    return OptionalParser;
  });
  optional.OptionalParser = optional.OptionalParser$();
  dart.addTypeTests(optional.OptionalParser, _is_OptionalParser_default);
  optional['OptionalParserExtension|optional'] = function OptionalParserExtension$124optional(T, $this) {
    return new (optional.OptionalParser$(dart.nullable(T))).new($this, null);
  };
  optional['OptionalParserExtension|get#optional'] = function OptionalParserExtension$124get$35optional(T, $this) {
    return dart.fn(() => optional['OptionalParserExtension|optional'](T, $this), dart.fnType(parser$.Parser$(dart.nullable(T)), []));
  };
  optional['OptionalParserExtension|optionalWith'] = function OptionalParserExtension$124optionalWith(T, $this, value) {
    return new (optional.OptionalParser$(T)).new($this, value);
  };
  optional['OptionalParserExtension|get#optionalWith'] = function OptionalParserExtension$124get$35optionalWith(T, $this) {
    return dart.fn(value => optional['OptionalParserExtension|optionalWith'](T, $this, value), dart.fnType(parser$.Parser$(T), [T]));
  };
  var predicate$ = dart.privateName(parser, "CharacterParser.predicate");
  var message$ = dart.privateName(parser, "CharacterParser.message");
  parser.CharacterParser = class CharacterParser extends parser$.Parser$(core.String) {
    get predicate() {
      return this[predicate$];
    }
    set predicate(value) {
      super.predicate = value;
    }
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    static ['_#new#tearOff'](predicate, message) {
      return new parser.CharacterParser.new(predicate, message);
    }
    parseOn(context) {
      let buffer = context.buffer;
      let position = context.position;
      if (position < buffer.length && this.predicate.test(buffer[$codeUnitAt](position))) {
        return context.success(core.String, buffer[$_get](position), position + 1);
      }
      return context.failure(core.String, this.message);
    }
    fastParseOn(buffer, position) {
      return position < buffer.length && this.predicate.test(buffer[$codeUnitAt](position)) ? position + 1 : -1;
    }
    toString() {
      return super[$toString]() + "[" + this.message + "]";
    }
    copy() {
      return new parser.CharacterParser.new(this.predicate, this.message);
    }
    hasEqualProperties(other) {
      parser.CharacterParser.as(other);
      return super.hasEqualProperties(other) && this.predicate.isEqualTo(other.predicate) && this.message === other.message;
    }
  };
  (parser.CharacterParser.new = function(predicate, message) {
    this[predicate$] = predicate;
    this[message$] = message;
    parser.CharacterParser.__proto__.new.call(this);
    ;
  }).prototype = parser.CharacterParser.prototype;
  dart.addTypeTests(parser.CharacterParser);
  dart.addTypeCaches(parser.CharacterParser);
  dart.setMethodSignature(parser.CharacterParser, () => ({
    __proto__: dart.getMethods(parser.CharacterParser.__proto__),
    parseOn: dart.fnType(result.Result$(core.String), [context.Context]),
    copy: dart.fnType(parser.CharacterParser, [])
  }));
  dart.setLibraryUri(parser.CharacterParser, I[3]);
  dart.setFieldSignature(parser.CharacterParser, () => ({
    __proto__: dart.getFields(parser.CharacterParser.__proto__),
    predicate: dart.finalFieldType(predicate.CharacterPredicate),
    message: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(parser.CharacterParser, ['toString']);
  var start$ = dart.privateName(range, "RangeCharPredicate.start");
  var stop$ = dart.privateName(range, "RangeCharPredicate.stop");
  range.RangeCharPredicate = class RangeCharPredicate extends core.Object {
    get start() {
      return this[start$];
    }
    set start(value) {
      super.start = value;
    }
    get stop() {
      return this[stop$];
    }
    set stop(value) {
      super.stop = value;
    }
    static ['_#new#tearOff'](start, stop) {
      return new range.RangeCharPredicate.new(start, stop);
    }
    test(value) {
      return this.start <= value && value <= this.stop;
    }
    isEqualTo(other) {
      return range.RangeCharPredicate.is(other) && other.start === this.start && other.stop === this.stop;
    }
  };
  (range.RangeCharPredicate.new = function(start, stop) {
    this[start$] = start;
    this[stop$] = stop;
    if (this.start > this.stop) {
      dart.throw(new core.ArgumentError.new("Invalid range: " + dart.str(this.start) + "-" + dart.str(this.stop)));
    }
  }).prototype = range.RangeCharPredicate.prototype;
  dart.addTypeTests(range.RangeCharPredicate);
  dart.addTypeCaches(range.RangeCharPredicate);
  range.RangeCharPredicate[dart.implements] = () => [predicate.CharacterPredicate];
  dart.setMethodSignature(range.RangeCharPredicate, () => ({
    __proto__: dart.getMethods(range.RangeCharPredicate.__proto__),
    test: dart.fnType(core.bool, [core.int]),
    isEqualTo: dart.fnType(core.bool, [predicate.CharacterPredicate])
  }));
  dart.setLibraryUri(range.RangeCharPredicate, I[4]);
  dart.setFieldSignature(range.RangeCharPredicate, () => ({
    __proto__: dart.getFields(range.RangeCharPredicate.__proto__),
    start: dart.finalFieldType(core.int),
    stop: dart.finalFieldType(core.int)
  }));
  range.range = function range$(start, stop, message = null) {
    let t4;
    return new parser.CharacterParser.new(new range.RangeCharPredicate.new(code.toCharCode(start), code.toCharCode(stop)), (t4 = message, t4 == null ? "[" + code.toReadableString(start) + "-" + code.toReadableString(stop) + "] expected" : t4));
  };
  var start = dart.privateName(lookup, "LookupCharPredicate.start");
  var stop = dart.privateName(lookup, "LookupCharPredicate.stop");
  var bits = dart.privateName(lookup, "LookupCharPredicate.bits");
  var _testBit = dart.privateName(lookup, "_testBit");
  lookup.LookupCharPredicate = class LookupCharPredicate extends core.Object {
    get start() {
      return this[start];
    }
    set start(value) {
      super.start = value;
    }
    get stop() {
      return this[stop];
    }
    set stop(value) {
      super.stop = value;
    }
    get bits() {
      return this[bits];
    }
    set bits(value) {
      super.bits = value;
    }
    static ['_#new#tearOff'](ranges) {
      return new lookup.LookupCharPredicate.new(ranges);
    }
    test(value) {
      return this.start <= value && value <= this.stop && this[_testBit](value - this.start);
    }
    [_testBit](value) {
      return (this.bits[$_get](value[$rightShift](5)) & lookup.LookupCharPredicate.mask[$_get]((value & 31) >>> 0)) !== 0;
    }
    isEqualTo(other) {
      return lookup.LookupCharPredicate.is(other) && other.start === this.start && other.stop === this.stop && other.bits[$_equals](this.bits);
    }
  };
  (lookup.LookupCharPredicate.new = function(ranges) {
    let t5, t4;
    this[start] = ranges[$first].start;
    this[stop] = ranges[$last].stop;
    this[bits] = _native_typed_data.NativeUint32List.new((ranges[$last].stop - ranges[$first].start + 1 + 31)[$rightShift](5));
    for (let range of ranges) {
      for (let index = range.start - this.start; index <= range.stop - this.start; index = index + 1) {
        t4 = this.bits;
        t5 = index[$rightShift](5);
        t4[$_set](t5, (t4[$_get](t5) | lookup.LookupCharPredicate.mask[$_get]((index & 31) >>> 0)) >>> 0);
      }
    }
  }).prototype = lookup.LookupCharPredicate.prototype;
  dart.addTypeTests(lookup.LookupCharPredicate);
  dart.addTypeCaches(lookup.LookupCharPredicate);
  lookup.LookupCharPredicate[dart.implements] = () => [predicate.CharacterPredicate];
  dart.setMethodSignature(lookup.LookupCharPredicate, () => ({
    __proto__: dart.getMethods(lookup.LookupCharPredicate.__proto__),
    test: dart.fnType(core.bool, [core.int]),
    [_testBit]: dart.fnType(core.bool, [core.int]),
    isEqualTo: dart.fnType(core.bool, [predicate.CharacterPredicate])
  }));
  dart.setLibraryUri(lookup.LookupCharPredicate, I[5]);
  dart.setFieldSignature(lookup.LookupCharPredicate, () => ({
    __proto__: dart.getFields(lookup.LookupCharPredicate.__proto__),
    start: dart.finalFieldType(core.int),
    stop: dart.finalFieldType(core.int),
    bits: dart.finalFieldType(typed_data.Uint32List)
  }));
  dart.setStaticFieldSignature(lookup.LookupCharPredicate, () => ['shift', 'offset', 'mask']);
  dart.defineLazy(lookup.LookupCharPredicate, {
    /*lookup.LookupCharPredicate.shift*/get shift() {
      return 5;
    },
    /*lookup.LookupCharPredicate.offset*/get offset() {
      return 31;
    },
    /*lookup.LookupCharPredicate.mask*/get mask() {
      return C[1] || CT.C1;
    }
  }, false);
  var ConstantCharPredicate_constant = dart.privateName(constant, "ConstantCharPredicate.constant");
  optimize.optimizedString = function optimizedString(string) {
    return optimize.optimizedRanges(string[$codeUnits][$map](range.RangeCharPredicate, dart.fn(value => new range.RangeCharPredicate.new(value, value), T$.intToRangeCharPredicate())));
  };
  optimize.optimizedRanges = function optimizedRanges(ranges) {
    let sortedRanges = T$.ListOfRangeCharPredicate().of(ranges, {growable: false});
    sortedRanges[$sort](dart.fn((first, second) => first.start !== second.start ? first.start - second.start : first.stop - second.stop, T$.RangeCharPredicateAndRangeCharPredicateToint()));
    let mergedRanges = T$.JSArrayOfRangeCharPredicate().of([]);
    for (let thisRange of sortedRanges) {
      if (mergedRanges[$isEmpty]) {
        mergedRanges[$add](thisRange);
      } else {
        let lastRange = mergedRanges[$last];
        if (lastRange.stop + 1 >= thisRange.start) {
          let characterRange = new range.RangeCharPredicate.new(lastRange.start, thisRange.stop);
          mergedRanges[$_set](mergedRanges[$length] - 1, characterRange);
        } else {
          mergedRanges[$add](thisRange);
        }
      }
    }
    let matchingCount = mergedRanges[$fold](core.int, 0, dart.fn((current, range) => current + (range.stop - range.start + 1), T$.intAndRangeCharPredicateToint()));
    if (matchingCount === 0) {
      return C[2] || CT.C2;
    } else if (matchingCount - 1 === 65535) {
      return C[3] || CT.C3;
    } else if (mergedRanges[$length] === 1) {
      return mergedRanges[$_get](0).start === mergedRanges[$_get](0).stop ? new char$.SingleCharPredicate.new(mergedRanges[$_get](0).start) : mergedRanges[$_get](0);
    } else {
      return new lookup.LookupCharPredicate.new(mergedRanges);
    }
  };
  var value$ = dart.privateName(char$, "SingleCharPredicate.value");
  char$.SingleCharPredicate = class SingleCharPredicate extends predicate.CharacterPredicate {
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](value) {
      return new char$.SingleCharPredicate.new(value);
    }
    test(value) {
      return this.value === value;
    }
    isEqualTo(other) {
      return char$.SingleCharPredicate.is(other) && other.value === this.value;
    }
  };
  (char$.SingleCharPredicate.new = function(value) {
    this[value$] = value;
    char$.SingleCharPredicate.__proto__.new.call(this);
    ;
  }).prototype = char$.SingleCharPredicate.prototype;
  dart.addTypeTests(char$.SingleCharPredicate);
  dart.addTypeCaches(char$.SingleCharPredicate);
  dart.setMethodSignature(char$.SingleCharPredicate, () => ({
    __proto__: dart.getMethods(char$.SingleCharPredicate.__proto__),
    test: dart.fnType(core.bool, [core.int]),
    isEqualTo: dart.fnType(core.bool, [predicate.CharacterPredicate])
  }));
  dart.setLibraryUri(char$.SingleCharPredicate, I[6]);
  dart.setFieldSignature(char$.SingleCharPredicate, () => ({
    __proto__: dart.getFields(char$.SingleCharPredicate.__proto__),
    value: dart.finalFieldType(core.int)
  }));
  char$.char = function char$36(char, message = null) {
    let t4;
    return new parser.CharacterParser.new(new char$.SingleCharPredicate.new(code.toCharCode(char)), (t4 = message, t4 == null ? "\"" + code.toReadableString(char) + "\" expected" : t4));
  };
  char$.charIgnoringCase = function charIgnoringCase(char, message = null) {
    let t4;
    let lowerCase = code.toCharCode(char[$toLowerCase]());
    let upperCase = code.toCharCode(char[$toUpperCase]());
    return new parser.CharacterParser.new(optimize.optimizedRanges(T$.JSArrayOfRangeCharPredicate().of([new range.RangeCharPredicate.new(lowerCase, lowerCase), new range.RangeCharPredicate.new(upperCase, upperCase)])), (t4 = message, t4 == null ? "\"" + code.toReadableString(char) + "\" (case-insensitive) expected" : t4));
  };
  var value$0 = dart.privateName(token$0, "Token.value");
  var buffer$ = dart.privateName(token$0, "Token.buffer");
  var start$0 = dart.privateName(token$0, "Token.start");
  var stop$0 = dart.privateName(token$0, "Token.stop");
  const _is_Token_default = Symbol('_is_Token_default');
  token$0.Token$ = dart.generic(T => {
    class Token extends core.Object {
      get value() {
        return this[value$0];
      }
      set value(value) {
        super.value = value;
      }
      get buffer() {
        return this[buffer$];
      }
      set buffer(value) {
        super.buffer = value;
      }
      get start() {
        return this[start$0];
      }
      set start(value) {
        super.start = value;
      }
      get stop() {
        return this[stop$0];
      }
      set stop(value) {
        super.stop = value;
      }
      static ['_#new#tearOff'](T, value, buffer, start, stop) {
        return new (token$0.Token$(T)).new(value, buffer, start, stop);
      }
      get input() {
        return this.buffer[$substring](this.start, this.stop);
      }
      get length() {
        return this.stop - this.start;
      }
      get line() {
        return token$0.Token.lineAndColumnOf(this.buffer, this.start)[$_get](0);
      }
      get column() {
        return token$0.Token.lineAndColumnOf(this.buffer, this.start)[$_get](1);
      }
      map(R, mapper) {
        return new (token$0.Token$(R)).new(mapper(this.value), this.buffer, this.start, this.stop);
      }
      toString() {
        return "Token[" + token$0.Token.positionString(this.buffer, this.start) + "]: " + dart.str(this.value);
      }
      _equals(other) {
        if (other == null) return false;
        return token$0.Token.is(other) && dart.equals(this.value, other.value) && this.start === other.start && this.stop === other.stop;
      }
      get hashCode() {
        return dart.hashCode(this.value) + this.start[$hashCode] + this.stop[$hashCode];
      }
      static join(T, token) {
        let iterator = token[$iterator];
        if (!iterator.moveNext()) {
          dart.throw(new core.ArgumentError.value(token, "token", "Require at least one token"));
        }
        let value = _interceptors.JSArray$(T).of([iterator.current.value]);
        let buffer = iterator.current.buffer;
        let start = iterator.current.start;
        let stop = iterator.current.stop;
        while (iterator.moveNext()) {
          if (buffer !== iterator.current.buffer) {
            dart.throw(new core.ArgumentError.value(token, "token", "Token do not use same buffer"));
          }
          value[$add](iterator.current.value);
          start = math.min(core.int, start, iterator.current.start);
          stop = math.max(core.int, stop, iterator.current.stop);
        }
        return new (token$0.Token$(core.List$(T))).new(value, buffer, start, stop);
      }
      static newlineParser() {
        return token$0.Token._newlineParser;
      }
      static lineAndColumnOf(buffer, position) {
        let line = 1;
        let offset = 0;
        let iter = matches_skipping['MatchesSkippingParser|matchesSkipping'](token$0.Token, token$['TokenParserExtension|token'](dart.dynamic, token$0.Token.newlineParser()), buffer);
        for (let token of iter) {
          if (position < token.stop) {
            return T$.JSArrayOfint().of([line, position - offset + 1]);
          }
          line = line + 1;
          offset = token.stop;
        }
        return T$.JSArrayOfint().of([line, position - offset + 1]);
      }
      static positionString(buffer, position) {
        let lineAndColumn = token$0.Token.lineAndColumnOf(buffer, position);
        return dart.str(lineAndColumn[$_get](0)) + ":" + dart.str(lineAndColumn[$_get](1));
      }
    }
    (Token.new = function(value, buffer, start, stop) {
      this[value$0] = value;
      this[buffer$] = buffer;
      this[start$0] = start;
      this[stop$0] = stop;
      ;
    }).prototype = Token.prototype;
    dart.addTypeTests(Token);
    Token.prototype[_is_Token_default] = true;
    dart.addTypeCaches(Token);
    dart.setMethodSignature(Token, () => ({
      __proto__: dart.getMethods(Token.__proto__),
      map: dart.gFnType(R => [token$0.Token$(R), [dart.fnType(R, [T])]], R => [dart.nullable(core.Object)])
    }));
    dart.setStaticMethodSignature(Token, () => ['join', 'newlineParser', 'lineAndColumnOf', 'positionString']);
    dart.setGetterSignature(Token, () => ({
      __proto__: dart.getGetters(Token.__proto__),
      input: core.String,
      length: core.int,
      line: core.int,
      column: core.int
    }));
    dart.setLibraryUri(Token, I[7]);
    dart.setFieldSignature(Token, () => ({
      __proto__: dart.getFields(Token.__proto__),
      value: dart.finalFieldType(T),
      buffer: dart.finalFieldType(core.String),
      start: dart.finalFieldType(core.int),
      stop: dart.finalFieldType(core.int)
    }));
    dart.setStaticFieldSignature(Token, () => ['_newlineParser']);
    dart.defineExtensionMethods(Token, ['toString', '_equals']);
    dart.defineExtensionAccessors(Token, ['hashCode']);
    return Token;
  });
  token$0.Token = token$0.Token$();
  dart.defineLazy(token$0.Token, {
    /*token$0.Token._newlineParser*/get _newlineParser() {
      return choice['ChoiceParserExtension||'](char$.char("\n"), sequence['SequenceParserExtension|&'](char$.char("\r"), optional['OptionalParserExtension|optional'](core.String, char$.char("\n"))));
    }
  }, false);
  dart.addTypeTests(token$0.Token, _is_Token_default);
  const _is_TokenParser_default = Symbol('_is_TokenParser_default');
  token$.TokenParser$ = dart.generic(R => {
    var __t$TokenOfR = () => (__t$TokenOfR = dart.constFn(token$0.Token$(R)))();
    var __t$TokenParserOfR = () => (__t$TokenParserOfR = dart.constFn(token$.TokenParser$(R)))();
    class TokenParser extends delegate.DelegateParser$(R, token$0.Token$(R)) {
      static ['_#new#tearOff'](R, delegate) {
        return new (token$.TokenParser$(R)).new(delegate);
      }
      parseOn(context) {
        let result = this.delegate.parseOn(context);
        if (result.isSuccess) {
          let token = new (__t$TokenOfR()).new(result.value, context.buffer, context.position, result.position);
          return result.success(__t$TokenOfR(), token);
        } else {
          return result.failure(__t$TokenOfR(), result.message);
        }
      }
      fastParseOn(buffer, position) {
        return this.delegate.fastParseOn(buffer, position);
      }
      copy() {
        return new (__t$TokenParserOfR()).new(this.delegate);
      }
    }
    (TokenParser.new = function(delegate) {
      TokenParser.__proto__.new.call(this, delegate);
      ;
    }).prototype = TokenParser.prototype;
    dart.addTypeTests(TokenParser);
    TokenParser.prototype[_is_TokenParser_default] = true;
    dart.addTypeCaches(TokenParser);
    dart.setMethodSignature(TokenParser, () => ({
      __proto__: dart.getMethods(TokenParser.__proto__),
      parseOn: dart.fnType(result.Result$(token$0.Token$(R)), [context.Context]),
      copy: dart.fnType(token$.TokenParser$(R), [])
    }));
    dart.setLibraryUri(TokenParser, I[8]);
    return TokenParser;
  });
  token$.TokenParser = token$.TokenParser$();
  dart.addTypeTests(token$.TokenParser, _is_TokenParser_default);
  token$['TokenParserExtension|token'] = function TokenParserExtension$124token(T, $this) {
    return new (token$.TokenParser$(T)).new($this);
  };
  token$['TokenParserExtension|get#token'] = function TokenParserExtension$124get$35token(T, $this) {
    return dart.fn(() => token$['TokenParserExtension|token'](T, $this), dart.fnType(parser$.Parser$(token$0.Token$(T)), []));
  };
  var children$ = dart.privateName(list, "ListParser.children");
  const _is_ListParser_default = Symbol('_is_ListParser_default');
  list.ListParser$ = dart.generic((T, R) => {
    var __t$ParserOfT = () => (__t$ParserOfT = dart.constFn(parser$.Parser$(T)))();
    var __t$ListOfParserOfT = () => (__t$ListOfParserOfT = dart.constFn(core.List$(__t$ParserOfT())))();
    class ListParser extends parser$.Parser$(R) {
      get children() {
        return this[children$];
      }
      set children(value) {
        super.children = value;
      }
      replace(source, target) {
        super.replace(source, target);
        for (let i = 0; i < this.children[$length]; i = i + 1) {
          if (this.children[$_get](i)[$_equals](source)) {
            this.children[$_set](i, __t$ParserOfT().as(target));
          }
        }
      }
    }
    (ListParser.new = function(children) {
      this[children$] = __t$ListOfParserOfT().of(children, {growable: false});
      ListParser.__proto__.new.call(this);
      ;
    }).prototype = ListParser.prototype;
    dart.addTypeTests(ListParser);
    ListParser.prototype[_is_ListParser_default] = true;
    dart.addTypeCaches(ListParser);
    dart.setLibraryUri(ListParser, I[9]);
    dart.setFieldSignature(ListParser, () => ({
      __proto__: dart.getFields(ListParser.__proto__),
      children: dart.finalFieldType(core.List$(parser$.Parser$(T)))
    }));
    return ListParser;
  });
  list.ListParser = list.ListParser$();
  dart.addTypeTests(list.ListParser, _is_ListParser_default);
  const _is_SequenceParser_default = Symbol('_is_SequenceParser_default');
  sequence.SequenceParser$ = dart.generic(T => {
    var __t$JSArrayOfT = () => (__t$JSArrayOfT = dart.constFn(_interceptors.JSArray$(T)))();
    var __t$ListOfT = () => (__t$ListOfT = dart.constFn(core.List$(T)))();
    var __t$SequenceParserOfT = () => (__t$SequenceParserOfT = dart.constFn(sequence.SequenceParser$(T)))();
    class SequenceParser extends list.ListParser$(T, core.List$(T)) {
      static ['_#new#tearOff'](T, children) {
        return new (sequence.SequenceParser$(T)).new(children);
      }
      parseOn(context) {
        let current = context;
        let elements = __t$JSArrayOfT().of([]);
        for (let i = 0; i < this.children[$length]; i = i + 1) {
          let result = this.children[$_get](i).parseOn(current);
          if (result.isFailure) {
            return result.failure(__t$ListOfT(), result.message);
          }
          elements[$add](result.value);
          current = result;
        }
        return current.success(__t$ListOfT(), elements);
      }
      fastParseOn(buffer, position) {
        for (let i = 0; i < this.children[$length]; i = i + 1) {
          position = this.children[$_get](i).fastParseOn(buffer, position);
          if (position < 0) {
            return position;
          }
        }
        return position;
      }
      copy() {
        return new (__t$SequenceParserOfT()).new(this.children);
      }
    }
    (SequenceParser.new = function(children) {
      SequenceParser.__proto__.new.call(this, children);
      ;
    }).prototype = SequenceParser.prototype;
    dart.addTypeTests(SequenceParser);
    SequenceParser.prototype[_is_SequenceParser_default] = true;
    dart.addTypeCaches(SequenceParser);
    dart.setMethodSignature(SequenceParser, () => ({
      __proto__: dart.getMethods(SequenceParser.__proto__),
      parseOn: dart.fnType(result.Result$(core.List$(T)), [context.Context]),
      copy: dart.fnType(sequence.SequenceParser$(T), [])
    }));
    dart.setLibraryUri(SequenceParser, I[10]);
    return SequenceParser;
  });
  sequence.SequenceParser = sequence.SequenceParser$();
  dart.addTypeTests(sequence.SequenceParser, _is_SequenceParser_default);
  sequence['SequenceParserExtension|seq'] = function SequenceParserExtension$124seq($this, other) {
    return sequence.SequenceParser.is($this) ? new sequence.SequenceParser.new((() => {
      let t7 = T$.ListOfParser().of($this.children);
      t7.push(other);
      return t7;
    })()) : new sequence.SequenceParser.new(T$.JSArrayOfParser().of([$this, other]));
  };
  sequence['SequenceParserExtension|get#seq'] = function SequenceParserExtension$124get$35seq($this) {
    return dart.fn(other => sequence['SequenceParserExtension|seq']($this, other), T$.ParserToParserOfList());
  };
  sequence['SequenceParserExtension|&'] = function SequenceParserExtension$124$38($this, other) {
    return sequence['SequenceParserExtension|seq']($this, other);
  };
  sequence['SequenceIterableExtension|toSequenceParser'] = function SequenceIterableExtension$124toSequenceParser(T, $this) {
    return new (sequence.SequenceParser$(T)).new($this);
  };
  sequence['SequenceIterableExtension|get#toSequenceParser'] = function SequenceIterableExtension$124get$35toSequenceParser(T, $this) {
    return dart.fn(() => sequence['SequenceIterableExtension|toSequenceParser'](T, $this), dart.fnType(parser$.Parser$(core.List$(T)), []));
  };
  const _is_AndParser_default = Symbol('_is_AndParser_default');
  and.AndParser$ = dart.generic(R => {
    var __t$AndParserOfR = () => (__t$AndParserOfR = dart.constFn(and.AndParser$(R)))();
    class AndParser extends delegate.DelegateParser$(R, R) {
      static ['_#new#tearOff'](R, delegate) {
        return new (and.AndParser$(R)).new(delegate);
      }
      parseOn(context) {
        let result = this.delegate.parseOn(context);
        if (result.isSuccess) {
          return context.success(R, result.value);
        } else {
          return result;
        }
      }
      fastParseOn(buffer, position) {
        let result = this.delegate.fastParseOn(buffer, position);
        return result < 0 ? -1 : position;
      }
      copy() {
        return new (__t$AndParserOfR()).new(this.delegate);
      }
    }
    (AndParser.new = function(delegate) {
      AndParser.__proto__.new.call(this, delegate);
      ;
    }).prototype = AndParser.prototype;
    dart.addTypeTests(AndParser);
    AndParser.prototype[_is_AndParser_default] = true;
    dart.addTypeCaches(AndParser);
    dart.setMethodSignature(AndParser, () => ({
      __proto__: dart.getMethods(AndParser.__proto__),
      parseOn: dart.fnType(result.Result$(R), [context.Context]),
      copy: dart.fnType(and.AndParser$(R), [])
    }));
    dart.setLibraryUri(AndParser, I[11]);
    return AndParser;
  });
  and.AndParser = and.AndParser$();
  dart.addTypeTests(and.AndParser, _is_AndParser_default);
  and['AndParserExtension|and'] = function AndParserExtension$124and(T, $this) {
    return new (and.AndParser$(T)).new($this);
  };
  and['AndParserExtension|get#and'] = function AndParserExtension$124get$35and(T, $this) {
    return dart.fn(() => and['AndParserExtension|and'](T, $this), dart.fnType(parser$.Parser$(T), []));
  };
  matches['MatchesParser|matches'] = function MatchesParser$124matches(T, $this, input) {
    let list = _interceptors.JSArray$(T).of([]);
    possessive['PossessiveRepeatingParserExtension|star'](dart.dynamic, choice['ChoiceParserExtension|or'](sequence['SequenceParserExtension|seq'](map['MapParserExtension|map'](T, dart.void, and['AndParserExtension|and'](T, $this), dart.fnType(dart.void, [T]).as(dart.bind(list, $add))), any.any()), any.any())).fastParseOn(input, 0);
    return list;
  };
  matches['MatchesParser|get#matches'] = function MatchesParser$124get$35matches(T, $this) {
    return dart.fn(input => matches['MatchesParser|matches'](T, $this, input), dart.fnType(core.List$(T), [core.String]));
  };
  var min$ = dart.privateName(repeating, "RepeatingParser.min");
  var max$ = dart.privateName(repeating, "RepeatingParser.max");
  const _is_RepeatingParser_default = Symbol('_is_RepeatingParser_default');
  repeating.RepeatingParser$ = dart.generic(R => {
    var __t$RepeatingParserOfR = () => (__t$RepeatingParserOfR = dart.constFn(repeating.RepeatingParser$(R)))();
    class RepeatingParser extends delegate.DelegateParser$(R, core.List$(R)) {
      get min() {
        return this[min$];
      }
      set min(value) {
        super.min = value;
      }
      get max() {
        return this[max$];
      }
      set max(value) {
        super.max = value;
      }
      toString() {
        return super[$toString]() + "[" + dart.str(this.min) + ".." + dart.str(this.max === 9007199254740991.0 ? "*" : this.max) + "]";
      }
      hasEqualProperties(other) {
        __t$RepeatingParserOfR().as(other);
        return super.hasEqualProperties(other) && this.min === other.min && this.max === other.max;
      }
    }
    (RepeatingParser.new = function(parser, min, max) {
      this[min$] = min;
      this[max$] = max;
      RepeatingParser.__proto__.new.call(this, parser);
      if (this.min < 0) {
        dart.throw(new core.ArgumentError.new("Minimum repetitions must be positive, but got " + dart.str(this.min) + "."));
      }
      if (this.max < this.min) {
        dart.throw(new core.ArgumentError.new("Maximum repetitions must be larger than " + dart.str(this.min) + ", but got " + dart.str(this.max) + "."));
      }
    }).prototype = RepeatingParser.prototype;
    dart.addTypeTests(RepeatingParser);
    RepeatingParser.prototype[_is_RepeatingParser_default] = true;
    dart.addTypeCaches(RepeatingParser);
    dart.setLibraryUri(RepeatingParser, I[12]);
    dart.setFieldSignature(RepeatingParser, () => ({
      __proto__: dart.getFields(RepeatingParser.__proto__),
      min: dart.finalFieldType(core.int),
      max: dart.finalFieldType(core.int)
    }));
    dart.defineExtensionMethods(RepeatingParser, ['toString']);
    return RepeatingParser;
  });
  repeating.RepeatingParser = repeating.RepeatingParser$();
  dart.addTypeTests(repeating.RepeatingParser, _is_RepeatingParser_default);
  const _is_PossessiveRepeatingParser_default = Symbol('_is_PossessiveRepeatingParser_default');
  possessive.PossessiveRepeatingParser$ = dart.generic(R => {
    var __t$JSArrayOfR = () => (__t$JSArrayOfR = dart.constFn(_interceptors.JSArray$(R)))();
    var __t$ListOfR = () => (__t$ListOfR = dart.constFn(core.List$(R)))();
    var __t$PossessiveRepeatingParserOfR = () => (__t$PossessiveRepeatingParserOfR = dart.constFn(possessive.PossessiveRepeatingParser$(R)))();
    class PossessiveRepeatingParser extends repeating.RepeatingParser$(R) {
      static ['_#new#tearOff'](R, parser, min, max) {
        return new (possessive.PossessiveRepeatingParser$(R)).new(parser, min, max);
      }
      parseOn(context) {
        let elements = __t$JSArrayOfR().of([]);
        let current = context;
        while (elements[$length] < this.min) {
          let result = this.delegate.parseOn(current);
          if (result.isFailure) {
            return result.failure(__t$ListOfR(), result.message);
          }
          elements[$add](result.value);
          current = result;
        }
        while (elements[$length] < this.max) {
          let result = this.delegate.parseOn(current);
          if (result.isFailure) {
            return current.success(__t$ListOfR(), elements);
          }
          elements[$add](result.value);
          current = result;
        }
        return current.success(__t$ListOfR(), elements);
      }
      fastParseOn(buffer, position) {
        let count = 0;
        let current = position;
        while (count < this.min) {
          let result = this.delegate.fastParseOn(buffer, current);
          if (result < 0) {
            return -1;
          }
          current = result;
          count = count + 1;
        }
        while (count < this.max) {
          let result = this.delegate.fastParseOn(buffer, current);
          if (result < 0) {
            return current;
          }
          current = result;
          count = count + 1;
        }
        return current;
      }
      copy() {
        return new (__t$PossessiveRepeatingParserOfR()).new(this.delegate, this.min, this.max);
      }
    }
    (PossessiveRepeatingParser.new = function(parser, min, max) {
      PossessiveRepeatingParser.__proto__.new.call(this, parser, min, max);
      ;
    }).prototype = PossessiveRepeatingParser.prototype;
    dart.addTypeTests(PossessiveRepeatingParser);
    PossessiveRepeatingParser.prototype[_is_PossessiveRepeatingParser_default] = true;
    dart.addTypeCaches(PossessiveRepeatingParser);
    dart.setMethodSignature(PossessiveRepeatingParser, () => ({
      __proto__: dart.getMethods(PossessiveRepeatingParser.__proto__),
      parseOn: dart.fnType(result.Result$(core.List$(R)), [context.Context]),
      copy: dart.fnType(possessive.PossessiveRepeatingParser$(R), [])
    }));
    dart.setLibraryUri(PossessiveRepeatingParser, I[13]);
    return PossessiveRepeatingParser;
  });
  possessive.PossessiveRepeatingParser = possessive.PossessiveRepeatingParser$();
  dart.addTypeTests(possessive.PossessiveRepeatingParser, _is_PossessiveRepeatingParser_default);
  possessive['PossessiveRepeatingParserExtension|star'] = function PossessiveRepeatingParserExtension$124star(T, $this) {
    return possessive['PossessiveRepeatingParserExtension|repeat'](T, $this, 0, 9007199254740991.0);
  };
  possessive['PossessiveRepeatingParserExtension|get#star'] = function PossessiveRepeatingParserExtension$124get$35star(T, $this) {
    return dart.fn(() => possessive['PossessiveRepeatingParserExtension|star'](T, $this), dart.fnType(parser$.Parser$(core.List$(T)), []));
  };
  possessive['PossessiveRepeatingParserExtension|plus'] = function PossessiveRepeatingParserExtension$124plus(T, $this) {
    return possessive['PossessiveRepeatingParserExtension|repeat'](T, $this, 1, 9007199254740991.0);
  };
  possessive['PossessiveRepeatingParserExtension|get#plus'] = function PossessiveRepeatingParserExtension$124get$35plus(T, $this) {
    return dart.fn(() => possessive['PossessiveRepeatingParserExtension|plus'](T, $this), dart.fnType(parser$.Parser$(core.List$(T)), []));
  };
  possessive['PossessiveRepeatingParserExtension|times'] = function PossessiveRepeatingParserExtension$124times(T, $this, count) {
    return possessive['PossessiveRepeatingParserExtension|repeat'](T, $this, count, count);
  };
  possessive['PossessiveRepeatingParserExtension|get#times'] = function PossessiveRepeatingParserExtension$124get$35times(T, $this) {
    return dart.fn(count => possessive['PossessiveRepeatingParserExtension|times'](T, $this, count), dart.fnType(parser$.Parser$(core.List$(T)), [core.int]));
  };
  possessive['PossessiveRepeatingParserExtension|repeat'] = function PossessiveRepeatingParserExtension$124repeat(T, $this, min, max = null) {
    let t23;
    return new (possessive.PossessiveRepeatingParser$(T)).new($this, min, (t23 = max, t23 == null ? min : t23));
  };
  possessive['PossessiveRepeatingParserExtension|get#repeat'] = function PossessiveRepeatingParserExtension$124get$35repeat(T, $this) {
    return dart.fn((min, max = null) => possessive['PossessiveRepeatingParserExtension|repeat'](T, $this, min, max), dart.fnType(parser$.Parser$(core.List$(T)), [core.int], [T$.intN()]));
  };
  var message$0 = dart.privateName(any, "AnyParser.message");
  any.AnyParser = class AnyParser extends parser$.Parser$(core.String) {
    get message() {
      return this[message$0];
    }
    set message(value) {
      super.message = value;
    }
    static ['_#new#tearOff'](message) {
      return new any.AnyParser.new(message);
    }
    parseOn(context) {
      let buffer = context.buffer;
      let position = context.position;
      return position < buffer.length ? context.success(core.String, buffer[$_get](position), position + 1) : context.failure(core.String, this.message);
    }
    fastParseOn(buffer, position) {
      return position < buffer.length ? position + 1 : -1;
    }
    copy() {
      return new any.AnyParser.new(this.message);
    }
    hasEqualProperties(other) {
      any.AnyParser.as(other);
      return super.hasEqualProperties(other) && this.message === other.message;
    }
  };
  (any.AnyParser.new = function(message) {
    this[message$0] = message;
    any.AnyParser.__proto__.new.call(this);
    ;
  }).prototype = any.AnyParser.prototype;
  dart.addTypeTests(any.AnyParser);
  dart.addTypeCaches(any.AnyParser);
  dart.setMethodSignature(any.AnyParser, () => ({
    __proto__: dart.getMethods(any.AnyParser.__proto__),
    parseOn: dart.fnType(result.Result$(core.String), [context.Context]),
    copy: dart.fnType(any.AnyParser, [])
  }));
  dart.setLibraryUri(any.AnyParser, I[14]);
  dart.setFieldSignature(any.AnyParser, () => ({
    __proto__: dart.getFields(any.AnyParser.__proto__),
    message: dart.finalFieldType(core.String)
  }));
  any.any = function any$(message = "input expected") {
    return new any.AnyParser.new(message);
  };
  failure_joiner.selectFirst = function selectFirst(T, first, second) {
    return first;
  };
  failure_joiner.selectLast = function selectLast(T, first, second) {
    return second;
  };
  failure_joiner.selectFarthest = function selectFarthest(T, first, second) {
    return first.position <= second.position ? second : first;
  };
  failure_joiner.selectFarthestJoined = function selectFarthestJoined(T, first, second) {
    return first.position > second.position ? first : first.position < second.position ? second : first.failure(T, first.message + " OR " + second.message);
  };
  var failureJoiner$ = dart.privateName(choice, "ChoiceParser.failureJoiner");
  const _is_ChoiceParser_default = Symbol('_is_ChoiceParser_default');
  choice.ChoiceParser$ = dart.generic(T => {
    var __t$FailureOfT = () => (__t$FailureOfT = dart.constFn(failure.Failure$(T)))();
    var __t$FailureOfTAndFailureOfTToFailureOfT = () => (__t$FailureOfTAndFailureOfTToFailureOfT = dart.constFn(dart.fnType(__t$FailureOfT(), [__t$FailureOfT(), __t$FailureOfT()])))();
    var __t$ChoiceParserOfT = () => (__t$ChoiceParserOfT = dart.constFn(choice.ChoiceParser$(T)))();
    class ChoiceParser extends list.ListParser$(T, T) {
      get failureJoiner() {
        return this[failureJoiner$];
      }
      set failureJoiner(value) {
        super.failureJoiner = value;
      }
      static ['_#new#tearOff'](T, children, opts) {
        let failureJoiner = opts && 'failureJoiner' in opts ? opts.failureJoiner : null;
        return new (choice.ChoiceParser$(T)).new(children, {failureJoiner: failureJoiner});
      }
      withFailureJoiner(failureJoiner) {
        __t$FailureOfTAndFailureOfTToFailureOfT().as(failureJoiner);
        return new (__t$ChoiceParserOfT()).new(this.children, {failureJoiner: failureJoiner});
      }
      parseOn(context) {
        let t25, t24;
        let failure = null;
        for (let i = 0; i < this.children[$length]; i = i + 1) {
          let result = this.children[$_get](i).parseOn(context);
          if (__t$FailureOfT().is(result)) {
            failure = failure == null ? result : (t24 = failure, t25 = result, this.failureJoiner(t24, t25));
          } else {
            return result;
          }
        }
        return dart.nullCheck(failure);
      }
      fastParseOn(buffer, position) {
        let result = -1;
        for (let i = 0; i < this.children[$length]; i = i + 1) {
          result = this.children[$_get](i).fastParseOn(buffer, position);
          if (result >= 0) {
            return result;
          }
        }
        return result;
      }
      hasEqualProperties(other) {
        __t$ChoiceParserOfT().as(other);
        return super.hasEqualProperties(other) && this.failureJoiner[$_equals](__t$FailureOfTAndFailureOfTToFailureOfT().as(other.failureJoiner));
      }
      copy() {
        return new (__t$ChoiceParserOfT()).new(this.children, {failureJoiner: this.failureJoiner});
      }
    }
    (ChoiceParser.new = function(children, opts) {
      let t24;
      let failureJoiner = opts && 'failureJoiner' in opts ? opts.failureJoiner : null;
      this[failureJoiner$] = (t24 = failureJoiner, t24 == null ? dart.gbind(C[4] || CT.C4, T) : t24);
      ChoiceParser.__proto__.new.call(this, children);
      if (children[$isEmpty]) {
        dart.throw(new core.ArgumentError.new("Choice parser cannot be empty."));
      }
    }).prototype = ChoiceParser.prototype;
    dart.addTypeTests(ChoiceParser);
    ChoiceParser.prototype[_is_ChoiceParser_default] = true;
    dart.addTypeCaches(ChoiceParser);
    dart.setMethodSignature(ChoiceParser, () => ({
      __proto__: dart.getMethods(ChoiceParser.__proto__),
      withFailureJoiner: dart.fnType(choice.ChoiceParser$(T), [dart.nullable(core.Object)]),
      parseOn: dart.fnType(result.Result$(T), [context.Context]),
      copy: dart.fnType(choice.ChoiceParser$(T), [])
    }));
    dart.setLibraryUri(ChoiceParser, I[15]);
    dart.setFieldSignature(ChoiceParser, () => ({
      __proto__: dart.getFields(ChoiceParser.__proto__),
      failureJoiner: dart.finalFieldType(dart.fnType(failure.Failure$(T), [failure.Failure$(T), failure.Failure$(T)]))
    }));
    return ChoiceParser;
  });
  choice.ChoiceParser = choice.ChoiceParser$();
  dart.addTypeTests(choice.ChoiceParser, _is_ChoiceParser_default);
  choice['ChoiceParserExtension|or'] = function ChoiceParserExtension$124or($this, other, opts) {
    let t26;
    let failureJoiner = opts && 'failureJoiner' in opts ? opts.failureJoiner : null;
    let self = $this;
    return choice.ChoiceParser.is(self) ? new choice.ChoiceParser.new((() => {
      let t25 = T$.ListOfParser().of(self.children);
      t25.push(other);
      return t25;
    })(), {failureJoiner: (t26 = failureJoiner, t26 == null ? T$.FailureAndFailureToFailure().as(self.failureJoiner) : t26)}) : new choice.ChoiceParser.new(T$.JSArrayOfParser().of([$this, other]), {failureJoiner: failureJoiner});
  };
  choice['ChoiceParserExtension|get#or'] = function ChoiceParserExtension$124get$35or($this) {
    return dart.fn((other, opts) => {
      let failureJoiner = opts && 'failureJoiner' in opts ? opts.failureJoiner : null;
      return choice['ChoiceParserExtension|or']($this, other, {failureJoiner: failureJoiner});
    }, T$.Parser__ToChoiceParser());
  };
  choice['ChoiceParserExtension||'] = function ChoiceParserExtension$124$124($this, other) {
    return choice['ChoiceParserExtension|or']($this, other);
  };
  choice['ChoiceIterableExtension|toChoiceParser'] = function ChoiceIterableExtension$124toChoiceParser(T, $this, opts) {
    let failureJoiner = opts && 'failureJoiner' in opts ? opts.failureJoiner : null;
    return new (choice.ChoiceParser$(T)).new($this, {failureJoiner: failureJoiner});
  };
  choice['ChoiceIterableExtension|get#toChoiceParser'] = function ChoiceIterableExtension$124get$35toChoiceParser(T, $this) {
    return dart.fn(opts => {
      let failureJoiner = opts && 'failureJoiner' in opts ? opts.failureJoiner : null;
      return choice['ChoiceIterableExtension|toChoiceParser'](T, $this, {failureJoiner: failureJoiner});
    }, dart.fnType(choice.ChoiceParser$(T), [], {failureJoiner: dart.nullable(dart.fnType(failure.Failure$(T), [failure.Failure$(T), failure.Failure$(T)]))}, {}));
  };
  var callback$ = dart.privateName(map, "MapParser.callback");
  const _is_MapParser_default = Symbol('_is_MapParser_default');
  map.MapParser$ = dart.generic((T, R) => {
    var __t$MapParserOfT$R = () => (__t$MapParserOfT$R = dart.constFn(map.MapParser$(T, R)))();
    var __t$TToR = () => (__t$TToR = dart.constFn(dart.fnType(R, [T])))();
    class MapParser extends delegate.DelegateParser$(T, R) {
      get callback() {
        return this[callback$];
      }
      set callback(value) {
        super.callback = value;
      }
      static ['_#new#tearOff'](T, R, delegate, callback) {
        return new (map.MapParser$(T, R)).new(delegate, callback);
      }
      parseOn(context) {
        let t30;
        let result = this.delegate.parseOn(context);
        if (result.isSuccess) {
          return result.success(R, (t30 = result.value, this.callback(t30)));
        } else {
          return result.failure(R, result.message);
        }
      }
      hasEqualProperties(other) {
        __t$MapParserOfT$R().as(other);
        return super.hasEqualProperties(other) && this.callback[$_equals](__t$TToR().as(other.callback));
      }
      copy() {
        return new (__t$MapParserOfT$R()).new(this.delegate, this.callback);
      }
    }
    (MapParser.new = function(delegate, callback) {
      this[callback$] = callback;
      MapParser.__proto__.new.call(this, delegate);
      ;
    }).prototype = MapParser.prototype;
    dart.addTypeTests(MapParser);
    MapParser.prototype[_is_MapParser_default] = true;
    dart.addTypeCaches(MapParser);
    dart.setMethodSignature(MapParser, () => ({
      __proto__: dart.getMethods(MapParser.__proto__),
      parseOn: dart.fnType(result.Result$(R), [context.Context]),
      copy: dart.fnType(map.MapParser$(T, R), [])
    }));
    dart.setLibraryUri(MapParser, I[16]);
    dart.setFieldSignature(MapParser, () => ({
      __proto__: dart.getFields(MapParser.__proto__),
      callback: dart.finalFieldType(dart.fnType(R, [T]))
    }));
    return MapParser;
  });
  map.MapParser = map.MapParser$();
  dart.addTypeTests(map.MapParser, _is_MapParser_default);
  map['MapParserExtension|map'] = function MapParserExtension$124map(T, R, $this, callback, opts) {
    let hasSideEffects = opts && 'hasSideEffects' in opts ? opts.hasSideEffects : true;
    return new (map.MapParser$(T, R)).new($this, callback);
  };
  map['MapParserExtension|get#map'] = function MapParserExtension$124get$35map(T, $this) {
    return dart.fn((R, callback, opts) => {
      let hasSideEffects = opts && 'hasSideEffects' in opts ? opts.hasSideEffects : true;
      return map['MapParserExtension|map'](T, R, $this, callback, {hasSideEffects: hasSideEffects});
    }, dart.gFnType(R => {
      var __t$ParserOfR = () => (__t$ParserOfR = dart.constFn(parser$.Parser$(R)))();
      return [__t$ParserOfR(), [dart.fnType(R, [T])], {hasSideEffects: core.bool}, {}];
    }, R => {
      var __t$ParserOfR = () => (__t$ParserOfR = dart.constFn(parser$.Parser$(R)))();
      return [T$.ObjectN()];
    }));
  };
  var value$1 = dart.privateName(success, "Success.value");
  var buffer$0 = dart.privateName(context, "Context.buffer");
  var position$ = dart.privateName(context, "Context.position");
  context.Context = class Context extends core.Object {
    get buffer() {
      return this[buffer$0];
    }
    set buffer(value) {
      super.buffer = value;
    }
    get position() {
      return this[position$];
    }
    set position(value) {
      super.position = value;
    }
    static ['_#new#tearOff'](buffer, position) {
      return new context.Context.new(buffer, position);
    }
    success(R, result, position = null) {
      let t32;
      return new (success.Success$(R)).new(this.buffer, (t32 = position, t32 == null ? this.position : t32), result);
    }
    failure(R, message, position = null) {
      let t32;
      return new (failure.Failure$(R)).new(this.buffer, (t32 = position, t32 == null ? this.position : t32), message);
    }
    toPositionString() {
      return token$0.Token.positionString(this.buffer, this.position);
    }
    toString() {
      return "Context[" + this.toPositionString() + "]";
    }
  };
  (context.Context.new = function(buffer, position) {
    this[buffer$0] = buffer;
    this[position$] = position;
    ;
  }).prototype = context.Context.prototype;
  dart.addTypeTests(context.Context);
  dart.addTypeCaches(context.Context);
  dart.setMethodSignature(context.Context, () => ({
    __proto__: dart.getMethods(context.Context.__proto__),
    success: dart.gFnType(R => [success.Success$(R), [R], [dart.nullable(core.int)]], R => [dart.nullable(core.Object)]),
    failure: dart.gFnType(R => [failure.Failure$(R), [core.String], [dart.nullable(core.int)]], R => [dart.nullable(core.Object)]),
    toPositionString: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(context.Context, I[17]);
  dart.setFieldSignature(context.Context, () => ({
    __proto__: dart.getFields(context.Context.__proto__),
    buffer: dart.finalFieldType(core.String),
    position: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(context.Context, ['toString']);
  const _is_Result_default = Symbol('_is_Result_default');
  result.Result$ = dart.generic(R => {
    class Result extends context.Context {
      get isSuccess() {
        return false;
      }
      get isFailure() {
        return false;
      }
    }
    (Result.new = function(buffer, position) {
      Result.__proto__.new.call(this, buffer, position);
      ;
    }).prototype = Result.prototype;
    dart.addTypeTests(Result);
    Result.prototype[_is_Result_default] = true;
    dart.addTypeCaches(Result);
    dart.setGetterSignature(Result, () => ({
      __proto__: dart.getGetters(Result.__proto__),
      isSuccess: core.bool,
      isFailure: core.bool
    }));
    dart.setLibraryUri(Result, I[18]);
    return Result;
  });
  result.Result = result.Result$();
  dart.addTypeTests(result.Result, _is_Result_default);
  const _is_Success_default = Symbol('_is_Success_default');
  success.Success$ = dart.generic(R => {
    class Success extends result.Result$(R) {
      get value() {
        return this[value$1];
      }
      set value(value) {
        super.value = value;
      }
      static ['_#new#tearOff'](R, buffer, position, value) {
        return new (success.Success$(R)).new(buffer, position, value);
      }
      get isSuccess() {
        return true;
      }
      get message() {
        return dart.throw(new core.UnsupportedError.new("Successful parse results do not have a message."));
      }
      map(T, callback) {
        return this.success(T, callback(this.value));
      }
      toString() {
        return "Success[" + this.toPositionString() + "]: " + dart.str(this.value);
      }
    }
    (Success.new = function(buffer, position, value) {
      this[value$1] = value;
      Success.__proto__.new.call(this, buffer, position);
      ;
    }).prototype = Success.prototype;
    dart.addTypeTests(Success);
    Success.prototype[_is_Success_default] = true;
    dart.addTypeCaches(Success);
    dart.setMethodSignature(Success, () => ({
      __proto__: dart.getMethods(Success.__proto__),
      map: dart.gFnType(T => [result.Result$(T), [dart.fnType(T, [R])]], T => [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(Success, () => ({
      __proto__: dart.getGetters(Success.__proto__),
      message: core.String
    }));
    dart.setLibraryUri(Success, I[19]);
    dart.setFieldSignature(Success, () => ({
      __proto__: dart.getFields(Success.__proto__),
      value: dart.finalFieldType(R)
    }));
    dart.defineExtensionMethods(Success, ['toString']);
    return Success;
  });
  success.Success = success.Success$();
  dart.addTypeTests(success.Success, _is_Success_default);
  matches_skipping['MatchesSkippingParser|matchesSkipping'] = function MatchesSkippingParser$124matchesSkipping(T, $this, input) {
    let list = _interceptors.JSArray$(T).of([]);
    possessive['PossessiveRepeatingParserExtension|star'](dart.dynamic, choice['ChoiceParserExtension|or'](map['MapParserExtension|map'](T, dart.void, $this, dart.fnType(dart.void, [T]).as(dart.bind(list, $add))), any.any())).fastParseOn(input, 0);
    return list;
  };
  matches_skipping['MatchesSkippingParser|get#matchesSkipping'] = function MatchesSkippingParser$124get$35matchesSkipping(T, $this) {
    return dart.fn(input => matches_skipping['MatchesSkippingParser|matchesSkipping'](T, $this, input), dart.fnType(core.List$(T), [core.String]));
  };
  var message$1 = dart.privateName(failure, "Failure.message");
  const _is_Failure_default = Symbol('_is_Failure_default');
  failure.Failure$ = dart.generic(R => {
    class Failure extends result.Result$(R) {
      get message() {
        return this[message$1];
      }
      set message(value) {
        super.message = value;
      }
      static ['_#new#tearOff'](R, buffer, position, message) {
        return new (failure.Failure$(R)).new(buffer, position, message);
      }
      get isFailure() {
        return true;
      }
      get value() {
        return dart.throw(new exception.ParserException.new(this));
      }
      map(T, callback) {
        return this.failure(T, this.message);
      }
      toString() {
        return "Failure[" + this.toPositionString() + "]: " + this.message;
      }
    }
    (Failure.new = function(buffer, position, message) {
      this[message$1] = message;
      Failure.__proto__.new.call(this, buffer, position);
      ;
    }).prototype = Failure.prototype;
    dart.addTypeTests(Failure);
    Failure.prototype[_is_Failure_default] = true;
    dart.addTypeCaches(Failure);
    dart.setMethodSignature(Failure, () => ({
      __proto__: dart.getMethods(Failure.__proto__),
      map: dart.gFnType(T => [result.Result$(T), [dart.fnType(T, [R])]], T => [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(Failure, () => ({
      __proto__: dart.getGetters(Failure.__proto__),
      value: R
    }));
    dart.setLibraryUri(Failure, I[20]);
    dart.setFieldSignature(Failure, () => ({
      __proto__: dart.getFields(Failure.__proto__),
      message: dart.finalFieldType(core.String)
    }));
    dart.defineExtensionMethods(Failure, ['toString']);
    return Failure;
  });
  failure.Failure = failure.Failure$();
  dart.addTypeTests(failure.Failure, _is_Failure_default);
  var failure$ = dart.privateName(exception, "ParserException.failure");
  exception.ParserException = class ParserException extends core.Object {
    get failure() {
      return this[failure$];
    }
    set failure(value) {
      super.failure = value;
    }
    static ['_#new#tearOff'](failure) {
      return new exception.ParserException.new(failure);
    }
    get message() {
      return this.failure.message;
    }
    get offset() {
      return this.failure.position;
    }
    get source() {
      return this.failure.buffer;
    }
    toString() {
      return this.failure.message + " at " + this.failure.toPositionString();
    }
  };
  (exception.ParserException.new = function(failure) {
    this[failure$] = failure;
    ;
  }).prototype = exception.ParserException.prototype;
  dart.addTypeTests(exception.ParserException);
  dart.addTypeCaches(exception.ParserException);
  exception.ParserException[dart.implements] = () => [core.FormatException];
  dart.setGetterSignature(exception.ParserException, () => ({
    __proto__: dart.getGetters(exception.ParserException.__proto__),
    message: core.String,
    offset: core.int,
    source: core.String
  }));
  dart.setLibraryUri(exception.ParserException, I[21]);
  dart.setFieldSignature(exception.ParserException, () => ({
    __proto__: dart.getFields(exception.ParserException.__proto__),
    failure: dart.finalFieldType(failure.Failure)
  }));
  dart.defineExtensionMethods(exception.ParserException, ['toString']);
  dart.trackLibraries("packages/petitparser/src/parser/combinator/optional.dart", {
    "package:petitparser/src/parser/combinator/optional.dart": optional,
    "package:petitparser/src/parser/character/parser.dart": parser,
    "package:petitparser/src/parser/character/range.dart": range,
    "package:petitparser/src/parser/character/lookup.dart": lookup,
    "package:petitparser/src/parser/character/optimize.dart": optimize,
    "package:petitparser/src/parser/character/char.dart": char$,
    "package:petitparser/src/parser/action/token.dart": token$,
    "package:petitparser/src/parser/combinator/sequence.dart": sequence,
    "package:petitparser/src/parser/combinator/and.dart": and,
    "package:petitparser/src/matcher/matches.dart": matches,
    "package:petitparser/src/parser/repeater/repeating.dart": repeating,
    "package:petitparser/src/parser/repeater/possessive.dart": possessive,
    "package:petitparser/src/parser/predicate/any.dart": any,
    "package:petitparser/src/parser/combinator/list.dart": list,
    "package:petitparser/src/parser/utils/failure_joiner.dart": failure_joiner,
    "package:petitparser/src/parser/combinator/choice.dart": choice,
    "package:petitparser/src/parser/combinator/delegate.dart": delegate,
    "package:petitparser/src/parser/action/map.dart": map,
    "package:petitparser/src/context/success.dart": success,
    "package:petitparser/src/core/parser.dart": parser$,
    "package:petitparser/src/matcher/matches_skipping.dart": matches_skipping,
    "package:petitparser/src/core/token.dart": token$0,
    "package:petitparser/src/context/context.dart": context,
    "package:petitparser/src/context/result.dart": result,
    "package:petitparser/src/context/failure.dart": failure,
    "package:petitparser/src/core/exception.dart": exception
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["../../core/parser.dart","delegate.dart","optional.dart","../character/parser.dart","../character/range.dart","../character/lookup.dart","../character/optimize.dart","../character/char.dart","../../core/token.dart","../action/token.dart","list.dart","sequence.dart","and.dart","../../matcher/matches.dart","../repeater/repeating.dart","../repeater/possessive.dart","../predicate/any.dart","../utils/failure_joiner.dart","choice.dart","../action/map.dart","../../context/context.dart","../../context/result.dart","../../context/success.dart","../../matcher/matches_skipping.dart","../../context/failure.dart","../../core/exception.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../../packages/petitparser/src/parser/combinator/optional.dart.lib.js"}');
  // Exports:
  return {
    src__parser__combinator__optional: optional,
    src__parser__character__parser: parser,
    src__parser__character__range: range,
    src__parser__character__lookup: lookup,
    src__parser__character__optimize: optimize,
    src__parser__character__char: char$,
    src__parser__action__token: token$,
    src__parser__combinator__sequence: sequence,
    src__parser__combinator__and: and,
    src__matcher__matches: matches,
    src__parser__repeater__repeating: repeating,
    src__parser__repeater__possessive: possessive,
    src__parser__predicate__any: any,
    src__parser__combinator__list: list,
    src__parser__utils__failure_joiner: failure_joiner,
    src__parser__combinator__choice: choice,
    src__parser__combinator__delegate: delegate,
    src__parser__action__map: map,
    src__context__success: success,
    src__core__parser: parser$,
    src__matcher__matches_skipping: matches_skipping,
    src__core__token: token$0,
    src__context__context: context,
    src__context__result: result,
    src__context__failure: failure,
    src__core__exception: exception
  };
}));

//# sourceMappingURL=optional.dart.lib.js.map
