define(['dart_sdk'], (function load__packages__hive__src__util__indexable_skip_list_dart(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const math = dart_sdk.math;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var indexable_skip_list = Object.create(dart.library);
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $length = dartx.length;
  var $iterator = dartx.iterator;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    ListOfint: () => (T.ListOfint = dart.constFn(core.List$(core.int)))(),
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = ["package:hive/src/util/indexable_skip_list.dart"];
  var _head = dart.privateName(indexable_skip_list, "_head");
  var _height = dart.privateName(indexable_skip_list, "_height");
  var _length = dart.privateName(indexable_skip_list, "_length");
  var _comparator$ = dart.privateName(indexable_skip_list, "_comparator");
  var _random = dart.privateName(indexable_skip_list, "_random");
  var _getNode = dart.privateName(indexable_skip_list, "_getNode");
  var _getNodeAt = dart.privateName(indexable_skip_list, "_getNodeAt");
  const _is_IndexableSkipList_default = Symbol('_is_IndexableSkipList_default');
  indexable_skip_list.IndexableSkipList$ = dart.generic((K, V) => {
    var __t$_NodeOfK$V = () => (__t$_NodeOfK$V = dart.constFn(indexable_skip_list._Node$(K, V)))();
    var __t$_NodeNOfK$V = () => (__t$_NodeNOfK$V = dart.constFn(dart.nullable(__t$_NodeOfK$V())))();
    var __t$ListOf_NodeNOfK$V = () => (__t$ListOf_NodeNOfK$V = dart.constFn(core.List$(__t$_NodeNOfK$V())))();
    var __t$_KeyIterableOfK$V = () => (__t$_KeyIterableOfK$V = dart.constFn(indexable_skip_list._KeyIterable$(K, V)))();
    var __t$_ValueIterableOfK$V = () => (__t$_ValueIterableOfK$V = dart.constFn(indexable_skip_list._ValueIterable$(K, V)))();
    var __t$KN = () => (__t$KN = dart.constFn(dart.nullable(K)))();
    var __t$_NodeOfKN$VN = () => (__t$_NodeOfKN$VN = dart.constFn(indexable_skip_list._Node$(__t$KN(), __t$VN())))();
    var __t$JSArrayOf_NodeNOfK$V = () => (__t$JSArrayOf_NodeNOfK$V = dart.constFn(_interceptors.JSArray$(__t$_NodeNOfK$V())))();
    var __t$VN = () => (__t$VN = dart.constFn(dart.nullable(V)))();
    class IndexableSkipList extends core.Object {
      static ['_#new#tearOff'](K, V, _comparator, random = null) {
        return new (indexable_skip_list.IndexableSkipList$(K, V)).new(_comparator, random);
      }
      get length() {
        return this[_length];
      }
      get keys() {
        return new (__t$_KeyIterableOfK$V()).new(this[_head]);
      }
      get values() {
        return new (__t$_ValueIterableOfK$V()).new(this[_head]);
      }
      insert(key, value) {
        let t0, t1, t0$, t1$, t0$0, t1$0, t0$1, t1$1, t0$2, t1$2, t0$3, t1$3, t0$4;
        K.as(key);
        __t$VN().as(value);
        let existingNode = this[_getNode](key);
        if (existingNode != null) {
          let oldValue = existingNode.value;
          existingNode.value = value;
          return oldValue;
        }
        let newLevel = 0;
        while (this[_random].nextBool() && dart.notNull(newLevel) < 12 - 1) {
          newLevel = dart.notNull(newLevel) + 1;
        }
        if (dart.notNull(newLevel) >= this[_height]) {
          newLevel = (t0 = this[_height], this[_height] = t0 + 1, t0);
        }
        let newNode = new (__t$_NodeOfK$V()).new(key, value, __t$ListOf_NodeNOfK$V().filled(dart.notNull(newLevel) + 1, null), T.ListOfint().filled(dart.notNull(newLevel) + 1, 0));
        let current = this[_head];
        for (let level = this[_height] - 1; level >= 0; level = level - 1) {
          while (true) {
            let next = current.next[$_get](level);
            if (next == null || (t0$ = key, t1 = dart.nullCheck(next.key), this[_comparator$](t0$, t1)) < 0) break;
            current = next;
          }
          if (level > dart.notNull(newLevel)) {
            let next = current.next[$_get](level);
            if (next != null) {
              t0$0 = next.width;
              t1$ = level;
              t0$0[$_set](t1$, t0$0[$_get](t1$) + 1);
            }
            continue;
          }
          if (level === 0) {
            newNode.width[$_set](0, 1);
          } else {
            let width = 0;
            let node = current.next[$_get](level - 1);
            while (node != null && (t0$1 = key, t1$0 = dart.nullCheck(node.key), this[_comparator$](t0$1, t1$0)) >= 0) {
              width = width + node.width[$_get](level - 1);
              node = node.next[$_get](level - 1);
            }
            for (let j = level; j <= dart.notNull(newLevel); j = j + 1) {
              t0$2 = newNode.width;
              t1$1 = j;
              t0$2[$_set](t1$1, t0$2[$_get](t1$1) + width);
            }
            t0$3 = newNode.width;
            t1$2 = level;
            t0$3[$_set](t1$2, t0$3[$_get](t1$2) + 1);
          }
          newNode.next[$_set](level, current.next[$_get](level));
          current.next[$_set](level, newNode);
        }
        for (let i = 1; i <= dart.notNull(newLevel); i = i + 1) {
          let next = newNode.next[$_get](i);
          if (next != null) {
            t0$4 = next.width;
            t1$3 = i;
            t0$4[$_set](t1$3, t0$4[$_get](t1$3) - (newNode.width[$_get](i) - 1));
          }
        }
        this[_length] = this[_length] + 1;
        return null;
      }
      delete(key) {
        let t1, t0, t1$, t0$, t1$0, t0$0;
        K.as(key);
        let node = this[_getNode](key);
        if (node == null) return null;
        let current = this[_head];
        for (let level = this[_height] - 1; level >= 0; level = level - 1) {
          while (true) {
            let next = current.next[$_get](level);
            if (next == null || (t0 = key, t1 = dart.nullCheck(next.key), this[_comparator$](t0, t1)) <= 0) break;
            current = next;
          }
          if (level > node.level) {
            let next = current.next[$_get](level);
            if (next != null) {
              t0$ = next.width;
              t1$ = level;
              t0$[$_set](t1$, t0$[$_get](t1$) - 1);
            }
          } else {
            let next = node.next[$_get](level);
            current.next[$_set](level, next);
            if (next != null) {
              t0$0 = next.width;
              t1$0 = level;
              t0$0[$_set](t1$0, t0$0[$_get](t1$0) + (node.width[$_get](level) - 1));
            }
          }
        }
        if (node.level === this[_height] - 1 && this[_height] > 1 && this[_head].next[$_get](node.level) == null) {
          this[_height] = this[_height] - 1;
        }
        this[_length] = this[_length] - 1;
        return node.value;
      }
      get(key) {
        let t0;
        K.as(key);
        t0 = this[_getNode](key);
        return t0 == null ? null : t0.value;
      }
      valuesFromKey(key) {
        K.as(key);
        let node = this[_getNode](key);
        let virtualHead = new (__t$_NodeOfKN$VN()).new(null, null, __t$JSArrayOf_NodeNOfK$V().of([node]), T.JSArrayOfint().of([0]));
        return new (__t$_ValueIterableOfK$V()).new(virtualHead);
      }
      [_getNode](key) {
        let t1, t0, t1$, t0$;
        let prev = this[_head];
        let node = null;
        for (let i = this[_height] - 1; i >= 0; i = i - 1) {
          node = prev.next[$_get](i);
          while (node != null && (t0 = key, t1 = dart.nullCheck(node.key), this[_comparator$](t0, t1)) > 0) {
            prev = node;
            node = node.next[$_get](i);
          }
        }
        if (node != null && (t0$ = key, t1$ = dart.nullCheck(node.key), this[_comparator$](t0$, t1$)) === 0) {
          return node;
        }
        return null;
      }
      getAt(index) {
        return this[_getNodeAt](index).value;
      }
      getKeyAt(index) {
        return this[_getNodeAt](index).key;
      }
      [_getNodeAt](index) {
        core.RangeError.checkValidIndex(index, this);
        let prev = this[_head];
        let node = null;
        for (let level = this[_height] - 1; level >= 0; level = level - 1) {
          node = prev.next[$_get](level);
          while (node != null && index >= node.width[$_get](level)) {
            index = index - node.width[$_get](level);
            prev = node;
            node = node.next[$_get](level);
          }
        }
        return dart.nullCheck(node);
      }
      clear() {
        this[_height] = 1;
        for (let i = 0; i < 12; i = i + 1) {
          this[_head].next[$_set](i, null);
        }
        this[_height] = 1;
        this[_length] = 0;
      }
    }
    (IndexableSkipList.new = function(_comparator, random = null) {
      let t0;
      this[_head] = new (__t$_NodeOfK$V()).new(null, null, __t$ListOf_NodeNOfK$V().filled(12, null), T.ListOfint().filled(12, 0));
      this[_height] = 1;
      this[_length] = 0;
      this[_comparator$] = _comparator;
      this[_random] = (t0 = random, t0 == null ? math.Random.new() : t0);
      ;
    }).prototype = IndexableSkipList.prototype;
    dart.addTypeTests(IndexableSkipList);
    IndexableSkipList.prototype[_is_IndexableSkipList_default] = true;
    dart.addTypeCaches(IndexableSkipList);
    dart.setMethodSignature(IndexableSkipList, () => ({
      __proto__: dart.getMethods(IndexableSkipList.__proto__),
      insert: dart.fnType(dart.nullable(V), [dart.nullable(core.Object), dart.nullable(core.Object)]),
      delete: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      get: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      valuesFromKey: dart.fnType(core.Iterable$(V), [dart.nullable(core.Object)]),
      [_getNode]: dart.fnType(dart.nullable(indexable_skip_list._Node$(K, V)), [K]),
      getAt: dart.fnType(dart.nullable(V), [core.int]),
      getKeyAt: dart.fnType(dart.nullable(K), [core.int]),
      [_getNodeAt]: dart.fnType(indexable_skip_list._Node$(K, V), [core.int]),
      clear: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(IndexableSkipList, () => ({
      __proto__: dart.getGetters(IndexableSkipList.__proto__),
      length: core.int,
      keys: core.Iterable$(K),
      values: core.Iterable$(V)
    }));
    dart.setLibraryUri(IndexableSkipList, I[0]);
    dart.setFieldSignature(IndexableSkipList, () => ({
      __proto__: dart.getFields(IndexableSkipList.__proto__),
      [_head]: dart.finalFieldType(indexable_skip_list._Node$(K, V)),
      [_random]: dart.finalFieldType(math.Random),
      [_comparator$]: dart.finalFieldType(dart.fnType(core.int, [K, K])),
      [_height]: dart.fieldType(core.int),
      [_length]: dart.fieldType(core.int)
    }));
    dart.setStaticFieldSignature(IndexableSkipList, () => ['_maxHeight']);
    return IndexableSkipList;
  });
  indexable_skip_list.IndexableSkipList = indexable_skip_list.IndexableSkipList$();
  dart.defineLazy(indexable_skip_list.IndexableSkipList, {
    /*indexable_skip_list.IndexableSkipList._maxHeight*/get _maxHeight() {
      return 12;
    }
  }, false);
  dart.addTypeTests(indexable_skip_list.IndexableSkipList, _is_IndexableSkipList_default);
  var value$ = dart.privateName(indexable_skip_list, "_Node.value");
  const _is__Node_default = Symbol('_is__Node_default');
  indexable_skip_list._Node$ = dart.generic((K, V) => {
    var __t$VN = () => (__t$VN = dart.constFn(dart.nullable(V)))();
    class _Node extends core.Object {
      get value() {
        return this[value$];
      }
      set value(value) {
        this[value$] = __t$VN().as(value);
      }
      get level() {
        return this.next[$length] - 1;
      }
      static ['_#new#tearOff'](K, V, key, value, next, width) {
        return new (indexable_skip_list._Node$(K, V)).new(key, value, next, width);
      }
    }
    (_Node.new = function(key, value, next, width) {
      this.key = key;
      this[value$] = value;
      this.next = next;
      this.width = width;
      ;
    }).prototype = _Node.prototype;
    dart.addTypeTests(_Node);
    _Node.prototype[_is__Node_default] = true;
    dart.addTypeCaches(_Node);
    dart.setGetterSignature(_Node, () => ({
      __proto__: dart.getGetters(_Node.__proto__),
      level: core.int
    }));
    dart.setLibraryUri(_Node, I[0]);
    dart.setFieldSignature(_Node, () => ({
      __proto__: dart.getFields(_Node.__proto__),
      key: dart.finalFieldType(dart.nullable(K)),
      value: dart.fieldType(dart.nullable(V)),
      next: dart.finalFieldType(core.List$(dart.nullable(indexable_skip_list._Node$(K, V)))),
      width: dart.finalFieldType(core.List$(core.int))
    }));
    return _Node;
  });
  indexable_skip_list._Node = indexable_skip_list._Node$();
  dart.addTypeTests(indexable_skip_list._Node, _is__Node_default);
  var node$ = dart.privateName(indexable_skip_list, "_Iterator.node");
  const _is__Iterator_default = Symbol('_is__Iterator_default');
  indexable_skip_list._Iterator$ = dart.generic((K, V, E) => {
    var __t$KN = () => (__t$KN = dart.constFn(dart.nullable(K)))();
    var __t$_NodeOfKN$VN = () => (__t$_NodeOfKN$VN = dart.constFn(indexable_skip_list._Node$(__t$KN(), __t$VN())))();
    var __t$_NodeNOfKN$VN = () => (__t$_NodeNOfKN$VN = dart.constFn(dart.nullable(__t$_NodeOfKN$VN())))();
    var __t$VN = () => (__t$VN = dart.constFn(dart.nullable(V)))();
    class _Iterator extends core.Object {
      get node() {
        return this[node$];
      }
      set node(value) {
        this[node$] = __t$_NodeNOfKN$VN().as(value);
      }
      moveNext() {
        return (this.node = dart.nullCheck(this.node).next[$_get](0)) != null;
      }
    }
    (_Iterator.new = function(node) {
      this[node$] = node;
      ;
    }).prototype = _Iterator.prototype;
    dart.addTypeTests(_Iterator);
    _Iterator.prototype[_is__Iterator_default] = true;
    dart.addTypeCaches(_Iterator);
    _Iterator[dart.implements] = () => [core.Iterator$(E)];
    dart.setMethodSignature(_Iterator, () => ({
      __proto__: dart.getMethods(_Iterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setLibraryUri(_Iterator, I[0]);
    dart.setFieldSignature(_Iterator, () => ({
      __proto__: dart.getFields(_Iterator.__proto__),
      node: dart.fieldType(dart.nullable(indexable_skip_list._Node$(dart.nullable(K), dart.nullable(V))))
    }));
    return _Iterator;
  });
  indexable_skip_list._Iterator = indexable_skip_list._Iterator$();
  dart.addTypeTests(indexable_skip_list._Iterator, _is__Iterator_default);
  const _is__KeyIterator_default = Symbol('_is__KeyIterator_default');
  indexable_skip_list._KeyIterator$ = dart.generic((K, V) => {
    class _KeyIterator extends indexable_skip_list._Iterator$(K, V, K) {
      static ['_#new#tearOff'](K, V, node) {
        return new (indexable_skip_list._KeyIterator$(K, V)).new(node);
      }
      get current() {
        return dart.nullCheck(dart.nullCheck(this.node).key);
      }
    }
    (_KeyIterator.new = function(node) {
      _KeyIterator.__proto__.new.call(this, node);
      ;
    }).prototype = _KeyIterator.prototype;
    dart.addTypeTests(_KeyIterator);
    _KeyIterator.prototype[_is__KeyIterator_default] = true;
    dart.addTypeCaches(_KeyIterator);
    dart.setGetterSignature(_KeyIterator, () => ({
      __proto__: dart.getGetters(_KeyIterator.__proto__),
      current: K
    }));
    dart.setLibraryUri(_KeyIterator, I[0]);
    return _KeyIterator;
  });
  indexable_skip_list._KeyIterator = indexable_skip_list._KeyIterator$();
  dart.addTypeTests(indexable_skip_list._KeyIterator, _is__KeyIterator_default);
  const _is__KeyIterable_default = Symbol('_is__KeyIterable_default');
  indexable_skip_list._KeyIterable$ = dart.generic((K, V) => {
    var __t$_KeyIteratorOfK$V = () => (__t$_KeyIteratorOfK$V = dart.constFn(indexable_skip_list._KeyIterator$(K, V)))();
    class _KeyIterable extends collection.IterableBase$(K) {
      static ['_#new#tearOff'](K, V, head) {
        return new (indexable_skip_list._KeyIterable$(K, V)).new(head);
      }
      get iterator() {
        return new (__t$_KeyIteratorOfK$V()).new(this.head);
      }
    }
    (_KeyIterable.new = function(head) {
      this.head = head;
      _KeyIterable.__proto__.new.call(this);
      ;
    }).prototype = _KeyIterable.prototype;
    dart.addTypeTests(_KeyIterable);
    _KeyIterable.prototype[_is__KeyIterable_default] = true;
    dart.addTypeCaches(_KeyIterable);
    dart.setGetterSignature(_KeyIterable, () => ({
      __proto__: dart.getGetters(_KeyIterable.__proto__),
      iterator: core.Iterator$(K),
      [$iterator]: core.Iterator$(K)
    }));
    dart.setLibraryUri(_KeyIterable, I[0]);
    dart.setFieldSignature(_KeyIterable, () => ({
      __proto__: dart.getFields(_KeyIterable.__proto__),
      head: dart.finalFieldType(indexable_skip_list._Node$(dart.nullable(K), dart.nullable(V)))
    }));
    dart.defineExtensionAccessors(_KeyIterable, ['iterator']);
    return _KeyIterable;
  });
  indexable_skip_list._KeyIterable = indexable_skip_list._KeyIterable$();
  dart.addTypeTests(indexable_skip_list._KeyIterable, _is__KeyIterable_default);
  const _is__ValueIterator_default = Symbol('_is__ValueIterator_default');
  indexable_skip_list._ValueIterator$ = dart.generic((K, V) => {
    class _ValueIterator extends indexable_skip_list._Iterator$(K, V, V) {
      static ['_#new#tearOff'](K, V, node) {
        return new (indexable_skip_list._ValueIterator$(K, V)).new(node);
      }
      get current() {
        return dart.nullCheck(dart.nullCheck(this.node).value);
      }
    }
    (_ValueIterator.new = function(node) {
      _ValueIterator.__proto__.new.call(this, node);
      ;
    }).prototype = _ValueIterator.prototype;
    dart.addTypeTests(_ValueIterator);
    _ValueIterator.prototype[_is__ValueIterator_default] = true;
    dart.addTypeCaches(_ValueIterator);
    dart.setGetterSignature(_ValueIterator, () => ({
      __proto__: dart.getGetters(_ValueIterator.__proto__),
      current: V
    }));
    dart.setLibraryUri(_ValueIterator, I[0]);
    return _ValueIterator;
  });
  indexable_skip_list._ValueIterator = indexable_skip_list._ValueIterator$();
  dart.addTypeTests(indexable_skip_list._ValueIterator, _is__ValueIterator_default);
  const _is__ValueIterable_default = Symbol('_is__ValueIterable_default');
  indexable_skip_list._ValueIterable$ = dart.generic((K, V) => {
    var __t$_ValueIteratorOfK$V = () => (__t$_ValueIteratorOfK$V = dart.constFn(indexable_skip_list._ValueIterator$(K, V)))();
    class _ValueIterable extends collection.IterableBase$(V) {
      static ['_#new#tearOff'](K, V, head) {
        return new (indexable_skip_list._ValueIterable$(K, V)).new(head);
      }
      get iterator() {
        return new (__t$_ValueIteratorOfK$V()).new(this.head);
      }
    }
    (_ValueIterable.new = function(head) {
      this.head = head;
      _ValueIterable.__proto__.new.call(this);
      ;
    }).prototype = _ValueIterable.prototype;
    dart.addTypeTests(_ValueIterable);
    _ValueIterable.prototype[_is__ValueIterable_default] = true;
    dart.addTypeCaches(_ValueIterable);
    dart.setGetterSignature(_ValueIterable, () => ({
      __proto__: dart.getGetters(_ValueIterable.__proto__),
      iterator: core.Iterator$(V),
      [$iterator]: core.Iterator$(V)
    }));
    dart.setLibraryUri(_ValueIterable, I[0]);
    dart.setFieldSignature(_ValueIterable, () => ({
      __proto__: dart.getFields(_ValueIterable.__proto__),
      head: dart.finalFieldType(indexable_skip_list._Node$(dart.nullable(K), dart.nullable(V)))
    }));
    dart.defineExtensionAccessors(_ValueIterable, ['iterator']);
    return _ValueIterable;
  });
  indexable_skip_list._ValueIterable = indexable_skip_list._ValueIterable$();
  dart.addTypeTests(indexable_skip_list._ValueIterable, _is__ValueIterable_default);
  dart.trackLibraries("packages/hive/src/util/indexable_skip_list.dart", {
    "package:hive/src/util/indexable_skip_list.dart": indexable_skip_list
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["indexable_skip_list.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../packages/hive/src/util/indexable_skip_list.dart.lib.js"}');
  // Exports:
  return {
    src__util__indexable_skip_list: indexable_skip_list
  };
}));

//# sourceMappingURL=indexable_skip_list.dart.lib.js.map
