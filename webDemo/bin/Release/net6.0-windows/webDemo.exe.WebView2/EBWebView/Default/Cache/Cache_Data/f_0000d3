define(['dart_sdk', 'packages/drift/web.dart', 'packages/drift/src/utils/lazy_database.dart', 'packages/undo/src/undo_stack.dart', 'packages/data/datasource/local/moor/db_utils.dart', 'packages/moor/moor.dart'], (function load__packages__data__datasource__local__moor__database__web_dart(dart_sdk, packages__drift__web$46dart, packages__drift__src__utils__lazy_database$46dart, packages__undo__src__undo_stack$46dart, packages__data__datasource__local__moor__db_utils$46dart, packages__moor__moor$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const _internal = dart_sdk._internal;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const web = packages__drift__web$46dart.web;
  const dsl = packages__drift__src__utils__lazy_database$46dart.src__dsl__dsl;
  const query_builder = packages__drift__src__utils__lazy_database$46dart.src__runtime__query_builder__query_builder;
  const sql_types = packages__drift__src__utils__lazy_database$46dart.src__runtime__types__sql_types;
  const runtime_api = packages__drift__src__utils__lazy_database$46dart.src__runtime__api__runtime_api;
  const data_class = packages__drift__src__utils__lazy_database$46dart.src__runtime__data_class;
  const data_verification = packages__drift__src__utils__lazy_database$46dart.src__runtime__data_verification;
  const undo_stack = packages__undo__src__undo_stack$46dart.src__undo_stack;
  const db_utils = packages__data__datasource__local__moor__db_utils$46dart.datasource__local__moor__db_utils;
  const moor = packages__moor__moor$46dart.moor;
  var web$ = Object.create(dart.library);
  var shared = Object.create(dart.library);
  var output_type = Object.create(dart.library);
  var output_sale_type = Object.create(dart.library);
  var output_sale = Object.create(dart.library);
  var output_form = Object.create(dart.library);
  var employee_delivery = Object.create(dart.library);
  var customer = Object.create(dart.library);
  var animation_background_relation = Object.create(dart.library);
  var database = Object.create(dart.library);
  var $addAll = dartx.addAll;
  var $first = dartx.first;
  var $_get = dartx._get;
  var $toString = dartx.toString;
  var $whereType = dartx.whereType;
  var $_set = dartx._set;
  var $containsKey = dartx.containsKey;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    JSArrayOfOutputType: () => (T.JSArrayOfOutputType = dart.constFn(_interceptors.JSArray$(database.OutputType)))(),
    ListOfOutputType: () => (T.ListOfOutputType = dart.constFn(core.List$(database.OutputType)))(),
    JSArrayOfOutputSaleType: () => (T.JSArrayOfOutputSaleType = dart.constFn(_interceptors.JSArray$(database.OutputSaleType)))(),
    ListOfOutputSaleType: () => (T.ListOfOutputSaleType = dart.constFn(core.List$(database.OutputSaleType)))(),
    DateTimeN: () => (T.DateTimeN = dart.constFn(dart.nullable(core.DateTime)))(),
    JSArrayOfOutputSale: () => (T.JSArrayOfOutputSale = dart.constFn(_interceptors.JSArray$(database.OutputSale)))(),
    ListOfOutputSale: () => (T.ListOfOutputSale = dart.constFn(core.List$(database.OutputSale)))(),
    $OutputSalesTableToOrderingTerm: () => (T.$OutputSalesTableToOrderingTerm = dart.constFn(dart.fnType(query_builder.OrderingTerm, [database.$OutputSalesTable])))(),
    JSArrayOf$OutputSalesTableToOrderingTerm: () => (T.JSArrayOf$OutputSalesTableToOrderingTerm = dart.constFn(_interceptors.JSArray$(T.$OutputSalesTableToOrderingTerm())))(),
    LinkedHashSetOfResultSetImplementation: () => (T.LinkedHashSetOfResultSetImplementation = dart.constFn(collection.LinkedHashSet$(query_builder.ResultSetImplementation)))(),
    JSArrayOfOutputForm: () => (T.JSArrayOfOutputForm = dart.constFn(_interceptors.JSArray$(database.OutputForm)))(),
    ListOfOutputForm: () => (T.ListOfOutputForm = dart.constFn(core.List$(database.OutputForm)))(),
    JSArrayOfEmployeeDelivery: () => (T.JSArrayOfEmployeeDelivery = dart.constFn(_interceptors.JSArray$(database.EmployeeDelivery)))(),
    ListOfEmployeeDelivery: () => (T.ListOfEmployeeDelivery = dart.constFn(core.List$(database.EmployeeDelivery)))(),
    intN: () => (T.intN = dart.constFn(dart.nullable(core.int)))(),
    JSArrayOfCustomer: () => (T.JSArrayOfCustomer = dart.constFn(_interceptors.JSArray$(database.Customer)))(),
    ListOfCustomer: () => (T.ListOfCustomer = dart.constFn(core.List$(database.Customer)))(),
    ExpressionOfbool: () => (T.ExpressionOfbool = dart.constFn(query_builder.Expression$(core.bool)))(),
    $LuckyAnimationBackgroundsTableToExpressionOfbool: () => (T.$LuckyAnimationBackgroundsTableToExpressionOfbool = dart.constFn(dart.fnType(T.ExpressionOfbool(), [database.$LuckyAnimationBackgroundsTable])))(),
    ListOfLuckyAnimationBackground: () => (T.ListOfLuckyAnimationBackground = dart.constFn(core.List$(database.LuckyAnimationBackground)))(),
    FutureOfvoid: () => (T.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    MigratorToFutureOfvoid: () => (T.MigratorToFutureOfvoid = dart.constFn(dart.fnType(T.FutureOfvoid(), [query_builder.Migrator])))(),
    MigratorAndintAndintToFutureOfvoid: () => (T.MigratorAndintAndintToFutureOfvoid = dart.constFn(dart.fnType(T.FutureOfvoid(), [query_builder.Migrator, core.int, core.int])))(),
    OpeningDetailsToFutureOfvoid: () => (T.OpeningDetailsToFutureOfvoid = dart.constFn(dart.fnType(T.FutureOfvoid(), [query_builder.OpeningDetails])))(),
    TableInfoOfTable$dynamic: () => (T.TableInfoOfTable$dynamic = dart.constFn(query_builder.TableInfo$(dsl.Table, dart.dynamic)))(),
    JSArrayOfDatabaseSchemaEntity: () => (T.JSArrayOfDatabaseSchemaEntity = dart.constFn(_interceptors.JSArray$(query_builder.DatabaseSchemaEntity)))(),
    IdentityMapOfString$Expression: () => (T.IdentityMapOfString$Expression = dart.constFn(_js_helper.IdentityMap$(core.String, query_builder.Expression)))(),
    VariableOfint: () => (T.VariableOfint = dart.constFn(query_builder.Variable$(core.int)))(),
    VariableOfString: () => (T.VariableOfString = dart.constFn(query_builder.Variable$(core.String)))(),
    VariableOfDateTimeN: () => (T.VariableOfDateTimeN = dart.constFn(query_builder.Variable$(T.DateTimeN())))(),
    VariableOfintN: () => (T.VariableOfintN = dart.constFn(query_builder.Variable$(T.intN())))(),
    ValueOfint: () => (T.ValueOfint = dart.constFn(data_class.Value$(core.int)))(),
    ValueOfString: () => (T.ValueOfString = dart.constFn(data_class.Value$(core.String)))(),
    ValueOfDateTimeN: () => (T.ValueOfDateTimeN = dart.constFn(data_class.Value$(T.DateTimeN())))(),
    ValueOfintN: () => (T.ValueOfintN = dart.constFn(data_class.Value$(T.intN())))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    RawValuesInsertableOfCustomer: () => (T.RawValuesInsertableOfCustomer = dart.constFn(data_class.RawValuesInsertable$(database.Customer)))(),
    GeneratedColumnOfintN: () => (T.GeneratedColumnOfintN = dart.constFn(query_builder.GeneratedColumn$(T.intN())))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    GeneratedColumnOfStringN: () => (T.GeneratedColumnOfStringN = dart.constFn(query_builder.GeneratedColumn$(T.StringN())))(),
    GeneratedColumnOfDateTimeN: () => (T.GeneratedColumnOfDateTimeN = dart.constFn(query_builder.GeneratedColumn$(T.DateTimeN())))(),
    JSArrayOfGeneratedColumn: () => (T.JSArrayOfGeneratedColumn = dart.constFn(_interceptors.JSArray$(query_builder.GeneratedColumn)))(),
    InsertableOfCustomer: () => (T.InsertableOfCustomer = dart.constFn(data_class.Insertable$(database.Customer)))(),
    LinkedHashSetOfGeneratedColumn: () => (T.LinkedHashSetOfGeneratedColumn = dart.constFn(collection.LinkedHashSet$(query_builder.GeneratedColumn)))(),
    RawValuesInsertableOfEmployeeDelivery: () => (T.RawValuesInsertableOfEmployeeDelivery = dart.constFn(data_class.RawValuesInsertable$(database.EmployeeDelivery)))(),
    InsertableOfEmployeeDelivery: () => (T.InsertableOfEmployeeDelivery = dart.constFn(data_class.Insertable$(database.EmployeeDelivery)))(),
    VariableOfbool: () => (T.VariableOfbool = dart.constFn(query_builder.Variable$(core.bool)))(),
    VariableOfdouble: () => (T.VariableOfdouble = dart.constFn(query_builder.Variable$(core.double)))(),
    ValueOfbool: () => (T.ValueOfbool = dart.constFn(data_class.Value$(core.bool)))(),
    ValueOfdouble: () => (T.ValueOfdouble = dart.constFn(data_class.Value$(core.double)))(),
    RawValuesInsertableOfOutputSale: () => (T.RawValuesInsertableOfOutputSale = dart.constFn(data_class.RawValuesInsertable$(database.OutputSale)))(),
    boolN: () => (T.boolN = dart.constFn(dart.nullable(core.bool)))(),
    GeneratedColumnOfboolN: () => (T.GeneratedColumnOfboolN = dart.constFn(query_builder.GeneratedColumn$(T.boolN())))(),
    doubleN: () => (T.doubleN = dart.constFn(dart.nullable(core.double)))(),
    GeneratedColumnOfdoubleN: () => (T.GeneratedColumnOfdoubleN = dart.constFn(query_builder.GeneratedColumn$(T.doubleN())))(),
    InsertableOfOutputSale: () => (T.InsertableOfOutputSale = dart.constFn(data_class.Insertable$(database.OutputSale)))(),
    RawValuesInsertableOfOutputSaleType: () => (T.RawValuesInsertableOfOutputSaleType = dart.constFn(data_class.RawValuesInsertable$(database.OutputSaleType)))(),
    InsertableOfOutputSaleType: () => (T.InsertableOfOutputSaleType = dart.constFn(data_class.Insertable$(database.OutputSaleType)))(),
    RawValuesInsertableOfOutputForm: () => (T.RawValuesInsertableOfOutputForm = dart.constFn(data_class.RawValuesInsertable$(database.OutputForm)))(),
    InsertableOfOutputForm: () => (T.InsertableOfOutputForm = dart.constFn(data_class.Insertable$(database.OutputForm)))(),
    RawValuesInsertableOfOutputType: () => (T.RawValuesInsertableOfOutputType = dart.constFn(data_class.RawValuesInsertable$(database.OutputType)))(),
    InsertableOfOutputType: () => (T.InsertableOfOutputType = dart.constFn(data_class.Insertable$(database.OutputType)))(),
    RawValuesInsertableOfLuckyAnimationBackground: () => (T.RawValuesInsertableOfLuckyAnimationBackground = dart.constFn(data_class.RawValuesInsertable$(database.LuckyAnimationBackground)))(),
    InsertableOfLuckyAnimationBackground: () => (T.InsertableOfLuckyAnimationBackground = dart.constFn(data_class.Insertable$(database.LuckyAnimationBackground)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: sql_types.IntType.prototype
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: sql_types.StringType.prototype
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: sql_types.DateTimeType.prototype
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: T.ValueOfDateTimeN().prototype,
        [Value__value]: null,
        [Value_present]: false
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: T.ValueOfintN().prototype,
        [Value__value]: null,
        [Value_present]: false
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: T.ValueOfint().prototype,
        [Value__value]: null,
        [Value_present]: false
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: T.ValueOfString().prototype,
        [Value__value]: null,
        [Value_present]: false
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: data_verification.VerificationMeta.prototype,
        [VerificationMeta_dartGetterName]: "id"
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: data_verification.VerificationMeta.prototype,
        [VerificationMeta_dartGetterName]: "name"
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: data_verification.VerificationMeta.prototype,
        [VerificationMeta_dartGetterName]: "address"
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: data_verification.VerificationMeta.prototype,
        [VerificationMeta_dartGetterName]: "phone"
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: data_verification.VerificationMeta.prototype,
        [VerificationMeta_dartGetterName]: "createDate"
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: data_verification.VerificationMeta.prototype,
        [VerificationMeta_dartGetterName]: "employeeDeliveryId"
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: sql_types.BoolType.prototype
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: sql_types.RealType.prototype
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: T.ValueOfbool().prototype,
        [Value__value]: null,
        [Value_present]: false
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: T.ValueOfdouble().prototype,
        [Value__value]: null,
        [Value_present]: false
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: data_verification.VerificationMeta.prototype,
        [VerificationMeta_dartGetterName]: "OSID"
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: data_verification.VerificationMeta.prototype,
        [VerificationMeta_dartGetterName]: "OutputSaleID"
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: data_verification.VerificationMeta.prototype,
        [VerificationMeta_dartGetterName]: "OutputStoreID"
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: data_verification.VerificationMeta.prototype,
        [VerificationMeta_dartGetterName]: "OutputTypeID"
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: data_verification.VerificationMeta.prototype,
        [VerificationMeta_dartGetterName]: "CustomerID"
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: data_verification.VerificationMeta.prototype,
        [VerificationMeta_dartGetterName]: "CustomerName"
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: data_verification.VerificationMeta.prototype,
        [VerificationMeta_dartGetterName]: "CustomerPhone"
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: data_verification.VerificationMeta.prototype,
        [VerificationMeta_dartGetterName]: "IsRequiredVAT"
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: data_verification.VerificationMeta.prototype,
        [VerificationMeta_dartGetterName]: "TotalAmount"
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: data_verification.VerificationMeta.prototype,
        [VerificationMeta_dartGetterName]: "Description"
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: data_verification.VerificationMeta.prototype,
        [VerificationMeta_dartGetterName]: "CreatedDate"
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: data_verification.VerificationMeta.prototype,
        [VerificationMeta_dartGetterName]: "type"
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: data_verification.VerificationMeta.prototype,
        [VerificationMeta_dartGetterName]: "backgroundFirst"
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: data_verification.VerificationMeta.prototype,
        [VerificationMeta_dartGetterName]: "backgroundSecond"
      });
    }
  }, false);
  var C = Array(31).fill(void 0);
  var I = [
    "package:data/datasource/local/moor/table/output_type/output_type.dart",
    "package:data/datasource/local/moor/table/output_sale_type/output_sale_type.dart",
    "package:data/datasource/local/moor/table/output_sale/output_sale.dart",
    "package:data/datasource/local/moor/table/output_form/output_form.dart",
    "package:data/datasource/local/moor/table/employee_delivery/employee_delivery.dart",
    "package:data/datasource/local/moor/table/customer/customer.dart",
    "package:data/datasource/local/moor/table/animation_background/animation_background_relation.dart",
    "package:data/datasource/local/moor/database.dart"
  ];
  web$.constructDb = function constructDb(opts) {
    let logStatements = opts && 'logStatements' in opts ? opts.logStatements : false;
    let name = opts && 'name' in opts ? opts.name : "MoorDatabase";
    return new database.MoorDatabase.new(new web.WebDatabase.new(name, {logStatements: logStatements}));
  };
  output_type.OutputTypes = class OutputTypes extends dsl.Table {
    get name() {
      return dsl['BuildGeneralColumn|call'](core.String, this.text());
    }
    get type() {
      return dsl['BuildGeneralColumn|call'](core.int, this.integer());
    }
    static ['_#new#tearOff']() {
      return new output_type.OutputTypes.new();
    }
  };
  (output_type.OutputTypes.new = function() {
    output_type.OutputTypes.__proto__.new.call(this);
    ;
  }).prototype = output_type.OutputTypes.prototype;
  dart.addTypeTests(output_type.OutputTypes);
  dart.addTypeCaches(output_type.OutputTypes);
  dart.setGetterSignature(output_type.OutputTypes, () => ({
    __proto__: dart.getGetters(output_type.OutputTypes.__proto__),
    name: dsl.Column$(dart.nullable(core.String)),
    type: dsl.Column$(dart.nullable(core.int))
  }));
  dart.setLibraryUri(output_type.OutputTypes, I[0]);
  output_type.OutputTypesProvider = class OutputTypesProvider extends core.Object {};
  (output_type.OutputTypesProvider.new = function() {
    ;
  }).prototype = output_type.OutputTypesProvider.prototype;
  dart.addTypeTests(output_type.OutputTypesProvider);
  dart.addTypeCaches(output_type.OutputTypesProvider);
  dart.setLibraryUri(output_type.OutputTypesProvider, I[0]);
  var db$ = dart.privateName(output_type, "OutputTypesProviderImp.db");
  output_type.OutputTypesProviderImp = class OutputTypesProviderImp extends core.Object {
    get db() {
      return this[db$];
    }
    set db(value) {
      super.db = value;
    }
    static ['_#new#tearOff'](db) {
      return new output_type.OutputTypesProviderImp.new(db);
    }
    get table() {
      return this.db.outputTypes;
    }
    createOutputType(outputType) {
      return async.async(core.int, (function* createOutputType() {
        try {
          yield this.db.createTableRow(this.table, outputType);
          return 1;
        } catch (e$) {
          let e = dart.getThrown(e$);
          let t = dart.stackTrace(e$);
          if (core.Object.is(e)) {
          } else
            throw e$;
        }
        return 0;
      }).bind(this));
    }
    updateOutputType(outputType) {
      return async.async(dart.void, (function* updateOutputType() {
        return yield this.db.updateTableRow(this.table, outputType);
      }).bind(this));
    }
    deleteOutputType(outputType) {
      return this.db.deleteTableRow(this.table, outputType);
    }
    deleteAll() {
      return async.async(core.int, (function* deleteAll() {
        return yield this.db.deleteTableAll(this.table);
      }).bind(this));
    }
    getAllOutputType() {
      return async.async(T.ListOfOutputType(), (function* getAllOutputType() {
        let list = T.JSArrayOfOutputType().of([]);
        let data = (yield this.db.select(database.$OutputTypesTable, database.OutputType, this.table).get());
        list[$addAll](data);
        return list;
      }).bind(this));
    }
  };
  (output_type.OutputTypesProviderImp.new = function(db) {
    this[db$] = db;
    ;
  }).prototype = output_type.OutputTypesProviderImp.prototype;
  dart.addTypeTests(output_type.OutputTypesProviderImp);
  dart.addTypeCaches(output_type.OutputTypesProviderImp);
  output_type.OutputTypesProviderImp[dart.implements] = () => [output_type.OutputTypesProvider];
  dart.setMethodSignature(output_type.OutputTypesProviderImp, () => ({
    __proto__: dart.getMethods(output_type.OutputTypesProviderImp.__proto__),
    createOutputType: dart.fnType(async.Future$(core.int), [database.OutputTypesCompanion]),
    updateOutputType: dart.fnType(async.Future$(dart.void), [database.OutputType]),
    deleteOutputType: dart.fnType(async.Future$(dart.void), [database.OutputType]),
    deleteAll: dart.fnType(async.Future$(core.int), []),
    getAllOutputType: dart.fnType(async.Future$(core.List$(database.OutputType)), [])
  }));
  dart.setGetterSignature(output_type.OutputTypesProviderImp, () => ({
    __proto__: dart.getGetters(output_type.OutputTypesProviderImp.__proto__),
    table: database.$OutputTypesTable
  }));
  dart.setLibraryUri(output_type.OutputTypesProviderImp, I[0]);
  dart.setFieldSignature(output_type.OutputTypesProviderImp, () => ({
    __proto__: dart.getFields(output_type.OutputTypesProviderImp.__proto__),
    db: dart.finalFieldType(database.MoorDatabase)
  }));
  output_sale_type.OutputSaleTypes = class OutputSaleTypes extends dsl.Table {
    get name() {
      return dsl['BuildGeneralColumn|call'](core.String, this.text());
    }
    get type() {
      return dsl['BuildGeneralColumn|call'](core.int, this.integer());
    }
    static ['_#new#tearOff']() {
      return new output_sale_type.OutputSaleTypes.new();
    }
  };
  (output_sale_type.OutputSaleTypes.new = function() {
    output_sale_type.OutputSaleTypes.__proto__.new.call(this);
    ;
  }).prototype = output_sale_type.OutputSaleTypes.prototype;
  dart.addTypeTests(output_sale_type.OutputSaleTypes);
  dart.addTypeCaches(output_sale_type.OutputSaleTypes);
  dart.setGetterSignature(output_sale_type.OutputSaleTypes, () => ({
    __proto__: dart.getGetters(output_sale_type.OutputSaleTypes.__proto__),
    name: dsl.Column$(dart.nullable(core.String)),
    type: dsl.Column$(dart.nullable(core.int))
  }));
  dart.setLibraryUri(output_sale_type.OutputSaleTypes, I[1]);
  output_sale_type.OutputSaleTypesProvider = class OutputSaleTypesProvider extends core.Object {};
  (output_sale_type.OutputSaleTypesProvider.new = function() {
    ;
  }).prototype = output_sale_type.OutputSaleTypesProvider.prototype;
  dart.addTypeTests(output_sale_type.OutputSaleTypesProvider);
  dart.addTypeCaches(output_sale_type.OutputSaleTypesProvider);
  dart.setLibraryUri(output_sale_type.OutputSaleTypesProvider, I[1]);
  var db$0 = dart.privateName(output_sale_type, "OutputSaleTypesProviderImp.db");
  output_sale_type.OutputSaleTypesProviderImp = class OutputSaleTypesProviderImp extends core.Object {
    get db() {
      return this[db$0];
    }
    set db(value) {
      super.db = value;
    }
    static ['_#new#tearOff'](db) {
      return new output_sale_type.OutputSaleTypesProviderImp.new(db);
    }
    get table() {
      return this.db.outputSaleTypes;
    }
    createOutputSaleType(outputSaleType) {
      return async.async(core.int, (function* createOutputSaleType() {
        try {
          yield this.db.createTableRow(this.table, outputSaleType);
          return 1;
        } catch (e$) {
          let e = dart.getThrown(e$);
          let t = dart.stackTrace(e$);
          if (core.Object.is(e)) {
          } else
            throw e$;
        }
        return 0;
      }).bind(this));
    }
    updateOutputSaleType(outputSaleType) {
      return async.async(dart.void, (function* updateOutputSaleType() {
        return yield this.db.updateTableRow(this.table, outputSaleType);
      }).bind(this));
    }
    deleteOutputSaleType(outputSaleType) {
      return this.db.deleteTableRow(this.table, outputSaleType);
    }
    deleteAll() {
      return async.async(core.int, (function* deleteAll() {
        return yield this.db.deleteTableAll(this.table);
      }).bind(this));
    }
    getAllOutputSaleType() {
      return async.async(T.ListOfOutputSaleType(), (function* getAllOutputSaleType() {
        let list = T.JSArrayOfOutputSaleType().of([]);
        let data = (yield this.db.select(database.$OutputSaleTypesTable, database.OutputSaleType, this.table).get());
        list[$addAll](data);
        return list;
      }).bind(this));
    }
  };
  (output_sale_type.OutputSaleTypesProviderImp.new = function(db) {
    this[db$0] = db;
    ;
  }).prototype = output_sale_type.OutputSaleTypesProviderImp.prototype;
  dart.addTypeTests(output_sale_type.OutputSaleTypesProviderImp);
  dart.addTypeCaches(output_sale_type.OutputSaleTypesProviderImp);
  output_sale_type.OutputSaleTypesProviderImp[dart.implements] = () => [output_sale_type.OutputSaleTypesProvider];
  dart.setMethodSignature(output_sale_type.OutputSaleTypesProviderImp, () => ({
    __proto__: dart.getMethods(output_sale_type.OutputSaleTypesProviderImp.__proto__),
    createOutputSaleType: dart.fnType(async.Future$(core.int), [database.OutputSaleTypesCompanion]),
    updateOutputSaleType: dart.fnType(async.Future$(dart.void), [database.OutputSaleType]),
    deleteOutputSaleType: dart.fnType(async.Future$(dart.void), [database.OutputSaleType]),
    deleteAll: dart.fnType(async.Future$(core.int), []),
    getAllOutputSaleType: dart.fnType(async.Future$(core.List$(database.OutputSaleType)), [])
  }));
  dart.setGetterSignature(output_sale_type.OutputSaleTypesProviderImp, () => ({
    __proto__: dart.getGetters(output_sale_type.OutputSaleTypesProviderImp.__proto__),
    table: database.$OutputSaleTypesTable
  }));
  dart.setLibraryUri(output_sale_type.OutputSaleTypesProviderImp, I[1]);
  dart.setFieldSignature(output_sale_type.OutputSaleTypesProviderImp, () => ({
    __proto__: dart.getFields(output_sale_type.OutputSaleTypesProviderImp.__proto__),
    db: dart.finalFieldType(database.MoorDatabase)
  }));
  output_sale.OutputSales = class OutputSales extends dsl.Table {
    get OSID() {
      return dsl['BuildGeneralColumn|call'](core.int, dsl['BuildIntColumn|autoIncrement'](core.int, this.integer()));
    }
    get OutputSaleID() {
      return dsl['BuildGeneralColumn|call'](core.String, this.text());
    }
    get OutputStoreID() {
      return dsl['BuildGeneralColumn|call'](core.int, this.integer());
    }
    get OutputTypeID() {
      return dsl['BuildGeneralColumn|call'](core.int, this.integer());
    }
    get CustomerID() {
      return dsl['BuildGeneralColumn|call'](core.int, this.integer());
    }
    get CustomerName() {
      return dsl['BuildGeneralColumn|call'](core.String, this.text());
    }
    get CustomerPhone() {
      return dsl['BuildGeneralColumn|call'](core.String, this.text());
    }
    get IsRequiredVAT() {
      return dsl['BuildGeneralColumn|call'](core.bool, this.boolean());
    }
    get TotalAmount() {
      return dsl['BuildGeneralColumn|call'](core.double, this.real());
    }
    get Description() {
      return dsl['BuildGeneralColumn|call'](core.String, this.text());
    }
    get CreatedDate() {
      return dsl['BuildGeneralColumn|call'](T.DateTimeN(), dsl['BuildGeneralColumn|nullable'](core.DateTime, this.dateTime()));
    }
    static ['_#new#tearOff']() {
      return new output_sale.OutputSales.new();
    }
  };
  (output_sale.OutputSales.new = function() {
    output_sale.OutputSales.__proto__.new.call(this);
    ;
  }).prototype = output_sale.OutputSales.prototype;
  dart.addTypeTests(output_sale.OutputSales);
  dart.addTypeCaches(output_sale.OutputSales);
  dart.setGetterSignature(output_sale.OutputSales, () => ({
    __proto__: dart.getGetters(output_sale.OutputSales.__proto__),
    OSID: dsl.Column$(dart.nullable(core.int)),
    OutputSaleID: dsl.Column$(dart.nullable(core.String)),
    OutputStoreID: dsl.Column$(dart.nullable(core.int)),
    OutputTypeID: dsl.Column$(dart.nullable(core.int)),
    CustomerID: dsl.Column$(dart.nullable(core.int)),
    CustomerName: dsl.Column$(dart.nullable(core.String)),
    CustomerPhone: dsl.Column$(dart.nullable(core.String)),
    IsRequiredVAT: dsl.Column$(dart.nullable(core.bool)),
    TotalAmount: dsl.Column$(dart.nullable(core.double)),
    Description: dsl.Column$(dart.nullable(core.String)),
    CreatedDate: dsl.Column$(dart.nullable(core.DateTime))
  }));
  dart.setLibraryUri(output_sale.OutputSales, I[2]);
  output_sale.OutputSaleProvider = class OutputSaleProvider extends core.Object {};
  (output_sale.OutputSaleProvider.new = function() {
    ;
  }).prototype = output_sale.OutputSaleProvider.prototype;
  dart.addTypeTests(output_sale.OutputSaleProvider);
  dart.addTypeCaches(output_sale.OutputSaleProvider);
  dart.setLibraryUri(output_sale.OutputSaleProvider, I[2]);
  var db$1 = dart.privateName(output_sale, "OutputSaleProviderImp.db");
  output_sale.OutputSaleProviderImp = class OutputSaleProviderImp extends core.Object {
    get db() {
      return this[db$1];
    }
    set db(value) {
      super.db = value;
    }
    static ['_#new#tearOff'](db) {
      return new output_sale.OutputSaleProviderImp.new(db);
    }
    get table() {
      return this.db.outputSales;
    }
    createOutputSale(outputSaleCompanion) {
      return async.async(core.int, (function* createOutputSale() {
        try {
          yield this.db.createTableRow(this.table, outputSaleCompanion);
          return 1;
        } catch (e$) {
          let e = dart.getThrown(e$);
          let t = dart.stackTrace(e$);
          if (core.Object.is(e)) {
          } else
            throw e$;
        }
        return 0;
      }).bind(this));
    }
    updateOutputSale(outputSale) {
      return async.async(dart.void, (function* updateOutputSale() {
        return yield this.db.updateTableRow(this.table, outputSale);
      }).bind(this));
    }
    deleteOutputSale(outputSale) {
      return this.db.deleteTableRow(this.table, outputSale);
    }
    deleteAll() {
      return async.async(core.int, (function* deleteAll() {
        return yield this.db.deleteTableAll(this.table);
      }).bind(this));
    }
    getAllOutputSale() {
      return async.async(T.ListOfOutputSale(), (function* getAllOutputSale() {
        let list = T.JSArrayOfOutputSale().of([]);
        let data = (yield this.db.select(database.$OutputSalesTable, database.OutputSale, this.table).get());
        list[$addAll](data);
        return list;
      }).bind(this));
    }
    getOutPutPaging(offset, pageSize) {
      return async.async(T.ListOfOutputSale(), (function* getOutPutPaging() {
        let t3, t3$;
        let list = T.JSArrayOfOutputSale().of([]);
        let dataSort = (t3 = (yield this.db.select(database.$OutputSalesTable, database.OutputSale, this.table)), (() => {
          t3.orderBy(T.JSArrayOf$OutputSalesTableToOrderingTerm().of([dart.fn(t => new query_builder.OrderingTerm.new({expression: t.CreatedDate, mode: query_builder.OrderingMode.desc}), T.$OutputSalesTableToOrderingTerm())]));
          return t3;
        })());
        let dataLimit = (t3$ = (yield dataSort), (() => {
          t3$.limit(pageSize, {offset: offset * pageSize});
          return t3$;
        })());
        let data = (yield dataLimit.get());
        list[$addAll](data);
        return list;
      }).bind(this));
    }
    countNumberRecord() {
      return async.async(core.int, (function* countNumberRecord() {
        let t3;
        let data = (yield this.db.customSelect("SELECT COUNT(*) as sl FROM " + this.table.aliasedName, {readsFrom: T.LinkedHashSetOfResultSetImplementation().from([this.table])}).watch().first);
        t3 = core.int.tryParse(dart.toString(data[$first].data[$_get]("sl")));
        return t3 == null ? 0 : t3;
      }).bind(this));
    }
  };
  (output_sale.OutputSaleProviderImp.new = function(db) {
    this[db$1] = db;
    ;
  }).prototype = output_sale.OutputSaleProviderImp.prototype;
  dart.addTypeTests(output_sale.OutputSaleProviderImp);
  dart.addTypeCaches(output_sale.OutputSaleProviderImp);
  output_sale.OutputSaleProviderImp[dart.implements] = () => [output_sale.OutputSaleProvider];
  dart.setMethodSignature(output_sale.OutputSaleProviderImp, () => ({
    __proto__: dart.getMethods(output_sale.OutputSaleProviderImp.__proto__),
    createOutputSale: dart.fnType(async.Future$(core.int), [database.OutputSalesCompanion]),
    updateOutputSale: dart.fnType(async.Future$(dart.void), [database.OutputSale]),
    deleteOutputSale: dart.fnType(async.Future$(dart.void), [database.OutputSale]),
    deleteAll: dart.fnType(async.Future$(core.int), []),
    getAllOutputSale: dart.fnType(async.Future$(core.List$(database.OutputSale)), []),
    getOutPutPaging: dart.fnType(async.Future$(core.List$(database.OutputSale)), [core.int, core.int]),
    countNumberRecord: dart.fnType(async.Future$(core.int), [])
  }));
  dart.setGetterSignature(output_sale.OutputSaleProviderImp, () => ({
    __proto__: dart.getGetters(output_sale.OutputSaleProviderImp.__proto__),
    table: database.$OutputSalesTable
  }));
  dart.setLibraryUri(output_sale.OutputSaleProviderImp, I[2]);
  dart.setFieldSignature(output_sale.OutputSaleProviderImp, () => ({
    __proto__: dart.getFields(output_sale.OutputSaleProviderImp.__proto__),
    db: dart.finalFieldType(database.MoorDatabase)
  }));
  output_form.OutputForms = class OutputForms extends dsl.Table {
    get name() {
      return dsl['BuildGeneralColumn|call'](core.String, this.text());
    }
    get type() {
      return dsl['BuildGeneralColumn|call'](core.int, this.integer());
    }
    static ['_#new#tearOff']() {
      return new output_form.OutputForms.new();
    }
  };
  (output_form.OutputForms.new = function() {
    output_form.OutputForms.__proto__.new.call(this);
    ;
  }).prototype = output_form.OutputForms.prototype;
  dart.addTypeTests(output_form.OutputForms);
  dart.addTypeCaches(output_form.OutputForms);
  dart.setGetterSignature(output_form.OutputForms, () => ({
    __proto__: dart.getGetters(output_form.OutputForms.__proto__),
    name: dsl.Column$(dart.nullable(core.String)),
    type: dsl.Column$(dart.nullable(core.int))
  }));
  dart.setLibraryUri(output_form.OutputForms, I[3]);
  output_form.OutputFormsProvider = class OutputFormsProvider extends core.Object {};
  (output_form.OutputFormsProvider.new = function() {
    ;
  }).prototype = output_form.OutputFormsProvider.prototype;
  dart.addTypeTests(output_form.OutputFormsProvider);
  dart.addTypeCaches(output_form.OutputFormsProvider);
  dart.setLibraryUri(output_form.OutputFormsProvider, I[3]);
  var db$2 = dart.privateName(output_form, "OutputFormsProviderImp.db");
  output_form.OutputFormsProviderImp = class OutputFormsProviderImp extends core.Object {
    get db() {
      return this[db$2];
    }
    set db(value) {
      super.db = value;
    }
    static ['_#new#tearOff'](db) {
      return new output_form.OutputFormsProviderImp.new(db);
    }
    get table() {
      return this.db.outputForms;
    }
    createOutputForm(outputForm) {
      return async.async(core.int, (function* createOutputForm() {
        try {
          yield this.db.createTableRow(this.table, outputForm);
          return 1;
        } catch (e$) {
          let e = dart.getThrown(e$);
          let t = dart.stackTrace(e$);
          if (core.Object.is(e)) {
          } else
            throw e$;
        }
        return 0;
      }).bind(this));
    }
    updateOutputForm(outputForm) {
      return async.async(dart.void, (function* updateOutputForm() {
        return yield this.db.updateTableRow(this.table, outputForm);
      }).bind(this));
    }
    deleteOutputForm(outputForm) {
      return this.db.deleteTableRow(this.table, outputForm);
    }
    deleteAll() {
      return async.async(core.int, (function* deleteAll() {
        return yield this.db.deleteTableAll(this.table);
      }).bind(this));
    }
    getAllOutputForm() {
      return async.async(T.ListOfOutputForm(), (function* getAllOutputForm() {
        let list = T.JSArrayOfOutputForm().of([]);
        let data = (yield this.db.select(database.$OutputFormsTable, database.OutputForm, this.table).get());
        list[$addAll](data);
        return list;
      }).bind(this));
    }
  };
  (output_form.OutputFormsProviderImp.new = function(db) {
    this[db$2] = db;
    ;
  }).prototype = output_form.OutputFormsProviderImp.prototype;
  dart.addTypeTests(output_form.OutputFormsProviderImp);
  dart.addTypeCaches(output_form.OutputFormsProviderImp);
  output_form.OutputFormsProviderImp[dart.implements] = () => [output_form.OutputFormsProvider];
  dart.setMethodSignature(output_form.OutputFormsProviderImp, () => ({
    __proto__: dart.getMethods(output_form.OutputFormsProviderImp.__proto__),
    createOutputForm: dart.fnType(async.Future$(core.int), [database.OutputFormsCompanion]),
    updateOutputForm: dart.fnType(async.Future$(dart.void), [database.OutputForm]),
    deleteOutputForm: dart.fnType(async.Future$(dart.void), [database.OutputForm]),
    deleteAll: dart.fnType(async.Future$(core.int), []),
    getAllOutputForm: dart.fnType(async.Future$(core.List$(database.OutputForm)), [])
  }));
  dart.setGetterSignature(output_form.OutputFormsProviderImp, () => ({
    __proto__: dart.getGetters(output_form.OutputFormsProviderImp.__proto__),
    table: database.$OutputFormsTable
  }));
  dart.setLibraryUri(output_form.OutputFormsProviderImp, I[3]);
  dart.setFieldSignature(output_form.OutputFormsProviderImp, () => ({
    __proto__: dart.getFields(output_form.OutputFormsProviderImp.__proto__),
    db: dart.finalFieldType(database.MoorDatabase)
  }));
  employee_delivery.EmployeeDeliverys = class EmployeeDeliverys extends dsl.Table {
    get id() {
      return dsl['BuildGeneralColumn|call'](core.int, dsl['BuildIntColumn|autoIncrement'](core.int, this.integer()));
    }
    get name() {
      return dsl['BuildGeneralColumn|call'](core.String, this.text());
    }
    get createDate() {
      return dsl['BuildGeneralColumn|call'](T.DateTimeN(), dsl['BuildGeneralColumn|nullable'](core.DateTime, this.dateTime()));
    }
    static ['_#new#tearOff']() {
      return new employee_delivery.EmployeeDeliverys.new();
    }
  };
  (employee_delivery.EmployeeDeliverys.new = function() {
    employee_delivery.EmployeeDeliverys.__proto__.new.call(this);
    ;
  }).prototype = employee_delivery.EmployeeDeliverys.prototype;
  dart.addTypeTests(employee_delivery.EmployeeDeliverys);
  dart.addTypeCaches(employee_delivery.EmployeeDeliverys);
  dart.setGetterSignature(employee_delivery.EmployeeDeliverys, () => ({
    __proto__: dart.getGetters(employee_delivery.EmployeeDeliverys.__proto__),
    id: dsl.Column$(dart.nullable(core.int)),
    name: dsl.Column$(dart.nullable(core.String)),
    createDate: dsl.Column$(dart.nullable(core.DateTime))
  }));
  dart.setLibraryUri(employee_delivery.EmployeeDeliverys, I[4]);
  employee_delivery.EmployeeDeliverysProvider = class EmployeeDeliverysProvider extends core.Object {};
  (employee_delivery.EmployeeDeliverysProvider.new = function() {
    ;
  }).prototype = employee_delivery.EmployeeDeliverysProvider.prototype;
  dart.addTypeTests(employee_delivery.EmployeeDeliverysProvider);
  dart.addTypeCaches(employee_delivery.EmployeeDeliverysProvider);
  dart.setLibraryUri(employee_delivery.EmployeeDeliverysProvider, I[4]);
  var db$3 = dart.privateName(employee_delivery, "EmployeeDeliverysProviderImp.db");
  employee_delivery.EmployeeDeliverysProviderImp = class EmployeeDeliverysProviderImp extends core.Object {
    get db() {
      return this[db$3];
    }
    set db(value) {
      super.db = value;
    }
    static ['_#new#tearOff'](db) {
      return new employee_delivery.EmployeeDeliverysProviderImp.new(db);
    }
    get table() {
      return this.db.employeeDeliverys;
    }
    createEmployeeDelivery(employee) {
      return async.async(core.int, (function* createEmployeeDelivery() {
        return yield this.db.createTableRow(this.table, employee);
      }).bind(this));
    }
    updateEmployeeDelivery(employee) {
      return async.async(dart.void, (function* updateEmployeeDelivery() {
        return yield this.db.updateTableRow(this.table, employee);
      }).bind(this));
    }
    deleteEmployeeDelivery(employee) {
      return this.db.deleteTableRow(this.table, employee);
    }
    deleteAll() {
      return async.async(core.int, (function* deleteAll() {
        return yield this.db.deleteTableAll(this.table);
      }).bind(this));
    }
    getAllEmployeeDelivery() {
      return async.async(T.ListOfEmployeeDelivery(), (function* getAllEmployeeDelivery() {
        let list = T.JSArrayOfEmployeeDelivery().of([]);
        let data = (yield this.db.select(database.$EmployeeDeliverysTable, database.EmployeeDelivery, this.table).get());
        list[$addAll](data);
        return list;
      }).bind(this));
    }
  };
  (employee_delivery.EmployeeDeliverysProviderImp.new = function(db) {
    this[db$3] = db;
    ;
  }).prototype = employee_delivery.EmployeeDeliverysProviderImp.prototype;
  dart.addTypeTests(employee_delivery.EmployeeDeliverysProviderImp);
  dart.addTypeCaches(employee_delivery.EmployeeDeliverysProviderImp);
  employee_delivery.EmployeeDeliverysProviderImp[dart.implements] = () => [employee_delivery.EmployeeDeliverysProvider];
  dart.setMethodSignature(employee_delivery.EmployeeDeliverysProviderImp, () => ({
    __proto__: dart.getMethods(employee_delivery.EmployeeDeliverysProviderImp.__proto__),
    createEmployeeDelivery: dart.fnType(async.Future$(core.int), [database.EmployeeDeliverysCompanion]),
    updateEmployeeDelivery: dart.fnType(async.Future$(dart.void), [database.EmployeeDelivery]),
    deleteEmployeeDelivery: dart.fnType(async.Future$(dart.void), [database.EmployeeDelivery]),
    deleteAll: dart.fnType(async.Future$(core.int), []),
    getAllEmployeeDelivery: dart.fnType(async.Future$(core.List$(database.EmployeeDelivery)), [])
  }));
  dart.setGetterSignature(employee_delivery.EmployeeDeliverysProviderImp, () => ({
    __proto__: dart.getGetters(employee_delivery.EmployeeDeliverysProviderImp.__proto__),
    table: database.$EmployeeDeliverysTable
  }));
  dart.setLibraryUri(employee_delivery.EmployeeDeliverysProviderImp, I[4]);
  dart.setFieldSignature(employee_delivery.EmployeeDeliverysProviderImp, () => ({
    __proto__: dart.getFields(employee_delivery.EmployeeDeliverysProviderImp.__proto__),
    db: dart.finalFieldType(database.MoorDatabase)
  }));
  customer.Customers = class Customers extends dsl.Table {
    get id() {
      return dsl['BuildGeneralColumn|call'](core.int, dsl['BuildIntColumn|autoIncrement'](core.int, this.integer()));
    }
    get name() {
      return dsl['BuildGeneralColumn|call'](core.String, this.text());
    }
    get address() {
      return dsl['BuildGeneralColumn|call'](core.String, this.text());
    }
    get phone() {
      return dsl['BuildGeneralColumn|call'](core.String, this.text());
    }
    get createDate() {
      return dsl['BuildGeneralColumn|call'](T.DateTimeN(), dsl['BuildGeneralColumn|nullable'](core.DateTime, this.dateTime()));
    }
    get employeeDeliveryId() {
      return dsl['BuildGeneralColumn|call'](T.intN(), dsl['BuildColumn|customConstraint'](T.intN(), dsl['BuildGeneralColumn|nullable'](core.int, this.integer()), "NULLABLE REFERENCES employeeDelivery(id)"));
    }
    static ['_#new#tearOff']() {
      return new customer.Customers.new();
    }
  };
  (customer.Customers.new = function() {
    customer.Customers.__proto__.new.call(this);
    ;
  }).prototype = customer.Customers.prototype;
  dart.addTypeTests(customer.Customers);
  dart.addTypeCaches(customer.Customers);
  dart.setGetterSignature(customer.Customers, () => ({
    __proto__: dart.getGetters(customer.Customers.__proto__),
    id: dsl.Column$(dart.nullable(core.int)),
    name: dsl.Column$(dart.nullable(core.String)),
    address: dsl.Column$(dart.nullable(core.String)),
    phone: dsl.Column$(dart.nullable(core.String)),
    createDate: dsl.Column$(dart.nullable(core.DateTime)),
    employeeDeliveryId: dsl.Column$(dart.nullable(core.int))
  }));
  dart.setLibraryUri(customer.Customers, I[5]);
  customer.CustomersProvider = class CustomersProvider extends core.Object {};
  (customer.CustomersProvider.new = function() {
    ;
  }).prototype = customer.CustomersProvider.prototype;
  dart.addTypeTests(customer.CustomersProvider);
  dart.addTypeCaches(customer.CustomersProvider);
  dart.setLibraryUri(customer.CustomersProvider, I[5]);
  var db$4 = dart.privateName(customer, "CustomersProviderImp.db");
  customer.CustomersProviderImp = class CustomersProviderImp extends core.Object {
    get db() {
      return this[db$4];
    }
    set db(value) {
      super.db = value;
    }
    static ['_#new#tearOff'](db) {
      return new customer.CustomersProviderImp.new(db);
    }
    get table() {
      return this.db.customers;
    }
    createCustomer(customer) {
      return async.async(core.int, (function* createCustomer() {
        try {
          yield this.db.createTableRow(this.table, customer);
          return 1;
        } catch (e$) {
          let e = dart.getThrown(e$);
          let t = dart.stackTrace(e$);
          if (core.Object.is(e)) {
          } else
            throw e$;
        }
        return 0;
      }).bind(this));
    }
    updateCustomer(customer) {
      return async.async(dart.void, (function* updateCustomer() {
        return yield this.db.updateTableRow(this.table, customer);
      }).bind(this));
    }
    deleteCustomer(customer) {
      return this.db.deleteTableRow(this.table, customer);
    }
    deleteAll() {
      return async.async(core.int, (function* deleteAll() {
        return yield this.db.deleteTableAll(this.table);
      }).bind(this));
    }
    getAllCustomer() {
      return async.async(T.ListOfCustomer(), (function* getAllCustomer() {
        let list = T.JSArrayOfCustomer().of([]);
        let data = (yield this.db.select(database.$CustomersTable, database.Customer, this.table).get());
        list[$addAll](data);
        return list;
      }).bind(this));
    }
  };
  (customer.CustomersProviderImp.new = function(db) {
    this[db$4] = db;
    ;
  }).prototype = customer.CustomersProviderImp.prototype;
  dart.addTypeTests(customer.CustomersProviderImp);
  dart.addTypeCaches(customer.CustomersProviderImp);
  customer.CustomersProviderImp[dart.implements] = () => [customer.CustomersProvider];
  dart.setMethodSignature(customer.CustomersProviderImp, () => ({
    __proto__: dart.getMethods(customer.CustomersProviderImp.__proto__),
    createCustomer: dart.fnType(async.Future$(core.int), [database.CustomersCompanion]),
    updateCustomer: dart.fnType(async.Future$(dart.void), [database.Customer]),
    deleteCustomer: dart.fnType(async.Future$(dart.void), [database.Customer]),
    deleteAll: dart.fnType(async.Future$(core.int), []),
    getAllCustomer: dart.fnType(async.Future$(core.List$(database.Customer)), [])
  }));
  dart.setGetterSignature(customer.CustomersProviderImp, () => ({
    __proto__: dart.getGetters(customer.CustomersProviderImp.__proto__),
    table: database.$CustomersTable
  }));
  dart.setLibraryUri(customer.CustomersProviderImp, I[5]);
  dart.setFieldSignature(customer.CustomersProviderImp, () => ({
    __proto__: dart.getFields(customer.CustomersProviderImp.__proto__),
    db: dart.finalFieldType(database.MoorDatabase)
  }));
  animation_background_relation.LuckyAnimationBackgrounds = class LuckyAnimationBackgrounds extends dsl.Table {
    get id() {
      return dsl['BuildGeneralColumn|call'](core.int, dsl['BuildIntColumn|autoIncrement'](core.int, this.integer()));
    }
    get type() {
      return dsl['BuildGeneralColumn|call'](core.String, this.text());
    }
    get backgroundFirst() {
      return dsl['BuildGeneralColumn|call'](core.String, this.text());
    }
    get backgroundSecond() {
      return dsl['BuildGeneralColumn|call'](core.String, this.text());
    }
    static ['_#new#tearOff']() {
      return new animation_background_relation.LuckyAnimationBackgrounds.new();
    }
  };
  (animation_background_relation.LuckyAnimationBackgrounds.new = function() {
    animation_background_relation.LuckyAnimationBackgrounds.__proto__.new.call(this);
    ;
  }).prototype = animation_background_relation.LuckyAnimationBackgrounds.prototype;
  dart.addTypeTests(animation_background_relation.LuckyAnimationBackgrounds);
  dart.addTypeCaches(animation_background_relation.LuckyAnimationBackgrounds);
  dart.setGetterSignature(animation_background_relation.LuckyAnimationBackgrounds, () => ({
    __proto__: dart.getGetters(animation_background_relation.LuckyAnimationBackgrounds.__proto__),
    id: dsl.Column$(dart.nullable(core.int)),
    type: dsl.Column$(dart.nullable(core.String)),
    backgroundFirst: dsl.Column$(dart.nullable(core.String)),
    backgroundSecond: dsl.Column$(dart.nullable(core.String))
  }));
  dart.setLibraryUri(animation_background_relation.LuckyAnimationBackgrounds, I[6]);
  var db$5 = dart.privateName(animation_background_relation, "LuckyBoxBackgroundLocal.db");
  animation_background_relation.LuckyBoxBackgroundLocal = class LuckyBoxBackgroundLocal extends core.Object {
    get db() {
      return this[db$5];
    }
    set db(value) {
      super.db = value;
    }
    static ['_#new#tearOff'](db) {
      return new animation_background_relation.LuckyBoxBackgroundLocal.new(db);
    }
    insertData(opts) {
      let backgroundFirst = opts && 'backgroundFirst' in opts ? opts.backgroundFirst : null;
      let backgroundSecond = opts && 'backgroundSecond' in opts ? opts.backgroundSecond : null;
      let type = opts && 'type' in opts ? opts.type : "mobile";
      return async.async(core.int, (function* insertData() {
        return this.db.into(database.$LuckyAnimationBackgroundsTable, database.LuckyAnimationBackground, this.db.luckyAnimationBackgrounds).insertOnConflictUpdate(new database.LuckyAnimationBackgroundsCompanion.insert({type: type, backgroundFirst: backgroundFirst, backgroundSecond: backgroundSecond}));
      }).bind(this));
    }
    getBackgroundByPlatform(platform) {
      return async.async(T.ListOfLuckyAnimationBackground(), (function* getBackgroundByPlatform() {
        let t5;
        let query = (t5 = this.db.select(database.$LuckyAnimationBackgroundsTable, database.LuckyAnimationBackground, this.db.luckyAnimationBackgrounds), (() => {
          t5.where(dart.fn(tbl => tbl.type.equals(platform), T.$LuckyAnimationBackgroundsTableToExpressionOfbool()));
          return t5;
        })());
        return query.get();
      }).bind(this));
    }
  };
  (animation_background_relation.LuckyBoxBackgroundLocal.new = function(db) {
    this[db$5] = db;
    ;
  }).prototype = animation_background_relation.LuckyBoxBackgroundLocal.prototype;
  dart.addTypeTests(animation_background_relation.LuckyBoxBackgroundLocal);
  dart.addTypeCaches(animation_background_relation.LuckyBoxBackgroundLocal);
  dart.setMethodSignature(animation_background_relation.LuckyBoxBackgroundLocal, () => ({
    __proto__: dart.getMethods(animation_background_relation.LuckyBoxBackgroundLocal.__proto__),
    insertData: dart.fnType(async.Future$(core.int), [], {type: core.String}, {backgroundFirst: core.String, backgroundSecond: core.String}),
    getBackgroundByPlatform: dart.fnType(async.Future$(core.List$(database.LuckyAnimationBackground)), [core.String])
  }));
  dart.setLibraryUri(animation_background_relation.LuckyBoxBackgroundLocal, I[6]);
  dart.setFieldSignature(animation_background_relation.LuckyBoxBackgroundLocal, () => ({
    __proto__: dart.getFields(animation_background_relation.LuckyBoxBackgroundLocal.__proto__),
    db: dart.finalFieldType(database.MoorDatabase)
  }));
  var cs = dart.privateName(database, "MoorDatabase.cs");
  var ___$MoorDatabase_customers = dart.privateName(database, "_#_$MoorDatabase#customers");
  var ___$MoorDatabase_employeeDeliverys = dart.privateName(database, "_#_$MoorDatabase#employeeDeliverys");
  var ___$MoorDatabase_outputSales = dart.privateName(database, "_#_$MoorDatabase#outputSales");
  var ___$MoorDatabase_outputSaleTypes = dart.privateName(database, "_#_$MoorDatabase#outputSaleTypes");
  var ___$MoorDatabase_outputForms = dart.privateName(database, "_#_$MoorDatabase#outputForms");
  var ___$MoorDatabase_outputTypes = dart.privateName(database, "_#_$MoorDatabase#outputTypes");
  var ___$MoorDatabase_luckyAnimationBackgrounds = dart.privateName(database, "_#_$MoorDatabase#luckyAnimationBackgrounds");
  database._$MoorDatabase = class _$36MoorDatabase extends runtime_api.GeneratedDatabase {
    get customers() {
      let t6, t5;
      t5 = this[___$MoorDatabase_customers];
      return t5 == null ? (t6 = new database.$CustomersTable.new(this), this[___$MoorDatabase_customers] == null ? this[___$MoorDatabase_customers] = t6 : dart.throw(new _internal.LateError.fieldADI("customers"))) : t5;
    }
    get employeeDeliverys() {
      let t6, t5;
      t5 = this[___$MoorDatabase_employeeDeliverys];
      return t5 == null ? (t6 = new database.$EmployeeDeliverysTable.new(this), this[___$MoorDatabase_employeeDeliverys] == null ? this[___$MoorDatabase_employeeDeliverys] = t6 : dart.throw(new _internal.LateError.fieldADI("employeeDeliverys"))) : t5;
    }
    get outputSales() {
      let t6, t5;
      t5 = this[___$MoorDatabase_outputSales];
      return t5 == null ? (t6 = new database.$OutputSalesTable.new(this), this[___$MoorDatabase_outputSales] == null ? this[___$MoorDatabase_outputSales] = t6 : dart.throw(new _internal.LateError.fieldADI("outputSales"))) : t5;
    }
    get outputSaleTypes() {
      let t6, t5;
      t5 = this[___$MoorDatabase_outputSaleTypes];
      return t5 == null ? (t6 = new database.$OutputSaleTypesTable.new(this), this[___$MoorDatabase_outputSaleTypes] == null ? this[___$MoorDatabase_outputSaleTypes] = t6 : dart.throw(new _internal.LateError.fieldADI("outputSaleTypes"))) : t5;
    }
    get outputForms() {
      let t6, t5;
      t5 = this[___$MoorDatabase_outputForms];
      return t5 == null ? (t6 = new database.$OutputFormsTable.new(this), this[___$MoorDatabase_outputForms] == null ? this[___$MoorDatabase_outputForms] = t6 : dart.throw(new _internal.LateError.fieldADI("outputForms"))) : t5;
    }
    get outputTypes() {
      let t6, t5;
      t5 = this[___$MoorDatabase_outputTypes];
      return t5 == null ? (t6 = new database.$OutputTypesTable.new(this), this[___$MoorDatabase_outputTypes] == null ? this[___$MoorDatabase_outputTypes] = t6 : dart.throw(new _internal.LateError.fieldADI("outputTypes"))) : t5;
    }
    get luckyAnimationBackgrounds() {
      let t6, t5;
      t5 = this[___$MoorDatabase_luckyAnimationBackgrounds];
      return t5 == null ? (t6 = new database.$LuckyAnimationBackgroundsTable.new(this), this[___$MoorDatabase_luckyAnimationBackgrounds] == null ? this[___$MoorDatabase_luckyAnimationBackgrounds] = t6 : dart.throw(new _internal.LateError.fieldADI("luckyAnimationBackgrounds"))) : t5;
    }
    get allTables() {
      return this.allSchemaEntities[$whereType](T.TableInfoOfTable$dynamic());
    }
    get allSchemaEntities() {
      return T.JSArrayOfDatabaseSchemaEntity().of([this.customers, this.employeeDeliverys, this.outputSales, this.outputSaleTypes, this.outputForms, this.outputTypes, this.luckyAnimationBackgrounds]);
    }
  };
  (database._$MoorDatabase.new = function(e) {
    this[___$MoorDatabase_customers] = null;
    this[___$MoorDatabase_employeeDeliverys] = null;
    this[___$MoorDatabase_outputSales] = null;
    this[___$MoorDatabase_outputSaleTypes] = null;
    this[___$MoorDatabase_outputForms] = null;
    this[___$MoorDatabase_outputTypes] = null;
    this[___$MoorDatabase_luckyAnimationBackgrounds] = null;
    database._$MoorDatabase.__proto__.new.call(this, sql_types.SqlTypeSystem.defaultInstance, e);
    ;
  }).prototype = database._$MoorDatabase.prototype;
  dart.addTypeTests(database._$MoorDatabase);
  dart.addTypeCaches(database._$MoorDatabase);
  dart.setGetterSignature(database._$MoorDatabase, () => ({
    __proto__: dart.getGetters(database._$MoorDatabase.__proto__),
    customers: database.$CustomersTable,
    employeeDeliverys: database.$EmployeeDeliverysTable,
    outputSales: database.$OutputSalesTable,
    outputSaleTypes: database.$OutputSaleTypesTable,
    outputForms: database.$OutputFormsTable,
    outputTypes: database.$OutputTypesTable,
    luckyAnimationBackgrounds: database.$LuckyAnimationBackgroundsTable,
    allTables: core.Iterable$(query_builder.TableInfo$(dsl.Table, dart.dynamic)),
    allSchemaEntities: core.List$(query_builder.DatabaseSchemaEntity)
  }));
  dart.setLibraryUri(database._$MoorDatabase, I[7]);
  dart.setFieldSignature(database._$MoorDatabase, () => ({
    __proto__: dart.getFields(database._$MoorDatabase.__proto__),
    [___$MoorDatabase_customers]: dart.fieldType(dart.nullable(database.$CustomersTable)),
    [___$MoorDatabase_employeeDeliverys]: dart.fieldType(dart.nullable(database.$EmployeeDeliverysTable)),
    [___$MoorDatabase_outputSales]: dart.fieldType(dart.nullable(database.$OutputSalesTable)),
    [___$MoorDatabase_outputSaleTypes]: dart.fieldType(dart.nullable(database.$OutputSaleTypesTable)),
    [___$MoorDatabase_outputForms]: dart.fieldType(dart.nullable(database.$OutputFormsTable)),
    [___$MoorDatabase_outputTypes]: dart.fieldType(dart.nullable(database.$OutputTypesTable)),
    [___$MoorDatabase_luckyAnimationBackgrounds]: dart.fieldType(dart.nullable(database.$LuckyAnimationBackgroundsTable))
  }));
  database.MoorDatabase = class MoorDatabase extends database._$MoorDatabase {
    get cs() {
      return this[cs];
    }
    set cs(value) {
      super.cs = value;
    }
    static ['_#new#tearOff'](e) {
      return new database.MoorDatabase.new(e);
    }
    get schemaVersion() {
      return 1;
    }
    get migration() {
      return new query_builder.MigrationStrategy.new({onCreate: dart.fn(m => m.createAll(), T.MigratorToFutureOfvoid()), onUpgrade: dart.fn((m, from, to) => async.async(dart.void, function*() {
        }), T.MigratorAndintAndintToFutureOfvoid()), beforeOpen: dart.fn(details => async.async(dart.void, function*() {
          if (details.wasCreated) {
          }
        }), T.OpeningDetailsToFutureOfvoid())});
    }
    createTableRow(table, val) {
      return async.async(core.int, (function* createTableRow() {
        yield db_utils['TableUtils|insertRow'](this, this.cs, table, val);
        return 1;
      }).bind(this));
    }
    updateTableRow(table, val) {
      return async.async(dart.void, (function* updateTableRow() {
        return yield db_utils['TableUtils|updateRow'](this, this.cs, table, val);
      }).bind(this));
    }
    deleteTableRow(table, val) {
      return async.async(dart.void, (function* deleteTableRow() {
        return yield db_utils['TableUtils|deleteRow'](this, this.cs, table, val);
      }).bind(this));
    }
    deleteTableAll(table) {
      return async.async(core.int, (function* deleteTableAll() {
        return yield this.delete(dsl.Table, dart.dynamic, T.TableInfoOfTable$dynamic().as(table)).go();
      }).bind(this));
    }
  };
  (database.MoorDatabase.new = function(e) {
    this[cs] = new undo_stack.ChangeStack.new();
    database.MoorDatabase.__proto__.new.call(this, e);
    ;
  }).prototype = database.MoorDatabase.prototype;
  dart.addTypeTests(database.MoorDatabase);
  dart.addTypeCaches(database.MoorDatabase);
  dart.setMethodSignature(database.MoorDatabase, () => ({
    __proto__: dart.getMethods(database.MoorDatabase.__proto__),
    createTableRow: dart.fnType(async.Future$(core.int), [dsl.Table, data_class.Insertable]),
    updateTableRow: dart.fnType(async.Future$(dart.void), [dsl.Table, data_class.Insertable]),
    deleteTableRow: dart.fnType(async.Future$(dart.void), [dsl.Table, data_class.Insertable]),
    deleteTableAll: dart.fnType(async.Future$(core.int), [dsl.Table])
  }));
  dart.setGetterSignature(database.MoorDatabase, () => ({
    __proto__: dart.getGetters(database.MoorDatabase.__proto__),
    schemaVersion: core.int
  }));
  dart.setLibraryUri(database.MoorDatabase, I[7]);
  dart.setFieldSignature(database.MoorDatabase, () => ({
    __proto__: dart.getFields(database.MoorDatabase.__proto__),
    cs: dart.finalFieldType(undo_stack.ChangeStack)
  }));
  var id$ = dart.privateName(database, "Customer.id");
  var name$ = dart.privateName(database, "Customer.name");
  var address$ = dart.privateName(database, "Customer.address");
  var phone$ = dart.privateName(database, "Customer.phone");
  var createDate$ = dart.privateName(database, "Customer.createDate");
  var employeeDeliveryId$ = dart.privateName(database, "Customer.employeeDeliveryId");
  var Value__value = dart.privateName(data_class, "Value._value");
  var Value_present = dart.privateName(data_class, "Value.present");
  database.Customer = class Customer extends data_class.DataClass {
    get id() {
      return this[id$];
    }
    set id(value) {
      super.id = value;
    }
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get address() {
      return this[address$];
    }
    set address(value) {
      super.address = value;
    }
    get phone() {
      return this[phone$];
    }
    set phone(value) {
      super.phone = value;
    }
    get createDate() {
      return this[createDate$];
    }
    set createDate(value) {
      super.createDate = value;
    }
    get employeeDeliveryId() {
      return this[employeeDeliveryId$];
    }
    set employeeDeliveryId(value) {
      super.employeeDeliveryId = value;
    }
    static ['_#new#tearOff'](opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let address = opts && 'address' in opts ? opts.address : null;
      let phone = opts && 'phone' in opts ? opts.phone : null;
      let createDate = opts && 'createDate' in opts ? opts.createDate : null;
      let employeeDeliveryId = opts && 'employeeDeliveryId' in opts ? opts.employeeDeliveryId : null;
      return new database.Customer.new({id: id, name: name, address: address, phone: phone, createDate: createDate, employeeDeliveryId: employeeDeliveryId});
    }
    static fromData(data, db, opts) {
      let t5;
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      let effectivePrefix = (t5 = prefix, t5 == null ? "" : t5);
      return new database.Customer.new({id: dart.nullCheck((C[0] || CT.C0).mapFromDatabaseResponse(data[$_get](effectivePrefix + "id"))), name: dart.nullCheck((C[1] || CT.C1).mapFromDatabaseResponse(data[$_get](effectivePrefix + "name"))), address: dart.nullCheck((C[1] || CT.C1).mapFromDatabaseResponse(data[$_get](effectivePrefix + "address"))), phone: dart.nullCheck((C[1] || CT.C1).mapFromDatabaseResponse(data[$_get](effectivePrefix + "phone"))), createDate: (C[2] || CT.C2).mapFromDatabaseResponse(data[$_get](effectivePrefix + "create_date")), employeeDeliveryId: (C[0] || CT.C0).mapFromDatabaseResponse(data[$_get](effectivePrefix + "employee_delivery_id"))});
    }
    static ['_#fromData#tearOff'](data, db, opts) {
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      return database.Customer.fromData(data, db, {prefix: prefix});
    }
    toColumns(nullToAbsent) {
      let map = new (T.IdentityMapOfString$Expression()).new();
      map[$_set]("id", new (T.VariableOfint()).new(this.id));
      map[$_set]("name", new (T.VariableOfString()).new(this.name));
      map[$_set]("address", new (T.VariableOfString()).new(this.address));
      map[$_set]("phone", new (T.VariableOfString()).new(this.phone));
      if (!nullToAbsent || this.createDate != null) {
        map[$_set]("create_date", new (T.VariableOfDateTimeN()).new(this.createDate));
      }
      if (!nullToAbsent || this.employeeDeliveryId != null) {
        map[$_set]("employee_delivery_id", new (T.VariableOfintN()).new(this.employeeDeliveryId));
      }
      return map;
    }
    toCompanion(nullToAbsent) {
      return new database.CustomersCompanion.new({id: new (T.ValueOfint()).new(this.id), name: new (T.ValueOfString()).new(this.name), address: new (T.ValueOfString()).new(this.address), phone: new (T.ValueOfString()).new(this.phone), createDate: this.createDate == null && nullToAbsent ? C[3] || CT.C3 : new (T.ValueOfDateTimeN()).new(this.createDate), employeeDeliveryId: this.employeeDeliveryId == null && nullToAbsent ? C[4] || CT.C4 : new (T.ValueOfintN()).new(this.employeeDeliveryId)});
    }
    static fromJson(json, opts) {
      let serializer = opts && 'serializer' in opts ? opts.serializer : null;
      serializer == null ? serializer = moor.moorRuntimeOptions.defaultSerializer : null;
      return new database.Customer.new({id: serializer.fromJson(core.int, json[$_get]("id")), name: serializer.fromJson(core.String, json[$_get]("name")), address: serializer.fromJson(core.String, json[$_get]("address")), phone: serializer.fromJson(core.String, json[$_get]("phone")), createDate: serializer.fromJson(T.DateTimeN(), json[$_get]("createDate")), employeeDeliveryId: serializer.fromJson(T.intN(), json[$_get]("employeeDeliveryId"))});
    }
    static ['_#fromJson#tearOff'](json, opts) {
      let serializer = opts && 'serializer' in opts ? opts.serializer : null;
      return database.Customer.fromJson(json, {serializer: serializer});
    }
    toJson(opts) {
      let serializer = opts && 'serializer' in opts ? opts.serializer : null;
      serializer == null ? serializer = moor.moorRuntimeOptions.defaultSerializer : null;
      return new (T.IdentityMapOfString$dynamic()).from(["id", serializer.toJson(core.int, this.id), "name", serializer.toJson(core.String, this.name), "address", serializer.toJson(core.String, this.address), "phone", serializer.toJson(core.String, this.phone), "createDate", serializer.toJson(T.DateTimeN(), this.createDate), "employeeDeliveryId", serializer.toJson(T.intN(), this.employeeDeliveryId)]);
    }
    copyWith(opts) {
      let t5, t5$, t5$0, t5$1, t5$2, t5$3;
      let id = opts && 'id' in opts ? opts.id : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let address = opts && 'address' in opts ? opts.address : null;
      let phone = opts && 'phone' in opts ? opts.phone : null;
      let createDate = opts && 'createDate' in opts ? opts.createDate : null;
      let employeeDeliveryId = opts && 'employeeDeliveryId' in opts ? opts.employeeDeliveryId : null;
      return new database.Customer.new({id: (t5 = id, t5 == null ? this.id : t5), name: (t5$ = name, t5$ == null ? this.name : t5$), address: (t5$0 = address, t5$0 == null ? this.address : t5$0), phone: (t5$1 = phone, t5$1 == null ? this.phone : t5$1), createDate: (t5$2 = createDate, t5$2 == null ? this.createDate : t5$2), employeeDeliveryId: (t5$3 = employeeDeliveryId, t5$3 == null ? this.employeeDeliveryId : t5$3)});
    }
    toString() {
      let t5;
      return (t5 = new core.StringBuffer.new("Customer("), (() => {
        t5.write("id: " + dart.str(this.id) + ", ");
        t5.write("name: " + this.name + ", ");
        t5.write("address: " + this.address + ", ");
        t5.write("phone: " + this.phone + ", ");
        t5.write("createDate: " + dart.str(this.createDate) + ", ");
        t5.write("employeeDeliveryId: " + dart.str(this.employeeDeliveryId));
        t5.write(")");
        return t5;
      })()).toString();
    }
    get hashCode() {
      return core.Object.hash(this.id, this.name, this.address, this.phone, this.createDate, this.employeeDeliveryId);
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || database.Customer.is(other) && other.id === this.id && other.name === this.name && other.address === this.address && other.phone === this.phone && dart.equals(other.createDate, this.createDate) && other.employeeDeliveryId == this.employeeDeliveryId;
    }
  };
  (database.Customer.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let address = opts && 'address' in opts ? opts.address : null;
    let phone = opts && 'phone' in opts ? opts.phone : null;
    let createDate = opts && 'createDate' in opts ? opts.createDate : null;
    let employeeDeliveryId = opts && 'employeeDeliveryId' in opts ? opts.employeeDeliveryId : null;
    this[id$] = id;
    this[name$] = name;
    this[address$] = address;
    this[phone$] = phone;
    this[createDate$] = createDate;
    this[employeeDeliveryId$] = employeeDeliveryId;
    database.Customer.__proto__.new.call(this);
    ;
  }).prototype = database.Customer.prototype;
  dart.addTypeTests(database.Customer);
  dart.addTypeCaches(database.Customer);
  database.Customer[dart.implements] = () => [data_class.Insertable$(database.Customer)];
  dart.setMethodSignature(database.Customer, () => ({
    __proto__: dart.getMethods(database.Customer.__proto__),
    toColumns: dart.fnType(core.Map$(core.String, query_builder.Expression), [core.bool]),
    toCompanion: dart.fnType(database.CustomersCompanion, [core.bool]),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [], {serializer: dart.nullable(data_class.ValueSerializer)}, {}),
    copyWith: dart.fnType(database.Customer, [], {address: dart.nullable(core.String), createDate: dart.nullable(core.DateTime), employeeDeliveryId: dart.nullable(core.int), id: dart.nullable(core.int), name: dart.nullable(core.String), phone: dart.nullable(core.String)}, {})
  }));
  dart.setStaticMethodSignature(database.Customer, () => ['fromData', 'fromJson']);
  dart.setLibraryUri(database.Customer, I[7]);
  dart.setFieldSignature(database.Customer, () => ({
    __proto__: dart.getFields(database.Customer.__proto__),
    id: dart.finalFieldType(core.int),
    name: dart.finalFieldType(core.String),
    address: dart.finalFieldType(core.String),
    phone: dart.finalFieldType(core.String),
    createDate: dart.finalFieldType(dart.nullable(core.DateTime)),
    employeeDeliveryId: dart.finalFieldType(dart.nullable(core.int))
  }));
  dart.defineExtensionMethods(database.Customer, ['toString', '_equals']);
  dart.defineExtensionAccessors(database.Customer, ['hashCode']);
  var id$0 = dart.privateName(database, "CustomersCompanion.id");
  var name$0 = dart.privateName(database, "CustomersCompanion.name");
  var address$0 = dart.privateName(database, "CustomersCompanion.address");
  var phone$0 = dart.privateName(database, "CustomersCompanion.phone");
  var createDate$0 = dart.privateName(database, "CustomersCompanion.createDate");
  var employeeDeliveryId$0 = dart.privateName(database, "CustomersCompanion.employeeDeliveryId");
  database.CustomersCompanion = class CustomersCompanion extends data_class.UpdateCompanion$(database.Customer) {
    get id() {
      return this[id$0];
    }
    set id(value) {
      super.id = value;
    }
    get name() {
      return this[name$0];
    }
    set name(value) {
      super.name = value;
    }
    get address() {
      return this[address$0];
    }
    set address(value) {
      super.address = value;
    }
    get phone() {
      return this[phone$0];
    }
    set phone(value) {
      super.phone = value;
    }
    get createDate() {
      return this[createDate$0];
    }
    set createDate(value) {
      super.createDate = value;
    }
    get employeeDeliveryId() {
      return this[employeeDeliveryId$0];
    }
    set employeeDeliveryId(value) {
      super.employeeDeliveryId = value;
    }
    static ['_#new#tearOff'](opts) {
      let id = opts && 'id' in opts ? opts.id : C[5] || CT.C5;
      let name = opts && 'name' in opts ? opts.name : C[6] || CT.C6;
      let address = opts && 'address' in opts ? opts.address : C[6] || CT.C6;
      let phone = opts && 'phone' in opts ? opts.phone : C[6] || CT.C6;
      let createDate = opts && 'createDate' in opts ? opts.createDate : C[3] || CT.C3;
      let employeeDeliveryId = opts && 'employeeDeliveryId' in opts ? opts.employeeDeliveryId : C[4] || CT.C4;
      return new database.CustomersCompanion.new({id: id, name: name, address: address, phone: phone, createDate: createDate, employeeDeliveryId: employeeDeliveryId});
    }
    static ['_#insert#tearOff'](opts) {
      let id = opts && 'id' in opts ? opts.id : C[5] || CT.C5;
      let name = opts && 'name' in opts ? opts.name : null;
      let address = opts && 'address' in opts ? opts.address : null;
      let phone = opts && 'phone' in opts ? opts.phone : null;
      let createDate = opts && 'createDate' in opts ? opts.createDate : C[3] || CT.C3;
      let employeeDeliveryId = opts && 'employeeDeliveryId' in opts ? opts.employeeDeliveryId : C[4] || CT.C4;
      return new database.CustomersCompanion.insert({id: id, name: name, address: address, phone: phone, createDate: createDate, employeeDeliveryId: employeeDeliveryId});
    }
    static custom(opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let address = opts && 'address' in opts ? opts.address : null;
      let phone = opts && 'phone' in opts ? opts.phone : null;
      let createDate = opts && 'createDate' in opts ? opts.createDate : null;
      let employeeDeliveryId = opts && 'employeeDeliveryId' in opts ? opts.employeeDeliveryId : null;
      return new (T.RawValuesInsertableOfCustomer()).new((() => {
        let t5 = new (T.IdentityMapOfString$Expression()).new();
        if (id != null) t5[$_set]("id", id);
        if (name != null) t5[$_set]("name", name);
        if (address != null) t5[$_set]("address", address);
        if (phone != null) t5[$_set]("phone", phone);
        if (createDate != null) t5[$_set]("create_date", createDate);
        if (employeeDeliveryId != null) t5[$_set]("employee_delivery_id", employeeDeliveryId);
        return t5;
      })());
    }
    copyWith(opts) {
      let t6, t6$, t6$0, t6$1, t6$2, t6$3;
      let id = opts && 'id' in opts ? opts.id : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let address = opts && 'address' in opts ? opts.address : null;
      let phone = opts && 'phone' in opts ? opts.phone : null;
      let createDate = opts && 'createDate' in opts ? opts.createDate : null;
      let employeeDeliveryId = opts && 'employeeDeliveryId' in opts ? opts.employeeDeliveryId : null;
      return new database.CustomersCompanion.new({id: (t6 = id, t6 == null ? this.id : t6), name: (t6$ = name, t6$ == null ? this.name : t6$), address: (t6$0 = address, t6$0 == null ? this.address : t6$0), phone: (t6$1 = phone, t6$1 == null ? this.phone : t6$1), createDate: (t6$2 = createDate, t6$2 == null ? this.createDate : t6$2), employeeDeliveryId: (t6$3 = employeeDeliveryId, t6$3 == null ? this.employeeDeliveryId : t6$3)});
    }
    toColumns(nullToAbsent) {
      let map = new (T.IdentityMapOfString$Expression()).new();
      if (this.id.present) {
        map[$_set]("id", new (T.VariableOfint()).new(this.id.value));
      }
      if (this.name.present) {
        map[$_set]("name", new (T.VariableOfString()).new(this.name.value));
      }
      if (this.address.present) {
        map[$_set]("address", new (T.VariableOfString()).new(this.address.value));
      }
      if (this.phone.present) {
        map[$_set]("phone", new (T.VariableOfString()).new(this.phone.value));
      }
      if (this.createDate.present) {
        map[$_set]("create_date", new (T.VariableOfDateTimeN()).new(this.createDate.value));
      }
      if (this.employeeDeliveryId.present) {
        map[$_set]("employee_delivery_id", new (T.VariableOfintN()).new(this.employeeDeliveryId.value));
      }
      return map;
    }
    toString() {
      let t6;
      return (t6 = new core.StringBuffer.new("CustomersCompanion("), (() => {
        t6.write("id: " + dart.str(this.id) + ", ");
        t6.write("name: " + dart.str(this.name) + ", ");
        t6.write("address: " + dart.str(this.address) + ", ");
        t6.write("phone: " + dart.str(this.phone) + ", ");
        t6.write("createDate: " + dart.str(this.createDate) + ", ");
        t6.write("employeeDeliveryId: " + dart.str(this.employeeDeliveryId));
        t6.write(")");
        return t6;
      })()).toString();
    }
  };
  (database.CustomersCompanion.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : C[5] || CT.C5;
    let name = opts && 'name' in opts ? opts.name : C[6] || CT.C6;
    let address = opts && 'address' in opts ? opts.address : C[6] || CT.C6;
    let phone = opts && 'phone' in opts ? opts.phone : C[6] || CT.C6;
    let createDate = opts && 'createDate' in opts ? opts.createDate : C[3] || CT.C3;
    let employeeDeliveryId = opts && 'employeeDeliveryId' in opts ? opts.employeeDeliveryId : C[4] || CT.C4;
    this[id$0] = id;
    this[name$0] = name;
    this[address$0] = address;
    this[phone$0] = phone;
    this[createDate$0] = createDate;
    this[employeeDeliveryId$0] = employeeDeliveryId;
    database.CustomersCompanion.__proto__.new.call(this);
    ;
  }).prototype = database.CustomersCompanion.prototype;
  (database.CustomersCompanion.insert = function(opts) {
    let id = opts && 'id' in opts ? opts.id : C[5] || CT.C5;
    let name = opts && 'name' in opts ? opts.name : null;
    let address = opts && 'address' in opts ? opts.address : null;
    let phone = opts && 'phone' in opts ? opts.phone : null;
    let createDate = opts && 'createDate' in opts ? opts.createDate : C[3] || CT.C3;
    let employeeDeliveryId = opts && 'employeeDeliveryId' in opts ? opts.employeeDeliveryId : C[4] || CT.C4;
    this[id$0] = id;
    this[createDate$0] = createDate;
    this[employeeDeliveryId$0] = employeeDeliveryId;
    this[name$0] = new (T.ValueOfString()).new(name);
    this[address$0] = new (T.ValueOfString()).new(address);
    this[phone$0] = new (T.ValueOfString()).new(phone);
    database.CustomersCompanion.__proto__.new.call(this);
    ;
  }).prototype = database.CustomersCompanion.prototype;
  dart.addTypeTests(database.CustomersCompanion);
  dart.addTypeCaches(database.CustomersCompanion);
  dart.setMethodSignature(database.CustomersCompanion, () => ({
    __proto__: dart.getMethods(database.CustomersCompanion.__proto__),
    copyWith: dart.fnType(database.CustomersCompanion, [], {address: dart.nullable(data_class.Value$(core.String)), createDate: dart.nullable(data_class.Value$(dart.nullable(core.DateTime))), employeeDeliveryId: dart.nullable(data_class.Value$(dart.nullable(core.int))), id: dart.nullable(data_class.Value$(core.int)), name: dart.nullable(data_class.Value$(core.String)), phone: dart.nullable(data_class.Value$(core.String))}, {}),
    toColumns: dart.fnType(core.Map$(core.String, query_builder.Expression), [core.bool])
  }));
  dart.setStaticMethodSignature(database.CustomersCompanion, () => ['custom']);
  dart.setLibraryUri(database.CustomersCompanion, I[7]);
  dart.setFieldSignature(database.CustomersCompanion, () => ({
    __proto__: dart.getFields(database.CustomersCompanion.__proto__),
    id: dart.finalFieldType(data_class.Value$(core.int)),
    name: dart.finalFieldType(data_class.Value$(core.String)),
    address: dart.finalFieldType(data_class.Value$(core.String)),
    phone: dart.finalFieldType(data_class.Value$(core.String)),
    createDate: dart.finalFieldType(data_class.Value$(dart.nullable(core.DateTime))),
    employeeDeliveryId: dart.finalFieldType(data_class.Value$(dart.nullable(core.int)))
  }));
  dart.defineExtensionMethods(database.CustomersCompanion, ['toString']);
  var attachedDatabase$ = dart.privateName(database, "$CustomersTable.attachedDatabase");
  var _idMeta = dart.privateName(database, "_idMeta");
  var VerificationMeta_dartGetterName = dart.privateName(data_verification, "VerificationMeta.dartGetterName");
  var __$CustomersTable_id = dart.privateName(database, "_#$CustomersTable#id");
  var _nameMeta = dart.privateName(database, "_nameMeta");
  var __$CustomersTable_name = dart.privateName(database, "_#$CustomersTable#name");
  var _addressMeta = dart.privateName(database, "_addressMeta");
  var __$CustomersTable_address = dart.privateName(database, "_#$CustomersTable#address");
  var _phoneMeta = dart.privateName(database, "_phoneMeta");
  var __$CustomersTable_phone = dart.privateName(database, "_#$CustomersTable#phone");
  var _createDateMeta = dart.privateName(database, "_createDateMeta");
  var __$CustomersTable_createDate = dart.privateName(database, "_#$CustomersTable#createDate");
  var _employeeDeliveryIdMeta = dart.privateName(database, "_employeeDeliveryIdMeta");
  var __$CustomersTable_employeeDeliveryId = dart.privateName(database, "_#$CustomersTable#employeeDeliveryId");
  var _alias$ = dart.privateName(database, "_alias");
  const Customers_TableInfo$36 = class Customers_TableInfo extends customer.Customers {};
  (Customers_TableInfo$36.new = function() {
    query_builder.TableInfo$(database.$CustomersTable, database.Customer)[dart.mixinNew].call(this);
    Customers_TableInfo$36.__proto__.new.call(this);
  }).prototype = Customers_TableInfo$36.prototype;
  database.$CustomersTable = class $36CustomersTable extends Customers_TableInfo$36 {
    get attachedDatabase() {
      return this[attachedDatabase$];
    }
    set attachedDatabase(value) {
      super.attachedDatabase = value;
    }
    static ['_#new#tearOff'](attachedDatabase, _alias = null) {
      return new database.$CustomersTable.new(attachedDatabase, _alias);
    }
    get id() {
      let t7, t6;
      t6 = this[__$CustomersTable_id];
      return t6 == null ? (t7 = new (T.GeneratedColumnOfintN()).new("id", this.aliasedName, false, {type: C[0] || CT.C0, requiredDuringInsert: false, defaultConstraints: "PRIMARY KEY AUTOINCREMENT"}), this[__$CustomersTable_id] == null ? this[__$CustomersTable_id] = t7 : dart.throw(new _internal.LateError.fieldADI("id"))) : t6;
    }
    get name() {
      let t7, t6;
      t6 = this[__$CustomersTable_name];
      return t6 == null ? (t7 = new (T.GeneratedColumnOfStringN()).new("name", this.aliasedName, false, {type: C[1] || CT.C1, requiredDuringInsert: true}), this[__$CustomersTable_name] == null ? this[__$CustomersTable_name] = t7 : dart.throw(new _internal.LateError.fieldADI("name"))) : t6;
    }
    get address() {
      let t7, t6;
      t6 = this[__$CustomersTable_address];
      return t6 == null ? (t7 = new (T.GeneratedColumnOfStringN()).new("address", this.aliasedName, false, {type: C[1] || CT.C1, requiredDuringInsert: true}), this[__$CustomersTable_address] == null ? this[__$CustomersTable_address] = t7 : dart.throw(new _internal.LateError.fieldADI("address"))) : t6;
    }
    get phone() {
      let t7, t6;
      t6 = this[__$CustomersTable_phone];
      return t6 == null ? (t7 = new (T.GeneratedColumnOfStringN()).new("phone", this.aliasedName, false, {type: C[1] || CT.C1, requiredDuringInsert: true}), this[__$CustomersTable_phone] == null ? this[__$CustomersTable_phone] = t7 : dart.throw(new _internal.LateError.fieldADI("phone"))) : t6;
    }
    get createDate() {
      let t7, t6;
      t6 = this[__$CustomersTable_createDate];
      return t6 == null ? (t7 = new (T.GeneratedColumnOfDateTimeN()).new("create_date", this.aliasedName, true, {type: C[0] || CT.C0, requiredDuringInsert: false}), this[__$CustomersTable_createDate] == null ? this[__$CustomersTable_createDate] = t7 : dart.throw(new _internal.LateError.fieldADI("createDate"))) : t6;
    }
    get employeeDeliveryId() {
      let t7, t6;
      t6 = this[__$CustomersTable_employeeDeliveryId];
      return t6 == null ? (t7 = new (T.GeneratedColumnOfintN()).new("employee_delivery_id", this.aliasedName, true, {type: C[0] || CT.C0, requiredDuringInsert: false, $customConstraints: "NULLABLE REFERENCES employeeDelivery(id)"}), this[__$CustomersTable_employeeDeliveryId] == null ? this[__$CustomersTable_employeeDeliveryId] = t7 : dart.throw(new _internal.LateError.fieldADI("employeeDeliveryId"))) : t6;
    }
    get $columns() {
      return T.JSArrayOfGeneratedColumn().of([this.id, this.name, this.address, this.phone, this.createDate, this.employeeDeliveryId]);
    }
    get aliasedName() {
      let t6;
      t6 = this[_alias$];
      return t6 == null ? "customers" : t6;
    }
    get actualTableName() {
      return "customers";
    }
    validateIntegrity(instance, opts) {
      T.InsertableOfCustomer().as(instance);
      let isInserting = opts && 'isInserting' in opts ? opts.isInserting : false;
      let context = new data_verification.VerificationContext.new();
      let data = instance.toColumns(true);
      if (data[$containsKey]("id")) {
        context.handle(this[_idMeta], this.id.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("id")), this[_idMeta]));
      }
      if (data[$containsKey]("name")) {
        context.handle(this[_nameMeta], this.name.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("name")), this[_nameMeta]));
      } else if (isInserting) {
        context.missing(this[_nameMeta]);
      }
      if (data[$containsKey]("address")) {
        context.handle(this[_addressMeta], this.address.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("address")), this[_addressMeta]));
      } else if (isInserting) {
        context.missing(this[_addressMeta]);
      }
      if (data[$containsKey]("phone")) {
        context.handle(this[_phoneMeta], this.phone.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("phone")), this[_phoneMeta]));
      } else if (isInserting) {
        context.missing(this[_phoneMeta]);
      }
      if (data[$containsKey]("create_date")) {
        context.handle(this[_createDateMeta], this.createDate.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("create_date")), this[_createDateMeta]));
      }
      if (data[$containsKey]("employee_delivery_id")) {
        context.handle(this[_employeeDeliveryIdMeta], this.employeeDeliveryId.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("employee_delivery_id")), this[_employeeDeliveryIdMeta]));
      }
      return context;
    }
    get $primaryKey() {
      return T.LinkedHashSetOfGeneratedColumn().from([this.id]);
    }
    map(data, opts) {
      let tablePrefix = opts && 'tablePrefix' in opts ? opts.tablePrefix : null;
      return database.Customer.fromData(data, this.attachedDatabase, {prefix: tablePrefix != null ? dart.str(tablePrefix) + "." : null});
    }
    createAlias(alias) {
      return new database.$CustomersTable.new(this.attachedDatabase, alias);
    }
  };
  (database.$CustomersTable.new = function(attachedDatabase, _alias = null) {
    this[_idMeta] = C[7] || CT.C7;
    this[__$CustomersTable_id] = null;
    this[_nameMeta] = C[8] || CT.C8;
    this[__$CustomersTable_name] = null;
    this[_addressMeta] = C[9] || CT.C9;
    this[__$CustomersTable_address] = null;
    this[_phoneMeta] = C[10] || CT.C10;
    this[__$CustomersTable_phone] = null;
    this[_createDateMeta] = C[11] || CT.C11;
    this[__$CustomersTable_createDate] = null;
    this[_employeeDeliveryIdMeta] = C[12] || CT.C12;
    this[__$CustomersTable_employeeDeliveryId] = null;
    this[attachedDatabase$] = attachedDatabase;
    this[_alias$] = _alias;
    database.$CustomersTable.__proto__.new.call(this);
    ;
  }).prototype = database.$CustomersTable.prototype;
  dart.addTypeTests(database.$CustomersTable);
  dart.addTypeCaches(database.$CustomersTable);
  dart.setMethodSignature(database.$CustomersTable, () => ({
    __proto__: dart.getMethods(database.$CustomersTable.__proto__),
    map: dart.fnType(database.Customer, [core.Map$(core.String, dart.dynamic)], {tablePrefix: dart.nullable(core.String)}, {}),
    createAlias: dart.fnType(database.$CustomersTable, [core.String])
  }));
  dart.setGetterSignature(database.$CustomersTable, () => ({
    __proto__: dart.getGetters(database.$CustomersTable.__proto__),
    id: query_builder.GeneratedColumn$(dart.nullable(core.int)),
    name: query_builder.GeneratedColumn$(dart.nullable(core.String)),
    address: query_builder.GeneratedColumn$(dart.nullable(core.String)),
    phone: query_builder.GeneratedColumn$(dart.nullable(core.String)),
    createDate: query_builder.GeneratedColumn$(dart.nullable(core.DateTime)),
    employeeDeliveryId: query_builder.GeneratedColumn$(dart.nullable(core.int)),
    $columns: core.List$(query_builder.GeneratedColumn),
    actualTableName: core.String
  }));
  dart.setLibraryUri(database.$CustomersTable, I[7]);
  dart.setFieldSignature(database.$CustomersTable, () => ({
    __proto__: dart.getFields(database.$CustomersTable.__proto__),
    attachedDatabase: dart.finalFieldType(runtime_api.GeneratedDatabase),
    [_alias$]: dart.finalFieldType(dart.nullable(core.String)),
    [_idMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$CustomersTable_id]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.int)))),
    [_nameMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$CustomersTable_name]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.String)))),
    [_addressMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$CustomersTable_address]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.String)))),
    [_phoneMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$CustomersTable_phone]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.String)))),
    [_createDateMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$CustomersTable_createDate]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.DateTime)))),
    [_employeeDeliveryIdMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$CustomersTable_employeeDeliveryId]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.int))))
  }));
  var id$1 = dart.privateName(database, "EmployeeDelivery.id");
  var name$1 = dart.privateName(database, "EmployeeDelivery.name");
  var createDate$1 = dart.privateName(database, "EmployeeDelivery.createDate");
  database.EmployeeDelivery = class EmployeeDelivery extends data_class.DataClass {
    get id() {
      return this[id$1];
    }
    set id(value) {
      super.id = value;
    }
    get name() {
      return this[name$1];
    }
    set name(value) {
      super.name = value;
    }
    get createDate() {
      return this[createDate$1];
    }
    set createDate(value) {
      super.createDate = value;
    }
    static ['_#new#tearOff'](opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let createDate = opts && 'createDate' in opts ? opts.createDate : null;
      return new database.EmployeeDelivery.new({id: id, name: name, createDate: createDate});
    }
    static fromData(data, db, opts) {
      let t6;
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      let effectivePrefix = (t6 = prefix, t6 == null ? "" : t6);
      return new database.EmployeeDelivery.new({id: dart.nullCheck((C[0] || CT.C0).mapFromDatabaseResponse(data[$_get](effectivePrefix + "id"))), name: dart.nullCheck((C[1] || CT.C1).mapFromDatabaseResponse(data[$_get](effectivePrefix + "name"))), createDate: (C[2] || CT.C2).mapFromDatabaseResponse(data[$_get](effectivePrefix + "create_date"))});
    }
    static ['_#fromData#tearOff'](data, db, opts) {
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      return database.EmployeeDelivery.fromData(data, db, {prefix: prefix});
    }
    toColumns(nullToAbsent) {
      let map = new (T.IdentityMapOfString$Expression()).new();
      map[$_set]("id", new (T.VariableOfint()).new(this.id));
      map[$_set]("name", new (T.VariableOfString()).new(this.name));
      if (!nullToAbsent || this.createDate != null) {
        map[$_set]("create_date", new (T.VariableOfDateTimeN()).new(this.createDate));
      }
      return map;
    }
    toCompanion(nullToAbsent) {
      return new database.EmployeeDeliverysCompanion.new({id: new (T.ValueOfint()).new(this.id), name: new (T.ValueOfString()).new(this.name), createDate: this.createDate == null && nullToAbsent ? C[3] || CT.C3 : new (T.ValueOfDateTimeN()).new(this.createDate)});
    }
    static fromJson(json, opts) {
      let serializer = opts && 'serializer' in opts ? opts.serializer : null;
      serializer == null ? serializer = moor.moorRuntimeOptions.defaultSerializer : null;
      return new database.EmployeeDelivery.new({id: serializer.fromJson(core.int, json[$_get]("id")), name: serializer.fromJson(core.String, json[$_get]("name")), createDate: serializer.fromJson(T.DateTimeN(), json[$_get]("createDate"))});
    }
    static ['_#fromJson#tearOff'](json, opts) {
      let serializer = opts && 'serializer' in opts ? opts.serializer : null;
      return database.EmployeeDelivery.fromJson(json, {serializer: serializer});
    }
    toJson(opts) {
      let serializer = opts && 'serializer' in opts ? opts.serializer : null;
      serializer == null ? serializer = moor.moorRuntimeOptions.defaultSerializer : null;
      return new (T.IdentityMapOfString$dynamic()).from(["id", serializer.toJson(core.int, this.id), "name", serializer.toJson(core.String, this.name), "createDate", serializer.toJson(T.DateTimeN(), this.createDate)]);
    }
    copyWith(opts) {
      let t6, t6$, t6$0;
      let id = opts && 'id' in opts ? opts.id : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let createDate = opts && 'createDate' in opts ? opts.createDate : null;
      return new database.EmployeeDelivery.new({id: (t6 = id, t6 == null ? this.id : t6), name: (t6$ = name, t6$ == null ? this.name : t6$), createDate: (t6$0 = createDate, t6$0 == null ? this.createDate : t6$0)});
    }
    toString() {
      let t6;
      return (t6 = new core.StringBuffer.new("EmployeeDelivery("), (() => {
        t6.write("id: " + dart.str(this.id) + ", ");
        t6.write("name: " + this.name + ", ");
        t6.write("createDate: " + dart.str(this.createDate));
        t6.write(")");
        return t6;
      })()).toString();
    }
    get hashCode() {
      return core.Object.hash(this.id, this.name, this.createDate);
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || database.EmployeeDelivery.is(other) && other.id === this.id && other.name === this.name && dart.equals(other.createDate, this.createDate);
    }
  };
  (database.EmployeeDelivery.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let createDate = opts && 'createDate' in opts ? opts.createDate : null;
    this[id$1] = id;
    this[name$1] = name;
    this[createDate$1] = createDate;
    database.EmployeeDelivery.__proto__.new.call(this);
    ;
  }).prototype = database.EmployeeDelivery.prototype;
  dart.addTypeTests(database.EmployeeDelivery);
  dart.addTypeCaches(database.EmployeeDelivery);
  database.EmployeeDelivery[dart.implements] = () => [data_class.Insertable$(database.EmployeeDelivery)];
  dart.setMethodSignature(database.EmployeeDelivery, () => ({
    __proto__: dart.getMethods(database.EmployeeDelivery.__proto__),
    toColumns: dart.fnType(core.Map$(core.String, query_builder.Expression), [core.bool]),
    toCompanion: dart.fnType(database.EmployeeDeliverysCompanion, [core.bool]),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [], {serializer: dart.nullable(data_class.ValueSerializer)}, {}),
    copyWith: dart.fnType(database.EmployeeDelivery, [], {createDate: dart.nullable(core.DateTime), id: dart.nullable(core.int), name: dart.nullable(core.String)}, {})
  }));
  dart.setStaticMethodSignature(database.EmployeeDelivery, () => ['fromData', 'fromJson']);
  dart.setLibraryUri(database.EmployeeDelivery, I[7]);
  dart.setFieldSignature(database.EmployeeDelivery, () => ({
    __proto__: dart.getFields(database.EmployeeDelivery.__proto__),
    id: dart.finalFieldType(core.int),
    name: dart.finalFieldType(core.String),
    createDate: dart.finalFieldType(dart.nullable(core.DateTime))
  }));
  dart.defineExtensionMethods(database.EmployeeDelivery, ['toString', '_equals']);
  dart.defineExtensionAccessors(database.EmployeeDelivery, ['hashCode']);
  var id$2 = dart.privateName(database, "EmployeeDeliverysCompanion.id");
  var name$2 = dart.privateName(database, "EmployeeDeliverysCompanion.name");
  var createDate$2 = dart.privateName(database, "EmployeeDeliverysCompanion.createDate");
  database.EmployeeDeliverysCompanion = class EmployeeDeliverysCompanion extends data_class.UpdateCompanion$(database.EmployeeDelivery) {
    get id() {
      return this[id$2];
    }
    set id(value) {
      super.id = value;
    }
    get name() {
      return this[name$2];
    }
    set name(value) {
      super.name = value;
    }
    get createDate() {
      return this[createDate$2];
    }
    set createDate(value) {
      super.createDate = value;
    }
    static ['_#new#tearOff'](opts) {
      let id = opts && 'id' in opts ? opts.id : C[5] || CT.C5;
      let name = opts && 'name' in opts ? opts.name : C[6] || CT.C6;
      let createDate = opts && 'createDate' in opts ? opts.createDate : C[3] || CT.C3;
      return new database.EmployeeDeliverysCompanion.new({id: id, name: name, createDate: createDate});
    }
    static ['_#insert#tearOff'](opts) {
      let id = opts && 'id' in opts ? opts.id : C[5] || CT.C5;
      let name = opts && 'name' in opts ? opts.name : null;
      let createDate = opts && 'createDate' in opts ? opts.createDate : C[3] || CT.C3;
      return new database.EmployeeDeliverysCompanion.insert({id: id, name: name, createDate: createDate});
    }
    static custom(opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let createDate = opts && 'createDate' in opts ? opts.createDate : null;
      return new (T.RawValuesInsertableOfEmployeeDelivery()).new((() => {
        let t6 = new (T.IdentityMapOfString$Expression()).new();
        if (id != null) t6[$_set]("id", id);
        if (name != null) t6[$_set]("name", name);
        if (createDate != null) t6[$_set]("create_date", createDate);
        return t6;
      })());
    }
    copyWith(opts) {
      let t7, t7$, t7$0;
      let id = opts && 'id' in opts ? opts.id : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let createDate = opts && 'createDate' in opts ? opts.createDate : null;
      return new database.EmployeeDeliverysCompanion.new({id: (t7 = id, t7 == null ? this.id : t7), name: (t7$ = name, t7$ == null ? this.name : t7$), createDate: (t7$0 = createDate, t7$0 == null ? this.createDate : t7$0)});
    }
    toColumns(nullToAbsent) {
      let map = new (T.IdentityMapOfString$Expression()).new();
      if (this.id.present) {
        map[$_set]("id", new (T.VariableOfint()).new(this.id.value));
      }
      if (this.name.present) {
        map[$_set]("name", new (T.VariableOfString()).new(this.name.value));
      }
      if (this.createDate.present) {
        map[$_set]("create_date", new (T.VariableOfDateTimeN()).new(this.createDate.value));
      }
      return map;
    }
    toString() {
      let t7;
      return (t7 = new core.StringBuffer.new("EmployeeDeliverysCompanion("), (() => {
        t7.write("id: " + dart.str(this.id) + ", ");
        t7.write("name: " + dart.str(this.name) + ", ");
        t7.write("createDate: " + dart.str(this.createDate));
        t7.write(")");
        return t7;
      })()).toString();
    }
  };
  (database.EmployeeDeliverysCompanion.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : C[5] || CT.C5;
    let name = opts && 'name' in opts ? opts.name : C[6] || CT.C6;
    let createDate = opts && 'createDate' in opts ? opts.createDate : C[3] || CT.C3;
    this[id$2] = id;
    this[name$2] = name;
    this[createDate$2] = createDate;
    database.EmployeeDeliverysCompanion.__proto__.new.call(this);
    ;
  }).prototype = database.EmployeeDeliverysCompanion.prototype;
  (database.EmployeeDeliverysCompanion.insert = function(opts) {
    let id = opts && 'id' in opts ? opts.id : C[5] || CT.C5;
    let name = opts && 'name' in opts ? opts.name : null;
    let createDate = opts && 'createDate' in opts ? opts.createDate : C[3] || CT.C3;
    this[id$2] = id;
    this[createDate$2] = createDate;
    this[name$2] = new (T.ValueOfString()).new(name);
    database.EmployeeDeliverysCompanion.__proto__.new.call(this);
    ;
  }).prototype = database.EmployeeDeliverysCompanion.prototype;
  dart.addTypeTests(database.EmployeeDeliverysCompanion);
  dart.addTypeCaches(database.EmployeeDeliverysCompanion);
  dart.setMethodSignature(database.EmployeeDeliverysCompanion, () => ({
    __proto__: dart.getMethods(database.EmployeeDeliverysCompanion.__proto__),
    copyWith: dart.fnType(database.EmployeeDeliverysCompanion, [], {createDate: dart.nullable(data_class.Value$(dart.nullable(core.DateTime))), id: dart.nullable(data_class.Value$(core.int)), name: dart.nullable(data_class.Value$(core.String))}, {}),
    toColumns: dart.fnType(core.Map$(core.String, query_builder.Expression), [core.bool])
  }));
  dart.setStaticMethodSignature(database.EmployeeDeliverysCompanion, () => ['custom']);
  dart.setLibraryUri(database.EmployeeDeliverysCompanion, I[7]);
  dart.setFieldSignature(database.EmployeeDeliverysCompanion, () => ({
    __proto__: dart.getFields(database.EmployeeDeliverysCompanion.__proto__),
    id: dart.finalFieldType(data_class.Value$(core.int)),
    name: dart.finalFieldType(data_class.Value$(core.String)),
    createDate: dart.finalFieldType(data_class.Value$(dart.nullable(core.DateTime)))
  }));
  dart.defineExtensionMethods(database.EmployeeDeliverysCompanion, ['toString']);
  var attachedDatabase$0 = dart.privateName(database, "$EmployeeDeliverysTable.attachedDatabase");
  var __$EmployeeDeliverysTable_id = dart.privateName(database, "_#$EmployeeDeliverysTable#id");
  var __$EmployeeDeliverysTable_name = dart.privateName(database, "_#$EmployeeDeliverysTable#name");
  var __$EmployeeDeliverysTable_createDate = dart.privateName(database, "_#$EmployeeDeliverysTable#createDate");
  const EmployeeDeliverys_TableInfo$36 = class EmployeeDeliverys_TableInfo extends employee_delivery.EmployeeDeliverys {};
  (EmployeeDeliverys_TableInfo$36.new = function() {
    query_builder.TableInfo$(database.$EmployeeDeliverysTable, database.EmployeeDelivery)[dart.mixinNew].call(this);
    EmployeeDeliverys_TableInfo$36.__proto__.new.call(this);
  }).prototype = EmployeeDeliverys_TableInfo$36.prototype;
  database.$EmployeeDeliverysTable = class $36EmployeeDeliverysTable extends EmployeeDeliverys_TableInfo$36 {
    get attachedDatabase() {
      return this[attachedDatabase$0];
    }
    set attachedDatabase(value) {
      super.attachedDatabase = value;
    }
    static ['_#new#tearOff'](attachedDatabase, _alias = null) {
      return new database.$EmployeeDeliverysTable.new(attachedDatabase, _alias);
    }
    get id() {
      let t8, t7;
      t7 = this[__$EmployeeDeliverysTable_id];
      return t7 == null ? (t8 = new (T.GeneratedColumnOfintN()).new("id", this.aliasedName, false, {type: C[0] || CT.C0, requiredDuringInsert: false, defaultConstraints: "PRIMARY KEY AUTOINCREMENT"}), this[__$EmployeeDeliverysTable_id] == null ? this[__$EmployeeDeliverysTable_id] = t8 : dart.throw(new _internal.LateError.fieldADI("id"))) : t7;
    }
    get name() {
      let t8, t7;
      t7 = this[__$EmployeeDeliverysTable_name];
      return t7 == null ? (t8 = new (T.GeneratedColumnOfStringN()).new("name", this.aliasedName, false, {type: C[1] || CT.C1, requiredDuringInsert: true}), this[__$EmployeeDeliverysTable_name] == null ? this[__$EmployeeDeliverysTable_name] = t8 : dart.throw(new _internal.LateError.fieldADI("name"))) : t7;
    }
    get createDate() {
      let t8, t7;
      t7 = this[__$EmployeeDeliverysTable_createDate];
      return t7 == null ? (t8 = new (T.GeneratedColumnOfDateTimeN()).new("create_date", this.aliasedName, true, {type: C[0] || CT.C0, requiredDuringInsert: false}), this[__$EmployeeDeliverysTable_createDate] == null ? this[__$EmployeeDeliverysTable_createDate] = t8 : dart.throw(new _internal.LateError.fieldADI("createDate"))) : t7;
    }
    get $columns() {
      return T.JSArrayOfGeneratedColumn().of([this.id, this.name, this.createDate]);
    }
    get aliasedName() {
      let t7;
      t7 = this[_alias$];
      return t7 == null ? "employee_deliverys" : t7;
    }
    get actualTableName() {
      return "employee_deliverys";
    }
    validateIntegrity(instance, opts) {
      T.InsertableOfEmployeeDelivery().as(instance);
      let isInserting = opts && 'isInserting' in opts ? opts.isInserting : false;
      let context = new data_verification.VerificationContext.new();
      let data = instance.toColumns(true);
      if (data[$containsKey]("id")) {
        context.handle(this[_idMeta], this.id.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("id")), this[_idMeta]));
      }
      if (data[$containsKey]("name")) {
        context.handle(this[_nameMeta], this.name.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("name")), this[_nameMeta]));
      } else if (isInserting) {
        context.missing(this[_nameMeta]);
      }
      if (data[$containsKey]("create_date")) {
        context.handle(this[_createDateMeta], this.createDate.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("create_date")), this[_createDateMeta]));
      }
      return context;
    }
    get $primaryKey() {
      return T.LinkedHashSetOfGeneratedColumn().from([this.id]);
    }
    map(data, opts) {
      let tablePrefix = opts && 'tablePrefix' in opts ? opts.tablePrefix : null;
      return database.EmployeeDelivery.fromData(data, this.attachedDatabase, {prefix: tablePrefix != null ? dart.str(tablePrefix) + "." : null});
    }
    createAlias(alias) {
      return new database.$EmployeeDeliverysTable.new(this.attachedDatabase, alias);
    }
  };
  (database.$EmployeeDeliverysTable.new = function(attachedDatabase, _alias = null) {
    this[_idMeta] = C[7] || CT.C7;
    this[__$EmployeeDeliverysTable_id] = null;
    this[_nameMeta] = C[8] || CT.C8;
    this[__$EmployeeDeliverysTable_name] = null;
    this[_createDateMeta] = C[11] || CT.C11;
    this[__$EmployeeDeliverysTable_createDate] = null;
    this[attachedDatabase$0] = attachedDatabase;
    this[_alias$] = _alias;
    database.$EmployeeDeliverysTable.__proto__.new.call(this);
    ;
  }).prototype = database.$EmployeeDeliverysTable.prototype;
  dart.addTypeTests(database.$EmployeeDeliverysTable);
  dart.addTypeCaches(database.$EmployeeDeliverysTable);
  dart.setMethodSignature(database.$EmployeeDeliverysTable, () => ({
    __proto__: dart.getMethods(database.$EmployeeDeliverysTable.__proto__),
    map: dart.fnType(database.EmployeeDelivery, [core.Map$(core.String, dart.dynamic)], {tablePrefix: dart.nullable(core.String)}, {}),
    createAlias: dart.fnType(database.$EmployeeDeliverysTable, [core.String])
  }));
  dart.setGetterSignature(database.$EmployeeDeliverysTable, () => ({
    __proto__: dart.getGetters(database.$EmployeeDeliverysTable.__proto__),
    id: query_builder.GeneratedColumn$(dart.nullable(core.int)),
    name: query_builder.GeneratedColumn$(dart.nullable(core.String)),
    createDate: query_builder.GeneratedColumn$(dart.nullable(core.DateTime)),
    $columns: core.List$(query_builder.GeneratedColumn),
    actualTableName: core.String
  }));
  dart.setLibraryUri(database.$EmployeeDeliverysTable, I[7]);
  dart.setFieldSignature(database.$EmployeeDeliverysTable, () => ({
    __proto__: dart.getFields(database.$EmployeeDeliverysTable.__proto__),
    attachedDatabase: dart.finalFieldType(runtime_api.GeneratedDatabase),
    [_alias$]: dart.finalFieldType(dart.nullable(core.String)),
    [_idMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$EmployeeDeliverysTable_id]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.int)))),
    [_nameMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$EmployeeDeliverysTable_name]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.String)))),
    [_createDateMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$EmployeeDeliverysTable_createDate]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.DateTime))))
  }));
  var OSID$ = dart.privateName(database, "OutputSale.OSID");
  var OutputSaleID$ = dart.privateName(database, "OutputSale.OutputSaleID");
  var OutputStoreID$ = dart.privateName(database, "OutputSale.OutputStoreID");
  var OutputTypeID$ = dart.privateName(database, "OutputSale.OutputTypeID");
  var CustomerID$ = dart.privateName(database, "OutputSale.CustomerID");
  var CustomerName$ = dart.privateName(database, "OutputSale.CustomerName");
  var CustomerPhone$ = dart.privateName(database, "OutputSale.CustomerPhone");
  var IsRequiredVAT$ = dart.privateName(database, "OutputSale.IsRequiredVAT");
  var TotalAmount$ = dart.privateName(database, "OutputSale.TotalAmount");
  var Description$ = dart.privateName(database, "OutputSale.Description");
  var CreatedDate$ = dart.privateName(database, "OutputSale.CreatedDate");
  database.OutputSale = class OutputSale extends data_class.DataClass {
    get OSID() {
      return this[OSID$];
    }
    set OSID(value) {
      super.OSID = value;
    }
    get OutputSaleID() {
      return this[OutputSaleID$];
    }
    set OutputSaleID(value) {
      super.OutputSaleID = value;
    }
    get OutputStoreID() {
      return this[OutputStoreID$];
    }
    set OutputStoreID(value) {
      super.OutputStoreID = value;
    }
    get OutputTypeID() {
      return this[OutputTypeID$];
    }
    set OutputTypeID(value) {
      super.OutputTypeID = value;
    }
    get CustomerID() {
      return this[CustomerID$];
    }
    set CustomerID(value) {
      super.CustomerID = value;
    }
    get CustomerName() {
      return this[CustomerName$];
    }
    set CustomerName(value) {
      super.CustomerName = value;
    }
    get CustomerPhone() {
      return this[CustomerPhone$];
    }
    set CustomerPhone(value) {
      super.CustomerPhone = value;
    }
    get IsRequiredVAT() {
      return this[IsRequiredVAT$];
    }
    set IsRequiredVAT(value) {
      super.IsRequiredVAT = value;
    }
    get TotalAmount() {
      return this[TotalAmount$];
    }
    set TotalAmount(value) {
      super.TotalAmount = value;
    }
    get Description() {
      return this[Description$];
    }
    set Description(value) {
      super.Description = value;
    }
    get CreatedDate() {
      return this[CreatedDate$];
    }
    set CreatedDate(value) {
      super.CreatedDate = value;
    }
    static ['_#new#tearOff'](opts) {
      let OSID = opts && 'OSID' in opts ? opts.OSID : null;
      let OutputSaleID = opts && 'OutputSaleID' in opts ? opts.OutputSaleID : null;
      let OutputStoreID = opts && 'OutputStoreID' in opts ? opts.OutputStoreID : null;
      let OutputTypeID = opts && 'OutputTypeID' in opts ? opts.OutputTypeID : null;
      let CustomerID = opts && 'CustomerID' in opts ? opts.CustomerID : null;
      let CustomerName = opts && 'CustomerName' in opts ? opts.CustomerName : null;
      let CustomerPhone = opts && 'CustomerPhone' in opts ? opts.CustomerPhone : null;
      let IsRequiredVAT = opts && 'IsRequiredVAT' in opts ? opts.IsRequiredVAT : null;
      let TotalAmount = opts && 'TotalAmount' in opts ? opts.TotalAmount : null;
      let Description = opts && 'Description' in opts ? opts.Description : null;
      let CreatedDate = opts && 'CreatedDate' in opts ? opts.CreatedDate : null;
      return new database.OutputSale.new({OSID: OSID, OutputSaleID: OutputSaleID, OutputStoreID: OutputStoreID, OutputTypeID: OutputTypeID, CustomerID: CustomerID, CustomerName: CustomerName, CustomerPhone: CustomerPhone, IsRequiredVAT: IsRequiredVAT, TotalAmount: TotalAmount, Description: Description, CreatedDate: CreatedDate});
    }
    static fromData(data, db, opts) {
      let t7;
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      let effectivePrefix = (t7 = prefix, t7 == null ? "" : t7);
      return new database.OutputSale.new({OSID: dart.nullCheck((C[0] || CT.C0).mapFromDatabaseResponse(data[$_get](effectivePrefix + "osid"))), OutputSaleID: dart.nullCheck((C[1] || CT.C1).mapFromDatabaseResponse(data[$_get](effectivePrefix + "output_sale_i_d"))), OutputStoreID: dart.nullCheck((C[0] || CT.C0).mapFromDatabaseResponse(data[$_get](effectivePrefix + "output_store_i_d"))), OutputTypeID: dart.nullCheck((C[0] || CT.C0).mapFromDatabaseResponse(data[$_get](effectivePrefix + "output_type_i_d"))), CustomerID: dart.nullCheck((C[0] || CT.C0).mapFromDatabaseResponse(data[$_get](effectivePrefix + "customer_i_d"))), CustomerName: dart.nullCheck((C[1] || CT.C1).mapFromDatabaseResponse(data[$_get](effectivePrefix + "customer_name"))), CustomerPhone: dart.nullCheck((C[1] || CT.C1).mapFromDatabaseResponse(data[$_get](effectivePrefix + "customer_phone"))), IsRequiredVAT: dart.nullCheck((C[13] || CT.C13).mapFromDatabaseResponse(data[$_get](effectivePrefix + "is_required_v_a_t"))), TotalAmount: dart.nullCheck((C[14] || CT.C14).mapFromDatabaseResponse(data[$_get](effectivePrefix + "total_amount"))), Description: dart.nullCheck((C[1] || CT.C1).mapFromDatabaseResponse(data[$_get](effectivePrefix + "description"))), CreatedDate: (C[2] || CT.C2).mapFromDatabaseResponse(data[$_get](effectivePrefix + "created_date"))});
    }
    static ['_#fromData#tearOff'](data, db, opts) {
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      return database.OutputSale.fromData(data, db, {prefix: prefix});
    }
    toColumns(nullToAbsent) {
      let map = new (T.IdentityMapOfString$Expression()).new();
      map[$_set]("osid", new (T.VariableOfint()).new(this.OSID));
      map[$_set]("output_sale_i_d", new (T.VariableOfString()).new(this.OutputSaleID));
      map[$_set]("output_store_i_d", new (T.VariableOfint()).new(this.OutputStoreID));
      map[$_set]("output_type_i_d", new (T.VariableOfint()).new(this.OutputTypeID));
      map[$_set]("customer_i_d", new (T.VariableOfint()).new(this.CustomerID));
      map[$_set]("customer_name", new (T.VariableOfString()).new(this.CustomerName));
      map[$_set]("customer_phone", new (T.VariableOfString()).new(this.CustomerPhone));
      map[$_set]("is_required_v_a_t", new (T.VariableOfbool()).new(this.IsRequiredVAT));
      map[$_set]("total_amount", new (T.VariableOfdouble()).new(this.TotalAmount));
      map[$_set]("description", new (T.VariableOfString()).new(this.Description));
      if (!nullToAbsent || this.CreatedDate != null) {
        map[$_set]("created_date", new (T.VariableOfDateTimeN()).new(this.CreatedDate));
      }
      return map;
    }
    toCompanion(nullToAbsent) {
      return new database.OutputSalesCompanion.new({OSID: new (T.ValueOfint()).new(this.OSID), OutputSaleID: new (T.ValueOfString()).new(this.OutputSaleID), OutputStoreID: new (T.ValueOfint()).new(this.OutputStoreID), OutputTypeID: new (T.ValueOfint()).new(this.OutputTypeID), CustomerID: new (T.ValueOfint()).new(this.CustomerID), CustomerName: new (T.ValueOfString()).new(this.CustomerName), CustomerPhone: new (T.ValueOfString()).new(this.CustomerPhone), IsRequiredVAT: new (T.ValueOfbool()).new(this.IsRequiredVAT), TotalAmount: new (T.ValueOfdouble()).new(this.TotalAmount), Description: new (T.ValueOfString()).new(this.Description), CreatedDate: this.CreatedDate == null && nullToAbsent ? C[3] || CT.C3 : new (T.ValueOfDateTimeN()).new(this.CreatedDate)});
    }
    static fromJson(json, opts) {
      let serializer = opts && 'serializer' in opts ? opts.serializer : null;
      serializer == null ? serializer = moor.moorRuntimeOptions.defaultSerializer : null;
      return new database.OutputSale.new({OSID: serializer.fromJson(core.int, json[$_get]("OSID")), OutputSaleID: serializer.fromJson(core.String, json[$_get]("OutputSaleID")), OutputStoreID: serializer.fromJson(core.int, json[$_get]("OutputStoreID")), OutputTypeID: serializer.fromJson(core.int, json[$_get]("OutputTypeID")), CustomerID: serializer.fromJson(core.int, json[$_get]("CustomerID")), CustomerName: serializer.fromJson(core.String, json[$_get]("CustomerName")), CustomerPhone: serializer.fromJson(core.String, json[$_get]("CustomerPhone")), IsRequiredVAT: serializer.fromJson(core.bool, json[$_get]("IsRequiredVAT")), TotalAmount: serializer.fromJson(core.double, json[$_get]("TotalAmount")), Description: serializer.fromJson(core.String, json[$_get]("Description")), CreatedDate: serializer.fromJson(T.DateTimeN(), json[$_get]("CreatedDate"))});
    }
    static ['_#fromJson#tearOff'](json, opts) {
      let serializer = opts && 'serializer' in opts ? opts.serializer : null;
      return database.OutputSale.fromJson(json, {serializer: serializer});
    }
    toJson(opts) {
      let serializer = opts && 'serializer' in opts ? opts.serializer : null;
      serializer == null ? serializer = moor.moorRuntimeOptions.defaultSerializer : null;
      return new (T.IdentityMapOfString$dynamic()).from(["OSID", serializer.toJson(core.int, this.OSID), "OutputSaleID", serializer.toJson(core.String, this.OutputSaleID), "OutputStoreID", serializer.toJson(core.int, this.OutputStoreID), "OutputTypeID", serializer.toJson(core.int, this.OutputTypeID), "CustomerID", serializer.toJson(core.int, this.CustomerID), "CustomerName", serializer.toJson(core.String, this.CustomerName), "CustomerPhone", serializer.toJson(core.String, this.CustomerPhone), "IsRequiredVAT", serializer.toJson(core.bool, this.IsRequiredVAT), "TotalAmount", serializer.toJson(core.double, this.TotalAmount), "Description", serializer.toJson(core.String, this.Description), "CreatedDate", serializer.toJson(T.DateTimeN(), this.CreatedDate)]);
    }
    copyWith(opts) {
      let t7, t7$, t7$0, t7$1, t7$2, t7$3, t7$4, t7$5, t7$6, t7$7, t7$8;
      let OSID = opts && 'OSID' in opts ? opts.OSID : null;
      let OutputSaleID = opts && 'OutputSaleID' in opts ? opts.OutputSaleID : null;
      let OutputStoreID = opts && 'OutputStoreID' in opts ? opts.OutputStoreID : null;
      let OutputTypeID = opts && 'OutputTypeID' in opts ? opts.OutputTypeID : null;
      let CustomerID = opts && 'CustomerID' in opts ? opts.CustomerID : null;
      let CustomerName = opts && 'CustomerName' in opts ? opts.CustomerName : null;
      let CustomerPhone = opts && 'CustomerPhone' in opts ? opts.CustomerPhone : null;
      let IsRequiredVAT = opts && 'IsRequiredVAT' in opts ? opts.IsRequiredVAT : null;
      let TotalAmount = opts && 'TotalAmount' in opts ? opts.TotalAmount : null;
      let Description = opts && 'Description' in opts ? opts.Description : null;
      let CreatedDate = opts && 'CreatedDate' in opts ? opts.CreatedDate : null;
      return new database.OutputSale.new({OSID: (t7 = OSID, t7 == null ? this.OSID : t7), OutputSaleID: (t7$ = OutputSaleID, t7$ == null ? this.OutputSaleID : t7$), OutputStoreID: (t7$0 = OutputStoreID, t7$0 == null ? this.OutputStoreID : t7$0), OutputTypeID: (t7$1 = OutputTypeID, t7$1 == null ? this.OutputTypeID : t7$1), CustomerID: (t7$2 = CustomerID, t7$2 == null ? this.CustomerID : t7$2), CustomerName: (t7$3 = CustomerName, t7$3 == null ? this.CustomerName : t7$3), CustomerPhone: (t7$4 = CustomerPhone, t7$4 == null ? this.CustomerPhone : t7$4), IsRequiredVAT: (t7$5 = IsRequiredVAT, t7$5 == null ? this.IsRequiredVAT : t7$5), TotalAmount: (t7$6 = TotalAmount, t7$6 == null ? this.TotalAmount : t7$6), Description: (t7$7 = Description, t7$7 == null ? this.Description : t7$7), CreatedDate: (t7$8 = CreatedDate, t7$8 == null ? this.CreatedDate : t7$8)});
    }
    toString() {
      let t7;
      return (t7 = new core.StringBuffer.new("OutputSale("), (() => {
        t7.write("OSID: " + dart.str(this.OSID) + ", ");
        t7.write("OutputSaleID: " + this.OutputSaleID + ", ");
        t7.write("OutputStoreID: " + dart.str(this.OutputStoreID) + ", ");
        t7.write("OutputTypeID: " + dart.str(this.OutputTypeID) + ", ");
        t7.write("CustomerID: " + dart.str(this.CustomerID) + ", ");
        t7.write("CustomerName: " + this.CustomerName + ", ");
        t7.write("CustomerPhone: " + this.CustomerPhone + ", ");
        t7.write("IsRequiredVAT: " + dart.str(this.IsRequiredVAT) + ", ");
        t7.write("TotalAmount: " + dart.str(this.TotalAmount) + ", ");
        t7.write("Description: " + this.Description + ", ");
        t7.write("CreatedDate: " + dart.str(this.CreatedDate));
        t7.write(")");
        return t7;
      })()).toString();
    }
    get hashCode() {
      return core.Object.hash(this.OSID, this.OutputSaleID, this.OutputStoreID, this.OutputTypeID, this.CustomerID, this.CustomerName, this.CustomerPhone, this.IsRequiredVAT, this.TotalAmount, this.Description, this.CreatedDate);
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || database.OutputSale.is(other) && other.OSID === this.OSID && other.OutputSaleID === this.OutputSaleID && other.OutputStoreID === this.OutputStoreID && other.OutputTypeID === this.OutputTypeID && other.CustomerID === this.CustomerID && other.CustomerName === this.CustomerName && other.CustomerPhone === this.CustomerPhone && other.IsRequiredVAT === this.IsRequiredVAT && other.TotalAmount === this.TotalAmount && other.Description === this.Description && dart.equals(other.CreatedDate, this.CreatedDate);
    }
  };
  (database.OutputSale.new = function(opts) {
    let OSID = opts && 'OSID' in opts ? opts.OSID : null;
    let OutputSaleID = opts && 'OutputSaleID' in opts ? opts.OutputSaleID : null;
    let OutputStoreID = opts && 'OutputStoreID' in opts ? opts.OutputStoreID : null;
    let OutputTypeID = opts && 'OutputTypeID' in opts ? opts.OutputTypeID : null;
    let CustomerID = opts && 'CustomerID' in opts ? opts.CustomerID : null;
    let CustomerName = opts && 'CustomerName' in opts ? opts.CustomerName : null;
    let CustomerPhone = opts && 'CustomerPhone' in opts ? opts.CustomerPhone : null;
    let IsRequiredVAT = opts && 'IsRequiredVAT' in opts ? opts.IsRequiredVAT : null;
    let TotalAmount = opts && 'TotalAmount' in opts ? opts.TotalAmount : null;
    let Description = opts && 'Description' in opts ? opts.Description : null;
    let CreatedDate = opts && 'CreatedDate' in opts ? opts.CreatedDate : null;
    this[OSID$] = OSID;
    this[OutputSaleID$] = OutputSaleID;
    this[OutputStoreID$] = OutputStoreID;
    this[OutputTypeID$] = OutputTypeID;
    this[CustomerID$] = CustomerID;
    this[CustomerName$] = CustomerName;
    this[CustomerPhone$] = CustomerPhone;
    this[IsRequiredVAT$] = IsRequiredVAT;
    this[TotalAmount$] = TotalAmount;
    this[Description$] = Description;
    this[CreatedDate$] = CreatedDate;
    database.OutputSale.__proto__.new.call(this);
    ;
  }).prototype = database.OutputSale.prototype;
  dart.addTypeTests(database.OutputSale);
  dart.addTypeCaches(database.OutputSale);
  database.OutputSale[dart.implements] = () => [data_class.Insertable$(database.OutputSale)];
  dart.setMethodSignature(database.OutputSale, () => ({
    __proto__: dart.getMethods(database.OutputSale.__proto__),
    toColumns: dart.fnType(core.Map$(core.String, query_builder.Expression), [core.bool]),
    toCompanion: dart.fnType(database.OutputSalesCompanion, [core.bool]),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [], {serializer: dart.nullable(data_class.ValueSerializer)}, {}),
    copyWith: dart.fnType(database.OutputSale, [], {CreatedDate: dart.nullable(core.DateTime), CustomerID: dart.nullable(core.int), CustomerName: dart.nullable(core.String), CustomerPhone: dart.nullable(core.String), Description: dart.nullable(core.String), IsRequiredVAT: dart.nullable(core.bool), OSID: dart.nullable(core.int), OutputSaleID: dart.nullable(core.String), OutputStoreID: dart.nullable(core.int), OutputTypeID: dart.nullable(core.int), TotalAmount: dart.nullable(core.double)}, {})
  }));
  dart.setStaticMethodSignature(database.OutputSale, () => ['fromData', 'fromJson']);
  dart.setLibraryUri(database.OutputSale, I[7]);
  dart.setFieldSignature(database.OutputSale, () => ({
    __proto__: dart.getFields(database.OutputSale.__proto__),
    OSID: dart.finalFieldType(core.int),
    OutputSaleID: dart.finalFieldType(core.String),
    OutputStoreID: dart.finalFieldType(core.int),
    OutputTypeID: dart.finalFieldType(core.int),
    CustomerID: dart.finalFieldType(core.int),
    CustomerName: dart.finalFieldType(core.String),
    CustomerPhone: dart.finalFieldType(core.String),
    IsRequiredVAT: dart.finalFieldType(core.bool),
    TotalAmount: dart.finalFieldType(core.double),
    Description: dart.finalFieldType(core.String),
    CreatedDate: dart.finalFieldType(dart.nullable(core.DateTime))
  }));
  dart.defineExtensionMethods(database.OutputSale, ['toString', '_equals']);
  dart.defineExtensionAccessors(database.OutputSale, ['hashCode']);
  var OSID$0 = dart.privateName(database, "OutputSalesCompanion.OSID");
  var OutputSaleID$0 = dart.privateName(database, "OutputSalesCompanion.OutputSaleID");
  var OutputStoreID$0 = dart.privateName(database, "OutputSalesCompanion.OutputStoreID");
  var OutputTypeID$0 = dart.privateName(database, "OutputSalesCompanion.OutputTypeID");
  var CustomerID$0 = dart.privateName(database, "OutputSalesCompanion.CustomerID");
  var CustomerName$0 = dart.privateName(database, "OutputSalesCompanion.CustomerName");
  var CustomerPhone$0 = dart.privateName(database, "OutputSalesCompanion.CustomerPhone");
  var IsRequiredVAT$0 = dart.privateName(database, "OutputSalesCompanion.IsRequiredVAT");
  var TotalAmount$0 = dart.privateName(database, "OutputSalesCompanion.TotalAmount");
  var Description$0 = dart.privateName(database, "OutputSalesCompanion.Description");
  var CreatedDate$0 = dart.privateName(database, "OutputSalesCompanion.CreatedDate");
  database.OutputSalesCompanion = class OutputSalesCompanion extends data_class.UpdateCompanion$(database.OutputSale) {
    get OSID() {
      return this[OSID$0];
    }
    set OSID(value) {
      super.OSID = value;
    }
    get OutputSaleID() {
      return this[OutputSaleID$0];
    }
    set OutputSaleID(value) {
      super.OutputSaleID = value;
    }
    get OutputStoreID() {
      return this[OutputStoreID$0];
    }
    set OutputStoreID(value) {
      super.OutputStoreID = value;
    }
    get OutputTypeID() {
      return this[OutputTypeID$0];
    }
    set OutputTypeID(value) {
      super.OutputTypeID = value;
    }
    get CustomerID() {
      return this[CustomerID$0];
    }
    set CustomerID(value) {
      super.CustomerID = value;
    }
    get CustomerName() {
      return this[CustomerName$0];
    }
    set CustomerName(value) {
      super.CustomerName = value;
    }
    get CustomerPhone() {
      return this[CustomerPhone$0];
    }
    set CustomerPhone(value) {
      super.CustomerPhone = value;
    }
    get IsRequiredVAT() {
      return this[IsRequiredVAT$0];
    }
    set IsRequiredVAT(value) {
      super.IsRequiredVAT = value;
    }
    get TotalAmount() {
      return this[TotalAmount$0];
    }
    set TotalAmount(value) {
      super.TotalAmount = value;
    }
    get Description() {
      return this[Description$0];
    }
    set Description(value) {
      super.Description = value;
    }
    get CreatedDate() {
      return this[CreatedDate$0];
    }
    set CreatedDate(value) {
      super.CreatedDate = value;
    }
    static ['_#new#tearOff'](opts) {
      let OSID = opts && 'OSID' in opts ? opts.OSID : C[5] || CT.C5;
      let OutputSaleID = opts && 'OutputSaleID' in opts ? opts.OutputSaleID : C[6] || CT.C6;
      let OutputStoreID = opts && 'OutputStoreID' in opts ? opts.OutputStoreID : C[5] || CT.C5;
      let OutputTypeID = opts && 'OutputTypeID' in opts ? opts.OutputTypeID : C[5] || CT.C5;
      let CustomerID = opts && 'CustomerID' in opts ? opts.CustomerID : C[5] || CT.C5;
      let CustomerName = opts && 'CustomerName' in opts ? opts.CustomerName : C[6] || CT.C6;
      let CustomerPhone = opts && 'CustomerPhone' in opts ? opts.CustomerPhone : C[6] || CT.C6;
      let IsRequiredVAT = opts && 'IsRequiredVAT' in opts ? opts.IsRequiredVAT : C[15] || CT.C15;
      let TotalAmount = opts && 'TotalAmount' in opts ? opts.TotalAmount : C[16] || CT.C16;
      let Description = opts && 'Description' in opts ? opts.Description : C[6] || CT.C6;
      let CreatedDate = opts && 'CreatedDate' in opts ? opts.CreatedDate : C[3] || CT.C3;
      return new database.OutputSalesCompanion.new({OSID: OSID, OutputSaleID: OutputSaleID, OutputStoreID: OutputStoreID, OutputTypeID: OutputTypeID, CustomerID: CustomerID, CustomerName: CustomerName, CustomerPhone: CustomerPhone, IsRequiredVAT: IsRequiredVAT, TotalAmount: TotalAmount, Description: Description, CreatedDate: CreatedDate});
    }
    static ['_#insert#tearOff'](opts) {
      let OSID = opts && 'OSID' in opts ? opts.OSID : C[5] || CT.C5;
      let OutputSaleID = opts && 'OutputSaleID' in opts ? opts.OutputSaleID : null;
      let OutputStoreID = opts && 'OutputStoreID' in opts ? opts.OutputStoreID : null;
      let OutputTypeID = opts && 'OutputTypeID' in opts ? opts.OutputTypeID : null;
      let CustomerID = opts && 'CustomerID' in opts ? opts.CustomerID : null;
      let CustomerName = opts && 'CustomerName' in opts ? opts.CustomerName : null;
      let CustomerPhone = opts && 'CustomerPhone' in opts ? opts.CustomerPhone : null;
      let IsRequiredVAT = opts && 'IsRequiredVAT' in opts ? opts.IsRequiredVAT : null;
      let TotalAmount = opts && 'TotalAmount' in opts ? opts.TotalAmount : null;
      let Description = opts && 'Description' in opts ? opts.Description : null;
      let CreatedDate = opts && 'CreatedDate' in opts ? opts.CreatedDate : C[3] || CT.C3;
      return new database.OutputSalesCompanion.insert({OSID: OSID, OutputSaleID: OutputSaleID, OutputStoreID: OutputStoreID, OutputTypeID: OutputTypeID, CustomerID: CustomerID, CustomerName: CustomerName, CustomerPhone: CustomerPhone, IsRequiredVAT: IsRequiredVAT, TotalAmount: TotalAmount, Description: Description, CreatedDate: CreatedDate});
    }
    static custom(opts) {
      let OSID = opts && 'OSID' in opts ? opts.OSID : null;
      let OutputSaleID = opts && 'OutputSaleID' in opts ? opts.OutputSaleID : null;
      let OutputStoreID = opts && 'OutputStoreID' in opts ? opts.OutputStoreID : null;
      let OutputTypeID = opts && 'OutputTypeID' in opts ? opts.OutputTypeID : null;
      let CustomerID = opts && 'CustomerID' in opts ? opts.CustomerID : null;
      let CustomerName = opts && 'CustomerName' in opts ? opts.CustomerName : null;
      let CustomerPhone = opts && 'CustomerPhone' in opts ? opts.CustomerPhone : null;
      let IsRequiredVAT = opts && 'IsRequiredVAT' in opts ? opts.IsRequiredVAT : null;
      let TotalAmount = opts && 'TotalAmount' in opts ? opts.TotalAmount : null;
      let Description = opts && 'Description' in opts ? opts.Description : null;
      let CreatedDate = opts && 'CreatedDate' in opts ? opts.CreatedDate : null;
      return new (T.RawValuesInsertableOfOutputSale()).new((() => {
        let t7 = new (T.IdentityMapOfString$Expression()).new();
        if (OSID != null) t7[$_set]("osid", OSID);
        if (OutputSaleID != null) t7[$_set]("output_sale_i_d", OutputSaleID);
        if (OutputStoreID != null) t7[$_set]("output_store_i_d", OutputStoreID);
        if (OutputTypeID != null) t7[$_set]("output_type_i_d", OutputTypeID);
        if (CustomerID != null) t7[$_set]("customer_i_d", CustomerID);
        if (CustomerName != null) t7[$_set]("customer_name", CustomerName);
        if (CustomerPhone != null) t7[$_set]("customer_phone", CustomerPhone);
        if (IsRequiredVAT != null) t7[$_set]("is_required_v_a_t", IsRequiredVAT);
        if (TotalAmount != null) t7[$_set]("total_amount", TotalAmount);
        if (Description != null) t7[$_set]("description", Description);
        if (CreatedDate != null) t7[$_set]("created_date", CreatedDate);
        return t7;
      })());
    }
    copyWith(opts) {
      let t8, t8$, t8$0, t8$1, t8$2, t8$3, t8$4, t8$5, t8$6, t8$7, t8$8;
      let OSID = opts && 'OSID' in opts ? opts.OSID : null;
      let OutputSaleID = opts && 'OutputSaleID' in opts ? opts.OutputSaleID : null;
      let OutputStoreID = opts && 'OutputStoreID' in opts ? opts.OutputStoreID : null;
      let OutputTypeID = opts && 'OutputTypeID' in opts ? opts.OutputTypeID : null;
      let CustomerID = opts && 'CustomerID' in opts ? opts.CustomerID : null;
      let CustomerName = opts && 'CustomerName' in opts ? opts.CustomerName : null;
      let CustomerPhone = opts && 'CustomerPhone' in opts ? opts.CustomerPhone : null;
      let IsRequiredVAT = opts && 'IsRequiredVAT' in opts ? opts.IsRequiredVAT : null;
      let TotalAmount = opts && 'TotalAmount' in opts ? opts.TotalAmount : null;
      let Description = opts && 'Description' in opts ? opts.Description : null;
      let CreatedDate = opts && 'CreatedDate' in opts ? opts.CreatedDate : null;
      return new database.OutputSalesCompanion.new({OSID: (t8 = OSID, t8 == null ? this.OSID : t8), OutputSaleID: (t8$ = OutputSaleID, t8$ == null ? this.OutputSaleID : t8$), OutputStoreID: (t8$0 = OutputStoreID, t8$0 == null ? this.OutputStoreID : t8$0), OutputTypeID: (t8$1 = OutputTypeID, t8$1 == null ? this.OutputTypeID : t8$1), CustomerID: (t8$2 = CustomerID, t8$2 == null ? this.CustomerID : t8$2), CustomerName: (t8$3 = CustomerName, t8$3 == null ? this.CustomerName : t8$3), CustomerPhone: (t8$4 = CustomerPhone, t8$4 == null ? this.CustomerPhone : t8$4), IsRequiredVAT: (t8$5 = IsRequiredVAT, t8$5 == null ? this.IsRequiredVAT : t8$5), TotalAmount: (t8$6 = TotalAmount, t8$6 == null ? this.TotalAmount : t8$6), Description: (t8$7 = Description, t8$7 == null ? this.Description : t8$7), CreatedDate: (t8$8 = CreatedDate, t8$8 == null ? this.CreatedDate : t8$8)});
    }
    toColumns(nullToAbsent) {
      let map = new (T.IdentityMapOfString$Expression()).new();
      if (this.OSID.present) {
        map[$_set]("osid", new (T.VariableOfint()).new(this.OSID.value));
      }
      if (this.OutputSaleID.present) {
        map[$_set]("output_sale_i_d", new (T.VariableOfString()).new(this.OutputSaleID.value));
      }
      if (this.OutputStoreID.present) {
        map[$_set]("output_store_i_d", new (T.VariableOfint()).new(this.OutputStoreID.value));
      }
      if (this.OutputTypeID.present) {
        map[$_set]("output_type_i_d", new (T.VariableOfint()).new(this.OutputTypeID.value));
      }
      if (this.CustomerID.present) {
        map[$_set]("customer_i_d", new (T.VariableOfint()).new(this.CustomerID.value));
      }
      if (this.CustomerName.present) {
        map[$_set]("customer_name", new (T.VariableOfString()).new(this.CustomerName.value));
      }
      if (this.CustomerPhone.present) {
        map[$_set]("customer_phone", new (T.VariableOfString()).new(this.CustomerPhone.value));
      }
      if (this.IsRequiredVAT.present) {
        map[$_set]("is_required_v_a_t", new (T.VariableOfbool()).new(this.IsRequiredVAT.value));
      }
      if (this.TotalAmount.present) {
        map[$_set]("total_amount", new (T.VariableOfdouble()).new(this.TotalAmount.value));
      }
      if (this.Description.present) {
        map[$_set]("description", new (T.VariableOfString()).new(this.Description.value));
      }
      if (this.CreatedDate.present) {
        map[$_set]("created_date", new (T.VariableOfDateTimeN()).new(this.CreatedDate.value));
      }
      return map;
    }
    toString() {
      let t8;
      return (t8 = new core.StringBuffer.new("OutputSalesCompanion("), (() => {
        t8.write("OSID: " + dart.str(this.OSID) + ", ");
        t8.write("OutputSaleID: " + dart.str(this.OutputSaleID) + ", ");
        t8.write("OutputStoreID: " + dart.str(this.OutputStoreID) + ", ");
        t8.write("OutputTypeID: " + dart.str(this.OutputTypeID) + ", ");
        t8.write("CustomerID: " + dart.str(this.CustomerID) + ", ");
        t8.write("CustomerName: " + dart.str(this.CustomerName) + ", ");
        t8.write("CustomerPhone: " + dart.str(this.CustomerPhone) + ", ");
        t8.write("IsRequiredVAT: " + dart.str(this.IsRequiredVAT) + ", ");
        t8.write("TotalAmount: " + dart.str(this.TotalAmount) + ", ");
        t8.write("Description: " + dart.str(this.Description) + ", ");
        t8.write("CreatedDate: " + dart.str(this.CreatedDate));
        t8.write(")");
        return t8;
      })()).toString();
    }
  };
  (database.OutputSalesCompanion.new = function(opts) {
    let OSID = opts && 'OSID' in opts ? opts.OSID : C[5] || CT.C5;
    let OutputSaleID = opts && 'OutputSaleID' in opts ? opts.OutputSaleID : C[6] || CT.C6;
    let OutputStoreID = opts && 'OutputStoreID' in opts ? opts.OutputStoreID : C[5] || CT.C5;
    let OutputTypeID = opts && 'OutputTypeID' in opts ? opts.OutputTypeID : C[5] || CT.C5;
    let CustomerID = opts && 'CustomerID' in opts ? opts.CustomerID : C[5] || CT.C5;
    let CustomerName = opts && 'CustomerName' in opts ? opts.CustomerName : C[6] || CT.C6;
    let CustomerPhone = opts && 'CustomerPhone' in opts ? opts.CustomerPhone : C[6] || CT.C6;
    let IsRequiredVAT = opts && 'IsRequiredVAT' in opts ? opts.IsRequiredVAT : C[15] || CT.C15;
    let TotalAmount = opts && 'TotalAmount' in opts ? opts.TotalAmount : C[16] || CT.C16;
    let Description = opts && 'Description' in opts ? opts.Description : C[6] || CT.C6;
    let CreatedDate = opts && 'CreatedDate' in opts ? opts.CreatedDate : C[3] || CT.C3;
    this[OSID$0] = OSID;
    this[OutputSaleID$0] = OutputSaleID;
    this[OutputStoreID$0] = OutputStoreID;
    this[OutputTypeID$0] = OutputTypeID;
    this[CustomerID$0] = CustomerID;
    this[CustomerName$0] = CustomerName;
    this[CustomerPhone$0] = CustomerPhone;
    this[IsRequiredVAT$0] = IsRequiredVAT;
    this[TotalAmount$0] = TotalAmount;
    this[Description$0] = Description;
    this[CreatedDate$0] = CreatedDate;
    database.OutputSalesCompanion.__proto__.new.call(this);
    ;
  }).prototype = database.OutputSalesCompanion.prototype;
  (database.OutputSalesCompanion.insert = function(opts) {
    let OSID = opts && 'OSID' in opts ? opts.OSID : C[5] || CT.C5;
    let OutputSaleID = opts && 'OutputSaleID' in opts ? opts.OutputSaleID : null;
    let OutputStoreID = opts && 'OutputStoreID' in opts ? opts.OutputStoreID : null;
    let OutputTypeID = opts && 'OutputTypeID' in opts ? opts.OutputTypeID : null;
    let CustomerID = opts && 'CustomerID' in opts ? opts.CustomerID : null;
    let CustomerName = opts && 'CustomerName' in opts ? opts.CustomerName : null;
    let CustomerPhone = opts && 'CustomerPhone' in opts ? opts.CustomerPhone : null;
    let IsRequiredVAT = opts && 'IsRequiredVAT' in opts ? opts.IsRequiredVAT : null;
    let TotalAmount = opts && 'TotalAmount' in opts ? opts.TotalAmount : null;
    let Description = opts && 'Description' in opts ? opts.Description : null;
    let CreatedDate = opts && 'CreatedDate' in opts ? opts.CreatedDate : C[3] || CT.C3;
    this[OSID$0] = OSID;
    this[CreatedDate$0] = CreatedDate;
    this[OutputSaleID$0] = new (T.ValueOfString()).new(OutputSaleID);
    this[OutputStoreID$0] = new (T.ValueOfint()).new(OutputStoreID);
    this[OutputTypeID$0] = new (T.ValueOfint()).new(OutputTypeID);
    this[CustomerID$0] = new (T.ValueOfint()).new(CustomerID);
    this[CustomerName$0] = new (T.ValueOfString()).new(CustomerName);
    this[CustomerPhone$0] = new (T.ValueOfString()).new(CustomerPhone);
    this[IsRequiredVAT$0] = new (T.ValueOfbool()).new(IsRequiredVAT);
    this[TotalAmount$0] = new (T.ValueOfdouble()).new(TotalAmount);
    this[Description$0] = new (T.ValueOfString()).new(Description);
    database.OutputSalesCompanion.__proto__.new.call(this);
    ;
  }).prototype = database.OutputSalesCompanion.prototype;
  dart.addTypeTests(database.OutputSalesCompanion);
  dart.addTypeCaches(database.OutputSalesCompanion);
  dart.setMethodSignature(database.OutputSalesCompanion, () => ({
    __proto__: dart.getMethods(database.OutputSalesCompanion.__proto__),
    copyWith: dart.fnType(database.OutputSalesCompanion, [], {CreatedDate: dart.nullable(data_class.Value$(dart.nullable(core.DateTime))), CustomerID: dart.nullable(data_class.Value$(core.int)), CustomerName: dart.nullable(data_class.Value$(core.String)), CustomerPhone: dart.nullable(data_class.Value$(core.String)), Description: dart.nullable(data_class.Value$(core.String)), IsRequiredVAT: dart.nullable(data_class.Value$(core.bool)), OSID: dart.nullable(data_class.Value$(core.int)), OutputSaleID: dart.nullable(data_class.Value$(core.String)), OutputStoreID: dart.nullable(data_class.Value$(core.int)), OutputTypeID: dart.nullable(data_class.Value$(core.int)), TotalAmount: dart.nullable(data_class.Value$(core.double))}, {}),
    toColumns: dart.fnType(core.Map$(core.String, query_builder.Expression), [core.bool])
  }));
  dart.setStaticMethodSignature(database.OutputSalesCompanion, () => ['custom']);
  dart.setLibraryUri(database.OutputSalesCompanion, I[7]);
  dart.setFieldSignature(database.OutputSalesCompanion, () => ({
    __proto__: dart.getFields(database.OutputSalesCompanion.__proto__),
    OSID: dart.finalFieldType(data_class.Value$(core.int)),
    OutputSaleID: dart.finalFieldType(data_class.Value$(core.String)),
    OutputStoreID: dart.finalFieldType(data_class.Value$(core.int)),
    OutputTypeID: dart.finalFieldType(data_class.Value$(core.int)),
    CustomerID: dart.finalFieldType(data_class.Value$(core.int)),
    CustomerName: dart.finalFieldType(data_class.Value$(core.String)),
    CustomerPhone: dart.finalFieldType(data_class.Value$(core.String)),
    IsRequiredVAT: dart.finalFieldType(data_class.Value$(core.bool)),
    TotalAmount: dart.finalFieldType(data_class.Value$(core.double)),
    Description: dart.finalFieldType(data_class.Value$(core.String)),
    CreatedDate: dart.finalFieldType(data_class.Value$(dart.nullable(core.DateTime)))
  }));
  dart.defineExtensionMethods(database.OutputSalesCompanion, ['toString']);
  var attachedDatabase$1 = dart.privateName(database, "$OutputSalesTable.attachedDatabase");
  var _OSIDMeta = dart.privateName(database, "_OSIDMeta");
  var __$OutputSalesTable_OSID = dart.privateName(database, "_#$OutputSalesTable#OSID");
  var _OutputSaleIDMeta = dart.privateName(database, "_OutputSaleIDMeta");
  var __$OutputSalesTable_OutputSaleID = dart.privateName(database, "_#$OutputSalesTable#OutputSaleID");
  var _OutputStoreIDMeta = dart.privateName(database, "_OutputStoreIDMeta");
  var __$OutputSalesTable_OutputStoreID = dart.privateName(database, "_#$OutputSalesTable#OutputStoreID");
  var _OutputTypeIDMeta = dart.privateName(database, "_OutputTypeIDMeta");
  var __$OutputSalesTable_OutputTypeID = dart.privateName(database, "_#$OutputSalesTable#OutputTypeID");
  var _CustomerIDMeta = dart.privateName(database, "_CustomerIDMeta");
  var __$OutputSalesTable_CustomerID = dart.privateName(database, "_#$OutputSalesTable#CustomerID");
  var _CustomerNameMeta = dart.privateName(database, "_CustomerNameMeta");
  var __$OutputSalesTable_CustomerName = dart.privateName(database, "_#$OutputSalesTable#CustomerName");
  var _CustomerPhoneMeta = dart.privateName(database, "_CustomerPhoneMeta");
  var __$OutputSalesTable_CustomerPhone = dart.privateName(database, "_#$OutputSalesTable#CustomerPhone");
  var _IsRequiredVATMeta = dart.privateName(database, "_IsRequiredVATMeta");
  var __$OutputSalesTable_IsRequiredVAT = dart.privateName(database, "_#$OutputSalesTable#IsRequiredVAT");
  var _TotalAmountMeta = dart.privateName(database, "_TotalAmountMeta");
  var __$OutputSalesTable_TotalAmount = dart.privateName(database, "_#$OutputSalesTable#TotalAmount");
  var _DescriptionMeta = dart.privateName(database, "_DescriptionMeta");
  var __$OutputSalesTable_Description = dart.privateName(database, "_#$OutputSalesTable#Description");
  var _CreatedDateMeta = dart.privateName(database, "_CreatedDateMeta");
  var __$OutputSalesTable_CreatedDate = dart.privateName(database, "_#$OutputSalesTable#CreatedDate");
  const OutputSales_TableInfo$36 = class OutputSales_TableInfo extends output_sale.OutputSales {};
  (OutputSales_TableInfo$36.new = function() {
    query_builder.TableInfo$(database.$OutputSalesTable, database.OutputSale)[dart.mixinNew].call(this);
    OutputSales_TableInfo$36.__proto__.new.call(this);
  }).prototype = OutputSales_TableInfo$36.prototype;
  database.$OutputSalesTable = class $36OutputSalesTable extends OutputSales_TableInfo$36 {
    get attachedDatabase() {
      return this[attachedDatabase$1];
    }
    set attachedDatabase(value) {
      super.attachedDatabase = value;
    }
    static ['_#new#tearOff'](attachedDatabase, _alias = null) {
      return new database.$OutputSalesTable.new(attachedDatabase, _alias);
    }
    get OSID() {
      let t9, t8;
      t8 = this[__$OutputSalesTable_OSID];
      return t8 == null ? (t9 = new (T.GeneratedColumnOfintN()).new("osid", this.aliasedName, false, {type: C[0] || CT.C0, requiredDuringInsert: false, defaultConstraints: "PRIMARY KEY AUTOINCREMENT"}), this[__$OutputSalesTable_OSID] == null ? this[__$OutputSalesTable_OSID] = t9 : dart.throw(new _internal.LateError.fieldADI("OSID"))) : t8;
    }
    get OutputSaleID() {
      let t9, t8;
      t8 = this[__$OutputSalesTable_OutputSaleID];
      return t8 == null ? (t9 = new (T.GeneratedColumnOfStringN()).new("output_sale_i_d", this.aliasedName, false, {type: C[1] || CT.C1, requiredDuringInsert: true}), this[__$OutputSalesTable_OutputSaleID] == null ? this[__$OutputSalesTable_OutputSaleID] = t9 : dart.throw(new _internal.LateError.fieldADI("OutputSaleID"))) : t8;
    }
    get OutputStoreID() {
      let t9, t8;
      t8 = this[__$OutputSalesTable_OutputStoreID];
      return t8 == null ? (t9 = new (T.GeneratedColumnOfintN()).new("output_store_i_d", this.aliasedName, false, {type: C[0] || CT.C0, requiredDuringInsert: true}), this[__$OutputSalesTable_OutputStoreID] == null ? this[__$OutputSalesTable_OutputStoreID] = t9 : dart.throw(new _internal.LateError.fieldADI("OutputStoreID"))) : t8;
    }
    get OutputTypeID() {
      let t9, t8;
      t8 = this[__$OutputSalesTable_OutputTypeID];
      return t8 == null ? (t9 = new (T.GeneratedColumnOfintN()).new("output_type_i_d", this.aliasedName, false, {type: C[0] || CT.C0, requiredDuringInsert: true}), this[__$OutputSalesTable_OutputTypeID] == null ? this[__$OutputSalesTable_OutputTypeID] = t9 : dart.throw(new _internal.LateError.fieldADI("OutputTypeID"))) : t8;
    }
    get CustomerID() {
      let t9, t8;
      t8 = this[__$OutputSalesTable_CustomerID];
      return t8 == null ? (t9 = new (T.GeneratedColumnOfintN()).new("customer_i_d", this.aliasedName, false, {type: C[0] || CT.C0, requiredDuringInsert: true}), this[__$OutputSalesTable_CustomerID] == null ? this[__$OutputSalesTable_CustomerID] = t9 : dart.throw(new _internal.LateError.fieldADI("CustomerID"))) : t8;
    }
    get CustomerName() {
      let t9, t8;
      t8 = this[__$OutputSalesTable_CustomerName];
      return t8 == null ? (t9 = new (T.GeneratedColumnOfStringN()).new("customer_name", this.aliasedName, false, {type: C[1] || CT.C1, requiredDuringInsert: true}), this[__$OutputSalesTable_CustomerName] == null ? this[__$OutputSalesTable_CustomerName] = t9 : dart.throw(new _internal.LateError.fieldADI("CustomerName"))) : t8;
    }
    get CustomerPhone() {
      let t9, t8;
      t8 = this[__$OutputSalesTable_CustomerPhone];
      return t8 == null ? (t9 = new (T.GeneratedColumnOfStringN()).new("customer_phone", this.aliasedName, false, {type: C[1] || CT.C1, requiredDuringInsert: true}), this[__$OutputSalesTable_CustomerPhone] == null ? this[__$OutputSalesTable_CustomerPhone] = t9 : dart.throw(new _internal.LateError.fieldADI("CustomerPhone"))) : t8;
    }
    get IsRequiredVAT() {
      let t9, t8;
      t8 = this[__$OutputSalesTable_IsRequiredVAT];
      return t8 == null ? (t9 = new (T.GeneratedColumnOfboolN()).new("is_required_v_a_t", this.aliasedName, false, {type: C[13] || CT.C13, requiredDuringInsert: true, defaultConstraints: "CHECK (is_required_v_a_t IN (0, 1))"}), this[__$OutputSalesTable_IsRequiredVAT] == null ? this[__$OutputSalesTable_IsRequiredVAT] = t9 : dart.throw(new _internal.LateError.fieldADI("IsRequiredVAT"))) : t8;
    }
    get TotalAmount() {
      let t9, t8;
      t8 = this[__$OutputSalesTable_TotalAmount];
      return t8 == null ? (t9 = new (T.GeneratedColumnOfdoubleN()).new("total_amount", this.aliasedName, false, {type: C[14] || CT.C14, requiredDuringInsert: true}), this[__$OutputSalesTable_TotalAmount] == null ? this[__$OutputSalesTable_TotalAmount] = t9 : dart.throw(new _internal.LateError.fieldADI("TotalAmount"))) : t8;
    }
    get Description() {
      let t9, t8;
      t8 = this[__$OutputSalesTable_Description];
      return t8 == null ? (t9 = new (T.GeneratedColumnOfStringN()).new("description", this.aliasedName, false, {type: C[1] || CT.C1, requiredDuringInsert: true}), this[__$OutputSalesTable_Description] == null ? this[__$OutputSalesTable_Description] = t9 : dart.throw(new _internal.LateError.fieldADI("Description"))) : t8;
    }
    get CreatedDate() {
      let t9, t8;
      t8 = this[__$OutputSalesTable_CreatedDate];
      return t8 == null ? (t9 = new (T.GeneratedColumnOfDateTimeN()).new("created_date", this.aliasedName, true, {type: C[0] || CT.C0, requiredDuringInsert: false}), this[__$OutputSalesTable_CreatedDate] == null ? this[__$OutputSalesTable_CreatedDate] = t9 : dart.throw(new _internal.LateError.fieldADI("CreatedDate"))) : t8;
    }
    get $columns() {
      return T.JSArrayOfGeneratedColumn().of([this.OSID, this.OutputSaleID, this.OutputStoreID, this.OutputTypeID, this.CustomerID, this.CustomerName, this.CustomerPhone, this.IsRequiredVAT, this.TotalAmount, this.Description, this.CreatedDate]);
    }
    get aliasedName() {
      let t8;
      t8 = this[_alias$];
      return t8 == null ? "output_sales" : t8;
    }
    get actualTableName() {
      return "output_sales";
    }
    validateIntegrity(instance, opts) {
      T.InsertableOfOutputSale().as(instance);
      let isInserting = opts && 'isInserting' in opts ? opts.isInserting : false;
      let context = new data_verification.VerificationContext.new();
      let data = instance.toColumns(true);
      if (data[$containsKey]("osid")) {
        context.handle(this[_OSIDMeta], this.OSID.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("osid")), this[_OSIDMeta]));
      }
      if (data[$containsKey]("output_sale_i_d")) {
        context.handle(this[_OutputSaleIDMeta], this.OutputSaleID.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("output_sale_i_d")), this[_OutputSaleIDMeta]));
      } else if (isInserting) {
        context.missing(this[_OutputSaleIDMeta]);
      }
      if (data[$containsKey]("output_store_i_d")) {
        context.handle(this[_OutputStoreIDMeta], this.OutputStoreID.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("output_store_i_d")), this[_OutputStoreIDMeta]));
      } else if (isInserting) {
        context.missing(this[_OutputStoreIDMeta]);
      }
      if (data[$containsKey]("output_type_i_d")) {
        context.handle(this[_OutputTypeIDMeta], this.OutputTypeID.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("output_type_i_d")), this[_OutputTypeIDMeta]));
      } else if (isInserting) {
        context.missing(this[_OutputTypeIDMeta]);
      }
      if (data[$containsKey]("customer_i_d")) {
        context.handle(this[_CustomerIDMeta], this.CustomerID.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("customer_i_d")), this[_CustomerIDMeta]));
      } else if (isInserting) {
        context.missing(this[_CustomerIDMeta]);
      }
      if (data[$containsKey]("customer_name")) {
        context.handle(this[_CustomerNameMeta], this.CustomerName.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("customer_name")), this[_CustomerNameMeta]));
      } else if (isInserting) {
        context.missing(this[_CustomerNameMeta]);
      }
      if (data[$containsKey]("customer_phone")) {
        context.handle(this[_CustomerPhoneMeta], this.CustomerPhone.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("customer_phone")), this[_CustomerPhoneMeta]));
      } else if (isInserting) {
        context.missing(this[_CustomerPhoneMeta]);
      }
      if (data[$containsKey]("is_required_v_a_t")) {
        context.handle(this[_IsRequiredVATMeta], this.IsRequiredVAT.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("is_required_v_a_t")), this[_IsRequiredVATMeta]));
      } else if (isInserting) {
        context.missing(this[_IsRequiredVATMeta]);
      }
      if (data[$containsKey]("total_amount")) {
        context.handle(this[_TotalAmountMeta], this.TotalAmount.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("total_amount")), this[_TotalAmountMeta]));
      } else if (isInserting) {
        context.missing(this[_TotalAmountMeta]);
      }
      if (data[$containsKey]("description")) {
        context.handle(this[_DescriptionMeta], this.Description.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("description")), this[_DescriptionMeta]));
      } else if (isInserting) {
        context.missing(this[_DescriptionMeta]);
      }
      if (data[$containsKey]("created_date")) {
        context.handle(this[_CreatedDateMeta], this.CreatedDate.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("created_date")), this[_CreatedDateMeta]));
      }
      return context;
    }
    get $primaryKey() {
      return T.LinkedHashSetOfGeneratedColumn().from([this.OSID]);
    }
    map(data, opts) {
      let tablePrefix = opts && 'tablePrefix' in opts ? opts.tablePrefix : null;
      return database.OutputSale.fromData(data, this.attachedDatabase, {prefix: tablePrefix != null ? dart.str(tablePrefix) + "." : null});
    }
    createAlias(alias) {
      return new database.$OutputSalesTable.new(this.attachedDatabase, alias);
    }
  };
  (database.$OutputSalesTable.new = function(attachedDatabase, _alias = null) {
    this[_OSIDMeta] = C[17] || CT.C17;
    this[__$OutputSalesTable_OSID] = null;
    this[_OutputSaleIDMeta] = C[18] || CT.C18;
    this[__$OutputSalesTable_OutputSaleID] = null;
    this[_OutputStoreIDMeta] = C[19] || CT.C19;
    this[__$OutputSalesTable_OutputStoreID] = null;
    this[_OutputTypeIDMeta] = C[20] || CT.C20;
    this[__$OutputSalesTable_OutputTypeID] = null;
    this[_CustomerIDMeta] = C[21] || CT.C21;
    this[__$OutputSalesTable_CustomerID] = null;
    this[_CustomerNameMeta] = C[22] || CT.C22;
    this[__$OutputSalesTable_CustomerName] = null;
    this[_CustomerPhoneMeta] = C[23] || CT.C23;
    this[__$OutputSalesTable_CustomerPhone] = null;
    this[_IsRequiredVATMeta] = C[24] || CT.C24;
    this[__$OutputSalesTable_IsRequiredVAT] = null;
    this[_TotalAmountMeta] = C[25] || CT.C25;
    this[__$OutputSalesTable_TotalAmount] = null;
    this[_DescriptionMeta] = C[26] || CT.C26;
    this[__$OutputSalesTable_Description] = null;
    this[_CreatedDateMeta] = C[27] || CT.C27;
    this[__$OutputSalesTable_CreatedDate] = null;
    this[attachedDatabase$1] = attachedDatabase;
    this[_alias$] = _alias;
    database.$OutputSalesTable.__proto__.new.call(this);
    ;
  }).prototype = database.$OutputSalesTable.prototype;
  dart.addTypeTests(database.$OutputSalesTable);
  dart.addTypeCaches(database.$OutputSalesTable);
  dart.setMethodSignature(database.$OutputSalesTable, () => ({
    __proto__: dart.getMethods(database.$OutputSalesTable.__proto__),
    map: dart.fnType(database.OutputSale, [core.Map$(core.String, dart.dynamic)], {tablePrefix: dart.nullable(core.String)}, {}),
    createAlias: dart.fnType(database.$OutputSalesTable, [core.String])
  }));
  dart.setGetterSignature(database.$OutputSalesTable, () => ({
    __proto__: dart.getGetters(database.$OutputSalesTable.__proto__),
    OSID: query_builder.GeneratedColumn$(dart.nullable(core.int)),
    OutputSaleID: query_builder.GeneratedColumn$(dart.nullable(core.String)),
    OutputStoreID: query_builder.GeneratedColumn$(dart.nullable(core.int)),
    OutputTypeID: query_builder.GeneratedColumn$(dart.nullable(core.int)),
    CustomerID: query_builder.GeneratedColumn$(dart.nullable(core.int)),
    CustomerName: query_builder.GeneratedColumn$(dart.nullable(core.String)),
    CustomerPhone: query_builder.GeneratedColumn$(dart.nullable(core.String)),
    IsRequiredVAT: query_builder.GeneratedColumn$(dart.nullable(core.bool)),
    TotalAmount: query_builder.GeneratedColumn$(dart.nullable(core.double)),
    Description: query_builder.GeneratedColumn$(dart.nullable(core.String)),
    CreatedDate: query_builder.GeneratedColumn$(dart.nullable(core.DateTime)),
    $columns: core.List$(query_builder.GeneratedColumn),
    actualTableName: core.String
  }));
  dart.setLibraryUri(database.$OutputSalesTable, I[7]);
  dart.setFieldSignature(database.$OutputSalesTable, () => ({
    __proto__: dart.getFields(database.$OutputSalesTable.__proto__),
    attachedDatabase: dart.finalFieldType(runtime_api.GeneratedDatabase),
    [_alias$]: dart.finalFieldType(dart.nullable(core.String)),
    [_OSIDMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$OutputSalesTable_OSID]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.int)))),
    [_OutputSaleIDMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$OutputSalesTable_OutputSaleID]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.String)))),
    [_OutputStoreIDMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$OutputSalesTable_OutputStoreID]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.int)))),
    [_OutputTypeIDMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$OutputSalesTable_OutputTypeID]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.int)))),
    [_CustomerIDMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$OutputSalesTable_CustomerID]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.int)))),
    [_CustomerNameMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$OutputSalesTable_CustomerName]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.String)))),
    [_CustomerPhoneMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$OutputSalesTable_CustomerPhone]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.String)))),
    [_IsRequiredVATMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$OutputSalesTable_IsRequiredVAT]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.bool)))),
    [_TotalAmountMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$OutputSalesTable_TotalAmount]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.double)))),
    [_DescriptionMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$OutputSalesTable_Description]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.String)))),
    [_CreatedDateMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$OutputSalesTable_CreatedDate]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.DateTime))))
  }));
  var name$3 = dart.privateName(database, "OutputSaleType.name");
  var type$ = dart.privateName(database, "OutputSaleType.type");
  database.OutputSaleType = class OutputSaleType extends data_class.DataClass {
    get name() {
      return this[name$3];
    }
    set name(value) {
      super.name = value;
    }
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
    static ['_#new#tearOff'](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let type = opts && 'type' in opts ? opts.type : null;
      return new database.OutputSaleType.new({name: name, type: type});
    }
    static fromData(data, db, opts) {
      let t8;
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      let effectivePrefix = (t8 = prefix, t8 == null ? "" : t8);
      return new database.OutputSaleType.new({name: dart.nullCheck((C[1] || CT.C1).mapFromDatabaseResponse(data[$_get](effectivePrefix + "name"))), type: dart.nullCheck((C[0] || CT.C0).mapFromDatabaseResponse(data[$_get](effectivePrefix + "type")))});
    }
    static ['_#fromData#tearOff'](data, db, opts) {
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      return database.OutputSaleType.fromData(data, db, {prefix: prefix});
    }
    toColumns(nullToAbsent) {
      let map = new (T.IdentityMapOfString$Expression()).new();
      map[$_set]("name", new (T.VariableOfString()).new(this.name));
      map[$_set]("type", new (T.VariableOfint()).new(this.type));
      return map;
    }
    toCompanion(nullToAbsent) {
      return new database.OutputSaleTypesCompanion.new({name: new (T.ValueOfString()).new(this.name), type: new (T.ValueOfint()).new(this.type)});
    }
    static fromJson(json, opts) {
      let serializer = opts && 'serializer' in opts ? opts.serializer : null;
      serializer == null ? serializer = moor.moorRuntimeOptions.defaultSerializer : null;
      return new database.OutputSaleType.new({name: serializer.fromJson(core.String, json[$_get]("name")), type: serializer.fromJson(core.int, json[$_get]("type"))});
    }
    static ['_#fromJson#tearOff'](json, opts) {
      let serializer = opts && 'serializer' in opts ? opts.serializer : null;
      return database.OutputSaleType.fromJson(json, {serializer: serializer});
    }
    toJson(opts) {
      let serializer = opts && 'serializer' in opts ? opts.serializer : null;
      serializer == null ? serializer = moor.moorRuntimeOptions.defaultSerializer : null;
      return new (T.IdentityMapOfString$dynamic()).from(["name", serializer.toJson(core.String, this.name), "type", serializer.toJson(core.int, this.type)]);
    }
    copyWith(opts) {
      let t8, t8$;
      let name = opts && 'name' in opts ? opts.name : null;
      let type = opts && 'type' in opts ? opts.type : null;
      return new database.OutputSaleType.new({name: (t8 = name, t8 == null ? this.name : t8), type: (t8$ = type, t8$ == null ? this.type : t8$)});
    }
    toString() {
      let t8;
      return (t8 = new core.StringBuffer.new("OutputSaleType("), (() => {
        t8.write("name: " + this.name + ", ");
        t8.write("type: " + dart.str(this.type));
        t8.write(")");
        return t8;
      })()).toString();
    }
    get hashCode() {
      return core.Object.hash(this.name, this.type);
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || database.OutputSaleType.is(other) && other.name === this.name && other.type === this.type;
    }
  };
  (database.OutputSaleType.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let type = opts && 'type' in opts ? opts.type : null;
    this[name$3] = name;
    this[type$] = type;
    database.OutputSaleType.__proto__.new.call(this);
    ;
  }).prototype = database.OutputSaleType.prototype;
  dart.addTypeTests(database.OutputSaleType);
  dart.addTypeCaches(database.OutputSaleType);
  database.OutputSaleType[dart.implements] = () => [data_class.Insertable$(database.OutputSaleType)];
  dart.setMethodSignature(database.OutputSaleType, () => ({
    __proto__: dart.getMethods(database.OutputSaleType.__proto__),
    toColumns: dart.fnType(core.Map$(core.String, query_builder.Expression), [core.bool]),
    toCompanion: dart.fnType(database.OutputSaleTypesCompanion, [core.bool]),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [], {serializer: dart.nullable(data_class.ValueSerializer)}, {}),
    copyWith: dart.fnType(database.OutputSaleType, [], {name: dart.nullable(core.String), type: dart.nullable(core.int)}, {})
  }));
  dart.setStaticMethodSignature(database.OutputSaleType, () => ['fromData', 'fromJson']);
  dart.setLibraryUri(database.OutputSaleType, I[7]);
  dart.setFieldSignature(database.OutputSaleType, () => ({
    __proto__: dart.getFields(database.OutputSaleType.__proto__),
    name: dart.finalFieldType(core.String),
    type: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(database.OutputSaleType, ['toString', '_equals']);
  dart.defineExtensionAccessors(database.OutputSaleType, ['hashCode']);
  var name$4 = dart.privateName(database, "OutputSaleTypesCompanion.name");
  var type$0 = dart.privateName(database, "OutputSaleTypesCompanion.type");
  database.OutputSaleTypesCompanion = class OutputSaleTypesCompanion extends data_class.UpdateCompanion$(database.OutputSaleType) {
    get name() {
      return this[name$4];
    }
    set name(value) {
      super.name = value;
    }
    get type() {
      return this[type$0];
    }
    set type(value) {
      super.type = value;
    }
    static ['_#new#tearOff'](opts) {
      let name = opts && 'name' in opts ? opts.name : C[6] || CT.C6;
      let type = opts && 'type' in opts ? opts.type : C[5] || CT.C5;
      return new database.OutputSaleTypesCompanion.new({name: name, type: type});
    }
    static ['_#insert#tearOff'](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let type = opts && 'type' in opts ? opts.type : null;
      return new database.OutputSaleTypesCompanion.insert({name: name, type: type});
    }
    static custom(opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let type = opts && 'type' in opts ? opts.type : null;
      return new (T.RawValuesInsertableOfOutputSaleType()).new((() => {
        let t8 = new (T.IdentityMapOfString$Expression()).new();
        if (name != null) t8[$_set]("name", name);
        if (type != null) t8[$_set]("type", type);
        return t8;
      })());
    }
    copyWith(opts) {
      let t9, t9$;
      let name = opts && 'name' in opts ? opts.name : null;
      let type = opts && 'type' in opts ? opts.type : null;
      return new database.OutputSaleTypesCompanion.new({name: (t9 = name, t9 == null ? this.name : t9), type: (t9$ = type, t9$ == null ? this.type : t9$)});
    }
    toColumns(nullToAbsent) {
      let map = new (T.IdentityMapOfString$Expression()).new();
      if (this.name.present) {
        map[$_set]("name", new (T.VariableOfString()).new(this.name.value));
      }
      if (this.type.present) {
        map[$_set]("type", new (T.VariableOfint()).new(this.type.value));
      }
      return map;
    }
    toString() {
      let t9;
      return (t9 = new core.StringBuffer.new("OutputSaleTypesCompanion("), (() => {
        t9.write("name: " + dart.str(this.name) + ", ");
        t9.write("type: " + dart.str(this.type));
        t9.write(")");
        return t9;
      })()).toString();
    }
  };
  (database.OutputSaleTypesCompanion.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : C[6] || CT.C6;
    let type = opts && 'type' in opts ? opts.type : C[5] || CT.C5;
    this[name$4] = name;
    this[type$0] = type;
    database.OutputSaleTypesCompanion.__proto__.new.call(this);
    ;
  }).prototype = database.OutputSaleTypesCompanion.prototype;
  (database.OutputSaleTypesCompanion.insert = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let type = opts && 'type' in opts ? opts.type : null;
    this[name$4] = new (T.ValueOfString()).new(name);
    this[type$0] = new (T.ValueOfint()).new(type);
    database.OutputSaleTypesCompanion.__proto__.new.call(this);
    ;
  }).prototype = database.OutputSaleTypesCompanion.prototype;
  dart.addTypeTests(database.OutputSaleTypesCompanion);
  dart.addTypeCaches(database.OutputSaleTypesCompanion);
  dart.setMethodSignature(database.OutputSaleTypesCompanion, () => ({
    __proto__: dart.getMethods(database.OutputSaleTypesCompanion.__proto__),
    copyWith: dart.fnType(database.OutputSaleTypesCompanion, [], {name: dart.nullable(data_class.Value$(core.String)), type: dart.nullable(data_class.Value$(core.int))}, {}),
    toColumns: dart.fnType(core.Map$(core.String, query_builder.Expression), [core.bool])
  }));
  dart.setStaticMethodSignature(database.OutputSaleTypesCompanion, () => ['custom']);
  dart.setLibraryUri(database.OutputSaleTypesCompanion, I[7]);
  dart.setFieldSignature(database.OutputSaleTypesCompanion, () => ({
    __proto__: dart.getFields(database.OutputSaleTypesCompanion.__proto__),
    name: dart.finalFieldType(data_class.Value$(core.String)),
    type: dart.finalFieldType(data_class.Value$(core.int))
  }));
  dart.defineExtensionMethods(database.OutputSaleTypesCompanion, ['toString']);
  var attachedDatabase$2 = dart.privateName(database, "$OutputSaleTypesTable.attachedDatabase");
  var __$OutputSaleTypesTable_name = dart.privateName(database, "_#$OutputSaleTypesTable#name");
  var _typeMeta = dart.privateName(database, "_typeMeta");
  var __$OutputSaleTypesTable_type = dart.privateName(database, "_#$OutputSaleTypesTable#type");
  const OutputSaleTypes_TableInfo$36 = class OutputSaleTypes_TableInfo extends output_sale_type.OutputSaleTypes {};
  (OutputSaleTypes_TableInfo$36.new = function() {
    query_builder.TableInfo$(database.$OutputSaleTypesTable, database.OutputSaleType)[dart.mixinNew].call(this);
    OutputSaleTypes_TableInfo$36.__proto__.new.call(this);
  }).prototype = OutputSaleTypes_TableInfo$36.prototype;
  database.$OutputSaleTypesTable = class $36OutputSaleTypesTable extends OutputSaleTypes_TableInfo$36 {
    get attachedDatabase() {
      return this[attachedDatabase$2];
    }
    set attachedDatabase(value) {
      super.attachedDatabase = value;
    }
    static ['_#new#tearOff'](attachedDatabase, _alias = null) {
      return new database.$OutputSaleTypesTable.new(attachedDatabase, _alias);
    }
    get name() {
      let t10, t9;
      t9 = this[__$OutputSaleTypesTable_name];
      return t9 == null ? (t10 = new (T.GeneratedColumnOfStringN()).new("name", this.aliasedName, false, {type: C[1] || CT.C1, requiredDuringInsert: true}), this[__$OutputSaleTypesTable_name] == null ? this[__$OutputSaleTypesTable_name] = t10 : dart.throw(new _internal.LateError.fieldADI("name"))) : t9;
    }
    get type() {
      let t10, t9;
      t9 = this[__$OutputSaleTypesTable_type];
      return t9 == null ? (t10 = new (T.GeneratedColumnOfintN()).new("type", this.aliasedName, false, {type: C[0] || CT.C0, requiredDuringInsert: true}), this[__$OutputSaleTypesTable_type] == null ? this[__$OutputSaleTypesTable_type] = t10 : dart.throw(new _internal.LateError.fieldADI("type"))) : t9;
    }
    get $columns() {
      return T.JSArrayOfGeneratedColumn().of([this.name, this.type]);
    }
    get aliasedName() {
      let t9;
      t9 = this[_alias$];
      return t9 == null ? "output_sale_types" : t9;
    }
    get actualTableName() {
      return "output_sale_types";
    }
    validateIntegrity(instance, opts) {
      T.InsertableOfOutputSaleType().as(instance);
      let isInserting = opts && 'isInserting' in opts ? opts.isInserting : false;
      let context = new data_verification.VerificationContext.new();
      let data = instance.toColumns(true);
      if (data[$containsKey]("name")) {
        context.handle(this[_nameMeta], this.name.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("name")), this[_nameMeta]));
      } else if (isInserting) {
        context.missing(this[_nameMeta]);
      }
      if (data[$containsKey]("type")) {
        context.handle(this[_typeMeta], this.type.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("type")), this[_typeMeta]));
      } else if (isInserting) {
        context.missing(this[_typeMeta]);
      }
      return context;
    }
    get $primaryKey() {
      return T.LinkedHashSetOfGeneratedColumn().new();
    }
    map(data, opts) {
      let tablePrefix = opts && 'tablePrefix' in opts ? opts.tablePrefix : null;
      return database.OutputSaleType.fromData(data, this.attachedDatabase, {prefix: tablePrefix != null ? dart.str(tablePrefix) + "." : null});
    }
    createAlias(alias) {
      return new database.$OutputSaleTypesTable.new(this.attachedDatabase, alias);
    }
  };
  (database.$OutputSaleTypesTable.new = function(attachedDatabase, _alias = null) {
    this[_nameMeta] = C[8] || CT.C8;
    this[__$OutputSaleTypesTable_name] = null;
    this[_typeMeta] = C[28] || CT.C28;
    this[__$OutputSaleTypesTable_type] = null;
    this[attachedDatabase$2] = attachedDatabase;
    this[_alias$] = _alias;
    database.$OutputSaleTypesTable.__proto__.new.call(this);
    ;
  }).prototype = database.$OutputSaleTypesTable.prototype;
  dart.addTypeTests(database.$OutputSaleTypesTable);
  dart.addTypeCaches(database.$OutputSaleTypesTable);
  dart.setMethodSignature(database.$OutputSaleTypesTable, () => ({
    __proto__: dart.getMethods(database.$OutputSaleTypesTable.__proto__),
    map: dart.fnType(database.OutputSaleType, [core.Map$(core.String, dart.dynamic)], {tablePrefix: dart.nullable(core.String)}, {}),
    createAlias: dart.fnType(database.$OutputSaleTypesTable, [core.String])
  }));
  dart.setGetterSignature(database.$OutputSaleTypesTable, () => ({
    __proto__: dart.getGetters(database.$OutputSaleTypesTable.__proto__),
    name: query_builder.GeneratedColumn$(dart.nullable(core.String)),
    type: query_builder.GeneratedColumn$(dart.nullable(core.int)),
    $columns: core.List$(query_builder.GeneratedColumn),
    actualTableName: core.String
  }));
  dart.setLibraryUri(database.$OutputSaleTypesTable, I[7]);
  dart.setFieldSignature(database.$OutputSaleTypesTable, () => ({
    __proto__: dart.getFields(database.$OutputSaleTypesTable.__proto__),
    attachedDatabase: dart.finalFieldType(runtime_api.GeneratedDatabase),
    [_alias$]: dart.finalFieldType(dart.nullable(core.String)),
    [_nameMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$OutputSaleTypesTable_name]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.String)))),
    [_typeMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$OutputSaleTypesTable_type]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.int))))
  }));
  var name$5 = dart.privateName(database, "OutputForm.name");
  var type$1 = dart.privateName(database, "OutputForm.type");
  database.OutputForm = class OutputForm extends data_class.DataClass {
    get name() {
      return this[name$5];
    }
    set name(value) {
      super.name = value;
    }
    get type() {
      return this[type$1];
    }
    set type(value) {
      super.type = value;
    }
    static ['_#new#tearOff'](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let type = opts && 'type' in opts ? opts.type : null;
      return new database.OutputForm.new({name: name, type: type});
    }
    static fromData(data, db, opts) {
      let t9;
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      let effectivePrefix = (t9 = prefix, t9 == null ? "" : t9);
      return new database.OutputForm.new({name: dart.nullCheck((C[1] || CT.C1).mapFromDatabaseResponse(data[$_get](effectivePrefix + "name"))), type: dart.nullCheck((C[0] || CT.C0).mapFromDatabaseResponse(data[$_get](effectivePrefix + "type")))});
    }
    static ['_#fromData#tearOff'](data, db, opts) {
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      return database.OutputForm.fromData(data, db, {prefix: prefix});
    }
    toColumns(nullToAbsent) {
      let map = new (T.IdentityMapOfString$Expression()).new();
      map[$_set]("name", new (T.VariableOfString()).new(this.name));
      map[$_set]("type", new (T.VariableOfint()).new(this.type));
      return map;
    }
    toCompanion(nullToAbsent) {
      return new database.OutputFormsCompanion.new({name: new (T.ValueOfString()).new(this.name), type: new (T.ValueOfint()).new(this.type)});
    }
    static fromJson(json, opts) {
      let serializer = opts && 'serializer' in opts ? opts.serializer : null;
      serializer == null ? serializer = moor.moorRuntimeOptions.defaultSerializer : null;
      return new database.OutputForm.new({name: serializer.fromJson(core.String, json[$_get]("name")), type: serializer.fromJson(core.int, json[$_get]("type"))});
    }
    static ['_#fromJson#tearOff'](json, opts) {
      let serializer = opts && 'serializer' in opts ? opts.serializer : null;
      return database.OutputForm.fromJson(json, {serializer: serializer});
    }
    toJson(opts) {
      let serializer = opts && 'serializer' in opts ? opts.serializer : null;
      serializer == null ? serializer = moor.moorRuntimeOptions.defaultSerializer : null;
      return new (T.IdentityMapOfString$dynamic()).from(["name", serializer.toJson(core.String, this.name), "type", serializer.toJson(core.int, this.type)]);
    }
    copyWith(opts) {
      let t9, t9$;
      let name = opts && 'name' in opts ? opts.name : null;
      let type = opts && 'type' in opts ? opts.type : null;
      return new database.OutputForm.new({name: (t9 = name, t9 == null ? this.name : t9), type: (t9$ = type, t9$ == null ? this.type : t9$)});
    }
    toString() {
      let t9;
      return (t9 = new core.StringBuffer.new("OutputForm("), (() => {
        t9.write("name: " + this.name + ", ");
        t9.write("type: " + dart.str(this.type));
        t9.write(")");
        return t9;
      })()).toString();
    }
    get hashCode() {
      return core.Object.hash(this.name, this.type);
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || database.OutputForm.is(other) && other.name === this.name && other.type === this.type;
    }
  };
  (database.OutputForm.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let type = opts && 'type' in opts ? opts.type : null;
    this[name$5] = name;
    this[type$1] = type;
    database.OutputForm.__proto__.new.call(this);
    ;
  }).prototype = database.OutputForm.prototype;
  dart.addTypeTests(database.OutputForm);
  dart.addTypeCaches(database.OutputForm);
  database.OutputForm[dart.implements] = () => [data_class.Insertable$(database.OutputForm)];
  dart.setMethodSignature(database.OutputForm, () => ({
    __proto__: dart.getMethods(database.OutputForm.__proto__),
    toColumns: dart.fnType(core.Map$(core.String, query_builder.Expression), [core.bool]),
    toCompanion: dart.fnType(database.OutputFormsCompanion, [core.bool]),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [], {serializer: dart.nullable(data_class.ValueSerializer)}, {}),
    copyWith: dart.fnType(database.OutputForm, [], {name: dart.nullable(core.String), type: dart.nullable(core.int)}, {})
  }));
  dart.setStaticMethodSignature(database.OutputForm, () => ['fromData', 'fromJson']);
  dart.setLibraryUri(database.OutputForm, I[7]);
  dart.setFieldSignature(database.OutputForm, () => ({
    __proto__: dart.getFields(database.OutputForm.__proto__),
    name: dart.finalFieldType(core.String),
    type: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(database.OutputForm, ['toString', '_equals']);
  dart.defineExtensionAccessors(database.OutputForm, ['hashCode']);
  var name$6 = dart.privateName(database, "OutputFormsCompanion.name");
  var type$2 = dart.privateName(database, "OutputFormsCompanion.type");
  database.OutputFormsCompanion = class OutputFormsCompanion extends data_class.UpdateCompanion$(database.OutputForm) {
    get name() {
      return this[name$6];
    }
    set name(value) {
      super.name = value;
    }
    get type() {
      return this[type$2];
    }
    set type(value) {
      super.type = value;
    }
    static ['_#new#tearOff'](opts) {
      let name = opts && 'name' in opts ? opts.name : C[6] || CT.C6;
      let type = opts && 'type' in opts ? opts.type : C[5] || CT.C5;
      return new database.OutputFormsCompanion.new({name: name, type: type});
    }
    static ['_#insert#tearOff'](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let type = opts && 'type' in opts ? opts.type : null;
      return new database.OutputFormsCompanion.insert({name: name, type: type});
    }
    static custom(opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let type = opts && 'type' in opts ? opts.type : null;
      return new (T.RawValuesInsertableOfOutputForm()).new((() => {
        let t9 = new (T.IdentityMapOfString$Expression()).new();
        if (name != null) t9[$_set]("name", name);
        if (type != null) t9[$_set]("type", type);
        return t9;
      })());
    }
    copyWith(opts) {
      let t10, t10$;
      let name = opts && 'name' in opts ? opts.name : null;
      let type = opts && 'type' in opts ? opts.type : null;
      return new database.OutputFormsCompanion.new({name: (t10 = name, t10 == null ? this.name : t10), type: (t10$ = type, t10$ == null ? this.type : t10$)});
    }
    toColumns(nullToAbsent) {
      let map = new (T.IdentityMapOfString$Expression()).new();
      if (this.name.present) {
        map[$_set]("name", new (T.VariableOfString()).new(this.name.value));
      }
      if (this.type.present) {
        map[$_set]("type", new (T.VariableOfint()).new(this.type.value));
      }
      return map;
    }
    toString() {
      let t10;
      return (t10 = new core.StringBuffer.new("OutputFormsCompanion("), (() => {
        t10.write("name: " + dart.str(this.name) + ", ");
        t10.write("type: " + dart.str(this.type));
        t10.write(")");
        return t10;
      })()).toString();
    }
  };
  (database.OutputFormsCompanion.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : C[6] || CT.C6;
    let type = opts && 'type' in opts ? opts.type : C[5] || CT.C5;
    this[name$6] = name;
    this[type$2] = type;
    database.OutputFormsCompanion.__proto__.new.call(this);
    ;
  }).prototype = database.OutputFormsCompanion.prototype;
  (database.OutputFormsCompanion.insert = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let type = opts && 'type' in opts ? opts.type : null;
    this[name$6] = new (T.ValueOfString()).new(name);
    this[type$2] = new (T.ValueOfint()).new(type);
    database.OutputFormsCompanion.__proto__.new.call(this);
    ;
  }).prototype = database.OutputFormsCompanion.prototype;
  dart.addTypeTests(database.OutputFormsCompanion);
  dart.addTypeCaches(database.OutputFormsCompanion);
  dart.setMethodSignature(database.OutputFormsCompanion, () => ({
    __proto__: dart.getMethods(database.OutputFormsCompanion.__proto__),
    copyWith: dart.fnType(database.OutputFormsCompanion, [], {name: dart.nullable(data_class.Value$(core.String)), type: dart.nullable(data_class.Value$(core.int))}, {}),
    toColumns: dart.fnType(core.Map$(core.String, query_builder.Expression), [core.bool])
  }));
  dart.setStaticMethodSignature(database.OutputFormsCompanion, () => ['custom']);
  dart.setLibraryUri(database.OutputFormsCompanion, I[7]);
  dart.setFieldSignature(database.OutputFormsCompanion, () => ({
    __proto__: dart.getFields(database.OutputFormsCompanion.__proto__),
    name: dart.finalFieldType(data_class.Value$(core.String)),
    type: dart.finalFieldType(data_class.Value$(core.int))
  }));
  dart.defineExtensionMethods(database.OutputFormsCompanion, ['toString']);
  var attachedDatabase$3 = dart.privateName(database, "$OutputFormsTable.attachedDatabase");
  var __$OutputFormsTable_name = dart.privateName(database, "_#$OutputFormsTable#name");
  var __$OutputFormsTable_type = dart.privateName(database, "_#$OutputFormsTable#type");
  const OutputForms_TableInfo$36 = class OutputForms_TableInfo extends output_form.OutputForms {};
  (OutputForms_TableInfo$36.new = function() {
    query_builder.TableInfo$(database.$OutputFormsTable, database.OutputForm)[dart.mixinNew].call(this);
    OutputForms_TableInfo$36.__proto__.new.call(this);
  }).prototype = OutputForms_TableInfo$36.prototype;
  database.$OutputFormsTable = class $36OutputFormsTable extends OutputForms_TableInfo$36 {
    get attachedDatabase() {
      return this[attachedDatabase$3];
    }
    set attachedDatabase(value) {
      super.attachedDatabase = value;
    }
    static ['_#new#tearOff'](attachedDatabase, _alias = null) {
      return new database.$OutputFormsTable.new(attachedDatabase, _alias);
    }
    get name() {
      let t11, t10;
      t10 = this[__$OutputFormsTable_name];
      return t10 == null ? (t11 = new (T.GeneratedColumnOfStringN()).new("name", this.aliasedName, false, {type: C[1] || CT.C1, requiredDuringInsert: true}), this[__$OutputFormsTable_name] == null ? this[__$OutputFormsTable_name] = t11 : dart.throw(new _internal.LateError.fieldADI("name"))) : t10;
    }
    get type() {
      let t11, t10;
      t10 = this[__$OutputFormsTable_type];
      return t10 == null ? (t11 = new (T.GeneratedColumnOfintN()).new("type", this.aliasedName, false, {type: C[0] || CT.C0, requiredDuringInsert: true}), this[__$OutputFormsTable_type] == null ? this[__$OutputFormsTable_type] = t11 : dart.throw(new _internal.LateError.fieldADI("type"))) : t10;
    }
    get $columns() {
      return T.JSArrayOfGeneratedColumn().of([this.name, this.type]);
    }
    get aliasedName() {
      let t10;
      t10 = this[_alias$];
      return t10 == null ? "output_forms" : t10;
    }
    get actualTableName() {
      return "output_forms";
    }
    validateIntegrity(instance, opts) {
      T.InsertableOfOutputForm().as(instance);
      let isInserting = opts && 'isInserting' in opts ? opts.isInserting : false;
      let context = new data_verification.VerificationContext.new();
      let data = instance.toColumns(true);
      if (data[$containsKey]("name")) {
        context.handle(this[_nameMeta], this.name.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("name")), this[_nameMeta]));
      } else if (isInserting) {
        context.missing(this[_nameMeta]);
      }
      if (data[$containsKey]("type")) {
        context.handle(this[_typeMeta], this.type.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("type")), this[_typeMeta]));
      } else if (isInserting) {
        context.missing(this[_typeMeta]);
      }
      return context;
    }
    get $primaryKey() {
      return T.LinkedHashSetOfGeneratedColumn().new();
    }
    map(data, opts) {
      let tablePrefix = opts && 'tablePrefix' in opts ? opts.tablePrefix : null;
      return database.OutputForm.fromData(data, this.attachedDatabase, {prefix: tablePrefix != null ? dart.str(tablePrefix) + "." : null});
    }
    createAlias(alias) {
      return new database.$OutputFormsTable.new(this.attachedDatabase, alias);
    }
  };
  (database.$OutputFormsTable.new = function(attachedDatabase, _alias = null) {
    this[_nameMeta] = C[8] || CT.C8;
    this[__$OutputFormsTable_name] = null;
    this[_typeMeta] = C[28] || CT.C28;
    this[__$OutputFormsTable_type] = null;
    this[attachedDatabase$3] = attachedDatabase;
    this[_alias$] = _alias;
    database.$OutputFormsTable.__proto__.new.call(this);
    ;
  }).prototype = database.$OutputFormsTable.prototype;
  dart.addTypeTests(database.$OutputFormsTable);
  dart.addTypeCaches(database.$OutputFormsTable);
  dart.setMethodSignature(database.$OutputFormsTable, () => ({
    __proto__: dart.getMethods(database.$OutputFormsTable.__proto__),
    map: dart.fnType(database.OutputForm, [core.Map$(core.String, dart.dynamic)], {tablePrefix: dart.nullable(core.String)}, {}),
    createAlias: dart.fnType(database.$OutputFormsTable, [core.String])
  }));
  dart.setGetterSignature(database.$OutputFormsTable, () => ({
    __proto__: dart.getGetters(database.$OutputFormsTable.__proto__),
    name: query_builder.GeneratedColumn$(dart.nullable(core.String)),
    type: query_builder.GeneratedColumn$(dart.nullable(core.int)),
    $columns: core.List$(query_builder.GeneratedColumn),
    actualTableName: core.String
  }));
  dart.setLibraryUri(database.$OutputFormsTable, I[7]);
  dart.setFieldSignature(database.$OutputFormsTable, () => ({
    __proto__: dart.getFields(database.$OutputFormsTable.__proto__),
    attachedDatabase: dart.finalFieldType(runtime_api.GeneratedDatabase),
    [_alias$]: dart.finalFieldType(dart.nullable(core.String)),
    [_nameMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$OutputFormsTable_name]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.String)))),
    [_typeMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$OutputFormsTable_type]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.int))))
  }));
  var name$7 = dart.privateName(database, "OutputType.name");
  var type$3 = dart.privateName(database, "OutputType.type");
  database.OutputType = class OutputType extends data_class.DataClass {
    get name() {
      return this[name$7];
    }
    set name(value) {
      super.name = value;
    }
    get type() {
      return this[type$3];
    }
    set type(value) {
      super.type = value;
    }
    static ['_#new#tearOff'](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let type = opts && 'type' in opts ? opts.type : null;
      return new database.OutputType.new({name: name, type: type});
    }
    static fromData(data, db, opts) {
      let t10;
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      let effectivePrefix = (t10 = prefix, t10 == null ? "" : t10);
      return new database.OutputType.new({name: dart.nullCheck((C[1] || CT.C1).mapFromDatabaseResponse(data[$_get](effectivePrefix + "name"))), type: dart.nullCheck((C[0] || CT.C0).mapFromDatabaseResponse(data[$_get](effectivePrefix + "type")))});
    }
    static ['_#fromData#tearOff'](data, db, opts) {
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      return database.OutputType.fromData(data, db, {prefix: prefix});
    }
    toColumns(nullToAbsent) {
      let map = new (T.IdentityMapOfString$Expression()).new();
      map[$_set]("name", new (T.VariableOfString()).new(this.name));
      map[$_set]("type", new (T.VariableOfint()).new(this.type));
      return map;
    }
    toCompanion(nullToAbsent) {
      return new database.OutputTypesCompanion.new({name: new (T.ValueOfString()).new(this.name), type: new (T.ValueOfint()).new(this.type)});
    }
    static fromJson(json, opts) {
      let serializer = opts && 'serializer' in opts ? opts.serializer : null;
      serializer == null ? serializer = moor.moorRuntimeOptions.defaultSerializer : null;
      return new database.OutputType.new({name: serializer.fromJson(core.String, json[$_get]("name")), type: serializer.fromJson(core.int, json[$_get]("type"))});
    }
    static ['_#fromJson#tearOff'](json, opts) {
      let serializer = opts && 'serializer' in opts ? opts.serializer : null;
      return database.OutputType.fromJson(json, {serializer: serializer});
    }
    toJson(opts) {
      let serializer = opts && 'serializer' in opts ? opts.serializer : null;
      serializer == null ? serializer = moor.moorRuntimeOptions.defaultSerializer : null;
      return new (T.IdentityMapOfString$dynamic()).from(["name", serializer.toJson(core.String, this.name), "type", serializer.toJson(core.int, this.type)]);
    }
    copyWith(opts) {
      let t10, t10$;
      let name = opts && 'name' in opts ? opts.name : null;
      let type = opts && 'type' in opts ? opts.type : null;
      return new database.OutputType.new({name: (t10 = name, t10 == null ? this.name : t10), type: (t10$ = type, t10$ == null ? this.type : t10$)});
    }
    toString() {
      let t10;
      return (t10 = new core.StringBuffer.new("OutputType("), (() => {
        t10.write("name: " + this.name + ", ");
        t10.write("type: " + dart.str(this.type));
        t10.write(")");
        return t10;
      })()).toString();
    }
    get hashCode() {
      return core.Object.hash(this.name, this.type);
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || database.OutputType.is(other) && other.name === this.name && other.type === this.type;
    }
  };
  (database.OutputType.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let type = opts && 'type' in opts ? opts.type : null;
    this[name$7] = name;
    this[type$3] = type;
    database.OutputType.__proto__.new.call(this);
    ;
  }).prototype = database.OutputType.prototype;
  dart.addTypeTests(database.OutputType);
  dart.addTypeCaches(database.OutputType);
  database.OutputType[dart.implements] = () => [data_class.Insertable$(database.OutputType)];
  dart.setMethodSignature(database.OutputType, () => ({
    __proto__: dart.getMethods(database.OutputType.__proto__),
    toColumns: dart.fnType(core.Map$(core.String, query_builder.Expression), [core.bool]),
    toCompanion: dart.fnType(database.OutputTypesCompanion, [core.bool]),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [], {serializer: dart.nullable(data_class.ValueSerializer)}, {}),
    copyWith: dart.fnType(database.OutputType, [], {name: dart.nullable(core.String), type: dart.nullable(core.int)}, {})
  }));
  dart.setStaticMethodSignature(database.OutputType, () => ['fromData', 'fromJson']);
  dart.setLibraryUri(database.OutputType, I[7]);
  dart.setFieldSignature(database.OutputType, () => ({
    __proto__: dart.getFields(database.OutputType.__proto__),
    name: dart.finalFieldType(core.String),
    type: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(database.OutputType, ['toString', '_equals']);
  dart.defineExtensionAccessors(database.OutputType, ['hashCode']);
  var name$8 = dart.privateName(database, "OutputTypesCompanion.name");
  var type$4 = dart.privateName(database, "OutputTypesCompanion.type");
  database.OutputTypesCompanion = class OutputTypesCompanion extends data_class.UpdateCompanion$(database.OutputType) {
    get name() {
      return this[name$8];
    }
    set name(value) {
      super.name = value;
    }
    get type() {
      return this[type$4];
    }
    set type(value) {
      super.type = value;
    }
    static ['_#new#tearOff'](opts) {
      let name = opts && 'name' in opts ? opts.name : C[6] || CT.C6;
      let type = opts && 'type' in opts ? opts.type : C[5] || CT.C5;
      return new database.OutputTypesCompanion.new({name: name, type: type});
    }
    static ['_#insert#tearOff'](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let type = opts && 'type' in opts ? opts.type : null;
      return new database.OutputTypesCompanion.insert({name: name, type: type});
    }
    static custom(opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let type = opts && 'type' in opts ? opts.type : null;
      return new (T.RawValuesInsertableOfOutputType()).new((() => {
        let t10 = new (T.IdentityMapOfString$Expression()).new();
        if (name != null) t10[$_set]("name", name);
        if (type != null) t10[$_set]("type", type);
        return t10;
      })());
    }
    copyWith(opts) {
      let t11, t11$;
      let name = opts && 'name' in opts ? opts.name : null;
      let type = opts && 'type' in opts ? opts.type : null;
      return new database.OutputTypesCompanion.new({name: (t11 = name, t11 == null ? this.name : t11), type: (t11$ = type, t11$ == null ? this.type : t11$)});
    }
    toColumns(nullToAbsent) {
      let map = new (T.IdentityMapOfString$Expression()).new();
      if (this.name.present) {
        map[$_set]("name", new (T.VariableOfString()).new(this.name.value));
      }
      if (this.type.present) {
        map[$_set]("type", new (T.VariableOfint()).new(this.type.value));
      }
      return map;
    }
    toString() {
      let t11;
      return (t11 = new core.StringBuffer.new("OutputTypesCompanion("), (() => {
        t11.write("name: " + dart.str(this.name) + ", ");
        t11.write("type: " + dart.str(this.type));
        t11.write(")");
        return t11;
      })()).toString();
    }
  };
  (database.OutputTypesCompanion.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : C[6] || CT.C6;
    let type = opts && 'type' in opts ? opts.type : C[5] || CT.C5;
    this[name$8] = name;
    this[type$4] = type;
    database.OutputTypesCompanion.__proto__.new.call(this);
    ;
  }).prototype = database.OutputTypesCompanion.prototype;
  (database.OutputTypesCompanion.insert = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let type = opts && 'type' in opts ? opts.type : null;
    this[name$8] = new (T.ValueOfString()).new(name);
    this[type$4] = new (T.ValueOfint()).new(type);
    database.OutputTypesCompanion.__proto__.new.call(this);
    ;
  }).prototype = database.OutputTypesCompanion.prototype;
  dart.addTypeTests(database.OutputTypesCompanion);
  dart.addTypeCaches(database.OutputTypesCompanion);
  dart.setMethodSignature(database.OutputTypesCompanion, () => ({
    __proto__: dart.getMethods(database.OutputTypesCompanion.__proto__),
    copyWith: dart.fnType(database.OutputTypesCompanion, [], {name: dart.nullable(data_class.Value$(core.String)), type: dart.nullable(data_class.Value$(core.int))}, {}),
    toColumns: dart.fnType(core.Map$(core.String, query_builder.Expression), [core.bool])
  }));
  dart.setStaticMethodSignature(database.OutputTypesCompanion, () => ['custom']);
  dart.setLibraryUri(database.OutputTypesCompanion, I[7]);
  dart.setFieldSignature(database.OutputTypesCompanion, () => ({
    __proto__: dart.getFields(database.OutputTypesCompanion.__proto__),
    name: dart.finalFieldType(data_class.Value$(core.String)),
    type: dart.finalFieldType(data_class.Value$(core.int))
  }));
  dart.defineExtensionMethods(database.OutputTypesCompanion, ['toString']);
  var attachedDatabase$4 = dart.privateName(database, "$OutputTypesTable.attachedDatabase");
  var __$OutputTypesTable_name = dart.privateName(database, "_#$OutputTypesTable#name");
  var __$OutputTypesTable_type = dart.privateName(database, "_#$OutputTypesTable#type");
  const OutputTypes_TableInfo$36 = class OutputTypes_TableInfo extends output_type.OutputTypes {};
  (OutputTypes_TableInfo$36.new = function() {
    query_builder.TableInfo$(database.$OutputTypesTable, database.OutputType)[dart.mixinNew].call(this);
    OutputTypes_TableInfo$36.__proto__.new.call(this);
  }).prototype = OutputTypes_TableInfo$36.prototype;
  database.$OutputTypesTable = class $36OutputTypesTable extends OutputTypes_TableInfo$36 {
    get attachedDatabase() {
      return this[attachedDatabase$4];
    }
    set attachedDatabase(value) {
      super.attachedDatabase = value;
    }
    static ['_#new#tearOff'](attachedDatabase, _alias = null) {
      return new database.$OutputTypesTable.new(attachedDatabase, _alias);
    }
    get name() {
      let t12, t11;
      t11 = this[__$OutputTypesTable_name];
      return t11 == null ? (t12 = new (T.GeneratedColumnOfStringN()).new("name", this.aliasedName, false, {type: C[1] || CT.C1, requiredDuringInsert: true}), this[__$OutputTypesTable_name] == null ? this[__$OutputTypesTable_name] = t12 : dart.throw(new _internal.LateError.fieldADI("name"))) : t11;
    }
    get type() {
      let t12, t11;
      t11 = this[__$OutputTypesTable_type];
      return t11 == null ? (t12 = new (T.GeneratedColumnOfintN()).new("type", this.aliasedName, false, {type: C[0] || CT.C0, requiredDuringInsert: true}), this[__$OutputTypesTable_type] == null ? this[__$OutputTypesTable_type] = t12 : dart.throw(new _internal.LateError.fieldADI("type"))) : t11;
    }
    get $columns() {
      return T.JSArrayOfGeneratedColumn().of([this.name, this.type]);
    }
    get aliasedName() {
      let t11;
      t11 = this[_alias$];
      return t11 == null ? "output_types" : t11;
    }
    get actualTableName() {
      return "output_types";
    }
    validateIntegrity(instance, opts) {
      T.InsertableOfOutputType().as(instance);
      let isInserting = opts && 'isInserting' in opts ? opts.isInserting : false;
      let context = new data_verification.VerificationContext.new();
      let data = instance.toColumns(true);
      if (data[$containsKey]("name")) {
        context.handle(this[_nameMeta], this.name.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("name")), this[_nameMeta]));
      } else if (isInserting) {
        context.missing(this[_nameMeta]);
      }
      if (data[$containsKey]("type")) {
        context.handle(this[_typeMeta], this.type.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("type")), this[_typeMeta]));
      } else if (isInserting) {
        context.missing(this[_typeMeta]);
      }
      return context;
    }
    get $primaryKey() {
      return T.LinkedHashSetOfGeneratedColumn().new();
    }
    map(data, opts) {
      let tablePrefix = opts && 'tablePrefix' in opts ? opts.tablePrefix : null;
      return database.OutputType.fromData(data, this.attachedDatabase, {prefix: tablePrefix != null ? dart.str(tablePrefix) + "." : null});
    }
    createAlias(alias) {
      return new database.$OutputTypesTable.new(this.attachedDatabase, alias);
    }
  };
  (database.$OutputTypesTable.new = function(attachedDatabase, _alias = null) {
    this[_nameMeta] = C[8] || CT.C8;
    this[__$OutputTypesTable_name] = null;
    this[_typeMeta] = C[28] || CT.C28;
    this[__$OutputTypesTable_type] = null;
    this[attachedDatabase$4] = attachedDatabase;
    this[_alias$] = _alias;
    database.$OutputTypesTable.__proto__.new.call(this);
    ;
  }).prototype = database.$OutputTypesTable.prototype;
  dart.addTypeTests(database.$OutputTypesTable);
  dart.addTypeCaches(database.$OutputTypesTable);
  dart.setMethodSignature(database.$OutputTypesTable, () => ({
    __proto__: dart.getMethods(database.$OutputTypesTable.__proto__),
    map: dart.fnType(database.OutputType, [core.Map$(core.String, dart.dynamic)], {tablePrefix: dart.nullable(core.String)}, {}),
    createAlias: dart.fnType(database.$OutputTypesTable, [core.String])
  }));
  dart.setGetterSignature(database.$OutputTypesTable, () => ({
    __proto__: dart.getGetters(database.$OutputTypesTable.__proto__),
    name: query_builder.GeneratedColumn$(dart.nullable(core.String)),
    type: query_builder.GeneratedColumn$(dart.nullable(core.int)),
    $columns: core.List$(query_builder.GeneratedColumn),
    actualTableName: core.String
  }));
  dart.setLibraryUri(database.$OutputTypesTable, I[7]);
  dart.setFieldSignature(database.$OutputTypesTable, () => ({
    __proto__: dart.getFields(database.$OutputTypesTable.__proto__),
    attachedDatabase: dart.finalFieldType(runtime_api.GeneratedDatabase),
    [_alias$]: dart.finalFieldType(dart.nullable(core.String)),
    [_nameMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$OutputTypesTable_name]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.String)))),
    [_typeMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$OutputTypesTable_type]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.int))))
  }));
  var id$3 = dart.privateName(database, "LuckyAnimationBackground.id");
  var type$5 = dart.privateName(database, "LuckyAnimationBackground.type");
  var backgroundFirst$ = dart.privateName(database, "LuckyAnimationBackground.backgroundFirst");
  var backgroundSecond$ = dart.privateName(database, "LuckyAnimationBackground.backgroundSecond");
  database.LuckyAnimationBackground = class LuckyAnimationBackground extends data_class.DataClass {
    get id() {
      return this[id$3];
    }
    set id(value) {
      super.id = value;
    }
    get type() {
      return this[type$5];
    }
    set type(value) {
      super.type = value;
    }
    get backgroundFirst() {
      return this[backgroundFirst$];
    }
    set backgroundFirst(value) {
      super.backgroundFirst = value;
    }
    get backgroundSecond() {
      return this[backgroundSecond$];
    }
    set backgroundSecond(value) {
      super.backgroundSecond = value;
    }
    static ['_#new#tearOff'](opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      let type = opts && 'type' in opts ? opts.type : null;
      let backgroundFirst = opts && 'backgroundFirst' in opts ? opts.backgroundFirst : null;
      let backgroundSecond = opts && 'backgroundSecond' in opts ? opts.backgroundSecond : null;
      return new database.LuckyAnimationBackground.new({id: id, type: type, backgroundFirst: backgroundFirst, backgroundSecond: backgroundSecond});
    }
    static fromData(data, db, opts) {
      let t11;
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      let effectivePrefix = (t11 = prefix, t11 == null ? "" : t11);
      return new database.LuckyAnimationBackground.new({id: dart.nullCheck((C[0] || CT.C0).mapFromDatabaseResponse(data[$_get](effectivePrefix + "id"))), type: dart.nullCheck((C[1] || CT.C1).mapFromDatabaseResponse(data[$_get](effectivePrefix + "type"))), backgroundFirst: dart.nullCheck((C[1] || CT.C1).mapFromDatabaseResponse(data[$_get](effectivePrefix + "background_first"))), backgroundSecond: dart.nullCheck((C[1] || CT.C1).mapFromDatabaseResponse(data[$_get](effectivePrefix + "background_second")))});
    }
    static ['_#fromData#tearOff'](data, db, opts) {
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      return database.LuckyAnimationBackground.fromData(data, db, {prefix: prefix});
    }
    toColumns(nullToAbsent) {
      let map = new (T.IdentityMapOfString$Expression()).new();
      map[$_set]("id", new (T.VariableOfint()).new(this.id));
      map[$_set]("type", new (T.VariableOfString()).new(this.type));
      map[$_set]("background_first", new (T.VariableOfString()).new(this.backgroundFirst));
      map[$_set]("background_second", new (T.VariableOfString()).new(this.backgroundSecond));
      return map;
    }
    toCompanion(nullToAbsent) {
      return new database.LuckyAnimationBackgroundsCompanion.new({id: new (T.ValueOfint()).new(this.id), type: new (T.ValueOfString()).new(this.type), backgroundFirst: new (T.ValueOfString()).new(this.backgroundFirst), backgroundSecond: new (T.ValueOfString()).new(this.backgroundSecond)});
    }
    static fromJson(json, opts) {
      let serializer = opts && 'serializer' in opts ? opts.serializer : null;
      serializer == null ? serializer = moor.moorRuntimeOptions.defaultSerializer : null;
      return new database.LuckyAnimationBackground.new({id: serializer.fromJson(core.int, json[$_get]("id")), type: serializer.fromJson(core.String, json[$_get]("type")), backgroundFirst: serializer.fromJson(core.String, json[$_get]("backgroundFirst")), backgroundSecond: serializer.fromJson(core.String, json[$_get]("backgroundSecond"))});
    }
    static ['_#fromJson#tearOff'](json, opts) {
      let serializer = opts && 'serializer' in opts ? opts.serializer : null;
      return database.LuckyAnimationBackground.fromJson(json, {serializer: serializer});
    }
    toJson(opts) {
      let serializer = opts && 'serializer' in opts ? opts.serializer : null;
      serializer == null ? serializer = moor.moorRuntimeOptions.defaultSerializer : null;
      return new (T.IdentityMapOfString$dynamic()).from(["id", serializer.toJson(core.int, this.id), "type", serializer.toJson(core.String, this.type), "backgroundFirst", serializer.toJson(core.String, this.backgroundFirst), "backgroundSecond", serializer.toJson(core.String, this.backgroundSecond)]);
    }
    copyWith(opts) {
      let t11, t11$, t11$0, t11$1;
      let id = opts && 'id' in opts ? opts.id : null;
      let type = opts && 'type' in opts ? opts.type : null;
      let backgroundFirst = opts && 'backgroundFirst' in opts ? opts.backgroundFirst : null;
      let backgroundSecond = opts && 'backgroundSecond' in opts ? opts.backgroundSecond : null;
      return new database.LuckyAnimationBackground.new({id: (t11 = id, t11 == null ? this.id : t11), type: (t11$ = type, t11$ == null ? this.type : t11$), backgroundFirst: (t11$0 = backgroundFirst, t11$0 == null ? this.backgroundFirst : t11$0), backgroundSecond: (t11$1 = backgroundSecond, t11$1 == null ? this.backgroundSecond : t11$1)});
    }
    toString() {
      let t11;
      return (t11 = new core.StringBuffer.new("LuckyAnimationBackground("), (() => {
        t11.write("id: " + dart.str(this.id) + ", ");
        t11.write("type: " + this.type + ", ");
        t11.write("backgroundFirst: " + this.backgroundFirst + ", ");
        t11.write("backgroundSecond: " + this.backgroundSecond);
        t11.write(")");
        return t11;
      })()).toString();
    }
    get hashCode() {
      return core.Object.hash(this.id, this.type, this.backgroundFirst, this.backgroundSecond);
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || database.LuckyAnimationBackground.is(other) && other.id === this.id && other.type === this.type && other.backgroundFirst === this.backgroundFirst && other.backgroundSecond === this.backgroundSecond;
    }
  };
  (database.LuckyAnimationBackground.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : null;
    let type = opts && 'type' in opts ? opts.type : null;
    let backgroundFirst = opts && 'backgroundFirst' in opts ? opts.backgroundFirst : null;
    let backgroundSecond = opts && 'backgroundSecond' in opts ? opts.backgroundSecond : null;
    this[id$3] = id;
    this[type$5] = type;
    this[backgroundFirst$] = backgroundFirst;
    this[backgroundSecond$] = backgroundSecond;
    database.LuckyAnimationBackground.__proto__.new.call(this);
    ;
  }).prototype = database.LuckyAnimationBackground.prototype;
  dart.addTypeTests(database.LuckyAnimationBackground);
  dart.addTypeCaches(database.LuckyAnimationBackground);
  database.LuckyAnimationBackground[dart.implements] = () => [data_class.Insertable$(database.LuckyAnimationBackground)];
  dart.setMethodSignature(database.LuckyAnimationBackground, () => ({
    __proto__: dart.getMethods(database.LuckyAnimationBackground.__proto__),
    toColumns: dart.fnType(core.Map$(core.String, query_builder.Expression), [core.bool]),
    toCompanion: dart.fnType(database.LuckyAnimationBackgroundsCompanion, [core.bool]),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [], {serializer: dart.nullable(data_class.ValueSerializer)}, {}),
    copyWith: dart.fnType(database.LuckyAnimationBackground, [], {backgroundFirst: dart.nullable(core.String), backgroundSecond: dart.nullable(core.String), id: dart.nullable(core.int), type: dart.nullable(core.String)}, {})
  }));
  dart.setStaticMethodSignature(database.LuckyAnimationBackground, () => ['fromData', 'fromJson']);
  dart.setLibraryUri(database.LuckyAnimationBackground, I[7]);
  dart.setFieldSignature(database.LuckyAnimationBackground, () => ({
    __proto__: dart.getFields(database.LuckyAnimationBackground.__proto__),
    id: dart.finalFieldType(core.int),
    type: dart.finalFieldType(core.String),
    backgroundFirst: dart.finalFieldType(core.String),
    backgroundSecond: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(database.LuckyAnimationBackground, ['toString', '_equals']);
  dart.defineExtensionAccessors(database.LuckyAnimationBackground, ['hashCode']);
  var id$4 = dart.privateName(database, "LuckyAnimationBackgroundsCompanion.id");
  var type$6 = dart.privateName(database, "LuckyAnimationBackgroundsCompanion.type");
  var backgroundFirst$0 = dart.privateName(database, "LuckyAnimationBackgroundsCompanion.backgroundFirst");
  var backgroundSecond$0 = dart.privateName(database, "LuckyAnimationBackgroundsCompanion.backgroundSecond");
  database.LuckyAnimationBackgroundsCompanion = class LuckyAnimationBackgroundsCompanion extends data_class.UpdateCompanion$(database.LuckyAnimationBackground) {
    get id() {
      return this[id$4];
    }
    set id(value) {
      super.id = value;
    }
    get type() {
      return this[type$6];
    }
    set type(value) {
      super.type = value;
    }
    get backgroundFirst() {
      return this[backgroundFirst$0];
    }
    set backgroundFirst(value) {
      super.backgroundFirst = value;
    }
    get backgroundSecond() {
      return this[backgroundSecond$0];
    }
    set backgroundSecond(value) {
      super.backgroundSecond = value;
    }
    static ['_#new#tearOff'](opts) {
      let id = opts && 'id' in opts ? opts.id : C[5] || CT.C5;
      let type = opts && 'type' in opts ? opts.type : C[6] || CT.C6;
      let backgroundFirst = opts && 'backgroundFirst' in opts ? opts.backgroundFirst : C[6] || CT.C6;
      let backgroundSecond = opts && 'backgroundSecond' in opts ? opts.backgroundSecond : C[6] || CT.C6;
      return new database.LuckyAnimationBackgroundsCompanion.new({id: id, type: type, backgroundFirst: backgroundFirst, backgroundSecond: backgroundSecond});
    }
    static ['_#insert#tearOff'](opts) {
      let id = opts && 'id' in opts ? opts.id : C[5] || CT.C5;
      let type = opts && 'type' in opts ? opts.type : null;
      let backgroundFirst = opts && 'backgroundFirst' in opts ? opts.backgroundFirst : null;
      let backgroundSecond = opts && 'backgroundSecond' in opts ? opts.backgroundSecond : null;
      return new database.LuckyAnimationBackgroundsCompanion.insert({id: id, type: type, backgroundFirst: backgroundFirst, backgroundSecond: backgroundSecond});
    }
    static custom(opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      let type = opts && 'type' in opts ? opts.type : null;
      let backgroundFirst = opts && 'backgroundFirst' in opts ? opts.backgroundFirst : null;
      let backgroundSecond = opts && 'backgroundSecond' in opts ? opts.backgroundSecond : null;
      return new (T.RawValuesInsertableOfLuckyAnimationBackground()).new((() => {
        let t11 = new (T.IdentityMapOfString$Expression()).new();
        if (id != null) t11[$_set]("id", id);
        if (type != null) t11[$_set]("type", type);
        if (backgroundFirst != null) t11[$_set]("background_first", backgroundFirst);
        if (backgroundSecond != null) t11[$_set]("background_second", backgroundSecond);
        return t11;
      })());
    }
    copyWith(opts) {
      let t12, t12$, t12$0, t12$1;
      let id = opts && 'id' in opts ? opts.id : null;
      let type = opts && 'type' in opts ? opts.type : null;
      let backgroundFirst = opts && 'backgroundFirst' in opts ? opts.backgroundFirst : null;
      let backgroundSecond = opts && 'backgroundSecond' in opts ? opts.backgroundSecond : null;
      return new database.LuckyAnimationBackgroundsCompanion.new({id: (t12 = id, t12 == null ? this.id : t12), type: (t12$ = type, t12$ == null ? this.type : t12$), backgroundFirst: (t12$0 = backgroundFirst, t12$0 == null ? this.backgroundFirst : t12$0), backgroundSecond: (t12$1 = backgroundSecond, t12$1 == null ? this.backgroundSecond : t12$1)});
    }
    toColumns(nullToAbsent) {
      let map = new (T.IdentityMapOfString$Expression()).new();
      if (this.id.present) {
        map[$_set]("id", new (T.VariableOfint()).new(this.id.value));
      }
      if (this.type.present) {
        map[$_set]("type", new (T.VariableOfString()).new(this.type.value));
      }
      if (this.backgroundFirst.present) {
        map[$_set]("background_first", new (T.VariableOfString()).new(this.backgroundFirst.value));
      }
      if (this.backgroundSecond.present) {
        map[$_set]("background_second", new (T.VariableOfString()).new(this.backgroundSecond.value));
      }
      return map;
    }
    toString() {
      let t12;
      return (t12 = new core.StringBuffer.new("LuckyAnimationBackgroundsCompanion("), (() => {
        t12.write("id: " + dart.str(this.id) + ", ");
        t12.write("type: " + dart.str(this.type) + ", ");
        t12.write("backgroundFirst: " + dart.str(this.backgroundFirst) + ", ");
        t12.write("backgroundSecond: " + dart.str(this.backgroundSecond));
        t12.write(")");
        return t12;
      })()).toString();
    }
  };
  (database.LuckyAnimationBackgroundsCompanion.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : C[5] || CT.C5;
    let type = opts && 'type' in opts ? opts.type : C[6] || CT.C6;
    let backgroundFirst = opts && 'backgroundFirst' in opts ? opts.backgroundFirst : C[6] || CT.C6;
    let backgroundSecond = opts && 'backgroundSecond' in opts ? opts.backgroundSecond : C[6] || CT.C6;
    this[id$4] = id;
    this[type$6] = type;
    this[backgroundFirst$0] = backgroundFirst;
    this[backgroundSecond$0] = backgroundSecond;
    database.LuckyAnimationBackgroundsCompanion.__proto__.new.call(this);
    ;
  }).prototype = database.LuckyAnimationBackgroundsCompanion.prototype;
  (database.LuckyAnimationBackgroundsCompanion.insert = function(opts) {
    let id = opts && 'id' in opts ? opts.id : C[5] || CT.C5;
    let type = opts && 'type' in opts ? opts.type : null;
    let backgroundFirst = opts && 'backgroundFirst' in opts ? opts.backgroundFirst : null;
    let backgroundSecond = opts && 'backgroundSecond' in opts ? opts.backgroundSecond : null;
    this[id$4] = id;
    this[type$6] = new (T.ValueOfString()).new(type);
    this[backgroundFirst$0] = new (T.ValueOfString()).new(backgroundFirst);
    this[backgroundSecond$0] = new (T.ValueOfString()).new(backgroundSecond);
    database.LuckyAnimationBackgroundsCompanion.__proto__.new.call(this);
    ;
  }).prototype = database.LuckyAnimationBackgroundsCompanion.prototype;
  dart.addTypeTests(database.LuckyAnimationBackgroundsCompanion);
  dart.addTypeCaches(database.LuckyAnimationBackgroundsCompanion);
  dart.setMethodSignature(database.LuckyAnimationBackgroundsCompanion, () => ({
    __proto__: dart.getMethods(database.LuckyAnimationBackgroundsCompanion.__proto__),
    copyWith: dart.fnType(database.LuckyAnimationBackgroundsCompanion, [], {backgroundFirst: dart.nullable(data_class.Value$(core.String)), backgroundSecond: dart.nullable(data_class.Value$(core.String)), id: dart.nullable(data_class.Value$(core.int)), type: dart.nullable(data_class.Value$(core.String))}, {}),
    toColumns: dart.fnType(core.Map$(core.String, query_builder.Expression), [core.bool])
  }));
  dart.setStaticMethodSignature(database.LuckyAnimationBackgroundsCompanion, () => ['custom']);
  dart.setLibraryUri(database.LuckyAnimationBackgroundsCompanion, I[7]);
  dart.setFieldSignature(database.LuckyAnimationBackgroundsCompanion, () => ({
    __proto__: dart.getFields(database.LuckyAnimationBackgroundsCompanion.__proto__),
    id: dart.finalFieldType(data_class.Value$(core.int)),
    type: dart.finalFieldType(data_class.Value$(core.String)),
    backgroundFirst: dart.finalFieldType(data_class.Value$(core.String)),
    backgroundSecond: dart.finalFieldType(data_class.Value$(core.String))
  }));
  dart.defineExtensionMethods(database.LuckyAnimationBackgroundsCompanion, ['toString']);
  var attachedDatabase$5 = dart.privateName(database, "$LuckyAnimationBackgroundsTable.attachedDatabase");
  var __$LuckyAnimationBackgroundsTable_id = dart.privateName(database, "_#$LuckyAnimationBackgroundsTable#id");
  var __$LuckyAnimationBackgroundsTable_type = dart.privateName(database, "_#$LuckyAnimationBackgroundsTable#type");
  var _backgroundFirstMeta = dart.privateName(database, "_backgroundFirstMeta");
  var __$LuckyAnimationBackgroundsTable_backgroundFirst = dart.privateName(database, "_#$LuckyAnimationBackgroundsTable#backgroundFirst");
  var _backgroundSecondMeta = dart.privateName(database, "_backgroundSecondMeta");
  var __$LuckyAnimationBackgroundsTable_backgroundSecond = dart.privateName(database, "_#$LuckyAnimationBackgroundsTable#backgroundSecond");
  const LuckyAnimationBackgrounds_TableInfo$36 = class LuckyAnimationBackgrounds_TableInfo extends animation_background_relation.LuckyAnimationBackgrounds {};
  (LuckyAnimationBackgrounds_TableInfo$36.new = function() {
    query_builder.TableInfo$(database.$LuckyAnimationBackgroundsTable, database.LuckyAnimationBackground)[dart.mixinNew].call(this);
    LuckyAnimationBackgrounds_TableInfo$36.__proto__.new.call(this);
  }).prototype = LuckyAnimationBackgrounds_TableInfo$36.prototype;
  database.$LuckyAnimationBackgroundsTable = class $36LuckyAnimationBackgroundsTable extends LuckyAnimationBackgrounds_TableInfo$36 {
    get attachedDatabase() {
      return this[attachedDatabase$5];
    }
    set attachedDatabase(value) {
      super.attachedDatabase = value;
    }
    static ['_#new#tearOff'](attachedDatabase, _alias = null) {
      return new database.$LuckyAnimationBackgroundsTable.new(attachedDatabase, _alias);
    }
    get id() {
      let t13, t12;
      t12 = this[__$LuckyAnimationBackgroundsTable_id];
      return t12 == null ? (t13 = new (T.GeneratedColumnOfintN()).new("id", this.aliasedName, false, {type: C[0] || CT.C0, requiredDuringInsert: false, defaultConstraints: "PRIMARY KEY AUTOINCREMENT"}), this[__$LuckyAnimationBackgroundsTable_id] == null ? this[__$LuckyAnimationBackgroundsTable_id] = t13 : dart.throw(new _internal.LateError.fieldADI("id"))) : t12;
    }
    get type() {
      let t13, t12;
      t12 = this[__$LuckyAnimationBackgroundsTable_type];
      return t12 == null ? (t13 = new (T.GeneratedColumnOfStringN()).new("type", this.aliasedName, false, {type: C[1] || CT.C1, requiredDuringInsert: true}), this[__$LuckyAnimationBackgroundsTable_type] == null ? this[__$LuckyAnimationBackgroundsTable_type] = t13 : dart.throw(new _internal.LateError.fieldADI("type"))) : t12;
    }
    get backgroundFirst() {
      let t13, t12;
      t12 = this[__$LuckyAnimationBackgroundsTable_backgroundFirst];
      return t12 == null ? (t13 = new (T.GeneratedColumnOfStringN()).new("background_first", this.aliasedName, false, {type: C[1] || CT.C1, requiredDuringInsert: true}), this[__$LuckyAnimationBackgroundsTable_backgroundFirst] == null ? this[__$LuckyAnimationBackgroundsTable_backgroundFirst] = t13 : dart.throw(new _internal.LateError.fieldADI("backgroundFirst"))) : t12;
    }
    get backgroundSecond() {
      let t13, t12;
      t12 = this[__$LuckyAnimationBackgroundsTable_backgroundSecond];
      return t12 == null ? (t13 = new (T.GeneratedColumnOfStringN()).new("background_second", this.aliasedName, false, {type: C[1] || CT.C1, requiredDuringInsert: true}), this[__$LuckyAnimationBackgroundsTable_backgroundSecond] == null ? this[__$LuckyAnimationBackgroundsTable_backgroundSecond] = t13 : dart.throw(new _internal.LateError.fieldADI("backgroundSecond"))) : t12;
    }
    get $columns() {
      return T.JSArrayOfGeneratedColumn().of([this.id, this.type, this.backgroundFirst, this.backgroundSecond]);
    }
    get aliasedName() {
      let t12;
      t12 = this[_alias$];
      return t12 == null ? "lucky_animation_backgrounds" : t12;
    }
    get actualTableName() {
      return "lucky_animation_backgrounds";
    }
    validateIntegrity(instance, opts) {
      T.InsertableOfLuckyAnimationBackground().as(instance);
      let isInserting = opts && 'isInserting' in opts ? opts.isInserting : false;
      let context = new data_verification.VerificationContext.new();
      let data = instance.toColumns(true);
      if (data[$containsKey]("id")) {
        context.handle(this[_idMeta], this.id.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("id")), this[_idMeta]));
      }
      if (data[$containsKey]("type")) {
        context.handle(this[_typeMeta], this.type.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("type")), this[_typeMeta]));
      } else if (isInserting) {
        context.missing(this[_typeMeta]);
      }
      if (data[$containsKey]("background_first")) {
        context.handle(this[_backgroundFirstMeta], this.backgroundFirst.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("background_first")), this[_backgroundFirstMeta]));
      } else if (isInserting) {
        context.missing(this[_backgroundFirstMeta]);
      }
      if (data[$containsKey]("background_second")) {
        context.handle(this[_backgroundSecondMeta], this.backgroundSecond.isAcceptableOrUnknown(dart.nullCheck(data[$_get]("background_second")), this[_backgroundSecondMeta]));
      } else if (isInserting) {
        context.missing(this[_backgroundSecondMeta]);
      }
      return context;
    }
    get $primaryKey() {
      return T.LinkedHashSetOfGeneratedColumn().from([this.id]);
    }
    map(data, opts) {
      let tablePrefix = opts && 'tablePrefix' in opts ? opts.tablePrefix : null;
      return database.LuckyAnimationBackground.fromData(data, this.attachedDatabase, {prefix: tablePrefix != null ? dart.str(tablePrefix) + "." : null});
    }
    createAlias(alias) {
      return new database.$LuckyAnimationBackgroundsTable.new(this.attachedDatabase, alias);
    }
  };
  (database.$LuckyAnimationBackgroundsTable.new = function(attachedDatabase, _alias = null) {
    this[_idMeta] = C[7] || CT.C7;
    this[__$LuckyAnimationBackgroundsTable_id] = null;
    this[_typeMeta] = C[28] || CT.C28;
    this[__$LuckyAnimationBackgroundsTable_type] = null;
    this[_backgroundFirstMeta] = C[29] || CT.C29;
    this[__$LuckyAnimationBackgroundsTable_backgroundFirst] = null;
    this[_backgroundSecondMeta] = C[30] || CT.C30;
    this[__$LuckyAnimationBackgroundsTable_backgroundSecond] = null;
    this[attachedDatabase$5] = attachedDatabase;
    this[_alias$] = _alias;
    database.$LuckyAnimationBackgroundsTable.__proto__.new.call(this);
    ;
  }).prototype = database.$LuckyAnimationBackgroundsTable.prototype;
  dart.addTypeTests(database.$LuckyAnimationBackgroundsTable);
  dart.addTypeCaches(database.$LuckyAnimationBackgroundsTable);
  dart.setMethodSignature(database.$LuckyAnimationBackgroundsTable, () => ({
    __proto__: dart.getMethods(database.$LuckyAnimationBackgroundsTable.__proto__),
    map: dart.fnType(database.LuckyAnimationBackground, [core.Map$(core.String, dart.dynamic)], {tablePrefix: dart.nullable(core.String)}, {}),
    createAlias: dart.fnType(database.$LuckyAnimationBackgroundsTable, [core.String])
  }));
  dart.setGetterSignature(database.$LuckyAnimationBackgroundsTable, () => ({
    __proto__: dart.getGetters(database.$LuckyAnimationBackgroundsTable.__proto__),
    id: query_builder.GeneratedColumn$(dart.nullable(core.int)),
    type: query_builder.GeneratedColumn$(dart.nullable(core.String)),
    backgroundFirst: query_builder.GeneratedColumn$(dart.nullable(core.String)),
    backgroundSecond: query_builder.GeneratedColumn$(dart.nullable(core.String)),
    $columns: core.List$(query_builder.GeneratedColumn),
    actualTableName: core.String
  }));
  dart.setLibraryUri(database.$LuckyAnimationBackgroundsTable, I[7]);
  dart.setFieldSignature(database.$LuckyAnimationBackgroundsTable, () => ({
    __proto__: dart.getFields(database.$LuckyAnimationBackgroundsTable.__proto__),
    attachedDatabase: dart.finalFieldType(runtime_api.GeneratedDatabase),
    [_alias$]: dart.finalFieldType(dart.nullable(core.String)),
    [_idMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$LuckyAnimationBackgroundsTable_id]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.int)))),
    [_typeMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$LuckyAnimationBackgroundsTable_type]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.String)))),
    [_backgroundFirstMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$LuckyAnimationBackgroundsTable_backgroundFirst]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.String)))),
    [_backgroundSecondMeta]: dart.finalFieldType(data_verification.VerificationMeta),
    [__$LuckyAnimationBackgroundsTable_backgroundSecond]: dart.fieldType(dart.nullable(query_builder.GeneratedColumn$(dart.nullable(core.String))))
  }));
  dart.applyMixin(database.$CustomersTable.__proto__, query_builder.TableInfo$(database.$CustomersTable, database.Customer));
  dart.applyMixin(database.$EmployeeDeliverysTable.__proto__, query_builder.TableInfo$(database.$EmployeeDeliverysTable, database.EmployeeDelivery));
  dart.applyMixin(database.$OutputSalesTable.__proto__, query_builder.TableInfo$(database.$OutputSalesTable, database.OutputSale));
  dart.applyMixin(database.$OutputSaleTypesTable.__proto__, query_builder.TableInfo$(database.$OutputSaleTypesTable, database.OutputSaleType));
  dart.applyMixin(database.$OutputFormsTable.__proto__, query_builder.TableInfo$(database.$OutputFormsTable, database.OutputForm));
  dart.applyMixin(database.$OutputTypesTable.__proto__, query_builder.TableInfo$(database.$OutputTypesTable, database.OutputType));
  dart.applyMixin(database.$LuckyAnimationBackgroundsTable.__proto__, query_builder.TableInfo$(database.$LuckyAnimationBackgroundsTable, database.LuckyAnimationBackground));
  dart.trackLibraries("packages/data/datasource/local/moor/database/web.dart", {
    "package:data/datasource/local/moor/database/web.dart": web$,
    "package:data/datasource/local/moor/database/shared.dart": shared,
    "package:data/datasource/local/moor/table/output_type/output_type.dart": output_type,
    "package:data/datasource/local/moor/table/output_sale_type/output_sale_type.dart": output_sale_type,
    "package:data/datasource/local/moor/table/output_sale/output_sale.dart": output_sale,
    "package:data/datasource/local/moor/table/output_form/output_form.dart": output_form,
    "package:data/datasource/local/moor/table/employee_delivery/employee_delivery.dart": employee_delivery,
    "package:data/datasource/local/moor/table/customer/customer.dart": customer,
    "package:data/datasource/local/moor/table/animation_background/animation_background_relation.dart": animation_background_relation,
    "package:data/datasource/local/moor/database.dart": database
  }, {
    "package:data/datasource/local/moor/database.dart": ["database.g.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["web.dart","../table/output_type/output_type.dart","../table/output_sale_type/output_sale_type.dart","../table/output_sale/output_sale.dart","../table/output_form/output_form.dart","../table/employee_delivery/employee_delivery.dart","../table/customer/customer.dart","../table/animation_background/animation_background_relation.dart","../database.g.dart","../database.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../packages/data/datasource/local/moor/database/web.dart.lib.js"}');
  // Exports:
  return {
    datasource__local__moor__database__web: web$,
    datasource__local__moor__database__shared: shared,
    datasource__local__moor__table__output_type__output_type: output_type,
    datasource__local__moor__table__output_sale_type__output_sale_type: output_sale_type,
    datasource__local__moor__table__output_sale__output_sale: output_sale,
    datasource__local__moor__table__output_form__output_form: output_form,
    datasource__local__moor__table__employee_delivery__employee_delivery: employee_delivery,
    datasource__local__moor__table__customer__customer: customer,
    datasource__local__moor__table__animation_background__animation_background_relation: animation_background_relation,
    datasource__local__moor__database: database
  };
}));

//# sourceMappingURL=web.dart.lib.js.map
