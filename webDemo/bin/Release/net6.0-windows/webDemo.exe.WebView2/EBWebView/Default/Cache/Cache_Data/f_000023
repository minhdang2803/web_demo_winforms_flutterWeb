define(['dart_sdk', 'packages/device_info_plus_platform_interface/model/base_device_info.dart'], (function load__packages__device_info_plus_platform_interface__model__web_browser_info_dart(dart_sdk, packages__device_info_plus_platform_interface__model__base_device_info$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const base_device_info = packages__device_info_plus_platform_interface__model__base_device_info$46dart.model__base_device_info;
  var web_browser_info = Object.create(dart.library);
  var $_get = dartx._get;
  var $contains = dartx.contains;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    intN: () => (T.intN = dart.constFn(dart.nullable(core.int)))(),
    ListN: () => (T.ListN = dart.constFn(dart.nullable(core.List)))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const({
        __proto__: web_browser_info.BrowserName.prototype,
        [_Enum__name]: "firefox",
        [_Enum_index]: 0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: web_browser_info.BrowserName.prototype,
        [_Enum__name]: "samsungInternet",
        [_Enum_index]: 1
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: web_browser_info.BrowserName.prototype,
        [_Enum__name]: "opera",
        [_Enum_index]: 2
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: web_browser_info.BrowserName.prototype,
        [_Enum__name]: "msie",
        [_Enum_index]: 3
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: web_browser_info.BrowserName.prototype,
        [_Enum__name]: "edge",
        [_Enum_index]: 4
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: web_browser_info.BrowserName.prototype,
        [_Enum__name]: "chrome",
        [_Enum_index]: 5
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: web_browser_info.BrowserName.prototype,
        [_Enum__name]: "safari",
        [_Enum_index]: 6
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: web_browser_info.BrowserName.prototype,
        [_Enum__name]: "unknown",
        [_Enum_index]: 7
      });
    },
    get C0() {
      return C[0] = dart.constList([C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4, C[5] || CT.C5, C[6] || CT.C6, C[7] || CT.C7, C[8] || CT.C8], web_browser_info.BrowserName);
    }
  }, false);
  var C = Array(9).fill(void 0);
  var I = ["package:device_info_plus_platform_interface/model/web_browser_info.dart"];
  var _name = dart.privateName(core, "_name");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  web_browser_info.BrowserName = class BrowserName extends core._Enum {
    toString() {
      return "BrowserName." + this[_name];
    }
  };
  (web_browser_info.BrowserName.new = function(index, name) {
    web_browser_info.BrowserName.__proto__.new.call(this, index, name);
    ;
  }).prototype = web_browser_info.BrowserName.prototype;
  dart.addTypeTests(web_browser_info.BrowserName);
  dart.addTypeCaches(web_browser_info.BrowserName);
  dart.setLibraryUri(web_browser_info.BrowserName, I[0]);
  dart.setStaticFieldSignature(web_browser_info.BrowserName, () => ['values', 'firefox', 'samsungInternet', 'opera', 'msie', 'edge', 'chrome', 'safari', 'unknown']);
  dart.defineExtensionMethods(web_browser_info.BrowserName, ['toString']);
  dart.defineLazy(web_browser_info.BrowserName, {
    /*web_browser_info.BrowserName.values*/get values() {
      return C[0] || CT.C0;
    },
    /*web_browser_info.BrowserName.firefox*/get firefox() {
      return C[1] || CT.C1;
    },
    /*web_browser_info.BrowserName.samsungInternet*/get samsungInternet() {
      return C[2] || CT.C2;
    },
    /*web_browser_info.BrowserName.opera*/get opera() {
      return C[3] || CT.C3;
    },
    /*web_browser_info.BrowserName.msie*/get msie() {
      return C[4] || CT.C4;
    },
    /*web_browser_info.BrowserName.edge*/get edge() {
      return C[5] || CT.C5;
    },
    /*web_browser_info.BrowserName.chrome*/get chrome() {
      return C[6] || CT.C6;
    },
    /*web_browser_info.BrowserName.safari*/get safari() {
      return C[7] || CT.C7;
    },
    /*web_browser_info.BrowserName.unknown*/get unknown() {
      return C[8] || CT.C8;
    }
  }, false);
  var appCodeName$ = dart.privateName(web_browser_info, "WebBrowserInfo.appCodeName");
  var appName$ = dart.privateName(web_browser_info, "WebBrowserInfo.appName");
  var appVersion$ = dart.privateName(web_browser_info, "WebBrowserInfo.appVersion");
  var deviceMemory$ = dart.privateName(web_browser_info, "WebBrowserInfo.deviceMemory");
  var language$ = dart.privateName(web_browser_info, "WebBrowserInfo.language");
  var languages$ = dart.privateName(web_browser_info, "WebBrowserInfo.languages");
  var platform$ = dart.privateName(web_browser_info, "WebBrowserInfo.platform");
  var product$ = dart.privateName(web_browser_info, "WebBrowserInfo.product");
  var productSub$ = dart.privateName(web_browser_info, "WebBrowserInfo.productSub");
  var userAgent$ = dart.privateName(web_browser_info, "WebBrowserInfo.userAgent");
  var vendor$ = dart.privateName(web_browser_info, "WebBrowserInfo.vendor");
  var vendorSub$ = dart.privateName(web_browser_info, "WebBrowserInfo.vendorSub");
  var hardwareConcurrency$ = dart.privateName(web_browser_info, "WebBrowserInfo.hardwareConcurrency");
  var maxTouchPoints$ = dart.privateName(web_browser_info, "WebBrowserInfo.maxTouchPoints");
  var _parseUserAgentToBrowserName = dart.privateName(web_browser_info, "_parseUserAgentToBrowserName");
  web_browser_info.WebBrowserInfo = class WebBrowserInfo extends core.Object {
    get appCodeName() {
      return this[appCodeName$];
    }
    set appCodeName(value) {
      super.appCodeName = value;
    }
    get appName() {
      return this[appName$];
    }
    set appName(value) {
      super.appName = value;
    }
    get appVersion() {
      return this[appVersion$];
    }
    set appVersion(value) {
      super.appVersion = value;
    }
    get deviceMemory() {
      return this[deviceMemory$];
    }
    set deviceMemory(value) {
      super.deviceMemory = value;
    }
    get language() {
      return this[language$];
    }
    set language(value) {
      super.language = value;
    }
    get languages() {
      return this[languages$];
    }
    set languages(value) {
      super.languages = value;
    }
    get platform() {
      return this[platform$];
    }
    set platform(value) {
      super.platform = value;
    }
    get product() {
      return this[product$];
    }
    set product(value) {
      super.product = value;
    }
    get productSub() {
      return this[productSub$];
    }
    set productSub(value) {
      super.productSub = value;
    }
    get userAgent() {
      return this[userAgent$];
    }
    set userAgent(value) {
      super.userAgent = value;
    }
    get vendor() {
      return this[vendor$];
    }
    set vendor(value) {
      super.vendor = value;
    }
    get vendorSub() {
      return this[vendorSub$];
    }
    set vendorSub(value) {
      super.vendorSub = value;
    }
    get hardwareConcurrency() {
      return this[hardwareConcurrency$];
    }
    set hardwareConcurrency(value) {
      super.hardwareConcurrency = value;
    }
    get maxTouchPoints() {
      return this[maxTouchPoints$];
    }
    set maxTouchPoints(value) {
      super.maxTouchPoints = value;
    }
    static ['_#new#tearOff'](opts) {
      let appCodeName = opts && 'appCodeName' in opts ? opts.appCodeName : null;
      let appName = opts && 'appName' in opts ? opts.appName : null;
      let appVersion = opts && 'appVersion' in opts ? opts.appVersion : null;
      let deviceMemory = opts && 'deviceMemory' in opts ? opts.deviceMemory : null;
      let language = opts && 'language' in opts ? opts.language : null;
      let languages = opts && 'languages' in opts ? opts.languages : null;
      let platform = opts && 'platform' in opts ? opts.platform : null;
      let product = opts && 'product' in opts ? opts.product : null;
      let productSub = opts && 'productSub' in opts ? opts.productSub : null;
      let userAgent = opts && 'userAgent' in opts ? opts.userAgent : null;
      let vendor = opts && 'vendor' in opts ? opts.vendor : null;
      let vendorSub = opts && 'vendorSub' in opts ? opts.vendorSub : null;
      let maxTouchPoints = opts && 'maxTouchPoints' in opts ? opts.maxTouchPoints : null;
      let hardwareConcurrency = opts && 'hardwareConcurrency' in opts ? opts.hardwareConcurrency : null;
      return new web_browser_info.WebBrowserInfo.new({appCodeName: appCodeName, appName: appName, appVersion: appVersion, deviceMemory: deviceMemory, language: language, languages: languages, platform: platform, product: product, productSub: productSub, userAgent: userAgent, vendor: vendor, vendorSub: vendorSub, maxTouchPoints: maxTouchPoints, hardwareConcurrency: hardwareConcurrency});
    }
    get browserName() {
      return this[_parseUserAgentToBrowserName]();
    }
    static fromMap(map) {
      return new web_browser_info.WebBrowserInfo.new({appCodeName: T.StringN().as(map[$_get]("appCodeName")), appName: T.StringN().as(map[$_get]("appName")), appVersion: T.StringN().as(map[$_get]("appVersion")), deviceMemory: T.intN().as(map[$_get]("deviceMemory")), language: T.StringN().as(map[$_get]("language")), languages: T.ListN().as(map[$_get]("languages")), platform: T.StringN().as(map[$_get]("platform")), product: T.StringN().as(map[$_get]("product")), productSub: T.StringN().as(map[$_get]("productSub")), userAgent: T.StringN().as(map[$_get]("userAgent")), vendor: T.StringN().as(map[$_get]("vendor")), vendorSub: T.StringN().as(map[$_get]("vendorSub")), hardwareConcurrency: T.intN().as(map[$_get]("hardwareConcurrency")), maxTouchPoints: T.intN().as(map[$_get]("maxTouchPoints"))});
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["browserName", this.browserName, "appCodeName", this.appCodeName, "appName", this.appName, "appVersion", this.appVersion, "deviceMemory", this.deviceMemory, "language", this.language, "languages", this.languages, "platform", this.platform, "product", this.product, "productSub", this.productSub, "userAgent", this.userAgent, "vendor", this.vendor, "vendorSub", this.vendorSub, "hardwareConcurrency", this.hardwareConcurrency, "maxTouchPoints", this.maxTouchPoints]);
    }
    [_parseUserAgentToBrowserName]() {
      let _userAgent = this.userAgent;
      if (_userAgent == null) {
        return web_browser_info.BrowserName.unknown;
      } else if (_userAgent[$contains]("Firefox")) {
        return web_browser_info.BrowserName.firefox;
      } else if (_userAgent[$contains]("SamsungBrowser")) {
        return web_browser_info.BrowserName.samsungInternet;
      } else if (_userAgent[$contains]("Opera") || _userAgent[$contains]("OPR")) {
        return web_browser_info.BrowserName.opera;
      } else if (_userAgent[$contains]("Trident")) {
        return web_browser_info.BrowserName.msie;
      } else if (_userAgent[$contains]("Edg")) {
        return web_browser_info.BrowserName.edge;
      } else if (_userAgent[$contains]("Chrome")) {
        return web_browser_info.BrowserName.chrome;
      } else if (_userAgent[$contains]("Safari")) {
        return web_browser_info.BrowserName.safari;
      } else {
        return web_browser_info.BrowserName.unknown;
      }
    }
  };
  (web_browser_info.WebBrowserInfo.new = function(opts) {
    let appCodeName = opts && 'appCodeName' in opts ? opts.appCodeName : null;
    let appName = opts && 'appName' in opts ? opts.appName : null;
    let appVersion = opts && 'appVersion' in opts ? opts.appVersion : null;
    let deviceMemory = opts && 'deviceMemory' in opts ? opts.deviceMemory : null;
    let language = opts && 'language' in opts ? opts.language : null;
    let languages = opts && 'languages' in opts ? opts.languages : null;
    let platform = opts && 'platform' in opts ? opts.platform : null;
    let product = opts && 'product' in opts ? opts.product : null;
    let productSub = opts && 'productSub' in opts ? opts.productSub : null;
    let userAgent = opts && 'userAgent' in opts ? opts.userAgent : null;
    let vendor = opts && 'vendor' in opts ? opts.vendor : null;
    let vendorSub = opts && 'vendorSub' in opts ? opts.vendorSub : null;
    let maxTouchPoints = opts && 'maxTouchPoints' in opts ? opts.maxTouchPoints : null;
    let hardwareConcurrency = opts && 'hardwareConcurrency' in opts ? opts.hardwareConcurrency : null;
    this[appCodeName$] = appCodeName;
    this[appName$] = appName;
    this[appVersion$] = appVersion;
    this[deviceMemory$] = deviceMemory;
    this[language$] = language;
    this[languages$] = languages;
    this[platform$] = platform;
    this[product$] = product;
    this[productSub$] = productSub;
    this[userAgent$] = userAgent;
    this[vendor$] = vendor;
    this[vendorSub$] = vendorSub;
    this[maxTouchPoints$] = maxTouchPoints;
    this[hardwareConcurrency$] = hardwareConcurrency;
    ;
  }).prototype = web_browser_info.WebBrowserInfo.prototype;
  dart.addTypeTests(web_browser_info.WebBrowserInfo);
  dart.addTypeCaches(web_browser_info.WebBrowserInfo);
  web_browser_info.WebBrowserInfo[dart.implements] = () => [base_device_info.BaseDeviceInfo];
  dart.setMethodSignature(web_browser_info.WebBrowserInfo, () => ({
    __proto__: dart.getMethods(web_browser_info.WebBrowserInfo.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    [_parseUserAgentToBrowserName]: dart.fnType(web_browser_info.BrowserName, [])
  }));
  dart.setStaticMethodSignature(web_browser_info.WebBrowserInfo, () => ['fromMap']);
  dart.setGetterSignature(web_browser_info.WebBrowserInfo, () => ({
    __proto__: dart.getGetters(web_browser_info.WebBrowserInfo.__proto__),
    browserName: web_browser_info.BrowserName
  }));
  dart.setLibraryUri(web_browser_info.WebBrowserInfo, I[0]);
  dart.setFieldSignature(web_browser_info.WebBrowserInfo, () => ({
    __proto__: dart.getFields(web_browser_info.WebBrowserInfo.__proto__),
    appCodeName: dart.finalFieldType(dart.nullable(core.String)),
    appName: dart.finalFieldType(dart.nullable(core.String)),
    appVersion: dart.finalFieldType(dart.nullable(core.String)),
    deviceMemory: dart.finalFieldType(dart.nullable(core.int)),
    language: dart.finalFieldType(dart.nullable(core.String)),
    languages: dart.finalFieldType(dart.nullable(core.List)),
    platform: dart.finalFieldType(dart.nullable(core.String)),
    product: dart.finalFieldType(dart.nullable(core.String)),
    productSub: dart.finalFieldType(dart.nullable(core.String)),
    userAgent: dart.finalFieldType(dart.nullable(core.String)),
    vendor: dart.finalFieldType(dart.nullable(core.String)),
    vendorSub: dart.finalFieldType(dart.nullable(core.String)),
    hardwareConcurrency: dart.finalFieldType(dart.nullable(core.int)),
    maxTouchPoints: dart.finalFieldType(dart.nullable(core.int))
  }));
  dart.trackLibraries("packages/device_info_plus_platform_interface/model/web_browser_info.dart", {
    "package:device_info_plus_platform_interface/model/web_browser_info.dart": web_browser_info
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["web_browser_info.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA+BA;;;;;;;;;;;;MAxBK,mCAAM;;;MAET,oCAAO;;;MAGP,4CAAe;;;MAGf,kCAAK;;;MAGL,iCAAI;;;MAGJ,iCAAI;;;MAGJ,mCAAM;;;MAGN,mCAAM;;;MAGN,oCAAO;;;;;;;;;;;;;;;;;;;;IAgCO;;;;;;IAIA;;;;;;IAIA;;;;;;IAGH;;;;;;IAGG;;;;;;IAGO;;;;;;IAIP;;;;;;IAKA;;;;;;IAIA;;;;;;IAGA;;;;;;IAGA;;;;;;IAIA;;;;;;IAGH;;;;;;IAGA;;;;;;;;;;;;;;;;;;;;;;;;AAnDT,YAAO;IACT;mBAqDmD;AACjD,YAAO,sEACQ,AAAG,GAAA,QAAC,yCACR,AAAG,GAAA,QAAC,wCACD,AAAG,GAAA,QAAC,0CACF,AAAG,GAAA,QAAC,2CACR,AAAG,GAAA,QAAC,sCACH,AAAG,GAAA,QAAC,wCACL,AAAG,GAAA,QAAC,sCACL,AAAG,GAAA,QAAC,wCACD,AAAG,GAAA,QAAC,0CACL,AAAG,GAAA,QAAC,sCACP,AAAG,GAAA,QAAC,sCACD,AAAG,GAAA,QAAC,gDACM,AAAG,GAAA,QAAC,qDACT,AAAG,GAAA,QAAC;IAExB;;AAKE,YAAO,6CACL,eAAe,kBACf,eAAe,kBACf,WAAW,cACX,cAAc,iBACd,gBAAgB,mBAChB,YAAY,eACZ,aAAa,gBACb,YAAY,eACZ,WAAW,cACX,cAAc,iBACd,aAAa,gBACb,UAAU,aACV,aAAa,gBACb,uBAAuB,0BACvB,kBAAkB;IAEtB;;AAGQ,uBAAa;AACnB,UAAI,AAAW,UAAD;AACZ,cAAmB;YACd,KAAI,AAAW,UAAD,YAAU;AAC7B,cAAmB;YAEd,KAAI,AAAW,UAAD,YAAU;AAC7B,cAAmB;YAEd,KAAI,AAAW,UAAD,YAAU,YAAY,AAAW,UAAD,YAAU;AAC7D,cAAmB;YAEd,KAAI,AAAW,UAAD,YAAU;AAC7B,cAAmB;YAEd,KAAI,AAAW,UAAD,YAAU;AAC7B,cAAmB;YAId,KAAI,AAAW,UAAD,YAAU;AAC7B,cAAmB;YAEd,KAAI,AAAW,UAAD,YAAU;AAC7B,cAAmB;;AAGnB,cAAmB;;IAEvB;;;QA/IgB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IAbA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EACd","file":"../../../../../../../../../../../packages/device_info_plus_platform_interface/model/web_browser_info.dart.lib.js"}');
  // Exports:
  return {
    model__web_browser_info: web_browser_info
  };
}));

//# sourceMappingURL=web_browser_info.dart.lib.js.map
