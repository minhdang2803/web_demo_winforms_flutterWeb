define(['dart_sdk', 'packages/pdf/src/pdf/obj/diagnostic.dart', 'packages/pdf/src/pdf/stream.dart', 'packages/pdf/src/pdf/rect.dart', 'packages/pdf/src/pdf/color.dart', 'packages/pdf/src/pdf/ascii85.dart', 'packages/xml/src/xml/utils/simple_name.dart', 'packages/archive/src/zlib_encoder.dart', 'packages/pdf/src/pdf/point.dart', 'packages/vector_math/vector_math_64.dart', 'packages/pdf/src/pdf/page_format.dart', 'packages/image/src/image.dart', 'packages/image/src/formats/jpeg_decoder.dart', 'packages/image/src/transform/copy_crop.dart', 'packages/pdf/src/pdf/font/ttf_parser.dart', 'packages/pdf/src/pdf/font/font_metrics.dart', 'packages/pdf/src/pdf/font/arabic.dart', 'packages/pdf/src/pdf/font/ttf_writer.dart', 'packages/pdf/src/pdf/font/type1_fonts.dart', 'packages/path_parsing/src/path_parsing.dart', 'packages/crypto/src/sha256.dart'], (function load__packages__pdf__src__pdf__output_dart(dart_sdk, packages__pdf__src__pdf__obj__diagnostic$46dart, packages__pdf__src__pdf__stream$46dart, packages__pdf__src__pdf__rect$46dart, packages__pdf__src__pdf__color$46dart, packages__pdf__src__pdf__ascii85$46dart, packages__xml__src__xml__utils__simple_name$46dart, packages__archive__src__zlib_encoder$46dart, packages__pdf__src__pdf__point$46dart, packages__vector_math__vector_math_64$46dart, packages__pdf__src__pdf__page_format$46dart, packages__image__src__image$46dart, packages__image__src__formats__jpeg_decoder$46dart, packages__image__src__transform__copy_crop$46dart, packages__pdf__src__pdf__font__ttf_parser$46dart, packages__pdf__src__pdf__font__font_metrics$46dart, packages__pdf__src__pdf__font__arabic$46dart, packages__pdf__src__pdf__font__ttf_writer$46dart, packages__pdf__src__pdf__font__type1_fonts$46dart, packages__path_parsing__src__path_parsing$46dart, packages__crypto__src__sha256$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const async = dart_sdk.async;
  const _js_helper = dart_sdk._js_helper;
  const math = dart_sdk.math;
  const typed_data = dart_sdk.typed_data;
  const _native_typed_data = dart_sdk._native_typed_data;
  const convert = dart_sdk.convert;
  const _internal = dart_sdk._internal;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const diagnostic = packages__pdf__src__pdf__obj__diagnostic$46dart.src__pdf__obj__diagnostic;
  const stream = packages__pdf__src__pdf__stream$46dart.src__pdf__stream;
  const rect = packages__pdf__src__pdf__rect$46dart.src__pdf__rect;
  const color$ = packages__pdf__src__pdf__color$46dart.src__pdf__color;
  const ascii85 = packages__pdf__src__pdf__ascii85$46dart.src__pdf__ascii85;
  const document = packages__xml__src__xml__utils__simple_name$46dart.src__xml__nodes__document;
  const zlib_encoder = packages__archive__src__zlib_encoder$46dart.src__zlib_encoder;
  const point = packages__pdf__src__pdf__point$46dart.src__pdf__point;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const page_format = packages__pdf__src__pdf__page_format$46dart.src__pdf__page_format;
  const image$ = packages__image__src__image$46dart.src__image;
  const jpeg_decoder = packages__image__src__formats__jpeg_decoder$46dart.src__formats__jpeg_decoder;
  const formats = packages__image__src__transform__copy_crop$46dart.src__formats__formats;
  const ttf_parser = packages__pdf__src__pdf__font__ttf_parser$46dart.src__pdf__font__ttf_parser;
  const font_metrics = packages__pdf__src__pdf__font__font_metrics$46dart.src__pdf__font__font_metrics;
  const arabic = packages__pdf__src__pdf__font__arabic$46dart.src__pdf__font__arabic;
  const ttf_writer = packages__pdf__src__pdf__font__ttf_writer$46dart.src__pdf__font__ttf_writer;
  const type1_fonts = packages__pdf__src__pdf__font__type1_fonts$46dart.src__pdf__font__type1_fonts;
  const path_parsing = packages__path_parsing__src__path_parsing$46dart.src__path_parsing;
  const sha256 = packages__crypto__src__sha256$46dart.src__sha256;
  var output = Object.create(dart.library);
  var signature = Object.create(dart.library);
  var info = Object.create(dart.library);
  var encryption = Object.create(dart.library);
  var page_list = Object.create(dart.library);
  var xref = Object.create(dart.library);
  var priv = Object.create(dart.library);
  var page_label = Object.create(dart.library);
  var outline = Object.create(dart.library);
  var names = Object.create(dart.library);
  var metadata$ = Object.create(dart.library);
  var catalog = Object.create(dart.library);
  var js = Object.create(dart.library);
  var border = Object.create(dart.library);
  var annotation = Object.create(dart.library);
  var page = Object.create(dart.library);
  var exif = Object.create(dart.library);
  var image$0 = Object.create(dart.library);
  var xobject = Object.create(dart.library);
  var shading = Object.create(dart.library);
  var pattern = Object.create(dart.library);
  var graphic_stream = Object.create(dart.library);
  var unicode_cmap = Object.create(dart.library);
  var font_descriptor = Object.create(dart.library);
  var array$ = Object.create(dart.library);
  var ttffont = Object.create(dart.library);
  var type1_font = Object.create(dart.library);
  var font = Object.create(dart.library);
  var graphics = Object.create(dart.library);
  var smask = Object.create(dart.library);
  var object_stream = Object.create(dart.library);
  var object_dict = Object.create(dart.library);
  var $function = Object.create(dart.library);
  var object = Object.create(dart.library);
  var data_types = Object.create(dart.library);
  var graphic_state = Object.create(dart.library);
  var document_parser = Object.create(dart.library);
  var document$ = Object.create(dart.library);
  var $times = dartx['*'];
  var $length = dartx.length;
  var $add = dartx.add;
  var $isEmpty = dartx.isEmpty;
  var $leftShift = dartx['<<'];
  var $map = dartx.map;
  var $reduce = dartx.reduce;
  var $runtimeType = dartx.runtimeType;
  var $addAll = dartx.addAll;
  var $isNotEmpty = dartx.isNotEmpty;
  var $_set = dartx._set;
  var $_get = dartx._get;
  var $keys = dartx.keys;
  var $fold = dartx.fold;
  var $forEach = dartx.forEach;
  var $containsKey = dartx.containsKey;
  var $_equals = dartx._equals;
  var $hashCode = dartx.hashCode;
  var $toString = dartx.toString;
  var $padLeft = dartx.padLeft;
  var $rightShift = dartx['>>'];
  var $setUint8 = dartx.setUint8;
  var $compareTo = dartx.compareTo;
  var $sort = dartx.sort;
  var $clear = dartx.clear;
  var $last = dartx.last;
  var $ceil = dartx.ceil;
  var $buffer = dartx.buffer;
  var $asUint8List = dartx.asUint8List;
  var $modulo = dartx['%'];
  var $truncate = dartx.truncate;
  var $toLowerCase = dartx.toLowerCase;
  var $toList = dartx.toList;
  var $entries = dartx.entries;
  var $indexOf = dartx.indexOf;
  var $first = dartx.first;
  var $lengthInBytes = dartx.lengthInBytes;
  var $substring = dartx.substring;
  var $insert = dartx.insert;
  var $whereType = dartx.whereType;
  var $insertAll = dartx.insertAll;
  var $elementAt = dartx.elementAt;
  var $offsetInBytes = dartx.offsetInBytes;
  var $asByteData = dartx.asByteData;
  var $getUint8 = dartx.getUint8;
  var $getUint16 = dartx.getUint16;
  var $getUint32 = dartx.getUint32;
  var $getInt32 = dartx.getInt32;
  var $getFloat32 = dartx.getFloat32;
  var $getFloat64 = dartx.getFloat64;
  var $fillRange = dartx.fillRange;
  var $toRadixString = dartx.toRadixString;
  var $toUpperCase = dartx.toUpperCase;
  var $toInt = dartx.toInt;
  var $toDouble = dartx.toDouble;
  var $runes = dartx.runes;
  var $sign = dartx.sign;
  var $abs = dartx.abs;
  var $sublist = dartx.sublist;
  var $round = dartx.round;
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $contains = dartx.contains;
  var $plus = dartx['+'];
  var $codeUnits = dartx.codeUnits;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T$ = {
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    PdfDictOfPdfDataType: () => (T$.PdfDictOfPdfDataType = dart.constFn(data_types.PdfDict$(data_types.PdfDataType)))(),
    PdfArrayOfPdfString: () => (T$.PdfArrayOfPdfString = dart.constFn(data_types.PdfArray$(data_types.PdfString)))(),
    JSArrayOfPdfString: () => (T$.JSArrayOfPdfString = dart.constFn(_interceptors.JSArray$(data_types.PdfString)))(),
    JSArrayOfPdfObjectStream: () => (T$.JSArrayOfPdfObjectStream = dart.constFn(_interceptors.JSArray$(object_stream.PdfObjectStream)))(),
    PdfSigFlagsToint: () => (T$.PdfSigFlagsToint = dart.constFn(dart.fnType(core.int, [signature.PdfSigFlags])))(),
    intAndintToint: () => (T$.intAndintToint = dart.constFn(dart.fnType(core.int, [core.int, core.int])))(),
    PdfDictOfPdfIndirect: () => (T$.PdfDictOfPdfIndirect = dart.constFn(data_types.PdfDict$(data_types.PdfIndirect)))(),
    MapEntryOfString$PdfIndirect: () => (T$.MapEntryOfString$PdfIndirect = dart.constFn(core.MapEntry$(core.String, data_types.PdfIndirect)))(),
    PdfObjectOfPdfDataType: () => (T$.PdfObjectOfPdfDataType = dart.constFn(object.PdfObject$(data_types.PdfDataType)))(),
    StringAndPdfObjectOfPdfDataTypeToMapEntryOfString$PdfIndirect: () => (T$.StringAndPdfObjectOfPdfDataTypeToMapEntryOfString$PdfIndirect = dart.constFn(dart.fnType(T$.MapEntryOfString$PdfIndirect(), [core.String, T$.PdfObjectOfPdfDataType()])))(),
    ListOfint: () => (T$.ListOfint = dart.constFn(core.List$(core.int)))(),
    intAndStringToint: () => (T$.intAndStringToint = dart.constFn(dart.fnType(core.int, [core.int, core.String])))(),
    PdfArrayOfPdfDataType: () => (T$.PdfArrayOfPdfDataType = dart.constFn(data_types.PdfArray$(data_types.PdfDataType)))(),
    JSArrayOfPdfPage: () => (T$.JSArrayOfPdfPage = dart.constFn(_interceptors.JSArray$(page.PdfPage)))(),
    intAndintTovoid: () => (T$.intAndintTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.int])))(),
    JSArrayOfPdfXref: () => (T$.JSArrayOfPdfXref = dart.constFn(_interceptors.JSArray$(xref.PdfXref)))(),
    PdfXrefAndPdfXrefToint: () => (T$.PdfXrefAndPdfXrefToint = dart.constFn(dart.fnType(core.int, [xref.PdfXref, xref.PdfXref])))(),
    JSArrayOfint: () => (T$.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    IdentityMapOfString$PdfDataType: () => (T$.IdentityMapOfString$PdfDataType = dart.constFn(_js_helper.IdentityMap$(core.String, data_types.PdfDataType)))(),
    intAndStringTovoid: () => (T$.intAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.String])))(),
    IdentityMapOfint$PdfPageLabel: () => (T$.IdentityMapOfint$PdfPageLabel = dart.constFn(_js_helper.IdentityMap$(core.int, page_label.PdfPageLabel)))(),
    SyncIterableOfString: () => (T$.SyncIterableOfString = dart.constFn(_js_helper.SyncIterable$(core.String)))(),
    JSArrayOfPdfOutline: () => (T$.JSArrayOfPdfOutline = dart.constFn(_interceptors.JSArray$(outline.PdfOutline)))(),
    PdfDictOfPdfArrayOfPdfDataType: () => (T$.PdfDictOfPdfArrayOfPdfDataType = dart.constFn(data_types.PdfDict$(T$.PdfArrayOfPdfDataType())))(),
    JSArrayOfPdfDataType: () => (T$.JSArrayOfPdfDataType = dart.constFn(_interceptors.JSArray$(data_types.PdfDataType)))(),
    IdentityMapOfString$PdfArrayOfPdfDataType: () => (T$.IdentityMapOfString$PdfArrayOfPdfDataType = dart.constFn(_js_helper.IdentityMap$(core.String, T$.PdfArrayOfPdfDataType())))(),
    PdfArrayOfPdfSecString: () => (T$.PdfArrayOfPdfSecString = dart.constFn(data_types.PdfArray$(data_types.PdfSecString)))(),
    JSArrayOfPdfSecString: () => (T$.JSArrayOfPdfSecString = dart.constFn(_interceptors.JSArray$(data_types.PdfSecString)))(),
    IdentityMapOfString$PdfIndirect: () => (T$.IdentityMapOfString$PdfIndirect = dart.constFn(_js_helper.IdentityMap$(core.String, data_types.PdfIndirect)))(),
    JSArrayOfPdfAnnot: () => (T$.JSArrayOfPdfAnnot = dart.constFn(_interceptors.JSArray$(annotation.PdfAnnot)))(),
    PdfAnnotFlagsToint: () => (T$.PdfAnnotFlagsToint = dart.constFn(dart.fnType(core.int, [annotation.PdfAnnotFlags])))(),
    JSArrayOfnum: () => (T$.JSArrayOfnum = dart.constFn(_interceptors.JSArray$(core.num)))(),
    PdfPointToPdfPoint: () => (T$.PdfPointToPdfPoint = dart.constFn(dart.fnType(point.PdfPoint, [point.PdfPoint])))(),
    ListOfnum: () => (T$.ListOfnum = dart.constFn(core.List$(core.num)))(),
    ListOfListOfnum: () => (T$.ListOfListOfnum = dart.constFn(core.List$(T$.ListOfnum())))(),
    PdfArrayOfPdfNum: () => (T$.PdfArrayOfPdfNum = dart.constFn(data_types.PdfArray$(data_types.PdfNum)))(),
    PdfArrayOfPdfArrayOfPdfNum: () => (T$.PdfArrayOfPdfArrayOfPdfNum = dart.constFn(data_types.PdfArray$(T$.PdfArrayOfPdfNum())))(),
    ListOfnumToPdfArrayOfPdfNum: () => (T$.ListOfnumToPdfArrayOfPdfNum = dart.constFn(dart.fnType(T$.PdfArrayOfPdfNum(), [T$.ListOfnum()])))(),
    PdfFieldFlagsToint: () => (T$.PdfFieldFlagsToint = dart.constFn(dart.fnType(core.int, [annotation.PdfFieldFlags])))(),
    JSArrayOfdouble: () => (T$.JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(core.double)))(),
    IdentityMapOfString$PdfFont: () => (T$.IdentityMapOfString$PdfFont = dart.constFn(_js_helper.IdentityMap$(core.String, font.PdfFont)))(),
    IdentityMapOfString$PdfShading: () => (T$.IdentityMapOfString$PdfShading = dart.constFn(_js_helper.IdentityMap$(core.String, shading.PdfShading)))(),
    IdentityMapOfString$PdfPattern: () => (T$.IdentityMapOfString$PdfPattern = dart.constFn(_js_helper.IdentityMap$(core.String, pattern.PdfPattern)))(),
    IdentityMapOfString$PdfXObject: () => (T$.IdentityMapOfString$PdfXObject = dart.constFn(_js_helper.IdentityMap$(core.String, xobject.PdfXObject)))(),
    PdfArrayOfPdfName: () => (T$.PdfArrayOfPdfName = dart.constFn(data_types.PdfArray$(data_types.PdfName)))(),
    doubleN: () => (T$.doubleN = dart.constFn(dart.nullable(core.double)))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))(),
    LinkedMapOfPdfExifTag$dynamic: () => (T$.LinkedMapOfPdfExifTag$dynamic = dart.constFn(_js_helper.LinkedMap$(exif.PdfExifTag, dart.dynamic)))(),
    JSArrayOfListOfint: () => (T$.JSArrayOfListOfint = dart.constFn(_interceptors.JSArray$(T$.ListOfint())))(),
    intToint: () => (T$.intToint = dart.constFn(dart.fnType(core.int, [core.int])))(),
    PdfArrayOfPdfBool: () => (T$.PdfArrayOfPdfBool = dart.constFn(data_types.PdfArray$(data_types.PdfBool)))(),
    JSArrayOfPdfBool: () => (T$.JSArrayOfPdfBool = dart.constFn(_interceptors.JSArray$(data_types.PdfBool)))(),
    PdfArrayOfPdfIndirect: () => (T$.PdfArrayOfPdfIndirect = dart.constFn(data_types.PdfArray$(data_types.PdfIndirect)))(),
    PdfObjectOfPdfDataTypeToPdfIndirect: () => (T$.PdfObjectOfPdfDataTypeToPdfIndirect = dart.constFn(dart.fnType(data_types.PdfIndirect, [T$.PdfObjectOfPdfDataType()])))(),
    numToPdfNum: () => (T$.numToPdfNum = dart.constFn(dart.fnType(data_types.PdfNum, [core.num])))(),
    PdfArrayOfPdfDictOfPdfDataType: () => (T$.PdfArrayOfPdfDictOfPdfDataType = dart.constFn(data_types.PdfArray$(T$.PdfDictOfPdfDataType())))(),
    JSArrayOfPdfDictOfPdfDataType: () => (T$.JSArrayOfPdfDictOfPdfDataType = dart.constFn(_interceptors.JSArray$(T$.PdfDictOfPdfDataType())))(),
    intTovoid: () => (T$.intTovoid = dart.constFn(dart.fnType(dart.void, [core.int])))(),
    ListQueueOf_PdfGraphicsContext: () => (T$.ListQueueOf_PdfGraphicsContext = dart.constFn(collection.ListQueue$(graphics._PdfGraphicsContext)))(),
    ListOfPdfColor: () => (T$.ListOfPdfColor = dart.constFn(core.List$(color$.PdfColor)))(),
    ListOfdouble: () => (T$.ListOfdouble = dart.constFn(core.List$(core.double)))(),
    JSArrayOfPdfFunction: () => (T$.JSArrayOfPdfFunction = dart.constFn(_interceptors.JSArray$($function.PdfFunction)))(),
    JSArrayOfPdfColor: () => (T$.JSArrayOfPdfColor = dart.constFn(_interceptors.JSArray$(color$.PdfColor)))(),
    JSArrayOfPdfGraphicState: () => (T$.JSArrayOfPdfGraphicState = dart.constFn(_interceptors.JSArray$(graphic_state.PdfGraphicState)))(),
    LinkedHashSetOfPdfObjectOfPdfDataType: () => (T$.LinkedHashSetOfPdfObjectOfPdfDataType = dart.constFn(collection.LinkedHashSet$(T$.PdfObjectOfPdfDataType())))(),
    LinkedHashSetOfPdfFont: () => (T$.LinkedHashSetOfPdfFont = dart.constFn(collection.LinkedHashSet$(font.PdfFont)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: document$.PdfVersion.prototype,
        [_Enum__name]: "pdf_1_4",
        [_Enum_index]: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: document$.PdfVersion.prototype,
        [_Enum__name]: "pdf_1_5",
        [_Enum_index]: 1
      });
    },
    get C2() {
      return C[2] = dart.constList([37, 194, 165, 194, 177, 195, 171, 10], core.int);
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: signature.PdfSigFlags.prototype,
        [_Enum__name]: "signaturesExist",
        [_Enum_index]: 0
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: signature.PdfSigFlags.prototype,
        [_Enum__name]: "appendOnly",
        [_Enum_index]: 1
      });
    },
    get C3() {
      return C[3] = dart.constList([C[4] || CT.C4, C[5] || CT.C5], signature.PdfSigFlags);
    },
    get C6() {
      return C[6] = dart.constMap(core.String, dart.Never, []);
    },
    get C7() {
      return C[7] = dart.constList([60, 60], core.int);
    },
    get C8() {
      return C[8] = dart.constList([62, 62], core.int);
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: xref.PdfCrossRefEntryType.prototype,
        [_Enum__name]: "free",
        [_Enum_index]: 0
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: xref.PdfCrossRefEntryType.prototype,
        [_Enum__name]: "inUse",
        [_Enum_index]: 1
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: xref.PdfCrossRefEntryType.prototype,
        [_Enum__name]: "compressed",
        [_Enum_index]: 2
      });
    },
    get C9() {
      return C[9] = dart.constList([C[10] || CT.C10, C[11] || CT.C11, C[12] || CT.C12], xref.PdfCrossRefEntryType);
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: xref.PdfXref.prototype,
        [type$]: C[10] || CT.C10,
        [generation$]: 65535,
        [object$]: null,
        [offset$]: 0,
        [id$]: 0
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/XRef"
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: page_label.PdfPageLabelStyle.prototype,
        [_Enum__name]: "arabic",
        [_Enum_index]: 0
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: page_label.PdfPageLabelStyle.prototype,
        [_Enum__name]: "romanUpper",
        [_Enum_index]: 1
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: page_label.PdfPageLabelStyle.prototype,
        [_Enum__name]: "romanLower",
        [_Enum_index]: 2
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: page_label.PdfPageLabelStyle.prototype,
        [_Enum__name]: "lettersUpper",
        [_Enum_index]: 3
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: page_label.PdfPageLabelStyle.prototype,
        [_Enum__name]: "lettersLower",
        [_Enum_index]: 4
      });
    },
    get C15() {
      return C[15] = dart.constList([C[16] || CT.C16, C[17] || CT.C17, C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20], page_label.PdfPageLabelStyle);
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/D"
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/R"
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/r"
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/A"
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/a"
      });
    },
    get C26() {
      return C[26] = dart.constMap(core.int, core.String, [1000, "M", 900, "CM", 500, "D", 400, "CD,", 100, "C", 90, "XC", 50, "L", 40, "XL", 10, "X", 9, "IX", 5, "V", 4, "IV", 1, "I"]);
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: outline.PdfOutlineMode.prototype,
        [_Enum__name]: "fitPage",
        [_Enum_index]: 0
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: outline.PdfOutlineMode.prototype,
        [_Enum__name]: "fitRect",
        [_Enum_index]: 1
      });
    },
    get C27() {
      return C[27] = dart.constList([C[28] || CT.C28, C[29] || CT.C29], outline.PdfOutlineMode);
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: outline.PdfOutlineStyle.prototype,
        [_Enum__name]: "normal",
        [_Enum_index]: 0
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: outline.PdfOutlineStyle.prototype,
        [_Enum__name]: "italic",
        [_Enum_index]: 1
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: outline.PdfOutlineStyle.prototype,
        [_Enum__name]: "bold",
        [_Enum_index]: 2
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: outline.PdfOutlineStyle.prototype,
        [_Enum__name]: "italicBold",
        [_Enum_index]: 3
      });
    },
    get C30() {
      return C[30] = dart.constList([C[31] || CT.C31, C[32] || CT.C32, C[33] || CT.C33, C[34] || CT.C34], outline.PdfOutlineStyle);
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Fit"
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/FitR"
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/XYZ"
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: data_types.PdfNull.prototype
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/XML"
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/FlateDecode"
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/ASCII85Decode"
      });
    },
    get C42() {
      return C[42] = dart.constList(["/UseNone", "/UseOutlines", "/UseThumbs", "/FullScreen"], core.String);
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: zlib_encoder.ZLibEncoder.prototype
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: border.PdfBorderStyle.prototype,
        [_Enum__name]: "solid",
        [_Enum_index]: 0
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: border.PdfBorderStyle.prototype,
        [_Enum__name]: "dashed",
        [_Enum_index]: 1
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: border.PdfBorderStyle.prototype,
        [_Enum__name]: "beveled",
        [_Enum_index]: 2
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: border.PdfBorderStyle.prototype,
        [_Enum__name]: "inset",
        [_Enum_index]: 3
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: border.PdfBorderStyle.prototype,
        [_Enum__name]: "underlined",
        [_Enum_index]: 4
      });
    },
    get C44() {
      return C[44] = dart.constList([C[45] || CT.C45, C[46] || CT.C46, C[47] || CT.C47, C[48] || CT.C48, C[49] || CT.C49], border.PdfBorderStyle);
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_Enum__name]: "invisible",
        [_Enum_index]: 0
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_Enum__name]: "hidden",
        [_Enum_index]: 1
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_Enum__name]: "print",
        [_Enum_index]: 2
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_Enum__name]: "noZoom",
        [_Enum_index]: 3
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_Enum__name]: "noRotate",
        [_Enum_index]: 4
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_Enum__name]: "noView",
        [_Enum_index]: 5
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_Enum__name]: "readOnly",
        [_Enum_index]: 6
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_Enum__name]: "locked",
        [_Enum_index]: 7
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_Enum__name]: "toggleNoView",
        [_Enum_index]: 8
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_Enum__name]: "lockedContent",
        [_Enum_index]: 9
      });
    },
    get C50() {
      return C[50] = dart.constList([C[51] || CT.C51, C[52] || CT.C52, C[53] || CT.C53, C[54] || CT.C54, C[55] || CT.C55, C[56] || CT.C56, C[57] || CT.C57, C[58] || CT.C58, C[59] || CT.C59, C[60] || CT.C60], annotation.PdfAnnotFlags);
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: annotation.PdfAnnotAppearance.prototype,
        [_Enum__name]: "normal",
        [_Enum_index]: 0
      });
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: annotation.PdfAnnotAppearance.prototype,
        [_Enum__name]: "rollover",
        [_Enum_index]: 1
      });
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: annotation.PdfAnnotAppearance.prototype,
        [_Enum__name]: "down",
        [_Enum_index]: 2
      });
    },
    get C61() {
      return C[61] = dart.constList([C[62] || CT.C62, C[63] || CT.C63, C[64] || CT.C64], annotation.PdfAnnotAppearance);
    },
    get C65() {
      return C[65] = dart.constList([0, 0, 0], core.num);
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/GoTo"
      });
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/URI"
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: annotation.PdfAnnotHighlighting.prototype,
        [_Enum__name]: "none",
        [_Enum_index]: 0
      });
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: annotation.PdfAnnotHighlighting.prototype,
        [_Enum__name]: "invert",
        [_Enum_index]: 1
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: annotation.PdfAnnotHighlighting.prototype,
        [_Enum__name]: "outline",
        [_Enum_index]: 2
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: annotation.PdfAnnotHighlighting.prototype,
        [_Enum__name]: "push",
        [_Enum_index]: 3
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: annotation.PdfAnnotHighlighting.prototype,
        [_Enum__name]: "toggle",
        [_Enum_index]: 4
      });
    },
    get C68() {
      return C[68] = dart.constList([C[69] || CT.C69, C[70] || CT.C70, C[71] || CT.C71, C[72] || CT.C72, C[73] || CT.C73], annotation.PdfAnnotHighlighting);
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/N"
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/I"
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/O"
      });
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/P"
      });
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/T"
      });
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "readOnly",
        [_Enum_index]: 0
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "mandatory",
        [_Enum_index]: 1
      });
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "noExport",
        [_Enum_index]: 2
      });
    },
    get C83() {
      return C[83] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "reserved4",
        [_Enum_index]: 3
      });
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "reserved5",
        [_Enum_index]: 4
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "reserved6",
        [_Enum_index]: 5
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "reserved7",
        [_Enum_index]: 6
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "reserved8",
        [_Enum_index]: 7
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "reserved9",
        [_Enum_index]: 8
      });
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "reserved10",
        [_Enum_index]: 9
      });
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "reserved11",
        [_Enum_index]: 10
      });
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "reserved12",
        [_Enum_index]: 11
      });
    },
    get C92() {
      return C[92] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "multiline",
        [_Enum_index]: 12
      });
    },
    get C93() {
      return C[93] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "password",
        [_Enum_index]: 13
      });
    },
    get C94() {
      return C[94] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "noToggleToOff",
        [_Enum_index]: 14
      });
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "radio",
        [_Enum_index]: 15
      });
    },
    get C96() {
      return C[96] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "pushButton",
        [_Enum_index]: 16
      });
    },
    get C97() {
      return C[97] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "combo",
        [_Enum_index]: 17
      });
    },
    get C98() {
      return C[98] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "edit",
        [_Enum_index]: 18
      });
    },
    get C99() {
      return C[99] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "sort",
        [_Enum_index]: 19
      });
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "fileSelect",
        [_Enum_index]: 20
      });
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "multiSelect",
        [_Enum_index]: 21
      });
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "doNotSpellCheck",
        [_Enum_index]: 22
      });
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "doNotScroll",
        [_Enum_index]: 23
      });
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "comb",
        [_Enum_index]: 24
      });
    },
    get C105() {
      return C[105] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "radiosInUnison",
        [_Enum_index]: 25
      });
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: annotation.PdfFieldFlags.prototype,
        [_Enum__name]: "commitOnSelChange",
        [_Enum_index]: 26
      });
    },
    get C79() {
      return C[79] = dart.constList([C[80] || CT.C80, C[81] || CT.C81, C[82] || CT.C82, C[83] || CT.C83, C[84] || CT.C84, C[85] || CT.C85, C[86] || CT.C86, C[87] || CT.C87, C[88] || CT.C88, C[89] || CT.C89, C[90] || CT.C90, C[91] || CT.C91, C[92] || CT.C92, C[93] || CT.C93, C[94] || CT.C94, C[95] || CT.C95, C[96] || CT.C96, C[97] || CT.C97, C[98] || CT.C98, C[99] || CT.C99, C[100] || CT.C100, C[101] || CT.C101, C[102] || CT.C102, C[103] || CT.C103, C[104] || CT.C104, C[105] || CT.C105, C[106] || CT.C106], annotation.PdfFieldFlags);
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: annotation.PdfTextFieldAlign.prototype,
        [_Enum__name]: "left",
        [_Enum_index]: 0
      });
    },
    get C109() {
      return C[109] = dart.const({
        __proto__: annotation.PdfTextFieldAlign.prototype,
        [_Enum__name]: "center",
        [_Enum_index]: 1
      });
    },
    get C110() {
      return C[110] = dart.const({
        __proto__: annotation.PdfTextFieldAlign.prototype,
        [_Enum__name]: "right",
        [_Enum_index]: 2
      });
    },
    get C107() {
      return C[107] = dart.constList([C[108] || CT.C108, C[109] || CT.C109, C[110] || CT.C110], annotation.PdfTextFieldAlign);
    },
    get C112() {
      return C[112] = dart.const({
        __proto__: page.PdfPageRotation.prototype,
        [_Enum__name]: "none",
        [_Enum_index]: 0
      });
    },
    get C113() {
      return C[113] = dart.const({
        __proto__: page.PdfPageRotation.prototype,
        [_Enum__name]: "rotate90",
        [_Enum_index]: 1
      });
    },
    get C114() {
      return C[114] = dart.const({
        __proto__: page.PdfPageRotation.prototype,
        [_Enum__name]: "rotate180",
        [_Enum_index]: 2
      });
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: page.PdfPageRotation.prototype,
        [_Enum__name]: "rotate270",
        [_Enum_index]: 3
      });
    },
    get C111() {
      return C[111] = dart.constList([C[112] || CT.C112, C[113] || CT.C113, C[114] || CT.C114, C[115] || CT.C115], page.PdfPageRotation);
    },
    get C116() {
      return C[116] = dart.const({
        __proto__: page_format.PdfPageFormat.prototype,
        [PdfPageFormat_marginRight]: 56.69291338582677,
        [PdfPageFormat_marginLeft]: 56.69291338582677,
        [PdfPageFormat_marginBottom]: 56.69291338582677,
        [PdfPageFormat_marginTop]: 56.69291338582677,
        [PdfPageFormat_height]: 841.8897637795275,
        [PdfPageFormat_width]: 595.275590551181
      });
    },
    get C118() {
      return C[118] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/PDF"
      });
    },
    get C119() {
      return C[119] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Text"
      });
    },
    get C120() {
      return C[120] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/ImageB"
      });
    },
    get C121() {
      return C[121] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/ImageC"
      });
    },
    get C117() {
      return C[117] = dart.constList([C[118] || CT.C118, C[119] || CT.C119, C[120] || CT.C120, C[121] || CT.C121], data_types.PdfName);
    },
    get C122() {
      return C[122] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Group"
      });
    },
    get C123() {
      return C[123] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Transparency"
      });
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/DeviceRGB"
      });
    },
    get C126() {
      return C[126] = dart.const({
        __proto__: image$0.PdfImageOrientation.prototype,
        [_Enum__name]: "topLeft",
        [_Enum_index]: 0
      });
    },
    get C127() {
      return C[127] = dart.const({
        __proto__: image$0.PdfImageOrientation.prototype,
        [_Enum__name]: "topRight",
        [_Enum_index]: 1
      });
    },
    get C128() {
      return C[128] = dart.const({
        __proto__: image$0.PdfImageOrientation.prototype,
        [_Enum__name]: "bottomRight",
        [_Enum_index]: 2
      });
    },
    get C129() {
      return C[129] = dart.const({
        __proto__: image$0.PdfImageOrientation.prototype,
        [_Enum__name]: "bottomLeft",
        [_Enum_index]: 3
      });
    },
    get C130() {
      return C[130] = dart.const({
        __proto__: image$0.PdfImageOrientation.prototype,
        [_Enum__name]: "leftTop",
        [_Enum_index]: 4
      });
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: image$0.PdfImageOrientation.prototype,
        [_Enum__name]: "rightTop",
        [_Enum_index]: 5
      });
    },
    get C132() {
      return C[132] = dart.const({
        __proto__: image$0.PdfImageOrientation.prototype,
        [_Enum__name]: "rightBottom",
        [_Enum_index]: 6
      });
    },
    get C133() {
      return C[133] = dart.const({
        __proto__: image$0.PdfImageOrientation.prototype,
        [_Enum__name]: "leftBottom",
        [_Enum_index]: 7
      });
    },
    get C125() {
      return C[125] = dart.constList([C[126] || CT.C126, C[127] || CT.C127, C[128] || CT.C128, C[129] || CT.C129, C[130] || CT.C130, C[131] || CT.C131, C[132] || CT.C132, C[133] || CT.C133], image$0.PdfImageOrientation);
    },
    get C135() {
      return C[135] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "ExifVersion",
        [_Enum_index]: 0
      });
    },
    get C136() {
      return C[136] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "FlashpixVersion",
        [_Enum_index]: 1
      });
    },
    get C137() {
      return C[137] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "ColorSpace",
        [_Enum_index]: 2
      });
    },
    get C138() {
      return C[138] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "PixelXDimension",
        [_Enum_index]: 3
      });
    },
    get C139() {
      return C[139] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "PixelYDimension",
        [_Enum_index]: 4
      });
    },
    get C140() {
      return C[140] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "ComponentsConfiguration",
        [_Enum_index]: 5
      });
    },
    get C141() {
      return C[141] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "CompressedBitsPerPixel",
        [_Enum_index]: 6
      });
    },
    get C142() {
      return C[142] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "MakerNote",
        [_Enum_index]: 7
      });
    },
    get C143() {
      return C[143] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "UserComment",
        [_Enum_index]: 8
      });
    },
    get C144() {
      return C[144] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "RelatedSoundFile",
        [_Enum_index]: 9
      });
    },
    get C145() {
      return C[145] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "DateTimeOriginal",
        [_Enum_index]: 10
      });
    },
    get C146() {
      return C[146] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "DateTimeDigitized",
        [_Enum_index]: 11
      });
    },
    get C147() {
      return C[147] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "SubsecTime",
        [_Enum_index]: 12
      });
    },
    get C148() {
      return C[148] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "SubsecTimeOriginal",
        [_Enum_index]: 13
      });
    },
    get C149() {
      return C[149] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "SubsecTimeDigitized",
        [_Enum_index]: 14
      });
    },
    get C150() {
      return C[150] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "ExposureTime",
        [_Enum_index]: 15
      });
    },
    get C151() {
      return C[151] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "FNumber",
        [_Enum_index]: 16
      });
    },
    get C152() {
      return C[152] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "ExposureProgram",
        [_Enum_index]: 17
      });
    },
    get C153() {
      return C[153] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "SpectralSensitivity",
        [_Enum_index]: 18
      });
    },
    get C154() {
      return C[154] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "ISOSpeedRatings",
        [_Enum_index]: 19
      });
    },
    get C155() {
      return C[155] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "OECF",
        [_Enum_index]: 20
      });
    },
    get C156() {
      return C[156] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "ShutterSpeedValue",
        [_Enum_index]: 21
      });
    },
    get C157() {
      return C[157] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "ApertureValue",
        [_Enum_index]: 22
      });
    },
    get C158() {
      return C[158] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "BrightnessValue",
        [_Enum_index]: 23
      });
    },
    get C159() {
      return C[159] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "ExposureBias",
        [_Enum_index]: 24
      });
    },
    get C160() {
      return C[160] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "MaxApertureValue",
        [_Enum_index]: 25
      });
    },
    get C161() {
      return C[161] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "SubjectDistance",
        [_Enum_index]: 26
      });
    },
    get C162() {
      return C[162] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "MeteringMode",
        [_Enum_index]: 27
      });
    },
    get C163() {
      return C[163] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "LightSource",
        [_Enum_index]: 28
      });
    },
    get C164() {
      return C[164] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "Flash",
        [_Enum_index]: 29
      });
    },
    get C165() {
      return C[165] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "SubjectArea",
        [_Enum_index]: 30
      });
    },
    get C166() {
      return C[166] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "FocalLength",
        [_Enum_index]: 31
      });
    },
    get C167() {
      return C[167] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "FlashEnergy",
        [_Enum_index]: 32
      });
    },
    get C168() {
      return C[168] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "SpatialFrequencyResponse",
        [_Enum_index]: 33
      });
    },
    get C169() {
      return C[169] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "FocalPlaneXResolution",
        [_Enum_index]: 34
      });
    },
    get C170() {
      return C[170] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "FocalPlaneYResolution",
        [_Enum_index]: 35
      });
    },
    get C171() {
      return C[171] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "FocalPlaneResolutionUnit",
        [_Enum_index]: 36
      });
    },
    get C172() {
      return C[172] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "SubjectLocation",
        [_Enum_index]: 37
      });
    },
    get C173() {
      return C[173] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "ExposureIndex",
        [_Enum_index]: 38
      });
    },
    get C174() {
      return C[174] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "SensingMethod",
        [_Enum_index]: 39
      });
    },
    get C175() {
      return C[175] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "FileSource",
        [_Enum_index]: 40
      });
    },
    get C176() {
      return C[176] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "SceneType",
        [_Enum_index]: 41
      });
    },
    get C177() {
      return C[177] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "CFAPattern",
        [_Enum_index]: 42
      });
    },
    get C178() {
      return C[178] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "CustomRendered",
        [_Enum_index]: 43
      });
    },
    get C179() {
      return C[179] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "ExposureMode",
        [_Enum_index]: 44
      });
    },
    get C180() {
      return C[180] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "WhiteBalance",
        [_Enum_index]: 45
      });
    },
    get C181() {
      return C[181] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "DigitalZoomRation",
        [_Enum_index]: 46
      });
    },
    get C182() {
      return C[182] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "FocalLengthIn35mmFilm",
        [_Enum_index]: 47
      });
    },
    get C183() {
      return C[183] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "SceneCaptureType",
        [_Enum_index]: 48
      });
    },
    get C184() {
      return C[184] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "GainControl",
        [_Enum_index]: 49
      });
    },
    get C185() {
      return C[185] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "Contrast",
        [_Enum_index]: 50
      });
    },
    get C186() {
      return C[186] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "Saturation",
        [_Enum_index]: 51
      });
    },
    get C187() {
      return C[187] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "Sharpness",
        [_Enum_index]: 52
      });
    },
    get C188() {
      return C[188] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "DeviceSettingDescription",
        [_Enum_index]: 53
      });
    },
    get C189() {
      return C[189] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "SubjectDistanceRange",
        [_Enum_index]: 54
      });
    },
    get C190() {
      return C[190] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "InteroperabilityIFDPointer",
        [_Enum_index]: 55
      });
    },
    get C191() {
      return C[191] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "ImageUniqueID",
        [_Enum_index]: 56
      });
    },
    get C192() {
      return C[192] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "ImageWidth",
        [_Enum_index]: 57
      });
    },
    get C193() {
      return C[193] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "ImageHeight",
        [_Enum_index]: 58
      });
    },
    get C194() {
      return C[194] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "ExifIFDPointer",
        [_Enum_index]: 59
      });
    },
    get C195() {
      return C[195] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "GPSInfoIFDPointer",
        [_Enum_index]: 60
      });
    },
    get C196() {
      return C[196] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "BitsPerSample",
        [_Enum_index]: 61
      });
    },
    get C197() {
      return C[197] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "Compression",
        [_Enum_index]: 62
      });
    },
    get C198() {
      return C[198] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "PhotometricInterpretation",
        [_Enum_index]: 63
      });
    },
    get C199() {
      return C[199] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "Orientation",
        [_Enum_index]: 64
      });
    },
    get C200() {
      return C[200] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "SamplesPerPixel",
        [_Enum_index]: 65
      });
    },
    get C201() {
      return C[201] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "PlanarConfiguration",
        [_Enum_index]: 66
      });
    },
    get C202() {
      return C[202] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "YCbCrSubSampling",
        [_Enum_index]: 67
      });
    },
    get C203() {
      return C[203] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "YCbCrPositioning",
        [_Enum_index]: 68
      });
    },
    get C204() {
      return C[204] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "XResolution",
        [_Enum_index]: 69
      });
    },
    get C205() {
      return C[205] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "YResolution",
        [_Enum_index]: 70
      });
    },
    get C206() {
      return C[206] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "ResolutionUnit",
        [_Enum_index]: 71
      });
    },
    get C207() {
      return C[207] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "StripOffsets",
        [_Enum_index]: 72
      });
    },
    get C208() {
      return C[208] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "RowsPerStrip",
        [_Enum_index]: 73
      });
    },
    get C209() {
      return C[209] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "StripByteCounts",
        [_Enum_index]: 74
      });
    },
    get C210() {
      return C[210] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "JPEGInterchangeFormat",
        [_Enum_index]: 75
      });
    },
    get C211() {
      return C[211] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "JPEGInterchangeFormatLength",
        [_Enum_index]: 76
      });
    },
    get C212() {
      return C[212] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "TransferFunction",
        [_Enum_index]: 77
      });
    },
    get C213() {
      return C[213] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "WhitePoint",
        [_Enum_index]: 78
      });
    },
    get C214() {
      return C[214] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "PrimaryChromaticities",
        [_Enum_index]: 79
      });
    },
    get C215() {
      return C[215] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "YCbCrCoefficients",
        [_Enum_index]: 80
      });
    },
    get C216() {
      return C[216] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "ReferenceBlackWhite",
        [_Enum_index]: 81
      });
    },
    get C217() {
      return C[217] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "DateTime",
        [_Enum_index]: 82
      });
    },
    get C218() {
      return C[218] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "ImageDescription",
        [_Enum_index]: 83
      });
    },
    get C219() {
      return C[219] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "Make",
        [_Enum_index]: 84
      });
    },
    get C220() {
      return C[220] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "Model",
        [_Enum_index]: 85
      });
    },
    get C221() {
      return C[221] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "Software",
        [_Enum_index]: 86
      });
    },
    get C222() {
      return C[222] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "Artist",
        [_Enum_index]: 87
      });
    },
    get C223() {
      return C[223] = dart.const({
        __proto__: exif.PdfExifTag.prototype,
        [_Enum__name]: "Copyright",
        [_Enum_index]: 88
      });
    },
    get C134() {
      return C[134] = dart.constMap(core.int, exif.PdfExifTag, [36864, C[135] || CT.C135, 40960, C[136] || CT.C136, 40961, C[137] || CT.C137, 40962, C[138] || CT.C138, 40963, C[139] || CT.C139, 37121, C[140] || CT.C140, 37122, C[141] || CT.C141, 37500, C[142] || CT.C142, 37510, C[143] || CT.C143, 40964, C[144] || CT.C144, 36867, C[145] || CT.C145, 36868, C[146] || CT.C146, 37520, C[147] || CT.C147, 37521, C[148] || CT.C148, 37522, C[149] || CT.C149, 33434, C[150] || CT.C150, 33437, C[151] || CT.C151, 34850, C[152] || CT.C152, 34852, C[153] || CT.C153, 34855, C[154] || CT.C154, 34856, C[155] || CT.C155, 37377, C[156] || CT.C156, 37378, C[157] || CT.C157, 37379, C[158] || CT.C158, 37380, C[159] || CT.C159, 37381, C[160] || CT.C160, 37382, C[161] || CT.C161, 37383, C[162] || CT.C162, 37384, C[163] || CT.C163, 37385, C[164] || CT.C164, 37396, C[165] || CT.C165, 37386, C[166] || CT.C166, 41483, C[167] || CT.C167, 41484, C[168] || CT.C168, 41486, C[169] || CT.C169, 41487, C[170] || CT.C170, 41488, C[171] || CT.C171, 41492, C[172] || CT.C172, 41493, C[173] || CT.C173, 41495, C[174] || CT.C174, 41728, C[175] || CT.C175, 41729, C[176] || CT.C176, 41730, C[177] || CT.C177, 41985, C[178] || CT.C178, 41986, C[179] || CT.C179, 41987, C[180] || CT.C180, 41988, C[181] || CT.C181, 41989, C[182] || CT.C182, 41990, C[183] || CT.C183, 41991, C[184] || CT.C184, 41992, C[185] || CT.C185, 41993, C[186] || CT.C186, 41994, C[187] || CT.C187, 41995, C[188] || CT.C188, 41996, C[189] || CT.C189, 40965, C[190] || CT.C190, 42016, C[191] || CT.C191, 256, C[192] || CT.C192, 257, C[193] || CT.C193, 34665, C[194] || CT.C194, 34853, C[195] || CT.C195, 258, C[196] || CT.C196, 259, C[197] || CT.C197, 262, C[198] || CT.C198, 274, C[199] || CT.C199, 277, C[200] || CT.C200, 284, C[201] || CT.C201, 530, C[202] || CT.C202, 531, C[203] || CT.C203, 282, C[204] || CT.C204, 283, C[205] || CT.C205, 296, C[206] || CT.C206, 273, C[207] || CT.C207, 278, C[208] || CT.C208, 279, C[209] || CT.C209, 513, C[210] || CT.C210, 514, C[211] || CT.C211, 301, C[212] || CT.C212, 318, C[213] || CT.C213, 319, C[214] || CT.C214, 529, C[215] || CT.C215, 532, C[216] || CT.C216, 306, C[217] || CT.C217, 270, C[218] || CT.C218, 271, C[219] || CT.C219, 272, C[220] || CT.C220, 305, C[221] || CT.C221, 315, C[222] || CT.C222, 33432, C[223] || CT.C223]);
    },
    get C224() {
      return C[224] = dart.constList([C[135] || CT.C135, C[136] || CT.C136, C[137] || CT.C137, C[138] || CT.C138, C[139] || CT.C139, C[140] || CT.C140, C[141] || CT.C141, C[142] || CT.C142, C[143] || CT.C143, C[144] || CT.C144, C[145] || CT.C145, C[146] || CT.C146, C[147] || CT.C147, C[148] || CT.C148, C[149] || CT.C149, C[150] || CT.C150, C[151] || CT.C151, C[152] || CT.C152, C[153] || CT.C153, C[154] || CT.C154, C[155] || CT.C155, C[156] || CT.C156, C[157] || CT.C157, C[158] || CT.C158, C[159] || CT.C159, C[160] || CT.C160, C[161] || CT.C161, C[162] || CT.C162, C[163] || CT.C163, C[164] || CT.C164, C[165] || CT.C165, C[166] || CT.C166, C[167] || CT.C167, C[168] || CT.C168, C[169] || CT.C169, C[170] || CT.C170, C[171] || CT.C171, C[172] || CT.C172, C[173] || CT.C173, C[174] || CT.C174, C[175] || CT.C175, C[176] || CT.C176, C[177] || CT.C177, C[178] || CT.C178, C[179] || CT.C179, C[180] || CT.C180, C[181] || CT.C181, C[182] || CT.C182, C[183] || CT.C183, C[184] || CT.C184, C[185] || CT.C185, C[186] || CT.C186, C[187] || CT.C187, C[188] || CT.C188, C[189] || CT.C189, C[190] || CT.C190, C[191] || CT.C191, C[192] || CT.C192, C[193] || CT.C193, C[194] || CT.C194, C[195] || CT.C195, C[196] || CT.C196, C[197] || CT.C197, C[198] || CT.C198, C[199] || CT.C199, C[200] || CT.C200, C[201] || CT.C201, C[202] || CT.C202, C[203] || CT.C203, C[204] || CT.C204, C[205] || CT.C205, C[206] || CT.C206, C[207] || CT.C207, C[208] || CT.C208, C[209] || CT.C209, C[210] || CT.C210, C[211] || CT.C211, C[212] || CT.C212, C[213] || CT.C213, C[214] || CT.C214, C[215] || CT.C215, C[216] || CT.C216, C[217] || CT.C217, C[218] || CT.C218, C[219] || CT.C219, C[220] || CT.C220, C[221] || CT.C221, C[222] || CT.C222, C[223] || CT.C223], exif.PdfExifTag);
    },
    get C225() {
      return C[225] = dart.const({
        __proto__: data_types.PdfNum.prototype,
        [PdfNum_value]: 8
      });
    },
    get C226() {
      return C[226] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/RelativeColorimetric"
      });
    },
    get C227() {
      return C[227] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/DCTDecode"
      });
    },
    get C228() {
      return C[228] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/DeviceGray"
      });
    },
    get C230() {
      return C[230] = dart.const({
        __proto__: shading.PdfShadingType.prototype,
        [_Enum__name]: "axial",
        [_Enum_index]: 0
      });
    },
    get C231() {
      return C[231] = dart.const({
        __proto__: shading.PdfShadingType.prototype,
        [_Enum__name]: "radial",
        [_Enum_index]: 1
      });
    },
    get C229() {
      return C[229] = dart.constList([C[230] || CT.C230, C[231] || CT.C231], shading.PdfShadingType);
    },
    get C232() {
      return C[232] = dart.const({
        __proto__: data_types.PdfBool.prototype,
        [PdfBool_value]: true
      });
    },
    get C233() {
      return C[233] = dart.const({
        __proto__: data_types.PdfNum.prototype,
        [PdfNum_value]: 0
      });
    },
    get C234() {
      return C[234] = dart.const({
        __proto__: data_types.PdfNum.prototype,
        [PdfNum_value]: 10
      });
    },
    get C235() {
      return C[235] = dart.const({
        __proto__: data_types.PdfNum.prototype,
        [PdfNum_value]: 79
      });
    },
    get C236() {
      return C[236] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Font"
      });
    },
    get C237() {
      return C[237] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Identity"
      });
    },
    get C238() {
      return C[238] = dart.const({
        __proto__: data_types.PdfNum.prototype,
        [PdfNum_value]: 1000
      });
    },
    get C239() {
      return C[239] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/CIDFontType2"
      });
    },
    get C240() {
      return C[240] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Identity-H"
      });
    },
    get C241() {
      return C[241] = dart.constList([], core.double);
    },
    get C242() {
      return C[242] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/WinAnsiEncoding"
      });
    },
    get C244() {
      return C[244] = dart.const({
        __proto__: graphics.PdfLineJoin.prototype,
        [_Enum__name]: "miter",
        [_Enum_index]: 0
      });
    },
    get C245() {
      return C[245] = dart.const({
        __proto__: graphics.PdfLineJoin.prototype,
        [_Enum__name]: "round",
        [_Enum_index]: 1
      });
    },
    get C246() {
      return C[246] = dart.const({
        __proto__: graphics.PdfLineJoin.prototype,
        [_Enum__name]: "bevel",
        [_Enum_index]: 2
      });
    },
    get C243() {
      return C[243] = dart.constList([C[244] || CT.C244, C[245] || CT.C245, C[246] || CT.C246], graphics.PdfLineJoin);
    },
    get C248() {
      return C[248] = dart.const({
        __proto__: graphics.PdfLineCap.prototype,
        [_Enum__name]: "butt",
        [_Enum_index]: 0
      });
    },
    get C249() {
      return C[249] = dart.const({
        __proto__: graphics.PdfLineCap.prototype,
        [_Enum__name]: "round",
        [_Enum_index]: 1
      });
    },
    get C250() {
      return C[250] = dart.const({
        __proto__: graphics.PdfLineCap.prototype,
        [_Enum__name]: "square",
        [_Enum_index]: 2
      });
    },
    get C247() {
      return C[247] = dart.constList([C[248] || CT.C248, C[249] || CT.C249, C[250] || CT.C250], graphics.PdfLineCap);
    },
    get C252() {
      return C[252] = dart.const({
        __proto__: graphics.PdfTextRenderingMode.prototype,
        [_Enum__name]: "fill",
        [_Enum_index]: 0
      });
    },
    get C253() {
      return C[253] = dart.const({
        __proto__: graphics.PdfTextRenderingMode.prototype,
        [_Enum__name]: "stroke",
        [_Enum_index]: 1
      });
    },
    get C254() {
      return C[254] = dart.const({
        __proto__: graphics.PdfTextRenderingMode.prototype,
        [_Enum__name]: "fillAndStroke",
        [_Enum_index]: 2
      });
    },
    get C255() {
      return C[255] = dart.const({
        __proto__: graphics.PdfTextRenderingMode.prototype,
        [_Enum__name]: "invisible",
        [_Enum_index]: 3
      });
    },
    get C256() {
      return C[256] = dart.const({
        __proto__: graphics.PdfTextRenderingMode.prototype,
        [_Enum__name]: "fillAndClip",
        [_Enum_index]: 4
      });
    },
    get C257() {
      return C[257] = dart.const({
        __proto__: graphics.PdfTextRenderingMode.prototype,
        [_Enum__name]: "strokeAndClip",
        [_Enum_index]: 5
      });
    },
    get C258() {
      return C[258] = dart.const({
        __proto__: graphics.PdfTextRenderingMode.prototype,
        [_Enum__name]: "fillStrokeAndClip",
        [_Enum_index]: 6
      });
    },
    get C259() {
      return C[259] = dart.const({
        __proto__: graphics.PdfTextRenderingMode.prototype,
        [_Enum__name]: "clip",
        [_Enum_index]: 7
      });
    },
    get C251() {
      return C[251] = dart.constList([C[252] || CT.C252, C[253] || CT.C253, C[254] || CT.C254, C[255] || CT.C255, C[256] || CT.C256, C[257] || CT.C257, C[258] || CT.C258, C[259] || CT.C259], graphics.PdfTextRenderingMode);
    },
    get C260() {
      return C[260] = dart.constList([], core.num);
    },
    get C261() {
      return C[261] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Luminosity"
      });
    },
    get C262() {
      return C[262] = dart.constList([0, 1], core.num);
    },
    get C263() {
      return C[263] = dart.constList([0, 1, 0, 1, 0, 1], core.num);
    },
    get C264() {
      return C[264] = dart.const({
        __proto__: data_types.PdfNum.prototype,
        [PdfNum_value]: 3
      });
    },
    get C266() {
      return C[266] = dart.const({
        __proto__: data_types.PdfStringFormat.prototype,
        [_Enum__name]: "binary",
        [_Enum_index]: 0
      });
    },
    get C267() {
      return C[267] = dart.const({
        __proto__: data_types.PdfStringFormat.prototype,
        [_Enum__name]: "literal",
        [_Enum_index]: 1
      });
    },
    get C265() {
      return C[265] = dart.constList([C[266] || CT.C266, C[267] || CT.C267], data_types.PdfStringFormat);
    },
    get C269() {
      return C[269] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "normal",
        [_Enum_index]: 0
      });
    },
    get C270() {
      return C[270] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "multiply",
        [_Enum_index]: 1
      });
    },
    get C271() {
      return C[271] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "screen",
        [_Enum_index]: 2
      });
    },
    get C272() {
      return C[272] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "overlay",
        [_Enum_index]: 3
      });
    },
    get C273() {
      return C[273] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "darken",
        [_Enum_index]: 4
      });
    },
    get C274() {
      return C[274] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "lighten",
        [_Enum_index]: 5
      });
    },
    get C275() {
      return C[275] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "colorDodge",
        [_Enum_index]: 6
      });
    },
    get C276() {
      return C[276] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "colorBurn",
        [_Enum_index]: 7
      });
    },
    get C277() {
      return C[277] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "hardLight",
        [_Enum_index]: 8
      });
    },
    get C278() {
      return C[278] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "softLight",
        [_Enum_index]: 9
      });
    },
    get C279() {
      return C[279] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "difference",
        [_Enum_index]: 10
      });
    },
    get C280() {
      return C[280] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "exclusion",
        [_Enum_index]: 11
      });
    },
    get C281() {
      return C[281] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "hue",
        [_Enum_index]: 12
      });
    },
    get C282() {
      return C[282] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "saturation",
        [_Enum_index]: 13
      });
    },
    get C283() {
      return C[283] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "color",
        [_Enum_index]: 14
      });
    },
    get C284() {
      return C[284] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "luminosity",
        [_Enum_index]: 15
      });
    },
    get C268() {
      return C[268] = dart.constList([C[269] || CT.C269, C[270] || CT.C270, C[271] || CT.C271, C[272] || CT.C272, C[273] || CT.C273, C[274] || CT.C274, C[275] || CT.C275, C[276] || CT.C276, C[277] || CT.C277, C[278] || CT.C278, C[279] || CT.C279, C[280] || CT.C280, C[281] || CT.C281, C[282] || CT.C282, C[283] || CT.C283, C[284] || CT.C284], graphic_state.PdfBlendMode);
    },
    get C285() {
      return C[285] = dart.constList([C[0] || CT.C0, C[1] || CT.C1], document$.PdfVersion);
    },
    get C287() {
      return C[287] = dart.const({
        __proto__: document$.PdfPageMode.prototype,
        [_Enum__name]: "none",
        [_Enum_index]: 0
      });
    },
    get C288() {
      return C[288] = dart.const({
        __proto__: document$.PdfPageMode.prototype,
        [_Enum__name]: "outlines",
        [_Enum_index]: 1
      });
    },
    get C289() {
      return C[289] = dart.const({
        __proto__: document$.PdfPageMode.prototype,
        [_Enum__name]: "thumbs",
        [_Enum_index]: 2
      });
    },
    get C290() {
      return C[290] = dart.const({
        __proto__: document$.PdfPageMode.prototype,
        [_Enum__name]: "fullscreen",
        [_Enum_index]: 3
      });
    },
    get C286() {
      return C[286] = dart.constList([C[287] || CT.C287, C[288] || CT.C288, C[289] || CT.C289, C[290] || CT.C290], document$.PdfPageMode);
    }
  }, false);
  var C = Array(291).fill(void 0);
  var I = [
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/pdf/output.dart",
    "package:pdf/src/pdf/output.dart",
    "package:pdf/src/pdf/obj/signature.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/pdf/obj/signature.dart",
    "package:pdf/src/pdf/obj/object.dart",
    "package:pdf/src/pdf/data_types.dart",
    "package:pdf/src/pdf/obj/object_dict.dart",
    "package:pdf/src/pdf/obj/info.dart",
    "package:pdf/src/pdf/obj/encryption.dart",
    "package:pdf/src/pdf/obj/page_list.dart",
    "package:pdf/src/pdf/xref.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/pdf/xref.dart",
    "package:pdf/src/pdf/obj/page_label.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/pdf/obj/page_label.dart",
    "package:pdf/src/pdf/obj/outline.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/pdf/obj/outline.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/pdf/obj/names.dart",
    "package:pdf/src/pdf/obj/names.dart",
    "package:pdf/src/pdf/obj/metadata.dart",
    "package:pdf/src/pdf/obj/catalog.dart",
    "package:pdf/src/pdf/obj/border.dart",
    "package:pdf/src/pdf/obj/annotation.dart",
    "package:pdf/src/pdf/obj/page.dart",
    "package:pdf/src/pdf/obj/graphic_stream.dart",
    "package:pdf/src/pdf/exif.dart",
    "package:pdf/src/pdf/obj/image.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/pdf/obj/image.dart",
    "package:pdf/src/pdf/obj/object_stream.dart",
    "package:pdf/src/pdf/obj/xobject.dart",
    "package:pdf/src/pdf/obj/shading.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/pdf/obj/shading.dart",
    "package:pdf/src/pdf/obj/pattern.dart",
    "package:pdf/src/pdf/obj/unicode_cmap.dart",
    "package:pdf/src/pdf/obj/font_descriptor.dart",
    "package:pdf/src/pdf/obj/array.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/pdf/obj/font.dart",
    "package:pdf/src/pdf/obj/font.dart",
    "package:pdf/src/pdf/obj/ttffont.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/pdf/obj/type1_font.dart",
    "package:pdf/src/pdf/obj/type1_font.dart",
    "package:pdf/src/pdf/graphics.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/pdf/graphics.dart",
    "package:pdf/src/pdf/obj/smask.dart",
    "package:pdf/src/pdf/obj/function.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/pdf/data_types.dart",
    "package:pdf/src/pdf/graphic_state.dart",
    "package:pdf/src/pdf/document_parser.dart",
    "package:pdf/src/pdf/document.dart"
  ];
  var version$ = dart.privateName(output, "PdfOutput.version");
  var os$ = dart.privateName(output, "PdfOutput.os");
  var xref$ = dart.privateName(output, "PdfOutput.xref");
  var rootID = dart.privateName(output, "PdfOutput.rootID");
  var infoID = dart.privateName(output, "PdfOutput.infoID");
  var encryptID = dart.privateName(output, "PdfOutput.encryptID");
  var signatureID = dart.privateName(output, "PdfOutput.signatureID");
  var verbose$ = dart.privateName(output, "PdfOutput.verbose");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  const Object_PdfDiagnostic$36 = class Object_PdfDiagnostic extends core.Object {};
  (Object_PdfDiagnostic$36.new = function() {
    diagnostic.PdfDiagnostic[dart.mixinNew].call(this);
  }).prototype = Object_PdfDiagnostic$36.prototype;
  dart.applyMixin(Object_PdfDiagnostic$36, diagnostic.PdfDiagnostic);
  output.PdfOutput = class PdfOutput extends Object_PdfDiagnostic$36 {
    get version() {
      return this[version$];
    }
    set version(value) {
      super.version = value;
    }
    get os() {
      return this[os$];
    }
    set os(value) {
      super.os = value;
    }
    get xref() {
      return this[xref$];
    }
    set xref(value) {
      super.xref = value;
    }
    get rootID() {
      return this[rootID];
    }
    set rootID(value) {
      this[rootID] = value;
    }
    get infoID() {
      return this[infoID];
    }
    set infoID(value) {
      this[infoID] = value;
    }
    get encryptID() {
      return this[encryptID];
    }
    set encryptID(value) {
      this[encryptID] = value;
    }
    get signatureID() {
      return this[signatureID];
    }
    set signatureID(value) {
      this[signatureID] = value;
    }
    get verbose() {
      return this[verbose$];
    }
    set verbose(value) {
      super.verbose = value;
    }
    static ['_#new#tearOff'](os, version, verbose) {
      return new output.PdfOutput.new(os, version, verbose);
    }
    get isCompressed() {
      return this.version.index > document$.PdfVersion.pdf_1_4.index;
    }
    write(ob) {
      if (catalog.PdfCatalog.is(ob)) {
        this.rootID = ob;
      } else if (info.PdfInfo.is(ob)) {
        this.infoID = ob;
      } else if (encryption.PdfEncryption.is(ob)) {
        this.encryptID = ob;
      } else if (signature.PdfSignature.is(ob)) {
        if (!(this.signatureID == null)) dart.assertFailed("Only one document signature is allowed", I[0], 93, 14, "signatureID == null");
        this.signatureID = ob;
      }
      this.xref.add(new xref.PdfXref.new(ob.objser, this.os.offset));
      if (!dart.fn(() => {
        if (this.verbose) {
          ob.setInsertion(this.os);
          ob.startStopwatch();
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 98, 12, "() {\n      if (verbose) {\n        ob.setInsertion(os);\n        ob.startStopwatch();\n      }\n      return true;\n    }()");
      ob.write(this.os);
      if (!dart.fn(() => {
        if (this.verbose) {
          ob.stopStopwatch();
          ob.debugFill("Creation time: " + dart.str(ob.elapsedStopwatch / 1000000) + " seconds");
          ob.writeDebug(this.os);
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 106, 12, "() {\n      if (verbose) {\n        ob.stopStopwatch();\n        ob.debugFill(\n            'Creation time: ${ob.elapsedStopwatch / Duration.microsecondsPerSecond} seconds');\n        ob.writeDebug(os);\n      }\n      return true;\n    }()");
    }
    close() {
      return async.async(dart.void, (function* close() {
        if (this.rootID == null) {
          dart.throw(core.Exception.new("Root object is not present in document"));
        }
        let params = T$.PdfDictOfPdfDataType().new();
        params._set("/Size", new data_types.PdfNum.new(dart.nullCheck(this.rootID).pdfDocument.objser));
        params._set("/Root", dart.nullCheck(this.rootID).ref());
        let id = new data_types.PdfString.new(dart.nullCheck(this.rootID).pdfDocument.documentID, data_types.PdfStringFormat.binary);
        params._set("/ID", new (T$.PdfArrayOfPdfString()).new(T$.JSArrayOfPdfString().of([id, id])));
        if (this.infoID != null) {
          params._set("/Info", dart.nullCheck(this.infoID).ref());
        }
        if (this.encryptID != null) {
          params._set("/Encrypt", dart.nullCheck(this.encryptID).ref());
        }
        if (dart.nullCheck(this.rootID).pdfDocument.prev != null) {
          params._set("/Prev", new data_types.PdfNum.new(dart.nullCheck(dart.nullCheck(this.rootID).pdfDocument.prev).xrefOffset));
        }
        let _xref = this.os.offset;
        if (this.isCompressed) {
          this.xref.outputCompressed(dart.nullCheck(this.rootID), this.os, params);
        } else {
          if (!dart.fn(() => {
            if (this.verbose) {
              this.os.putComment("");
              this.os.putComment("-"[$times](78));
            }
            return true;
          }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 152, 14, "() {\n        if (verbose) {\n          os.putComment('');\n          os.putComment('-' * 78);\n        }\n        return true;\n      }()");
          this.xref.output(this.os);
          if (!dart.fn(() => {
            if (this.verbose) {
              this.os.putComment("");
              this.os.putComment("-"[$times](78));
            }
            return true;
          }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 162, 14, "() {\n        if (verbose) {\n          os.putComment('');\n          os.putComment('-' * 78);\n        }\n        return true;\n      }()");
          this.os.putString("trailer\n");
          params.output(this.os, this.verbose ? 0 : null);
          this.os.putByte(10);
        }
        if (!dart.fn(() => {
          if (this.verbose) {
            this.os.putComment("");
            this.os.putComment("-"[$times](78));
          }
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 174, 12, "() {\n      if (verbose) {\n        os.putComment('');\n        os.putComment('-' * 78);\n      }\n      return true;\n    }()");
        this.os.putString("startxref\n" + dart.str(_xref) + "\n%%EOF\n");
        if (!dart.fn(() => {
          if (this.verbose) {
            this.stopStopwatch();
            this.debugFill("Creation time: " + dart.str(this.elapsedStopwatch / 1000000) + " seconds");
            this.debugFill("File size: " + dart.str(this.os.offset) + " bytes");
            this.debugFill("Pages: " + dart.str(dart.nullCheck(this.rootID).pdfDocument.pdfPageList.pages[$length]));
            this.debugFill("Objects: " + dart.str(this.xref.offsets[$length]));
            this.writeDebug(this.os);
          }
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 185, 12, "() {\n      if (verbose) {\n        stopStopwatch();\n        debugFill(\n            'Creation time: ${elapsedStopwatch / Duration.microsecondsPerSecond} seconds');\n        debugFill('File size: ${os.offset} bytes');\n        debugFill('Pages: ${rootID!.pdfDocument.pdfPageList.pages.length}');\n        debugFill('Objects: ${xref.offsets.length}');\n        writeDebug(os);\n      }\n      return true;\n    }()");
        if (this.signatureID != null) {
          yield dart.nullCheck(this.signatureID).writeSignature(this.os);
        }
      }).bind(this));
    }
  };
  (output.PdfOutput.new = function(os, version, verbose) {
    this[xref$] = new xref.PdfXrefTable.new();
    this[rootID] = null;
    this[infoID] = null;
    this[encryptID] = null;
    this[signatureID] = null;
    this[os$] = os;
    this[version$] = version;
    this[verbose$] = verbose;
    output.PdfOutput.__proto__.new.call(this);
    let v = null;
    switch (this.version) {
      case C[0] || CT.C0:
        {
          v = "1.4";
          break;
        }
      case C[1] || CT.C1:
        {
          v = "1.5";
          break;
        }
    }
    this.os.putString("%PDF-" + v + "\n");
    this.os.putBytes(C[2] || CT.C2);
    if (!dart.fn(() => {
      if (this.verbose) {
        this.setInsertion(this.os);
        this.startStopwatch();
        this.debugFill("Verbose dart_pdf");
        this.debugFill("Producer https://github.com/DavBfr/dart_pdf");
        this.debugFill("Creation date: " + dart.str(new core.DateTime.now()));
      }
      return true;
    }, T$.VoidTobool())()) dart.assertFailed(null, I[0], 44, 12, "() {\n      if (verbose) {\n        setInsertion(os);\n        startStopwatch();\n        debugFill('Verbose dart_pdf');\n        debugFill('Producer https://github.com/DavBfr/dart_pdf');\n        debugFill('Creation date: ${DateTime.now()}');\n      }\n      return true;\n    }()");
  }).prototype = output.PdfOutput.prototype;
  dart.addTypeTests(output.PdfOutput);
  dart.addTypeCaches(output.PdfOutput);
  dart.setMethodSignature(output.PdfOutput, () => ({
    __proto__: dart.getMethods(output.PdfOutput.__proto__),
    write: dart.fnType(dart.void, [object.PdfObject$(data_types.PdfDataType)]),
    close: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setGetterSignature(output.PdfOutput, () => ({
    __proto__: dart.getGetters(output.PdfOutput.__proto__),
    isCompressed: core.bool
  }));
  dart.setLibraryUri(output.PdfOutput, I[1]);
  dart.setFieldSignature(output.PdfOutput, () => ({
    __proto__: dart.getFields(output.PdfOutput.__proto__),
    version: dart.finalFieldType(document$.PdfVersion),
    os: dart.finalFieldType(stream.PdfStream),
    xref: dart.finalFieldType(xref.PdfXrefTable),
    rootID: dart.fieldType(dart.nullable(catalog.PdfCatalog)),
    infoID: dart.fieldType(dart.nullable(info.PdfInfo)),
    encryptID: dart.fieldType(dart.nullable(encryption.PdfEncryption)),
    signatureID: dart.fieldType(dart.nullable(signature.PdfSignature)),
    verbose: dart.finalFieldType(core.bool)
  }));
  var _name = dart.privateName(core, "_name");
  signature.PdfSigFlags = class PdfSigFlags extends core._Enum {
    toString() {
      return "PdfSigFlags." + this[_name];
    }
  };
  (signature.PdfSigFlags.new = function(index, name) {
    signature.PdfSigFlags.__proto__.new.call(this, index, name);
    ;
  }).prototype = signature.PdfSigFlags.prototype;
  dart.addTypeTests(signature.PdfSigFlags);
  dart.addTypeCaches(signature.PdfSigFlags);
  dart.setLibraryUri(signature.PdfSigFlags, I[2]);
  dart.setStaticFieldSignature(signature.PdfSigFlags, () => ['values', 'signaturesExist', 'appendOnly']);
  dart.defineExtensionMethods(signature.PdfSigFlags, ['toString']);
  dart.defineLazy(signature.PdfSigFlags, {
    /*signature.PdfSigFlags.values*/get values() {
      return C[3] || CT.C3;
    },
    /*signature.PdfSigFlags.signaturesExist*/get signaturesExist() {
      return C[4] || CT.C4;
    },
    /*signature.PdfSigFlags.appendOnly*/get appendOnly() {
      return C[5] || CT.C5;
    }
  }, false);
  var flags$ = dart.privateName(signature, "PdfSignature.flags");
  var value$ = dart.privateName(signature, "PdfSignature.value");
  var crl$ = dart.privateName(signature, "PdfSignature.crl");
  var cert$ = dart.privateName(signature, "PdfSignature.cert");
  var ocsp$ = dart.privateName(signature, "PdfSignature.ocsp");
  var _offsetStart = dart.privateName(signature, "_offsetStart");
  var _offsetEnd = dart.privateName(signature, "_offsetEnd");
  var params$ = dart.privateName(object, "PdfObject.params");
  var objser$ = dart.privateName(object, "PdfObject.objser");
  var objgen$ = dart.privateName(object, "PdfObject.objgen");
  var pdfDocument$ = dart.privateName(object, "PdfObject.pdfDocument");
  var _writeStart = dart.privateName(object, "_writeStart");
  var _writeEnd = dart.privateName(object, "_writeEnd");
  const _is_PdfObject_default = Symbol('_is_PdfObject_default');
  object.PdfObject$ = dart.generic(T => {
    const Object_PdfDiagnostic$36 = class Object_PdfDiagnostic extends core.Object {};
    (Object_PdfDiagnostic$36.new = function() {
      diagnostic.PdfDiagnostic[dart.mixinNew].call(this);
    }).prototype = Object_PdfDiagnostic$36.prototype;
    dart.applyMixin(Object_PdfDiagnostic$36, diagnostic.PdfDiagnostic);
    class PdfObject extends Object_PdfDiagnostic$36 {
      get params() {
        return this[params$];
      }
      set params(value) {
        super.params = value;
      }
      get objser() {
        return this[objser$];
      }
      set objser(value) {
        super.objser = value;
      }
      get objgen() {
        return this[objgen$];
      }
      set objgen(value) {
        super.objgen = value;
      }
      get pdfDocument() {
        return this[pdfDocument$];
      }
      set pdfDocument(value) {
        super.pdfDocument = value;
      }
      write(os) {
        this.prepare();
        this[_writeStart](os);
        this.writeContent(os);
        this[_writeEnd](os);
      }
      prepare() {
      }
      [_writeStart](os) {
        os.putString(dart.str(this.objser) + " " + dart.str(this.objgen) + " obj\n");
      }
      writeContent(os) {
        this.params.output(os, this.pdfDocument.verbose ? 0 : null);
        os.putByte(10);
      }
      [_writeEnd](os) {
        os.putString("endobj\n");
      }
      ref() {
        return new data_types.PdfIndirect.new(this.objser, this.objgen);
      }
      toString() {
        return dart.str(this[$runtimeType]) + " " + dart.str(this.params);
      }
    }
    (PdfObject.new = function(pdfDocument, opts) {
      let t2;
      let params = opts && 'params' in opts ? opts.params : null;
      let objgen = opts && 'objgen' in opts ? opts.objgen : 0;
      let objser = opts && 'objser' in opts ? opts.objser : null;
      this[pdfDocument$] = pdfDocument;
      this[params$] = params;
      this[objgen$] = objgen;
      this[objser$] = (t2 = objser, t2 == null ? pdfDocument.genSerial() : t2);
      PdfObject.__proto__.new.call(this);
      this.pdfDocument.objects.add(this);
    }).prototype = PdfObject.prototype;
    dart.addTypeTests(PdfObject);
    PdfObject.prototype[_is_PdfObject_default] = true;
    dart.addTypeCaches(PdfObject);
    dart.setMethodSignature(PdfObject, () => ({
      __proto__: dart.getMethods(PdfObject.__proto__),
      write: dart.fnType(dart.void, [stream.PdfStream]),
      prepare: dart.fnType(dart.void, []),
      [_writeStart]: dart.fnType(dart.void, [stream.PdfStream]),
      writeContent: dart.fnType(dart.void, [stream.PdfStream]),
      [_writeEnd]: dart.fnType(dart.void, [stream.PdfStream]),
      ref: dart.fnType(data_types.PdfIndirect, [])
    }));
    dart.setLibraryUri(PdfObject, I[4]);
    dart.setFieldSignature(PdfObject, () => ({
      __proto__: dart.getFields(PdfObject.__proto__),
      params: dart.finalFieldType(T),
      objser: dart.finalFieldType(core.int),
      objgen: dart.finalFieldType(core.int),
      pdfDocument: dart.finalFieldType(document$.PdfDocument)
    }));
    dart.defineExtensionMethods(PdfObject, ['toString']);
    return PdfObject;
  });
  object.PdfObject = object.PdfObject$();
  dart.addTypeTests(object.PdfObject, _is_PdfObject_default);
  var values$ = dart.privateName(data_types, "PdfDict.values");
  var _toStream = dart.privateName(data_types, "_toStream");
  data_types.PdfDataType = class PdfDataType extends core.Object {
    [_toStream]() {
      let s = new stream.PdfStream.new();
      this.output(s);
      return s;
    }
    toString() {
      return core.String.fromCharCodes(this[_toStream]().output());
    }
    toList() {
      return this[_toStream]().output();
    }
  };
  (data_types.PdfDataType.new = function() {
    ;
  }).prototype = data_types.PdfDataType.prototype;
  dart.addTypeTests(data_types.PdfDataType);
  dart.addTypeCaches(data_types.PdfDataType);
  dart.setMethodSignature(data_types.PdfDataType, () => ({
    __proto__: dart.getMethods(data_types.PdfDataType.__proto__),
    [_toStream]: dart.fnType(stream.PdfStream, []),
    toList: dart.fnType(typed_data.Uint8List, [])
  }));
  dart.setLibraryUri(data_types.PdfDataType, I[5]);
  dart.defineExtensionMethods(data_types.PdfDataType, ['toString']);
  const _is_PdfDict_default = Symbol('_is_PdfDict_default');
  data_types.PdfDict$ = dart.generic(T => {
    var __t$StringAndTTovoid = () => (__t$StringAndTTovoid = dart.constFn(dart.fnType(dart.void, [core.String, T])))();
    var __t$PdfDictOfT = () => (__t$PdfDictOfT = dart.constFn(data_types.PdfDict$(T)))();
    class PdfDict extends data_types.PdfDataType {
      get values() {
        return this[values$];
      }
      set values(value) {
        super.values = value;
      }
      static new(values = null) {
        let _values = new (_js_helper.IdentityMap$(core.String, T)).new();
        if (values != null) {
          _values[$addAll](values);
        }
        return new (data_types.PdfDict$(T)).values(_values);
      }
      static ['_#new#tearOff'](T, values = null) {
        return data_types.PdfDict$(T).new(values);
      }
      static ['_#values#tearOff'](T, values = C[6] || CT.C6) {
        return new (data_types.PdfDict$(T)).values(values);
      }
      static fromObjectMap(objects) {
        return T$.PdfDictOfPdfIndirect().new(objects[$map](core.String, data_types.PdfIndirect, dart.fn((key, value) => new (T$.MapEntryOfString$PdfIndirect()).__(key, value.ref()), T$.StringAndPdfObjectOfPdfDataTypeToMapEntryOfString$PdfIndirect())));
      }
      get isNotEmpty() {
        return this.values[$isNotEmpty];
      }
      _set(k, v$) {
        let v = v$;
        T.as(v);
        this.values[$_set](k, v);
        return v$;
      }
      _get(k) {
        return this.values[$_get](k);
      }
      output(s, indent = null) {
        if (indent != null) {
          s.putBytes(T$.ListOfint().filled(indent, 32));
        }
        s.putBytes(C[7] || CT.C7);
        let len = 0;
        let n = 1;
        if (indent != null) {
          s.putByte(10);
          indent = dart.notNull(indent) + 2;
          len = this.values[$keys][$fold](core.int, 0, dart.fn((p, e) => math.max(core.int, p, e.length), T$.intAndStringToint()));
        }
        this.values[$forEach](dart.fn((k, v) => {
          if (indent != null) {
            s.putBytes(T$.ListOfint().filled(indent, 32));
            n = len - k.length + 1;
          }
          s.putString(k);
          if (indent != null) {
            if (T$.PdfDictOfPdfDataType().is(v) || T$.PdfArrayOfPdfDataType().is(v)) {
              s.putByte(10);
            } else {
              s.putBytes(T$.ListOfint().filled(n, 32));
            }
          } else {
            if (data_types.PdfNum.is(v) || data_types.PdfBool.is(v) || data_types.PdfNull.is(v) || data_types.PdfIndirect.is(v)) {
              s.putByte(32);
            }
          }
          v.output(s, indent);
          if (indent != null) {
            s.putByte(10);
          }
        }, __t$StringAndTTovoid()));
        if (indent != null) {
          indent = dart.notNull(indent) - 2;
          s.putBytes(T$.ListOfint().filled(indent, 32));
        }
        s.putBytes(C[8] || CT.C8);
      }
      containsKey(key) {
        return this.values[$containsKey](key);
      }
      merge(other) {
        __t$PdfDictOfT().as(other);
        for (let key of other.values[$keys]) {
          let value = dart.nullCheck(other._get(key));
          let current = this.values[$_get](key);
          if (current == null) {
            this.values[$_set](key, value);
          } else if (T$.PdfArrayOfPdfDataType().is(value) && T$.PdfArrayOfPdfDataType().is(current)) {
            current.values[$addAll](value.values);
            current.uniq();
          } else if (T$.PdfDictOfPdfDataType().is(value) && T$.PdfDictOfPdfDataType().is(current)) {
            current.merge(value);
          } else {
            this.values[$_set](key, value);
          }
        }
      }
      addAll(other) {
        __t$PdfDictOfT().as(other);
        this.values[$addAll](other.values);
      }
      _equals(other) {
        if (other == null) return false;
        if (T$.PdfDictOfPdfDataType().is(other)) {
          return this.values[$_equals](other.values);
        }
        return false;
      }
      get hashCode() {
        return this.values[$hashCode];
      }
    }
    (PdfDict.values = function(values = C[6] || CT.C6) {
      this[values$] = values;
      PdfDict.__proto__.new.call(this);
      ;
    }).prototype = PdfDict.prototype;
    dart.addTypeTests(PdfDict);
    PdfDict.prototype[_is_PdfDict_default] = true;
    dart.addTypeCaches(PdfDict);
    dart.setMethodSignature(PdfDict, () => ({
      __proto__: dart.getMethods(PdfDict.__proto__),
      _set: dart.fnType(dart.void, [core.String, dart.nullable(core.Object)]),
      _get: dart.fnType(dart.nullable(T), [core.String]),
      output: dart.fnType(dart.void, [stream.PdfStream], [dart.nullable(core.int)]),
      containsKey: dart.fnType(core.bool, [core.String]),
      merge: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setStaticMethodSignature(PdfDict, () => ['new', 'fromObjectMap']);
    dart.setGetterSignature(PdfDict, () => ({
      __proto__: dart.getGetters(PdfDict.__proto__),
      isNotEmpty: core.bool
    }));
    dart.setLibraryUri(PdfDict, I[5]);
    dart.setFieldSignature(PdfDict, () => ({
      __proto__: dart.getFields(PdfDict.__proto__),
      values: dart.finalFieldType(core.Map$(core.String, T))
    }));
    dart.defineExtensionMethods(PdfDict, ['_equals']);
    dart.defineExtensionAccessors(PdfDict, ['hashCode']);
    return PdfDict;
  });
  data_types.PdfDict = data_types.PdfDict$();
  dart.addTypeTests(data_types.PdfDict, _is_PdfDict_default);
  object_dict.PdfObjectDict = class PdfObjectDict extends object.PdfObject$(data_types.PdfDict$(data_types.PdfDataType)) {
    static ['_#new#tearOff'](pdfDocument, opts) {
      let type = opts && 'type' in opts ? opts.type : null;
      let objgen = opts && 'objgen' in opts ? opts.objgen : 0;
      let objser = opts && 'objser' in opts ? opts.objser : null;
      return new object_dict.PdfObjectDict.new(pdfDocument, {type: type, objgen: objgen, objser: objser});
    }
    writeContent(os) {
      if (this.params.isNotEmpty) {
        this.params.output(os, this.pdfDocument.verbose ? 0 : null);
        os.putByte(10);
      }
    }
  };
  (object_dict.PdfObjectDict.new = function(pdfDocument, opts) {
    let type = opts && 'type' in opts ? opts.type : null;
    let objgen = opts && 'objgen' in opts ? opts.objgen : 0;
    let objser = opts && 'objser' in opts ? opts.objser : null;
    object_dict.PdfObjectDict.__proto__.new.call(this, pdfDocument, {params: T$.PdfDictOfPdfDataType().new(), objgen: objgen, objser: objser});
    if (type != null) {
      this.params._set("/Type", new data_types.PdfName.new(type));
    }
  }).prototype = object_dict.PdfObjectDict.prototype;
  dart.addTypeTests(object_dict.PdfObjectDict);
  dart.addTypeCaches(object_dict.PdfObjectDict);
  dart.setLibraryUri(object_dict.PdfObjectDict, I[6]);
  signature.PdfSignature = class PdfSignature extends object_dict.PdfObjectDict {
    get flags() {
      return this[flags$];
    }
    set flags(value) {
      super.flags = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    get crl() {
      return this[crl$];
    }
    set crl(value) {
      super.crl = value;
    }
    get cert() {
      return this[cert$];
    }
    set cert(value) {
      super.cert = value;
    }
    get ocsp() {
      return this[ocsp$];
    }
    set ocsp(value) {
      super.ocsp = value;
    }
    static ['_#new#tearOff'](pdfDocument, opts) {
      let value = opts && 'value' in opts ? opts.value : null;
      let flags = opts && 'flags' in opts ? opts.flags : null;
      let crl = opts && 'crl' in opts ? opts.crl : null;
      let cert = opts && 'cert' in opts ? opts.cert : null;
      let ocsp = opts && 'ocsp' in opts ? opts.ocsp : null;
      return new signature.PdfSignature.new(pdfDocument, {value: value, flags: flags, crl: crl, cert: cert, ocsp: ocsp});
    }
    get flagsValue() {
      return this.flags[$isEmpty] ? 0 : this.flags[$map](core.int, dart.fn(e => (1)[$leftShift](e.index), T$.PdfSigFlagsToint()))[$reduce](dart.fn((a, b) => (a | b) >>> 0, T$.intAndintToint()));
    }
    write(os) {
      this.value.preSign(this, this.params);
      this[_offsetStart] = os.offset + (dart.str(this.objser) + " " + dart.str(this.objgen) + " obj\n").length;
      super.write(os);
      this[_offsetEnd] = os.offset;
    }
    writeSignature(os) {
      return async.async(dart.void, (function* writeSignature() {
        if (!(this[_offsetStart] != null && this[_offsetEnd] != null)) dart.assertFailed("Must reserve the object space before signing the document", I[3], 94, 12, "_offsetStart != null && _offsetEnd != null");
        yield this.value.sign(this, os, this.params, this[_offsetStart], this[_offsetEnd]);
      }).bind(this));
    }
  };
  (signature.PdfSignature.new = function(pdfDocument, opts) {
    let t2, t2$, t2$0;
    let value = opts && 'value' in opts ? opts.value : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let crl = opts && 'crl' in opts ? opts.crl : null;
    let cert = opts && 'cert' in opts ? opts.cert : null;
    let ocsp = opts && 'ocsp' in opts ? opts.ocsp : null;
    this[crl$] = T$.JSArrayOfPdfObjectStream().of([]);
    this[cert$] = T$.JSArrayOfPdfObjectStream().of([]);
    this[ocsp$] = T$.JSArrayOfPdfObjectStream().of([]);
    this[_offsetStart] = null;
    this[_offsetEnd] = null;
    this[value$] = value;
    this[flags$] = flags;
    signature.PdfSignature.__proto__.new.call(this, pdfDocument, {type: "/Sig"});
    if (crl != null) {
      for (let o of crl) {
        this.crl[$add]((t2 = new object_stream.PdfObjectStream.new(pdfDocument), (() => {
          t2.buf.putBytes(o);
          return t2;
        })()));
      }
    }
    if (cert != null) {
      for (let o of cert) {
        this.cert[$add]((t2$ = new object_stream.PdfObjectStream.new(pdfDocument), (() => {
          t2$.buf.putBytes(o);
          return t2$;
        })()));
      }
    }
    if (ocsp != null) {
      for (let o of ocsp) {
        this.ocsp[$add]((t2$0 = new object_stream.PdfObjectStream.new(pdfDocument), (() => {
          t2$0.buf.putBytes(o);
          return t2$0;
        })()));
      }
    }
  }).prototype = signature.PdfSignature.prototype;
  dart.addTypeTests(signature.PdfSignature);
  dart.addTypeCaches(signature.PdfSignature);
  dart.setMethodSignature(signature.PdfSignature, () => ({
    __proto__: dart.getMethods(signature.PdfSignature.__proto__),
    writeSignature: dart.fnType(async.Future$(dart.void), [stream.PdfStream])
  }));
  dart.setGetterSignature(signature.PdfSignature, () => ({
    __proto__: dart.getGetters(signature.PdfSignature.__proto__),
    flagsValue: core.int
  }));
  dart.setLibraryUri(signature.PdfSignature, I[2]);
  dart.setFieldSignature(signature.PdfSignature, () => ({
    __proto__: dart.getFields(signature.PdfSignature.__proto__),
    flags: dart.finalFieldType(core.Set$(signature.PdfSigFlags)),
    value: dart.finalFieldType(signature.PdfSignatureBase),
    crl: dart.finalFieldType(core.List$(object_stream.PdfObjectStream)),
    cert: dart.finalFieldType(core.List$(object_stream.PdfObjectStream)),
    ocsp: dart.finalFieldType(core.List$(object_stream.PdfObjectStream)),
    [_offsetStart]: dart.fieldType(dart.nullable(core.int)),
    [_offsetEnd]: dart.fieldType(dart.nullable(core.int))
  }));
  signature.PdfSignatureBase = class PdfSignatureBase extends core.Object {
    get hasMDP() {
      return false;
    }
  };
  (signature.PdfSignatureBase.new = function() {
    ;
  }).prototype = signature.PdfSignatureBase.prototype;
  dart.addTypeTests(signature.PdfSignatureBase);
  dart.addTypeCaches(signature.PdfSignatureBase);
  dart.setGetterSignature(signature.PdfSignatureBase, () => ({
    __proto__: dart.getGetters(signature.PdfSignatureBase.__proto__),
    hasMDP: core.bool
  }));
  dart.setLibraryUri(signature.PdfSignatureBase, I[2]);
  var author$ = dart.privateName(info, "PdfInfo.author");
  var creator$ = dart.privateName(info, "PdfInfo.creator");
  var title$ = dart.privateName(info, "PdfInfo.title");
  var subject$ = dart.privateName(info, "PdfInfo.subject");
  var keywords$ = dart.privateName(info, "PdfInfo.keywords");
  var producer$ = dart.privateName(info, "PdfInfo.producer");
  info.PdfInfo = class PdfInfo extends object_dict.PdfObjectDict {
    get author() {
      return this[author$];
    }
    set author(value) {
      super.author = value;
    }
    get creator() {
      return this[creator$];
    }
    set creator(value) {
      super.creator = value;
    }
    get title() {
      return this[title$];
    }
    set title(value) {
      super.title = value;
    }
    get subject() {
      return this[subject$];
    }
    set subject(value) {
      super.subject = value;
    }
    get keywords() {
      return this[keywords$];
    }
    set keywords(value) {
      super.keywords = value;
    }
    get producer() {
      return this[producer$];
    }
    set producer(value) {
      super.producer = value;
    }
    static ['_#new#tearOff'](pdfDocument, opts) {
      let title = opts && 'title' in opts ? opts.title : null;
      let author = opts && 'author' in opts ? opts.author : null;
      let creator = opts && 'creator' in opts ? opts.creator : null;
      let subject = opts && 'subject' in opts ? opts.subject : null;
      let keywords = opts && 'keywords' in opts ? opts.keywords : null;
      let producer = opts && 'producer' in opts ? opts.producer : null;
      return new info.PdfInfo.new(pdfDocument, {title: title, author: author, creator: creator, subject: subject, keywords: keywords, producer: producer});
    }
  };
  (info.PdfInfo.new = function(pdfDocument, opts) {
    let title = opts && 'title' in opts ? opts.title : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let creator = opts && 'creator' in opts ? opts.creator : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let keywords = opts && 'keywords' in opts ? opts.keywords : null;
    let producer = opts && 'producer' in opts ? opts.producer : null;
    this[title$] = title;
    this[author$] = author;
    this[creator$] = creator;
    this[subject$] = subject;
    this[keywords$] = keywords;
    this[producer$] = producer;
    info.PdfInfo.__proto__.new.call(this, pdfDocument);
    if (this.author != null) {
      this.params._set("/Author", data_types.PdfSecString.fromString(this, dart.nullCheck(this.author)));
    }
    if (this.creator != null) {
      this.params._set("/Creator", data_types.PdfSecString.fromString(this, dart.nullCheck(this.creator)));
    }
    if (this.title != null) {
      this.params._set("/Title", data_types.PdfSecString.fromString(this, dart.nullCheck(this.title)));
    }
    if (this.subject != null) {
      this.params._set("/Subject", data_types.PdfSecString.fromString(this, dart.nullCheck(this.subject)));
    }
    if (this.keywords != null) {
      this.params._set("/Keywords", data_types.PdfSecString.fromString(this, dart.nullCheck(this.keywords)));
    }
    if (this.producer != null) {
      this.params._set("/Producer", data_types.PdfSecString.fromString(this, dart.str(this.producer) + " (" + info.PdfInfo._libraryName + ")"));
    } else {
      this.params._set("/Producer", data_types.PdfSecString.fromString(this, info.PdfInfo._libraryName));
    }
    this.params._set("/CreationDate", data_types.PdfSecString.fromDate(this, new core.DateTime.now()));
  }).prototype = info.PdfInfo.prototype;
  dart.addTypeTests(info.PdfInfo);
  dart.addTypeCaches(info.PdfInfo);
  dart.setLibraryUri(info.PdfInfo, I[7]);
  dart.setFieldSignature(info.PdfInfo, () => ({
    __proto__: dart.getFields(info.PdfInfo.__proto__),
    author: dart.finalFieldType(dart.nullable(core.String)),
    creator: dart.finalFieldType(dart.nullable(core.String)),
    title: dart.finalFieldType(dart.nullable(core.String)),
    subject: dart.finalFieldType(dart.nullable(core.String)),
    keywords: dart.finalFieldType(dart.nullable(core.String)),
    producer: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.setStaticFieldSignature(info.PdfInfo, () => ['_libraryName']);
  dart.defineLazy(info.PdfInfo, {
    /*info.PdfInfo._libraryName*/get _libraryName() {
      return "https://github.com/DavBfr/dart_pdf";
    }
  }, false);
  encryption.PdfEncryption = class PdfEncryption extends object_dict.PdfObjectDict {};
  (encryption.PdfEncryption.new = function(pdfDocument) {
    encryption.PdfEncryption.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = encryption.PdfEncryption.prototype;
  dart.addTypeTests(encryption.PdfEncryption);
  dart.addTypeCaches(encryption.PdfEncryption);
  dart.setLibraryUri(encryption.PdfEncryption, I[8]);
  var pages = dart.privateName(page_list, "PdfPageList.pages");
  page_list.PdfPageList = class PdfPageList extends object_dict.PdfObjectDict {
    get pages() {
      return this[pages];
    }
    set pages(value) {
      super.pages = value;
    }
    static ['_#new#tearOff'](pdfDocument) {
      return new page_list.PdfPageList.new(pdfDocument);
    }
    prepare() {
      super.prepare();
      this.params._set("/Kids", data_types.PdfArray.fromObjects(this.pages));
      this.params._set("/Count", new data_types.PdfNum.new(this.pages[$length]));
    }
  };
  (page_list.PdfPageList.new = function(pdfDocument) {
    this[pages] = T$.JSArrayOfPdfPage().of([]);
    page_list.PdfPageList.__proto__.new.call(this, pdfDocument, {type: "/Pages"});
    ;
  }).prototype = page_list.PdfPageList.prototype;
  dart.addTypeTests(page_list.PdfPageList);
  dart.addTypeCaches(page_list.PdfPageList);
  dart.setLibraryUri(page_list.PdfPageList, I[9]);
  dart.setFieldSignature(page_list.PdfPageList, () => ({
    __proto__: dart.getFields(page_list.PdfPageList.__proto__),
    pages: dart.finalFieldType(core.List$(page.PdfPage))
  }));
  xref.PdfCrossRefEntryType = class PdfCrossRefEntryType extends core._Enum {
    toString() {
      return "PdfCrossRefEntryType." + this[_name];
    }
  };
  (xref.PdfCrossRefEntryType.new = function(index, name) {
    xref.PdfCrossRefEntryType.__proto__.new.call(this, index, name);
    ;
  }).prototype = xref.PdfCrossRefEntryType.prototype;
  dart.addTypeTests(xref.PdfCrossRefEntryType);
  dart.addTypeCaches(xref.PdfCrossRefEntryType);
  dart.setLibraryUri(xref.PdfCrossRefEntryType, I[10]);
  dart.setStaticFieldSignature(xref.PdfCrossRefEntryType, () => ['values', 'free', 'inUse', 'compressed']);
  dart.defineExtensionMethods(xref.PdfCrossRefEntryType, ['toString']);
  dart.defineLazy(xref.PdfCrossRefEntryType, {
    /*xref.PdfCrossRefEntryType.values*/get values() {
      return C[9] || CT.C9;
    },
    /*xref.PdfCrossRefEntryType.free*/get free() {
      return C[10] || CT.C10;
    },
    /*xref.PdfCrossRefEntryType.inUse*/get inUse() {
      return C[11] || CT.C11;
    },
    /*xref.PdfCrossRefEntryType.compressed*/get compressed() {
      return C[12] || CT.C12;
    }
  }, false);
  var id$ = dart.privateName(xref, "PdfXref.id");
  var offset$ = dart.privateName(xref, "PdfXref.offset");
  var object$ = dart.privateName(xref, "PdfXref.object");
  var generation$ = dart.privateName(xref, "PdfXref.generation");
  var type$ = dart.privateName(xref, "PdfXref.type");
  xref.PdfXref = class PdfXref extends core.Object {
    get id() {
      return this[id$];
    }
    set id(value) {
      super.id = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    get object() {
      return this[object$];
    }
    set object(value) {
      super.object = value;
    }
    get generation() {
      return this[generation$];
    }
    set generation(value) {
      super.generation = value;
    }
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
    static ['_#new#tearOff'](id, offset, opts) {
      let generation = opts && 'generation' in opts ? opts.generation : 0;
      let object = opts && 'object' in opts ? opts.object : null;
      let type = opts && 'type' in opts ? opts.type : C[11] || CT.C11;
      return new xref.PdfXref.new(id, offset, {generation: generation, object: object, type: type});
    }
    ref() {
      return this.offset[$toString]()[$padLeft](10, "0") + " " + this.generation[$toString]()[$padLeft](5, "0") + (this.type === xref.PdfCrossRefEntryType.inUse ? " n " : " f ");
    }
    get container() {
      return this.object == null ? null : new data_types.PdfIndirect.new(dart.nullCheck(this.object), 0);
    }
    cref(o, ofs, w) {
      if (!(w[$length] >= 3)) dart.assertFailed(null, I[11], 63, 12, "w.length >= 3");
      function setVal(l, v) {
        for (let n = 0; n < l; n = n + 1) {
          o[$setUint8](ofs, v[$rightShift]((l - n - 1) * 8) & 255);
          ofs = ofs + 1;
        }
      }
      dart.fn(setVal, T$.intAndintTovoid());
      setVal(w[$_get](0), this.type === xref.PdfCrossRefEntryType.inUse ? 1 : 0);
      setVal(w[$_get](1), this.offset);
      setVal(w[$_get](2), this.generation);
      return ofs;
    }
    _equals(other) {
      if (other == null) return false;
      if (xref.PdfXref.is(other)) {
        return this.offset === other.offset;
      }
      return false;
    }
    toString() {
      return dart.str(this[$runtimeType]) + " " + dart.str(this.id) + " " + dart.str(this.generation) + " " + dart.str(this.offset) + " " + dart.str(this.type);
    }
    get hashCode() {
      return this.offset;
    }
  };
  (xref.PdfXref.new = function(id, offset, opts) {
    let generation = opts && 'generation' in opts ? opts.generation : 0;
    let object = opts && 'object' in opts ? opts.object : null;
    let type = opts && 'type' in opts ? opts.type : C[11] || CT.C11;
    this[id$] = id;
    this[offset$] = offset;
    this[generation$] = generation;
    this[object$] = object;
    this[type$] = type;
    ;
  }).prototype = xref.PdfXref.prototype;
  dart.addTypeTests(xref.PdfXref);
  dart.addTypeCaches(xref.PdfXref);
  dart.setMethodSignature(xref.PdfXref, () => ({
    __proto__: dart.getMethods(xref.PdfXref.__proto__),
    ref: dart.fnType(core.String, []),
    cref: dart.fnType(core.int, [typed_data.ByteData, core.int, core.List$(core.int)])
  }));
  dart.setGetterSignature(xref.PdfXref, () => ({
    __proto__: dart.getGetters(xref.PdfXref.__proto__),
    container: dart.nullable(data_types.PdfIndirect)
  }));
  dart.setLibraryUri(xref.PdfXref, I[10]);
  dart.setFieldSignature(xref.PdfXref, () => ({
    __proto__: dart.getFields(xref.PdfXref.__proto__),
    id: dart.finalFieldType(core.int),
    offset: dart.finalFieldType(core.int),
    object: dart.finalFieldType(dart.nullable(core.int)),
    generation: dart.finalFieldType(core.int),
    type: dart.finalFieldType(xref.PdfCrossRefEntryType)
  }));
  dart.defineExtensionMethods(xref.PdfXref, ['_equals', 'toString']);
  dart.defineExtensionAccessors(xref.PdfXref, ['hashCode']);
  var offsets = dart.privateName(xref, "PdfXrefTable.offsets");
  var _writeblock = dart.privateName(xref, "_writeblock");
  var PdfName_value = dart.privateName(data_types, "PdfName.value");
  xref.PdfXrefTable = class PdfXrefTable extends data_types.PdfDataType {
    get offsets() {
      return this[offsets];
    }
    set offsets(value) {
      super.offsets = value;
    }
    static ['_#new#tearOff']() {
      return new xref.PdfXrefTable.new();
    }
    add(xref) {
      this.offsets[$add](xref);
    }
    [_writeblock](s, firstid, block) {
      s.putString(dart.str(firstid) + " " + dart.str(block[$length]) + "\n");
      for (let x of block) {
        s.putString(x.ref());
        s.putByte(10);
      }
    }
    output(s, indent = null) {
      s.putString("xref\n");
      this.offsets[$sort](dart.fn((a, b) => a.id[$compareTo](b.id), T$.PdfXrefAndPdfXrefToint()));
      let firstid = 0;
      let lastid = 0;
      let block = T$.JSArrayOfPdfXref().of([]);
      block[$add](C[13] || CT.C13);
      for (let x of this.offsets) {
        if (x.id !== lastid + 1) {
          this[_writeblock](s, firstid, block);
          block[$clear]();
          firstid = x.id;
        }
        block[$add](x);
        lastid = x.id;
      }
      this[_writeblock](s, firstid, block);
    }
    outputCompressed(object, s, params) {
      let offset = s.offset;
      this.offsets[$sort](dart.fn((a, b) => a.id[$compareTo](b.id), T$.PdfXrefAndPdfXrefToint()));
      let id = this.offsets[$last].id + 1;
      this.offsets[$add](new xref.PdfXref.new(id, offset));
      params._set("/Type", C[14] || CT.C14);
      params._set("/Size", new data_types.PdfNum.new(id + 1));
      let firstid = 0;
      let lastid = 0;
      let blocks = T$.JSArrayOfint().of([]);
      blocks[$add](firstid);
      for (let x of this.offsets) {
        if (x.id !== lastid + 1) {
          blocks[$add](lastid - firstid + 1);
          firstid = x.id;
          blocks[$add](firstid);
        }
        lastid = x.id;
      }
      blocks[$add](lastid - firstid + 1);
      if (!(blocks[$length] === 2 && blocks[$_get](0) === 0 && blocks[$_get](1) === id + 1)) {
        params._set("/Index", data_types.PdfArray.fromNum(blocks));
      }
      let bytes = ((math.log(offset) / 0.6931471805599453)[$ceil]() / 8)[$ceil]();
      let w = T$.JSArrayOfint().of([1, bytes, 1]);
      params._set("/W", data_types.PdfArray.fromNum(w));
      let wl = w[$reduce](dart.fn((a, b) => a + b, T$.intAndintToint()));
      let o = _native_typed_data.NativeByteData.new((this.offsets[$length] + 1) * wl);
      let ofs = 0;
      ofs = ofs + wl;
      for (let x of this.offsets) {
        ofs = x.cref(o, ofs, w);
      }
      if (!dart.fn(() => {
        if (object.pdfDocument.verbose) {
          s.putComment("");
          s.putComment("-"[$times](78));
          s.putComment(dart.str(this[$runtimeType]) + " " + dart.str(this));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[11], 205, 12, "() {\n      if (object.pdfDocument.verbose) {\n        s.putComment('');\n        s.putComment('-' * 78);\n        s.putComment('$runtimeType $this');\n      }\n      return true;\n    }()");
      s.putString(dart.str(id) + " 0 obj\n");
      data_types.PdfDictStream.new({object: object, data: o[$buffer][$asUint8List](), isBinary: false, encrypt: false, values: params.values}).output(s, object.pdfDocument.verbose ? 0 : null);
      s.putString("endobj\n");
    }
  };
  (xref.PdfXrefTable.new = function() {
    this[offsets] = T$.JSArrayOfPdfXref().of([]);
    xref.PdfXrefTable.__proto__.new.call(this);
    ;
  }).prototype = xref.PdfXrefTable.prototype;
  dart.addTypeTests(xref.PdfXrefTable);
  dart.addTypeCaches(xref.PdfXrefTable);
  dart.setMethodSignature(xref.PdfXrefTable, () => ({
    __proto__: dart.getMethods(xref.PdfXrefTable.__proto__),
    add: dart.fnType(dart.void, [xref.PdfXref]),
    [_writeblock]: dart.fnType(dart.void, [stream.PdfStream, core.int, core.List$(xref.PdfXref)]),
    output: dart.fnType(dart.void, [stream.PdfStream], [dart.nullable(core.int)]),
    outputCompressed: dart.fnType(dart.void, [object.PdfObject$(data_types.PdfDataType), stream.PdfStream, data_types.PdfDict$(data_types.PdfDataType)])
  }));
  dart.setLibraryUri(xref.PdfXrefTable, I[10]);
  dart.setFieldSignature(xref.PdfXrefTable, () => ({
    __proto__: dart.getFields(xref.PdfXrefTable.__proto__),
    offsets: dart.finalFieldType(core.List$(xref.PdfXref))
  }));
  page_label.PdfPageLabelStyle = class PdfPageLabelStyle extends core._Enum {
    toString() {
      return "PdfPageLabelStyle." + this[_name];
    }
  };
  (page_label.PdfPageLabelStyle.new = function(index, name) {
    page_label.PdfPageLabelStyle.__proto__.new.call(this, index, name);
    ;
  }).prototype = page_label.PdfPageLabelStyle.prototype;
  dart.addTypeTests(page_label.PdfPageLabelStyle);
  dart.addTypeCaches(page_label.PdfPageLabelStyle);
  dart.setLibraryUri(page_label.PdfPageLabelStyle, I[12]);
  dart.setStaticFieldSignature(page_label.PdfPageLabelStyle, () => ['values', 'arabic', 'romanUpper', 'romanLower', 'lettersUpper', 'lettersLower']);
  dart.defineExtensionMethods(page_label.PdfPageLabelStyle, ['toString']);
  dart.defineLazy(page_label.PdfPageLabelStyle, {
    /*page_label.PdfPageLabelStyle.values*/get values() {
      return C[15] || CT.C15;
    },
    /*page_label.PdfPageLabelStyle.arabic*/get arabic() {
      return C[16] || CT.C16;
    },
    /*page_label.PdfPageLabelStyle.romanUpper*/get romanUpper() {
      return C[17] || CT.C17;
    },
    /*page_label.PdfPageLabelStyle.romanLower*/get romanLower() {
      return C[18] || CT.C18;
    },
    /*page_label.PdfPageLabelStyle.lettersUpper*/get lettersUpper() {
      return C[19] || CT.C19;
    },
    /*page_label.PdfPageLabelStyle.lettersLower*/get lettersLower() {
      return C[20] || CT.C20;
    }
  }, false);
  var style$ = dart.privateName(page_label, "PdfPageLabel.style");
  var prefix$ = dart.privateName(page_label, "PdfPageLabel.prefix");
  var subsequent$ = dart.privateName(page_label, "PdfPageLabel.subsequent");
  var _toRoman = dart.privateName(page_label, "_toRoman");
  var _toLetters = dart.privateName(page_label, "_toLetters");
  page_label.PdfPageLabel = class PdfPageLabel extends core.Object {
    get style() {
      return this[style$];
    }
    set style(value) {
      super.style = value;
    }
    get prefix() {
      return this[prefix$];
    }
    set prefix(value) {
      super.prefix = value;
    }
    get subsequent() {
      return this[subsequent$];
    }
    set subsequent(value) {
      super.subsequent = value;
    }
    static ['_#new#tearOff'](prefix, opts) {
      let style = opts && 'style' in opts ? opts.style : null;
      let subsequent = opts && 'subsequent' in opts ? opts.subsequent : null;
      return new page_label.PdfPageLabel.new(prefix, {style: style, subsequent: subsequent});
    }
    static ['_#arabic#tearOff'](opts) {
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      let subsequent = opts && 'subsequent' in opts ? opts.subsequent : null;
      return new page_label.PdfPageLabel.arabic({prefix: prefix, subsequent: subsequent});
    }
    static ['_#romanUpper#tearOff'](opts) {
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      let subsequent = opts && 'subsequent' in opts ? opts.subsequent : null;
      return new page_label.PdfPageLabel.romanUpper({prefix: prefix, subsequent: subsequent});
    }
    static ['_#romanLower#tearOff'](opts) {
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      let subsequent = opts && 'subsequent' in opts ? opts.subsequent : null;
      return new page_label.PdfPageLabel.romanLower({prefix: prefix, subsequent: subsequent});
    }
    static ['_#lettersUpper#tearOff'](opts) {
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      let subsequent = opts && 'subsequent' in opts ? opts.subsequent : null;
      return new page_label.PdfPageLabel.lettersUpper({prefix: prefix, subsequent: subsequent});
    }
    static ['_#lettersLower#tearOff'](opts) {
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      let subsequent = opts && 'subsequent' in opts ? opts.subsequent : null;
      return new page_label.PdfPageLabel.lettersLower({prefix: prefix, subsequent: subsequent});
    }
    toDict(obj) {
      let s = null;
      switch (this.style) {
        case C[16] || CT.C16:
          {
            s = C[21] || CT.C21;
            break;
          }
        case C[17] || CT.C17:
          {
            s = C[22] || CT.C22;
            break;
          }
        case C[18] || CT.C18:
          {
            s = C[23] || CT.C23;
            break;
          }
        case C[19] || CT.C19:
          {
            s = C[24] || CT.C24;
            break;
          }
        case C[20] || CT.C20:
          {
            s = C[25] || CT.C25;
            break;
          }
        case null:
          {
            s = null;
          }
      }
      return T$.PdfDictOfPdfDataType().new((() => {
        let t6 = new (T$.IdentityMapOfString$PdfDataType()).new();
        if (s != null) t6[$_set]("/S", s);
        if (this.prefix != null && dart.nullCheck(this.prefix)[$isNotEmpty]) t6[$_set]("/P", data_types.PdfSecString.fromString(obj, dart.nullCheck(this.prefix)));
        if (this.subsequent != null) t6[$_set]("/St", new data_types.PdfNum.new(dart.nullCheck(this.subsequent)));
        return t6;
      })());
    }
    [_toRoman](decimal) {
      let dictionary = C[26] || CT.C26;
      if (!(decimal > 0 && decimal < 3999)) dart.assertFailed("Roman numerals are limited to the inclusive range of 1 to 3999.", I[13], 81, 12, "decimal > 0 && decimal < 3999");
      let result = "";
      dictionary[$forEach](dart.fn((k, v) => {
        while (decimal >= k) {
          decimal = decimal - k;
          result = result + v;
        }
      }, T$.intAndStringTovoid()));
      return result;
    }
    [_toLetters](decimal) {
      let n = core.String.fromCharCode(65 + decimal[$modulo](26));
      let r = (decimal / 26)[$truncate]() + 1;
      return n[$times](r);
    }
    asString(index = 0) {
      let t7;
      let i = this.subsequent == null ? index : index + dart.nullCheck(this.subsequent);
      let suffix = null;
      switch (this.style) {
        case C[16] || CT.C16:
          {
            suffix = (i + 1)[$toString]();
            break;
          }
        case C[17] || CT.C17:
          {
            suffix = this[_toRoman](i + 1);
            break;
          }
        case C[18] || CT.C18:
          {
            suffix = this[_toRoman](i + 1)[$toLowerCase]();
            break;
          }
        case C[19] || CT.C19:
          {
            suffix = this[_toLetters](i);
            break;
          }
        case C[20] || CT.C20:
          {
            suffix = this[_toLetters](i)[$toLowerCase]();
            break;
          }
        case null:
          {
            suffix = "";
          }
      }
      return dart.str((t7 = this.prefix, t7 == null ? "" : t7)) + suffix;
    }
  };
  (page_label.PdfPageLabel.new = function(prefix, opts) {
    let style = opts && 'style' in opts ? opts.style : null;
    let subsequent = opts && 'subsequent' in opts ? opts.subsequent : null;
    this[prefix$] = prefix;
    this[style$] = style;
    this[subsequent$] = subsequent;
    ;
  }).prototype = page_label.PdfPageLabel.prototype;
  (page_label.PdfPageLabel.arabic = function(opts) {
    let prefix = opts && 'prefix' in opts ? opts.prefix : null;
    let subsequent = opts && 'subsequent' in opts ? opts.subsequent : null;
    this[prefix$] = prefix;
    this[subsequent$] = subsequent;
    this[style$] = page_label.PdfPageLabelStyle.arabic;
    ;
  }).prototype = page_label.PdfPageLabel.prototype;
  (page_label.PdfPageLabel.romanUpper = function(opts) {
    let prefix = opts && 'prefix' in opts ? opts.prefix : null;
    let subsequent = opts && 'subsequent' in opts ? opts.subsequent : null;
    this[prefix$] = prefix;
    this[subsequent$] = subsequent;
    this[style$] = page_label.PdfPageLabelStyle.romanUpper;
    ;
  }).prototype = page_label.PdfPageLabel.prototype;
  (page_label.PdfPageLabel.romanLower = function(opts) {
    let prefix = opts && 'prefix' in opts ? opts.prefix : null;
    let subsequent = opts && 'subsequent' in opts ? opts.subsequent : null;
    this[prefix$] = prefix;
    this[subsequent$] = subsequent;
    this[style$] = page_label.PdfPageLabelStyle.romanLower;
    ;
  }).prototype = page_label.PdfPageLabel.prototype;
  (page_label.PdfPageLabel.lettersUpper = function(opts) {
    let prefix = opts && 'prefix' in opts ? opts.prefix : null;
    let subsequent = opts && 'subsequent' in opts ? opts.subsequent : null;
    this[prefix$] = prefix;
    this[subsequent$] = subsequent;
    this[style$] = page_label.PdfPageLabelStyle.lettersUpper;
    ;
  }).prototype = page_label.PdfPageLabel.prototype;
  (page_label.PdfPageLabel.lettersLower = function(opts) {
    let prefix = opts && 'prefix' in opts ? opts.prefix : null;
    let subsequent = opts && 'subsequent' in opts ? opts.subsequent : null;
    this[prefix$] = prefix;
    this[subsequent$] = subsequent;
    this[style$] = page_label.PdfPageLabelStyle.lettersLower;
    ;
  }).prototype = page_label.PdfPageLabel.prototype;
  dart.addTypeTests(page_label.PdfPageLabel);
  dart.addTypeCaches(page_label.PdfPageLabel);
  dart.setMethodSignature(page_label.PdfPageLabel, () => ({
    __proto__: dart.getMethods(page_label.PdfPageLabel.__proto__),
    toDict: dart.fnType(data_types.PdfDict$(data_types.PdfDataType), [object.PdfObject$(data_types.PdfDataType)]),
    [_toRoman]: dart.fnType(core.String, [core.int]),
    [_toLetters]: dart.fnType(core.String, [core.int]),
    asString: dart.fnType(core.String, [], [core.int])
  }));
  dart.setLibraryUri(page_label.PdfPageLabel, I[12]);
  dart.setFieldSignature(page_label.PdfPageLabel, () => ({
    __proto__: dart.getFields(page_label.PdfPageLabel.__proto__),
    style: dart.finalFieldType(dart.nullable(page_label.PdfPageLabelStyle)),
    prefix: dart.finalFieldType(dart.nullable(core.String)),
    subsequent: dart.finalFieldType(dart.nullable(core.int))
  }));
  var labels = dart.privateName(page_label, "PdfPageLabels.labels");
  page_label.PdfPageLabels = class PdfPageLabels extends object_dict.PdfObjectDict {
    get labels() {
      return this[labels];
    }
    set labels(value) {
      super.labels = value;
    }
    static ['_#new#tearOff'](pdfDocument) {
      return new page_label.PdfPageLabels.new(pdfDocument);
    }
    pageLabel(index) {
      let t7;
      let n = (t7 = this.labels[$keys][$toList](), (() => {
        t7[$sort]();
        return t7;
      })());
      let current = new page_label.PdfPageLabel.arabic();
      let s = 0;
      for (let i of n) {
        if (index >= i) {
          current = dart.nullCheck(this.labels[$_get](i));
          s = i;
        }
      }
      return current.asString(index - s);
    }
    get names() {
      return new (T$.SyncIterableOfString()).new((function* names() {
        let t7;
        let n = (t7 = this.labels[$keys][$toList](), (() => {
          t7[$sort]();
          return t7;
        })());
        let l = new page_label.PdfPageLabel.arabic();
        let len = this.pdfDocument.pdfPageList.pages[$length];
        let c = 0;
        let b = c < n[$length] ? n[$_get](c) : len;
        let s = 0;
        for (let i = 0; i < len; i = i + 1) {
          if (i >= b) {
            l = dart.nullCheck(this.labels[$_get](b));
            c = c + 1;
            b = c < n[$length] ? n[$_get](c) : len;
            s = i;
          }
          yield l.asString(i - s);
        }
      }).bind(this));
    }
    prepare() {
      super.prepare();
      let nums = new (T$.PdfArrayOfPdfDataType()).new();
      for (let entry of this.labels[$entries]) {
        nums.add(new data_types.PdfNum.new(entry.key));
        nums.add(entry.value.toDict(this));
      }
      this.params._set("/Nums", nums);
    }
  };
  (page_label.PdfPageLabels.new = function(pdfDocument) {
    this[labels] = new (T$.IdentityMapOfint$PdfPageLabel()).new();
    page_label.PdfPageLabels.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = page_label.PdfPageLabels.prototype;
  dart.addTypeTests(page_label.PdfPageLabels);
  dart.addTypeCaches(page_label.PdfPageLabels);
  dart.setMethodSignature(page_label.PdfPageLabels, () => ({
    __proto__: dart.getMethods(page_label.PdfPageLabels.__proto__),
    pageLabel: dart.fnType(core.String, [core.int])
  }));
  dart.setGetterSignature(page_label.PdfPageLabels, () => ({
    __proto__: dart.getGetters(page_label.PdfPageLabels.__proto__),
    names: core.Iterable$(core.String)
  }));
  dart.setLibraryUri(page_label.PdfPageLabels, I[12]);
  dart.setFieldSignature(page_label.PdfPageLabels, () => ({
    __proto__: dart.getFields(page_label.PdfPageLabels.__proto__),
    labels: dart.finalFieldType(core.Map$(core.int, page_label.PdfPageLabel))
  }));
  outline.PdfOutlineMode = class PdfOutlineMode extends core._Enum {
    toString() {
      return "PdfOutlineMode." + this[_name];
    }
  };
  (outline.PdfOutlineMode.new = function(index, name) {
    outline.PdfOutlineMode.__proto__.new.call(this, index, name);
    ;
  }).prototype = outline.PdfOutlineMode.prototype;
  dart.addTypeTests(outline.PdfOutlineMode);
  dart.addTypeCaches(outline.PdfOutlineMode);
  dart.setLibraryUri(outline.PdfOutlineMode, I[14]);
  dart.setStaticFieldSignature(outline.PdfOutlineMode, () => ['values', 'fitPage', 'fitRect']);
  dart.defineExtensionMethods(outline.PdfOutlineMode, ['toString']);
  dart.defineLazy(outline.PdfOutlineMode, {
    /*outline.PdfOutlineMode.values*/get values() {
      return C[27] || CT.C27;
    },
    /*outline.PdfOutlineMode.fitPage*/get fitPage() {
      return C[28] || CT.C28;
    },
    /*outline.PdfOutlineMode.fitRect*/get fitRect() {
      return C[29] || CT.C29;
    }
  }, false);
  outline.PdfOutlineStyle = class PdfOutlineStyle extends core._Enum {
    toString() {
      return "PdfOutlineStyle." + this[_name];
    }
  };
  (outline.PdfOutlineStyle.new = function(index, name) {
    outline.PdfOutlineStyle.__proto__.new.call(this, index, name);
    ;
  }).prototype = outline.PdfOutlineStyle.prototype;
  dart.addTypeTests(outline.PdfOutlineStyle);
  dart.addTypeCaches(outline.PdfOutlineStyle);
  dart.setLibraryUri(outline.PdfOutlineStyle, I[14]);
  dart.setStaticFieldSignature(outline.PdfOutlineStyle, () => ['values', 'normal', 'italic', 'bold', 'italicBold']);
  dart.defineExtensionMethods(outline.PdfOutlineStyle, ['toString']);
  dart.defineLazy(outline.PdfOutlineStyle, {
    /*outline.PdfOutlineStyle.values*/get values() {
      return C[30] || CT.C30;
    },
    /*outline.PdfOutlineStyle.normal*/get normal() {
      return C[31] || CT.C31;
    },
    /*outline.PdfOutlineStyle.italic*/get italic() {
      return C[32] || CT.C32;
    },
    /*outline.PdfOutlineStyle.bold*/get bold() {
      return C[33] || CT.C33;
    },
    /*outline.PdfOutlineStyle.italicBold*/get italicBold() {
      return C[34] || CT.C34;
    }
  }, false);
  var outlines = dart.privateName(outline, "PdfOutline.outlines");
  var parent = dart.privateName(outline, "PdfOutline.parent");
  var title$0 = dart.privateName(outline, "PdfOutline.title");
  var dest$ = dart.privateName(outline, "PdfOutline.dest");
  var rect$ = dart.privateName(outline, "PdfOutline.rect");
  var anchor$ = dart.privateName(outline, "PdfOutline.anchor");
  var color$0 = dart.privateName(outline, "PdfOutline.color");
  var destMode$ = dart.privateName(outline, "PdfOutline.destMode");
  var style$0 = dart.privateName(outline, "PdfOutline.style");
  var effectiveLevel = dart.privateName(outline, "PdfOutline.effectiveLevel");
  var _page = dart.privateName(outline, "_page");
  outline.PdfOutline = class PdfOutline extends object_dict.PdfObjectDict {
    get outlines() {
      return this[outlines];
    }
    set outlines(value) {
      this[outlines] = value;
    }
    get parent() {
      return this[parent];
    }
    set parent(value) {
      this[parent] = value;
    }
    get title() {
      return this[title$0];
    }
    set title(value) {
      super.title = value;
    }
    get dest() {
      return this[dest$];
    }
    set dest(value) {
      this[dest$] = value;
    }
    get rect() {
      return this[rect$];
    }
    set rect(value) {
      super.rect = value;
    }
    get anchor() {
      return this[anchor$];
    }
    set anchor(value) {
      super.anchor = value;
    }
    get color() {
      return this[color$0];
    }
    set color(value) {
      super.color = value;
    }
    get destMode() {
      return this[destMode$];
    }
    set destMode(value) {
      super.destMode = value;
    }
    get style() {
      return this[style$0];
    }
    set style(value) {
      super.style = value;
    }
    get effectiveLevel() {
      return this[effectiveLevel];
    }
    set effectiveLevel(value) {
      this[effectiveLevel] = value;
    }
    static ['_#new#tearOff'](pdfDocument, opts) {
      let title = opts && 'title' in opts ? opts.title : null;
      let dest = opts && 'dest' in opts ? opts.dest : null;
      let rect = opts && 'rect' in opts ? opts.rect : null;
      let anchor = opts && 'anchor' in opts ? opts.anchor : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let destMode = opts && 'destMode' in opts ? opts.destMode : C[28] || CT.C28;
      let style = opts && 'style' in opts ? opts.style : C[31] || CT.C31;
      let page = opts && 'page' in opts ? opts.page : null;
      return new outline.PdfOutline.new(pdfDocument, {title: title, dest: dest, rect: rect, anchor: anchor, color: color, destMode: destMode, style: style, page: page});
    }
    get page() {
      let num = null;
      if (this[_page] != null) {
        num = this.pdfDocument.pdfPageList.pages[$indexOf](dart.nullCheck(this[_page]));
      } else if (this.dest != null) {
        num = this.pdfDocument.pdfPageList.pages[$indexOf](dart.nullCheck(this.dest));
      } else {
        num = null;
      }
      return num == null ? null : (dart.notNull(num) + 1)[$toString]();
    }
    add(outline) {
      outline.parent = this;
      this.outlines[$add](outline);
    }
    prepare() {
      super.prepare();
      if (this.parent != null) {
        this.params._set("/Title", data_types.PdfSecString.fromString(this, dart.nullCheck(this.title)));
        if (this.color != null) {
          this.params._set("/C", new data_types.PdfColorType.new(dart.nullCheck(this.color)));
        }
        if (this.style !== outline.PdfOutlineStyle.normal) {
          this.params._set("/F", new data_types.PdfNum.new(this.style.index));
        }
        if (this.anchor != null) {
          this.params._set("/Dest", data_types.PdfSecString.fromString(this, dart.nullCheck(this.anchor)));
        } else {
          let dests = new (T$.PdfArrayOfPdfDataType()).new();
          dests.add(dart.nullCheck(this.dest).ref());
          if (this.destMode === outline.PdfOutlineMode.fitPage) {
            dests.add(C[35] || CT.C35);
          } else {
            dests.add(C[36] || CT.C36);
            dests.add(new data_types.PdfNum.new(dart.nullCheck(this.rect).left));
            dests.add(new data_types.PdfNum.new(dart.nullCheck(this.rect).bottom));
            dests.add(new data_types.PdfNum.new(dart.nullCheck(this.rect).right));
            dests.add(new data_types.PdfNum.new(dart.nullCheck(this.rect).top));
          }
          this.params._set("/Dest", dests);
        }
        this.params._set("/Parent", dart.nullCheck(this.parent).ref());
        let c = this.descendants();
        if (c > 0) {
          this.params._set("/Count", new data_types.PdfNum.new(-c));
        }
        let index = dart.nullCheck(this.parent).getIndex(this);
        if (index > 0) {
          this.params._set("/Prev", dart.nullCheck(this.parent).getNode(index - 1).ref());
        }
        if (index < dart.nullCheck(this.parent).getLast()) {
          this.params._set("/Next", dart.nullCheck(this.parent).getNode(index + 1).ref());
        }
      } else {
        this.params._set("/Count", new data_types.PdfNum.new(this.outlines[$length]));
      }
      if (this.outlines[$isNotEmpty]) {
        this.params._set("/First", this.outlines[$_get](0).ref());
        this.params._set("/Last", this.outlines[$_get](this.outlines[$length] - 1).ref());
      }
    }
    getIndex(outline) {
      return this.outlines[$indexOf](outline);
    }
    getLast() {
      return this.outlines[$length] - 1;
    }
    getNode(i) {
      return this.outlines[$_get](i);
    }
    descendants() {
      let c = this.outlines[$length];
      for (let o of this.outlines) {
        c = c + o.descendants();
      }
      return c;
    }
    toString() {
      return dart.str(this[$runtimeType]) + " " + dart.str(this.anchor) + " " + dart.str(this.title);
    }
  };
  (outline.PdfOutline.new = function(pdfDocument, opts) {
    let title = opts && 'title' in opts ? opts.title : null;
    let dest = opts && 'dest' in opts ? opts.dest : null;
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let anchor = opts && 'anchor' in opts ? opts.anchor : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let destMode = opts && 'destMode' in opts ? opts.destMode : C[28] || CT.C28;
    let style = opts && 'style' in opts ? opts.style : C[31] || CT.C31;
    let page = opts && 'page' in opts ? opts.page : null;
    this[outlines] = T$.JSArrayOfPdfOutline().of([]);
    this[parent] = null;
    this[effectiveLevel] = null;
    this[title$0] = title;
    this[dest$] = dest;
    this[rect$] = rect;
    this[anchor$] = anchor;
    this[color$0] = color;
    this[destMode$] = destMode;
    this[style$0] = style;
    if (!(anchor == null || dest == null && rect == null)) dart.assertFailed(null, I[15], 62, 16, "anchor == null || (dest == null && rect == null)");
    this[_page] = page;
    outline.PdfOutline.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = outline.PdfOutline.prototype;
  dart.addTypeTests(outline.PdfOutline);
  dart.addTypeCaches(outline.PdfOutline);
  dart.setMethodSignature(outline.PdfOutline, () => ({
    __proto__: dart.getMethods(outline.PdfOutline.__proto__),
    add: dart.fnType(dart.void, [outline.PdfOutline]),
    getIndex: dart.fnType(core.int, [outline.PdfOutline]),
    getLast: dart.fnType(core.int, []),
    getNode: dart.fnType(outline.PdfOutline, [core.int]),
    descendants: dart.fnType(core.int, [])
  }));
  dart.setGetterSignature(outline.PdfOutline, () => ({
    __proto__: dart.getGetters(outline.PdfOutline.__proto__),
    page: dart.nullable(core.String)
  }));
  dart.setLibraryUri(outline.PdfOutline, I[14]);
  dart.setFieldSignature(outline.PdfOutline, () => ({
    __proto__: dart.getFields(outline.PdfOutline.__proto__),
    outlines: dart.fieldType(core.List$(outline.PdfOutline)),
    parent: dart.fieldType(dart.nullable(outline.PdfOutline)),
    title: dart.finalFieldType(dart.nullable(core.String)),
    dest: dart.fieldType(dart.nullable(page.PdfPage)),
    [_page]: dart.finalFieldType(dart.nullable(page.PdfPage)),
    rect: dart.finalFieldType(dart.nullable(rect.PdfRect)),
    anchor: dart.finalFieldType(dart.nullable(core.String)),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    destMode: dart.finalFieldType(outline.PdfOutlineMode),
    style: dart.finalFieldType(outline.PdfOutlineStyle),
    effectiveLevel: dart.fieldType(dart.nullable(core.int))
  }));
  dart.defineExtensionMethods(outline.PdfOutline, ['toString']);
  var _dests = dart.privateName(names, "_dests");
  names.PdfNames = class PdfNames extends object_dict.PdfObjectDict {
    static ['_#new#tearOff'](pdfDocument) {
      return new names.PdfNames.new(pdfDocument);
    }
    addDest(name, page, opts) {
      let posX = opts && 'posX' in opts ? opts.posX : null;
      let posY = opts && 'posY' in opts ? opts.posY : null;
      let posZ = opts && 'posZ' in opts ? opts.posZ : null;
      if (!page.pdfDocument[$_equals](this.pdfDocument)) dart.assertFailed(null, I[16], 37, 12, "page.pdfDocument == pdfDocument");
      this[_dests][$_set](name, T$.PdfDictOfPdfArrayOfPdfDataType().new(new (T$.IdentityMapOfString$PdfArrayOfPdfDataType()).from(["/D", new (T$.PdfArrayOfPdfDataType()).new((() => {
          let t11 = T$.JSArrayOfPdfDataType().of([page.ref(), C[37] || CT.C37]);
          if (posX == null)
            t11.push(C[38] || CT.C38);
          else
            t11.push(new data_types.PdfNum.new(posX));
          if (posY == null)
            t11.push(C[38] || CT.C38);
          else
            t11.push(new data_types.PdfNum.new(posY));
          if (posZ == null)
            t11.push(C[38] || CT.C38);
          else
            t11.push(new data_types.PdfNum.new(posZ));
          return t11;
        })())])));
    }
    prepare() {
      let t12;
      super.prepare();
      let dests = new (T$.PdfArrayOfPdfDataType()).new();
      let keys = (t12 = this[_dests][$keys][$toList](), (() => {
        t12[$sort]();
        return t12;
      })());
      for (let name of keys) {
        dests.add(data_types.PdfSecString.fromString(this, name));
        dests.add(dart.nullCheck(this[_dests][$_get](name)));
      }
      let dict = T$.PdfDictOfPdfDataType().new();
      if (dests.values[$isNotEmpty]) {
        dict._set("/Names", dests);
        dict._set("/Limits", new (T$.PdfArrayOfPdfSecString()).new(T$.JSArrayOfPdfSecString().of([data_types.PdfSecString.fromString(this, keys[$first]), data_types.PdfSecString.fromString(this, keys[$last])])));
      }
      this.params._set("/Dests", dict);
    }
  };
  (names.PdfNames.new = function(pdfDocument) {
    this[_dests] = new (T$.IdentityMapOfString$PdfDataType()).new();
    names.PdfNames.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = names.PdfNames.prototype;
  dart.addTypeTests(names.PdfNames);
  dart.addTypeCaches(names.PdfNames);
  dart.setMethodSignature(names.PdfNames, () => ({
    __proto__: dart.getMethods(names.PdfNames.__proto__),
    addDest: dart.fnType(dart.void, [core.String, page.PdfPage], {posX: dart.nullable(core.double), posY: dart.nullable(core.double), posZ: dart.nullable(core.double)}, {})
  }));
  dart.setLibraryUri(names.PdfNames, I[17]);
  dart.setFieldSignature(names.PdfNames, () => ({
    __proto__: dart.getFields(names.PdfNames.__proto__),
    [_dests]: dart.finalFieldType(core.Map$(core.String, data_types.PdfDataType))
  }));
  var metadata$0 = dart.privateName(metadata$, "PdfMetadata.metadata");
  var data$ = dart.privateName(data_types, "PdfDictStream.data");
  var object$0 = dart.privateName(data_types, "PdfDictStream.object");
  var isBinary$ = dart.privateName(data_types, "PdfDictStream.isBinary");
  var encrypt$ = dart.privateName(data_types, "PdfDictStream.encrypt");
  var compress$ = dart.privateName(data_types, "PdfDictStream.compress");
  data_types.PdfDictStream = class PdfDictStream extends data_types.PdfDict$(data_types.PdfDataType) {
    get data() {
      return this[data$];
    }
    set data(value) {
      this[data$] = value;
    }
    get object() {
      return this[object$0];
    }
    set object(value) {
      super.object = value;
    }
    get isBinary() {
      return this[isBinary$];
    }
    set isBinary(value) {
      super.isBinary = value;
    }
    get encrypt() {
      return this[encrypt$];
    }
    set encrypt(value) {
      super.encrypt = value;
    }
    get compress() {
      return this[compress$];
    }
    set compress(value) {
      super.compress = value;
    }
    static new(opts) {
      let t12, t12$;
      let object = opts && 'object' in opts ? opts.object : null;
      let values = opts && 'values' in opts ? opts.values : null;
      let data = opts && 'data' in opts ? opts.data : null;
      let isBinary = opts && 'isBinary' in opts ? opts.isBinary : false;
      let encrypt = opts && 'encrypt' in opts ? opts.encrypt : true;
      let compress = opts && 'compress' in opts ? opts.compress : true;
      return new data_types.PdfDictStream.values({object: object, values: (t12 = values, t12 == null ? new (T$.IdentityMapOfString$PdfDataType()).new() : t12), data: (t12$ = data, t12$ == null ? _native_typed_data.NativeUint8List.new(0) : t12$), encrypt: encrypt, compress: compress, isBinary: isBinary});
    }
    static ['_#new#tearOff'](opts) {
      let object = opts && 'object' in opts ? opts.object : null;
      let values = opts && 'values' in opts ? opts.values : null;
      let data = opts && 'data' in opts ? opts.data : null;
      let isBinary = opts && 'isBinary' in opts ? opts.isBinary : false;
      let encrypt = opts && 'encrypt' in opts ? opts.encrypt : true;
      let compress = opts && 'compress' in opts ? opts.compress : true;
      return data_types.PdfDictStream.new({object: object, values: values, data: data, isBinary: isBinary, encrypt: encrypt, compress: compress});
    }
    static ['_#values#tearOff'](opts) {
      let object = opts && 'object' in opts ? opts.object : null;
      let values = opts && 'values' in opts ? opts.values : null;
      let data = opts && 'data' in opts ? opts.data : null;
      let isBinary = opts && 'isBinary' in opts ? opts.isBinary : false;
      let encrypt = opts && 'encrypt' in opts ? opts.encrypt : true;
      let compress = opts && 'compress' in opts ? opts.compress : true;
      return new data_types.PdfDictStream.values({object: object, values: values, data: data, isBinary: isBinary, encrypt: encrypt, compress: compress});
    }
    output(s, indent = null) {
      let _values = T$.PdfDictOfPdfDataType().new(this.values);
      let _data = null;
      if (_values.containsKey("/Filter")) {
        _data = this.data;
      } else if (this.compress && this.object.pdfDocument.compress) {
        let newData = _native_typed_data.NativeUint8List.fromList(dart.nullCheck(this.object.pdfDocument.deflate)(this.data));
        if (newData[$lengthInBytes] < this.data[$lengthInBytes]) {
          _values._set("/Filter", C[40] || CT.C40);
          _data = newData;
        }
      }
      if (_data == null) {
        if (this.isBinary) {
          let e = new ascii85.Ascii85Encoder.new();
          _data = e.convert(this.data);
          _values._set("/Filter", C[41] || CT.C41);
        } else {
          _data = this.data;
        }
      }
      if (this.encrypt && this.object.pdfDocument.encryption != null) {
        _data = dart.nullCheck(this.object.pdfDocument.encryption).encrypt(_data, this.object);
      }
      _values._set("/Length", new data_types.PdfNum.new(_data[$length]));
      _values.output(s, indent);
      if (indent != null) {
        s.putByte(10);
      }
      s.putString("stream\n");
      s.putBytes(_data);
      s.putString("\nendstream\n");
    }
  };
  (data_types.PdfDictStream.values = function(opts) {
    let object = opts && 'object' in opts ? opts.object : null;
    let values = opts && 'values' in opts ? opts.values : null;
    let data = opts && 'data' in opts ? opts.data : null;
    let isBinary = opts && 'isBinary' in opts ? opts.isBinary : false;
    let encrypt = opts && 'encrypt' in opts ? opts.encrypt : true;
    let compress = opts && 'compress' in opts ? opts.compress : true;
    this[object$0] = object;
    this[data$] = data;
    this[isBinary$] = isBinary;
    this[encrypt$] = encrypt;
    this[compress$] = compress;
    data_types.PdfDictStream.__proto__.values.call(this, values);
    ;
  }).prototype = data_types.PdfDictStream.prototype;
  dart.addTypeTests(data_types.PdfDictStream);
  dart.addTypeCaches(data_types.PdfDictStream);
  dart.setStaticMethodSignature(data_types.PdfDictStream, () => ['new']);
  dart.setLibraryUri(data_types.PdfDictStream, I[5]);
  dart.setFieldSignature(data_types.PdfDictStream, () => ({
    __proto__: dart.getFields(data_types.PdfDictStream.__proto__),
    data: dart.fieldType(typed_data.Uint8List),
    object: dart.finalFieldType(object.PdfObject$(data_types.PdfDataType)),
    isBinary: dart.finalFieldType(core.bool),
    encrypt: dart.finalFieldType(core.bool),
    compress: dart.finalFieldType(core.bool)
  }));
  metadata$.PdfMetadata = class PdfMetadata extends object.PdfObject$(data_types.PdfDictStream) {
    get metadata() {
      return this[metadata$0];
    }
    set metadata(value) {
      super.metadata = value;
    }
    static ['_#new#tearOff'](pdfDocument, metadata) {
      return new metadata$.PdfMetadata.new(pdfDocument, metadata);
    }
    prepare() {
      super.prepare();
      this.params._set("/SubType", C[39] || CT.C39);
      this.params.data = _native_typed_data.NativeUint8List.fromList(convert.utf8.encode(this.metadata.toString()));
    }
  };
  (metadata$.PdfMetadata.new = function(pdfDocument, metadata) {
    this[metadata$0] = metadata;
    metadata$.PdfMetadata.__proto__.new.call(this, pdfDocument, {params: data_types.PdfDictStream.new({object: pdfDocument.catalog, compress: false, encrypt: false})});
    pdfDocument.catalog.metadata = this;
  }).prototype = metadata$.PdfMetadata.prototype;
  dart.addTypeTests(metadata$.PdfMetadata);
  dart.addTypeCaches(metadata$.PdfMetadata);
  dart.setLibraryUri(metadata$.PdfMetadata, I[18]);
  dart.setFieldSignature(metadata$.PdfMetadata, () => ({
    __proto__: dart.getFields(metadata$.PdfMetadata.__proto__),
    metadata: dart.finalFieldType(document.XmlDocument)
  }));
  var pdfPageList$ = dart.privateName(catalog, "PdfCatalog.pdfPageList");
  var outlines$ = dart.privateName(catalog, "PdfCatalog.outlines");
  var metadata = dart.privateName(catalog, "PdfCatalog.metadata");
  var pageMode$ = dart.privateName(catalog, "PdfCatalog.pageMode");
  var names$ = dart.privateName(catalog, "PdfCatalog.names");
  var pageLabels = dart.privateName(catalog, "PdfCatalog.pageLabels");
  catalog.PdfCatalog = class PdfCatalog extends object_dict.PdfObjectDict {
    get pdfPageList() {
      return this[pdfPageList$];
    }
    set pdfPageList(value) {
      super.pdfPageList = value;
    }
    get outlines() {
      return this[outlines$];
    }
    set outlines(value) {
      this[outlines$] = value;
    }
    get metadata() {
      return this[metadata];
    }
    set metadata(value) {
      this[metadata] = value;
    }
    get pageMode() {
      return this[pageMode$];
    }
    set pageMode(value) {
      super.pageMode = value;
    }
    get names() {
      return this[names$];
    }
    set names(value) {
      this[names$] = value;
    }
    get pageLabels() {
      return this[pageLabels];
    }
    set pageLabels(value) {
      this[pageLabels] = value;
    }
    static ['_#new#tearOff'](pdfDocument, pdfPageList, pageMode) {
      return new catalog.PdfCatalog.new(pdfDocument, pdfPageList, pageMode);
    }
    prepare() {
      let t12, t12$;
      super.prepare();
      this.params._set("/Version", new data_types.PdfName.new("/" + this.pdfDocument.versionString));
      this.params._set("/Pages", this.pdfPageList.ref());
      if (this.outlines != null && dart.nullCheck(this.outlines).outlines[$isNotEmpty]) {
        this.params._set("/Outlines", dart.nullCheck(this.outlines).ref());
      }
      if (this.metadata != null) {
        this.params._set("/Metadata", dart.nullCheck(this.metadata).ref());
      }
      if (this.names != null) {
        this.params._set("/Names", dart.nullCheck(this.names).ref());
      }
      if (this.pageLabels != null && dart.nullCheck(this.pageLabels).labels[$isNotEmpty]) {
        this.params._set("/PageLabels", dart.nullCheck(this.pageLabels).ref());
      }
      this.params._set("/PageMode", new data_types.PdfName.new(catalog.PdfCatalog._pdfPageModes[$_get](this.pageMode.index)));
      if (this.pdfDocument.sign != null) {
        if (dart.nullCheck(this.pdfDocument.sign).value.hasMDP) {
          this.params._set("/Perms", T$.PdfDictOfPdfIndirect().new(new (T$.IdentityMapOfString$PdfIndirect()).from(["/DocMDP", dart.nullCheck(this.pdfDocument.sign).ref()])));
        }
        let dss = T$.PdfDictOfPdfDataType().new();
        if (dart.nullCheck(this.pdfDocument.sign).crl[$isNotEmpty]) {
          dss._set("/CRLs", data_types.PdfArray.fromObjects(dart.nullCheck(this.pdfDocument.sign).crl));
        }
        if (dart.nullCheck(this.pdfDocument.sign).cert[$isNotEmpty]) {
          dss._set("/Certs", data_types.PdfArray.fromObjects(dart.nullCheck(this.pdfDocument.sign).cert));
        }
        if (dart.nullCheck(this.pdfDocument.sign).ocsp[$isNotEmpty]) {
          dss._set("/OCSPs", data_types.PdfArray.fromObjects(dart.nullCheck(this.pdfDocument.sign).ocsp));
        }
        if (dss.values[$isNotEmpty]) {
          this.params._set("/DSS", dss);
        }
      }
      let widgets = T$.JSArrayOfPdfAnnot().of([]);
      for (let page of this.pdfDocument.pdfPageList.pages) {
        for (let annot of page.annotations) {
          if (annot.annot.subtype === "/Widget") {
            widgets[$add](annot);
          }
        }
      }
      if (widgets[$isNotEmpty]) {
        this.params._set("/AcroForm", T$.PdfDictOfPdfDataType().new(new (T$.IdentityMapOfString$PdfDataType()).from(["/SigFlags", new data_types.PdfNum.new((t12$ = (t12 = this.pdfDocument.sign, t12 == null ? null : t12.flagsValue), t12$ == null ? 0 : t12$)), "/Fields", data_types.PdfArray.fromObjects(widgets)])));
      }
    }
  };
  (catalog.PdfCatalog.new = function(pdfDocument, pdfPageList, pageMode) {
    this[outlines$] = null;
    this[metadata] = null;
    this[names$] = null;
    this[pageLabels] = null;
    this[pdfPageList$] = pdfPageList;
    this[pageMode$] = pageMode;
    catalog.PdfCatalog.__proto__.new.call(this, pdfDocument, {type: "/Catalog"});
    ;
  }).prototype = catalog.PdfCatalog.prototype;
  dart.addTypeTests(catalog.PdfCatalog);
  dart.addTypeCaches(catalog.PdfCatalog);
  dart.setLibraryUri(catalog.PdfCatalog, I[19]);
  dart.setFieldSignature(catalog.PdfCatalog, () => ({
    __proto__: dart.getFields(catalog.PdfCatalog.__proto__),
    pdfPageList: dart.finalFieldType(page_list.PdfPageList),
    outlines: dart.fieldType(dart.nullable(outline.PdfOutline)),
    metadata: dart.fieldType(dart.nullable(metadata$.PdfMetadata)),
    pageMode: dart.finalFieldType(document$.PdfPageMode),
    names: dart.fieldType(dart.nullable(names.PdfNames)),
    pageLabels: dart.fieldType(dart.nullable(page_label.PdfPageLabels))
  }));
  dart.setStaticFieldSignature(catalog.PdfCatalog, () => ['_pdfPageModes']);
  dart.defineLazy(catalog.PdfCatalog, {
    /*catalog.PdfCatalog._pdfPageModes*/get _pdfPageModes() {
      return C[42] || CT.C42;
    }
  }, false);
  dart.defineLazy(js, {
    /*js.defaultDeflate*/get defaultDeflate() {
      return dart.bind(C[43] || CT.C43, 'encode');
    },
    set defaultDeflate(_) {}
  }, false);
  border.PdfBorderStyle = class PdfBorderStyle extends core._Enum {
    toString() {
      return "PdfBorderStyle." + this[_name];
    }
  };
  (border.PdfBorderStyle.new = function(index, name) {
    border.PdfBorderStyle.__proto__.new.call(this, index, name);
    ;
  }).prototype = border.PdfBorderStyle.prototype;
  dart.addTypeTests(border.PdfBorderStyle);
  dart.addTypeCaches(border.PdfBorderStyle);
  dart.setLibraryUri(border.PdfBorderStyle, I[20]);
  dart.setStaticFieldSignature(border.PdfBorderStyle, () => ['values', 'solid', 'dashed', 'beveled', 'inset', 'underlined']);
  dart.defineExtensionMethods(border.PdfBorderStyle, ['toString']);
  dart.defineLazy(border.PdfBorderStyle, {
    /*border.PdfBorderStyle.values*/get values() {
      return C[44] || CT.C44;
    },
    /*border.PdfBorderStyle.solid*/get solid() {
      return C[45] || CT.C45;
    },
    /*border.PdfBorderStyle.dashed*/get dashed() {
      return C[46] || CT.C46;
    },
    /*border.PdfBorderStyle.beveled*/get beveled() {
      return C[47] || CT.C47;
    },
    /*border.PdfBorderStyle.inset*/get inset() {
      return C[48] || CT.C48;
    },
    /*border.PdfBorderStyle.underlined*/get underlined() {
      return C[49] || CT.C49;
    }
  }, false);
  var style$1 = dart.privateName(border, "PdfBorder.style");
  var width$ = dart.privateName(border, "PdfBorder.width");
  var dash$ = dart.privateName(border, "PdfBorder.dash");
  border.PdfBorder = class PdfBorder extends object_dict.PdfObjectDict {
    get style() {
      return this[style$1];
    }
    set style(value) {
      super.style = value;
    }
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    get dash() {
      return this[dash$];
    }
    set dash(value) {
      super.dash = value;
    }
    static ['_#new#tearOff'](pdfDocument, width, opts) {
      let style = opts && 'style' in opts ? opts.style : C[45] || CT.C45;
      let dash = opts && 'dash' in opts ? opts.dash : null;
      return new border.PdfBorder.new(pdfDocument, width, {style: style, dash: dash});
    }
    prepare() {
      super.prepare();
      this.params._set("/S", new data_types.PdfName.new("/" + "SDBIU"[$substring](this.style.index, this.style.index + 1)));
      this.params._set("/W", new data_types.PdfNum.new(this.width));
      if (this.dash != null) {
        this.params._set("/D", data_types.PdfArray.fromNum(dart.nullCheck(this.dash)));
      }
    }
  };
  (border.PdfBorder.new = function(pdfDocument, width, opts) {
    let style = opts && 'style' in opts ? opts.style : C[45] || CT.C45;
    let dash = opts && 'dash' in opts ? opts.dash : null;
    this[width$] = width;
    this[style$1] = style;
    this[dash$] = dash;
    border.PdfBorder.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = border.PdfBorder.prototype;
  dart.addTypeTests(border.PdfBorder);
  dart.addTypeCaches(border.PdfBorder);
  dart.setLibraryUri(border.PdfBorder, I[20]);
  dart.setFieldSignature(border.PdfBorder, () => ({
    __proto__: dart.getFields(border.PdfBorder.__proto__),
    style: dart.finalFieldType(border.PdfBorderStyle),
    width: dart.finalFieldType(core.double),
    dash: dart.finalFieldType(dart.nullable(core.List$(core.double)))
  }));
  var annot$ = dart.privateName(annotation, "PdfAnnot.annot");
  var pdfPage$ = dart.privateName(annotation, "PdfAnnot.pdfPage");
  annotation.PdfAnnot = class PdfAnnot extends object_dict.PdfObjectDict {
    get annot() {
      return this[annot$];
    }
    set annot(value) {
      super.annot = value;
    }
    get pdfPage() {
      return this[pdfPage$];
    }
    set pdfPage(value) {
      super.pdfPage = value;
    }
    static ['_#new#tearOff'](pdfPage, annot) {
      return new annotation.PdfAnnot.new(pdfPage, annot);
    }
    prepare() {
      super.prepare();
      this.annot.build(this.pdfPage, this, this.params);
    }
  };
  (annotation.PdfAnnot.new = function(pdfPage, annot) {
    this[pdfPage$] = pdfPage;
    this[annot$] = annot;
    annotation.PdfAnnot.__proto__.new.call(this, pdfPage.pdfDocument, {type: "/Annot"});
    this.pdfPage.annotations[$add](this);
  }).prototype = annotation.PdfAnnot.prototype;
  dart.addTypeTests(annotation.PdfAnnot);
  dart.addTypeCaches(annotation.PdfAnnot);
  dart.setLibraryUri(annotation.PdfAnnot, I[21]);
  dart.setFieldSignature(annotation.PdfAnnot, () => ({
    __proto__: dart.getFields(annotation.PdfAnnot.__proto__),
    annot: dart.finalFieldType(annotation.PdfAnnotBase),
    pdfPage: dart.finalFieldType(page.PdfPage)
  }));
  annotation.PdfAnnotFlags = class PdfAnnotFlags extends core._Enum {
    toString() {
      return "PdfAnnotFlags." + this[_name];
    }
  };
  (annotation.PdfAnnotFlags.new = function(index, name) {
    annotation.PdfAnnotFlags.__proto__.new.call(this, index, name);
    ;
  }).prototype = annotation.PdfAnnotFlags.prototype;
  dart.addTypeTests(annotation.PdfAnnotFlags);
  dart.addTypeCaches(annotation.PdfAnnotFlags);
  dart.setLibraryUri(annotation.PdfAnnotFlags, I[21]);
  dart.setStaticFieldSignature(annotation.PdfAnnotFlags, () => ['values', 'invisible', 'hidden', 'print', 'noZoom', 'noRotate', 'noView', 'readOnly', 'locked', 'toggleNoView', 'lockedContent']);
  dart.defineExtensionMethods(annotation.PdfAnnotFlags, ['toString']);
  dart.defineLazy(annotation.PdfAnnotFlags, {
    /*annotation.PdfAnnotFlags.values*/get values() {
      return C[50] || CT.C50;
    },
    /*annotation.PdfAnnotFlags.invisible*/get invisible() {
      return C[51] || CT.C51;
    },
    /*annotation.PdfAnnotFlags.hidden*/get hidden() {
      return C[52] || CT.C52;
    },
    /*annotation.PdfAnnotFlags.print*/get print() {
      return C[53] || CT.C53;
    },
    /*annotation.PdfAnnotFlags.noZoom*/get noZoom() {
      return C[54] || CT.C54;
    },
    /*annotation.PdfAnnotFlags.noRotate*/get noRotate() {
      return C[55] || CT.C55;
    },
    /*annotation.PdfAnnotFlags.noView*/get noView() {
      return C[56] || CT.C56;
    },
    /*annotation.PdfAnnotFlags.readOnly*/get readOnly() {
      return C[57] || CT.C57;
    },
    /*annotation.PdfAnnotFlags.locked*/get locked() {
      return C[58] || CT.C58;
    },
    /*annotation.PdfAnnotFlags.toggleNoView*/get toggleNoView() {
      return C[59] || CT.C59;
    },
    /*annotation.PdfAnnotFlags.lockedContent*/get lockedContent() {
      return C[60] || CT.C60;
    }
  }, false);
  annotation.PdfAnnotAppearance = class PdfAnnotAppearance extends core._Enum {
    toString() {
      return "PdfAnnotAppearance." + this[_name];
    }
  };
  (annotation.PdfAnnotAppearance.new = function(index, name) {
    annotation.PdfAnnotAppearance.__proto__.new.call(this, index, name);
    ;
  }).prototype = annotation.PdfAnnotAppearance.prototype;
  dart.addTypeTests(annotation.PdfAnnotAppearance);
  dart.addTypeCaches(annotation.PdfAnnotAppearance);
  dart.setLibraryUri(annotation.PdfAnnotAppearance, I[21]);
  dart.setStaticFieldSignature(annotation.PdfAnnotAppearance, () => ['values', 'normal', 'rollover', 'down']);
  dart.defineExtensionMethods(annotation.PdfAnnotAppearance, ['toString']);
  dart.defineLazy(annotation.PdfAnnotAppearance, {
    /*annotation.PdfAnnotAppearance.values*/get values() {
      return C[61] || CT.C61;
    },
    /*annotation.PdfAnnotAppearance.normal*/get normal() {
      return C[62] || CT.C62;
    },
    /*annotation.PdfAnnotAppearance.rollover*/get rollover() {
      return C[63] || CT.C63;
    },
    /*annotation.PdfAnnotAppearance.down*/get down() {
      return C[64] || CT.C64;
    }
  }, false);
  var subtype$ = dart.privateName(annotation, "PdfAnnotBase.subtype");
  var rect$0 = dart.privateName(annotation, "PdfAnnotBase.rect");
  var border$ = dart.privateName(annotation, "PdfAnnotBase.border");
  var content$ = dart.privateName(annotation, "PdfAnnotBase.content");
  var name$ = dart.privateName(annotation, "PdfAnnotBase.name");
  var author$0 = dart.privateName(annotation, "PdfAnnotBase.author");
  var subject$0 = dart.privateName(annotation, "PdfAnnotBase.subject");
  var flags$0 = dart.privateName(annotation, "PdfAnnotBase.flags");
  var date$ = dart.privateName(annotation, "PdfAnnotBase.date");
  var color$1 = dart.privateName(annotation, "PdfAnnotBase.color");
  var _appearances = dart.privateName(annotation, "_appearances");
  var _as = dart.privateName(annotation, "_as");
  annotation.PdfAnnotBase = class PdfAnnotBase extends core.Object {
    get subtype() {
      return this[subtype$];
    }
    set subtype(value) {
      super.subtype = value;
    }
    get rect() {
      return this[rect$0];
    }
    set rect(value) {
      super.rect = value;
    }
    get border() {
      return this[border$];
    }
    set border(value) {
      super.border = value;
    }
    get content() {
      return this[content$];
    }
    set content(value) {
      super.content = value;
    }
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get author() {
      return this[author$0];
    }
    set author(value) {
      super.author = value;
    }
    get subject() {
      return this[subject$0];
    }
    set subject(value) {
      super.subject = value;
    }
    get flags() {
      return this[flags$0];
    }
    set flags(value) {
      super.flags = value;
    }
    get date() {
      return this[date$];
    }
    set date(value) {
      super.date = value;
    }
    get color() {
      return this[color$1];
    }
    set color(value) {
      super.color = value;
    }
    get flagValue() {
      if (this.flags == null || dart.nullCheck(this.flags)[$isEmpty]) {
        return 0;
      }
      return dart.nullCheck(this.flags)[$map](core.int, dart.fn(e => (1)[$leftShift](e.index), T$.PdfAnnotFlagsToint()))[$reduce](dart.fn((a, b) => (a | b) >>> 0, T$.intAndintToint()));
    }
    appearance(pdfDocument, type, opts) {
      let t18;
      let name = opts && 'name' in opts ? opts.name : null;
      let matrix = opts && 'matrix' in opts ? opts.matrix : null;
      let boundingBox = opts && 'boundingBox' in opts ? opts.boundingBox : null;
      let selected = opts && 'selected' in opts ? opts.selected : false;
      let s = new graphic_stream.PdfGraphicXObject.new(pdfDocument, "/Form");
      let n = null;
      switch (type) {
        case C[62] || CT.C62:
          {
            n = "/N";
            break;
          }
        case C[63] || CT.C63:
          {
            n = "/R";
            break;
          }
        case C[64] || CT.C64:
          {
            n = "/D";
            break;
          }
      }
      if (name == null) {
        this[_appearances][$_set](n, s.ref());
      } else {
        if (!T$.PdfDictOfPdfDataType().is(this[_appearances][$_get](n))) {
          this[_appearances][$_set](n, T$.PdfDictOfPdfDataType().new());
        }
        let d = this[_appearances][$_get](n);
        if (T$.PdfDictOfPdfDataType().is(d)) {
          d._set(name, s.ref());
        }
      }
      if (matrix != null) {
        s.params._set("/Matrix", data_types.PdfArray.fromNum(T$.JSArrayOfnum().of([matrix._get(0), matrix._get(1), matrix._get(4), matrix._get(5), matrix._get(12), matrix._get(13)])));
      }
      let bbox = (t18 = boundingBox, t18 == null ? rect.PdfRect.fromPoints(point.PdfPoint.zero, this.rect.size) : t18);
      s.params._set("/BBox", data_types.PdfArray.fromNum(T$.JSArrayOfnum().of([bbox.x, bbox.y, bbox.width, bbox.height])));
      let g = new graphics.PdfGraphics.new(s, s.buf);
      if (selected && name != null) {
        this[_as] = new data_types.PdfName.new(name);
      }
      return g;
    }
    build(page, object, params) {
      params._set("/Subtype", new data_types.PdfName.new(this.subtype));
      params._set("/Rect", data_types.PdfArray.fromNum(T$.JSArrayOfnum().of([this.rect.left, this.rect.bottom, this.rect.right, this.rect.top])));
      params._set("/P", page.ref());
      if (this.border == null) {
        params._set("/Border", data_types.PdfArray.fromNum(C[65] || CT.C65));
      } else {
        params._set("/BS", dart.nullCheck(this.border).ref());
      }
      if (this.content != null) {
        params._set("/Contents", data_types.PdfSecString.fromString(object, dart.nullCheck(this.content)));
      }
      if (this.name != null) {
        params._set("/NM", data_types.PdfSecString.fromString(object, dart.nullCheck(this.name)));
      }
      if (this.flags != null && dart.nullCheck(this.flags)[$isNotEmpty]) {
        params._set("/F", new data_types.PdfNum.new(this.flagValue));
      }
      if (this.date != null) {
        params._set("/M", data_types.PdfSecString.fromDate(object, dart.nullCheck(this.date)));
      }
      if (this.color != null) {
        params._set("/C", new data_types.PdfColorType.new(dart.nullCheck(this.color)));
      }
      if (this.subject != null) {
        params._set("/Subj", data_types.PdfSecString.fromString(object, dart.nullCheck(this.subject)));
      }
      if (this.author != null) {
        params._set("/T", data_types.PdfSecString.fromString(object, dart.nullCheck(this.author)));
      }
      if (this[_appearances][$isNotEmpty]) {
        params._set("/AP", T$.PdfDictOfPdfDataType().new(this[_appearances]));
        if (this[_as] != null) {
          params._set("/AS", dart.nullCheck(this[_as]));
        }
      }
    }
  };
  (annotation.PdfAnnotBase.new = function(opts) {
    let subtype = opts && 'subtype' in opts ? opts.subtype : null;
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let content = opts && 'content' in opts ? opts.content : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    this[_appearances] = new (T$.IdentityMapOfString$PdfDataType()).new();
    this[_as] = null;
    this[subtype$] = subtype;
    this[rect$0] = rect;
    this[border$] = border;
    this[content$] = content;
    this[name$] = name;
    this[flags$0] = flags;
    this[date$] = date;
    this[color$1] = color;
    this[subject$0] = subject;
    this[author$0] = author;
    ;
  }).prototype = annotation.PdfAnnotBase.prototype;
  dart.addTypeTests(annotation.PdfAnnotBase);
  dart.addTypeCaches(annotation.PdfAnnotBase);
  dart.setMethodSignature(annotation.PdfAnnotBase, () => ({
    __proto__: dart.getMethods(annotation.PdfAnnotBase.__proto__),
    appearance: dart.fnType(graphics.PdfGraphics, [document$.PdfDocument, annotation.PdfAnnotAppearance], {boundingBox: dart.nullable(rect.PdfRect), matrix: dart.nullable(vector_math_64.Matrix4), name: dart.nullable(core.String), selected: core.bool}, {}),
    build: dart.fnType(dart.void, [page.PdfPage, object.PdfObject$(data_types.PdfDataType), data_types.PdfDict$(data_types.PdfDataType)])
  }));
  dart.setGetterSignature(annotation.PdfAnnotBase, () => ({
    __proto__: dart.getGetters(annotation.PdfAnnotBase.__proto__),
    flagValue: core.int
  }));
  dart.setLibraryUri(annotation.PdfAnnotBase, I[21]);
  dart.setFieldSignature(annotation.PdfAnnotBase, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotBase.__proto__),
    subtype: dart.finalFieldType(core.String),
    rect: dart.finalFieldType(rect.PdfRect),
    border: dart.finalFieldType(dart.nullable(border.PdfBorder)),
    content: dart.finalFieldType(dart.nullable(core.String)),
    name: dart.finalFieldType(dart.nullable(core.String)),
    author: dart.finalFieldType(dart.nullable(core.String)),
    subject: dart.finalFieldType(dart.nullable(core.String)),
    flags: dart.finalFieldType(dart.nullable(core.Set$(annotation.PdfAnnotFlags))),
    date: dart.finalFieldType(dart.nullable(core.DateTime)),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    [_appearances]: dart.finalFieldType(core.Map$(core.String, data_types.PdfDataType)),
    [_as]: dart.fieldType(dart.nullable(data_types.PdfName))
  }));
  annotation.PdfAnnotText = class PdfAnnotText extends annotation.PdfAnnotBase {
    static ['_#new#tearOff'](opts) {
      let rect = opts && 'rect' in opts ? opts.rect : null;
      let content = opts && 'content' in opts ? opts.content : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let flags = opts && 'flags' in opts ? opts.flags : null;
      let date = opts && 'date' in opts ? opts.date : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let subject = opts && 'subject' in opts ? opts.subject : null;
      let author = opts && 'author' in opts ? opts.author : null;
      return new annotation.PdfAnnotText.new({rect: rect, content: content, border: border, name: name, flags: flags, date: date, color: color, subject: subject, author: author});
    }
  };
  (annotation.PdfAnnotText.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let content = opts && 'content' in opts ? opts.content : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    annotation.PdfAnnotText.__proto__.new.call(this, {subtype: "/Text", rect: rect, border: border, content: content, name: name, flags: flags, date: date, color: color, subject: subject, author: author});
    ;
  }).prototype = annotation.PdfAnnotText.prototype;
  dart.addTypeTests(annotation.PdfAnnotText);
  dart.addTypeCaches(annotation.PdfAnnotText);
  dart.setLibraryUri(annotation.PdfAnnotText, I[21]);
  var dest$0 = dart.privateName(annotation, "PdfAnnotNamedLink.dest");
  annotation.PdfAnnotNamedLink = class PdfAnnotNamedLink extends annotation.PdfAnnotBase {
    get dest() {
      return this[dest$0];
    }
    set dest(value) {
      super.dest = value;
    }
    static ['_#new#tearOff'](opts) {
      let rect = opts && 'rect' in opts ? opts.rect : null;
      let dest = opts && 'dest' in opts ? opts.dest : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let flags = opts && 'flags' in opts ? opts.flags : null;
      let date = opts && 'date' in opts ? opts.date : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let subject = opts && 'subject' in opts ? opts.subject : null;
      let author = opts && 'author' in opts ? opts.author : null;
      return new annotation.PdfAnnotNamedLink.new({rect: rect, dest: dest, border: border, flags: flags, date: date, color: color, subject: subject, author: author});
    }
    build(page, object, params) {
      super.build(page, object, params);
      params._set("/A", T$.PdfDictOfPdfDataType().new(new (T$.IdentityMapOfString$PdfDataType()).from(["/S", C[66] || CT.C66, "/D", data_types.PdfSecString.fromString(object, this.dest)])));
    }
  };
  (annotation.PdfAnnotNamedLink.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let dest = opts && 'dest' in opts ? opts.dest : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    this[dest$0] = dest;
    annotation.PdfAnnotNamedLink.__proto__.new.call(this, {subtype: "/Link", rect: rect, border: border, flags: flags, date: date, color: color, subject: subject, author: author});
    ;
  }).prototype = annotation.PdfAnnotNamedLink.prototype;
  dart.addTypeTests(annotation.PdfAnnotNamedLink);
  dart.addTypeCaches(annotation.PdfAnnotNamedLink);
  dart.setLibraryUri(annotation.PdfAnnotNamedLink, I[21]);
  dart.setFieldSignature(annotation.PdfAnnotNamedLink, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotNamedLink.__proto__),
    dest: dart.finalFieldType(core.String)
  }));
  var url$ = dart.privateName(annotation, "PdfAnnotUrlLink.url");
  annotation.PdfAnnotUrlLink = class PdfAnnotUrlLink extends annotation.PdfAnnotBase {
    get url() {
      return this[url$];
    }
    set url(value) {
      super.url = value;
    }
    static ['_#new#tearOff'](opts) {
      let rect = opts && 'rect' in opts ? opts.rect : null;
      let url = opts && 'url' in opts ? opts.url : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let flags = opts && 'flags' in opts ? opts.flags : null;
      let date = opts && 'date' in opts ? opts.date : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let subject = opts && 'subject' in opts ? opts.subject : null;
      let author = opts && 'author' in opts ? opts.author : null;
      return new annotation.PdfAnnotUrlLink.new({rect: rect, url: url, border: border, flags: flags, date: date, color: color, subject: subject, author: author});
    }
    build(page, object, params) {
      super.build(page, object, params);
      params._set("/A", T$.PdfDictOfPdfDataType().new(new (T$.IdentityMapOfString$PdfDataType()).from(["/S", C[67] || CT.C67, "/URI", data_types.PdfSecString.fromString(object, this.url)])));
    }
  };
  (annotation.PdfAnnotUrlLink.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let url = opts && 'url' in opts ? opts.url : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    this[url$] = url;
    annotation.PdfAnnotUrlLink.__proto__.new.call(this, {subtype: "/Link", rect: rect, border: border, flags: flags, date: date, color: color, subject: subject, author: author});
    ;
  }).prototype = annotation.PdfAnnotUrlLink.prototype;
  dart.addTypeTests(annotation.PdfAnnotUrlLink);
  dart.addTypeCaches(annotation.PdfAnnotUrlLink);
  dart.setLibraryUri(annotation.PdfAnnotUrlLink, I[21]);
  dart.setFieldSignature(annotation.PdfAnnotUrlLink, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotUrlLink.__proto__),
    url: dart.finalFieldType(core.String)
  }));
  var interiorColor$ = dart.privateName(annotation, "PdfAnnotSquare.interiorColor");
  annotation.PdfAnnotSquare = class PdfAnnotSquare extends annotation.PdfAnnotBase {
    get interiorColor() {
      return this[interiorColor$];
    }
    set interiorColor(value) {
      super.interiorColor = value;
    }
    static ['_#new#tearOff'](opts) {
      let rect = opts && 'rect' in opts ? opts.rect : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let flags = opts && 'flags' in opts ? opts.flags : null;
      let date = opts && 'date' in opts ? opts.date : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
      let subject = opts && 'subject' in opts ? opts.subject : null;
      let author = opts && 'author' in opts ? opts.author : null;
      return new annotation.PdfAnnotSquare.new({rect: rect, border: border, flags: flags, date: date, color: color, interiorColor: interiorColor, subject: subject, author: author});
    }
    build(page, object, params) {
      super.build(page, object, params);
      if (this.interiorColor != null) {
        params._set("/IC", new data_types.PdfColorType.new(dart.nullCheck(this.interiorColor)));
      }
    }
  };
  (annotation.PdfAnnotSquare.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    this[interiorColor$] = interiorColor;
    annotation.PdfAnnotSquare.__proto__.new.call(this, {subtype: "/Square", rect: rect, border: border, flags: flags, date: date, color: color, subject: subject, author: author});
    ;
  }).prototype = annotation.PdfAnnotSquare.prototype;
  dart.addTypeTests(annotation.PdfAnnotSquare);
  dart.addTypeCaches(annotation.PdfAnnotSquare);
  dart.setLibraryUri(annotation.PdfAnnotSquare, I[21]);
  dart.setFieldSignature(annotation.PdfAnnotSquare, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotSquare.__proto__),
    interiorColor: dart.finalFieldType(dart.nullable(color$.PdfColor))
  }));
  var interiorColor$0 = dart.privateName(annotation, "PdfAnnotCircle.interiorColor");
  annotation.PdfAnnotCircle = class PdfAnnotCircle extends annotation.PdfAnnotBase {
    get interiorColor() {
      return this[interiorColor$0];
    }
    set interiorColor(value) {
      super.interiorColor = value;
    }
    static ['_#new#tearOff'](opts) {
      let rect = opts && 'rect' in opts ? opts.rect : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let flags = opts && 'flags' in opts ? opts.flags : null;
      let date = opts && 'date' in opts ? opts.date : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
      let subject = opts && 'subject' in opts ? opts.subject : null;
      let author = opts && 'author' in opts ? opts.author : null;
      return new annotation.PdfAnnotCircle.new({rect: rect, border: border, flags: flags, date: date, color: color, interiorColor: interiorColor, subject: subject, author: author});
    }
    build(page, object, params) {
      super.build(page, object, params);
      if (this.interiorColor != null) {
        params._set("/IC", new data_types.PdfColorType.new(dart.nullCheck(this.interiorColor)));
      }
    }
  };
  (annotation.PdfAnnotCircle.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    this[interiorColor$0] = interiorColor;
    annotation.PdfAnnotCircle.__proto__.new.call(this, {subtype: "/Circle", rect: rect, border: border, flags: flags, date: date, color: color, subject: subject, author: author});
    ;
  }).prototype = annotation.PdfAnnotCircle.prototype;
  dart.addTypeTests(annotation.PdfAnnotCircle);
  dart.addTypeCaches(annotation.PdfAnnotCircle);
  dart.setLibraryUri(annotation.PdfAnnotCircle, I[21]);
  dart.setFieldSignature(annotation.PdfAnnotCircle, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotCircle.__proto__),
    interiorColor: dart.finalFieldType(dart.nullable(color$.PdfColor))
  }));
  var document$0 = dart.privateName(annotation, "PdfAnnotPolygon.document");
  var points$ = dart.privateName(annotation, "PdfAnnotPolygon.points");
  var interiorColor$1 = dart.privateName(annotation, "PdfAnnotPolygon.interiorColor");
  annotation.PdfAnnotPolygon = class PdfAnnotPolygon extends annotation.PdfAnnotBase {
    get document() {
      return this[document$0];
    }
    set document(value) {
      super.document = value;
    }
    get points() {
      return this[points$];
    }
    set points(value) {
      super.points = value;
    }
    get interiorColor() {
      return this[interiorColor$1];
    }
    set interiorColor(value) {
      super.interiorColor = value;
    }
    static ['_#new#tearOff'](document, points, opts) {
      let rect = opts && 'rect' in opts ? opts.rect : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let flags = opts && 'flags' in opts ? opts.flags : null;
      let date = opts && 'date' in opts ? opts.date : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
      let subject = opts && 'subject' in opts ? opts.subject : null;
      let author = opts && 'author' in opts ? opts.author : null;
      let closed = opts && 'closed' in opts ? opts.closed : true;
      return new annotation.PdfAnnotPolygon.new(document, points, {rect: rect, border: border, flags: flags, date: date, color: color, interiorColor: interiorColor, subject: subject, author: author, closed: closed});
    }
    build(page, object, params) {
      super.build(page, object, params);
      let flippedPoints = this.points[$map](point.PdfPoint, dart.fn(e => new point.PdfPoint.new(e.x, this.rect.height - e.y), T$.PdfPointToPdfPoint()))[$toList]();
      let verticies = T$.JSArrayOfnum().of([]);
      for (let i = 0; i < flippedPoints[$length]; i = i + 1) {
        verticies[$add](flippedPoints[$_get](i).x);
        verticies[$add](flippedPoints[$_get](i).y);
      }
      params._set("/Vertices", data_types.PdfArray.fromNum(verticies));
      if (this.interiorColor != null) {
        params._set("/IC", new data_types.PdfColorType.new(dart.nullCheck(this.interiorColor)));
      }
    }
  };
  (annotation.PdfAnnotPolygon.new = function(document, points, opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let closed = opts && 'closed' in opts ? opts.closed : true;
    this[document$0] = document;
    this[points$] = points;
    this[interiorColor$1] = interiorColor;
    annotation.PdfAnnotPolygon.__proto__.new.call(this, {subtype: closed ? "/PolyLine" : "/Polygon", rect: rect, border: border, flags: flags, date: date, color: color, subject: subject, author: author});
    ;
  }).prototype = annotation.PdfAnnotPolygon.prototype;
  dart.addTypeTests(annotation.PdfAnnotPolygon);
  dart.addTypeCaches(annotation.PdfAnnotPolygon);
  dart.setLibraryUri(annotation.PdfAnnotPolygon, I[21]);
  dart.setFieldSignature(annotation.PdfAnnotPolygon, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotPolygon.__proto__),
    document: dart.finalFieldType(document$.PdfDocument),
    points: dart.finalFieldType(core.List$(point.PdfPoint)),
    interiorColor: dart.finalFieldType(dart.nullable(color$.PdfColor))
  }));
  var document$1 = dart.privateName(annotation, "PdfAnnotInk.document");
  var points$0 = dart.privateName(annotation, "PdfAnnotInk.points");
  annotation.PdfAnnotInk = class PdfAnnotInk extends annotation.PdfAnnotBase {
    get document() {
      return this[document$1];
    }
    set document(value) {
      super.document = value;
    }
    get points() {
      return this[points$0];
    }
    set points(value) {
      super.points = value;
    }
    static ['_#new#tearOff'](document, points, opts) {
      let rect = opts && 'rect' in opts ? opts.rect : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let flags = opts && 'flags' in opts ? opts.flags : null;
      let date = opts && 'date' in opts ? opts.date : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let subject = opts && 'subject' in opts ? opts.subject : null;
      let author = opts && 'author' in opts ? opts.author : null;
      let content = opts && 'content' in opts ? opts.content : null;
      return new annotation.PdfAnnotInk.new(document, points, {rect: rect, border: border, flags: flags, date: date, color: color, subject: subject, author: author, content: content});
    }
    build(page, object, params) {
      super.build(page, object, params);
      let verticies = T$.ListOfListOfnum().filled(this.points[$length], T$.JSArrayOfnum().of([]));
      for (let listIndex = 0; listIndex < this.points[$length]; listIndex = listIndex + 1) {
        let flippedPoints = this.points[$_get](listIndex)[$map](point.PdfPoint, dart.fn(e => new point.PdfPoint.new(e.x, this.rect.height - e.y), T$.PdfPointToPdfPoint()))[$toList]();
        for (let i = 0; i < flippedPoints[$length]; i = i + 1) {
          verticies[$_get](listIndex)[$add](flippedPoints[$_get](i).x);
          verticies[$_get](listIndex)[$add](flippedPoints[$_get](i).y);
        }
      }
      params._set("/InkList", new (T$.PdfArrayOfPdfArrayOfPdfNum()).new(verticies[$map](T$.PdfArrayOfPdfNum(), dart.fn(v => data_types.PdfArray.fromNum(v), T$.ListOfnumToPdfArrayOfPdfNum()))[$toList]()));
    }
  };
  (annotation.PdfAnnotInk.new = function(document, points, opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let content = opts && 'content' in opts ? opts.content : null;
    this[document$1] = document;
    this[points$0] = points;
    annotation.PdfAnnotInk.__proto__.new.call(this, {subtype: "/Ink", rect: rect, border: border, flags: flags, date: date, color: color, subject: subject, author: author, content: content});
    ;
  }).prototype = annotation.PdfAnnotInk.prototype;
  dart.addTypeTests(annotation.PdfAnnotInk);
  dart.addTypeCaches(annotation.PdfAnnotInk);
  dart.setLibraryUri(annotation.PdfAnnotInk, I[21]);
  dart.setFieldSignature(annotation.PdfAnnotInk, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotInk.__proto__),
    document: dart.finalFieldType(document$.PdfDocument),
    points: dart.finalFieldType(core.List$(core.List$(point.PdfPoint)))
  }));
  annotation.PdfAnnotHighlighting = class PdfAnnotHighlighting extends core._Enum {
    toString() {
      return "PdfAnnotHighlighting." + this[_name];
    }
  };
  (annotation.PdfAnnotHighlighting.new = function(index, name) {
    annotation.PdfAnnotHighlighting.__proto__.new.call(this, index, name);
    ;
  }).prototype = annotation.PdfAnnotHighlighting.prototype;
  dart.addTypeTests(annotation.PdfAnnotHighlighting);
  dart.addTypeCaches(annotation.PdfAnnotHighlighting);
  dart.setLibraryUri(annotation.PdfAnnotHighlighting, I[21]);
  dart.setStaticFieldSignature(annotation.PdfAnnotHighlighting, () => ['values', 'none', 'invert', 'outline', 'push', 'toggle']);
  dart.defineExtensionMethods(annotation.PdfAnnotHighlighting, ['toString']);
  dart.defineLazy(annotation.PdfAnnotHighlighting, {
    /*annotation.PdfAnnotHighlighting.values*/get values() {
      return C[68] || CT.C68;
    },
    /*annotation.PdfAnnotHighlighting.none*/get none() {
      return C[69] || CT.C69;
    },
    /*annotation.PdfAnnotHighlighting.invert*/get invert() {
      return C[70] || CT.C70;
    },
    /*annotation.PdfAnnotHighlighting.outline*/get outline() {
      return C[71] || CT.C71;
    },
    /*annotation.PdfAnnotHighlighting.push*/get push() {
      return C[72] || CT.C72;
    },
    /*annotation.PdfAnnotHighlighting.toggle*/get toggle() {
      return C[73] || CT.C73;
    }
  }, false);
  var fieldType$ = dart.privateName(annotation, "PdfAnnotWidget.fieldType");
  var fieldName$ = dart.privateName(annotation, "PdfAnnotWidget.fieldName");
  var highlighting$ = dart.privateName(annotation, "PdfAnnotWidget.highlighting");
  var backgroundColor$ = dart.privateName(annotation, "PdfAnnotWidget.backgroundColor");
  annotation.PdfAnnotWidget = class PdfAnnotWidget extends annotation.PdfAnnotBase {
    get fieldType() {
      return this[fieldType$];
    }
    set fieldType(value) {
      super.fieldType = value;
    }
    get fieldName() {
      return this[fieldName$];
    }
    set fieldName(value) {
      super.fieldName = value;
    }
    get highlighting() {
      return this[highlighting$];
    }
    set highlighting(value) {
      super.highlighting = value;
    }
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    build(page, object, params) {
      super.build(page, object, params);
      params._set("/FT", new data_types.PdfName.new(this.fieldType));
      if (this.fieldName != null) {
        params._set("/T", data_types.PdfSecString.fromString(object, dart.nullCheck(this.fieldName)));
      }
      let mk = T$.PdfDictOfPdfDataType().new();
      if (this.color != null) {
        mk.values[$_set]("/BC", new data_types.PdfColorType.new(dart.nullCheck(this.color)));
      }
      if (this.backgroundColor != null) {
        mk.values[$_set]("/BG", new data_types.PdfColorType.new(dart.nullCheck(this.backgroundColor)));
      }
      if (mk.values[$isNotEmpty]) {
        params._set("/MK", mk);
      }
      if (this.highlighting != null) {
        switch (dart.nullCheck(this.highlighting)) {
          case C[69] || CT.C69:
            {
              params._set("/H", C[74] || CT.C74);
              break;
            }
          case C[70] || CT.C70:
            {
              params._set("/H", C[75] || CT.C75);
              break;
            }
          case C[71] || CT.C71:
            {
              params._set("/H", C[76] || CT.C76);
              break;
            }
          case C[72] || CT.C72:
            {
              params._set("/H", C[77] || CT.C77);
              break;
            }
          case C[73] || CT.C73:
            {
              params._set("/H", C[78] || CT.C78);
              break;
            }
        }
      }
    }
  };
  (annotation.PdfAnnotWidget.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let fieldType = opts && 'fieldType' in opts ? opts.fieldType : null;
    let fieldName = opts && 'fieldName' in opts ? opts.fieldName : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    this[fieldType$] = fieldType;
    this[fieldName$] = fieldName;
    this[backgroundColor$] = backgroundColor;
    this[highlighting$] = highlighting;
    annotation.PdfAnnotWidget.__proto__.new.call(this, {subtype: "/Widget", rect: rect, border: border, flags: flags, date: date, color: color, subject: subject, author: author});
    ;
  }).prototype = annotation.PdfAnnotWidget.prototype;
  dart.addTypeTests(annotation.PdfAnnotWidget);
  dart.addTypeCaches(annotation.PdfAnnotWidget);
  dart.setLibraryUri(annotation.PdfAnnotWidget, I[21]);
  dart.setFieldSignature(annotation.PdfAnnotWidget, () => ({
    __proto__: dart.getFields(annotation.PdfAnnotWidget.__proto__),
    fieldType: dart.finalFieldType(core.String),
    fieldName: dart.finalFieldType(dart.nullable(core.String)),
    highlighting: dart.finalFieldType(dart.nullable(annotation.PdfAnnotHighlighting)),
    backgroundColor: dart.finalFieldType(dart.nullable(color$.PdfColor))
  }));
  annotation.PdfAnnotSign = class PdfAnnotSign extends annotation.PdfAnnotWidget {
    static ['_#new#tearOff'](opts) {
      let rect = opts && 'rect' in opts ? opts.rect : null;
      let fieldName = opts && 'fieldName' in opts ? opts.fieldName : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let flags = opts && 'flags' in opts ? opts.flags : null;
      let date = opts && 'date' in opts ? opts.date : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
      return new annotation.PdfAnnotSign.new({rect: rect, fieldName: fieldName, border: border, flags: flags, date: date, color: color, highlighting: highlighting});
    }
    build(page, object, params) {
      super.build(page, object, params);
      if (page.pdfDocument.sign != null) {
        params._set("/V", dart.nullCheck(page.pdfDocument.sign).ref());
      }
    }
  };
  (annotation.PdfAnnotSign.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let fieldName = opts && 'fieldName' in opts ? opts.fieldName : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
    annotation.PdfAnnotSign.__proto__.new.call(this, {rect: rect, fieldType: "/Sig", fieldName: fieldName, border: border, flags: flags, date: date, color: color, highlighting: highlighting});
    ;
  }).prototype = annotation.PdfAnnotSign.prototype;
  dart.addTypeTests(annotation.PdfAnnotSign);
  dart.addTypeCaches(annotation.PdfAnnotSign);
  dart.setLibraryUri(annotation.PdfAnnotSign, I[21]);
  annotation.PdfFieldFlags = class PdfFieldFlags extends core._Enum {
    toString() {
      return "PdfFieldFlags." + this[_name];
    }
  };
  (annotation.PdfFieldFlags.new = function(index, name) {
    annotation.PdfFieldFlags.__proto__.new.call(this, index, name);
    ;
  }).prototype = annotation.PdfFieldFlags.prototype;
  dart.addTypeTests(annotation.PdfFieldFlags);
  dart.addTypeCaches(annotation.PdfFieldFlags);
  dart.setLibraryUri(annotation.PdfFieldFlags, I[21]);
  dart.setStaticFieldSignature(annotation.PdfFieldFlags, () => ['values', 'readOnly', 'mandatory', 'noExport', 'reserved4', 'reserved5', 'reserved6', 'reserved7', 'reserved8', 'reserved9', 'reserved10', 'reserved11', 'reserved12', 'multiline', 'password', 'noToggleToOff', 'radio', 'pushButton', 'combo', 'edit', 'sort', 'fileSelect', 'multiSelect', 'doNotSpellCheck', 'doNotScroll', 'comb', 'radiosInUnison', 'commitOnSelChange']);
  dart.defineExtensionMethods(annotation.PdfFieldFlags, ['toString']);
  dart.defineLazy(annotation.PdfFieldFlags, {
    /*annotation.PdfFieldFlags.values*/get values() {
      return C[79] || CT.C79;
    },
    /*annotation.PdfFieldFlags.readOnly*/get readOnly() {
      return C[80] || CT.C80;
    },
    /*annotation.PdfFieldFlags.mandatory*/get mandatory() {
      return C[81] || CT.C81;
    },
    /*annotation.PdfFieldFlags.noExport*/get noExport() {
      return C[82] || CT.C82;
    },
    /*annotation.PdfFieldFlags.reserved4*/get reserved4() {
      return C[83] || CT.C83;
    },
    /*annotation.PdfFieldFlags.reserved5*/get reserved5() {
      return C[84] || CT.C84;
    },
    /*annotation.PdfFieldFlags.reserved6*/get reserved6() {
      return C[85] || CT.C85;
    },
    /*annotation.PdfFieldFlags.reserved7*/get reserved7() {
      return C[86] || CT.C86;
    },
    /*annotation.PdfFieldFlags.reserved8*/get reserved8() {
      return C[87] || CT.C87;
    },
    /*annotation.PdfFieldFlags.reserved9*/get reserved9() {
      return C[88] || CT.C88;
    },
    /*annotation.PdfFieldFlags.reserved10*/get reserved10() {
      return C[89] || CT.C89;
    },
    /*annotation.PdfFieldFlags.reserved11*/get reserved11() {
      return C[90] || CT.C90;
    },
    /*annotation.PdfFieldFlags.reserved12*/get reserved12() {
      return C[91] || CT.C91;
    },
    /*annotation.PdfFieldFlags.multiline*/get multiline() {
      return C[92] || CT.C92;
    },
    /*annotation.PdfFieldFlags.password*/get password() {
      return C[93] || CT.C93;
    },
    /*annotation.PdfFieldFlags.noToggleToOff*/get noToggleToOff() {
      return C[94] || CT.C94;
    },
    /*annotation.PdfFieldFlags.radio*/get radio() {
      return C[95] || CT.C95;
    },
    /*annotation.PdfFieldFlags.pushButton*/get pushButton() {
      return C[96] || CT.C96;
    },
    /*annotation.PdfFieldFlags.combo*/get combo() {
      return C[97] || CT.C97;
    },
    /*annotation.PdfFieldFlags.edit*/get edit() {
      return C[98] || CT.C98;
    },
    /*annotation.PdfFieldFlags.sort*/get sort() {
      return C[99] || CT.C99;
    },
    /*annotation.PdfFieldFlags.fileSelect*/get fileSelect() {
      return C[100] || CT.C100;
    },
    /*annotation.PdfFieldFlags.multiSelect*/get multiSelect() {
      return C[101] || CT.C101;
    },
    /*annotation.PdfFieldFlags.doNotSpellCheck*/get doNotSpellCheck() {
      return C[102] || CT.C102;
    },
    /*annotation.PdfFieldFlags.doNotScroll*/get doNotScroll() {
      return C[103] || CT.C103;
    },
    /*annotation.PdfFieldFlags.comb*/get comb() {
      return C[104] || CT.C104;
    },
    /*annotation.PdfFieldFlags.radiosInUnison*/get radiosInUnison() {
      return C[105] || CT.C105;
    },
    /*annotation.PdfFieldFlags.commitOnSelChange*/get commitOnSelChange() {
      return C[106] || CT.C106;
    }
  }, false);
  var alternateName$ = dart.privateName(annotation, "PdfFormField.alternateName");
  var mappingName$ = dart.privateName(annotation, "PdfFormField.mappingName");
  var fieldFlags$ = dart.privateName(annotation, "PdfFormField.fieldFlags");
  annotation.PdfFormField = class PdfFormField extends annotation.PdfAnnotWidget {
    get alternateName() {
      return this[alternateName$];
    }
    set alternateName(value) {
      super.alternateName = value;
    }
    get mappingName() {
      return this[mappingName$];
    }
    set mappingName(value) {
      super.mappingName = value;
    }
    get fieldFlags() {
      return this[fieldFlags$];
    }
    set fieldFlags(value) {
      super.fieldFlags = value;
    }
    static ['_#new#tearOff'](opts) {
      let fieldType = opts && 'fieldType' in opts ? opts.fieldType : null;
      let rect = opts && 'rect' in opts ? opts.rect : null;
      let fieldName = opts && 'fieldName' in opts ? opts.fieldName : null;
      let alternateName = opts && 'alternateName' in opts ? opts.alternateName : null;
      let mappingName = opts && 'mappingName' in opts ? opts.mappingName : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let flags = opts && 'flags' in opts ? opts.flags : null;
      let date = opts && 'date' in opts ? opts.date : null;
      let subject = opts && 'subject' in opts ? opts.subject : null;
      let author = opts && 'author' in opts ? opts.author : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
      let fieldFlags = opts && 'fieldFlags' in opts ? opts.fieldFlags : null;
      return new annotation.PdfFormField.new({fieldType: fieldType, rect: rect, fieldName: fieldName, alternateName: alternateName, mappingName: mappingName, border: border, flags: flags, date: date, subject: subject, author: author, color: color, backgroundColor: backgroundColor, highlighting: highlighting, fieldFlags: fieldFlags});
    }
    get fieldFlagsValue() {
      if (this.fieldFlags == null || dart.nullCheck(this.fieldFlags)[$isEmpty]) {
        return 0;
      }
      return dart.nullCheck(this.fieldFlags)[$map](core.int, dart.fn(e => (1)[$leftShift](e.index), T$.PdfFieldFlagsToint()))[$reduce](dart.fn((a, b) => (a | b) >>> 0, T$.intAndintToint()));
    }
    build(page, object, params) {
      super.build(page, object, params);
      if (this.alternateName != null) {
        params._set("/TU", data_types.PdfSecString.fromString(object, dart.nullCheck(this.alternateName)));
      }
      if (this.mappingName != null) {
        params._set("/TM", data_types.PdfSecString.fromString(object, dart.nullCheck(this.mappingName)));
      }
      params._set("/Ff", new data_types.PdfNum.new(this.fieldFlagsValue));
    }
  };
  (annotation.PdfFormField.new = function(opts) {
    let fieldType = opts && 'fieldType' in opts ? opts.fieldType : null;
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let fieldName = opts && 'fieldName' in opts ? opts.fieldName : null;
    let alternateName = opts && 'alternateName' in opts ? opts.alternateName : null;
    let mappingName = opts && 'mappingName' in opts ? opts.mappingName : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
    let fieldFlags = opts && 'fieldFlags' in opts ? opts.fieldFlags : null;
    this[alternateName$] = alternateName;
    this[mappingName$] = mappingName;
    this[fieldFlags$] = fieldFlags;
    annotation.PdfFormField.__proto__.new.call(this, {rect: rect, fieldType: fieldType, fieldName: fieldName, border: border, flags: flags, date: date, subject: subject, author: author, backgroundColor: backgroundColor, color: color, highlighting: highlighting});
    ;
  }).prototype = annotation.PdfFormField.prototype;
  dart.addTypeTests(annotation.PdfFormField);
  dart.addTypeCaches(annotation.PdfFormField);
  dart.setGetterSignature(annotation.PdfFormField, () => ({
    __proto__: dart.getGetters(annotation.PdfFormField.__proto__),
    fieldFlagsValue: core.int
  }));
  dart.setLibraryUri(annotation.PdfFormField, I[21]);
  dart.setFieldSignature(annotation.PdfFormField, () => ({
    __proto__: dart.getFields(annotation.PdfFormField.__proto__),
    alternateName: dart.finalFieldType(dart.nullable(core.String)),
    mappingName: dart.finalFieldType(dart.nullable(core.String)),
    fieldFlags: dart.finalFieldType(dart.nullable(core.Set$(annotation.PdfFieldFlags)))
  }));
  annotation.PdfTextFieldAlign = class PdfTextFieldAlign extends core._Enum {
    toString() {
      return "PdfTextFieldAlign." + this[_name];
    }
  };
  (annotation.PdfTextFieldAlign.new = function(index, name) {
    annotation.PdfTextFieldAlign.__proto__.new.call(this, index, name);
    ;
  }).prototype = annotation.PdfTextFieldAlign.prototype;
  dart.addTypeTests(annotation.PdfTextFieldAlign);
  dart.addTypeCaches(annotation.PdfTextFieldAlign);
  dart.setLibraryUri(annotation.PdfTextFieldAlign, I[21]);
  dart.setStaticFieldSignature(annotation.PdfTextFieldAlign, () => ['values', 'left', 'center', 'right']);
  dart.defineExtensionMethods(annotation.PdfTextFieldAlign, ['toString']);
  dart.defineLazy(annotation.PdfTextFieldAlign, {
    /*annotation.PdfTextFieldAlign.values*/get values() {
      return C[107] || CT.C107;
    },
    /*annotation.PdfTextFieldAlign.left*/get left() {
      return C[108] || CT.C108;
    },
    /*annotation.PdfTextFieldAlign.center*/get center() {
      return C[109] || CT.C109;
    },
    /*annotation.PdfTextFieldAlign.right*/get right() {
      return C[110] || CT.C110;
    }
  }, false);
  var maxLength$ = dart.privateName(annotation, "PdfTextField.maxLength");
  var value$0 = dart.privateName(annotation, "PdfTextField.value");
  var defaultValue$ = dart.privateName(annotation, "PdfTextField.defaultValue");
  var font$ = dart.privateName(annotation, "PdfTextField.font");
  var fontSize$ = dart.privateName(annotation, "PdfTextField.fontSize");
  var textColor$ = dart.privateName(annotation, "PdfTextField.textColor");
  var textAlign$ = dart.privateName(annotation, "PdfTextField.textAlign");
  annotation.PdfTextField = class PdfTextField extends annotation.PdfFormField {
    get maxLength() {
      return this[maxLength$];
    }
    set maxLength(value) {
      super.maxLength = value;
    }
    get value() {
      return this[value$0];
    }
    set value(value) {
      super.value = value;
    }
    get defaultValue() {
      return this[defaultValue$];
    }
    set defaultValue(value) {
      super.defaultValue = value;
    }
    get font() {
      return this[font$];
    }
    set font(value) {
      super.font = value;
    }
    get fontSize() {
      return this[fontSize$];
    }
    set fontSize(value) {
      super.fontSize = value;
    }
    get textColor() {
      return this[textColor$];
    }
    set textColor(value) {
      super.textColor = value;
    }
    get textAlign() {
      return this[textAlign$];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    static ['_#new#tearOff'](opts) {
      let rect = opts && 'rect' in opts ? opts.rect : null;
      let fieldName = opts && 'fieldName' in opts ? opts.fieldName : null;
      let alternateName = opts && 'alternateName' in opts ? opts.alternateName : null;
      let mappingName = opts && 'mappingName' in opts ? opts.mappingName : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let flags = opts && 'flags' in opts ? opts.flags : null;
      let date = opts && 'date' in opts ? opts.date : null;
      let subject = opts && 'subject' in opts ? opts.subject : null;
      let author = opts && 'author' in opts ? opts.author : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
      let fieldFlags = opts && 'fieldFlags' in opts ? opts.fieldFlags : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
      let maxLength = opts && 'maxLength' in opts ? opts.maxLength : null;
      let font = opts && 'font' in opts ? opts.font : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let textColor = opts && 'textColor' in opts ? opts.textColor : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      return new annotation.PdfTextField.new({rect: rect, fieldName: fieldName, alternateName: alternateName, mappingName: mappingName, border: border, flags: flags, date: date, subject: subject, author: author, color: color, backgroundColor: backgroundColor, highlighting: highlighting, fieldFlags: fieldFlags, value: value, defaultValue: defaultValue, maxLength: maxLength, font: font, fontSize: fontSize, textColor: textColor, textAlign: textAlign});
    }
    build(page, object, params) {
      super.build(page, object, params);
      if (this.maxLength != null) {
        params._set("/MaxLen", new data_types.PdfNum.new(dart.nullCheck(this.maxLength)));
      }
      let buf = new stream.PdfStream.new();
      let g = new graphics.PdfGraphics.new(page, buf);
      g.setFillColor(this.textColor);
      g.setFont(this.font, this.fontSize);
      params._set("/DA", data_types.PdfSecString.fromStream(object, buf));
      if (this.value != null) {
        params._set("/V", data_types.PdfSecString.fromString(object, dart.nullCheck(this.value)));
      }
      if (this.defaultValue != null) {
        params._set("/DV", data_types.PdfSecString.fromString(object, dart.nullCheck(this.defaultValue)));
      }
      if (this.textAlign != null) {
        params._set("/Q", new data_types.PdfNum.new(dart.nullCheck(this.textAlign).index));
      }
    }
  };
  (annotation.PdfTextField.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let fieldName = opts && 'fieldName' in opts ? opts.fieldName : null;
    let alternateName = opts && 'alternateName' in opts ? opts.alternateName : null;
    let mappingName = opts && 'mappingName' in opts ? opts.mappingName : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
    let fieldFlags = opts && 'fieldFlags' in opts ? opts.fieldFlags : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
    let maxLength = opts && 'maxLength' in opts ? opts.maxLength : null;
    let font = opts && 'font' in opts ? opts.font : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let textColor = opts && 'textColor' in opts ? opts.textColor : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    this[value$0] = value;
    this[defaultValue$] = defaultValue;
    this[maxLength$] = maxLength;
    this[font$] = font;
    this[fontSize$] = fontSize;
    this[textColor$] = textColor;
    this[textAlign$] = textAlign;
    annotation.PdfTextField.__proto__.new.call(this, {rect: rect, fieldType: "/Tx", fieldName: fieldName, border: border, flags: flags, date: date, subject: subject, author: author, color: color, backgroundColor: backgroundColor, highlighting: highlighting, alternateName: alternateName, mappingName: mappingName, fieldFlags: fieldFlags});
    ;
  }).prototype = annotation.PdfTextField.prototype;
  dart.addTypeTests(annotation.PdfTextField);
  dart.addTypeCaches(annotation.PdfTextField);
  dart.setLibraryUri(annotation.PdfTextField, I[21]);
  dart.setFieldSignature(annotation.PdfTextField, () => ({
    __proto__: dart.getFields(annotation.PdfTextField.__proto__),
    maxLength: dart.finalFieldType(dart.nullable(core.int)),
    value: dart.finalFieldType(dart.nullable(core.String)),
    defaultValue: dart.finalFieldType(dart.nullable(core.String)),
    font: dart.finalFieldType(font.PdfFont),
    fontSize: dart.finalFieldType(core.double),
    textColor: dart.finalFieldType(color$.PdfColor),
    textAlign: dart.finalFieldType(dart.nullable(annotation.PdfTextFieldAlign))
  }));
  var value$1 = dart.privateName(annotation, "PdfButtonField.value");
  var defaultValue$0 = dart.privateName(annotation, "PdfButtonField.defaultValue");
  annotation.PdfButtonField = class PdfButtonField extends annotation.PdfFormField {
    get value() {
      return this[value$1];
    }
    set value(value) {
      super.value = value;
    }
    get defaultValue() {
      return this[defaultValue$0];
    }
    set defaultValue(value) {
      super.defaultValue = value;
    }
    static ['_#new#tearOff'](opts) {
      let rect = opts && 'rect' in opts ? opts.rect : null;
      let fieldName = opts && 'fieldName' in opts ? opts.fieldName : null;
      let alternateName = opts && 'alternateName' in opts ? opts.alternateName : null;
      let mappingName = opts && 'mappingName' in opts ? opts.mappingName : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let flags = opts && 'flags' in opts ? opts.flags : null;
      let date = opts && 'date' in opts ? opts.date : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
      let fieldFlags = opts && 'fieldFlags' in opts ? opts.fieldFlags : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
      return new annotation.PdfButtonField.new({rect: rect, fieldName: fieldName, alternateName: alternateName, mappingName: mappingName, border: border, flags: flags, date: date, color: color, backgroundColor: backgroundColor, highlighting: highlighting, fieldFlags: fieldFlags, value: value, defaultValue: defaultValue});
    }
    build(page, object, params) {
      super.build(page, object, params);
      if (this.value != null) {
        params._set("/V", new data_types.PdfName.new(dart.nullCheck(this.value)));
      }
      if (this.defaultValue != null) {
        params._set("/DV", new data_types.PdfName.new(dart.nullCheck(this.defaultValue)));
      }
    }
  };
  (annotation.PdfButtonField.new = function(opts) {
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let fieldName = opts && 'fieldName' in opts ? opts.fieldName : null;
    let alternateName = opts && 'alternateName' in opts ? opts.alternateName : null;
    let mappingName = opts && 'mappingName' in opts ? opts.mappingName : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
    let fieldFlags = opts && 'fieldFlags' in opts ? opts.fieldFlags : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
    this[value$1] = value;
    this[defaultValue$0] = defaultValue;
    annotation.PdfButtonField.__proto__.new.call(this, {rect: rect, fieldType: "/Btn", fieldName: fieldName, border: border, flags: flags, date: date, color: color, backgroundColor: backgroundColor, highlighting: highlighting, alternateName: alternateName, mappingName: mappingName, fieldFlags: fieldFlags});
    ;
  }).prototype = annotation.PdfButtonField.prototype;
  dart.addTypeTests(annotation.PdfButtonField);
  dart.addTypeCaches(annotation.PdfButtonField);
  dart.setLibraryUri(annotation.PdfButtonField, I[21]);
  dart.setFieldSignature(annotation.PdfButtonField, () => ({
    __proto__: dart.getFields(annotation.PdfButtonField.__proto__),
    value: dart.finalFieldType(dart.nullable(core.String)),
    defaultValue: dart.finalFieldType(dart.nullable(core.String))
  }));
  page.PdfPageRotation = class PdfPageRotation extends core._Enum {
    toString() {
      return "PdfPageRotation." + this[_name];
    }
  };
  (page.PdfPageRotation.new = function(index, name) {
    page.PdfPageRotation.__proto__.new.call(this, index, name);
    ;
  }).prototype = page.PdfPageRotation.prototype;
  dart.addTypeTests(page.PdfPageRotation);
  dart.addTypeCaches(page.PdfPageRotation);
  dart.setLibraryUri(page.PdfPageRotation, I[22]);
  dart.setStaticFieldSignature(page.PdfPageRotation, () => ['values', 'none', 'rotate90', 'rotate180', 'rotate270']);
  dart.defineExtensionMethods(page.PdfPageRotation, ['toString']);
  dart.defineLazy(page.PdfPageRotation, {
    /*page.PdfPageRotation.values*/get values() {
      return C[111] || CT.C111;
    },
    /*page.PdfPageRotation.none*/get none() {
      return C[112] || CT.C112;
    },
    /*page.PdfPageRotation.rotate90*/get rotate90() {
      return C[113] || CT.C113;
    },
    /*page.PdfPageRotation.rotate180*/get rotate180() {
      return C[114] || CT.C114;
    },
    /*page.PdfPageRotation.rotate270*/get rotate270() {
      return C[115] || CT.C115;
    }
  }, false);
  var pageFormat$ = dart.privateName(page, "PdfPage.pageFormat");
  var rotate$ = dart.privateName(page, "PdfPage.rotate");
  var contents = dart.privateName(page, "PdfPage.contents");
  var annotations = dart.privateName(page, "PdfPage.annotations");
  var PdfPageFormat_marginRight = dart.privateName(page_format, "PdfPageFormat.marginRight");
  var PdfPageFormat_marginLeft = dart.privateName(page_format, "PdfPageFormat.marginLeft");
  var PdfPageFormat_marginBottom = dart.privateName(page_format, "PdfPageFormat.marginBottom");
  var PdfPageFormat_marginTop = dart.privateName(page_format, "PdfPageFormat.marginTop");
  var PdfPageFormat_height = dart.privateName(page_format, "PdfPageFormat.height");
  var PdfPageFormat_width = dart.privateName(page_format, "PdfPageFormat.width");
  var isolatedTransparency = dart.privateName(graphic_stream, "PdfGraphicStream.isolatedTransparency");
  var knockoutTransparency = dart.privateName(graphic_stream, "PdfGraphicStream.knockoutTransparency");
  var fonts = dart.privateName(graphic_stream, "PdfGraphicStream.fonts");
  var shading$ = dart.privateName(graphic_stream, "PdfGraphicStream.shading");
  var patterns = dart.privateName(graphic_stream, "PdfGraphicStream.patterns");
  var xObjects = dart.privateName(graphic_stream, "PdfGraphicStream.xObjects");
  graphic_stream.PdfGraphicStream = class PdfGraphicStream extends object_dict.PdfObjectDict {};
  graphic_stream.PdfGraphicStream[dart.mixinOn] = PdfObjectDict => class PdfGraphicStream extends PdfObjectDict {
    get isolatedTransparency() {
      return this[isolatedTransparency];
    }
    set isolatedTransparency(value) {
      this[isolatedTransparency] = value;
    }
    get knockoutTransparency() {
      return this[knockoutTransparency];
    }
    set knockoutTransparency(value) {
      this[knockoutTransparency] = value;
    }
    get fonts() {
      return this[fonts];
    }
    set fonts(value) {
      super.fonts = value;
    }
    get shading() {
      return this[shading$];
    }
    set shading(value) {
      super.shading = value;
    }
    get patterns() {
      return this[patterns];
    }
    set patterns(value) {
      super.patterns = value;
    }
    get xObjects() {
      return this[xObjects];
    }
    set xObjects(value) {
      super.xObjects = value;
    }
    addFont(font) {
      if (!this.fonts[$containsKey](font.name)) {
        this.fonts[$_set](font.name, font);
      }
    }
    addShader(shader) {
      if (!this.shading[$containsKey](shader.name)) {
        this.shading[$_set](shader.name, shader);
      }
    }
    addPattern(pattern) {
      if (!this.patterns[$containsKey](pattern.name)) {
        this.patterns[$_set](pattern.name, pattern);
      }
    }
    addXObject(object) {
      if (!this.xObjects[$containsKey](object.name)) {
        this.xObjects[$_set](object.name, object);
      }
    }
    getDefaultFont() {
      if (this.pdfDocument.fonts[$isEmpty]) {
        font.PdfFont.helvetica(this.pdfDocument);
      }
      return this.pdfDocument.fonts[$elementAt](0);
    }
    stateName(state) {
      return this.pdfDocument.graphicStates.stateName(state);
    }
    prepare() {
      super.prepare();
      let resources = T$.PdfDictOfPdfDataType().new();
      resources._set("/ProcSet", new (T$.PdfArrayOfPdfName()).new(C[117] || CT.C117));
      if (this.fonts[$isNotEmpty]) {
        resources._set("/Font", data_types.PdfDict.fromObjectMap(this.fonts));
      }
      if (this.shading[$isNotEmpty]) {
        resources._set("/Shading", data_types.PdfDict.fromObjectMap(this.shading));
      }
      if (this.patterns[$isNotEmpty]) {
        resources._set("/Pattern", data_types.PdfDict.fromObjectMap(this.patterns));
      }
      if (this.xObjects[$isNotEmpty]) {
        resources._set("/XObject", data_types.PdfDict.fromObjectMap(this.xObjects));
      }
      if (this.pdfDocument.hasGraphicStates) {
        this.params._set("/Group", T$.PdfDictOfPdfDataType().new(new (T$.IdentityMapOfString$PdfDataType()).from(["/Type", C[122] || CT.C122, "/S", C[123] || CT.C123, "/CS", C[124] || CT.C124, "/I", new data_types.PdfBool.new(this.isolatedTransparency), "/K", new data_types.PdfBool.new(this.knockoutTransparency)])));
        resources._set("/ExtGState", this.pdfDocument.graphicStates.ref());
      }
      if (this.params.containsKey("/Resources")) {
        let res = this.params._get("/Resources");
        if (T$.PdfDictOfPdfDataType().is(res)) {
          res.merge(resources);
          return;
        }
      }
      this.params._set("/Resources", resources);
    }
  };
  (graphic_stream.PdfGraphicStream[dart.mixinNew] = function() {
    this[isolatedTransparency] = false;
    this[knockoutTransparency] = false;
    this[fonts] = new (T$.IdentityMapOfString$PdfFont()).new();
    this[shading$] = new (T$.IdentityMapOfString$PdfShading()).new();
    this[patterns] = new (T$.IdentityMapOfString$PdfPattern()).new();
    this[xObjects] = new (T$.IdentityMapOfString$PdfXObject()).new();
  }).prototype = graphic_stream.PdfGraphicStream.prototype;
  dart.addTypeTests(graphic_stream.PdfGraphicStream);
  dart.addTypeCaches(graphic_stream.PdfGraphicStream);
  graphic_stream.PdfGraphicStream[dart.implements] = () => [object_dict.PdfObjectDict];
  dart.setMethodSignature(graphic_stream.PdfGraphicStream, () => ({
    __proto__: dart.getMethods(graphic_stream.PdfGraphicStream.__proto__),
    addFont: dart.fnType(dart.void, [font.PdfFont]),
    addShader: dart.fnType(dart.void, [shading.PdfShading]),
    addPattern: dart.fnType(dart.void, [pattern.PdfPattern]),
    addXObject: dart.fnType(dart.void, [xobject.PdfXObject]),
    getDefaultFont: dart.fnType(dart.nullable(font.PdfFont), []),
    stateName: dart.fnType(core.String, [graphic_state.PdfGraphicState])
  }));
  dart.setLibraryUri(graphic_stream.PdfGraphicStream, I[23]);
  dart.setFieldSignature(graphic_stream.PdfGraphicStream, () => ({
    __proto__: dart.getFields(graphic_stream.PdfGraphicStream.__proto__),
    isolatedTransparency: dart.fieldType(core.bool),
    knockoutTransparency: dart.fieldType(core.bool),
    fonts: dart.finalFieldType(core.Map$(core.String, font.PdfFont)),
    shading: dart.finalFieldType(core.Map$(core.String, shading.PdfShading)),
    patterns: dart.finalFieldType(core.Map$(core.String, pattern.PdfPattern)),
    xObjects: dart.finalFieldType(core.Map$(core.String, xobject.PdfXObject))
  }));
  const PdfObjectDict_PdfGraphicStream$36 = class PdfObjectDict_PdfGraphicStream extends object_dict.PdfObjectDict {};
  (PdfObjectDict_PdfGraphicStream$36.new = function(pdfDocument, opts) {
    graphic_stream.PdfGraphicStream[dart.mixinNew].call(this);
    PdfObjectDict_PdfGraphicStream$36.__proto__.new.call(this, pdfDocument, opts);
  }).prototype = PdfObjectDict_PdfGraphicStream$36.prototype;
  dart.applyMixin(PdfObjectDict_PdfGraphicStream$36, graphic_stream.PdfGraphicStream);
  page.PdfPage = class PdfPage extends PdfObjectDict_PdfGraphicStream$36 {
    get pageFormat() {
      return this[pageFormat$];
    }
    set pageFormat(value) {
      this[pageFormat$] = value;
    }
    get rotate() {
      return this[rotate$];
    }
    set rotate(value) {
      this[rotate$] = value;
    }
    get contents() {
      return this[contents];
    }
    set contents(value) {
      super.contents = value;
    }
    get annotations() {
      return this[annotations];
    }
    set annotations(value) {
      super.annotations = value;
    }
    static ['_#new#tearOff'](pdfDocument, opts) {
      let pageFormat = opts && 'pageFormat' in opts ? opts.pageFormat : C[116] || CT.C116;
      let rotate = opts && 'rotate' in opts ? opts.rotate : C[112] || CT.C112;
      let index = opts && 'index' in opts ? opts.index : null;
      let objser = opts && 'objser' in opts ? opts.objser : null;
      let objgen = opts && 'objgen' in opts ? opts.objgen : 0;
      return new page.PdfPage.new(pdfDocument, {pageFormat: pageFormat, rotate: rotate, index: index, objser: objser, objgen: objgen});
    }
    getGraphics() {
      let stream = new object_stream.PdfObjectStream.new(this.pdfDocument);
      let g = new graphics.PdfGraphics.new(this, stream.buf);
      this.contents[$add](stream);
      return g;
    }
    addAnnotation(ob) {
      this.annotations[$add](ob);
    }
    prepare() {
      super.prepare();
      this.params._set("/Parent", this.pdfDocument.pdfPageList.ref());
      if (this.rotate !== page.PdfPageRotation.none) {
        this.params._set("/Rotate", new data_types.PdfNum.new(this.rotate.index * 90));
      }
      this.params._set("/MediaBox", data_types.PdfArray.fromNum(T$.JSArrayOfdouble().of([0.0, 0.0, this.pageFormat.width, this.pageFormat.height])));
      let contentList = data_types.PdfArray.fromObjects(this.contents);
      if (this.params.containsKey("/Contents")) {
        let prevContent = dart.nullCheck(this.params._get("/Contents"));
        if (T$.PdfArrayOfPdfDataType().is(prevContent)) {
          contentList.values[$insertAll](0, prevContent.values[$whereType](data_types.PdfIndirect));
        } else if (data_types.PdfIndirect.is(prevContent)) {
          contentList.values[$insert](0, prevContent);
        }
      }
      contentList.uniq();
      if (contentList.values[$length] === 1) {
        this.params._set("/Contents", contentList.values[$first]);
      } else if (this.contents[$isNotEmpty]) {
        this.params._set("/Contents", contentList);
      }
      if (this.annotations[$isNotEmpty]) {
        if (this.params.containsKey("/Annots")) {
          let annotsList = this.params._get("/Annots");
          if (T$.PdfArrayOfPdfDataType().is(annotsList)) {
            annotsList.values[$addAll](data_types.PdfArray.fromObjects(this.annotations).values);
          }
        } else {
          this.params._set("/Annots", data_types.PdfArray.fromObjects(this.annotations));
        }
      }
    }
  };
  (page.PdfPage.new = function(pdfDocument, opts) {
    let pageFormat = opts && 'pageFormat' in opts ? opts.pageFormat : C[116] || CT.C116;
    let rotate = opts && 'rotate' in opts ? opts.rotate : C[112] || CT.C112;
    let index = opts && 'index' in opts ? opts.index : null;
    let objser = opts && 'objser' in opts ? opts.objser : null;
    let objgen = opts && 'objgen' in opts ? opts.objgen : 0;
    this[contents] = T$.JSArrayOfPdfObjectStream().of([]);
    this[annotations] = T$.JSArrayOfPdfAnnot().of([]);
    this[pageFormat$] = pageFormat;
    this[rotate$] = rotate;
    page.PdfPage.__proto__.new.call(this, pdfDocument, {type: "/Page", objser: objser, objgen: objgen});
    if (index != null) {
      pdfDocument.pdfPageList.pages[$insert](index, this);
    } else {
      pdfDocument.pdfPageList.pages[$add](this);
    }
  }).prototype = page.PdfPage.prototype;
  dart.addTypeTests(page.PdfPage);
  dart.addTypeCaches(page.PdfPage);
  dart.setMethodSignature(page.PdfPage, () => ({
    __proto__: dart.getMethods(page.PdfPage.__proto__),
    getGraphics: dart.fnType(graphics.PdfGraphics, []),
    addAnnotation: dart.fnType(dart.void, [annotation.PdfAnnot])
  }));
  dart.setLibraryUri(page.PdfPage, I[22]);
  dart.setFieldSignature(page.PdfPage, () => ({
    __proto__: dart.getFields(page.PdfPage.__proto__),
    pageFormat: dart.fieldType(page_format.PdfPageFormat),
    rotate: dart.fieldType(page.PdfPageRotation),
    contents: dart.finalFieldType(core.List$(object_stream.PdfObjectStream)),
    annotations: dart.finalFieldType(core.List$(annotation.PdfAnnot))
  }));
  var width$0 = dart.privateName(exif, "PdfJpegInfo.width");
  var height$ = dart.privateName(exif, "PdfJpegInfo.height");
  var tags$ = dart.privateName(exif, "PdfJpegInfo.tags");
  var _color$ = dart.privateName(exif, "_color");
  exif.PdfJpegInfo = class PdfJpegInfo extends core.Object {
    get width() {
      return this[width$0];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    get tags() {
      return this[tags$];
    }
    set tags(value) {
      super.tags = value;
    }
    static new(image) {
      let buffer = image[$buffer][$asByteData](image[$offsetInBytes], image[$lengthInBytes]);
      let width = null;
      let height = null;
      let color = null;
      let offset = 0;
      while (offset < buffer[$lengthInBytes]) {
        while (buffer[$getUint8](offset) === 255) {
          offset = offset + 1;
        }
        let mrkr = buffer[$getUint8](offset);
        offset = offset + 1;
        if (mrkr === 216) {
          continue;
        }
        if (mrkr === 217) {
          break;
        }
        if (208 <= mrkr && mrkr <= 215) {
          continue;
        }
        if (mrkr === 1) {
          continue;
        }
        let len = buffer[$getUint16](offset);
        offset = offset + 2;
        if (mrkr >= 192 && mrkr <= 194) {
          height = buffer[$getUint16](offset + 1);
          width = buffer[$getUint16](offset + 3);
          color = buffer[$getUint8](offset + 5);
          break;
        }
        offset = offset + (len - 2);
      }
      if (height == null) {
        dart.throw("Unable to find a Jpeg image in the file");
      }
      let tags = exif.PdfJpegInfo._findExifInJpeg(buffer);
      return new exif.PdfJpegInfo.__(width, height, color, tags);
    }
    static ['_#new#tearOff'](image) {
      return exif.PdfJpegInfo.new(image);
    }
    static ['_#_#tearOff'](width, height, _color, tags) {
      return new exif.PdfJpegInfo.__(width, height, _color, tags);
    }
    get isRGB() {
      return this[_color$] === 3;
    }
    get exifVersion() {
      return this.tags == null || dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.ExifVersion) == null ? null : convert.utf8.decode(T$.ListOfint().as(dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.ExifVersion)));
    }
    get flashpixVersion() {
      return this.tags == null || dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.FlashpixVersion) == null ? null : convert.utf8.decode(T$.ListOfint().as(dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.FlashpixVersion)));
    }
    get orientation() {
      if (this.tags == null || dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.Orientation) == null) {
        return image$0.PdfImageOrientation.topLeft;
      }
      try {
        let index = core.int.as(dart.dsend(dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.Orientation), '-', [1]));
        let orientations = C[125] || CT.C125;
        if (index >= 0 && index < orientations[$length]) {
          return orientations[$_get](index);
        }
        return image$0.PdfImageOrientation.topLeft;
      } catch (e) {
        let ex = dart.getThrown(e);
        if (core.RangeError.is(ex)) {
          return image$0.PdfImageOrientation.topLeft;
        } else
          throw e;
      }
    }
    get xResolution() {
      return T$.doubleN().as(this.tags == null || dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.XResolution) == null ? null : dart.dsend(dart.dsend(dart.dsend(dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.XResolution), '_get', [0]), 'toDouble', []), '/', [dart.dsend(dart.dsend(dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.XResolution), '_get', [1]), 'toDouble', [])]));
    }
    get yResolution() {
      return T$.doubleN().as(this.tags == null || dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.YResolution) == null ? null : dart.dsend(dart.dsend(dart.dsend(dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.YResolution), '_get', [0]), 'toDouble', []), '/', [dart.dsend(dart.dsend(dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.YResolution), '_get', [1]), 'toDouble', [])]));
    }
    get pixelXDimension() {
      return T$.intN().as(this.tags == null || dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.PixelXDimension) == null ? this.width : dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.PixelXDimension));
    }
    get pixelYDimension() {
      return T$.intN().as(this.tags == null || dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.PixelYDimension) == null ? this.height : dart.nullCheck(this.tags)[$_get](exif.PdfExifTag.PixelYDimension));
    }
    toString() {
      return "width: " + dart.str(this.width) + " height: " + dart.str(this.height) + "\nexifVersion: " + dart.str(this.exifVersion) + " flashpixVersion: " + dart.str(this.flashpixVersion) + "\nxResolution: " + dart.str(this.xResolution) + " yResolution: " + dart.str(this.yResolution) + "\npixelXDimension: " + dart.str(this.pixelXDimension) + " pixelYDimension: " + dart.str(this.pixelYDimension) + "\norientation: " + dart.str(this.orientation);
    }
    static _findExifInJpeg(buffer) {
      if (buffer[$getUint8](0) !== 255 || buffer[$getUint8](1) !== 216) {
        return new (T$.LinkedMapOfPdfExifTag$dynamic()).new();
      }
      let offset = 2;
      let length = buffer[$lengthInBytes];
      let marker = null;
      while (offset < length) {
        let lastValue = buffer[$getUint8](offset);
        if (lastValue !== 255) {
          return new (T$.LinkedMapOfPdfExifTag$dynamic()).new();
        }
        marker = buffer[$getUint8](offset + 1);
        if (marker === 225) {
          return exif.PdfJpegInfo._readEXIFData(buffer, offset + 4);
        } else {
          offset = offset + (2 + buffer[$getUint16](offset + 2));
        }
      }
      return new (T$.LinkedMapOfPdfExifTag$dynamic()).new();
    }
    static _readTags(file, tiffStart, dirStart, bigEnd) {
      let entries = file[$getUint16](dirStart, bigEnd);
      let tags = new (T$.LinkedMapOfPdfExifTag$dynamic()).new();
      let entryOffset = null;
      for (let i = 0; i < entries; i = i + 1) {
        entryOffset = dirStart + i * 12 + 2;
        let tagId = file[$getUint16](entryOffset, bigEnd);
        let tag = exif.PdfJpegInfo._exifTags[$_get](tagId);
        if (tag != null) {
          tags[$_set](tag, exif.PdfJpegInfo._readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd));
        }
      }
      return tags;
    }
    static _readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd) {
      let type = file[$getUint16](entryOffset + 2, bigEnd);
      let numValues = file[$getUint32](entryOffset + 4, bigEnd);
      let valueOffset = file[$getUint32](entryOffset + 8, bigEnd) + tiffStart;
      switch (type) {
        case 1:
        case 7:
          {
            if (numValues === 1) {
              return file[$getUint8](entryOffset + 8);
            }
            let offset = numValues > 4 ? valueOffset : entryOffset + 8;
            let result = _native_typed_data.NativeUint8List.new(numValues);
            for (let i = 0; i < result[$length]; i = i + 1) {
              result[$_set](i, file[$getUint8](offset + i));
            }
            return result;
          }
        case 2:
          {
            let offset = numValues > 4 ? valueOffset : entryOffset + 8;
            return exif.PdfJpegInfo._getStringFromDB(file, offset, numValues - 1);
          }
        case 3:
          {
            if (numValues === 1) {
              return file[$getUint16](entryOffset + 8, bigEnd);
            }
            let offset = numValues > 2 ? valueOffset : entryOffset + 8;
            let result = _native_typed_data.NativeUint16List.new(numValues);
            for (let i = 0; i < result[$length]; i = i + 1) {
              result[$_set](i, file[$getUint16](offset + i * 2, bigEnd));
            }
            return result;
          }
        case 4:
          {
            if (numValues === 1) {
              return file[$getUint32](entryOffset + 8, bigEnd);
            }
            let offset = valueOffset;
            let result = _native_typed_data.NativeUint32List.new(numValues);
            for (let i = 0; i < result[$length]; i = i + 1) {
              result[$_set](i, file[$getUint32](offset + i * 4, bigEnd));
            }
            return result;
          }
        case 5:
          {
            if (numValues === 1) {
              let numerator = file[$getUint32](valueOffset, bigEnd);
              let denominator = file[$getUint32](valueOffset + 4, bigEnd);
              return T$.JSArrayOfint().of([numerator, denominator]);
            }
            let offset = valueOffset;
            let result = T$.JSArrayOfListOfint().of([]);
            for (let i = 0; i < numValues; i = i + 1) {
              let numerator = file[$getUint32](offset + i * 8, bigEnd);
              let denominator = file[$getUint32](offset + i * 8 + 4, bigEnd);
              result[$add](T$.JSArrayOfint().of([numerator, denominator]));
            }
            return result;
          }
        case 9:
          {
            if (numValues === 1) {
              return file[$getInt32](entryOffset + 8, bigEnd);
            }
            let offset = valueOffset;
            let result = _native_typed_data.NativeInt32List.new(numValues);
            for (let i = 0; i < result[$length]; i = i + 1) {
              result[$_set](i, file[$getInt32](offset + i * 4, bigEnd));
            }
            return result;
          }
        case 10:
          {
            if (numValues === 1) {
              let numerator = file[$getInt32](valueOffset, bigEnd);
              let denominator = file[$getInt32](valueOffset + 4, bigEnd);
              return T$.JSArrayOfint().of([numerator, denominator]);
            }
            let offset = valueOffset;
            let result = T$.JSArrayOfListOfint().of([]);
            for (let i = 0; i < numValues; i = i + 1) {
              let numerator = file[$getInt32](offset + i * 8, bigEnd);
              let denominator = file[$getInt32](offset + i * 8 + 4, bigEnd);
              result[$add](T$.JSArrayOfint().of([numerator, denominator]));
            }
            return result;
          }
        case 11:
          {
            if (numValues === 1) {
              return file[$getFloat32](entryOffset + 8, bigEnd);
            }
            let offset = valueOffset;
            let result = _native_typed_data.NativeFloat32List.new(numValues);
            for (let i = 0; i < result[$length]; i = i + 1) {
              result[$_set](i, file[$getFloat32](offset + i * 4, bigEnd));
            }
            return result;
          }
        case 12:
          {
            if (numValues === 1) {
              return file[$getFloat64](entryOffset + 8, bigEnd);
            }
            let offset = valueOffset;
            let result = _native_typed_data.NativeFloat64List.new(numValues);
            for (let i = 0; i < result[$length]; i = i + 1) {
              result[$_set](i, file[$getFloat64](offset + i * 8, bigEnd));
            }
            return result;
          }
      }
    }
    static _getStringFromDB(buffer, start, length) {
      return convert.utf8.decode(T$.ListOfint().generate(length, dart.fn(i => buffer[$getUint8](start + i), T$.intToint())), {allowMalformed: true});
    }
    static _readEXIFData(buffer, start) {
      let startingString = exif.PdfJpegInfo._getStringFromDB(buffer, start, 4);
      if (startingString !== "Exif") {
        return null;
      }
      let bigEnd = null;
      let tiffOffset = start + 6;
      if (buffer[$getUint16](tiffOffset) === 18761) {
        bigEnd = typed_data.Endian.little;
      } else if (buffer[$getUint16](tiffOffset) === 19789) {
        bigEnd = typed_data.Endian.big;
      } else {
        return null;
      }
      if (buffer[$getUint16](tiffOffset + 2, bigEnd) !== 42) {
        return null;
      }
      let firstIFDOffset = buffer[$getUint32](tiffOffset + 4, bigEnd);
      if (firstIFDOffset < 8) {
        return null;
      }
      let tags = exif.PdfJpegInfo._readTags(buffer, tiffOffset, tiffOffset + firstIFDOffset, bigEnd);
      if (tags[$containsKey](exif.PdfExifTag.ExifIFDPointer)) {
        let exifData = exif.PdfJpegInfo._readTags(buffer, tiffOffset, dart.asInt(tiffOffset + core.num.as(tags[$_get](exif.PdfExifTag.ExifIFDPointer))), bigEnd);
        tags[$addAll](exifData);
      }
      return tags;
    }
  };
  (exif.PdfJpegInfo.__ = function(width, height, _color, tags) {
    this[width$0] = width;
    this[height$] = height;
    this[_color$] = _color;
    this[tags$] = tags;
    ;
  }).prototype = exif.PdfJpegInfo.prototype;
  dart.addTypeTests(exif.PdfJpegInfo);
  dart.addTypeCaches(exif.PdfJpegInfo);
  dart.setStaticMethodSignature(exif.PdfJpegInfo, () => ['new', '_findExifInJpeg', '_readTags', '_readTagValue', '_getStringFromDB', '_readEXIFData']);
  dart.setGetterSignature(exif.PdfJpegInfo, () => ({
    __proto__: dart.getGetters(exif.PdfJpegInfo.__proto__),
    isRGB: core.bool,
    exifVersion: dart.nullable(core.String),
    flashpixVersion: dart.nullable(core.String),
    orientation: image$0.PdfImageOrientation,
    xResolution: dart.nullable(core.double),
    yResolution: dart.nullable(core.double),
    pixelXDimension: dart.nullable(core.int),
    pixelYDimension: dart.nullable(core.int)
  }));
  dart.setLibraryUri(exif.PdfJpegInfo, I[24]);
  dart.setFieldSignature(exif.PdfJpegInfo, () => ({
    __proto__: dart.getFields(exif.PdfJpegInfo.__proto__),
    width: dart.finalFieldType(dart.nullable(core.int)),
    height: dart.finalFieldType(core.int),
    [_color$]: dart.finalFieldType(dart.nullable(core.int)),
    tags: dart.finalFieldType(dart.nullable(core.Map$(exif.PdfExifTag, dart.dynamic)))
  }));
  dart.setStaticFieldSignature(exif.PdfJpegInfo, () => ['_exifTags']);
  dart.defineExtensionMethods(exif.PdfJpegInfo, ['toString']);
  dart.defineLazy(exif.PdfJpegInfo, {
    /*exif.PdfJpegInfo._exifTags*/get _exifTags() {
      return C[134] || CT.C134;
    }
  }, false);
  exif.PdfExifTag = class PdfExifTag extends core._Enum {
    toString() {
      return "PdfExifTag." + this[_name];
    }
  };
  (exif.PdfExifTag.new = function(index, name) {
    exif.PdfExifTag.__proto__.new.call(this, index, name);
    ;
  }).prototype = exif.PdfExifTag.prototype;
  dart.addTypeTests(exif.PdfExifTag);
  dart.addTypeCaches(exif.PdfExifTag);
  dart.setLibraryUri(exif.PdfExifTag, I[24]);
  dart.setStaticFieldSignature(exif.PdfExifTag, () => ['values', 'ExifVersion', 'FlashpixVersion', 'ColorSpace', 'PixelXDimension', 'PixelYDimension', 'ComponentsConfiguration', 'CompressedBitsPerPixel', 'MakerNote', 'UserComment', 'RelatedSoundFile', 'DateTimeOriginal', 'DateTimeDigitized', 'SubsecTime', 'SubsecTimeOriginal', 'SubsecTimeDigitized', 'ExposureTime', 'FNumber', 'ExposureProgram', 'SpectralSensitivity', 'ISOSpeedRatings', 'OECF', 'ShutterSpeedValue', 'ApertureValue', 'BrightnessValue', 'ExposureBias', 'MaxApertureValue', 'SubjectDistance', 'MeteringMode', 'LightSource', 'Flash', 'SubjectArea', 'FocalLength', 'FlashEnergy', 'SpatialFrequencyResponse', 'FocalPlaneXResolution', 'FocalPlaneYResolution', 'FocalPlaneResolutionUnit', 'SubjectLocation', 'ExposureIndex', 'SensingMethod', 'FileSource', 'SceneType', 'CFAPattern', 'CustomRendered', 'ExposureMode', 'WhiteBalance', 'DigitalZoomRation', 'FocalLengthIn35mmFilm', 'SceneCaptureType', 'GainControl', 'Contrast', 'Saturation', 'Sharpness', 'DeviceSettingDescription', 'SubjectDistanceRange', 'InteroperabilityIFDPointer', 'ImageUniqueID', 'ImageWidth', 'ImageHeight', 'ExifIFDPointer', 'GPSInfoIFDPointer', 'BitsPerSample', 'Compression', 'PhotometricInterpretation', 'Orientation', 'SamplesPerPixel', 'PlanarConfiguration', 'YCbCrSubSampling', 'YCbCrPositioning', 'XResolution', 'YResolution', 'ResolutionUnit', 'StripOffsets', 'RowsPerStrip', 'StripByteCounts', 'JPEGInterchangeFormat', 'JPEGInterchangeFormatLength', 'TransferFunction', 'WhitePoint', 'PrimaryChromaticities', 'YCbCrCoefficients', 'ReferenceBlackWhite', 'DateTime', 'ImageDescription', 'Make', 'Model', 'Software', 'Artist', 'Copyright']);
  dart.defineExtensionMethods(exif.PdfExifTag, ['toString']);
  dart.defineLazy(exif.PdfExifTag, {
    /*exif.PdfExifTag.values*/get values() {
      return C[224] || CT.C224;
    },
    /*exif.PdfExifTag.ExifVersion*/get ExifVersion() {
      return C[135] || CT.C135;
    },
    /*exif.PdfExifTag.FlashpixVersion*/get FlashpixVersion() {
      return C[136] || CT.C136;
    },
    /*exif.PdfExifTag.ColorSpace*/get ColorSpace() {
      return C[137] || CT.C137;
    },
    /*exif.PdfExifTag.PixelXDimension*/get PixelXDimension() {
      return C[138] || CT.C138;
    },
    /*exif.PdfExifTag.PixelYDimension*/get PixelYDimension() {
      return C[139] || CT.C139;
    },
    /*exif.PdfExifTag.ComponentsConfiguration*/get ComponentsConfiguration() {
      return C[140] || CT.C140;
    },
    /*exif.PdfExifTag.CompressedBitsPerPixel*/get CompressedBitsPerPixel() {
      return C[141] || CT.C141;
    },
    /*exif.PdfExifTag.MakerNote*/get MakerNote() {
      return C[142] || CT.C142;
    },
    /*exif.PdfExifTag.UserComment*/get UserComment() {
      return C[143] || CT.C143;
    },
    /*exif.PdfExifTag.RelatedSoundFile*/get RelatedSoundFile() {
      return C[144] || CT.C144;
    },
    /*exif.PdfExifTag.DateTimeOriginal*/get DateTimeOriginal() {
      return C[145] || CT.C145;
    },
    /*exif.PdfExifTag.DateTimeDigitized*/get DateTimeDigitized() {
      return C[146] || CT.C146;
    },
    /*exif.PdfExifTag.SubsecTime*/get SubsecTime() {
      return C[147] || CT.C147;
    },
    /*exif.PdfExifTag.SubsecTimeOriginal*/get SubsecTimeOriginal() {
      return C[148] || CT.C148;
    },
    /*exif.PdfExifTag.SubsecTimeDigitized*/get SubsecTimeDigitized() {
      return C[149] || CT.C149;
    },
    /*exif.PdfExifTag.ExposureTime*/get ExposureTime() {
      return C[150] || CT.C150;
    },
    /*exif.PdfExifTag.FNumber*/get FNumber() {
      return C[151] || CT.C151;
    },
    /*exif.PdfExifTag.ExposureProgram*/get ExposureProgram() {
      return C[152] || CT.C152;
    },
    /*exif.PdfExifTag.SpectralSensitivity*/get SpectralSensitivity() {
      return C[153] || CT.C153;
    },
    /*exif.PdfExifTag.ISOSpeedRatings*/get ISOSpeedRatings() {
      return C[154] || CT.C154;
    },
    /*exif.PdfExifTag.OECF*/get OECF() {
      return C[155] || CT.C155;
    },
    /*exif.PdfExifTag.ShutterSpeedValue*/get ShutterSpeedValue() {
      return C[156] || CT.C156;
    },
    /*exif.PdfExifTag.ApertureValue*/get ApertureValue() {
      return C[157] || CT.C157;
    },
    /*exif.PdfExifTag.BrightnessValue*/get BrightnessValue() {
      return C[158] || CT.C158;
    },
    /*exif.PdfExifTag.ExposureBias*/get ExposureBias() {
      return C[159] || CT.C159;
    },
    /*exif.PdfExifTag.MaxApertureValue*/get MaxApertureValue() {
      return C[160] || CT.C160;
    },
    /*exif.PdfExifTag.SubjectDistance*/get SubjectDistance() {
      return C[161] || CT.C161;
    },
    /*exif.PdfExifTag.MeteringMode*/get MeteringMode() {
      return C[162] || CT.C162;
    },
    /*exif.PdfExifTag.LightSource*/get LightSource() {
      return C[163] || CT.C163;
    },
    /*exif.PdfExifTag.Flash*/get Flash() {
      return C[164] || CT.C164;
    },
    /*exif.PdfExifTag.SubjectArea*/get SubjectArea() {
      return C[165] || CT.C165;
    },
    /*exif.PdfExifTag.FocalLength*/get FocalLength() {
      return C[166] || CT.C166;
    },
    /*exif.PdfExifTag.FlashEnergy*/get FlashEnergy() {
      return C[167] || CT.C167;
    },
    /*exif.PdfExifTag.SpatialFrequencyResponse*/get SpatialFrequencyResponse() {
      return C[168] || CT.C168;
    },
    /*exif.PdfExifTag.FocalPlaneXResolution*/get FocalPlaneXResolution() {
      return C[169] || CT.C169;
    },
    /*exif.PdfExifTag.FocalPlaneYResolution*/get FocalPlaneYResolution() {
      return C[170] || CT.C170;
    },
    /*exif.PdfExifTag.FocalPlaneResolutionUnit*/get FocalPlaneResolutionUnit() {
      return C[171] || CT.C171;
    },
    /*exif.PdfExifTag.SubjectLocation*/get SubjectLocation() {
      return C[172] || CT.C172;
    },
    /*exif.PdfExifTag.ExposureIndex*/get ExposureIndex() {
      return C[173] || CT.C173;
    },
    /*exif.PdfExifTag.SensingMethod*/get SensingMethod() {
      return C[174] || CT.C174;
    },
    /*exif.PdfExifTag.FileSource*/get FileSource() {
      return C[175] || CT.C175;
    },
    /*exif.PdfExifTag.SceneType*/get SceneType() {
      return C[176] || CT.C176;
    },
    /*exif.PdfExifTag.CFAPattern*/get CFAPattern() {
      return C[177] || CT.C177;
    },
    /*exif.PdfExifTag.CustomRendered*/get CustomRendered() {
      return C[178] || CT.C178;
    },
    /*exif.PdfExifTag.ExposureMode*/get ExposureMode() {
      return C[179] || CT.C179;
    },
    /*exif.PdfExifTag.WhiteBalance*/get WhiteBalance() {
      return C[180] || CT.C180;
    },
    /*exif.PdfExifTag.DigitalZoomRation*/get DigitalZoomRation() {
      return C[181] || CT.C181;
    },
    /*exif.PdfExifTag.FocalLengthIn35mmFilm*/get FocalLengthIn35mmFilm() {
      return C[182] || CT.C182;
    },
    /*exif.PdfExifTag.SceneCaptureType*/get SceneCaptureType() {
      return C[183] || CT.C183;
    },
    /*exif.PdfExifTag.GainControl*/get GainControl() {
      return C[184] || CT.C184;
    },
    /*exif.PdfExifTag.Contrast*/get Contrast() {
      return C[185] || CT.C185;
    },
    /*exif.PdfExifTag.Saturation*/get Saturation() {
      return C[186] || CT.C186;
    },
    /*exif.PdfExifTag.Sharpness*/get Sharpness() {
      return C[187] || CT.C187;
    },
    /*exif.PdfExifTag.DeviceSettingDescription*/get DeviceSettingDescription() {
      return C[188] || CT.C188;
    },
    /*exif.PdfExifTag.SubjectDistanceRange*/get SubjectDistanceRange() {
      return C[189] || CT.C189;
    },
    /*exif.PdfExifTag.InteroperabilityIFDPointer*/get InteroperabilityIFDPointer() {
      return C[190] || CT.C190;
    },
    /*exif.PdfExifTag.ImageUniqueID*/get ImageUniqueID() {
      return C[191] || CT.C191;
    },
    /*exif.PdfExifTag.ImageWidth*/get ImageWidth() {
      return C[192] || CT.C192;
    },
    /*exif.PdfExifTag.ImageHeight*/get ImageHeight() {
      return C[193] || CT.C193;
    },
    /*exif.PdfExifTag.ExifIFDPointer*/get ExifIFDPointer() {
      return C[194] || CT.C194;
    },
    /*exif.PdfExifTag.GPSInfoIFDPointer*/get GPSInfoIFDPointer() {
      return C[195] || CT.C195;
    },
    /*exif.PdfExifTag.BitsPerSample*/get BitsPerSample() {
      return C[196] || CT.C196;
    },
    /*exif.PdfExifTag.Compression*/get Compression() {
      return C[197] || CT.C197;
    },
    /*exif.PdfExifTag.PhotometricInterpretation*/get PhotometricInterpretation() {
      return C[198] || CT.C198;
    },
    /*exif.PdfExifTag.Orientation*/get Orientation() {
      return C[199] || CT.C199;
    },
    /*exif.PdfExifTag.SamplesPerPixel*/get SamplesPerPixel() {
      return C[200] || CT.C200;
    },
    /*exif.PdfExifTag.PlanarConfiguration*/get PlanarConfiguration() {
      return C[201] || CT.C201;
    },
    /*exif.PdfExifTag.YCbCrSubSampling*/get YCbCrSubSampling() {
      return C[202] || CT.C202;
    },
    /*exif.PdfExifTag.YCbCrPositioning*/get YCbCrPositioning() {
      return C[203] || CT.C203;
    },
    /*exif.PdfExifTag.XResolution*/get XResolution() {
      return C[204] || CT.C204;
    },
    /*exif.PdfExifTag.YResolution*/get YResolution() {
      return C[205] || CT.C205;
    },
    /*exif.PdfExifTag.ResolutionUnit*/get ResolutionUnit() {
      return C[206] || CT.C206;
    },
    /*exif.PdfExifTag.StripOffsets*/get StripOffsets() {
      return C[207] || CT.C207;
    },
    /*exif.PdfExifTag.RowsPerStrip*/get RowsPerStrip() {
      return C[208] || CT.C208;
    },
    /*exif.PdfExifTag.StripByteCounts*/get StripByteCounts() {
      return C[209] || CT.C209;
    },
    /*exif.PdfExifTag.JPEGInterchangeFormat*/get JPEGInterchangeFormat() {
      return C[210] || CT.C210;
    },
    /*exif.PdfExifTag.JPEGInterchangeFormatLength*/get JPEGInterchangeFormatLength() {
      return C[211] || CT.C211;
    },
    /*exif.PdfExifTag.TransferFunction*/get TransferFunction() {
      return C[212] || CT.C212;
    },
    /*exif.PdfExifTag.WhitePoint*/get WhitePoint() {
      return C[213] || CT.C213;
    },
    /*exif.PdfExifTag.PrimaryChromaticities*/get PrimaryChromaticities() {
      return C[214] || CT.C214;
    },
    /*exif.PdfExifTag.YCbCrCoefficients*/get YCbCrCoefficients() {
      return C[215] || CT.C215;
    },
    /*exif.PdfExifTag.ReferenceBlackWhite*/get ReferenceBlackWhite() {
      return C[216] || CT.C216;
    },
    /*exif.PdfExifTag.DateTime*/get DateTime() {
      return C[217] || CT.C217;
    },
    /*exif.PdfExifTag.ImageDescription*/get ImageDescription() {
      return C[218] || CT.C218;
    },
    /*exif.PdfExifTag.Make*/get Make() {
      return C[219] || CT.C219;
    },
    /*exif.PdfExifTag.Model*/get Model() {
      return C[220] || CT.C220;
    },
    /*exif.PdfExifTag.Software*/get Software() {
      return C[221] || CT.C221;
    },
    /*exif.PdfExifTag.Artist*/get Artist() {
      return C[222] || CT.C222;
    },
    /*exif.PdfExifTag.Copyright*/get Copyright() {
      return C[223] || CT.C223;
    }
  }, false);
  image$0.PdfImageOrientation = class PdfImageOrientation extends core._Enum {
    toString() {
      return "PdfImageOrientation." + this[_name];
    }
  };
  (image$0.PdfImageOrientation.new = function(index, name) {
    image$0.PdfImageOrientation.__proto__.new.call(this, index, name);
    ;
  }).prototype = image$0.PdfImageOrientation.prototype;
  dart.addTypeTests(image$0.PdfImageOrientation);
  dart.addTypeCaches(image$0.PdfImageOrientation);
  dart.setLibraryUri(image$0.PdfImageOrientation, I[25]);
  dart.setStaticFieldSignature(image$0.PdfImageOrientation, () => ['values', 'topLeft', 'topRight', 'bottomRight', 'bottomLeft', 'leftTop', 'rightTop', 'rightBottom', 'leftBottom']);
  dart.defineExtensionMethods(image$0.PdfImageOrientation, ['toString']);
  dart.defineLazy(image$0.PdfImageOrientation, {
    /*image$0.PdfImageOrientation.values*/get values() {
      return C[125] || CT.C125;
    },
    /*image$0.PdfImageOrientation.topLeft*/get topLeft() {
      return C[126] || CT.C126;
    },
    /*image$0.PdfImageOrientation.topRight*/get topRight() {
      return C[127] || CT.C127;
    },
    /*image$0.PdfImageOrientation.bottomRight*/get bottomRight() {
      return C[128] || CT.C128;
    },
    /*image$0.PdfImageOrientation.bottomLeft*/get bottomLeft() {
      return C[129] || CT.C129;
    },
    /*image$0.PdfImageOrientation.leftTop*/get leftTop() {
      return C[130] || CT.C130;
    },
    /*image$0.PdfImageOrientation.rightTop*/get rightTop() {
      return C[131] || CT.C131;
    },
    /*image$0.PdfImageOrientation.rightBottom*/get rightBottom() {
      return C[132] || CT.C132;
    },
    /*image$0.PdfImageOrientation.leftBottom*/get leftBottom() {
      return C[133] || CT.C133;
    }
  }, false);
  var orientation$ = dart.privateName(image$0, "PdfImage.orientation");
  var _width$ = dart.privateName(image$0, "_width");
  var _height$ = dart.privateName(image$0, "_height");
  var PdfNum_value = dart.privateName(data_types, "PdfNum.value");
  var buf = dart.privateName(object_stream, "PdfObjectStream.buf");
  var isBinary$0 = dart.privateName(object_stream, "PdfObjectStream.isBinary");
  object_stream.PdfObjectStream = class PdfObjectStream extends object_dict.PdfObjectDict {
    get buf() {
      return this[buf];
    }
    set buf(value) {
      super.buf = value;
    }
    get isBinary() {
      return this[isBinary$0];
    }
    set isBinary(value) {
      super.isBinary = value;
    }
    static ['_#new#tearOff'](pdfDocument, opts) {
      let type = opts && 'type' in opts ? opts.type : null;
      let isBinary = opts && 'isBinary' in opts ? opts.isBinary : false;
      return new object_stream.PdfObjectStream.new(pdfDocument, {type: type, isBinary: isBinary});
    }
    writeContent(os) {
      new data_types.PdfDictStream.values({object: this, isBinary: this.isBinary, values: this.params.values, data: this.buf.output()}).output(os, this.pdfDocument.verbose ? 0 : null);
    }
  };
  (object_stream.PdfObjectStream.new = function(pdfDocument, opts) {
    let type = opts && 'type' in opts ? opts.type : null;
    let isBinary = opts && 'isBinary' in opts ? opts.isBinary : false;
    this[buf] = new stream.PdfStream.new();
    this[isBinary$0] = isBinary;
    object_stream.PdfObjectStream.__proto__.new.call(this, pdfDocument, {type: type});
    ;
  }).prototype = object_stream.PdfObjectStream.prototype;
  dart.addTypeTests(object_stream.PdfObjectStream);
  dart.addTypeCaches(object_stream.PdfObjectStream);
  dart.setLibraryUri(object_stream.PdfObjectStream, I[27]);
  dart.setFieldSignature(object_stream.PdfObjectStream, () => ({
    __proto__: dart.getFields(object_stream.PdfObjectStream.__proto__),
    buf: dart.finalFieldType(stream.PdfStream),
    isBinary: dart.finalFieldType(core.bool)
  }));
  xobject.PdfXObject = class PdfXObject extends object_stream.PdfObjectStream {
    static ['_#new#tearOff'](pdfDocument, subtype, opts) {
      let isBinary = opts && 'isBinary' in opts ? opts.isBinary : false;
      return new xobject.PdfXObject.new(pdfDocument, subtype, {isBinary: isBinary});
    }
    get name() {
      return "X" + dart.str(this.objser);
    }
  };
  (xobject.PdfXObject.new = function(pdfDocument, subtype, opts) {
    let isBinary = opts && 'isBinary' in opts ? opts.isBinary : false;
    xobject.PdfXObject.__proto__.new.call(this, pdfDocument, {type: "/XObject", isBinary: isBinary});
    if (subtype != null) {
      this.params._set("/Subtype", new data_types.PdfName.new(subtype));
    }
  }).prototype = xobject.PdfXObject.prototype;
  dart.addTypeTests(xobject.PdfXObject);
  dart.addTypeCaches(xobject.PdfXObject);
  dart.setGetterSignature(xobject.PdfXObject, () => ({
    __proto__: dart.getGetters(xobject.PdfXObject.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(xobject.PdfXObject, I[28]);
  image$0.PdfImage = class PdfImage extends xobject.PdfXObject {
    get orientation() {
      return this[orientation$];
    }
    set orientation(value) {
      super.orientation = value;
    }
    static new(pdfDocument, opts) {
      let image = opts && 'image' in opts ? opts.image : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let alpha = opts && 'alpha' in opts ? opts.alpha : true;
      let orientation = opts && 'orientation' in opts ? opts.orientation : C[126] || CT.C126;
      let im = new image$0.PdfImage.__(pdfDocument, width, height, orientation);
      if (!dart.fn(() => {
        im.startStopwatch();
        im.debugFill("RAW RGB" + (alpha ? "A" : "") + " Image " + dart.str(width) + "x" + dart.str(height));
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[26], 72, 12, "() {\n      im.startStopwatch();\n      im.debugFill('RAW RGB${alpha ? 'A' : ''} Image ${width}x$height');\n      return true;\n    }()");
      im.params._set("/BitsPerComponent", C[225] || CT.C225);
      im.params._set("/Name", new data_types.PdfName.new(im.name));
      im.params._set("/ColorSpace", C[124] || CT.C124);
      if (alpha) {
        let _sMask = image$0.PdfImage._alpha(pdfDocument, image, width, height, orientation);
        im.params._set("/SMask", new data_types.PdfIndirect.new(_sMask.objser, 0));
      }
      let w = width;
      let h = height;
      let s = w * h;
      let out = _native_typed_data.NativeUint8List.new(s * 3);
      for (let i = 0; i < s; i = i + 1) {
        out[$_set](i * 3, image[$_get](i * 4));
        out[$_set](i * 3 + 1, image[$_get](i * 4 + 1));
        out[$_set](i * 3 + 2, image[$_get](i * 4 + 2));
      }
      im.buf.putBytes(out);
      if (!dart.fn(() => {
        im.stopStopwatch();
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[26], 104, 12, "() {\n      im.stopStopwatch();\n      return true;\n    }()");
      return im;
    }
    static ['_#new#tearOff'](pdfDocument, opts) {
      let image = opts && 'image' in opts ? opts.image : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let alpha = opts && 'alpha' in opts ? opts.alpha : true;
      let orientation = opts && 'orientation' in opts ? opts.orientation : C[126] || CT.C126;
      return image$0.PdfImage.new(pdfDocument, {image: image, width: width, height: height, alpha: alpha, orientation: orientation});
    }
    static jpeg(pdfDocument, opts) {
      let t32;
      let image = opts && 'image' in opts ? opts.image : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let info = exif.PdfJpegInfo.new(image);
      let im = new image$0.PdfImage.__(pdfDocument, dart.nullCheck(info.width), info.height, (t32 = orientation, t32 == null ? info.orientation : t32));
      if (!dart.fn(() => {
        im.startStopwatch();
        im.debugFill("Jpeg Image " + dart.str(info.width) + "x" + dart.str(info.height));
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[26], 125, 12, "() {\n      im.startStopwatch();\n      im.debugFill('Jpeg Image ${info.width}x${info.height}');\n      return true;\n    }()");
      im.params._set("/BitsPerComponent", C[225] || CT.C225);
      im.params._set("/Name", new data_types.PdfName.new(im.name));
      im.params._set("/Intent", C[226] || CT.C226);
      im.params._set("/Filter", C[227] || CT.C227);
      if (info.isRGB) {
        im.params._set("/ColorSpace", C[124] || CT.C124);
      } else {
        im.params._set("/ColorSpace", C[228] || CT.C228);
      }
      im.buf.putBytes(image);
      if (!dart.fn(() => {
        im.stopStopwatch();
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[26], 142, 12, "() {\n      im.stopStopwatch();\n      return true;\n    }()");
      return im;
    }
    static ['_#jpeg#tearOff'](pdfDocument, opts) {
      let image = opts && 'image' in opts ? opts.image : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      return image$0.PdfImage.jpeg(pdfDocument, {image: image, orientation: orientation});
    }
    static fromImage(pdfDocument, opts) {
      let image = opts && 'image' in opts ? opts.image : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : C[126] || CT.C126;
      return image$0.PdfImage.new(pdfDocument, {image: image.getBytes({format: image$.Format.rgba}), width: image.width, height: image.height, alpha: image.channels === image$.Channels.rgba, orientation: orientation});
    }
    static ['_#fromImage#tearOff'](pdfDocument, opts) {
      let image = opts && 'image' in opts ? opts.image : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : C[126] || CT.C126;
      return image$0.PdfImage.fromImage(pdfDocument, {image: image, orientation: orientation});
    }
    static file(pdfDocument, opts) {
      let bytes = opts && 'bytes' in opts ? opts.bytes : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : C[126] || CT.C126;
      if (new jpeg_decoder.JpegDecoder.new().isValidFile(bytes)) {
        return image$0.PdfImage.jpeg(pdfDocument, {image: bytes});
      }
      let image = formats.decodeImage(bytes);
      if (image == null) {
        dart.throw("Unable to decode image");
      }
      return image$0.PdfImage.fromImage(pdfDocument, {image: image, orientation: orientation});
    }
    static ['_#file#tearOff'](pdfDocument, opts) {
      let bytes = opts && 'bytes' in opts ? opts.bytes : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : C[126] || CT.C126;
      return image$0.PdfImage.file(pdfDocument, {bytes: bytes, orientation: orientation});
    }
    static _alpha(pdfDocument, image, width, height, orientation) {
      let im = new image$0.PdfImage.__(pdfDocument, width, height, orientation);
      if (!dart.fn(() => {
        im.startStopwatch();
        im.debugFill("Image alpha channel " + dart.str(width) + "x" + dart.str(height));
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[26], 200, 12, "() {\n      im.startStopwatch();\n      im.debugFill('Image alpha channel ${width}x$height');\n      return true;\n    }()");
      im.params._set("/BitsPerComponent", C[225] || CT.C225);
      im.params._set("/Name", new data_types.PdfName.new(im.name));
      im.params._set("/ColorSpace", C[228] || CT.C228);
      let w = width;
      let h = height;
      let s = w * h;
      let out = _native_typed_data.NativeUint8List.new(s);
      for (let i = 0; i < s; i = i + 1) {
        out[$_set](i, image[$_get](i * 4 + 3));
      }
      im.buf.putBytes(out);
      if (!dart.fn(() => {
        im.stopStopwatch();
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[26], 220, 12, "() {\n      im.stopStopwatch();\n      return true;\n    }()");
      return im;
    }
    static ['_#_alpha#tearOff'](pdfDocument, image, width, height, orientation) {
      return image$0.PdfImage._alpha(pdfDocument, image, width, height, orientation);
    }
    static ['_#_#tearOff'](pdfDocument, _width, _height, orientation) {
      return new image$0.PdfImage.__(pdfDocument, _width, _height, orientation);
    }
    get width() {
      return this.orientation.index >= 4 ? this[_height$] : this[_width$];
    }
    get height() {
      return this.orientation.index < 4 ? this[_height$] : this[_width$];
    }
    get name() {
      return "/I" + dart.str(this.objser);
    }
  };
  (image$0.PdfImage.__ = function(pdfDocument, _width, _height, orientation) {
    this[_width$] = _width;
    this[_height$] = _height;
    this[orientation$] = orientation;
    image$0.PdfImage.__proto__.new.call(this, pdfDocument, "/Image", {isBinary: true});
    this.params._set("/Width", new data_types.PdfNum.new(this[_width$]));
    this.params._set("/Height", new data_types.PdfNum.new(this[_height$]));
    if (!dart.fn(() => {
      this.debugFill("Orientation: " + dart.str(this.orientation));
      return true;
    }, T$.VoidTobool())()) dart.assertFailed(null, I[26], 235, 12, "() {\n      debugFill('Orientation: $orientation');\n      return true;\n    }()");
  }).prototype = image$0.PdfImage.prototype;
  dart.addTypeTests(image$0.PdfImage);
  dart.addTypeCaches(image$0.PdfImage);
  dart.setStaticMethodSignature(image$0.PdfImage, () => ['new', 'jpeg', 'fromImage', 'file', '_alpha']);
  dart.setGetterSignature(image$0.PdfImage, () => ({
    __proto__: dart.getGetters(image$0.PdfImage.__proto__),
    width: core.int,
    height: core.int
  }));
  dart.setLibraryUri(image$0.PdfImage, I[25]);
  dart.setFieldSignature(image$0.PdfImage, () => ({
    __proto__: dart.getFields(image$0.PdfImage.__proto__),
    [_width$]: dart.finalFieldType(core.int),
    [_height$]: dart.finalFieldType(core.int),
    orientation: dart.finalFieldType(image$0.PdfImageOrientation)
  }));
  shading.PdfShadingType = class PdfShadingType extends core._Enum {
    toString() {
      return "PdfShadingType." + this[_name];
    }
  };
  (shading.PdfShadingType.new = function(index, name) {
    shading.PdfShadingType.__proto__.new.call(this, index, name);
    ;
  }).prototype = shading.PdfShadingType.prototype;
  dart.addTypeTests(shading.PdfShadingType);
  dart.addTypeCaches(shading.PdfShadingType);
  dart.setLibraryUri(shading.PdfShadingType, I[29]);
  dart.setStaticFieldSignature(shading.PdfShadingType, () => ['values', 'axial', 'radial']);
  dart.defineExtensionMethods(shading.PdfShadingType, ['toString']);
  dart.defineLazy(shading.PdfShadingType, {
    /*shading.PdfShadingType.values*/get values() {
      return C[229] || CT.C229;
    },
    /*shading.PdfShadingType.axial*/get axial() {
      return C[230] || CT.C230;
    },
    /*shading.PdfShadingType.radial*/get radial() {
      return C[231] || CT.C231;
    }
  }, false);
  var shadingType$ = dart.privateName(shading, "PdfShading.shadingType");
  var $function$ = dart.privateName(shading, "PdfShading.function");
  var start$ = dart.privateName(shading, "PdfShading.start");
  var end$ = dart.privateName(shading, "PdfShading.end");
  var boundingBox$ = dart.privateName(shading, "PdfShading.boundingBox");
  var extendStart$ = dart.privateName(shading, "PdfShading.extendStart");
  var extendEnd$ = dart.privateName(shading, "PdfShading.extendEnd");
  var radius0$ = dart.privateName(shading, "PdfShading.radius0");
  var radius1$ = dart.privateName(shading, "PdfShading.radius1");
  var PdfBool_value = dart.privateName(data_types, "PdfBool.value");
  shading.PdfShading = class PdfShading extends object_dict.PdfObjectDict {
    get shadingType() {
      return this[shadingType$];
    }
    set shadingType(value) {
      super.shadingType = value;
    }
    get function() {
      return this[$function$];
    }
    set function(value) {
      super.function = value;
    }
    get start() {
      return this[start$];
    }
    set start(value) {
      super.start = value;
    }
    get end() {
      return this[end$];
    }
    set end(value) {
      super.end = value;
    }
    get boundingBox() {
      return this[boundingBox$];
    }
    set boundingBox(value) {
      super.boundingBox = value;
    }
    get extendStart() {
      return this[extendStart$];
    }
    set extendStart(value) {
      super.extendStart = value;
    }
    get extendEnd() {
      return this[extendEnd$];
    }
    set extendEnd(value) {
      super.extendEnd = value;
    }
    get radius0() {
      return this[radius0$];
    }
    set radius0(value) {
      super.radius0 = value;
    }
    get radius1() {
      return this[radius1$];
    }
    set radius1(value) {
      super.radius1 = value;
    }
    static ['_#new#tearOff'](pdfDocument, opts) {
      let shadingType = opts && 'shadingType' in opts ? opts.shadingType : null;
      let $function = opts && 'function' in opts ? opts.function : null;
      let start = opts && 'start' in opts ? opts.start : null;
      let end = opts && 'end' in opts ? opts.end : null;
      let radius0 = opts && 'radius0' in opts ? opts.radius0 : null;
      let radius1 = opts && 'radius1' in opts ? opts.radius1 : null;
      let boundingBox = opts && 'boundingBox' in opts ? opts.boundingBox : null;
      let extendStart = opts && 'extendStart' in opts ? opts.extendStart : false;
      let extendEnd = opts && 'extendEnd' in opts ? opts.extendEnd : false;
      return new shading.PdfShading.new(pdfDocument, {shadingType: shadingType, function: $function, start: start, end: end, radius0: radius0, radius1: radius1, boundingBox: boundingBox, extendStart: extendStart, extendEnd: extendEnd});
    }
    get name() {
      return "/S" + dart.str(this.objser);
    }
    prepare() {
      super.prepare();
      this.params._set("/ShadingType", new data_types.PdfNum.new(this.shadingType.index + 2));
      if (this.boundingBox != null) {
        this.params._set("/BBox", data_types.PdfArray.fromNum(T$.JSArrayOfnum().of([dart.nullCheck(this.boundingBox).left, dart.nullCheck(this.boundingBox).bottom, dart.nullCheck(this.boundingBox).right, dart.nullCheck(this.boundingBox).top])));
      }
      this.params._set("/AntiAlias", C[232] || CT.C232);
      this.params._set("/ColorSpace", C[124] || CT.C124);
      if (this.shadingType === shading.PdfShadingType.axial) {
        this.params._set("/Coords", data_types.PdfArray.fromNum(T$.JSArrayOfnum().of([this.start.x, this.start.y, this.end.x, this.end.y])));
      } else if (this.shadingType === shading.PdfShadingType.radial) {
        if (!(this.radius0 != null)) dart.assertFailed(null, I[30], 80, 14, "radius0 != null");
        if (!(this.radius1 != null)) dart.assertFailed(null, I[30], 81, 14, "radius1 != null");
        this.params._set("/Coords", data_types.PdfArray.fromNum(T$.JSArrayOfnum().of([this.start.x, this.start.y, dart.nullCheck(this.radius0), this.end.x, this.end.y, dart.nullCheck(this.radius1)])));
      }
      if (this.extendStart || this.extendEnd) {
        this.params._set("/Extend", new (T$.PdfArrayOfPdfBool()).new(T$.JSArrayOfPdfBool().of([new data_types.PdfBool.new(this.extendStart), new data_types.PdfBool.new(this.extendEnd)])));
      }
      this.params._set("/Function", this.function.ref());
    }
  };
  (shading.PdfShading.new = function(pdfDocument, opts) {
    let shadingType = opts && 'shadingType' in opts ? opts.shadingType : null;
    let $function = opts && 'function' in opts ? opts.function : null;
    let start = opts && 'start' in opts ? opts.start : null;
    let end = opts && 'end' in opts ? opts.end : null;
    let radius0 = opts && 'radius0' in opts ? opts.radius0 : null;
    let radius1 = opts && 'radius1' in opts ? opts.radius1 : null;
    let boundingBox = opts && 'boundingBox' in opts ? opts.boundingBox : null;
    let extendStart = opts && 'extendStart' in opts ? opts.extendStart : false;
    let extendEnd = opts && 'extendEnd' in opts ? opts.extendEnd : false;
    this[shadingType$] = shadingType;
    this[$function$] = $function;
    this[start$] = start;
    this[end$] = end;
    this[radius0$] = radius0;
    this[radius1$] = radius1;
    this[boundingBox$] = boundingBox;
    this[extendStart$] = extendStart;
    this[extendEnd$] = extendEnd;
    shading.PdfShading.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = shading.PdfShading.prototype;
  dart.addTypeTests(shading.PdfShading);
  dart.addTypeCaches(shading.PdfShading);
  dart.setGetterSignature(shading.PdfShading, () => ({
    __proto__: dart.getGetters(shading.PdfShading.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(shading.PdfShading, I[29]);
  dart.setFieldSignature(shading.PdfShading, () => ({
    __proto__: dart.getFields(shading.PdfShading.__proto__),
    shadingType: dart.finalFieldType(shading.PdfShadingType),
    function: dart.finalFieldType($function.PdfBaseFunction),
    start: dart.finalFieldType(point.PdfPoint),
    end: dart.finalFieldType(point.PdfPoint),
    boundingBox: dart.finalFieldType(dart.nullable(rect.PdfRect)),
    extendStart: dart.finalFieldType(core.bool),
    extendEnd: dart.finalFieldType(core.bool),
    radius0: dart.finalFieldType(dart.nullable(core.double)),
    radius1: dart.finalFieldType(dart.nullable(core.double))
  }));
  var patternType$ = dart.privateName(pattern, "PdfPattern.patternType");
  var matrix$ = dart.privateName(pattern, "PdfPattern.matrix");
  pattern.PdfPattern = class PdfPattern extends object_dict.PdfObjectDict {
    get patternType() {
      return this[patternType$];
    }
    set patternType(value) {
      super.patternType = value;
    }
    get matrix() {
      return this[matrix$];
    }
    set matrix(value) {
      super.matrix = value;
    }
    get name() {
      return "/P" + dart.str(this.objser);
    }
    prepare() {
      super.prepare();
      this.params._set("/PatternType", new data_types.PdfNum.new(this.patternType));
      if (this.matrix != null) {
        let s = dart.nullCheck(this.matrix).storage;
        this.params._set("/Matrix", data_types.PdfArray.fromNum(T$.JSArrayOfdouble().of([s[$_get](0), s[$_get](1), s[$_get](4), s[$_get](5), s[$_get](12), s[$_get](13)])));
      }
    }
  };
  (pattern.PdfPattern.new = function(pdfDocument, patternType, matrix) {
    this[patternType$] = patternType;
    this[matrix$] = matrix;
    pattern.PdfPattern.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = pattern.PdfPattern.prototype;
  dart.addTypeTests(pattern.PdfPattern);
  dart.addTypeCaches(pattern.PdfPattern);
  dart.setGetterSignature(pattern.PdfPattern, () => ({
    __proto__: dart.getGetters(pattern.PdfPattern.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(pattern.PdfPattern, I[31]);
  dart.setFieldSignature(pattern.PdfPattern, () => ({
    __proto__: dart.getFields(pattern.PdfPattern.__proto__),
    patternType: dart.finalFieldType(core.int),
    matrix: dart.finalFieldType(dart.nullable(vector_math_64.Matrix4))
  }));
  var shading$0 = dart.privateName(pattern, "PdfShadingPattern.shading");
  var graphicState$ = dart.privateName(pattern, "PdfShadingPattern.graphicState");
  pattern.PdfShadingPattern = class PdfShadingPattern extends pattern.PdfPattern {
    get shading() {
      return this[shading$0];
    }
    set shading(value) {
      super.shading = value;
    }
    get graphicState() {
      return this[graphicState$];
    }
    set graphicState(value) {
      super.graphicState = value;
    }
    static ['_#new#tearOff'](pdfDocument, opts) {
      let shading = opts && 'shading' in opts ? opts.shading : null;
      let matrix = opts && 'matrix' in opts ? opts.matrix : null;
      let graphicState = opts && 'graphicState' in opts ? opts.graphicState : null;
      return new pattern.PdfShadingPattern.new(pdfDocument, {shading: shading, matrix: matrix, graphicState: graphicState});
    }
    prepare() {
      super.prepare();
      this.params._set("/Shading", this.shading.ref());
      if (this.graphicState != null) {
        this.params._set("/ExtGState", dart.nullCheck(this.graphicState).output());
      }
    }
  };
  (pattern.PdfShadingPattern.new = function(pdfDocument, opts) {
    let shading = opts && 'shading' in opts ? opts.shading : null;
    let matrix = opts && 'matrix' in opts ? opts.matrix : null;
    let graphicState = opts && 'graphicState' in opts ? opts.graphicState : null;
    this[shading$0] = shading;
    this[graphicState$] = graphicState;
    pattern.PdfShadingPattern.__proto__.new.call(this, pdfDocument, 2, matrix);
    ;
  }).prototype = pattern.PdfShadingPattern.prototype;
  dart.addTypeTests(pattern.PdfShadingPattern);
  dart.addTypeCaches(pattern.PdfShadingPattern);
  dart.setLibraryUri(pattern.PdfShadingPattern, I[31]);
  dart.setFieldSignature(pattern.PdfShadingPattern, () => ({
    __proto__: dart.getFields(pattern.PdfShadingPattern.__proto__),
    shading: dart.finalFieldType(shading.PdfShading),
    graphicState: dart.finalFieldType(dart.nullable(graphic_state.PdfGraphicState))
  }));
  const PdfXObject_PdfGraphicStream$36 = class PdfXObject_PdfGraphicStream extends xobject.PdfXObject {};
  (PdfXObject_PdfGraphicStream$36.new = function(pdfDocument, subtype, opts) {
    graphic_stream.PdfGraphicStream[dart.mixinNew].call(this);
    PdfXObject_PdfGraphicStream$36.__proto__.new.call(this, pdfDocument, subtype, opts);
  }).prototype = PdfXObject_PdfGraphicStream$36.prototype;
  dart.applyMixin(PdfXObject_PdfGraphicStream$36, graphic_stream.PdfGraphicStream);
  graphic_stream.PdfGraphicXObject = class PdfGraphicXObject extends PdfXObject_PdfGraphicStream$36 {
    static ['_#new#tearOff'](pdfDocument, subtype = null) {
      return new graphic_stream.PdfGraphicXObject.new(pdfDocument, subtype);
    }
  };
  (graphic_stream.PdfGraphicXObject.new = function(pdfDocument, subtype = null) {
    graphic_stream.PdfGraphicXObject.__proto__.new.call(this, pdfDocument, subtype);
    ;
  }).prototype = graphic_stream.PdfGraphicXObject.prototype;
  dart.addTypeTests(graphic_stream.PdfGraphicXObject);
  dart.addTypeCaches(graphic_stream.PdfGraphicXObject);
  dart.setLibraryUri(graphic_stream.PdfGraphicXObject, I[23]);
  var cmap = dart.privateName(unicode_cmap, "PdfUnicodeCmap.cmap");
  var protect$ = dart.privateName(unicode_cmap, "PdfUnicodeCmap.protect");
  unicode_cmap.PdfUnicodeCmap = class PdfUnicodeCmap extends object_stream.PdfObjectStream {
    get cmap() {
      return this[cmap];
    }
    set cmap(value) {
      super.cmap = value;
    }
    get protect() {
      return this[protect$];
    }
    set protect(value) {
      super.protect = value;
    }
    static ['_#new#tearOff'](pdfDocument, protect) {
      return new unicode_cmap.PdfUnicodeCmap.new(pdfDocument, protect);
    }
    prepare() {
      if (this.protect) {
        this.cmap[$fillRange](1, this.cmap[$length], 32);
      }
      this.buf.putString("/CIDInit/ProcSet\nfindresource begin\n" + "12 dict begin\n" + "begincmap\n" + "/CIDSystemInfo<<\n" + "/Registry (Adobe)\n" + "/Ordering (UCS)\n" + "/Supplement 0\n" + ">> def\n" + "/CMapName/Adobe-Identity-UCS def\n" + "/CMapType 2 def\n" + "1 begincodespacerange\n" + "<0000> <FFFF>\n" + "endcodespacerange\n" + dart.str(this.cmap[$length]) + " beginbfchar\n");
      for (let key = 0; key < this.cmap[$length]; key = key + 1) {
        let value = this.cmap[$_get](key);
        this.buf.putString("<" + key[$toRadixString](16)[$toUpperCase]()[$padLeft](4, "0") + "> <" + value[$toRadixString](16)[$toUpperCase]()[$padLeft](4, "0") + ">\n");
      }
      this.buf.putString("endbfchar\n" + "endcmap\n" + "CMapName currentdict /CMap defineresource pop\n" + "end\n" + "end");
      super.prepare();
    }
  };
  (unicode_cmap.PdfUnicodeCmap.new = function(pdfDocument, protect) {
    this[cmap] = T$.JSArrayOfint().of([0]);
    this[protect$] = protect;
    unicode_cmap.PdfUnicodeCmap.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = unicode_cmap.PdfUnicodeCmap.prototype;
  dart.addTypeTests(unicode_cmap.PdfUnicodeCmap);
  dart.addTypeCaches(unicode_cmap.PdfUnicodeCmap);
  dart.setLibraryUri(unicode_cmap.PdfUnicodeCmap, I[32]);
  dart.setFieldSignature(unicode_cmap.PdfUnicodeCmap, () => ({
    __proto__: dart.getFields(unicode_cmap.PdfUnicodeCmap.__proto__),
    cmap: dart.finalFieldType(core.List$(core.int)),
    protect: dart.finalFieldType(core.bool)
  }));
  var file$ = dart.privateName(font_descriptor, "PdfFontDescriptor.file");
  var ttfFont$ = dart.privateName(font_descriptor, "PdfFontDescriptor.ttfFont");
  font_descriptor.PdfFontDescriptor = class PdfFontDescriptor extends object_dict.PdfObjectDict {
    get file() {
      return this[file$];
    }
    set file(value) {
      super.file = value;
    }
    get ttfFont() {
      return this[ttfFont$];
    }
    set ttfFont(value) {
      super.ttfFont = value;
    }
    static ['_#new#tearOff'](ttfFont, file) {
      return new font_descriptor.PdfFontDescriptor.new(ttfFont, file);
    }
    prepare() {
      super.prepare();
      this.params._set("/FontName", new data_types.PdfName.new("/" + this.ttfFont.fontName));
      this.params._set("/FontFile2", this.file.ref());
      this.params._set("/Flags", new data_types.PdfNum.new(this.ttfFont.font.unicode ? 4 : 32));
      this.params._set("/FontBBox", data_types.PdfArray.fromNum(T$.JSArrayOfint().of([(this.ttfFont.font.xMin / this.ttfFont.font.unitsPerEm * 1000)[$toInt](), (this.ttfFont.font.yMin / this.ttfFont.font.unitsPerEm * 1000)[$toInt](), (this.ttfFont.font.xMax / this.ttfFont.font.unitsPerEm * 1000)[$toInt](), (this.ttfFont.font.yMax / this.ttfFont.font.unitsPerEm * 1000)[$toInt]()])));
      this.params._set("/Ascent", new data_types.PdfNum.new((this.ttfFont.ascent * 1000)[$toInt]()));
      this.params._set("/Descent", new data_types.PdfNum.new((this.ttfFont.descent * 1000)[$toInt]()));
      this.params._set("/ItalicAngle", C[233] || CT.C233);
      this.params._set("/CapHeight", C[234] || CT.C234);
      this.params._set("/StemV", C[235] || CT.C235);
    }
  };
  (font_descriptor.PdfFontDescriptor.new = function(ttfFont, file) {
    this[ttfFont$] = ttfFont;
    this[file$] = file;
    font_descriptor.PdfFontDescriptor.__proto__.new.call(this, ttfFont.pdfDocument, {type: "/FontDescriptor"});
    ;
  }).prototype = font_descriptor.PdfFontDescriptor.prototype;
  dart.addTypeTests(font_descriptor.PdfFontDescriptor);
  dart.addTypeCaches(font_descriptor.PdfFontDescriptor);
  dart.setLibraryUri(font_descriptor.PdfFontDescriptor, I[33]);
  dart.setFieldSignature(font_descriptor.PdfFontDescriptor, () => ({
    __proto__: dart.getFields(font_descriptor.PdfFontDescriptor.__proto__),
    file: dart.finalFieldType(object_stream.PdfObjectStream),
    ttfFont: dart.finalFieldType(ttffont.PdfTtfFont)
  }));
  var values$0 = dart.privateName(data_types, "PdfArray.values");
  const _is_PdfArray_default = Symbol('_is_PdfArray_default');
  data_types.PdfArray$ = dart.generic(T => {
    var __t$JSArrayOfT = () => (__t$JSArrayOfT = dart.constFn(_interceptors.JSArray$(T)))();
    var __t$LinkedMapOfT$bool = () => (__t$LinkedMapOfT$bool = dart.constFn(_js_helper.LinkedMap$(T, core.bool)))();
    class PdfArray extends data_types.PdfDataType {
      get values() {
        return this[values$0];
      }
      set values(value) {
        super.values = value;
      }
      static ['_#new#tearOff'](T, values = null) {
        return new (data_types.PdfArray$(T)).new(values);
      }
      static fromObjects(objects) {
        return new (T$.PdfArrayOfPdfIndirect()).new(objects[$map](data_types.PdfIndirect, dart.fn(e => e.ref(), T$.PdfObjectOfPdfDataTypeToPdfIndirect()))[$toList]());
      }
      static fromNum(list) {
        return new (T$.PdfArrayOfPdfNum()).new(list[$map](data_types.PdfNum, dart.fn(e => new data_types.PdfNum.new(e), T$.numToPdfNum()))[$toList]());
      }
      add(v) {
        T.as(v);
        this.values[$add](v);
      }
      output(s, indent = null) {
        if (indent != null) {
          s.putBytes(T$.ListOfint().filled(indent, 32));
          indent = dart.notNull(indent) + 2;
        }
        s.putString("[");
        if (this.values[$isNotEmpty]) {
          for (let n = 0; n < this.values[$length]; n = n + 1) {
            let val = this.values[$_get](n);
            if (indent != null) {
              s.putByte(10);
              if (!T$.PdfDictOfPdfDataType().is(val) && !T$.PdfArrayOfPdfDataType().is(val)) {
                s.putBytes(T$.ListOfint().filled(indent, 32));
              }
            } else {
              if (n > 0 && !(data_types.PdfName.is(val) || data_types.PdfString.is(val) || T$.PdfArrayOfPdfDataType().is(val) || T$.PdfDictOfPdfDataType().is(val))) {
                s.putByte(32);
              }
            }
            val.output(s, indent);
          }
          if (indent != null) {
            s.putByte(10);
          }
        }
        if (indent != null) {
          indent = dart.notNull(indent) - 2;
          s.putBytes(T$.ListOfint().filled(indent, 32));
        }
        s.putString("]");
      }
      uniq() {
        if (this.values[$length] <= 1) {
          return;
        }
        let uniques = new (__t$LinkedMapOfT$bool()).new();
        for (let s of this.values) {
          uniques[$_set](s, true);
        }
        this.values[$clear]();
        this.values[$addAll](uniques[$keys]);
      }
      _equals(other) {
        if (other == null) return false;
        if (T$.PdfArrayOfPdfDataType().is(other)) {
          return this.values[$_equals](other.values);
        }
        return false;
      }
      get hashCode() {
        return this.values[$hashCode];
      }
    }
    (PdfArray.new = function(values = null) {
      this[values$0] = __t$JSArrayOfT().of([]);
      PdfArray.__proto__.new.call(this);
      if (values != null) {
        this.values[$addAll](values);
      }
    }).prototype = PdfArray.prototype;
    dart.addTypeTests(PdfArray);
    PdfArray.prototype[_is_PdfArray_default] = true;
    dart.addTypeCaches(PdfArray);
    dart.setMethodSignature(PdfArray, () => ({
      __proto__: dart.getMethods(PdfArray.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      output: dart.fnType(dart.void, [stream.PdfStream], [dart.nullable(core.int)]),
      uniq: dart.fnType(dart.void, [])
    }));
    dart.setStaticMethodSignature(PdfArray, () => ['fromObjects', 'fromNum']);
    dart.setLibraryUri(PdfArray, I[5]);
    dart.setFieldSignature(PdfArray, () => ({
      __proto__: dart.getFields(PdfArray.__proto__),
      values: dart.finalFieldType(core.List$(T))
    }));
    dart.defineExtensionMethods(PdfArray, ['_equals']);
    dart.defineExtensionAccessors(PdfArray, ['hashCode']);
    return PdfArray;
  });
  data_types.PdfArray = data_types.PdfArray$();
  dart.addTypeTests(data_types.PdfArray, _is_PdfArray_default);
  array$.PdfArrayObject = class PdfArrayObject extends object.PdfObject$(data_types.PdfArray$(data_types.PdfDataType)) {
    static ['_#new#tearOff'](pdfDocument, array) {
      return new array$.PdfArrayObject.new(pdfDocument, array);
    }
    get array() {
      return this.params;
    }
  };
  (array$.PdfArrayObject.new = function(pdfDocument, array) {
    array$.PdfArrayObject.__proto__.new.call(this, pdfDocument, {params: array});
    ;
  }).prototype = array$.PdfArrayObject.prototype;
  dart.addTypeTests(array$.PdfArrayObject);
  dart.addTypeCaches(array$.PdfArrayObject);
  dart.setGetterSignature(array$.PdfArrayObject, () => ({
    __proto__: dart.getGetters(array$.PdfArrayObject.__proto__),
    array: data_types.PdfArray$(data_types.PdfDataType)
  }));
  dart.setLibraryUri(array$.PdfArrayObject, I[34]);
  var font$0 = dart.privateName(ttffont, "PdfTtfFont.font");
  var __PdfTtfFont_unicodeCMap = dart.privateName(ttffont, "_#PdfTtfFont#unicodeCMap");
  var __PdfTtfFont_descriptor = dart.privateName(ttffont, "_#PdfTtfFont#descriptor");
  var __PdfTtfFont_file = dart.privateName(ttffont, "_#PdfTtfFont#file");
  var __PdfTtfFont_widthsObject = dart.privateName(ttffont, "_#PdfTtfFont#widthsObject");
  var _buildTrueType = dart.privateName(ttffont, "_buildTrueType");
  var _buildType0 = dart.privateName(ttffont, "_buildType0");
  var subtype$0 = dart.privateName(font, "PdfFont.subtype");
  font.PdfFont = class PdfFont extends object_dict.PdfObjectDict {
    get subtype() {
      return this[subtype$0];
    }
    set subtype(value) {
      super.subtype = value;
    }
    static ['_#courier#tearOff'](pdfDocument) {
      return font.PdfFont.courier(pdfDocument);
    }
    static courier(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Courier", 0.91, -0.22, C[241] || CT.C241);
    }
    static courierBold(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Courier-Bold", 0.91, -0.22, C[241] || CT.C241);
    }
    static ['_#courierBold#tearOff'](pdfDocument) {
      return font.PdfFont.courierBold(pdfDocument);
    }
    static ['_#courierBoldOblique#tearOff'](pdfDocument) {
      return font.PdfFont.courierBoldOblique(pdfDocument);
    }
    static courierBoldOblique(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Courier-BoldOblique", 0.91, -0.22, C[241] || CT.C241);
    }
    static ['_#courierOblique#tearOff'](pdfDocument) {
      return font.PdfFont.courierOblique(pdfDocument);
    }
    static courierOblique(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Courier-Oblique", 0.91, -0.22, C[241] || CT.C241);
    }
    static ['_#helvetica#tearOff'](pdfDocument) {
      return font.PdfFont.helvetica(pdfDocument);
    }
    static helvetica(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Helvetica", 0.931, -0.225, type1_fonts.helveticaWidths);
    }
    static ['_#helveticaBold#tearOff'](pdfDocument) {
      return font.PdfFont.helveticaBold(pdfDocument);
    }
    static helveticaBold(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Helvetica-Bold", 0.962, -0.228, type1_fonts.helveticaBoldWidths);
    }
    static helveticaBoldOblique(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Helvetica-BoldOblique", 0.962, -0.228, type1_fonts.helveticaBoldObliqueWidths);
    }
    static ['_#helveticaBoldOblique#tearOff'](pdfDocument) {
      return font.PdfFont.helveticaBoldOblique(pdfDocument);
    }
    static ['_#helveticaOblique#tearOff'](pdfDocument) {
      return font.PdfFont.helveticaOblique(pdfDocument);
    }
    static helveticaOblique(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Helvetica-Oblique", 0.931, -0.225, type1_fonts.helveticaObliqueWidths);
    }
    static ['_#times#tearOff'](pdfDocument) {
      return font.PdfFont.times(pdfDocument);
    }
    static times(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Times-Roman", 0.898, -0.218, type1_fonts.timesWidths);
    }
    static ['_#timesBold#tearOff'](pdfDocument) {
      return font.PdfFont.timesBold(pdfDocument);
    }
    static timesBold(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Times-Bold", 0.935, -0.218, type1_fonts.timesBoldWidths);
    }
    static timesBoldItalic(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Times-BoldItalic", 0.921, -0.218, type1_fonts.timesBoldItalicWidths);
    }
    static ['_#timesBoldItalic#tearOff'](pdfDocument) {
      return font.PdfFont.timesBoldItalic(pdfDocument);
    }
    static timesItalic(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Times-Italic", 0.883, -0.217, type1_fonts.timesItalicWidths);
    }
    static ['_#timesItalic#tearOff'](pdfDocument) {
      return font.PdfFont.timesItalic(pdfDocument);
    }
    static symbol(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "Symbol", 1.01, -0.293, type1_fonts.symbolWidths);
    }
    static ['_#symbol#tearOff'](pdfDocument) {
      return font.PdfFont.symbol(pdfDocument);
    }
    static ['_#zapfDingbats#tearOff'](pdfDocument) {
      return font.PdfFont.zapfDingbats(pdfDocument);
    }
    static zapfDingbats(pdfDocument) {
      return new type1_font.PdfType1Font.create(pdfDocument, "ZapfDingbats", 0.82, -0.143, type1_fonts.zapfDingbatsWidths);
    }
    get name() {
      return "/F" + dart.str(this.objser);
    }
    prepare() {
      super.prepare();
      this.params._set("/Subtype", new data_types.PdfName.new(this.subtype));
      this.params._set("/Name", new data_types.PdfName.new(this.name));
      this.params._set("/Encoding", C[242] || CT.C242);
    }
    stringMetrics(s, opts) {
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : 0;
      if (s[$isEmpty]) {
        return font_metrics.PdfFontMetrics.zero;
      }
      try {
        let chars = convert.latin1.encode(s);
        let metrics = chars[$map](font_metrics.PdfFontMetrics, dart.bind(this, 'glyphMetrics'));
        return font_metrics.PdfFontMetrics.append(metrics, {letterSpacing: letterSpacing});
      } catch (e) {
        let _ = dart.getThrown(e);
        if (core.Object.is(_)) {
          if (!dart.fn(() => {
            core.print(font.PdfFont._cannotDecodeMessage);
            return true;
          }, T$.VoidTobool())()) dart.assertFailed(null, I[35], 178, 14, "() {\n        print(_cannotDecodeMessage);\n        return true;\n      }()");
          dart.rethrow(e);
        } else
          throw e;
      }
    }
    stringSize(s) {
      return this.stringMetrics(s).size;
    }
    toString() {
      return "Font(" + this.fontName + ")";
    }
    putText(stream, text) {
      try {
        new data_types.PdfString.new(convert.latin1.encode(text), data_types.PdfStringFormat.literal).output(stream);
      } catch (e) {
        let _ = dart.getThrown(e);
        if (core.Object.is(_)) {
          if (!dart.fn(() => {
            core.print(font.PdfFont._cannotDecodeMessage);
            return true;
          }, T$.VoidTobool())()) dart.assertFailed(null, I[35], 199, 14, "() {\n        print(_cannotDecodeMessage);\n        return true;\n      }()");
          dart.rethrow(e);
        } else
          throw e;
      }
    }
  };
  (font.PdfFont.create = function(pdfDocument, opts) {
    let subtype = opts && 'subtype' in opts ? opts.subtype : null;
    this[subtype$0] = subtype;
    font.PdfFont.__proto__.new.call(this, pdfDocument, {type: "/Font"});
    pdfDocument.fonts.add(this);
  }).prototype = font.PdfFont.prototype;
  dart.addTypeTests(font.PdfFont);
  dart.addTypeCaches(font.PdfFont);
  dart.setMethodSignature(font.PdfFont, () => ({
    __proto__: dart.getMethods(font.PdfFont.__proto__),
    stringMetrics: dart.fnType(font_metrics.PdfFontMetrics, [core.String], {letterSpacing: core.double}, {}),
    stringSize: dart.fnType(point.PdfPoint, [core.String]),
    putText: dart.fnType(dart.void, [stream.PdfStream, core.String])
  }));
  dart.setStaticMethodSignature(font.PdfFont, () => ['courier', 'courierBold', 'courierBoldOblique', 'courierOblique', 'helvetica', 'helveticaBold', 'helveticaBoldOblique', 'helveticaOblique', 'times', 'timesBold', 'timesBoldItalic', 'timesItalic', 'symbol', 'zapfDingbats']);
  dart.setGetterSignature(font.PdfFont, () => ({
    __proto__: dart.getGetters(font.PdfFont.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(font.PdfFont, I[36]);
  dart.setFieldSignature(font.PdfFont, () => ({
    __proto__: dart.getFields(font.PdfFont.__proto__),
    subtype: dart.finalFieldType(core.String)
  }));
  dart.setStaticFieldSignature(font.PdfFont, () => ['_cannotDecodeMessage', 'defaultGlyphWidth']);
  dart.defineExtensionMethods(font.PdfFont, ['toString']);
  dart.defineLazy(font.PdfFont, {
    /*font.PdfFont._cannotDecodeMessage*/get _cannotDecodeMessage() {
      return "---------------------------------------------\nCannot decode the string to Latin1.\nThis font does not support Unicode characters.\nIf you want to use strings other than Latin strings, use a TrueType (TTF) font instead.\nSee https://github.com/DavBfr/dart_pdf/wiki/Fonts-Management\n---------------------------------------------";
    },
    /*font.PdfFont.defaultGlyphWidth*/get defaultGlyphWidth() {
      return 0.6;
    }
  }, false);
  ttffont.PdfTtfFont = class PdfTtfFont extends font.PdfFont {
    get font() {
      return this[font$0];
    }
    set font(value) {
      super.font = value;
    }
    static ['_#new#tearOff'](pdfDocument, bytes, opts) {
      let protect = opts && 'protect' in opts ? opts.protect : false;
      return new ttffont.PdfTtfFont.new(pdfDocument, bytes, {protect: protect});
    }
    get subtype() {
      return this.font.unicode ? "/Type0" : super.subtype;
    }
    get unicodeCMap() {
      let t34;
      t34 = this[__PdfTtfFont_unicodeCMap];
      return t34 == null ? dart.throw(new _internal.LateError.fieldNI("unicodeCMap")) : t34;
    }
    set unicodeCMap(unicodeCMap$35param) {
      this[__PdfTtfFont_unicodeCMap] = unicodeCMap$35param;
    }
    get descriptor() {
      let t34;
      t34 = this[__PdfTtfFont_descriptor];
      return t34 == null ? dart.throw(new _internal.LateError.fieldNI("descriptor")) : t34;
    }
    set descriptor(descriptor$35param) {
      this[__PdfTtfFont_descriptor] = descriptor$35param;
    }
    get file() {
      let t34;
      t34 = this[__PdfTtfFont_file];
      return t34 == null ? dart.throw(new _internal.LateError.fieldNI("file")) : t34;
    }
    set file(file$35param) {
      this[__PdfTtfFont_file] = file$35param;
    }
    get widthsObject() {
      let t34;
      t34 = this[__PdfTtfFont_widthsObject];
      return t34 == null ? dart.throw(new _internal.LateError.fieldNI("widthsObject")) : t34;
    }
    set widthsObject(widthsObject$35param) {
      this[__PdfTtfFont_widthsObject] = widthsObject$35param;
    }
    get fontName() {
      return this.font.fontName;
    }
    get ascent() {
      return this.font.ascent[$toDouble]() / this.font.unitsPerEm;
    }
    get descent() {
      return this.font.descent[$toDouble]() / this.font.unitsPerEm;
    }
    get unitsPerEm() {
      return this.font.unitsPerEm;
    }
    glyphMetrics(charCode) {
      let t34, t34$;
      let g = this.font.charToGlyphIndexMap[$_get](charCode);
      if (g == null) {
        return font_metrics.PdfFontMetrics.zero;
      }
      if (arabic.isArabicDiacriticValue(charCode)) {
        let metric = (t34 = this.font.glyphInfoMap[$_get](g), t34 == null ? font_metrics.PdfFontMetrics.zero : t34);
        return metric.copyWith({advanceWidth: 0.0});
      }
      t34$ = this.font.glyphInfoMap[$_get](g);
      return t34$ == null ? font_metrics.PdfFontMetrics.zero : t34$;
    }
    [_buildTrueType](params) {
      let charMin = null;
      let charMax = null;
      this.file.buf.putBytes(this.font.bytes[$buffer][$asUint8List]());
      this.file.params._set("/Length1", new data_types.PdfNum.new(this.font.bytes[$lengthInBytes]));
      params._set("/BaseFont", new data_types.PdfName.new("/" + this.fontName));
      params._set("/FontDescriptor", this.descriptor.ref());
      charMin = 32;
      charMax = 255;
      for (let i = charMin; i <= charMax; i = i + 1) {
        this.widthsObject.array.add(new data_types.PdfNum.new((this.glyphMetrics(i).advanceWidth * 1000.0)[$toInt]()));
      }
      params._set("/FirstChar", new data_types.PdfNum.new(charMin));
      params._set("/LastChar", new data_types.PdfNum.new(charMax));
      params._set("/Widths", this.widthsObject.ref());
    }
    [_buildType0](params) {
      let charMin = null;
      let charMax = null;
      let ttfWriter = new ttf_writer.TtfWriter.new(this.font);
      let data = ttfWriter.withChars(this.unicodeCMap.cmap);
      this.file.buf.putBytes(data);
      this.file.params._set("/Length1", new data_types.PdfNum.new(data[$length]));
      let descendantFont = T$.PdfDictOfPdfDataType().new(new (T$.IdentityMapOfString$PdfDataType()).from(["/Type", C[236] || CT.C236, "/BaseFont", new data_types.PdfName.new("/" + this.fontName), "/FontFile2", this.file.ref(), "/FontDescriptor", this.descriptor.ref(), "/W", new (T$.PdfArrayOfPdfDataType()).new(T$.JSArrayOfPdfDataType().of([C[233] || CT.C233, this.widthsObject.ref()])), "/CIDToGIDMap", C[237] || CT.C237, "/DW", C[238] || CT.C238, "/Subtype", C[239] || CT.C239, "/CIDSystemInfo", T$.PdfDictOfPdfDataType().new(new (T$.IdentityMapOfString$PdfDataType()).from(["/Supplement", C[233] || CT.C233, "/Registry", data_types.PdfSecString.fromString(this, "Adobe"), "/Ordering", data_types.PdfSecString.fromString(this, "Identity-H")]))]));
      params._set("/BaseFont", new data_types.PdfName.new("/" + this.fontName));
      params._set("/Encoding", C[240] || CT.C240);
      params._set("/DescendantFonts", new (T$.PdfArrayOfPdfDictOfPdfDataType()).new(T$.JSArrayOfPdfDictOfPdfDataType().of([descendantFont])));
      params._set("/ToUnicode", this.unicodeCMap.ref());
      charMin = 0;
      charMax = this.unicodeCMap.cmap[$length] - 1;
      for (let i = charMin; i <= charMax; i = i + 1) {
        this.widthsObject.array.add(new data_types.PdfNum.new((this.glyphMetrics(this.unicodeCMap.cmap[$_get](i)).advanceWidth * 1000.0)[$toInt]()));
      }
    }
    prepare() {
      super.prepare();
      if (this.font.unicode) {
        this[_buildType0](this.params);
      } else {
        this[_buildTrueType](this.params);
      }
    }
    putText(stream, text) {
      if (!this.font.unicode) {
        super.putText(stream, text);
      }
      let runes = text[$runes];
      stream.putByte(60);
      for (let rune of runes) {
        let char = this.unicodeCMap.cmap[$indexOf](rune);
        if (char === -1) {
          char = this.unicodeCMap.cmap[$length];
          this.unicodeCMap.cmap[$add](rune);
        }
        stream.putBytes(convert.latin1.encode(char[$toRadixString](16)[$padLeft](4, "0")));
      }
      stream.putByte(62);
    }
    stringMetrics(s, opts) {
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : 0;
      if (s[$isEmpty] || !this.font.unicode) {
        return super.stringMetrics(s, {letterSpacing: letterSpacing});
      }
      let runes = s[$runes];
      let bytes = T$.JSArrayOfint().of([]);
      runes[$forEach](T$.intTovoid().as(dart.bind(bytes, $add)));
      let metrics = bytes[$map](font_metrics.PdfFontMetrics, dart.bind(this, 'glyphMetrics'));
      return font_metrics.PdfFontMetrics.append(metrics, {letterSpacing: letterSpacing});
    }
    isRuneSupported(charCode) {
      return this.font.charToGlyphIndexMap[$containsKey](charCode);
    }
  };
  (ttffont.PdfTtfFont.new = function(pdfDocument, bytes, opts) {
    let protect = opts && 'protect' in opts ? opts.protect : false;
    this[__PdfTtfFont_unicodeCMap] = null;
    this[__PdfTtfFont_descriptor] = null;
    this[__PdfTtfFont_file] = null;
    this[__PdfTtfFont_widthsObject] = null;
    this[font$0] = new ttf_parser.TtfParser.new(bytes);
    ttffont.PdfTtfFont.__proto__.create.call(this, pdfDocument, {subtype: "/TrueType"});
    this.file = new object_stream.PdfObjectStream.new(pdfDocument, {isBinary: true});
    this.unicodeCMap = new unicode_cmap.PdfUnicodeCmap.new(pdfDocument, protect);
    this.descriptor = new font_descriptor.PdfFontDescriptor.new(this, this.file);
    this.widthsObject = new array$.PdfArrayObject.new(pdfDocument, new (T$.PdfArrayOfPdfDataType()).new());
  }).prototype = ttffont.PdfTtfFont.prototype;
  dart.addTypeTests(ttffont.PdfTtfFont);
  dart.addTypeCaches(ttffont.PdfTtfFont);
  dart.setMethodSignature(ttffont.PdfTtfFont, () => ({
    __proto__: dart.getMethods(ttffont.PdfTtfFont.__proto__),
    glyphMetrics: dart.fnType(font_metrics.PdfFontMetrics, [core.int]),
    [_buildTrueType]: dart.fnType(dart.void, [data_types.PdfDict$(data_types.PdfDataType)]),
    [_buildType0]: dart.fnType(dart.void, [data_types.PdfDict$(data_types.PdfDataType)]),
    isRuneSupported: dart.fnType(core.bool, [core.int])
  }));
  dart.setGetterSignature(ttffont.PdfTtfFont, () => ({
    __proto__: dart.getGetters(ttffont.PdfTtfFont.__proto__),
    subtype: core.String,
    unicodeCMap: unicode_cmap.PdfUnicodeCmap,
    descriptor: font_descriptor.PdfFontDescriptor,
    file: object_stream.PdfObjectStream,
    widthsObject: array$.PdfArrayObject,
    fontName: core.String,
    ascent: core.double,
    descent: core.double,
    unitsPerEm: core.int
  }));
  dart.setSetterSignature(ttffont.PdfTtfFont, () => ({
    __proto__: dart.getSetters(ttffont.PdfTtfFont.__proto__),
    unicodeCMap: unicode_cmap.PdfUnicodeCmap,
    descriptor: font_descriptor.PdfFontDescriptor,
    file: object_stream.PdfObjectStream,
    widthsObject: array$.PdfArrayObject
  }));
  dart.setLibraryUri(ttffont.PdfTtfFont, I[37]);
  dart.setFieldSignature(ttffont.PdfTtfFont, () => ({
    __proto__: dart.getFields(ttffont.PdfTtfFont.__proto__),
    [__PdfTtfFont_unicodeCMap]: dart.fieldType(dart.nullable(unicode_cmap.PdfUnicodeCmap)),
    [__PdfTtfFont_descriptor]: dart.fieldType(dart.nullable(font_descriptor.PdfFontDescriptor)),
    [__PdfTtfFont_file]: dart.fieldType(dart.nullable(object_stream.PdfObjectStream)),
    [__PdfTtfFont_widthsObject]: dart.fieldType(dart.nullable(array$.PdfArrayObject)),
    font: dart.finalFieldType(ttf_parser.TtfParser)
  }));
  var fontName$ = dart.privateName(type1_font, "PdfType1Font.fontName");
  var ascent$ = dart.privateName(type1_font, "PdfType1Font.ascent");
  var descent$ = dart.privateName(type1_font, "PdfType1Font.descent");
  var widths$ = dart.privateName(type1_font, "PdfType1Font.widths");
  type1_font.PdfType1Font = class PdfType1Font extends font.PdfFont {
    get fontName() {
      return this[fontName$];
    }
    set fontName(value) {
      super.fontName = value;
    }
    get ascent() {
      return this[ascent$];
    }
    set ascent(value) {
      super.ascent = value;
    }
    get descent() {
      return this[descent$];
    }
    set descent(value) {
      super.descent = value;
    }
    get widths() {
      return this[widths$];
    }
    set widths(value) {
      super.widths = value;
    }
    static ['_#create#tearOff'](pdfDocument, fontName, ascent, descent, widths) {
      return new type1_font.PdfType1Font.create(pdfDocument, fontName, ascent, descent, widths);
    }
    get unitsPerEm() {
      return 1000;
    }
    prepare() {
      super.prepare();
      this.params._set("/BaseFont", new data_types.PdfName.new("/" + this.fontName));
    }
    glyphMetrics(charCode) {
      if (!this.isRuneSupported(charCode)) {
        dart.throw(core.Exception.new("Unable to display U+" + charCode[$toRadixString](16) + " with " + this.fontName));
      }
      return new font_metrics.PdfFontMetrics.new({left: 0.0, top: this.descent, right: charCode < this.widths[$length] ? this.widths[$_get](charCode) : 0.6, bottom: this.ascent});
    }
    isRuneSupported(charCode) {
      return charCode >= 0 && charCode <= 255;
    }
  };
  (type1_font.PdfType1Font.create = function(pdfDocument, fontName, ascent, descent, widths) {
    this[fontName$] = fontName;
    this[ascent$] = ascent;
    this[descent$] = descent;
    this[widths$] = widths;
    if (!dart.fn(() => {
      core.print(fontName + " has no Unicode support see https://github.com/DavBfr/dart_pdf/wiki/Fonts-Management");
      return true;
    }, T$.VoidTobool())()) dart.assertFailed(null, I[38], 35, 16, "() {\n          // ignore: avoid_print\n          print(\n              '$fontName has no Unicode support see https://github.com/DavBfr/dart_pdf/wiki/Fonts-Management');\n          return true;\n        }()");
    type1_font.PdfType1Font.__proto__.create.call(this, pdfDocument, {subtype: "/Type1"});
    ;
  }).prototype = type1_font.PdfType1Font.prototype;
  dart.addTypeTests(type1_font.PdfType1Font);
  dart.addTypeCaches(type1_font.PdfType1Font);
  dart.setMethodSignature(type1_font.PdfType1Font, () => ({
    __proto__: dart.getMethods(type1_font.PdfType1Font.__proto__),
    glyphMetrics: dart.fnType(font_metrics.PdfFontMetrics, [core.int]),
    isRuneSupported: dart.fnType(core.bool, [core.int])
  }));
  dart.setGetterSignature(type1_font.PdfType1Font, () => ({
    __proto__: dart.getGetters(type1_font.PdfType1Font.__proto__),
    unitsPerEm: core.int
  }));
  dart.setLibraryUri(type1_font.PdfType1Font, I[39]);
  dart.setFieldSignature(type1_font.PdfType1Font, () => ({
    __proto__: dart.getFields(type1_font.PdfType1Font.__proto__),
    fontName: dart.finalFieldType(core.String),
    ascent: dart.finalFieldType(core.double),
    descent: dart.finalFieldType(core.double),
    widths: dart.finalFieldType(core.List$(core.double))
  }));
  graphics.PdfLineJoin = class PdfLineJoin extends core._Enum {
    toString() {
      return "PdfLineJoin." + this[_name];
    }
  };
  (graphics.PdfLineJoin.new = function(index, name) {
    graphics.PdfLineJoin.__proto__.new.call(this, index, name);
    ;
  }).prototype = graphics.PdfLineJoin.prototype;
  dart.addTypeTests(graphics.PdfLineJoin);
  dart.addTypeCaches(graphics.PdfLineJoin);
  dart.setLibraryUri(graphics.PdfLineJoin, I[40]);
  dart.setStaticFieldSignature(graphics.PdfLineJoin, () => ['values', 'miter', 'round', 'bevel']);
  dart.defineExtensionMethods(graphics.PdfLineJoin, ['toString']);
  dart.defineLazy(graphics.PdfLineJoin, {
    /*graphics.PdfLineJoin.values*/get values() {
      return C[243] || CT.C243;
    },
    /*graphics.PdfLineJoin.miter*/get miter() {
      return C[244] || CT.C244;
    },
    /*graphics.PdfLineJoin.round*/get round() {
      return C[245] || CT.C245;
    },
    /*graphics.PdfLineJoin.bevel*/get bevel() {
      return C[246] || CT.C246;
    }
  }, false);
  graphics.PdfLineCap = class PdfLineCap extends core._Enum {
    toString() {
      return "PdfLineCap." + this[_name];
    }
  };
  (graphics.PdfLineCap.new = function(index, name) {
    graphics.PdfLineCap.__proto__.new.call(this, index, name);
    ;
  }).prototype = graphics.PdfLineCap.prototype;
  dart.addTypeTests(graphics.PdfLineCap);
  dart.addTypeCaches(graphics.PdfLineCap);
  dart.setLibraryUri(graphics.PdfLineCap, I[40]);
  dart.setStaticFieldSignature(graphics.PdfLineCap, () => ['values', 'butt', 'round', 'square']);
  dart.defineExtensionMethods(graphics.PdfLineCap, ['toString']);
  dart.defineLazy(graphics.PdfLineCap, {
    /*graphics.PdfLineCap.values*/get values() {
      return C[247] || CT.C247;
    },
    /*graphics.PdfLineCap.butt*/get butt() {
      return C[248] || CT.C248;
    },
    /*graphics.PdfLineCap.round*/get round() {
      return C[249] || CT.C249;
    },
    /*graphics.PdfLineCap.square*/get square() {
      return C[250] || CT.C250;
    }
  }, false);
  graphics.PdfTextRenderingMode = class PdfTextRenderingMode extends core._Enum {
    toString() {
      return "PdfTextRenderingMode." + this[_name];
    }
  };
  (graphics.PdfTextRenderingMode.new = function(index, name) {
    graphics.PdfTextRenderingMode.__proto__.new.call(this, index, name);
    ;
  }).prototype = graphics.PdfTextRenderingMode.prototype;
  dart.addTypeTests(graphics.PdfTextRenderingMode);
  dart.addTypeCaches(graphics.PdfTextRenderingMode);
  dart.setLibraryUri(graphics.PdfTextRenderingMode, I[40]);
  dart.setStaticFieldSignature(graphics.PdfTextRenderingMode, () => ['values', 'fill', 'stroke', 'fillAndStroke', 'invisible', 'fillAndClip', 'strokeAndClip', 'fillStrokeAndClip', 'clip']);
  dart.defineExtensionMethods(graphics.PdfTextRenderingMode, ['toString']);
  dart.defineLazy(graphics.PdfTextRenderingMode, {
    /*graphics.PdfTextRenderingMode.values*/get values() {
      return C[251] || CT.C251;
    },
    /*graphics.PdfTextRenderingMode.fill*/get fill() {
      return C[252] || CT.C252;
    },
    /*graphics.PdfTextRenderingMode.stroke*/get stroke() {
      return C[253] || CT.C253;
    },
    /*graphics.PdfTextRenderingMode.fillAndStroke*/get fillAndStroke() {
      return C[254] || CT.C254;
    },
    /*graphics.PdfTextRenderingMode.invisible*/get invisible() {
      return C[255] || CT.C255;
    },
    /*graphics.PdfTextRenderingMode.fillAndClip*/get fillAndClip() {
      return C[256] || CT.C256;
    },
    /*graphics.PdfTextRenderingMode.strokeAndClip*/get strokeAndClip() {
      return C[257] || CT.C257;
    },
    /*graphics.PdfTextRenderingMode.fillStrokeAndClip*/get fillStrokeAndClip() {
      return C[258] || CT.C258;
    },
    /*graphics.PdfTextRenderingMode.clip*/get clip() {
      return C[259] || CT.C259;
    }
  }, false);
  var ctm$ = dart.privateName(graphics, "_PdfGraphicsContext.ctm");
  graphics._PdfGraphicsContext = class _PdfGraphicsContext extends core.Object {
    get ctm() {
      return this[ctm$];
    }
    set ctm(value) {
      super.ctm = value;
    }
    static ['_#new#tearOff'](opts) {
      let ctm = opts && 'ctm' in opts ? opts.ctm : null;
      return new graphics._PdfGraphicsContext.new({ctm: ctm});
    }
    copy() {
      return new graphics._PdfGraphicsContext.new({ctm: this.ctm.clone()});
    }
  };
  (graphics._PdfGraphicsContext.new = function(opts) {
    let ctm = opts && 'ctm' in opts ? opts.ctm : null;
    this[ctm$] = ctm;
    ;
  }).prototype = graphics._PdfGraphicsContext.prototype;
  dart.addTypeTests(graphics._PdfGraphicsContext);
  dart.addTypeCaches(graphics._PdfGraphicsContext);
  dart.setMethodSignature(graphics._PdfGraphicsContext, () => ({
    __proto__: dart.getMethods(graphics._PdfGraphicsContext.__proto__),
    copy: dart.fnType(graphics._PdfGraphicsContext, [])
  }));
  dart.setLibraryUri(graphics._PdfGraphicsContext, I[40]);
  dart.setFieldSignature(graphics._PdfGraphicsContext, () => ({
    __proto__: dart.getFields(graphics._PdfGraphicsContext.__proto__),
    ctm: dart.finalFieldType(vector_math_64.Matrix4)
  }));
  var __PdfGraphics__context = dart.privateName(graphics, "_#PdfGraphics#_context");
  var _contextQueue = dart.privateName(graphics, "_contextQueue");
  var _page$ = dart.privateName(graphics, "_page");
  var _buf$ = dart.privateName(graphics, "_buf");
  var _context = dart.privateName(graphics, "_context");
  var _vectorAngle = dart.privateName(graphics, "_vectorAngle");
  var _bezierArcFromCentre = dart.privateName(graphics, "_bezierArcFromCentre");
  var _endToCenterParameters = dart.privateName(graphics, "_endToCenterParameters");
  graphics.PdfGraphics = class PdfGraphics extends core.Object {
    static ['_#new#tearOff'](_page, _buf) {
      return new graphics.PdfGraphics.new(_page, _buf);
    }
    set [_context](library$32package$58pdf$47src$47pdf$47graphics$46dart$58$58_context$35param) {
      this[__PdfGraphics__context] = library$32package$58pdf$47src$47pdf$47graphics$46dart$58$58_context$35param;
    }
    get [_context]() {
      let t42;
      t42 = this[__PdfGraphics__context];
      return t42 == null ? dart.throw(new _internal.LateError.fieldNI("_context")) : t42;
    }
    get defaultFont() {
      return this[_page$].getDefaultFont();
    }
    fillPath(opts) {
      let evenOdd = opts && 'evenOdd' in opts ? opts.evenOdd : false;
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("fillPath evenOdd:" + dart.str(evenOdd));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 125, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('fillPath evenOdd:$evenOdd');\n      }\n      return true;\n    }()");
      this[_buf$].putString("f" + (evenOdd ? "*" : "") + "\n");
    }
    strokePath(opts) {
      let close = opts && 'close' in opts ? opts.close : false;
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("strokePath close:" + dart.str(close));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 137, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('strokePath close:$close');\n      }\n      return true;\n    }()");
      this[_buf$].putString((close ? "s" : "S") + "\n");
    }
    closePath() {
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("closePath");
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 149, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('closePath');\n      }\n      return true;\n    }()");
      this[_buf$].putString("h\n");
    }
    clipPath(opts) {
      let evenOdd = opts && 'evenOdd' in opts ? opts.evenOdd : false;
      let end = opts && 'end' in opts ? opts.end : true;
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("clipPath evenOdd:" + dart.str(evenOdd) + " end:" + dart.str(end));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 162, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('clipPath evenOdd:$evenOdd end:$end');\n      }\n      return true;\n    }()");
      this[_buf$].putString("W" + (evenOdd ? "*" : "") + (end ? " n" : "") + "\n");
    }
    fillAndStrokePath(opts) {
      let evenOdd = opts && 'evenOdd' in opts ? opts.evenOdd : false;
      let close = opts && 'close' in opts ? opts.close : false;
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("fillAndStrokePath evenOdd:" + dart.str(evenOdd) + " close:" + dart.str(close));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 175, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('fillAndStrokePath evenOdd:$evenOdd close:$close');\n      }\n      return true;\n    }()");
      this[_buf$].putString((close ? "b" : "B") + (evenOdd ? "*" : "") + "\n");
    }
    applyShader(shader) {
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("applyShader");
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 187, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('applyShader');\n      }\n      return true;\n    }()");
      this[_page$].addShader(shader);
      this[_buf$].putString(shader.name + " sh\n");
    }
    restoreContext() {
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("restoreContext");
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 205, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('restoreContext');\n      }\n      return true;\n    }()");
      if (this[_contextQueue][$isNotEmpty]) {
        this[_buf$].putString("Q\n");
        this[_context] = this[_contextQueue].removeLast();
      }
    }
    saveContext() {
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("saveContext");
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 221, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('saveContext');\n      }\n      return true;\n    }()");
      this[_buf$].putString("q\n");
      this[_contextQueue].addLast(this[_context].copy());
    }
    drawImage(img, x, y, w = null, h = null) {
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("drawImage x:" + dart.str(x) + " y:" + dart.str(y));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 234, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('drawImage x:$x y:$y');\n      }\n      return true;\n    }()");
      w == null ? w = img.width[$toDouble]() : null;
      h == null ? h = img.height[$toDouble]() * dart.notNull(w) / img.width[$toDouble]() : null;
      this[_page$].addXObject(img);
      this[_buf$].putString("q ");
      switch (img.orientation) {
        case C[126] || CT.C126:
          {
            new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([w, 0.0, 0.0, h, x, y])).output(this[_buf$]);
            break;
          }
        case C[127] || CT.C127:
          {
            new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([-dart.notNull(w), 0.0, 0.0, h, dart.notNull(w) + x, y])).output(this[_buf$]);
            break;
          }
        case C[128] || CT.C128:
          {
            new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([-dart.notNull(w), 0.0, 0.0, -dart.notNull(h), dart.notNull(w) + x, dart.notNull(h) + y])).output(this[_buf$]);
            break;
          }
        case C[129] || CT.C129:
          {
            new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([w, 0.0, 0.0, -dart.notNull(h), x, dart.notNull(h) + y])).output(this[_buf$]);
            break;
          }
        case C[130] || CT.C130:
          {
            new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([0.0, -dart.notNull(h), -dart.notNull(w), 0.0, dart.notNull(w) + x, dart.notNull(h) + y])).output(this[_buf$]);
            break;
          }
        case C[131] || CT.C131:
          {
            new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([0.0, -dart.notNull(h), w, 0.0, x, dart.notNull(h) + y])).output(this[_buf$]);
            break;
          }
        case C[132] || CT.C132:
          {
            new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([0.0, h, w, 0.0, x, y])).output(this[_buf$]);
            break;
          }
        case C[133] || CT.C133:
          {
            new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([0.0, h, -dart.notNull(w), 0.0, dart.notNull(w) + x, y])).output(this[_buf$]);
            break;
          }
      }
      this[_buf$].putString(" cm " + img.name + " Do Q\n");
    }
    drawLine(x1, y1, x2, y2) {
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("drawLine x1:" + dart.str(x1) + " y1:" + dart.str(y1) + " x2:" + dart.str(x2) + " y2:" + dart.str(y2));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 281, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('drawLine x1:$x1 y1:$y1 x2:$x2 y2:$y2');\n      }\n      return true;\n    }()");
      this.moveTo(x1, y1);
      this.lineTo(x2, y2);
    }
    drawEllipse(x, y, r1, r2, opts) {
      let clockwise = opts && 'clockwise' in opts ? opts.clockwise : true;
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("drawEllipse x:" + dart.str(x) + " y:" + dart.str(y) + " r1:" + dart.str(r1) + " r2:" + dart.str(r2));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 297, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('drawEllipse x:$x y:$y r1:$r1 r2:$r2');\n      }\n      return true;\n    }()");
      this.moveTo(x, y - r2);
      if (clockwise) {
        this.curveTo(x + 0.551784 * r1, y - r2, x + r1, y - 0.551784 * r2, x + r1, y);
        this.curveTo(x + r1, y + 0.551784 * r2, x + 0.551784 * r1, y + r2, x, y + r2);
        this.curveTo(x - 0.551784 * r1, y + r2, x - r1, y + 0.551784 * r2, x - r1, y);
        this.curveTo(x - r1, y - 0.551784 * r2, x - 0.551784 * r1, y - r2, x, y - r2);
      } else {
        this.curveTo(x - 0.551784 * r1, y - r2, x - r1, y - 0.551784 * r2, x - r1, y);
        this.curveTo(x - r1, y + 0.551784 * r2, x - 0.551784 * r1, y + r2, x, y + r2);
        this.curveTo(x + 0.551784 * r1, y + r2, x + r1, y + 0.551784 * r2, x + r1, y);
        this.curveTo(x + r1, y - 0.551784 * r2, x + 0.551784 * r1, y - r2, x, y - r2);
      }
    }
    drawRect(x, y, w, h) {
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("drawRect x:" + dart.str(x) + " y:" + dart.str(y) + " w:" + dart.str(w) + " h:" + dart.str(h));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 325, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('drawRect x:$x y:$y w:$w h:$h');\n      }\n      return true;\n    }()");
      new data_types.PdfNumList.new(T$.JSArrayOfnum().of([x, y, w, h])).output(this[_buf$]);
      this[_buf$].putString(" re\n");
    }
    drawBox(box) {
      this.drawRect(box.x, box.y, box.width, box.height);
    }
    drawRRect(x, y, w, h, rv, rh) {
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("drawRRect x:" + dart.str(x) + " y:" + dart.str(y) + " w:" + dart.str(w) + " h:" + dart.str(h) + " rv:" + dart.str(rv) + " rh:" + dart.str(rh));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 343, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('drawRRect x:$x y:$y w:$w h:$h rv:$rv rh:$rh');\n      }\n      return true;\n    }()");
      this.moveTo(x, y + rv);
      this.curveTo(x, y - 0.551784 * rv + rv, x - 0.551784 * rh + rh, y, x + rh, y);
      this.lineTo(x + w - rh, y);
      this.curveTo(x + 0.551784 * rh + w - rh, y, x + w, y - 0.551784 * rv + rv, x + w, y + rv);
      this.lineTo(x + w, y + h - rv);
      this.curveTo(x + w, y + 0.551784 * rv + h - rv, x + 0.551784 * rh + w - rh, y + h, x + w - rh, y + h);
      this.lineTo(x + rh, y + h);
      this.curveTo(x - 0.551784 * rh + rh, y + h, x, y + 0.551784 * rv + h - rv, x, y + h - rv);
      this.lineTo(x, y + rv);
    }
    setFont(font, size, opts) {
      let charSpace = opts && 'charSpace' in opts ? opts.charSpace : null;
      let wordSpace = opts && 'wordSpace' in opts ? opts.wordSpace : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      let mode = opts && 'mode' in opts ? opts.mode : C[252] || CT.C252;
      let rise = opts && 'rise' in opts ? opts.rise : null;
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("setFont");
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 372, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('setFont');\n      }\n      return true;\n    }()");
      this[_buf$].putString(font.name + " ");
      new data_types.PdfNum.new(size).output(this[_buf$]);
      this[_buf$].putString(" Tf\n");
      if (charSpace != null) {
        new data_types.PdfNum.new(charSpace).output(this[_buf$]);
        this[_buf$].putString(" Tc\n");
      }
      if (wordSpace != null) {
        new data_types.PdfNum.new(wordSpace).output(this[_buf$]);
        this[_buf$].putString(" Tw\n");
      }
      if (scale != null) {
        new data_types.PdfNum.new(dart.notNull(scale) * 100).output(this[_buf$]);
        this[_buf$].putString(" Tz\n");
      }
      if (rise != null) {
        new data_types.PdfNum.new(rise).output(this[_buf$]);
        this[_buf$].putString(" Ts\n");
      }
      if (mode !== graphics.PdfTextRenderingMode.fill) {
        this[_buf$].putString(dart.str(dart.nullCheck(mode).index) + " Tr\n");
      }
    }
    drawString(font, size, s, x, y, opts) {
      let charSpace = opts && 'charSpace' in opts ? opts.charSpace : 0;
      let wordSpace = opts && 'wordSpace' in opts ? opts.wordSpace : 0;
      let scale = opts && 'scale' in opts ? opts.scale : 1;
      let mode = opts && 'mode' in opts ? opts.mode : C[252] || CT.C252;
      let rise = opts && 'rise' in opts ? opts.rise : 0;
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("drawString x:" + dart.str(x) + " y:" + dart.str(y) + " size:" + dart.str(size) + " \"" + s + "\"");
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 416, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('drawString x:$x y:$y size:$size \"$s\"');\n      }\n      return true;\n    }()");
      this[_page$].addFont(font);
      this[_buf$].putString("BT ");
      new data_types.PdfNumList.new(T$.JSArrayOfnum().of([x, y])).output(this[_buf$]);
      this[_buf$].putString(" Td ");
      this.setFont(font, size, {charSpace: charSpace, mode: mode, rise: rise, scale: scale, wordSpace: wordSpace});
      this[_buf$].putString("[");
      font.putText(this[_buf$], s);
      this[_buf$].putString("]TJ ET\n");
    }
    reset() {
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("reset");
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 440, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('reset');\n      }\n      return true;\n    }()");
      this[_buf$].putString("0 Tr\n");
    }
    setColor(color) {
      this.setFillColor(color);
      this.setStrokeColor(color);
    }
    setFillColor(color) {
      if (!dart.fn(() => {
        let t42;
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("setFillColor " + dart.str((t42 = color, t42 == null ? null : t42.toHex())));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 458, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('setFillColor ${color?.toHex()}');\n      }\n      return true;\n    }()");
      if (color$.PdfColorCmyk.is(color)) {
        new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([color.cyan, color.magenta, color.yellow, color.black])).output(this[_buf$]);
        this[_buf$].putString(" k\n");
      } else {
        new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([dart.nullCheck(color).red, color.green, color.blue])).output(this[_buf$]);
        this[_buf$].putString(" rg\n");
      }
    }
    setStrokeColor(color) {
      if (!dart.fn(() => {
        let t42;
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("setStrokeColor " + dart.str((t42 = color, t42 == null ? null : t42.toHex())));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 477, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('setStrokeColor ${color?.toHex()}');\n      }\n      return true;\n    }()");
      if (color$.PdfColorCmyk.is(color)) {
        new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([color.cyan, color.magenta, color.yellow, color.black])).output(this[_buf$]);
        this[_buf$].putString(" K\n");
      } else {
        new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([dart.nullCheck(color).red, color.green, color.blue])).output(this[_buf$]);
        this[_buf$].putString(" RG\n");
      }
    }
    setFillPattern(pattern) {
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("setFillPattern");
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 496, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('setFillPattern');\n      }\n      return true;\n    }()");
      this[_page$].addPattern(pattern);
      this[_buf$].putString("/Pattern cs" + pattern.name + " scn\n");
    }
    setStrokePattern(pattern) {
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("setStrokePattern");
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 510, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('setStrokePattern');\n      }\n      return true;\n    }()");
      this[_page$].addPattern(pattern);
      this[_buf$].putString("/Pattern CS" + pattern.name + " SCN\n");
    }
    setGraphicState(state) {
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("setGraphicState " + dart.str(state));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 524, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('setGraphicState $state');\n      }\n      return true;\n    }()");
      let name = this[_page$].stateName(state);
      this[_buf$].putString(name + " gs\n");
    }
    setTransform(t) {
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("setTransform\n" + dart.str(t));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 537, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('setTransform\\n$t');\n      }\n      return true;\n    }()");
      let s = t.storage;
      new data_types.PdfNumList.new(T$.JSArrayOfdouble().of([s[$_get](0), s[$_get](1), s[$_get](4), s[$_get](5), s[$_get](12), s[$_get](13)])).output(this[_buf$]);
      this[_buf$].putString(" cm\n");
      this[_context].ctm.multiply(t);
    }
    getTransform() {
      return this[_context].ctm.clone();
    }
    lineTo(x, y) {
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("lineTo x:" + dart.str(x) + " y:" + dart.str(y));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 557, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('lineTo x:$x y:$y');\n      }\n      return true;\n    }()");
      new data_types.PdfNumList.new(T$.JSArrayOfnum().of([x, y])).output(this[_buf$]);
      this[_buf$].putString(" l\n");
    }
    moveTo(x, y) {
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("moveTo x:" + dart.str(x) + " y:" + dart.str(y));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 570, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('moveTo x:$x y:$y');\n      }\n      return true;\n    }()");
      new data_types.PdfNumList.new(T$.JSArrayOfnum().of([x, y])).output(this[_buf$]);
      this[_buf$].putString(" m\n");
    }
    curveTo(x1, y1, x2, y2, x3, y3) {
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("curveTo x1:" + dart.str(x1) + " y1:" + dart.str(y1) + " x2:" + dart.str(x2) + " y2:" + dart.str(y2) + " x3:" + dart.str(x3) + " y3:" + dart.str(y3));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 586, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('curveTo x1:$x1 y1:$y1 x2:$x2 y2:$y2 x3:$x3 y3:$y3');\n      }\n      return true;\n    }()");
      new data_types.PdfNumList.new(T$.JSArrayOfnum().of([x1, y1, x2, y2, x3, y3])).output(this[_buf$]);
      this[_buf$].putString(" c\n");
    }
    [_vectorAngle](ux, uy, vx, vy) {
      let d = math.sqrt(ux * ux + uy * uy) * math.sqrt(vx * vx + vy * vy);
      if (d === 0.0) {
        return 0.0;
      }
      let c = (ux * vx + uy * vy) / d;
      if (c < -1.0) {
        c = -1.0;
      } else if (c > 1.0) {
        c = 1.0;
      }
      let s = ux * vy - uy * vx;
      c = math.acos(c);
      return c[$sign] === s[$sign] ? c : -c;
    }
    [_endToCenterParameters](x1, y1, x2, y2, large, sweep, rx, ry) {
      rx = rx[$abs]();
      ry = ry[$abs]();
      let x1d = 0.5 * (x1 - x2);
      let y1d = 0.5 * (y1 - y2);
      let r = x1d * x1d / (rx * rx) + y1d * y1d / (ry * ry);
      if (r > 1.0) {
        let rr = math.sqrt(r);
        rx = rx * rr;
        ry = ry * rr;
        r = x1d * x1d / (rx * rx) + y1d * y1d / (ry * ry);
      } else if (r !== 0.0) {
        r = 1.0 / r - 1.0;
      }
      if (-1e-10 < r && r < 0.0) {
        r = 0.0;
      }
      r = math.sqrt(r);
      if (large === sweep) {
        r = -r;
      }
      let cxd = r * rx * y1d / ry;
      let cyd = -(r * ry * x1d) / rx;
      let cx = cxd + 0.5 * (x1 + x2);
      let cy = cyd + 0.5 * (y1 + y2);
      let theta = this[_vectorAngle](1.0, 0.0, (x1d - cxd) / rx, (y1d - cyd) / ry);
      let dTheta = this[_vectorAngle]((x1d - cxd) / rx, (y1d - cyd) / ry, (-x1d - cxd) / rx, (-y1d - cyd) / ry)[$modulo](3.141592653589793 * 2.0);
      if (sweep === false && dTheta > 0.0) {
        dTheta = dTheta - 3.141592653589793 * 2.0;
      } else if (sweep === true && dTheta < 0.0) {
        dTheta = dTheta + 3.141592653589793 * 2.0;
      }
      this[_bezierArcFromCentre](cx, cy, rx, ry, -theta, -dTheta);
    }
    [_bezierArcFromCentre](cx, cy, rx, ry, startAngle, extent) {
      let fragmentsCount = null;
      let fragmentsAngle = null;
      if (extent[$abs]() <= 3.141592653589793 / 2.0) {
        fragmentsCount = 1;
        fragmentsAngle = extent;
      } else {
        fragmentsCount = (extent[$abs]() / (3.141592653589793 / 2.0))[$ceil]()[$toInt]();
        fragmentsAngle = extent / fragmentsCount[$toDouble]();
      }
      if (fragmentsAngle === 0.0) {
        return;
      }
      let halfFragment = fragmentsAngle * 0.5;
      let kappa = (4.0 / 3.0 * (1.0 - math.cos(halfFragment)) / math.sin(halfFragment))[$abs]();
      if (fragmentsAngle < 0.0) {
        kappa = -kappa;
      }
      let theta = startAngle;
      let startFragment = theta + fragmentsAngle;
      let c1 = math.cos(theta);
      let s1 = math.sin(theta);
      for (let i = 0; i < fragmentsCount; i = i + 1) {
        let c0 = c1;
        let s0 = s1;
        theta = startFragment + i * fragmentsAngle;
        c1 = math.cos(theta);
        s1 = math.sin(theta);
        this.curveTo(cx + rx * (c0 - kappa * s0), cy - ry * (s0 + kappa * c0), cx + rx * (c1 + kappa * s1), cy - ry * (s1 - kappa * c1), cx + rx * c1, cy - ry * s1);
      }
    }
    bezierArc(x1, y1, rx, ry, x2, y2, opts) {
      let large = opts && 'large' in opts ? opts.large : false;
      let sweep = opts && 'sweep' in opts ? opts.sweep : false;
      let phi = opts && 'phi' in opts ? opts.phi : 0;
      if (x1 === x2 && y1 === y2) {
        return;
      }
      if (rx[$abs]() <= 1e-10 || ry[$abs]() <= 1e-10) {
        this.lineTo(x2, y2);
        return;
      }
      if (phi !== 0.0) {
        let mat = vector_math_64.Matrix4.identity();
        mat.translate(-x1, -y1);
        mat.rotateZ(-phi);
        let tr = mat.transform3(vector_math_64.Vector3.new(x2, y2, 0.0));
        this[_endToCenterParameters](0.0, 0.0, tr._get(0), tr._get(1), large, sweep, rx, ry);
      } else {
        this[_endToCenterParameters](x1, y1, x2, y2, large, sweep, rx, ry);
      }
    }
    drawShape(d) {
      let proxy = new graphics._PathProxy.new(this);
      path_parsing.writeSvgPathDataToPath(d, proxy);
    }
    static shapeBoundingBox(d) {
      let proxy = new graphics._PathBBProxy.new();
      path_parsing.writeSvgPathDataToPath(d, proxy);
      return proxy.box;
    }
    setLineCap(cap) {
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("setLineCap " + dart.str(cap));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 754, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('setLineCap $cap');\n      }\n      return true;\n    }()");
      this[_buf$].putString(dart.str(cap.index) + " J\n");
    }
    setLineJoin(join) {
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("setLineJoin " + dart.str(join));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 766, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('setLineJoin $join');\n      }\n      return true;\n    }()");
      this[_buf$].putString(dart.str(join.index) + " j\n");
    }
    setLineWidth(width) {
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("setLineWidth " + dart.str(width));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 778, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('setLineWidth $width');\n      }\n      return true;\n    }()");
      new data_types.PdfNum.new(width).output(this[_buf$]);
      this[_buf$].putString(" w\n");
    }
    setMiterLimit(limit) {
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("setMiterLimit " + dart.str(limit));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 791, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('setMiterLimit $limit');\n      }\n      return true;\n    }()");
      if (!(limit >= 1.0)) dart.assertFailed(null, I[41], 798, 12, "limit >= 1.0");
      new data_types.PdfNum.new(limit).output(this[_buf$]);
      this[_buf$].putString(" M\n");
    }
    setLineDashPattern(array = C[260] || CT.C260, phase = 0) {
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("setLineDashPattern " + dart.str(array) + " phase:" + dart.str(phase));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 808, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('setLineDashPattern $array phase:$phase');\n      }\n      return true;\n    }()");
      data_types.PdfArray.fromNum(array).output(this[_buf$]);
      this[_buf$].putString(" " + dart.str(phase) + " d\n");
    }
    markContentBegin(tag) {
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("markContentBegin");
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 820, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('markContentBegin');\n      }\n      return true;\n    }()");
      tag.output(this[_buf$]);
      this[_buf$].putString(" BMC\n");
    }
    markContentEnd() {
      if (!dart.fn(() => {
        if (this[_page$].pdfDocument.verbose) {
          this[_buf$].putComment("markContentEnd");
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[41], 832, 12, "() {\n      if (_page.pdfDocument.verbose) {\n        _buf.putComment('markContentEnd');\n      }\n      return true;\n    }()");
      this[_buf$].putString("EMC\n");
    }
  };
  (graphics.PdfGraphics.new = function(_page, _buf) {
    this[__PdfGraphics__context] = null;
    this[_contextQueue] = new (T$.ListQueueOf_PdfGraphicsContext()).new();
    this[_page$] = _page;
    this[_buf$] = _buf;
    this[_context] = new graphics._PdfGraphicsContext.new({ctm: vector_math_64.Matrix4.identity()});
  }).prototype = graphics.PdfGraphics.prototype;
  dart.addTypeTests(graphics.PdfGraphics);
  dart.addTypeCaches(graphics.PdfGraphics);
  dart.setMethodSignature(graphics.PdfGraphics, () => ({
    __proto__: dart.getMethods(graphics.PdfGraphics.__proto__),
    fillPath: dart.fnType(dart.void, [], {evenOdd: core.bool}, {}),
    strokePath: dart.fnType(dart.void, [], {close: core.bool}, {}),
    closePath: dart.fnType(dart.void, []),
    clipPath: dart.fnType(dart.void, [], {end: core.bool, evenOdd: core.bool}, {}),
    fillAndStrokePath: dart.fnType(dart.void, [], {close: core.bool, evenOdd: core.bool}, {}),
    applyShader: dart.fnType(dart.void, [shading.PdfShading]),
    restoreContext: dart.fnType(dart.void, []),
    saveContext: dart.fnType(dart.void, []),
    drawImage: dart.fnType(dart.void, [image$0.PdfImage, core.double, core.double], [dart.nullable(core.double), dart.nullable(core.double)]),
    drawLine: dart.fnType(dart.void, [core.double, core.double, core.double, core.double]),
    drawEllipse: dart.fnType(dart.void, [core.double, core.double, core.double, core.double], {clockwise: core.bool}, {}),
    drawRect: dart.fnType(dart.void, [core.double, core.double, core.double, core.double]),
    drawBox: dart.fnType(dart.void, [rect.PdfRect]),
    drawRRect: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double, core.double]),
    setFont: dart.fnType(dart.void, [font.PdfFont, core.double], {charSpace: dart.nullable(core.double), mode: dart.nullable(graphics.PdfTextRenderingMode), rise: dart.nullable(core.double), scale: dart.nullable(core.double), wordSpace: dart.nullable(core.double)}, {}),
    drawString: dart.fnType(dart.void, [font.PdfFont, core.double, core.String, core.double, core.double], {charSpace: core.double, mode: graphics.PdfTextRenderingMode, rise: core.double, scale: core.double, wordSpace: core.double}, {}),
    reset: dart.fnType(dart.void, []),
    setColor: dart.fnType(dart.void, [dart.nullable(color$.PdfColor)]),
    setFillColor: dart.fnType(dart.void, [dart.nullable(color$.PdfColor)]),
    setStrokeColor: dart.fnType(dart.void, [dart.nullable(color$.PdfColor)]),
    setFillPattern: dart.fnType(dart.void, [pattern.PdfPattern]),
    setStrokePattern: dart.fnType(dart.void, [pattern.PdfPattern]),
    setGraphicState: dart.fnType(dart.void, [graphic_state.PdfGraphicState]),
    setTransform: dart.fnType(dart.void, [vector_math_64.Matrix4]),
    getTransform: dart.fnType(vector_math_64.Matrix4, []),
    lineTo: dart.fnType(dart.void, [core.double, core.double]),
    moveTo: dart.fnType(dart.void, [core.double, core.double]),
    curveTo: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double, core.double]),
    [_vectorAngle]: dart.fnType(core.double, [core.double, core.double, core.double, core.double]),
    [_endToCenterParameters]: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.bool, core.bool, core.double, core.double]),
    [_bezierArcFromCentre]: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double, core.double]),
    bezierArc: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double, core.double], {large: core.bool, phi: core.double, sweep: core.bool}, {}),
    drawShape: dart.fnType(dart.void, [core.String]),
    setLineCap: dart.fnType(dart.void, [graphics.PdfLineCap]),
    setLineJoin: dart.fnType(dart.void, [graphics.PdfLineJoin]),
    setLineWidth: dart.fnType(dart.void, [core.double]),
    setMiterLimit: dart.fnType(dart.void, [core.double]),
    setLineDashPattern: dart.fnType(dart.void, [], [core.List$(core.num), core.int]),
    markContentBegin: dart.fnType(dart.void, [data_types.PdfName]),
    markContentEnd: dart.fnType(dart.void, [])
  }));
  dart.setStaticMethodSignature(graphics.PdfGraphics, () => ['shapeBoundingBox']);
  dart.setGetterSignature(graphics.PdfGraphics, () => ({
    __proto__: dart.getGetters(graphics.PdfGraphics.__proto__),
    [_context]: graphics._PdfGraphicsContext,
    defaultFont: dart.nullable(font.PdfFont)
  }));
  dart.setSetterSignature(graphics.PdfGraphics, () => ({
    __proto__: dart.getSetters(graphics.PdfGraphics.__proto__),
    [_context]: graphics._PdfGraphicsContext
  }));
  dart.setLibraryUri(graphics.PdfGraphics, I[40]);
  dart.setFieldSignature(graphics.PdfGraphics, () => ({
    __proto__: dart.getFields(graphics.PdfGraphics.__proto__),
    [__PdfGraphics__context]: dart.fieldType(dart.nullable(graphics._PdfGraphicsContext)),
    [_contextQueue]: dart.finalFieldType(collection.Queue$(graphics._PdfGraphicsContext)),
    [_page$]: dart.finalFieldType(graphic_stream.PdfGraphicStream),
    [_buf$]: dart.finalFieldType(stream.PdfStream)
  }));
  dart.setStaticFieldSignature(graphics.PdfGraphics, () => ['_m4']);
  dart.defineLazy(graphics.PdfGraphics, {
    /*graphics.PdfGraphics._m4*/get _m4() {
      return 0.551784;
    }
  }, false);
  graphics._PathProxy = class _PathProxy extends path_parsing.PathProxy {
    static ['_#new#tearOff'](canvas) {
      return new graphics._PathProxy.new(canvas);
    }
    close() {
      this.canvas.closePath();
    }
    cubicTo(x1, y1, x2, y2, x3, y3) {
      this.canvas.curveTo(x1, y1, x2, y2, x3, y3);
    }
    lineTo(x, y) {
      this.canvas.lineTo(x, y);
    }
    moveTo(x, y) {
      this.canvas.moveTo(x, y);
    }
  };
  (graphics._PathProxy.new = function(canvas) {
    this.canvas = canvas;
    ;
  }).prototype = graphics._PathProxy.prototype;
  dart.addTypeTests(graphics._PathProxy);
  dart.addTypeCaches(graphics._PathProxy);
  dart.setMethodSignature(graphics._PathProxy, () => ({
    __proto__: dart.getMethods(graphics._PathProxy.__proto__),
    close: dart.fnType(dart.void, []),
    cubicTo: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double, core.double]),
    lineTo: dart.fnType(dart.void, [core.double, core.double]),
    moveTo: dart.fnType(dart.void, [core.double, core.double])
  }));
  dart.setLibraryUri(graphics._PathProxy, I[40]);
  dart.setFieldSignature(graphics._PathProxy, () => ({
    __proto__: dart.getFields(graphics._PathProxy.__proto__),
    canvas: dart.finalFieldType(graphics.PdfGraphics)
  }));
  var _xMin = dart.privateName(graphics, "_xMin");
  var _yMin = dart.privateName(graphics, "_yMin");
  var _xMax = dart.privateName(graphics, "_xMax");
  var _yMax = dart.privateName(graphics, "_yMax");
  var _pX = dart.privateName(graphics, "_pX");
  var _pY = dart.privateName(graphics, "_pY");
  var _updateMinMax = dart.privateName(graphics, "_updateMinMax");
  graphics._PathBBProxy = class _PathBBProxy extends path_parsing.PathProxy {
    static ['_#new#tearOff']() {
      return new graphics._PathBBProxy.new();
    }
    get box() {
      if (this[_xMin] > this[_xMax] || this[_yMin] > this[_yMax]) {
        return rect.PdfRect.zero;
      }
      return rect.PdfRect.fromLTRB(this[_xMin], this[_yMin], this[_xMax], this[_yMax]);
    }
    close() {
    }
    cubicTo(x1, y1, x2, y2, x3, y3) {
      let tvalues = T$.JSArrayOfdouble().of([]);
      let a = null;
      let b = null;
      let c = null;
      let t = null;
      let t1 = null;
      let t2 = null;
      let b2ac = null;
      let sqrtb2ac = null;
      for (let i = 0; i < 2; i = i + 1) {
        if (i === 0) {
          b = 6 * this[_pX] - 12 * x1 + 6 * x2;
          a = -3 * this[_pX] + 9 * x1 - 9 * x2 + 3 * x3;
          c = 3 * x1 - 3 * this[_pX];
        } else {
          b = 6 * this[_pY] - 12 * y1 + 6 * y2;
          a = -3 * this[_pY] + 9 * y1 - 9 * y2 + 3 * y3;
          c = 3 * y1 - 3 * this[_pY];
        }
        if (a[$abs]() < 1e-12) {
          if (b[$abs]() < 1e-12) {
            continue;
          }
          t = -c / b;
          if (0 < t && t < 1) {
            tvalues[$add](t);
          }
          continue;
        }
        b2ac = b * b - 4 * c * a;
        if (b2ac < 0) {
          if (b2ac[$abs]() < 1e-12) {
            t = -b / (2 * a);
            if (0 < t && t < 1) {
              tvalues[$add](t);
            }
          }
          continue;
        }
        sqrtb2ac = math.sqrt(b2ac);
        t1 = (-b + sqrtb2ac) / (2 * a);
        if (0 < t1 && t1 < 1) {
          tvalues[$add](t1);
        }
        t2 = (-b - sqrtb2ac) / (2 * a);
        if (0 < t2 && t2 < 1) {
          tvalues[$add](t2);
        }
      }
      for (let t of tvalues) {
        let mt = 1 - t;
        this[_updateMinMax](mt * mt * mt * this[_pX] + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3, mt * mt * mt * this[_pY] + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3);
      }
      this[_updateMinMax](this[_pX], this[_pY]);
      this[_updateMinMax](x3, y3);
      this[_pX] = x3;
      this[_pY] = y3;
    }
    lineTo(x, y) {
      this[_pX] = x;
      this[_pY] = y;
      this[_updateMinMax](x, y);
    }
    moveTo(x, y) {
      this[_pX] = x;
      this[_pY] = y;
      this[_updateMinMax](x, y);
    }
    [_updateMinMax](x, y) {
      this[_xMin] = math.min(core.double, this[_xMin], x);
      this[_yMin] = math.min(core.double, this[_yMin], y);
      this[_xMax] = math.max(core.double, this[_xMax], x);
      this[_yMax] = math.max(core.double, this[_yMax], y);
    }
  };
  (graphics._PathBBProxy.new = function() {
    this[_xMin] = 1 / 0;
    this[_yMin] = 1 / 0;
    this[_xMax] = -1 / 0;
    this[_yMax] = -1 / 0;
    this[_pX] = 0.0;
    this[_pY] = 0.0;
    ;
  }).prototype = graphics._PathBBProxy.prototype;
  dart.addTypeTests(graphics._PathBBProxy);
  dart.addTypeCaches(graphics._PathBBProxy);
  dart.setMethodSignature(graphics._PathBBProxy, () => ({
    __proto__: dart.getMethods(graphics._PathBBProxy.__proto__),
    close: dart.fnType(dart.void, []),
    cubicTo: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double, core.double]),
    lineTo: dart.fnType(dart.void, [core.double, core.double]),
    moveTo: dart.fnType(dart.void, [core.double, core.double]),
    [_updateMinMax]: dart.fnType(dart.void, [core.double, core.double])
  }));
  dart.setGetterSignature(graphics._PathBBProxy, () => ({
    __proto__: dart.getGetters(graphics._PathBBProxy.__proto__),
    box: rect.PdfRect
  }));
  dart.setLibraryUri(graphics._PathBBProxy, I[40]);
  dart.setFieldSignature(graphics._PathBBProxy, () => ({
    __proto__: dart.getFields(graphics._PathBBProxy.__proto__),
    [_xMin]: dart.fieldType(core.double),
    [_yMin]: dart.fieldType(core.double),
    [_xMax]: dart.fieldType(core.double),
    [_yMax]: dart.fieldType(core.double),
    [_pX]: dart.fieldType(core.double),
    [_pY]: dart.fieldType(core.double)
  }));
  var document$2 = dart.privateName(smask, "PdfSoftMask.document");
  var __PdfSoftMask__mask = dart.privateName(smask, "_#PdfSoftMask#_mask");
  var _graphics = dart.privateName(smask, "_graphics");
  var _tr = dart.privateName(smask, "_tr");
  var _mask = dart.privateName(smask, "_mask");
  smask.PdfSoftMask = class PdfSoftMask extends core.Object {
    get document() {
      return this[document$2];
    }
    set document(value) {
      super.document = value;
    }
    static ['_#new#tearOff'](document, opts) {
      let boundingBox = opts && 'boundingBox' in opts ? opts.boundingBox : null;
      let isolated = opts && 'isolated' in opts ? opts.isolated : false;
      let knockout = opts && 'knockout' in opts ? opts.knockout : false;
      let invert = opts && 'invert' in opts ? opts.invert : false;
      return new smask.PdfSoftMask.new(document, {boundingBox: boundingBox, isolated: isolated, knockout: knockout, invert: invert});
    }
    get [_mask]() {
      let t42;
      t42 = this[__PdfSoftMask__mask];
      return t42 == null ? dart.throw(new _internal.LateError.fieldNI("_mask")) : t42;
    }
    set [_mask](library$32package$58pdf$47src$47pdf$47obj$47smask$46dart$58$58_mask$35param) {
      this[__PdfSoftMask__mask] = library$32package$58pdf$47src$47pdf$47obj$47smask$46dart$58$58_mask$35param;
    }
    getGraphics() {
      return this[_graphics];
    }
    toString() {
      return dart.str(this[$runtimeType]);
    }
    output() {
      let params = T$.PdfDictOfPdfDataType().new(new (T$.IdentityMapOfString$PdfDataType()).from(["/S", C[261] || CT.C261, "/G", this[_mask].ref()]));
      if (this[_tr] != null) {
        params._set("/TR", dart.nullCheck(this[_tr]).ref());
      }
      return params;
    }
  };
  (smask.PdfSoftMask.new = function(document, opts) {
    let boundingBox = opts && 'boundingBox' in opts ? opts.boundingBox : null;
    let isolated = opts && 'isolated' in opts ? opts.isolated : false;
    let knockout = opts && 'knockout' in opts ? opts.knockout : false;
    let invert = opts && 'invert' in opts ? opts.invert : false;
    this[__PdfSoftMask__mask] = null;
    this[_graphics] = null;
    this[_tr] = null;
    this[document$2] = document;
    this[_mask] = new graphic_stream.PdfGraphicXObject.new(this.document, "/Form");
    this[_mask].params._set("/BBox", data_types.PdfArray.fromNum(T$.JSArrayOfnum().of([boundingBox.x, boundingBox.y, boundingBox.width, boundingBox.height])));
    if (isolated) {
      this[_mask].params._set("/I", C[232] || CT.C232);
    }
    if (knockout) {
      this[_mask].params._set("/K", C[232] || CT.C232);
    }
    this[_graphics] = new graphics.PdfGraphics.new(this[_mask], this[_mask].buf);
    if (invert) {
      this[_tr] = new $function.PdfFunction.new(this.document, {data: T$.JSArrayOfint().of([255, 0])});
    }
  }).prototype = smask.PdfSoftMask.prototype;
  dart.addTypeTests(smask.PdfSoftMask);
  dart.addTypeCaches(smask.PdfSoftMask);
  dart.setMethodSignature(smask.PdfSoftMask, () => ({
    __proto__: dart.getMethods(smask.PdfSoftMask.__proto__),
    getGraphics: dart.fnType(dart.nullable(graphics.PdfGraphics), []),
    output: dart.fnType(data_types.PdfDict$(data_types.PdfDataType), [])
  }));
  dart.setGetterSignature(smask.PdfSoftMask, () => ({
    __proto__: dart.getGetters(smask.PdfSoftMask.__proto__),
    [_mask]: graphic_stream.PdfGraphicXObject
  }));
  dart.setSetterSignature(smask.PdfSoftMask, () => ({
    __proto__: dart.getSetters(smask.PdfSoftMask.__proto__),
    [_mask]: graphic_stream.PdfGraphicXObject
  }));
  dart.setLibraryUri(smask.PdfSoftMask, I[42]);
  dart.setFieldSignature(smask.PdfSoftMask, () => ({
    __proto__: dart.getFields(smask.PdfSoftMask.__proto__),
    document: dart.finalFieldType(document$.PdfDocument),
    [__PdfSoftMask__mask]: dart.fieldType(dart.nullable(graphic_stream.PdfGraphicXObject)),
    [_graphics]: dart.fieldType(dart.nullable(graphics.PdfGraphics)),
    [_tr]: dart.fieldType(dart.nullable($function.PdfBaseFunction))
  }));
  dart.defineExtensionMethods(smask.PdfSoftMask, ['toString']);
  $function.PdfBaseFunction = class PdfBaseFunction extends object_dict.PdfObjectDict {
    static colorsAndStops(pdfDocument, colors, stops = null) {
      if (stops == null || stops[$isEmpty]) {
        return $function.PdfFunction.fromColors(pdfDocument, colors);
      }
      let _colors = T$.ListOfPdfColor().from(colors);
      let _stops = T$.ListOfdouble().from(stops);
      let fn = T$.JSArrayOfPdfFunction().of([]);
      let lc = _colors[$first];
      if (_stops[$_get](0) > 0) {
        _colors[$insert](0, lc);
        _stops[$insert](0, 0.0);
      }
      if (_stops[$last] < 1) {
        _colors[$add](_colors[$last]);
        _stops[$add](1.0);
      }
      if (_stops[$length] !== _colors[$length]) {
        dart.throw(core.Exception.new("The number of colors in a gradient must match the number of stops"));
      }
      for (let c of _colors[$sublist](1)) {
        fn[$add]($function.PdfFunction.fromColors(pdfDocument, T$.JSArrayOfPdfColor().of([lc, c])));
        lc = c;
      }
      return new $function.PdfStitchingFunction.new(pdfDocument, {functions: fn, bounds: _stops[$sublist](1, _stops[$length] - 1), domainStart: 0.0, domainEnd: 1.0});
    }
    static ['_#colorsAndStops#tearOff'](pdfDocument, colors, stops = null) {
      return $function.PdfBaseFunction.colorsAndStops(pdfDocument, colors, stops);
    }
  };
  ($function.PdfBaseFunction.new = function(pdfDocument) {
    $function.PdfBaseFunction.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = $function.PdfBaseFunction.prototype;
  dart.addTypeTests($function.PdfBaseFunction);
  dart.addTypeCaches($function.PdfBaseFunction);
  dart.setStaticMethodSignature($function.PdfBaseFunction, () => ['colorsAndStops']);
  dart.setLibraryUri($function.PdfBaseFunction, I[43]);
  var data$0 = dart.privateName($function, "PdfFunction.data");
  var bitsPerSample$ = dart.privateName($function, "PdfFunction.bitsPerSample");
  var order$ = dart.privateName($function, "PdfFunction.order");
  var domain$ = dart.privateName($function, "PdfFunction.domain");
  var range$ = dart.privateName($function, "PdfFunction.range");
  $function.PdfFunction = class PdfFunction extends object_stream.PdfObjectStream {
    get data() {
      return this[data$0];
    }
    set data(value) {
      super.data = value;
    }
    get bitsPerSample() {
      return this[bitsPerSample$];
    }
    set bitsPerSample(value) {
      super.bitsPerSample = value;
    }
    get order() {
      return this[order$];
    }
    set order(value) {
      super.order = value;
    }
    get domain() {
      return this[domain$];
    }
    set domain(value) {
      super.domain = value;
    }
    get range() {
      return this[range$];
    }
    set range(value) {
      super.range = value;
    }
    static ['_#new#tearOff'](pdfDocument, opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let bitsPerSample = opts && 'bitsPerSample' in opts ? opts.bitsPerSample : 8;
      let order = opts && 'order' in opts ? opts.order : 1;
      let domain = opts && 'domain' in opts ? opts.domain : C[262] || CT.C262;
      let range = opts && 'range' in opts ? opts.range : C[262] || CT.C262;
      return new $function.PdfFunction.new(pdfDocument, {data: data, bitsPerSample: bitsPerSample, order: order, domain: domain, range: range});
    }
    static fromColors(pdfDocument, colors) {
      let data = T$.JSArrayOfint().of([]);
      for (let color of colors) {
        data[$add]((dart.nullCheck(color).red * 255.0)[$round]() & 255);
        data[$add]((color.green * 255.0)[$round]() & 255);
        data[$add]((color.blue * 255.0)[$round]() & 255);
      }
      return new $function.PdfFunction.new(pdfDocument, {order: 3, data: data, range: C[263] || CT.C263});
    }
    static ['_#fromColors#tearOff'](pdfDocument, colors) {
      return $function.PdfFunction.fromColors(pdfDocument, colors);
    }
    prepare() {
      this.buf.putBytes(dart.nullCheck(this.data));
      super.prepare();
      this.params._set("/FunctionType", C[233] || CT.C233);
      this.params._set("/BitsPerSample", new data_types.PdfNum.new(this.bitsPerSample));
      this.params._set("/Order", new data_types.PdfNum.new(this.order));
      this.params._set("/Domain", data_types.PdfArray.fromNum(this.domain));
      this.params._set("/Range", data_types.PdfArray.fromNum(this.range));
      this.params._set("/Size", data_types.PdfArray.fromNum(T$.JSArrayOfint().of([(dart.nullCheck(this.data)[$length] / this.order)[$truncate]()])));
    }
    toString() {
      return dart.str(this[$runtimeType]) + " " + dart.str(this.bitsPerSample) + " " + dart.str(this.order) + " " + dart.str(this.data);
    }
  };
  ($function.PdfFunction.new = function(pdfDocument, opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    let bitsPerSample = opts && 'bitsPerSample' in opts ? opts.bitsPerSample : 8;
    let order = opts && 'order' in opts ? opts.order : 1;
    let domain = opts && 'domain' in opts ? opts.domain : C[262] || CT.C262;
    let range = opts && 'range' in opts ? opts.range : C[262] || CT.C262;
    this[data$0] = data;
    this[bitsPerSample$] = bitsPerSample;
    this[order$] = order;
    this[domain$] = domain;
    this[range$] = range;
    $function.PdfFunction.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = $function.PdfFunction.prototype;
  dart.addTypeTests($function.PdfFunction);
  dart.addTypeCaches($function.PdfFunction);
  $function.PdfFunction[dart.implements] = () => [$function.PdfBaseFunction];
  dart.setStaticMethodSignature($function.PdfFunction, () => ['fromColors']);
  dart.setLibraryUri($function.PdfFunction, I[43]);
  dart.setFieldSignature($function.PdfFunction, () => ({
    __proto__: dart.getFields($function.PdfFunction.__proto__),
    data: dart.finalFieldType(dart.nullable(core.List$(core.int))),
    bitsPerSample: dart.finalFieldType(core.int),
    order: dart.finalFieldType(core.int),
    domain: dart.finalFieldType(core.List$(core.num)),
    range: dart.finalFieldType(core.List$(core.num))
  }));
  dart.defineExtensionMethods($function.PdfFunction, ['toString']);
  var functions$ = dart.privateName($function, "PdfStitchingFunction.functions");
  var bounds$ = dart.privateName($function, "PdfStitchingFunction.bounds");
  var domainStart$ = dart.privateName($function, "PdfStitchingFunction.domainStart");
  var domainEnd$ = dart.privateName($function, "PdfStitchingFunction.domainEnd");
  $function.PdfStitchingFunction = class PdfStitchingFunction extends $function.PdfBaseFunction {
    get functions() {
      return this[functions$];
    }
    set functions(value) {
      super.functions = value;
    }
    get bounds() {
      return this[bounds$];
    }
    set bounds(value) {
      super.bounds = value;
    }
    get domainStart() {
      return this[domainStart$];
    }
    set domainStart(value) {
      super.domainStart = value;
    }
    get domainEnd() {
      return this[domainEnd$];
    }
    set domainEnd(value) {
      super.domainEnd = value;
    }
    static ['_#new#tearOff'](pdfDocument, opts) {
      let functions = opts && 'functions' in opts ? opts.functions : null;
      let bounds = opts && 'bounds' in opts ? opts.bounds : null;
      let domainStart = opts && 'domainStart' in opts ? opts.domainStart : 0;
      let domainEnd = opts && 'domainEnd' in opts ? opts.domainEnd : 1;
      return new $function.PdfStitchingFunction.new(pdfDocument, {functions: functions, bounds: bounds, domainStart: domainStart, domainEnd: domainEnd});
    }
    prepare() {
      super.prepare();
      this.params._set("/FunctionType", C[264] || CT.C264);
      this.params._set("/Functions", data_types.PdfArray.fromObjects(this.functions));
      this.params._set("/Order", C[264] || CT.C264);
      this.params._set("/Domain", data_types.PdfArray.fromNum(T$.JSArrayOfnum().of([this.domainStart, this.domainEnd])));
      this.params._set("/Bounds", data_types.PdfArray.fromNum(this.bounds));
      this.params._set("/Encode", data_types.PdfArray.fromNum(T$.ListOfint().generate(this.functions[$length] * 2, dart.fn(i => i[$modulo](2), T$.intToint()))));
    }
    toString() {
      return dart.str(this[$runtimeType]) + " " + dart.str(this.domainStart) + " " + dart.str(this.bounds) + " " + dart.str(this.domainEnd) + " " + dart.str(this.functions);
    }
  };
  ($function.PdfStitchingFunction.new = function(pdfDocument, opts) {
    let functions = opts && 'functions' in opts ? opts.functions : null;
    let bounds = opts && 'bounds' in opts ? opts.bounds : null;
    let domainStart = opts && 'domainStart' in opts ? opts.domainStart : 0;
    let domainEnd = opts && 'domainEnd' in opts ? opts.domainEnd : 1;
    this[functions$] = functions;
    this[bounds$] = bounds;
    this[domainStart$] = domainStart;
    this[domainEnd$] = domainEnd;
    $function.PdfStitchingFunction.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = $function.PdfStitchingFunction.prototype;
  dart.addTypeTests($function.PdfStitchingFunction);
  dart.addTypeCaches($function.PdfStitchingFunction);
  dart.setLibraryUri($function.PdfStitchingFunction, I[43]);
  dart.setFieldSignature($function.PdfStitchingFunction, () => ({
    __proto__: dart.getFields($function.PdfStitchingFunction.__proto__),
    functions: dart.finalFieldType(core.List$($function.PdfFunction)),
    bounds: dart.finalFieldType(core.List$(core.double)),
    domainStart: dart.finalFieldType(core.double),
    domainEnd: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods($function.PdfStitchingFunction, ['toString']);
  const value$2 = PdfBool_value;
  data_types.PdfBool = class PdfBool extends data_types.PdfDataType {
    get value() {
      return this[value$2];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](value) {
      return new data_types.PdfBool.new(value);
    }
    output(s, indent = null) {
      s.putString(this.value ? "true" : "false");
    }
    _equals(other) {
      if (other == null) return false;
      if (data_types.PdfBool.is(other)) {
        return this.value === other.value;
      }
      return false;
    }
    get hashCode() {
      return this.value[$hashCode];
    }
  };
  (data_types.PdfBool.new = function(value) {
    this[value$2] = value;
    data_types.PdfBool.__proto__.new.call(this);
    ;
  }).prototype = data_types.PdfBool.prototype;
  dart.addTypeTests(data_types.PdfBool);
  dart.addTypeCaches(data_types.PdfBool);
  dart.setMethodSignature(data_types.PdfBool, () => ({
    __proto__: dart.getMethods(data_types.PdfBool.__proto__),
    output: dart.fnType(dart.void, [stream.PdfStream], [dart.nullable(core.int)])
  }));
  dart.setLibraryUri(data_types.PdfBool, I[5]);
  dart.setFieldSignature(data_types.PdfBool, () => ({
    __proto__: dart.getFields(data_types.PdfBool.__proto__),
    value: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(data_types.PdfBool, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfBool, ['hashCode']);
  const value$3 = PdfNum_value;
  data_types.PdfNum = class PdfNum extends data_types.PdfDataType {
    get value() {
      return this[value$3];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](value) {
      return new data_types.PdfNum.new(value);
    }
    output(s, indent = null) {
      if (core.int.is(this.value)) {
        s.putString(this.value[$toInt]()[$toString]());
      } else {
        let r = this.value[$toStringAsFixed](5);
        if (r[$contains](".")) {
          let n = r.length - 1;
          while (r[$_get](n) === "0") {
            n = n - 1;
          }
          if (r[$_get](n) === ".") {
            n = n - 1;
          }
          r = r[$substring](0, n + 1);
        }
        s.putString(r);
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (data_types.PdfNum.is(other)) {
        return this.value === other.value;
      }
      return false;
    }
    get hashCode() {
      return this.value[$hashCode];
    }
  };
  (data_types.PdfNum.new = function(value) {
    this[value$3] = value;
    if (!(value !== 1 / 0)) dart.assertFailed(null, I[44], 78, 16, "value != double.infinity");
    if (!(value !== 0 / 0)) dart.assertFailed(null, I[44], 79, 16, "value != double.nan");
    if (!(value !== -1 / 0)) dart.assertFailed(null, I[44], 80, 16, "value != double.negativeInfinity");
    data_types.PdfNum.__proto__.new.call(this);
    ;
  }).prototype = data_types.PdfNum.prototype;
  dart.addTypeTests(data_types.PdfNum);
  dart.addTypeCaches(data_types.PdfNum);
  dart.setMethodSignature(data_types.PdfNum, () => ({
    __proto__: dart.getMethods(data_types.PdfNum.__proto__),
    output: dart.fnType(dart.void, [stream.PdfStream], [dart.nullable(core.int)])
  }));
  dart.setLibraryUri(data_types.PdfNum, I[5]);
  dart.setFieldSignature(data_types.PdfNum, () => ({
    __proto__: dart.getFields(data_types.PdfNum.__proto__),
    value: dart.finalFieldType(core.num)
  }));
  dart.setStaticFieldSignature(data_types.PdfNum, () => ['precision']);
  dart.defineExtensionMethods(data_types.PdfNum, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfNum, ['hashCode']);
  dart.defineLazy(data_types.PdfNum, {
    /*data_types.PdfNum.precision*/get precision() {
      return 5;
    }
  }, false);
  var values$1 = dart.privateName(data_types, "PdfNumList.values");
  data_types.PdfNumList = class PdfNumList extends data_types.PdfDataType {
    get values() {
      return this[values$1];
    }
    set values(value) {
      super.values = value;
    }
    static ['_#new#tearOff'](values) {
      return new data_types.PdfNumList.new(values);
    }
    output(s, indent = null) {
      for (let n = 0; n < this.values[$length]; n = n + 1) {
        if (n > 0) {
          s.putByte(32);
        }
        new data_types.PdfNum.new(this.values[$_get](n)).output(s, indent);
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (data_types.PdfNumList.is(other)) {
        return this.values[$_equals](other.values);
      }
      return false;
    }
    get hashCode() {
      return this.values[$hashCode];
    }
  };
  (data_types.PdfNumList.new = function(values) {
    this[values$1] = values;
    data_types.PdfNumList.__proto__.new.call(this);
    ;
  }).prototype = data_types.PdfNumList.prototype;
  dart.addTypeTests(data_types.PdfNumList);
  dart.addTypeCaches(data_types.PdfNumList);
  dart.setMethodSignature(data_types.PdfNumList, () => ({
    __proto__: dart.getMethods(data_types.PdfNumList.__proto__),
    output: dart.fnType(dart.void, [stream.PdfStream], [dart.nullable(core.int)])
  }));
  dart.setLibraryUri(data_types.PdfNumList, I[5]);
  dart.setFieldSignature(data_types.PdfNumList, () => ({
    __proto__: dart.getFields(data_types.PdfNumList.__proto__),
    values: dart.finalFieldType(core.List$(core.num))
  }));
  dart.defineExtensionMethods(data_types.PdfNumList, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfNumList, ['hashCode']);
  data_types.PdfStringFormat = class PdfStringFormat extends core._Enum {
    toString() {
      return "PdfStringFormat." + this[_name];
    }
  };
  (data_types.PdfStringFormat.new = function(index, name) {
    data_types.PdfStringFormat.__proto__.new.call(this, index, name);
    ;
  }).prototype = data_types.PdfStringFormat.prototype;
  dart.addTypeTests(data_types.PdfStringFormat);
  dart.addTypeCaches(data_types.PdfStringFormat);
  dart.setLibraryUri(data_types.PdfStringFormat, I[5]);
  dart.setStaticFieldSignature(data_types.PdfStringFormat, () => ['values', 'binary', 'literal']);
  dart.defineExtensionMethods(data_types.PdfStringFormat, ['toString']);
  dart.defineLazy(data_types.PdfStringFormat, {
    /*data_types.PdfStringFormat.values*/get values() {
      return C[265] || CT.C265;
    },
    /*data_types.PdfStringFormat.binary*/get binary() {
      return C[266] || CT.C266;
    },
    /*data_types.PdfStringFormat.literal*/get literal() {
      return C[267] || CT.C267;
    }
  }, false);
  var value$4 = dart.privateName(data_types, "PdfString.value");
  var format$ = dart.privateName(data_types, "PdfString.format");
  var _putTextBytes = dart.privateName(data_types, "_putTextBytes");
  var _codeUnitForDigit = dart.privateName(data_types, "_codeUnitForDigit");
  var _output = dart.privateName(data_types, "_output");
  data_types.PdfString = class PdfString extends data_types.PdfDataType {
    get value() {
      return this[value$4];
    }
    set value(value) {
      super.value = value;
    }
    get format() {
      return this[format$];
    }
    set format(value) {
      super.format = value;
    }
    static ['_#new#tearOff'](value, format = C[267] || CT.C267) {
      return new data_types.PdfString.new(value, format);
    }
    static fromString(value) {
      return new data_types.PdfString.new(data_types.PdfString._string(value), data_types.PdfStringFormat.literal);
    }
    static ['_#fromString#tearOff'](value) {
      return data_types.PdfString.fromString(value);
    }
    static fromStream(value, format = C[267] || CT.C267) {
      return new data_types.PdfString.new(value.output(), format);
    }
    static ['_#fromStream#tearOff'](value, format = C[267] || CT.C267) {
      return data_types.PdfString.fromStream(value, format);
    }
    static fromDate(date) {
      return new data_types.PdfString.new(data_types.PdfString._date(date));
    }
    static ['_#fromDate#tearOff'](date) {
      return data_types.PdfString.fromDate(date);
    }
    static _string(value) {
      try {
        return convert.latin1.encode(value);
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          return _native_typed_data.NativeUint8List.fromList(T$.JSArrayOfint().of([254, 255])[$plus](data_types.PdfString._encodeUtf16be(value)));
        } else
          throw e$;
      }
    }
    static _date(date) {
      let utcDate = date.toUtc();
      let year = utcDate.year[$toString]()[$padLeft](4, "0");
      let month = utcDate.month[$toString]()[$padLeft](2, "0");
      let day = utcDate.day[$toString]()[$padLeft](2, "0");
      let hour = utcDate.hour[$toString]()[$padLeft](2, "0");
      let minute = utcDate.minute[$toString]()[$padLeft](2, "0");
      let second = utcDate.second[$toString]()[$padLeft](2, "0");
      return data_types.PdfString._string("D:" + year + month + day + hour + minute + second + "Z");
    }
    static _encodeUtf16be(str) {
      let encoding = T$.JSArrayOfint().of([]);
      function add(unit) {
        encoding[$add]((unit & 65280) >>> 8);
        encoding[$add]((unit & 255) >>> 0);
      }
      dart.fn(add, T$.intTovoid());
      for (let unit of str[$codeUnits]) {
        if (unit >= 0 && unit < 55296 || unit > 57343 && unit <= 65535) {
          add(unit);
        } else if (unit > 65535 && unit <= 1114111) {
          let base = unit - 65536;
          add(55296 + ((base & 1047552) >>> 10));
          add(56320 + ((base & 1023) >>> 0));
        } else {
          add(65533);
        }
      }
      return encoding;
    }
    [_putTextBytes](s, b) {
      for (let c of b) {
        switch (c) {
          case 10:
            {
              s.putByte(92);
              s.putByte(110);
              break;
            }
          case 13:
            {
              s.putByte(92);
              s.putByte(114);
              break;
            }
          case 9:
            {
              s.putByte(92);
              s.putByte(116);
              break;
            }
          case 8:
            {
              s.putByte(92);
              s.putByte(98);
              break;
            }
          case 12:
            {
              s.putByte(92);
              s.putByte(102);
              break;
            }
          case 40:
            {
              s.putByte(92);
              s.putByte(40);
              break;
            }
          case 41:
            {
              s.putByte(92);
              s.putByte(41);
              break;
            }
          case 92:
            {
              s.putByte(92);
              s.putByte(92);
              break;
            }
          default:
            {
              s.putByte(c);
            }
        }
      }
    }
    [_codeUnitForDigit](digit) {
      return digit < 10 ? digit + 48 : digit + 97 - 10;
    }
    [_output](s, value) {
      switch (this.format) {
        case C[266] || CT.C266:
          {
            s.putByte(60);
            for (let byte of value) {
              s.putByte(this[_codeUnitForDigit]((byte & 240) >> 4));
              s.putByte(this[_codeUnitForDigit](byte & 15));
            }
            s.putByte(62);
            break;
          }
        case C[267] || CT.C267:
          {
            s.putByte(40);
            this[_putTextBytes](s, value);
            s.putByte(41);
            break;
          }
      }
    }
    output(s, indent = null) {
      this[_output](s, this.value);
    }
    _equals(other) {
      if (other == null) return false;
      if (data_types.PdfString.is(other)) {
        return this.value[$_equals](other.value);
      }
      return false;
    }
    get hashCode() {
      return this.value[$hashCode];
    }
  };
  (data_types.PdfString.new = function(value, format = C[267] || CT.C267) {
    this[value$4] = value;
    this[format$] = format;
    data_types.PdfString.__proto__.new.call(this);
    ;
  }).prototype = data_types.PdfString.prototype;
  dart.addTypeTests(data_types.PdfString);
  dart.addTypeCaches(data_types.PdfString);
  dart.setMethodSignature(data_types.PdfString, () => ({
    __proto__: dart.getMethods(data_types.PdfString.__proto__),
    [_putTextBytes]: dart.fnType(dart.void, [stream.PdfStream, core.List$(core.int)]),
    [_codeUnitForDigit]: dart.fnType(core.int, [core.int]),
    [_output]: dart.fnType(dart.void, [stream.PdfStream, typed_data.Uint8List]),
    output: dart.fnType(dart.void, [stream.PdfStream], [dart.nullable(core.int)])
  }));
  dart.setStaticMethodSignature(data_types.PdfString, () => ['fromString', 'fromStream', 'fromDate', '_string', '_date', '_encodeUtf16be']);
  dart.setLibraryUri(data_types.PdfString, I[5]);
  dart.setFieldSignature(data_types.PdfString, () => ({
    __proto__: dart.getFields(data_types.PdfString.__proto__),
    value: dart.finalFieldType(typed_data.Uint8List),
    format: dart.finalFieldType(data_types.PdfStringFormat)
  }));
  dart.defineExtensionMethods(data_types.PdfString, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfString, ['hashCode']);
  var object$1 = dart.privateName(data_types, "PdfSecString.object");
  data_types.PdfSecString = class PdfSecString extends data_types.PdfString {
    get object() {
      return this[object$1];
    }
    set object(value) {
      super.object = value;
    }
    static ['_#new#tearOff'](object, value, format = C[266] || CT.C266) {
      return new data_types.PdfSecString.new(object, value, format);
    }
    static fromString(object, value, format = C[267] || CT.C267) {
      return new data_types.PdfSecString.new(object, data_types.PdfString._string(value), format);
    }
    static ['_#fromString#tearOff'](object, value, format = C[267] || CT.C267) {
      return data_types.PdfSecString.fromString(object, value, format);
    }
    static fromStream(object, value, format = C[267] || CT.C267) {
      return new data_types.PdfSecString.new(object, value.output(), format);
    }
    static ['_#fromStream#tearOff'](object, value, format = C[267] || CT.C267) {
      return data_types.PdfSecString.fromStream(object, value, format);
    }
    static fromDate(object, date) {
      return new data_types.PdfSecString.new(object, data_types.PdfString._date(date), data_types.PdfStringFormat.literal);
    }
    static ['_#fromDate#tearOff'](object, date) {
      return data_types.PdfSecString.fromDate(object, date);
    }
    output(s, indent = null) {
      if (this.object.pdfDocument.encryption == null) {
        return super.output(s, indent);
      }
      let enc = dart.nullCheck(this.object.pdfDocument.encryption).encrypt(this.value, this.object);
      this[_output](s, enc);
    }
  };
  (data_types.PdfSecString.new = function(object, value, format = C[266] || CT.C266) {
    this[object$1] = object;
    data_types.PdfSecString.__proto__.new.call(this, value, format);
    ;
  }).prototype = data_types.PdfSecString.prototype;
  dart.addTypeTests(data_types.PdfSecString);
  dart.addTypeCaches(data_types.PdfSecString);
  dart.setStaticMethodSignature(data_types.PdfSecString, () => ['fromString', 'fromStream', 'fromDate']);
  dart.setLibraryUri(data_types.PdfSecString, I[5]);
  dart.setFieldSignature(data_types.PdfSecString, () => ({
    __proto__: dart.getFields(data_types.PdfSecString.__proto__),
    object: dart.finalFieldType(object.PdfObject$(data_types.PdfDataType))
  }));
  const value$5 = PdfName_value;
  data_types.PdfName = class PdfName extends data_types.PdfDataType {
    get value() {
      return this[value$5];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](value) {
      return new data_types.PdfName.new(value);
    }
    output(s, indent = null) {
      if (!(this.value[$_get](0) === "/")) dart.assertFailed(null, I[44], 369, 12, "value[0] == '/'");
      let bytes = T$.JSArrayOfint().of([]);
      for (let c of this.value[$codeUnits]) {
        if (!(c < 255 && c > 0)) dart.assertFailed(null, I[44], 372, 14, "c < 0xff && c > 0x00");
        if (c < 33 || c > 126 || c === 35 || c === 47 && bytes[$isNotEmpty] || c === 91 || c === 93 || c === 40 || c === 60 || c === 62) {
          bytes[$add](35);
          let x = c[$toRadixString](16)[$padLeft](2, "0");
          bytes[$addAll](x[$codeUnits]);
        } else {
          bytes[$add](c);
        }
      }
      s.putBytes(bytes);
    }
    _equals(other) {
      if (other == null) return false;
      if (data_types.PdfName.is(other)) {
        return this.value === other.value;
      }
      return false;
    }
    get hashCode() {
      return this.value[$hashCode];
    }
  };
  (data_types.PdfName.new = function(value) {
    this[value$5] = value;
    data_types.PdfName.__proto__.new.call(this);
    ;
  }).prototype = data_types.PdfName.prototype;
  dart.addTypeTests(data_types.PdfName);
  dart.addTypeCaches(data_types.PdfName);
  dart.setMethodSignature(data_types.PdfName, () => ({
    __proto__: dart.getMethods(data_types.PdfName.__proto__),
    output: dart.fnType(dart.void, [stream.PdfStream], [dart.nullable(core.int)])
  }));
  dart.setLibraryUri(data_types.PdfName, I[5]);
  dart.setFieldSignature(data_types.PdfName, () => ({
    __proto__: dart.getFields(data_types.PdfName.__proto__),
    value: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(data_types.PdfName, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfName, ['hashCode']);
  data_types.PdfNull = class PdfNull extends data_types.PdfDataType {
    static ['_#new#tearOff']() {
      return new data_types.PdfNull.new();
    }
    output(s, indent = null) {
      s.putString("null");
    }
    _equals(other) {
      if (other == null) return false;
      return data_types.PdfNull.is(other);
    }
    get hashCode() {
      return dart.hashCode(null);
    }
  };
  (data_types.PdfNull.new = function() {
    data_types.PdfNull.__proto__.new.call(this);
    ;
  }).prototype = data_types.PdfNull.prototype;
  dart.addTypeTests(data_types.PdfNull);
  dart.addTypeCaches(data_types.PdfNull);
  dart.setMethodSignature(data_types.PdfNull, () => ({
    __proto__: dart.getMethods(data_types.PdfNull.__proto__),
    output: dart.fnType(dart.void, [stream.PdfStream], [dart.nullable(core.int)])
  }));
  dart.setLibraryUri(data_types.PdfNull, I[5]);
  dart.defineExtensionMethods(data_types.PdfNull, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfNull, ['hashCode']);
  var ser$ = dart.privateName(data_types, "PdfIndirect.ser");
  var gen$ = dart.privateName(data_types, "PdfIndirect.gen");
  data_types.PdfIndirect = class PdfIndirect extends data_types.PdfDataType {
    get ser() {
      return this[ser$];
    }
    set ser(value) {
      super.ser = value;
    }
    get gen() {
      return this[gen$];
    }
    set gen(value) {
      super.gen = value;
    }
    static ['_#new#tearOff'](ser, gen) {
      return new data_types.PdfIndirect.new(ser, gen);
    }
    output(s, indent = null) {
      s.putString(dart.str(this.ser) + " " + dart.str(this.gen) + " R");
    }
    _equals(other) {
      if (other == null) return false;
      if (data_types.PdfIndirect.is(other)) {
        return this.ser === other.ser && this.gen === other.gen;
      }
      return false;
    }
    get hashCode() {
      return this.ser[$hashCode] + this.gen[$hashCode];
    }
  };
  (data_types.PdfIndirect.new = function(ser, gen) {
    this[ser$] = ser;
    this[gen$] = gen;
    data_types.PdfIndirect.__proto__.new.call(this);
    ;
  }).prototype = data_types.PdfIndirect.prototype;
  dart.addTypeTests(data_types.PdfIndirect);
  dart.addTypeCaches(data_types.PdfIndirect);
  dart.setMethodSignature(data_types.PdfIndirect, () => ({
    __proto__: dart.getMethods(data_types.PdfIndirect.__proto__),
    output: dart.fnType(dart.void, [stream.PdfStream], [dart.nullable(core.int)])
  }));
  dart.setLibraryUri(data_types.PdfIndirect, I[5]);
  dart.setFieldSignature(data_types.PdfIndirect, () => ({
    __proto__: dart.getFields(data_types.PdfIndirect.__proto__),
    ser: dart.finalFieldType(core.int),
    gen: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(data_types.PdfIndirect, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfIndirect, ['hashCode']);
  var color$2 = dart.privateName(data_types, "PdfColorType.color");
  data_types.PdfColorType = class PdfColorType extends data_types.PdfDataType {
    get color() {
      return this[color$2];
    }
    set color(value) {
      super.color = value;
    }
    static ['_#new#tearOff'](color) {
      return new data_types.PdfColorType.new(color);
    }
    output(s, indent = null) {
      if (color$.PdfColorCmyk.is(this.color)) {
        let k = color$.PdfColorCmyk.as(this.color);
        data_types.PdfArray.fromNum(T$.JSArrayOfdouble().of([k.cyan, k.magenta, k.yellow, k.black])).output(s, indent);
      } else {
        data_types.PdfArray.fromNum(T$.JSArrayOfdouble().of([this.color.red, this.color.green, this.color.blue])).output(s, indent);
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (data_types.PdfColorType.is(other)) {
        return this.color._equals(other.color);
      }
      return false;
    }
    get hashCode() {
      return this.color.hashCode;
    }
  };
  (data_types.PdfColorType.new = function(color) {
    this[color$2] = color;
    data_types.PdfColorType.__proto__.new.call(this);
    ;
  }).prototype = data_types.PdfColorType.prototype;
  dart.addTypeTests(data_types.PdfColorType);
  dart.addTypeCaches(data_types.PdfColorType);
  dart.setMethodSignature(data_types.PdfColorType, () => ({
    __proto__: dart.getMethods(data_types.PdfColorType.__proto__),
    output: dart.fnType(dart.void, [stream.PdfStream], [dart.nullable(core.int)])
  }));
  dart.setLibraryUri(data_types.PdfColorType, I[5]);
  dart.setFieldSignature(data_types.PdfColorType, () => ({
    __proto__: dart.getFields(data_types.PdfColorType.__proto__),
    color: dart.finalFieldType(color$.PdfColor)
  }));
  dart.defineExtensionMethods(data_types.PdfColorType, ['_equals']);
  dart.defineExtensionAccessors(data_types.PdfColorType, ['hashCode']);
  dart.defineLazy(data_types, {
    /*data_types._kIndentSize*/get _kIndentSize() {
      return 2;
    }
  }, false);
  graphic_state.PdfBlendMode = class PdfBlendMode extends core._Enum {
    toString() {
      return "PdfBlendMode." + this[_name];
    }
  };
  (graphic_state.PdfBlendMode.new = function(index, name) {
    graphic_state.PdfBlendMode.__proto__.new.call(this, index, name);
    ;
  }).prototype = graphic_state.PdfBlendMode.prototype;
  dart.addTypeTests(graphic_state.PdfBlendMode);
  dart.addTypeCaches(graphic_state.PdfBlendMode);
  dart.setLibraryUri(graphic_state.PdfBlendMode, I[45]);
  dart.setStaticFieldSignature(graphic_state.PdfBlendMode, () => ['values', 'normal', 'multiply', 'screen', 'overlay', 'darken', 'lighten', 'colorDodge', 'colorBurn', 'hardLight', 'softLight', 'difference', 'exclusion', 'hue', 'saturation', 'color', 'luminosity']);
  dart.defineExtensionMethods(graphic_state.PdfBlendMode, ['toString']);
  dart.defineLazy(graphic_state.PdfBlendMode, {
    /*graphic_state.PdfBlendMode.values*/get values() {
      return C[268] || CT.C268;
    },
    /*graphic_state.PdfBlendMode.normal*/get normal() {
      return C[269] || CT.C269;
    },
    /*graphic_state.PdfBlendMode.multiply*/get multiply() {
      return C[270] || CT.C270;
    },
    /*graphic_state.PdfBlendMode.screen*/get screen() {
      return C[271] || CT.C271;
    },
    /*graphic_state.PdfBlendMode.overlay*/get overlay() {
      return C[272] || CT.C272;
    },
    /*graphic_state.PdfBlendMode.darken*/get darken() {
      return C[273] || CT.C273;
    },
    /*graphic_state.PdfBlendMode.lighten*/get lighten() {
      return C[274] || CT.C274;
    },
    /*graphic_state.PdfBlendMode.colorDodge*/get colorDodge() {
      return C[275] || CT.C275;
    },
    /*graphic_state.PdfBlendMode.colorBurn*/get colorBurn() {
      return C[276] || CT.C276;
    },
    /*graphic_state.PdfBlendMode.hardLight*/get hardLight() {
      return C[277] || CT.C277;
    },
    /*graphic_state.PdfBlendMode.softLight*/get softLight() {
      return C[278] || CT.C278;
    },
    /*graphic_state.PdfBlendMode.difference*/get difference() {
      return C[279] || CT.C279;
    },
    /*graphic_state.PdfBlendMode.exclusion*/get exclusion() {
      return C[280] || CT.C280;
    },
    /*graphic_state.PdfBlendMode.hue*/get hue() {
      return C[281] || CT.C281;
    },
    /*graphic_state.PdfBlendMode.saturation*/get saturation() {
      return C[282] || CT.C282;
    },
    /*graphic_state.PdfBlendMode.color*/get color() {
      return C[283] || CT.C283;
    },
    /*graphic_state.PdfBlendMode.luminosity*/get luminosity() {
      return C[284] || CT.C284;
    }
  }, false);
  var fillOpacity$ = dart.privateName(graphic_state, "PdfGraphicState.fillOpacity");
  var strokeOpacity$ = dart.privateName(graphic_state, "PdfGraphicState.strokeOpacity");
  var blendMode$ = dart.privateName(graphic_state, "PdfGraphicState.blendMode");
  var softMask$ = dart.privateName(graphic_state, "PdfGraphicState.softMask");
  var transferFunction$ = dart.privateName(graphic_state, "PdfGraphicState.transferFunction");
  graphic_state.PdfGraphicState = class PdfGraphicState extends core.Object {
    get fillOpacity() {
      return this[fillOpacity$];
    }
    set fillOpacity(value) {
      super.fillOpacity = value;
    }
    get strokeOpacity() {
      return this[strokeOpacity$];
    }
    set strokeOpacity(value) {
      super.strokeOpacity = value;
    }
    get blendMode() {
      return this[blendMode$];
    }
    set blendMode(value) {
      super.blendMode = value;
    }
    get softMask() {
      return this[softMask$];
    }
    set softMask(value) {
      super.softMask = value;
    }
    get transferFunction() {
      return this[transferFunction$];
    }
    set transferFunction(value) {
      super.transferFunction = value;
    }
    static ['_#new#tearOff'](opts) {
      let opacity = opts && 'opacity' in opts ? opts.opacity : null;
      let strokeOpacity = opts && 'strokeOpacity' in opts ? opts.strokeOpacity : null;
      let fillOpacity = opts && 'fillOpacity' in opts ? opts.fillOpacity : null;
      let blendMode = opts && 'blendMode' in opts ? opts.blendMode : null;
      let softMask = opts && 'softMask' in opts ? opts.softMask : null;
      let transferFunction = opts && 'transferFunction' in opts ? opts.transferFunction : null;
      return new graphic_state.PdfGraphicState.new({opacity: opacity, strokeOpacity: strokeOpacity, fillOpacity: fillOpacity, blendMode: blendMode, softMask: softMask, transferFunction: transferFunction});
    }
    toString() {
      return dart.str(this[$runtimeType]) + " fillOpacity:" + dart.str(this.fillOpacity) + " strokeOpacity:" + dart.str(this.strokeOpacity) + " blendMode:" + dart.str(this.blendMode) + " softMask:" + dart.str(this.softMask) + " transferFunction:" + dart.str(this.transferFunction);
    }
    output() {
      let params = T$.PdfDictOfPdfDataType().new();
      if (this.strokeOpacity != null) {
        params._set("/CA", new data_types.PdfNum.new(dart.nullCheck(this.strokeOpacity)));
      }
      if (this.fillOpacity != null) {
        params._set("/ca", new data_types.PdfNum.new(dart.nullCheck(this.fillOpacity)));
      }
      if (this.blendMode != null) {
        let bm = dart.toString(this.blendMode);
        params._set("/BM", new data_types.PdfName.new("/" + bm[$substring](13, 14)[$toUpperCase]() + bm[$substring](14)));
      }
      if (this.softMask != null) {
        params._set("/SMask", dart.nullCheck(this.softMask).output());
      }
      if (this.transferFunction != null) {
        params._set("/TR", dart.nullCheck(this.transferFunction).ref());
      }
      return params;
    }
    _equals(other) {
      if (other == null) return false;
      if (!graphic_state.PdfGraphicState.is(other)) {
        return false;
      }
      return other.fillOpacity == this.fillOpacity && other.strokeOpacity == this.strokeOpacity && other.blendMode == this.blendMode && dart.equals(other.softMask, this.softMask) && dart.equals(other.transferFunction, this.transferFunction);
    }
    get hashCode() {
      return dart.hashCode(this.fillOpacity) * dart.hashCode(this.strokeOpacity) * dart.hashCode(this.blendMode) * dart.hashCode(this.softMask) * dart.hashCode(this.transferFunction);
    }
  };
  (graphic_state.PdfGraphicState.new = function(opts) {
    let t47, t47$;
    let opacity = opts && 'opacity' in opts ? opts.opacity : null;
    let strokeOpacity = opts && 'strokeOpacity' in opts ? opts.strokeOpacity : null;
    let fillOpacity = opts && 'fillOpacity' in opts ? opts.fillOpacity : null;
    let blendMode = opts && 'blendMode' in opts ? opts.blendMode : null;
    let softMask = opts && 'softMask' in opts ? opts.softMask : null;
    let transferFunction = opts && 'transferFunction' in opts ? opts.transferFunction : null;
    this[blendMode$] = blendMode;
    this[softMask$] = softMask;
    this[transferFunction$] = transferFunction;
    this[fillOpacity$] = (t47 = fillOpacity, t47 == null ? opacity : t47);
    this[strokeOpacity$] = (t47$ = strokeOpacity, t47$ == null ? opacity : t47$);
    ;
  }).prototype = graphic_state.PdfGraphicState.prototype;
  dart.addTypeTests(graphic_state.PdfGraphicState);
  dart.addTypeCaches(graphic_state.PdfGraphicState);
  dart.setMethodSignature(graphic_state.PdfGraphicState, () => ({
    __proto__: dart.getMethods(graphic_state.PdfGraphicState.__proto__),
    output: dart.fnType(data_types.PdfDict$(data_types.PdfDataType), []),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setLibraryUri(graphic_state.PdfGraphicState, I[45]);
  dart.setFieldSignature(graphic_state.PdfGraphicState, () => ({
    __proto__: dart.getFields(graphic_state.PdfGraphicState.__proto__),
    fillOpacity: dart.finalFieldType(dart.nullable(core.double)),
    strokeOpacity: dart.finalFieldType(dart.nullable(core.double)),
    blendMode: dart.finalFieldType(dart.nullable(graphic_state.PdfBlendMode)),
    softMask: dart.finalFieldType(dart.nullable(smask.PdfSoftMask)),
    transferFunction: dart.finalFieldType(dart.nullable($function.PdfFunction))
  }));
  dart.defineExtensionMethods(graphic_state.PdfGraphicState, ['toString', '_equals']);
  dart.defineExtensionAccessors(graphic_state.PdfGraphicState, ['hashCode']);
  var _states = dart.privateName(graphic_state, "_states");
  graphic_state.PdfGraphicStates = class PdfGraphicStates extends object_dict.PdfObjectDict {
    static ['_#new#tearOff'](pdfDocument) {
      return new graphic_state.PdfGraphicStates.new(pdfDocument);
    }
    stateName(state) {
      let index = this[_states][$indexOf](state);
      if (index < 0) {
        index = this[_states][$length];
        this[_states][$add](state);
      }
      return "/a" + dart.str(index);
    }
    prepare() {
      super.prepare();
      for (let index = 0; index < this[_states][$length]; index = index + 1) {
        this.params._set("/a" + dart.str(index), this[_states][$_get](index).output());
      }
    }
  };
  (graphic_state.PdfGraphicStates.new = function(pdfDocument) {
    this[_states] = T$.JSArrayOfPdfGraphicState().of([]);
    graphic_state.PdfGraphicStates.__proto__.new.call(this, pdfDocument);
    ;
  }).prototype = graphic_state.PdfGraphicStates.prototype;
  dart.addTypeTests(graphic_state.PdfGraphicStates);
  dart.addTypeCaches(graphic_state.PdfGraphicStates);
  dart.setMethodSignature(graphic_state.PdfGraphicStates, () => ({
    __proto__: dart.getMethods(graphic_state.PdfGraphicStates.__proto__),
    stateName: dart.fnType(core.String, [graphic_state.PdfGraphicState])
  }));
  dart.setLibraryUri(graphic_state.PdfGraphicStates, I[45]);
  dart.setFieldSignature(graphic_state.PdfGraphicStates, () => ({
    __proto__: dart.getFields(graphic_state.PdfGraphicStates.__proto__),
    [_states]: dart.finalFieldType(core.List$(graphic_state.PdfGraphicState))
  }));
  dart.setStaticFieldSignature(graphic_state.PdfGraphicStates, () => ['_prefix']);
  dart.defineLazy(graphic_state.PdfGraphicStates, {
    /*graphic_state.PdfGraphicStates._prefix*/get _prefix() {
      return "/a";
    }
  }, false);
  var bytes$ = dart.privateName(document_parser, "PdfDocumentParserBase.bytes");
  document_parser.PdfDocumentParserBase = class PdfDocumentParserBase extends core.Object {
    get bytes() {
      return this[bytes$];
    }
    set bytes(value) {
      super.bytes = value;
    }
    get version() {
      return document$.PdfVersion.pdf_1_4;
    }
  };
  (document_parser.PdfDocumentParserBase.new = function(bytes) {
    this[bytes$] = bytes;
    ;
  }).prototype = document_parser.PdfDocumentParserBase.prototype;
  dart.addTypeTests(document_parser.PdfDocumentParserBase);
  dart.addTypeCaches(document_parser.PdfDocumentParserBase);
  dart.setGetterSignature(document_parser.PdfDocumentParserBase, () => ({
    __proto__: dart.getGetters(document_parser.PdfDocumentParserBase.__proto__),
    version: document$.PdfVersion
  }));
  dart.setLibraryUri(document_parser.PdfDocumentParserBase, I[46]);
  dart.setFieldSignature(document_parser.PdfDocumentParserBase, () => ({
    __proto__: dart.getFields(document_parser.PdfDocumentParserBase.__proto__),
    bytes: dart.finalFieldType(typed_data.Uint8List)
  }));
  document$.PdfVersion = class PdfVersion extends core._Enum {
    toString() {
      return "PdfVersion." + this[_name];
    }
  };
  (document$.PdfVersion.new = function(index, name) {
    document$.PdfVersion.__proto__.new.call(this, index, name);
    ;
  }).prototype = document$.PdfVersion.prototype;
  dart.addTypeTests(document$.PdfVersion);
  dart.addTypeCaches(document$.PdfVersion);
  dart.setLibraryUri(document$.PdfVersion, I[47]);
  dart.setStaticFieldSignature(document$.PdfVersion, () => ['values', 'pdf_1_4', 'pdf_1_5']);
  dart.defineExtensionMethods(document$.PdfVersion, ['toString']);
  dart.defineLazy(document$.PdfVersion, {
    /*document$.PdfVersion.values*/get values() {
      return C[285] || CT.C285;
    },
    /*document$.PdfVersion.pdf_1_4*/get pdf_1_4() {
      return C[0] || CT.C0;
    },
    /*document$.PdfVersion.pdf_1_5*/get pdf_1_5() {
      return C[1] || CT.C1;
    }
  }, false);
  document$.PdfPageMode = class PdfPageMode extends core._Enum {
    toString() {
      return "PdfPageMode." + this[_name];
    }
  };
  (document$.PdfPageMode.new = function(index, name) {
    document$.PdfPageMode.__proto__.new.call(this, index, name);
    ;
  }).prototype = document$.PdfPageMode.prototype;
  dart.addTypeTests(document$.PdfPageMode);
  dart.addTypeCaches(document$.PdfPageMode);
  dart.setLibraryUri(document$.PdfPageMode, I[47]);
  dart.setStaticFieldSignature(document$.PdfPageMode, () => ['values', 'none', 'outlines', 'thumbs', 'fullscreen']);
  dart.defineExtensionMethods(document$.PdfPageMode, ['toString']);
  dart.defineLazy(document$.PdfPageMode, {
    /*document$.PdfPageMode.values*/get values() {
      return C[286] || CT.C286;
    },
    /*document$.PdfPageMode.none*/get none() {
      return C[287] || CT.C287;
    },
    /*document$.PdfPageMode.outlines*/get outlines() {
      return C[288] || CT.C288;
    },
    /*document$.PdfPageMode.thumbs*/get thumbs() {
      return C[289] || CT.C289;
    },
    /*document$.PdfPageMode.fullscreen*/get fullscreen() {
      return C[290] || CT.C290;
    }
  }, false);
  var prev$ = dart.privateName(document$, "PdfDocument.prev");
  var objects = dart.privateName(document$, "PdfDocument.objects");
  var version$0 = dart.privateName(document$, "PdfDocument.version");
  var info$ = dart.privateName(document$, "PdfDocument.info");
  var defaultOutlineBorder = dart.privateName(document$, "PdfDocument.defaultOutlineBorder");
  var deflate$ = dart.privateName(document$, "PdfDocument.deflate");
  var encryption$ = dart.privateName(document$, "PdfDocument.encryption");
  var sign = dart.privateName(document$, "PdfDocument.sign");
  var versionString = dart.privateName(document$, "PdfDocument.versionString");
  var fonts$ = dart.privateName(document$, "PdfDocument.fonts");
  var verbose$0 = dart.privateName(document$, "PdfDocument.verbose");
  var __PdfDocument_catalog = dart.privateName(document$, "_#PdfDocument#catalog");
  var _graphicStates = dart.privateName(document$, "_graphicStates");
  var _documentID = dart.privateName(document$, "_documentID");
  var _objser = dart.privateName(document$, "_objser");
  var _write = dart.privateName(document$, "_write");
  document$.PdfDocument = class PdfDocument extends core.Object {
    get prev() {
      return this[prev$];
    }
    set prev(value) {
      super.prev = value;
    }
    get objects() {
      return this[objects];
    }
    set objects(value) {
      super.objects = value;
    }
    get version() {
      return this[version$0];
    }
    set version(value) {
      super.version = value;
    }
    get info() {
      return this[info$];
    }
    set info(value) {
      this[info$] = value;
    }
    get defaultOutlineBorder() {
      return this[defaultOutlineBorder];
    }
    set defaultOutlineBorder(value) {
      this[defaultOutlineBorder] = value;
    }
    get deflate() {
      return this[deflate$];
    }
    set deflate(value) {
      super.deflate = value;
    }
    get encryption() {
      return this[encryption$];
    }
    set encryption(value) {
      this[encryption$] = value;
    }
    get sign() {
      return this[sign];
    }
    set sign(value) {
      this[sign] = value;
    }
    get versionString() {
      return this[versionString];
    }
    set versionString(value) {
      super.versionString = value;
    }
    get fonts() {
      return this[fonts$];
    }
    set fonts(value) {
      super.fonts = value;
    }
    get verbose() {
      return this[verbose$0];
    }
    set verbose(value) {
      super.verbose = value;
    }
    static ['_#new#tearOff'](opts) {
      let pageMode = opts && 'pageMode' in opts ? opts.pageMode : C[287] || CT.C287;
      let deflate = opts && 'deflate' in opts ? opts.deflate : null;
      let compress = opts && 'compress' in opts ? opts.compress : true;
      let verbose = opts && 'verbose' in opts ? opts.verbose : false;
      let version = opts && 'version' in opts ? opts.version : C[1] || CT.C1;
      return new document$.PdfDocument.new({pageMode: pageMode, deflate: deflate, compress: compress, verbose: verbose, version: version});
    }
    static ['_#load#tearOff'](prev, opts) {
      let pageMode = opts && 'pageMode' in opts ? opts.pageMode : C[287] || CT.C287;
      let deflate = opts && 'deflate' in opts ? opts.deflate : null;
      let compress = opts && 'compress' in opts ? opts.compress : true;
      let verbose = opts && 'verbose' in opts ? opts.verbose : false;
      return new document$.PdfDocument.load(prev, {pageMode: pageMode, deflate: deflate, compress: compress, verbose: verbose});
    }
    get objser() {
      return this[_objser];
    }
    get catalog() {
      let t51;
      t51 = this[__PdfDocument_catalog];
      return t51 == null ? dart.throw(new _internal.LateError.fieldNI("catalog")) : t51;
    }
    set catalog(catalog$35param) {
      if (this[__PdfDocument_catalog] == null)
        this[__PdfDocument_catalog] = catalog$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("catalog"));
    }
    get pdfPageList() {
      return this.catalog.pdfPageList;
    }
    get pdfNames() {
      let t51;
      t51 = this.catalog;
      t51.names == null ? t51.names = new names.PdfNames.new(this) : null;
      return dart.nullCheck(this.catalog.names);
    }
    get compress() {
      return this.deflate != null;
    }
    get documentID() {
      if (this[_documentID] == null) {
        let rnd = math.Random.new();
        this[_documentID] = _native_typed_data.NativeUint8List.fromList(sha256.sha256.convert(new core.DateTime.now().toIso8601String()[$codeUnits][$plus](T$.ListOfint().generate(32, dart.fn(_ => rnd.nextInt(256), T$.intToint())))).bytes);
      }
      return dart.nullCheck(this[_documentID]);
    }
    genSerial() {
      let t51;
      t51 = this[_objser];
      this[_objser] = t51 + 1;
      return t51;
    }
    page(page) {
      return this.pdfPageList.pages[$_get](page);
    }
    get outline() {
      let t51;
      t51 = this.catalog;
      t51.outlines == null ? t51.outlines = new outline.PdfOutline.new(this) : null;
      return dart.nullCheck(this.catalog.outlines);
    }
    get pageLabels() {
      let t51;
      t51 = this.catalog;
      t51.pageLabels == null ? t51.pageLabels = new page_label.PdfPageLabels.new(this) : null;
      return dart.nullCheck(this.catalog.pageLabels);
    }
    get graphicStates() {
      this[_graphicStates] == null ? this[_graphicStates] = new graphic_state.PdfGraphicStates.new(this) : null;
      return dart.nullCheck(this[_graphicStates]);
    }
    get hasGraphicStates() {
      return this[_graphicStates] != null;
    }
    [_write](os) {
      return async.async(dart.void, (function* _write() {
        let pos = new output.PdfOutput.new(os, this.version, this.verbose);
        this.objects[$forEach](dart.bind(pos, 'write'));
        yield pos.close();
      }).bind(this));
    }
    save() {
      return async.async(typed_data.Uint8List, (function* save() {
        let os = new stream.PdfStream.new();
        if (this.prev != null) {
          os.putBytes(dart.nullCheck(this.prev).bytes);
        }
        yield this[_write](os);
        return os.output();
      }).bind(this));
    }
  };
  (document$.PdfDocument.new = function(opts) {
    let t51;
    let pageMode = opts && 'pageMode' in opts ? opts.pageMode : C[287] || CT.C287;
    let deflate = opts && 'deflate' in opts ? opts.deflate : null;
    let compress = opts && 'compress' in opts ? opts.compress : true;
    let verbose = opts && 'verbose' in opts ? opts.verbose : false;
    let version = opts && 'version' in opts ? opts.version : C[1] || CT.C1;
    this[objects] = T$.LinkedHashSetOfPdfObjectOfPdfDataType().new();
    this[__PdfDocument_catalog] = null;
    this[info$] = null;
    this[defaultOutlineBorder] = null;
    this[encryption$] = null;
    this[sign] = null;
    this[_graphicStates] = null;
    this[versionString] = "1.7";
    this[fonts$] = T$.LinkedHashSetOfPdfFont().new();
    this[_documentID] = null;
    this[verbose$0] = verbose;
    this[version$0] = version;
    this[deflate$] = compress ? (t51 = deflate, t51 == null ? js.defaultDeflate : t51) : null;
    this[prev$] = null;
    this[_objser] = 1;
    this.catalog = new catalog.PdfCatalog.new(this, new page_list.PdfPageList.new(this), pageMode);
  }).prototype = document$.PdfDocument.prototype;
  (document$.PdfDocument.load = function(prev, opts) {
    let t51;
    let pageMode = opts && 'pageMode' in opts ? opts.pageMode : C[287] || CT.C287;
    let deflate = opts && 'deflate' in opts ? opts.deflate : null;
    let compress = opts && 'compress' in opts ? opts.compress : true;
    let verbose = opts && 'verbose' in opts ? opts.verbose : false;
    this[objects] = T$.LinkedHashSetOfPdfObjectOfPdfDataType().new();
    this[__PdfDocument_catalog] = null;
    this[info$] = null;
    this[defaultOutlineBorder] = null;
    this[encryption$] = null;
    this[sign] = null;
    this[_graphicStates] = null;
    this[versionString] = "1.7";
    this[fonts$] = T$.LinkedHashSetOfPdfFont().new();
    this[_documentID] = null;
    this[prev$] = prev;
    this[verbose$0] = verbose;
    this[deflate$] = compress ? (t51 = deflate, t51 == null ? js.defaultDeflate : t51) : null;
    this[_objser] = dart.nullCheck(prev).size;
    this[version$0] = prev.version;
    this.catalog = new catalog.PdfCatalog.new(this, new page_list.PdfPageList.new(this), pageMode);
    dart.nullCheck(this.prev).mergeDocument(this);
  }).prototype = document$.PdfDocument.prototype;
  dart.addTypeTests(document$.PdfDocument);
  dart.addTypeCaches(document$.PdfDocument);
  dart.setMethodSignature(document$.PdfDocument, () => ({
    __proto__: dart.getMethods(document$.PdfDocument.__proto__),
    genSerial: dart.fnType(core.int, []),
    page: dart.fnType(dart.nullable(page.PdfPage), [core.int]),
    [_write]: dart.fnType(async.Future$(dart.void), [stream.PdfStream]),
    save: dart.fnType(async.Future$(typed_data.Uint8List), [])
  }));
  dart.setGetterSignature(document$.PdfDocument, () => ({
    __proto__: dart.getGetters(document$.PdfDocument.__proto__),
    objser: core.int,
    catalog: catalog.PdfCatalog,
    pdfPageList: page_list.PdfPageList,
    pdfNames: names.PdfNames,
    compress: core.bool,
    documentID: typed_data.Uint8List,
    outline: outline.PdfOutline,
    pageLabels: page_label.PdfPageLabels,
    graphicStates: graphic_state.PdfGraphicStates,
    hasGraphicStates: core.bool
  }));
  dart.setSetterSignature(document$.PdfDocument, () => ({
    __proto__: dart.getSetters(document$.PdfDocument.__proto__),
    catalog: catalog.PdfCatalog
  }));
  dart.setLibraryUri(document$.PdfDocument, I[47]);
  dart.setFieldSignature(document$.PdfDocument, () => ({
    __proto__: dart.getFields(document$.PdfDocument.__proto__),
    prev: dart.finalFieldType(dart.nullable(document_parser.PdfDocumentParserBase)),
    [_objser]: dart.fieldType(core.int),
    objects: dart.finalFieldType(core.Set$(object.PdfObject$(data_types.PdfDataType))),
    [__PdfDocument_catalog]: dart.fieldType(dart.nullable(catalog.PdfCatalog)),
    version: dart.finalFieldType(document$.PdfVersion),
    info: dart.fieldType(dart.nullable(info.PdfInfo)),
    defaultOutlineBorder: dart.fieldType(dart.nullable(object.PdfObject$(data_types.PdfDataType))),
    deflate: dart.finalFieldType(dart.nullable(dart.fnType(core.List$(core.int), [core.List$(core.int)]))),
    encryption: dart.fieldType(dart.nullable(encryption.PdfEncryption)),
    sign: dart.fieldType(dart.nullable(signature.PdfSignature)),
    [_graphicStates]: dart.fieldType(dart.nullable(graphic_state.PdfGraphicStates)),
    versionString: dart.finalFieldType(core.String),
    fonts: dart.finalFieldType(core.Set$(font.PdfFont)),
    [_documentID]: dart.fieldType(dart.nullable(typed_data.Uint8List)),
    verbose: dart.finalFieldType(core.bool)
  }));
  dart.trackLibraries("packages/pdf/src/pdf/output.dart", {
    "package:pdf/src/pdf/output.dart": output,
    "package:pdf/src/pdf/obj/signature.dart": signature,
    "package:pdf/src/pdf/obj/info.dart": info,
    "package:pdf/src/pdf/obj/encryption.dart": encryption,
    "package:pdf/src/pdf/obj/page_list.dart": page_list,
    "package:pdf/src/pdf/xref.dart": xref,
    "package:pdf/src/priv.dart": priv,
    "package:pdf/src/pdf/obj/page_label.dart": page_label,
    "package:pdf/src/pdf/obj/outline.dart": outline,
    "package:pdf/src/pdf/obj/names.dart": names,
    "package:pdf/src/pdf/obj/metadata.dart": metadata$,
    "package:pdf/src/pdf/obj/catalog.dart": catalog,
    "package:pdf/src/pdf/io/js.dart": js,
    "package:pdf/src/pdf/obj/border.dart": border,
    "package:pdf/src/pdf/obj/annotation.dart": annotation,
    "package:pdf/src/pdf/obj/page.dart": page,
    "package:pdf/src/pdf/exif.dart": exif,
    "package:pdf/src/pdf/obj/image.dart": image$0,
    "package:pdf/src/pdf/obj/xobject.dart": xobject,
    "package:pdf/src/pdf/obj/shading.dart": shading,
    "package:pdf/src/pdf/obj/pattern.dart": pattern,
    "package:pdf/src/pdf/obj/graphic_stream.dart": graphic_stream,
    "package:pdf/src/pdf/obj/unicode_cmap.dart": unicode_cmap,
    "package:pdf/src/pdf/obj/font_descriptor.dart": font_descriptor,
    "package:pdf/src/pdf/obj/array.dart": array$,
    "package:pdf/src/pdf/obj/ttffont.dart": ttffont,
    "package:pdf/src/pdf/obj/type1_font.dart": type1_font,
    "package:pdf/src/pdf/obj/font.dart": font,
    "package:pdf/src/pdf/graphics.dart": graphics,
    "package:pdf/src/pdf/obj/smask.dart": smask,
    "package:pdf/src/pdf/obj/object_stream.dart": object_stream,
    "package:pdf/src/pdf/obj/object_dict.dart": object_dict,
    "package:pdf/src/pdf/obj/function.dart": $function,
    "package:pdf/src/pdf/obj/object.dart": object,
    "package:pdf/src/pdf/data_types.dart": data_types,
    "package:pdf/src/pdf/graphic_state.dart": graphic_state,
    "package:pdf/src/pdf/document_parser.dart": document_parser,
    "package:pdf/src/pdf/document.dart": document$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["output.dart","obj/signature.dart","obj/object.dart","data_types.dart","obj/object_dict.dart","obj/info.dart","obj/encryption.dart","obj/page_list.dart","xref.dart","obj/page_label.dart","obj/outline.dart","obj/names.dart","obj/metadata.dart","obj/catalog.dart","io/js.dart","obj/border.dart","obj/annotation.dart","obj/page.dart","obj/graphic_stream.dart","exif.dart","obj/image.dart","obj/object_stream.dart","obj/xobject.dart","obj/shading.dart","obj/pattern.dart","obj/unicode_cmap.dart","obj/font_descriptor.dart","obj/array.dart","obj/font.dart","obj/ttffont.dart","obj/type1_font.dart","graphics.dart","obj/smask.dart","obj/function.dart","graphic_state.dart","document_parser.dart","document.dart"],"names":[],"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","file":"../../../../../../../../../../../../packages/pdf/src/pdf/output.dart.lib.js"}');
  // Exports:
  return {
    src__pdf__output: output,
    src__pdf__obj__signature: signature,
    src__pdf__obj__info: info,
    src__pdf__obj__encryption: encryption,
    src__pdf__obj__page_list: page_list,
    src__pdf__xref: xref,
    src__priv: priv,
    src__pdf__obj__page_label: page_label,
    src__pdf__obj__outline: outline,
    src__pdf__obj__names: names,
    src__pdf__obj__metadata: metadata$,
    src__pdf__obj__catalog: catalog,
    src__pdf__io__js: js,
    src__pdf__obj__border: border,
    src__pdf__obj__annotation: annotation,
    src__pdf__obj__page: page,
    src__pdf__exif: exif,
    src__pdf__obj__image: image$0,
    src__pdf__obj__xobject: xobject,
    src__pdf__obj__shading: shading,
    src__pdf__obj__pattern: pattern,
    src__pdf__obj__graphic_stream: graphic_stream,
    src__pdf__obj__unicode_cmap: unicode_cmap,
    src__pdf__obj__font_descriptor: font_descriptor,
    src__pdf__obj__array: array$,
    src__pdf__obj__ttffont: ttffont,
    src__pdf__obj__type1_font: type1_font,
    src__pdf__obj__font: font,
    src__pdf__graphics: graphics,
    src__pdf__obj__smask: smask,
    src__pdf__obj__object_stream: object_stream,
    src__pdf__obj__object_dict: object_dict,
    src__pdf__obj__function: $function,
    src__pdf__obj__object: object,
    src__pdf__data_types: data_types,
    src__pdf__graphic_state: graphic_state,
    src__pdf__document_parser: document_parser,
    src__pdf__document: document$
  };
}));

//# sourceMappingURL=output.dart.lib.js.map
