define(['dart_sdk', 'packages/pdf/src/pdf/color.dart', 'packages/pdf/src/pdf/output.dart', 'packages/pdf/src/pdf/rect.dart', 'packages/pdf/src/pdf/point.dart', 'packages/vector_math/vector_math_64.dart', 'packages/pdf/src/pdf/colors.dart', 'packages/barcode/src/barcode_operations.dart', 'packages/barcode/src/upce.dart', 'packages/xml/src/xml/utils/simple_name.dart', 'packages/pdf/src/pdf/font/font_metrics.dart', 'packages/image/src/transform/copy_crop.dart', 'packages/pdf/src/svg/colors.dart', 'packages/pdf/src/pdf/font/ttf_parser.dart', 'packages/image/src/image.dart', 'packages/image/src/draw/fill_rect.dart', 'packages/image/src/filter/gaussian_blur.dart', 'packages/image/src/draw/draw_line.dart', 'packages/pdf/src/pdf/page_format.dart', 'packages/image/src/formats/jpeg_decoder.dart', 'packages/image/src/transform/copy_resize.dart', 'packages/pdf/src/pdf/font/arabic.dart'], (function load__packages__pdf__src__widgets__table_dart(dart_sdk, packages__pdf__src__pdf__color$46dart, packages__pdf__src__pdf__output$46dart, packages__pdf__src__pdf__rect$46dart, packages__pdf__src__pdf__point$46dart, packages__vector_math__vector_math_64$46dart, packages__pdf__src__pdf__colors$46dart, packages__barcode__src__barcode_operations$46dart, packages__barcode__src__upce$46dart, packages__xml__src__xml__utils__simple_name$46dart, packages__pdf__src__pdf__font__font_metrics$46dart, packages__image__src__transform__copy_crop$46dart, packages__pdf__src__svg__colors$46dart, packages__pdf__src__pdf__font__ttf_parser$46dart, packages__image__src__image$46dart, packages__image__src__draw__fill_rect$46dart, packages__image__src__filter__gaussian_blur$46dart, packages__image__src__draw__draw_line$46dart, packages__pdf__src__pdf__page_format$46dart, packages__image__src__formats__jpeg_decoder$46dart, packages__image__src__transform__copy_resize$46dart, packages__pdf__src__pdf__font__arabic$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const math = dart_sdk.math;
  const _internal = dart_sdk._internal;
  const collection = dart_sdk.collection;
  const typed_data = dart_sdk.typed_data;
  const _js_helper = dart_sdk._js_helper;
  const _native_typed_data = dart_sdk._native_typed_data;
  const convert = dart_sdk.convert;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const color$ = packages__pdf__src__pdf__color$46dart.src__pdf__color;
  const graphics = packages__pdf__src__pdf__output$46dart.src__pdf__graphics;
  const page = packages__pdf__src__pdf__output$46dart.src__pdf__obj__page;
  const graphic_state = packages__pdf__src__pdf__output$46dart.src__pdf__graphic_state;
  const annotation = packages__pdf__src__pdf__output$46dart.src__pdf__obj__annotation;
  const data_types = packages__pdf__src__pdf__output$46dart.src__pdf__data_types;
  const border = packages__pdf__src__pdf__output$46dart.src__pdf__obj__border;
  const signature = packages__pdf__src__pdf__output$46dart.src__pdf__obj__signature;
  const outline = packages__pdf__src__pdf__output$46dart.src__pdf__obj__outline;
  const smask = packages__pdf__src__pdf__output$46dart.src__pdf__obj__smask;
  const font = packages__pdf__src__pdf__output$46dart.src__pdf__obj__font;
  const image$ = packages__pdf__src__pdf__output$46dart.src__pdf__obj__image;
  const pattern = packages__pdf__src__pdf__output$46dart.src__pdf__obj__pattern;
  const shading = packages__pdf__src__pdf__output$46dart.src__pdf__obj__shading;
  const $function = packages__pdf__src__pdf__output$46dart.src__pdf__obj__function;
  const document = packages__pdf__src__pdf__output$46dart.src__pdf__document;
  const ttffont = packages__pdf__src__pdf__output$46dart.src__pdf__obj__ttffont;
  const exif = packages__pdf__src__pdf__output$46dart.src__pdf__exif;
  const info = packages__pdf__src__pdf__output$46dart.src__pdf__obj__info;
  const metadata$ = packages__pdf__src__pdf__output$46dart.src__pdf__obj__metadata;
  const page_label = packages__pdf__src__pdf__output$46dart.src__pdf__obj__page_label;
  const rect$ = packages__pdf__src__pdf__rect$46dart.src__pdf__rect;
  const point$ = packages__pdf__src__pdf__point$46dart.src__pdf__point;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const colors = packages__pdf__src__pdf__colors$46dart.src__pdf__colors;
  const barcode_operations = packages__barcode__src__barcode_operations$46dart.src__barcode_operations;
  const barcode = packages__barcode__src__upce$46dart.src__barcode;
  const element$ = packages__xml__src__xml__utils__simple_name$46dart.src__xml__nodes__element;
  const text$ = packages__xml__src__xml__utils__simple_name$46dart.src__xml__nodes__text;
  const cdata = packages__xml__src__xml__utils__simple_name$46dart.src__xml__nodes__cdata;
  const node = packages__xml__src__xml__utils__simple_name$46dart.src__xml__nodes__node;
  const descendants = packages__xml__src__xml__utils__simple_name$46dart.src__xml__navigation__descendants;
  const document$ = packages__xml__src__xml__utils__simple_name$46dart.src__xml__nodes__document;
  const font_metrics = packages__pdf__src__pdf__font__font_metrics$46dart.src__pdf__font__font_metrics;
  const formats = packages__image__src__transform__copy_crop$46dart.src__formats__formats;
  const colors$ = packages__pdf__src__svg__colors$46dart.src__svg__colors;
  const ttf_parser = packages__pdf__src__pdf__font__ttf_parser$46dart.src__pdf__font__ttf_parser;
  const image = packages__image__src__image$46dart.src__image;
  const fill_rect = packages__image__src__draw__fill_rect$46dart.src__draw__fill_rect;
  const gaussian_blur = packages__image__src__filter__gaussian_blur$46dart.src__filter__gaussian_blur;
  const draw_circle = packages__image__src__draw__draw_line$46dart.src__draw__draw_circle;
  const page_format = packages__pdf__src__pdf__page_format$46dart.src__pdf__page_format;
  const jpeg_decoder = packages__image__src__formats__jpeg_decoder$46dart.src__formats__jpeg_decoder;
  const copy_resize = packages__image__src__transform__copy_resize$46dart.src__transform__copy_resize;
  const arabic = packages__pdf__src__pdf__font__arabic$46dart.src__pdf__font__arabic;
  var table = Object.create(dart.library);
  var progress = Object.create(dart.library);
  var partitions = Object.create(dart.library);
  var grid_view = Object.create(dart.library);
  var grid_paper = Object.create(dart.library);
  var forms = Object.create(dart.library);
  var content = Object.create(dart.library);
  var clip = Object.create(dart.library);
  var pie_chart = Object.create(dart.library);
  var line_chart = Object.create(dart.library);
  var wrap$ = Object.create(dart.library);
  var legend = Object.create(dart.library);
  var grid_radial = Object.create(dart.library);
  var point_chart = Object.create(dart.library);
  var grid_axis = Object.create(dart.library);
  var grid_cartesian = Object.create(dart.library);
  var stack = Object.create(dart.library);
  var chart = Object.create(dart.library);
  var bar_chart = Object.create(dart.library);
  var barcode$ = Object.create(dart.library);
  var shape = Object.create(dart.library);
  var container$ = Object.create(dart.library);
  var mask_path = Object.create(dart.library);
  var use = Object.create(dart.library);
  var text$0 = Object.create(dart.library);
  var symbol = Object.create(dart.library);
  var path = Object.create(dart.library);
  var image$0 = Object.create(dart.library);
  var parser$ = Object.create(dart.library);
  var transform$ = Object.create(dart.library);
  var group = Object.create(dart.library);
  var clip_path = Object.create(dart.library);
  var operation = Object.create(dart.library);
  var gradient$ = Object.create(dart.library);
  var color$0 = Object.create(dart.library);
  var brush$ = Object.create(dart.library);
  var painter$ = Object.create(dart.library);
  var svg$ = Object.create(dart.library);
  var placeholders = Object.create(dart.library);
  var icon$ = Object.create(dart.library);
  var theme$ = Object.create(dart.library);
  var font$ = Object.create(dart.library);
  var decoration$ = Object.create(dart.library);
  var text_style = Object.create(dart.library);
  var flex$ = Object.create(dart.library);
  var multi_page = Object.create(dart.library);
  var image_provider = Object.create(dart.library);
  var image$1 = Object.create(dart.library);
  var text$1 = Object.create(dart.library);
  var page_theme = Object.create(dart.library);
  var page$ = Object.create(dart.library);
  var document$0 = Object.create(dart.library);
  var widget$ = Object.create(dart.library);
  var border_radius = Object.create(dart.library);
  var box_border = Object.create(dart.library);
  var basic = Object.create(dart.library);
  var geometry = Object.create(dart.library);
  var annotations = Object.create(dart.library);
  var widgets = Object.create(dart.library);
  var $length = dartx.length;
  var $sublist = dartx.sublist;
  var $_equals = dartx._equals;
  var $runtimeType = dartx.runtimeType;
  var $toDouble = dartx.toDouble;
  var $_get = dartx._get;
  var $toString = dartx.toString;
  var $add = dartx.add;
  var $modulo = dartx['%'];
  var $clear = dartx.clear;
  var $_set = dartx._set;
  var $isEmpty = dartx.isEmpty;
  var $reduce = dartx.reduce;
  var $clamp = dartx.clamp;
  var $any = dartx.any;
  var $isInfinite = dartx.isInfinite;
  var $ceil = dartx.ceil;
  var $floor = dartx.floor;
  var $hashCode = dartx.hashCode;
  var $abs = dartx.abs;
  var $first = dartx.first;
  var $last = dartx.last;
  var $isNotEmpty = dartx.isNotEmpty;
  var $toInt = dartx.toInt;
  var $isFinite = dartx.isFinite;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $startsWith = dartx.startsWith;
  var $lastIndexOf = dartx.lastIndexOf;
  var $substring = dartx.substring;
  var $join = dartx.join;
  var $trim = dartx.trim;
  var $whereType = dartx.whereType;
  var $where = dartx.where;
  var $indexOf = dartx.indexOf;
  var $replaceAll = dartx.replaceAll;
  var $buffer = dartx.buffer;
  var $asUint8List = dartx.asUint8List;
  var $addAll = dartx.addAll;
  var $firstWhere = dartx.firstWhere;
  var $split = dartx.split;
  var $containsKey = dartx.containsKey;
  var $toLowerCase = dartx.toLowerCase;
  var $toUpperCase = dartx.toUpperCase;
  var $round = dartx.round;
  var $runes = dartx.runes;
  var $toRadixString = dartx.toRadixString;
  var $insert = dartx.insert;
  var $removeAt = dartx.removeAt;
  var $truncate = dartx.truncate;
  var $expand = dartx.expand;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T$ = {
    doubleN: () => (T$.doubleN = dart.constFn(dart.nullable(core.double)))(),
    JSArrayOfdoubleN: () => (T$.JSArrayOfdoubleN = dart.constFn(_interceptors.JSArray$(T$.doubleN())))(),
    JSArrayOfdouble: () => (T$.JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(core.double)))(),
    JSArrayOfTableRow: () => (T$.JSArrayOfTableRow = dart.constFn(_interceptors.JSArray$(table.TableRow)))(),
    JSArrayOfWidget: () => (T$.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(widget$.Widget)))(),
    doubleNAnddoubleNTodouble: () => (T$.doubleNAnddoubleNTodouble = dart.constFn(dart.fnType(core.double, [T$.doubleN(), T$.doubleN()])))(),
    JSArrayOfInherited: () => (T$.JSArrayOfInherited = dart.constFn(_interceptors.JSArray$(widget$.Inherited)))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    WidgetContextN: () => (T$.WidgetContextN = dart.constFn(dart.nullable(multi_page.WidgetContext)))(),
    ListOfWidgetContextN: () => (T$.ListOfWidgetContextN = dart.constFn(core.List$(T$.WidgetContextN())))(),
    PartitionTobool: () => (T$.PartitionTobool = dart.constFn(dart.fnType(core.bool, [partitions.Partition])))(),
    ListOfdoubleN: () => (T$.ListOfdoubleN = dart.constFn(core.List$(T$.doubleN())))(),
    VoidTodouble: () => (T$.VoidTodouble = dart.constFn(dart.fnType(core.double, [])))(),
    doubleTodynamic: () => (T$.doubleTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.double])))(),
    LinkedHashSetOfPdfAnnotFlags: () => (T$.LinkedHashSetOfPdfAnnotFlags = dart.constFn(collection.LinkedHashSet$(annotation.PdfAnnotFlags)))(),
    LinkedHashSetOfPdfFieldFlags: () => (T$.LinkedHashSetOfPdfFieldFlags = dart.constFn(collection.LinkedHashSet$(annotation.PdfFieldFlags)))(),
    LinkedHashSetOfPdfSigFlags: () => (T$.LinkedHashSetOfPdfSigFlags = dart.constFn(collection.LinkedHashSet$(signature.PdfSigFlags)))(),
    ContextToText: () => (T$.ContextToText = dart.constFn(dart.fnType(text$1.Text, [widget$.Context])))(),
    SyncIterableOfWidget: () => (T$.SyncIterableOfWidget = dart.constFn(_js_helper.SyncIterable$(widget$.Widget)))(),
    ListOfWidget: () => (T$.ListOfWidget = dart.constFn(core.List$(widget$.Widget)))(),
    JSArrayOfInlineSpan: () => (T$.JSArrayOfInlineSpan = dart.constFn(_interceptors.JSArray$(text$1.InlineSpan)))(),
    JSArrayOfnum: () => (T$.JSArrayOfnum = dart.constFn(_interceptors.JSArray$(core.num)))(),
    JSArrayOf_RunMetrics: () => (T$.JSArrayOf_RunMetrics = dart.constFn(_interceptors.JSArray$(wrap$._RunMetrics)))(),
    LinkedMapOfWidget$int: () => (T$.LinkedMapOfWidget$int = dart.constFn(_js_helper.LinkedMap$(widget$.Widget, core.int)))(),
    numToString: () => (T$.numToString = dart.constFn(dart.fnType(core.String, [core.num])))(),
    FixedAxisOfint: () => (T$.FixedAxisOfint = dart.constFn(grid_axis.FixedAxis$(core.int)))(),
    ListOfint: () => (T$.ListOfint = dart.constFn(core.List$(core.int)))(),
    intToint: () => (T$.intToint = dart.constFn(dart.fnType(core.int, [core.int])))(),
    JSArrayOfint: () => (T$.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    JSArrayOfBarcodeText: () => (T$.JSArrayOfBarcodeText = dart.constFn(_interceptors.JSArray$(barcode_operations.BarcodeText)))(),
    PdfPointToPdfPoint: () => (T$.PdfPointToPdfPoint = dart.constFn(dart.fnType(point$.PdfPoint, [point$.PdfPoint])))(),
    SvgOperationN: () => (T$.SvgOperationN = dart.constFn(dart.nullable(operation.SvgOperation)))(),
    XmlElementToSvgOperationN: () => (T$.XmlElementToSvgOperationN = dart.constFn(dart.fnType(T$.SvgOperationN(), [element$.XmlElement])))(),
    XmlNodeTobool: () => (T$.XmlNodeTobool = dart.constFn(dart.fnType(core.bool, [node.XmlNode])))(),
    XmlNodeToString: () => (T$.XmlNodeToString = dart.constFn(dart.fnType(core.String, [node.XmlNode])))(),
    XmlElementToSvgText: () => (T$.XmlElementToSvgText = dart.constFn(dart.fnType(text$0.SvgText, [element$.XmlElement])))(),
    XmlElementTobool: () => (T$.XmlElementTobool = dart.constFn(dart.fnType(core.bool, [element$.XmlElement])))(),
    ListOfdouble: () => (T$.ListOfdouble = dart.constFn(core.List$(core.double)))(),
    RegExpMatchToSvgNumeric: () => (T$.RegExpMatchToSvgNumeric = dart.constFn(dart.fnType(parser$.SvgNumeric, [core.RegExpMatch])))(),
    RegExpMatchTodouble: () => (T$.RegExpMatchTodouble = dart.constFn(dart.fnType(core.double, [core.RegExpMatch])))(),
    RegExpMatchToint: () => (T$.RegExpMatchToint = dart.constFn(dart.fnType(core.int, [core.RegExpMatch])))(),
    doubleTobool: () => (T$.doubleTobool = dart.constFn(dart.fnType(core.bool, [core.double])))(),
    doubleToPdfColor: () => (T$.doubleToPdfColor = dart.constFn(dart.fnType(color$.PdfColor, [core.double])))(),
    PdfColorN: () => (T$.PdfColorN = dart.constFn(dart.nullable(color$.PdfColor)))(),
    JSArrayOfPdfColorN: () => (T$.JSArrayOfPdfColorN = dart.constFn(_interceptors.JSArray$(T$.PdfColorN())))(),
    SvgNumericTodouble: () => (T$.SvgNumericTodouble = dart.constFn(dart.fnType(core.double, [parser$.SvgNumeric])))(),
    IdentityMapOfString$Font: () => (T$.IdentityMapOfString$Font = dart.constFn(_js_helper.IdentityMap$(core.String, font$.Font)))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    ContextToWidget: () => (T$.ContextToWidget = dart.constFn(dart.fnType(widget$.Widget, [widget$.Context])))(),
    ContextToDefaultTextStyle: () => (T$.ContextToDefaultTextStyle = dart.constFn(dart.fnType(theme$.DefaultTextStyle, [widget$.Context])))(),
    PdfFontTobool: () => (T$.PdfFontTobool = dart.constFn(dart.fnType(core.bool, [font.PdfFont])))(),
    VoidToPdfFont: () => (T$.VoidToPdfFont = dart.constFn(dart.fnType(font.PdfFont, [])))(),
    ListOfFont: () => (T$.ListOfFont = dart.constFn(core.List$(font$.Font)))(),
    WidgetAnddoubleNTodouble: () => (T$.WidgetAnddoubleNTodouble = dart.constFn(dart.fnType(core.double, [widget$.Widget, T$.doubleN()])))(),
    VoidToPdfPoint: () => (T$.VoidToPdfPoint = dart.constFn(dart.fnType(point$.PdfPoint, [])))(),
    PdfPointTodynamic: () => (T$.PdfPointTodynamic = dart.constFn(dart.fnType(dart.dynamic, [point$.PdfPoint])))(),
    JSArrayOf_MultiPageWidget: () => (T$.JSArrayOf_MultiPageWidget = dart.constFn(_interceptors.JSArray$(multi_page._MultiPageWidget)))(),
    JSArrayOf_MultiPageInstance: () => (T$.JSArrayOf_MultiPageInstance = dart.constFn(_interceptors.JSArray$(multi_page._MultiPageInstance)))(),
    ContextToSizedBox: () => (T$.ContextToSizedBox = dart.constFn(dart.fnType(basic.SizedBox, [widget$.Context])))(),
    IdentityMapOfint$PdfImage: () => (T$.IdentityMapOfint$PdfImage = dart.constFn(_js_helper.IdentityMap$(core.int, image$.PdfImage)))(),
    TextStyleN: () => (T$.TextStyleN = dart.constFn(dart.nullable(text_style.TextStyle)))(),
    AnnotationBuilderN: () => (T$.AnnotationBuilderN = dart.constFn(dart.nullable(annotations.AnnotationBuilder)))(),
    InlineSpanAndTextStyleNAndAnnotationBuilderNTobool: () => (T$.InlineSpanAndTextStyleNAndAnnotationBuilderNTobool = dart.constFn(dart.fnType(core.bool, [text$1.InlineSpan, T$.TextStyleN(), T$.AnnotationBuilderN()])))(),
    _SpanAnd_SpanTo_Span: () => (T$._SpanAnd_SpanTo_Span = dart.constFn(dart.fnType(text$1._Span, [text$1._Span, text$1._Span])))(),
    JSArrayOf_Span: () => (T$.JSArrayOf_Span = dart.constFn(_interceptors.JSArray$(text$1._Span)))(),
    JSArrayOf_TextDecoration: () => (T$.JSArrayOf_TextDecoration = dart.constFn(_interceptors.JSArray$(text$1._TextDecoration)))(),
    JSArrayOf_Line: () => (T$.JSArrayOf_Line = dart.constFn(_interceptors.JSArray$(text$1._Line)))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    JSArrayOfPage: () => (T$.JSArrayOfPage = dart.constFn(_interceptors.JSArray$(page$.Page)))(),
    LinkedMapOfType$Inherited: () => (T$.LinkedMapOfType$Inherited = dart.constFn(_js_helper.LinkedMap$(core.Type, widget$.Inherited)))(),
    HashMapOfType$Inherited: () => (T$.HashMapOfType$Inherited = dart.constFn(collection.HashMap$(core.Type, widget$.Inherited)))(),
    TAndTToT: () => (T$.TAndTToT = dart.constFn(dart.gFnType(T => [T, [T, T]], T => [core.num])))(),
    TAndTToT$1: () => (T$.TAndTToT$1 = dart.constFn(dart.gFnType(T => [T, [T, T]], T => [core.num])))(),
    PdfPointTodouble: () => (T$.PdfPointTodouble = dart.constFn(dart.fnType(core.double, [point$.PdfPoint])))(),
    ListOfPdfPoint: () => (T$.ListOfPdfPoint = dart.constFn(core.List$(point$.PdfPoint)))(),
    ListOfPdfPointToListOfPdfPoint: () => (T$.ListOfPdfPointToListOfPdfPoint = dart.constFn(dart.fnType(T$.ListOfPdfPoint(), [T$.ListOfPdfPoint()])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const({
        __proto__: table.TableCellVerticalAlignment.prototype,
        [_Enum__name]: "bottom",
        [_Enum_index]: 0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: table.TableCellVerticalAlignment.prototype,
        [_Enum__name]: "middle",
        [_Enum_index]: 1
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: table.TableCellVerticalAlignment.prototype,
        [_Enum__name]: "top",
        [_Enum_index]: 2
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: table.TableCellVerticalAlignment.prototype,
        [_Enum__name]: "full",
        [_Enum_index]: 3
      });
    },
    get C0() {
      return C[0] = dart.constList([C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4], table.TableCellVerticalAlignment);
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: table.TableWidth.prototype,
        [_Enum__name]: "min",
        [_Enum_index]: 0
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: table.TableWidth.prototype,
        [_Enum__name]: "max",
        [_Enum_index]: 1
      });
    },
    get C5() {
      return C[5] = dart.constList([C[6] || CT.C6, C[7] || CT.C7], table.TableWidth);
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: box_border.BorderStyle.prototype,
        [BorderStyle_phase]: 0,
        [BorderStyle_pattern]: null,
        [BorderStyle_paint]: false
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: color$.PdfColor.prototype,
        [PdfColor_blue]: 0,
        [PdfColor_green]: 0,
        [PdfColor_red]: 0,
        [PdfColor_alpha]: 1
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: box_border.BorderSide.prototype,
        [BorderSide_style]: C[9] || CT.C9,
        [BorderSide_width]: 0,
        [BorderSide_color]: C[10] || CT.C10
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: box_border.BorderStyle.prototype,
        [BorderStyle_phase]: 0,
        [BorderStyle_pattern]: null,
        [BorderStyle_paint]: true
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: decoration$.BoxShape.prototype,
        [_Enum__name]: "rectangle",
        [_Enum_index]: 1
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: decoration$.BoxShape.prototype,
        [_Enum__name]: "circle",
        [_Enum_index]: 0
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: geometry.BoxConstraints.prototype,
        [BoxConstraints_maxHeight]: 1 / 0,
        [BoxConstraints_minHeight]: 0,
        [BoxConstraints_maxWidth]: 1 / 0,
        [BoxConstraints_minWidth]: 0
      });
    },
    get C15() {
      return C[15] = dart.constList([], table.TableRow);
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: table.IntrinsicColumnWidth.prototype,
        [flex$0]: null
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 5,
        [EdgeInsets_right]: 5,
        [EdgeInsets_top]: 5,
        [EdgeInsets_left]: 5
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: 1,
        [Alignment_x]: -1
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: 0
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: box_border.BorderSide.prototype,
        [BorderSide_style]: C[11] || CT.C11,
        [BorderSide_width]: 1,
        [BorderSide_color]: C[10] || CT.C10
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: table.TableBorder.prototype,
        [right$]: C[21] || CT.C21,
        [left$]: C[21] || CT.C21,
        [bottom$]: C[21] || CT.C21,
        [top$]: C[21] || CT.C21,
        [verticalInside$]: C[21] || CT.C21,
        [horizontalInside$]: C[21] || CT.C21
      });
    },
    get C22() {
      return C[22] = dart.constMap(core.int, geometry.Alignment, []);
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: flex$.MainAxisSize.prototype,
        [_Enum__name]: "max",
        [_Enum_index]: 1
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: flex$.Axis.prototype,
        [_Enum__name]: "vertical",
        [_Enum_index]: 1
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 0,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 0
      });
    },
    get C26() {
      return C[26] = dart.constList([], widget$.Widget);
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: flex$.Axis.prototype,
        [_Enum__name]: "horizontal",
        [_Enum_index]: 0
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: color$.PdfColor.prototype,
        [PdfColor_blue]: 0.9529411764705882,
        [PdfColor_green]: 0.9098039215686274,
        [PdfColor_red]: 0.7647058823529411,
        [PdfColor_alpha]: 1
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: box_border.Border.prototype,
        [right$]: C[8] || CT.C8,
        [left$]: C[8] || CT.C8,
        [bottom$]: C[8] || CT.C8,
        [top$]: C[8] || CT.C8
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 28.34645669291339,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 56.69291338582678,
        [EdgeInsets_left]: 102.0472440944882
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: color$.PdfColor.prototype,
        [PdfColor_blue]: 0.8705882352941177,
        [PdfColor_green]: 0.7843137254901961,
        [PdfColor_red]: 0.7843137254901961,
        [PdfColor_alpha]: 1
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: color$.PdfColor.prototype,
        [PdfColor_blue]: 0.8117647058823529,
        [PdfColor_green]: 0.7333333333333333,
        [PdfColor_red]: 0.9647058823529412,
        [PdfColor_alpha]: 1
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: box_border.BorderSide.prototype,
        [BorderSide_style]: C[11] || CT.C11,
        [BorderSide_width]: 1,
        [BorderSide_color]: C[34] || CT.C34
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: box_border.Border.prototype,
        [right$]: C[8] || CT.C8,
        [left$]: C[33] || CT.C33,
        [bottom$]: C[8] || CT.C8,
        [top$]: C[8] || CT.C8
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 43.199999999999996,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 72,
        [EdgeInsets_left]: 90
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: color$.PdfColor.prototype,
        [PdfColor_blue]: 0.21176470588235294,
        [PdfColor_green]: 0.2627450980392157,
        [PdfColor_red]: 0.9568627450980393,
        [PdfColor_alpha]: 1
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: box_border.BorderSide.prototype,
        [BorderSide_style]: C[11] || CT.C11,
        [BorderSide_width]: 1,
        [BorderSide_color]: C[38] || CT.C38
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: box_border.Border.prototype,
        [right$]: C[8] || CT.C8,
        [left$]: C[37] || CT.C37,
        [bottom$]: C[8] || CT.C8,
        [top$]: C[8] || CT.C8
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: color$.PdfColor.prototype,
        [PdfColor_blue]: 0.9529411764705882,
        [PdfColor_green]: 0.5882352941176471,
        [PdfColor_red]: 0.12941176470588237,
        [PdfColor_alpha]: 1
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: color$.PdfColor.prototype,
        [PdfColor_blue]: 1,
        [PdfColor_green]: 1,
        [PdfColor_red]: 1,
        [PdfColor_alpha]: 1
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 1,
        [EdgeInsets_right]: 1,
        [EdgeInsets_top]: 1,
        [EdgeInsets_left]: 1
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: color$.PdfColor.prototype,
        [PdfColor_blue]: 1,
        [PdfColor_green]: 0.5411764705882353,
        [PdfColor_red]: 0.26666666666666666,
        [PdfColor_alpha]: 1
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: border_radius.Radius.prototype,
        [Radius_y]: 2,
        [Radius_x]: 2
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: border_radius.BorderRadius.prototype,
        [BorderRadius_bottomRight]: C[44] || CT.C44,
        [BorderRadius_bottomLeft]: C[44] || CT.C44,
        [BorderRadius_topRight]: C[44] || CT.C44,
        [BorderRadius_topLeft]: C[44] || CT.C44
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 5,
        [EdgeInsets_right]: 20,
        [EdgeInsets_top]: 5,
        [EdgeInsets_left]: 20
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: annotation.PdfAnnotFlags.prototype,
        [_Enum__name]: "print",
        [_Enum_index]: 2
      });
    },
    get C46() {
      return C[46] = dart.constSet(annotation.PdfAnnotFlags, [C[47] || CT.C47]);
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: data_types.PdfName.prototype,
        [PdfName_value]: "/Tx"
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: outline.PdfOutlineStyle.prototype,
        [_Enum__name]: "normal",
        [_Enum_index]: 0
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 14.173228346456694,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 0
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 2.834645669291339,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 0
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: box_border.Border.prototype,
        [right$]: C[8] || CT.C8,
        [left$]: C[8] || CT.C8,
        [bottom$]: C[21] || CT.C21,
        [top$]: C[8] || CT.C8
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: decoration$.BoxDecoration.prototype,
        [BoxDecoration_boxShadow]: null,
        [BoxDecoration_gradient]: null,
        [BoxDecoration_image]: null,
        [BoxDecoration_shape]: C[12] || CT.C12,
        [BoxDecoration_borderRadius]: null,
        [BoxDecoration_border]: C[53] || CT.C53,
        [BoxDecoration_color]: null
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 14.173228346456694,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 8.503937007874017,
        [EdgeInsets_left]: 0
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: box_border.BorderSide.prototype,
        [BorderSide_style]: C[11] || CT.C11,
        [BorderSide_width]: 0.2,
        [BorderSide_color]: C[10] || CT.C10
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: box_border.Border.prototype,
        [right$]: C[8] || CT.C8,
        [left$]: C[8] || CT.C8,
        [bottom$]: C[57] || CT.C57,
        [top$]: C[8] || CT.C8
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: decoration$.BoxDecoration.prototype,
        [BoxDecoration_boxShadow]: null,
        [BoxDecoration_gradient]: null,
        [BoxDecoration_image]: null,
        [BoxDecoration_shape]: C[12] || CT.C12,
        [BoxDecoration_borderRadius]: null,
        [BoxDecoration_border]: C[56] || CT.C56,
        [BoxDecoration_color]: null
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 11.338582677165356,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 5.669291338582678,
        [EdgeInsets_left]: 0
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 2,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 0
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: text$1.TextAlign.prototype,
        [_Enum__name]: "justify",
        [_Enum_index]: 3
      });
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: text$1.TextAlign.prototype,
        [_Enum__name]: "left",
        [_Enum_index]: 0
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 5.669291338582678,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 0
      });
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 0,
        [EdgeInsets_right]: 5.669291338582678,
        [EdgeInsets_top]: 4.251968503937008,
        [EdgeInsets_left]: 14.173228346456694
      });
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: basic.BoxFit.prototype,
        [_Enum__name]: "contain",
        [_Enum_index]: 1
      });
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: pie_chart.PieLegendPosition.prototype,
        [_Enum__name]: "none",
        [_Enum_index]: 0
      });
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: pie_chart.PieLegendPosition.prototype,
        [_Enum__name]: "auto",
        [_Enum_index]: 1
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: pie_chart.PieLegendPosition.prototype,
        [_Enum__name]: "inside",
        [_Enum_index]: 2
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: pie_chart.PieLegendPosition.prototype,
        [_Enum__name]: "outside",
        [_Enum_index]: 3
      });
    },
    get C65() {
      return C[65] = dart.constList([C[66] || CT.C66, C[67] || CT.C67, C[68] || CT.C68, C[69] || CT.C69], pie_chart.PieLegendPosition);
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: point_chart.ValuePosition.prototype,
        [_Enum__name]: "auto",
        [_Enum_index]: 4
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: point$.PdfPoint.prototype,
        [PdfPoint_y]: 0,
        [PdfPoint_x]: 0
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: point_chart.ValuePosition.prototype,
        [_Enum__name]: "left",
        [_Enum_index]: 0
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: point_chart.ValuePosition.prototype,
        [_Enum__name]: "top",
        [_Enum_index]: 1
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: point_chart.ValuePosition.prototype,
        [_Enum__name]: "right",
        [_Enum_index]: 2
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: point_chart.ValuePosition.prototype,
        [_Enum__name]: "bottom",
        [_Enum_index]: 3
      });
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: wrap$.WrapAlignment.prototype,
        [_Enum__name]: "start",
        [_Enum_index]: 0
      });
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: wrap$.WrapAlignment.prototype,
        [_Enum__name]: "end",
        [_Enum_index]: 1
      });
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: wrap$.WrapAlignment.prototype,
        [_Enum__name]: "center",
        [_Enum_index]: 2
      });
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: wrap$.WrapAlignment.prototype,
        [_Enum__name]: "spaceBetween",
        [_Enum_index]: 3
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: wrap$.WrapAlignment.prototype,
        [_Enum__name]: "spaceAround",
        [_Enum_index]: 4
      });
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: wrap$.WrapAlignment.prototype,
        [_Enum__name]: "spaceEvenly",
        [_Enum_index]: 5
      });
    },
    get C76() {
      return C[76] = dart.constList([C[77] || CT.C77, C[78] || CT.C78, C[79] || CT.C79, C[80] || CT.C80, C[81] || CT.C81, C[82] || CT.C82], wrap$.WrapAlignment);
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: wrap$.WrapCrossAlignment.prototype,
        [_Enum__name]: "start",
        [_Enum_index]: 0
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: wrap$.WrapCrossAlignment.prototype,
        [_Enum__name]: "end",
        [_Enum_index]: 1
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: wrap$.WrapCrossAlignment.prototype,
        [_Enum__name]: "center",
        [_Enum_index]: 2
      });
    },
    get C83() {
      return C[83] = dart.constList([C[84] || CT.C84, C[85] || CT.C85, C[86] || CT.C86], wrap$.WrapCrossAlignment);
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: flex$.VerticalDirection.prototype,
        [_Enum__name]: "down",
        [_Enum_index]: 1
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: 1,
        [Alignment_x]: 1
      });
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: geometry.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 0,
        [EdgeInsets_right]: 5,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 0
      });
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: decoration$.BoxDecoration.prototype,
        [BoxDecoration_boxShadow]: null,
        [BoxDecoration_gradient]: null,
        [BoxDecoration_image]: null,
        [BoxDecoration_shape]: C[12] || CT.C12,
        [BoxDecoration_borderRadius]: null,
        [BoxDecoration_border]: null,
        [BoxDecoration_color]: C[40] || CT.C40
      });
    },
    get C91() {
      return C[91] = dart.constList([C[72] || CT.C72, C[73] || CT.C73, C[74] || CT.C74, C[75] || CT.C75, C[70] || CT.C70], point_chart.ValuePosition);
    },
    get C92() {
      return C[92] = dart.fn(grid_axis.GridAxis._defaultFormat, T$.numToString());
    },
    get C94() {
      return C[94] = dart.const({
        __proto__: stack.StackFit.prototype,
        [_Enum__name]: "loose",
        [_Enum_index]: 0
      });
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: stack.StackFit.prototype,
        [_Enum__name]: "expand",
        [_Enum_index]: 1
      });
    },
    get C96() {
      return C[96] = dart.const({
        __proto__: stack.StackFit.prototype,
        [_Enum__name]: "passthrough",
        [_Enum_index]: 2
      });
    },
    get C93() {
      return C[93] = dart.constList([C[94] || CT.C94, C[95] || CT.C95, C[96] || CT.C96], stack.StackFit);
    },
    get C98() {
      return C[98] = dart.const({
        __proto__: stack.Overflow.prototype,
        [_Enum__name]: "visible",
        [_Enum_index]: 0
      });
    },
    get C99() {
      return C[99] = dart.const({
        __proto__: stack.Overflow.prototype,
        [_Enum__name]: "clip",
        [_Enum_index]: 1
      });
    },
    get C97() {
      return C[97] = dart.constList([C[98] || CT.C98, C[99] || CT.C99], stack.Overflow);
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: text$1.TextDirection.prototype,
        [_Enum__name]: "rtl",
        [_Enum_index]: 1
      });
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: text$1.TextDirection.prototype,
        [_Enum__name]: "ltr",
        [_Enum_index]: 0
      });
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: barcode_operations.BarcodeTextAlign.prototype,
        [_Enum__name]: "left",
        [_Enum_index]: 0
      });
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: barcode_operations.BarcodeTextAlign.prototype,
        [_Enum__name]: "center",
        [_Enum_index]: 1
      });
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: barcode_operations.BarcodeTextAlign.prototype,
        [_Enum__name]: "right",
        [_Enum_index]: 2
      });
    },
    get C105() {
      return C[105] = dart.const({
        __proto__: decoration$.DecorationPosition.prototype,
        [_Enum__name]: "background",
        [_Enum_index]: 0
      });
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: geometry.BoxConstraints.prototype,
        [BoxConstraints_maxHeight]: 1 / 0,
        [BoxConstraints_minHeight]: 1 / 0,
        [BoxConstraints_maxWidth]: 1 / 0,
        [BoxConstraints_minWidth]: 1 / 0
      });
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: brush$.SvgTextAnchor.prototype,
        [_Enum__name]: "start",
        [_Enum_index]: 0
      });
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: brush$.SvgTextAnchor.prototype,
        [_Enum__name]: "middle",
        [_Enum_index]: 1
      });
    },
    get C109() {
      return C[109] = dart.const({
        __proto__: brush$.SvgTextAnchor.prototype,
        [_Enum__name]: "end",
        [_Enum_index]: 2
      });
    },
    get C111() {
      return C[111] = dart.const({
        __proto__: parser$.SvgUnit.prototype,
        [_Enum__name]: "pixels",
        [_Enum_index]: 0
      });
    },
    get C112() {
      return C[112] = dart.const({
        __proto__: parser$.SvgUnit.prototype,
        [_Enum__name]: "milimeters",
        [_Enum_index]: 1
      });
    },
    get C113() {
      return C[113] = dart.const({
        __proto__: parser$.SvgUnit.prototype,
        [_Enum__name]: "centimeters",
        [_Enum_index]: 2
      });
    },
    get C114() {
      return C[114] = dart.const({
        __proto__: parser$.SvgUnit.prototype,
        [_Enum__name]: "inch",
        [_Enum_index]: 3
      });
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: parser$.SvgUnit.prototype,
        [_Enum__name]: "em",
        [_Enum_index]: 4
      });
    },
    get C116() {
      return C[116] = dart.const({
        __proto__: parser$.SvgUnit.prototype,
        [_Enum__name]: "percent",
        [_Enum_index]: 5
      });
    },
    get C117() {
      return C[117] = dart.const({
        __proto__: parser$.SvgUnit.prototype,
        [_Enum__name]: "points",
        [_Enum_index]: 6
      });
    },
    get C118() {
      return C[118] = dart.const({
        __proto__: parser$.SvgUnit.prototype,
        [_Enum__name]: "direct",
        [_Enum_index]: 7
      });
    },
    get C110() {
      return C[110] = dart.constList([C[111] || CT.C111, C[112] || CT.C112, C[113] || CT.C113, C[114] || CT.C114, C[115] || CT.C115, C[116] || CT.C116, C[117] || CT.C117, C[118] || CT.C118], parser$.SvgUnit);
    },
    get C119() {
      return C[119] = dart.constMap(core.String, parser$.SvgUnit, ["px", C[111] || CT.C111, "mm", C[112] || CT.C112, "cm", C[113] || CT.C113, "in", C[114] || CT.C114, "em", C[115] || CT.C115, "%", C[116] || CT.C116, "pt", C[117] || CT.C117, "", C[118] || CT.C118]);
    },
    get C120() {
      return C[120] = dart.const({
        __proto__: transform$.SvgTransform.prototype,
        [matrix$]: null
      });
    },
    get C121() {
      return C[121] = dart.const({
        __proto__: clip_path.SvgClipPath.prototype,
        [painter$2]: null,
        [isEmpty$]: true,
        [children$5]: null
      });
    },
    get C123() {
      return C[123] = dart.const({
        __proto__: gradient$.GradientUnits.prototype,
        [_Enum__name]: "objectBoundingBox",
        [_Enum_index]: 0
      });
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: gradient$.GradientUnits.prototype,
        [_Enum__name]: "userSpaceOnUse",
        [_Enum_index]: 1
      });
    },
    get C122() {
      return C[122] = dart.constList([C[123] || CT.C123, C[124] || CT.C124], gradient$.GradientUnits);
    },
    get C125() {
      return C[125] = dart.const({
        __proto__: color$0.SvgColor.prototype,
        [inherit$]: false,
        [opacity$]: null,
        [color$7]: null
      });
    },
    get C126() {
      return C[126] = dart.const({
        __proto__: color$0.SvgColor.prototype,
        [inherit$]: false,
        [opacity$]: null,
        [color$7]: C[10] || CT.C10
      });
    },
    get C127() {
      return C[127] = dart.const({
        __proto__: color$0.SvgColor.prototype,
        [inherit$]: true,
        [opacity$]: null,
        [color$7]: null
      });
    },
    get C128() {
      return C[128] = dart.constList([C[107] || CT.C107, C[108] || CT.C108, C[109] || CT.C109], brush$.SvgTextAnchor);
    },
    get C130() {
      return C[130] = dart.const({
        __proto__: parser$.SvgNumeric.prototype,
        [brush$1]: null,
        [unit$]: C[118] || CT.C118,
        [value$6]: 16
      });
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: graphics.PdfLineJoin.prototype,
        [_Enum__name]: "miter",
        [_Enum_index]: 0
      });
    },
    get C132() {
      return C[132] = dart.const({
        __proto__: graphics.PdfLineCap.prototype,
        [_Enum__name]: "butt",
        [_Enum_index]: 0
      });
    },
    get C133() {
      return C[133] = dart.constList([], core.double);
    },
    get C134() {
      return C[134] = dart.const({
        __proto__: parser$.SvgNumeric.prototype,
        [brush$1]: null,
        [unit$]: C[111] || CT.C111,
        [value$6]: 1
      });
    },
    get C129() {
      return C[129] = dart.const({
        __proto__: brush$.SvgBrush.prototype,
        [mask$]: null,
        [blendMode$]: null,
        [textAnchor$]: C[107] || CT.C107,
        [fontWeight$]: "normal",
        [fontStyle$]: "normal",
        [fontFamily$]: "sans-serif",
        [fontSize$]: C[130] || CT.C130,
        [strokeMiterLimit$]: 4,
        [strokeLineJoin$]: C[131] || CT.C131,
        [strokeLineCap$]: C[132] || CT.C132,
        [strokeDashOffset$]: 0,
        [strokeDashArray$]: C[133] || CT.C133,
        [strokeWidth$4]: C[134] || CT.C134,
        [strokeOpacity$]: 1,
        [stroke$]: C[125] || CT.C125,
        [fillOpacity$]: 1,
        [fillEvenOdd$]: false,
        [fill$]: C[126] || CT.C126,
        [opacity$0]: 1
      });
    },
    get C136() {
      return C[136] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "normal",
        [_Enum_index]: 0
      });
    },
    get C137() {
      return C[137] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "multiply",
        [_Enum_index]: 1
      });
    },
    get C138() {
      return C[138] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "screen",
        [_Enum_index]: 2
      });
    },
    get C139() {
      return C[139] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "overlay",
        [_Enum_index]: 3
      });
    },
    get C140() {
      return C[140] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "darken",
        [_Enum_index]: 4
      });
    },
    get C141() {
      return C[141] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "lighten",
        [_Enum_index]: 5
      });
    },
    get C142() {
      return C[142] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "color",
        [_Enum_index]: 14
      });
    },
    get C143() {
      return C[143] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "hardLight",
        [_Enum_index]: 8
      });
    },
    get C144() {
      return C[144] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "softLight",
        [_Enum_index]: 9
      });
    },
    get C145() {
      return C[145] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "difference",
        [_Enum_index]: 10
      });
    },
    get C146() {
      return C[146] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "exclusion",
        [_Enum_index]: 11
      });
    },
    get C147() {
      return C[147] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "hue",
        [_Enum_index]: 12
      });
    },
    get C148() {
      return C[148] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "saturation",
        [_Enum_index]: 13
      });
    },
    get C149() {
      return C[149] = dart.const({
        __proto__: graphic_state.PdfBlendMode.prototype,
        [_Enum__name]: "luminosity",
        [_Enum_index]: 15
      });
    },
    get C135() {
      return C[135] = dart.constMap(core.String, graphic_state.PdfBlendMode, ["normal", C[136] || CT.C136, "multiply", C[137] || CT.C137, "screen", C[138] || CT.C138, "overlay", C[139] || CT.C139, "darken", C[140] || CT.C140, "lighten", C[141] || CT.C141, "color-dodge", C[142] || CT.C142, "color-burn", C[142] || CT.C142, "hard-light", C[143] || CT.C143, "soft-light", C[144] || CT.C144, "difference", C[145] || CT.C145, "exclusion", C[146] || CT.C146, "hue", C[147] || CT.C147, "saturation", C[148] || CT.C148, "color", C[142] || CT.C142, "luminosity", C[149] || CT.C149]);
    },
    get C151() {
      return C[151] = dart.const({
        __proto__: graphics.PdfLineCap.prototype,
        [_Enum__name]: "round",
        [_Enum_index]: 1
      });
    },
    get C152() {
      return C[152] = dart.const({
        __proto__: graphics.PdfLineCap.prototype,
        [_Enum__name]: "square",
        [_Enum_index]: 2
      });
    },
    get C150() {
      return C[150] = dart.constMap(core.String, graphics.PdfLineCap, ["butt", C[132] || CT.C132, "round", C[151] || CT.C151, "square", C[152] || CT.C152]);
    },
    get C154() {
      return C[154] = dart.const({
        __proto__: graphics.PdfLineJoin.prototype,
        [_Enum__name]: "bevel",
        [_Enum_index]: 2
      });
    },
    get C155() {
      return C[155] = dart.const({
        __proto__: graphics.PdfLineJoin.prototype,
        [_Enum__name]: "round",
        [_Enum_index]: 1
      });
    },
    get C153() {
      return C[153] = dart.constMap(core.String, graphics.PdfLineJoin, ["miter ", C[131] || CT.C131, "bevel", C[154] || CT.C154, "round", C[155] || CT.C155]);
    },
    get C156() {
      return C[156] = dart.constMap(core.String, brush$.SvgTextAnchor, ["start", C[107] || CT.C107, "middle", C[108] || CT.C108, "end", C[109] || CT.C109]);
    },
    get C157() {
      return C[157] = dart.const({
        __proto__: basic.BoxFit.prototype,
        [_Enum__name]: "cover",
        [_Enum_index]: 2
      });
    },
    get C158() {
      return C[158] = dart.const({
        __proto__: color$.PdfColor.prototype,
        [PdfColor_blue]: 0.39215686274509803,
        [PdfColor_green]: 0.35294117647058826,
        [PdfColor_red]: 0.27058823529411763,
        [PdfColor_alpha]: 1
      });
    },
    get C160() {
      return C[160] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_Enum__name]: "courier",
        [_Enum_index]: 0
      });
    },
    get C161() {
      return C[161] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_Enum__name]: "courierBold",
        [_Enum_index]: 1
      });
    },
    get C162() {
      return C[162] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_Enum__name]: "courierBoldOblique",
        [_Enum_index]: 2
      });
    },
    get C163() {
      return C[163] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_Enum__name]: "courierOblique",
        [_Enum_index]: 3
      });
    },
    get C164() {
      return C[164] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_Enum__name]: "helvetica",
        [_Enum_index]: 4
      });
    },
    get C165() {
      return C[165] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_Enum__name]: "helveticaBold",
        [_Enum_index]: 5
      });
    },
    get C166() {
      return C[166] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_Enum__name]: "helveticaBoldOblique",
        [_Enum_index]: 6
      });
    },
    get C167() {
      return C[167] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_Enum__name]: "helveticaOblique",
        [_Enum_index]: 7
      });
    },
    get C168() {
      return C[168] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_Enum__name]: "times",
        [_Enum_index]: 8
      });
    },
    get C169() {
      return C[169] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_Enum__name]: "timesBold",
        [_Enum_index]: 9
      });
    },
    get C170() {
      return C[170] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_Enum__name]: "timesBoldItalic",
        [_Enum_index]: 10
      });
    },
    get C171() {
      return C[171] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_Enum__name]: "timesItalic",
        [_Enum_index]: 11
      });
    },
    get C172() {
      return C[172] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_Enum__name]: "symbol",
        [_Enum_index]: 12
      });
    },
    get C173() {
      return C[173] = dart.const({
        __proto__: font$.Type1Fonts.prototype,
        [_Enum__name]: "zapfDingbats",
        [_Enum_index]: 13
      });
    },
    get C159() {
      return C[159] = dart.constList([C[160] || CT.C160, C[161] || CT.C161, C[162] || CT.C162, C[163] || CT.C163, C[164] || CT.C164, C[165] || CT.C165, C[166] || CT.C166, C[167] || CT.C167, C[168] || CT.C168, C[169] || CT.C169, C[170] || CT.C170, C[171] || CT.C171, C[172] || CT.C172, C[173] || CT.C173], font$.Type1Fonts);
    },
    get C174() {
      return C[174] = dart.constMap(font$.Type1Fonts, core.String, [C[160] || CT.C160, "Courier", C[161] || CT.C161, "Courier-Bold", C[162] || CT.C162, "Courier-BoldOblique", C[163] || CT.C163, "Courier-Oblique", C[164] || CT.C164, "Helvetica", C[165] || CT.C165, "Helvetica-Bold", C[166] || CT.C166, "Helvetica-BoldOblique", C[167] || CT.C167, "Helvetica-Oblique", C[168] || CT.C168, "Times-Roman", C[169] || CT.C169, "Times-Bold", C[170] || CT.C170, "Times-BoldItalic", C[171] || CT.C171, "Times-Italic", C[172] || CT.C172, "Symbol", C[173] || CT.C173, "ZapfDingbats"]);
    },
    get C176() {
      return C[176] = dart.const({
        __proto__: decoration$.DecorationPosition.prototype,
        [_Enum__name]: "foreground",
        [_Enum_index]: 1
      });
    },
    get C175() {
      return C[175] = dart.constList([C[105] || CT.C105, C[176] || CT.C176], decoration$.DecorationPosition);
    },
    get C178() {
      return C[178] = dart.const({
        __proto__: decoration$.TileMode.prototype,
        [_Enum__name]: "clamp",
        [_Enum_index]: 0
      });
    },
    get C177() {
      return C[177] = dart.constList([C[178] || CT.C178], decoration$.TileMode);
    },
    get C179() {
      return C[179] = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: -1
      });
    },
    get C180() {
      return C[180] = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: 1
      });
    },
    get C181() {
      return C[181] = dart.constList([C[13] || CT.C13, C[12] || CT.C12], decoration$.BoxShape);
    },
    get C183() {
      return C[183] = dart.const({
        __proto__: decoration$.PaintPhase.prototype,
        [_Enum__name]: "all",
        [_Enum_index]: 0
      });
    },
    get C184() {
      return C[184] = dart.const({
        __proto__: decoration$.PaintPhase.prototype,
        [_Enum__name]: "background",
        [_Enum_index]: 1
      });
    },
    get C185() {
      return C[185] = dart.const({
        __proto__: decoration$.PaintPhase.prototype,
        [_Enum__name]: "foreground",
        [_Enum_index]: 2
      });
    },
    get C182() {
      return C[182] = dart.constList([C[183] || CT.C183, C[184] || CT.C184, C[185] || CT.C185], decoration$.PaintPhase);
    },
    get C187() {
      return C[187] = dart.const({
        __proto__: text_style.FontWeight.prototype,
        [_Enum__name]: "normal",
        [_Enum_index]: 0
      });
    },
    get C188() {
      return C[188] = dart.const({
        __proto__: text_style.FontWeight.prototype,
        [_Enum__name]: "bold",
        [_Enum_index]: 1
      });
    },
    get C186() {
      return C[186] = dart.constList([C[187] || CT.C187, C[188] || CT.C188], text_style.FontWeight);
    },
    get C190() {
      return C[190] = dart.const({
        __proto__: text_style.FontStyle.prototype,
        [_Enum__name]: "normal",
        [_Enum_index]: 0
      });
    },
    get C191() {
      return C[191] = dart.const({
        __proto__: text_style.FontStyle.prototype,
        [_Enum__name]: "italic",
        [_Enum_index]: 1
      });
    },
    get C189() {
      return C[189] = dart.constList([C[190] || CT.C190, C[191] || CT.C191], text_style.FontStyle);
    },
    get C193() {
      return C[193] = dart.const({
        __proto__: text_style.TextDecorationStyle.prototype,
        [_Enum__name]: "solid",
        [_Enum_index]: 0
      });
    },
    get C194() {
      return C[194] = dart.const({
        __proto__: text_style.TextDecorationStyle.prototype,
        [_Enum__name]: "double",
        [_Enum_index]: 1
      });
    },
    get C192() {
      return C[192] = dart.constList([C[193] || CT.C193, C[194] || CT.C194], text_style.TextDecorationStyle);
    },
    get C195() {
      return C[195] = dart.const({
        __proto__: text_style.TextDecoration.prototype,
        [_mask$]: 0
      });
    },
    get C196() {
      return C[196] = dart.const({
        __proto__: text_style.TextDecoration.prototype,
        [_mask$]: 1
      });
    },
    get C197() {
      return C[197] = dart.const({
        __proto__: text_style.TextDecoration.prototype,
        [_mask$]: 2
      });
    },
    get C198() {
      return C[198] = dart.const({
        __proto__: text_style.TextDecoration.prototype,
        [_mask$]: 4
      });
    },
    get C199() {
      return C[199] = dart.constList([], font$.Font);
    },
    get C201() {
      return C[201] = dart.const({
        __proto__: flex$.FlexFit.prototype,
        [_Enum__name]: "tight",
        [_Enum_index]: 0
      });
    },
    get C202() {
      return C[202] = dart.const({
        __proto__: flex$.FlexFit.prototype,
        [_Enum__name]: "loose",
        [_Enum_index]: 1
      });
    },
    get C200() {
      return C[200] = dart.constList([C[201] || CT.C201, C[202] || CT.C202], flex$.FlexFit);
    },
    get C203() {
      return C[203] = dart.constList([C[27] || CT.C27, C[24] || CT.C24], flex$.Axis);
    },
    get C205() {
      return C[205] = dart.const({
        __proto__: flex$.MainAxisSize.prototype,
        [_Enum__name]: "min",
        [_Enum_index]: 0
      });
    },
    get C204() {
      return C[204] = dart.constList([C[205] || CT.C205, C[23] || CT.C23], flex$.MainAxisSize);
    },
    get C207() {
      return C[207] = dart.const({
        __proto__: flex$.MainAxisAlignment.prototype,
        [_Enum__name]: "start",
        [_Enum_index]: 0
      });
    },
    get C208() {
      return C[208] = dart.const({
        __proto__: flex$.MainAxisAlignment.prototype,
        [_Enum__name]: "end",
        [_Enum_index]: 1
      });
    },
    get C209() {
      return C[209] = dart.const({
        __proto__: flex$.MainAxisAlignment.prototype,
        [_Enum__name]: "center",
        [_Enum_index]: 2
      });
    },
    get C210() {
      return C[210] = dart.const({
        __proto__: flex$.MainAxisAlignment.prototype,
        [_Enum__name]: "spaceBetween",
        [_Enum_index]: 3
      });
    },
    get C211() {
      return C[211] = dart.const({
        __proto__: flex$.MainAxisAlignment.prototype,
        [_Enum__name]: "spaceAround",
        [_Enum_index]: 4
      });
    },
    get C212() {
      return C[212] = dart.const({
        __proto__: flex$.MainAxisAlignment.prototype,
        [_Enum__name]: "spaceEvenly",
        [_Enum_index]: 5
      });
    },
    get C206() {
      return C[206] = dart.constList([C[207] || CT.C207, C[208] || CT.C208, C[209] || CT.C209, C[210] || CT.C210, C[211] || CT.C211, C[212] || CT.C212], flex$.MainAxisAlignment);
    },
    get C214() {
      return C[214] = dart.const({
        __proto__: flex$.CrossAxisAlignment.prototype,
        [_Enum__name]: "start",
        [_Enum_index]: 0
      });
    },
    get C215() {
      return C[215] = dart.const({
        __proto__: flex$.CrossAxisAlignment.prototype,
        [_Enum__name]: "end",
        [_Enum_index]: 1
      });
    },
    get C216() {
      return C[216] = dart.const({
        __proto__: flex$.CrossAxisAlignment.prototype,
        [_Enum__name]: "center",
        [_Enum_index]: 2
      });
    },
    get C217() {
      return C[217] = dart.const({
        __proto__: flex$.CrossAxisAlignment.prototype,
        [_Enum__name]: "stretch",
        [_Enum_index]: 3
      });
    },
    get C213() {
      return C[213] = dart.constList([C[214] || CT.C214, C[215] || CT.C215, C[216] || CT.C216, C[217] || CT.C217], flex$.CrossAxisAlignment);
    },
    get C219() {
      return C[219] = dart.const({
        __proto__: flex$.VerticalDirection.prototype,
        [_Enum__name]: "up",
        [_Enum_index]: 0
      });
    },
    get C218() {
      return C[218] = dart.constList([C[219] || CT.C219, C[87] || CT.C87], flex$.VerticalDirection);
    },
    get C221() {
      return C[221] = dart.const({
        __proto__: text$1.TextAlign.prototype,
        [_Enum__name]: "right",
        [_Enum_index]: 1
      });
    },
    get C222() {
      return C[222] = dart.const({
        __proto__: text$1.TextAlign.prototype,
        [_Enum__name]: "center",
        [_Enum_index]: 2
      });
    },
    get C220() {
      return C[220] = dart.constList([C[61] || CT.C61, C[221] || CT.C221, C[222] || CT.C222, C[60] || CT.C60], text$1.TextAlign);
    },
    get C223() {
      return C[223] = dart.constList([C[101] || CT.C101, C[100] || CT.C100], text$1.TextDirection);
    },
    get C225() {
      return C[225] = dart.const({
        __proto__: text$1.TextOverflow.prototype,
        [_Enum__name]: "clip",
        [_Enum_index]: 0
      });
    },
    get C226() {
      return C[226] = dart.const({
        __proto__: text$1.TextOverflow.prototype,
        [_Enum__name]: "visible",
        [_Enum_index]: 1
      });
    },
    get C227() {
      return C[227] = dart.const({
        __proto__: text$1.TextOverflow.prototype,
        [_Enum__name]: "span",
        [_Enum_index]: 2
      });
    },
    get C224() {
      return C[224] = dart.constList([C[225] || CT.C225, C[226] || CT.C226, C[227] || CT.C227], text$1.TextOverflow);
    },
    get C228() {
      return C[228] = dart.constSet(core.int, [10, 9, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288]);
    },
    get C230() {
      return C[230] = dart.const({
        __proto__: page$.PageOrientation.prototype,
        [_Enum__name]: "natural",
        [_Enum_index]: 0
      });
    },
    get C231() {
      return C[231] = dart.const({
        __proto__: page$.PageOrientation.prototype,
        [_Enum__name]: "landscape",
        [_Enum_index]: 1
      });
    },
    get C232() {
      return C[232] = dart.const({
        __proto__: page$.PageOrientation.prototype,
        [_Enum__name]: "portrait",
        [_Enum_index]: 2
      });
    },
    get C229() {
      return C[229] = dart.constList([C[230] || CT.C230, C[231] || CT.C231, C[232] || CT.C232], page$.PageOrientation);
    },
    get C233() {
      return C[233] = dart.const({
        __proto__: document.PdfPageMode.prototype,
        [_Enum__name]: "none",
        [_Enum_index]: 0
      });
    },
    get C234() {
      return C[234] = dart.const({
        __proto__: document.PdfVersion.prototype,
        [_Enum__name]: "pdf_1_5",
        [_Enum_index]: 1
      });
    },
    get C236() {
      return C[236] = dart.fn(math.min, T$.TAndTToT());
    },
    get C235() {
      return C[235] = dart.const(dart.gbind(C[236] || CT.C236, core.double));
    },
    get C238() {
      return C[238] = dart.fn(math.max, T$.TAndTToT$1());
    },
    get C237() {
      return C[237] = dart.const(dart.gbind(C[238] || CT.C238, core.double));
    },
    get C239() {
      return C[239] = dart.const({
        __proto__: border_radius.Radius.prototype,
        [Radius_y]: 0,
        [Radius_x]: 0
      });
    },
    get C240() {
      return C[240] = dart.const({
        __proto__: border_radius.BorderRadius.prototype,
        [BorderRadius_bottomRight]: C[239] || CT.C239,
        [BorderRadius_bottomLeft]: C[239] || CT.C239,
        [BorderRadius_topRight]: C[239] || CT.C239,
        [BorderRadius_topLeft]: C[239] || CT.C239
      });
    },
    get C242() {
      return C[242] = dart.constList([3, 3], core.int);
    },
    get C241() {
      return C[241] = dart.const({
        __proto__: box_border.BorderStyle.prototype,
        [BorderStyle_phase]: 0,
        [BorderStyle_pattern]: C[242] || CT.C242,
        [BorderStyle_paint]: true
      });
    },
    get C244() {
      return C[244] = dart.constList([1, 1], core.int);
    },
    get C243() {
      return C[243] = dart.const({
        __proto__: box_border.BorderStyle.prototype,
        [BorderStyle_phase]: 0,
        [BorderStyle_pattern]: C[244] || CT.C244,
        [BorderStyle_paint]: true
      });
    },
    get C246() {
      return C[246] = dart.const({
        __proto__: basic.BoxFit.prototype,
        [_Enum__name]: "fill",
        [_Enum_index]: 0
      });
    },
    get C247() {
      return C[247] = dart.const({
        __proto__: basic.BoxFit.prototype,
        [_Enum__name]: "fitWidth",
        [_Enum_index]: 3
      });
    },
    get C248() {
      return C[248] = dart.const({
        __proto__: basic.BoxFit.prototype,
        [_Enum__name]: "fitHeight",
        [_Enum_index]: 4
      });
    },
    get C249() {
      return C[249] = dart.const({
        __proto__: basic.BoxFit.prototype,
        [_Enum__name]: "none",
        [_Enum_index]: 5
      });
    },
    get C250() {
      return C[250] = dart.const({
        __proto__: basic.BoxFit.prototype,
        [_Enum__name]: "scaleDown",
        [_Enum_index]: 6
      });
    },
    get C245() {
      return C[245] = dart.constList([C[246] || CT.C246, C[64] || CT.C64, C[157] || CT.C157, C[247] || CT.C247, C[248] || CT.C248, C[249] || CT.C249, C[250] || CT.C250], basic.BoxFit);
    },
    get C251() {
      return C[251] = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: 1,
        [Alignment_x]: 0
      });
    },
    get C252() {
      return C[252] = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: -1,
        [Alignment_x]: -1
      });
    },
    get C253() {
      return C[253] = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: -1,
        [Alignment_x]: 0
      });
    },
    get C254() {
      return C[254] = dart.const({
        __proto__: geometry.Alignment.prototype,
        [Alignment_y]: -1,
        [Alignment_x]: 1
      });
    },
    get C255() {
      return C[255] = dart.const({
        __proto__: geometry.FittedSizes.prototype,
        [destination$]: C[71] || CT.C71,
        [source$]: C[71] || CT.C71
      });
    }
  }, false);
  var C = Array(256).fill(void 0);
  var I = [
    "package:pdf/src/widgets/table.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/box_border.dart",
    "package:pdf/src/widgets/box_border.dart",
    "package:pdf/src/widgets/multi_page.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/table.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/widget.dart",
    "package:pdf/src/widgets/widget.dart",
    "package:pdf/src/widgets/progress.dart",
    "package:pdf/src/widgets/partitions.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/partitions.dart",
    "package:pdf/src/widgets/grid_view.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/grid_view.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/grid_paper.dart",
    "package:pdf/src/widgets/grid_paper.dart",
    "package:pdf/src/widgets/forms.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/content.dart",
    "package:pdf/src/widgets/content.dart",
    "package:pdf/src/widgets/clip.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/chart/pie_chart.dart",
    "package:pdf/src/widgets/chart/chart.dart",
    "package:pdf/src/widgets/chart/pie_chart.dart",
    "package:pdf/src/widgets/chart/point_chart.dart",
    "package:pdf/src/widgets/chart/line_chart.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/chart/line_chart.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/chart/point_chart.dart",
    "package:pdf/src/widgets/wrap.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/wrap.dart",
    "package:pdf/src/widgets/chart/legend.dart",
    "package:pdf/src/widgets/chart/grid_radial.dart",
    "package:pdf/src/widgets/chart/grid_axis.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/chart/grid_axis.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/chart/grid_cartesian.dart",
    "package:pdf/src/widgets/chart/grid_cartesian.dart",
    "package:pdf/src/widgets/stack.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/stack.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/chart/bar_chart.dart",
    "package:pdf/src/widgets/chart/bar_chart.dart",
    "package:pdf/src/widgets/barcode.dart",
    "package:pdf/src/widgets/shape.dart",
    "package:pdf/src/widgets/container.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/container.dart",
    "package:pdf/src/svg/mask_path.dart",
    "package:pdf/src/svg/operation.dart",
    "package:pdf/src/svg/use.dart",
    "package:pdf/src/svg/text.dart",
    "package:pdf/src/svg/group.dart",
    "package:pdf/src/svg/symbol.dart",
    "package:pdf/src/svg/path.dart",
    "package:pdf/src/svg/image.dart",
    "package:pdf/src/svg/parser.dart",
    "package:pdf/src/svg/transform.dart",
    "package:pdf/src/svg/clip_path.dart",
    "package:pdf/src/svg/gradient.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/svg/gradient.dart",
    "package:pdf/src/svg/color.dart",
    "package:pdf/src/svg/brush.dart",
    "package:pdf/src/svg/painter.dart",
    "package:pdf/src/widgets/svg.dart",
    "package:pdf/src/widgets/decoration.dart",
    "package:pdf/src/widgets/placeholders.dart",
    "package:pdf/src/widgets/icon.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/theme.dart",
    "package:pdf/src/widgets/theme.dart",
    "package:pdf/src/widgets/font.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/decoration.dart",
    "package:pdf/src/widgets/text_style.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/text_style.dart",
    "package:pdf/src/widgets/flex.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/flex.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/multi_page.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/page.dart",
    "package:pdf/src/widgets/page.dart",
    "package:pdf/src/widgets/image_provider.dart",
    "package:pdf/src/widgets/image.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/image.dart",
    "package:pdf/src/widgets/text.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/text.dart",
    "package:pdf/src/widgets/page_theme.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/document.dart",
    "package:pdf/src/widgets/document.dart",
    "package:pdf/src/widgets/border_radius.dart",
    "package:pdf/src/widgets/basic.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/basic.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/geometry.dart",
    "package:pdf/src/widgets/geometry.dart",
    "package:pdf/src/widgets/annotations.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pdf-3.8.4/lib/src/widgets/annotations.dart"
  ];
  var children$ = dart.privateName(table, "TableRow.children");
  var repeat$ = dart.privateName(table, "TableRow.repeat");
  var decoration$0 = dart.privateName(table, "TableRow.decoration");
  var verticalAlignment$ = dart.privateName(table, "TableRow.verticalAlignment");
  table.TableRow = class TableRow extends core.Object {
    get children() {
      return this[children$];
    }
    set children(value) {
      super.children = value;
    }
    get repeat() {
      return this[repeat$];
    }
    set repeat(value) {
      super.repeat = value;
    }
    get decoration() {
      return this[decoration$0];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get verticalAlignment() {
      return this[verticalAlignment$];
    }
    set verticalAlignment(value) {
      super.verticalAlignment = value;
    }
    static ['_#new#tearOff'](opts) {
      let children = opts && 'children' in opts ? opts.children : null;
      let repeat = opts && 'repeat' in opts ? opts.repeat : false;
      let verticalAlignment = opts && 'verticalAlignment' in opts ? opts.verticalAlignment : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      return new table.TableRow.new({children: children, repeat: repeat, verticalAlignment: verticalAlignment, decoration: decoration});
    }
  };
  (table.TableRow.new = function(opts) {
    let children = opts && 'children' in opts ? opts.children : null;
    let repeat = opts && 'repeat' in opts ? opts.repeat : false;
    let verticalAlignment = opts && 'verticalAlignment' in opts ? opts.verticalAlignment : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    this[children$] = children;
    this[repeat$] = repeat;
    this[verticalAlignment$] = verticalAlignment;
    this[decoration$0] = decoration;
    ;
  }).prototype = table.TableRow.prototype;
  dart.addTypeTests(table.TableRow);
  dart.addTypeCaches(table.TableRow);
  dart.setLibraryUri(table.TableRow, I[0]);
  dart.setFieldSignature(table.TableRow, () => ({
    __proto__: dart.getFields(table.TableRow.__proto__),
    children: dart.finalFieldType(core.List$(widget$.Widget)),
    repeat: dart.finalFieldType(core.bool),
    decoration: dart.finalFieldType(dart.nullable(decoration$.BoxDecoration)),
    verticalAlignment: dart.finalFieldType(dart.nullable(table.TableCellVerticalAlignment))
  }));
  var _name = dart.privateName(core, "_name");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  table.TableCellVerticalAlignment = class TableCellVerticalAlignment extends core._Enum {
    toString() {
      return "TableCellVerticalAlignment." + this[_name];
    }
  };
  (table.TableCellVerticalAlignment.new = function(index, name) {
    table.TableCellVerticalAlignment.__proto__.new.call(this, index, name);
    ;
  }).prototype = table.TableCellVerticalAlignment.prototype;
  dart.addTypeTests(table.TableCellVerticalAlignment);
  dart.addTypeCaches(table.TableCellVerticalAlignment);
  dart.setLibraryUri(table.TableCellVerticalAlignment, I[0]);
  dart.setStaticFieldSignature(table.TableCellVerticalAlignment, () => ['values', 'bottom', 'middle', 'top', 'full']);
  dart.defineExtensionMethods(table.TableCellVerticalAlignment, ['toString']);
  dart.defineLazy(table.TableCellVerticalAlignment, {
    /*table.TableCellVerticalAlignment.values*/get values() {
      return C[0] || CT.C0;
    },
    /*table.TableCellVerticalAlignment.bottom*/get bottom() {
      return C[1] || CT.C1;
    },
    /*table.TableCellVerticalAlignment.middle*/get middle() {
      return C[2] || CT.C2;
    },
    /*table.TableCellVerticalAlignment.top*/get top() {
      return C[3] || CT.C3;
    },
    /*table.TableCellVerticalAlignment.full*/get full() {
      return C[4] || CT.C4;
    }
  }, false);
  table.TableWidth = class TableWidth extends core._Enum {
    toString() {
      return "TableWidth." + this[_name];
    }
  };
  (table.TableWidth.new = function(index, name) {
    table.TableWidth.__proto__.new.call(this, index, name);
    ;
  }).prototype = table.TableWidth.prototype;
  dart.addTypeTests(table.TableWidth);
  dart.addTypeCaches(table.TableWidth);
  dart.setLibraryUri(table.TableWidth, I[0]);
  dart.setStaticFieldSignature(table.TableWidth, () => ['values', 'min', 'max']);
  dart.defineExtensionMethods(table.TableWidth, ['toString']);
  dart.defineLazy(table.TableWidth, {
    /*table.TableWidth.values*/get values() {
      return C[5] || CT.C5;
    },
    /*table.TableWidth.min*/get min() {
      return C[6] || CT.C6;
    },
    /*table.TableWidth.max*/get max() {
      return C[7] || CT.C7;
    }
  }, false);
  var horizontalInside$ = dart.privateName(table, "TableBorder.horizontalInside");
  var verticalInside$ = dart.privateName(table, "TableBorder.verticalInside");
  var BorderStyle_phase = dart.privateName(box_border, "BorderStyle.phase");
  var BorderStyle_pattern = dart.privateName(box_border, "BorderStyle.pattern");
  var BorderStyle_paint = dart.privateName(box_border, "BorderStyle.paint");
  var BorderSide_style = dart.privateName(box_border, "BorderSide.style");
  var BorderSide_width = dart.privateName(box_border, "BorderSide.width");
  var PdfColor_blue = dart.privateName(color$, "PdfColor.blue");
  var PdfColor_green = dart.privateName(color$, "PdfColor.green");
  var PdfColor_red = dart.privateName(color$, "PdfColor.red");
  var PdfColor_alpha = dart.privateName(color$, "PdfColor.alpha");
  var BorderSide_color = dart.privateName(box_border, "BorderSide.color");
  var top$ = dart.privateName(box_border, "Border.top");
  var bottom$ = dart.privateName(box_border, "Border.bottom");
  var left$ = dart.privateName(box_border, "Border.left");
  var right$ = dart.privateName(box_border, "Border.right");
  box_border.BoxBorder = class BoxBorder extends core.Object {
    static _paintUniformBorderWithCircle(context, box, side) {
      let t4;
      side.style.setStyle(context);
      t4 = context.canvas;
      (() => {
        t4.setStrokeColor(side.color);
        t4.setLineWidth(side.width);
        t4.drawEllipse(box.x + box.width / 2.0, box.y + box.height / 2.0, box.width / 2.0, box.height / 2.0);
        t4.strokePath();
        return t4;
      })();
      side.style.unsetStyle(context);
    }
    static _paintUniformBorderWithRadius(context, box, side, borderRadius) {
      let t4;
      side.style.setStyle(context);
      t4 = context.canvas;
      (() => {
        t4.setLineJoin(graphics.PdfLineJoin.miter);
        t4.setMiterLimit(4.0);
        t4.setStrokeColor(side.color);
        t4.setLineWidth(side.width);
        return t4;
      })();
      borderRadius.paint(context, box);
      context.canvas.strokePath();
      side.style.unsetStyle(context);
    }
    static _paintUniformBorderWithRectangle(context, box, side) {
      let t4;
      side.style.setStyle(context);
      t4 = context.canvas;
      (() => {
        t4.setLineJoin(graphics.PdfLineJoin.miter);
        t4.setMiterLimit(4.0);
        t4.setStrokeColor(side.color);
        t4.setLineWidth(side.width);
        t4.drawBox(box);
        t4.strokePath();
        return t4;
      })();
      side.style.unsetStyle(context);
    }
  };
  (box_border.BoxBorder.new = function() {
    ;
  }).prototype = box_border.BoxBorder.prototype;
  dart.addTypeTests(box_border.BoxBorder);
  dart.addTypeCaches(box_border.BoxBorder);
  dart.setStaticMethodSignature(box_border.BoxBorder, () => ['_paintUniformBorderWithCircle', '_paintUniformBorderWithRadius', '_paintUniformBorderWithRectangle']);
  dart.setLibraryUri(box_border.BoxBorder, I[2]);
  box_border.Border = class Border extends box_border.BoxBorder {
    get top() {
      return this[top$];
    }
    set top(value) {
      super.top = value;
    }
    get bottom() {
      return this[bottom$];
    }
    set bottom(value) {
      super.bottom = value;
    }
    get left() {
      return this[left$];
    }
    set left(value) {
      super.left = value;
    }
    get right() {
      return this[right$];
    }
    set right(value) {
      super.right = value;
    }
    static ['_#new#tearOff'](opts) {
      let top = opts && 'top' in opts ? opts.top : C[8] || CT.C8;
      let right = opts && 'right' in opts ? opts.right : C[8] || CT.C8;
      let bottom = opts && 'bottom' in opts ? opts.bottom : C[8] || CT.C8;
      let left = opts && 'left' in opts ? opts.left : C[8] || CT.C8;
      return new box_border.Border.new({top: top, right: right, bottom: bottom, left: left});
    }
    static all(opts) {
      let color = opts && 'color' in opts ? opts.color : C[10] || CT.C10;
      let width = opts && 'width' in opts ? opts.width : 1;
      let style = opts && 'style' in opts ? opts.style : C[11] || CT.C11;
      return new box_border.Border.fromBorderSide(new box_border.BorderSide.new({color: color, width: width, style: style}));
    }
    static ['_#all#tearOff'](opts) {
      let color = opts && 'color' in opts ? opts.color : C[10] || CT.C10;
      let width = opts && 'width' in opts ? opts.width : 1;
      let style = opts && 'style' in opts ? opts.style : C[11] || CT.C11;
      return box_border.Border.all({color: color, width: width, style: style});
    }
    static ['_#fromBorderSide#tearOff'](side) {
      return new box_border.Border.fromBorderSide(side);
    }
    static ['_#symmetric#tearOff'](opts) {
      let vertical = opts && 'vertical' in opts ? opts.vertical : C[8] || CT.C8;
      let horizontal = opts && 'horizontal' in opts ? opts.horizontal : C[8] || CT.C8;
      return new box_border.Border.symmetric({vertical: vertical, horizontal: horizontal});
    }
    get isUniform() {
      return this.top._equals(this.bottom) && this.bottom._equals(this.left) && this.left._equals(this.right);
    }
    paint(context, box, opts) {
      let t4, t4$, t4$0, t4$1, t4$2;
      let shape = opts && 'shape' in opts ? opts.shape : C[12] || CT.C12;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
      if (this.isUniform) {
        if (this.top.style[$_equals](box_border.BorderStyle.none)) {
          return;
        }
        switch (shape) {
          case C[13] || CT.C13:
            {
              if (!(borderRadius == null)) dart.assertFailed("A borderRadius can only be given for rectangular boxes.", I[1], 236, 18, "borderRadius == null");
              box_border.BoxBorder._paintUniformBorderWithCircle(context, box, this.top);
              break;
            }
          case C[12] || CT.C12:
            {
              if (borderRadius != null) {
                box_border.BoxBorder._paintUniformBorderWithRadius(context, box, this.top, borderRadius);
                return;
              }
              box_border.BoxBorder._paintUniformBorderWithRectangle(context, box, this.top);
              break;
            }
        }
        return;
      }
      if (!(borderRadius == null)) dart.assertFailed("A borderRadius can only be given for a uniform Border.", I[1], 252, 12, "borderRadius == null");
      t4 = context.canvas;
      (() => {
        t4.setLineCap(graphics.PdfLineCap.square);
        t4.setMiterLimit(4.0);
        t4.setLineJoin(graphics.PdfLineJoin.miter);
        return t4;
      })();
      if (this.top.style.paint) {
        this.top.style.setStyle(context);
        t4$ = context.canvas;
        (() => {
          t4$.setStrokeColor(this.top.color);
          t4$.setLineWidth(this.top.width);
          t4$.drawLine(box.left, box.top, box.right, box.top);
          t4$.strokePath();
          return t4$;
        })();
        this.top.style.unsetStyle(context);
      }
      if (this.right.style.paint) {
        this.right.style.setStyle(context);
        t4$0 = context.canvas;
        (() => {
          t4$0.setStrokeColor(this.right.color);
          t4$0.setLineWidth(this.right.width);
          t4$0.drawLine(box.right, box.top, box.right, box.bottom);
          t4$0.strokePath();
          return t4$0;
        })();
        this.right.style.unsetStyle(context);
      }
      if (this.bottom.style.paint) {
        this.bottom.style.setStyle(context);
        t4$1 = context.canvas;
        (() => {
          t4$1.setStrokeColor(this.bottom.color);
          t4$1.setLineWidth(this.bottom.width);
          t4$1.drawLine(box.right, box.bottom, box.left, box.bottom);
          t4$1.strokePath();
          return t4$1;
        })();
        this.bottom.style.unsetStyle(context);
      }
      if (this.left.style.paint) {
        this.left.style.setStyle(context);
        t4$2 = context.canvas;
        (() => {
          t4$2.setStrokeColor(this.left.color);
          t4$2.setLineWidth(this.left.width);
          t4$2.drawLine(box.left, box.top, box.left, box.bottom);
          t4$2.strokePath();
          return t4$2;
        })();
        this.left.style.unsetStyle(context);
      }
    }
  };
  (box_border.Border.new = function(opts) {
    let top = opts && 'top' in opts ? opts.top : C[8] || CT.C8;
    let right = opts && 'right' in opts ? opts.right : C[8] || CT.C8;
    let bottom = opts && 'bottom' in opts ? opts.bottom : C[8] || CT.C8;
    let left = opts && 'left' in opts ? opts.left : C[8] || CT.C8;
    this[top$] = top;
    this[right$] = right;
    this[bottom$] = bottom;
    this[left$] = left;
    box_border.Border.__proto__.new.call(this);
    ;
  }).prototype = box_border.Border.prototype;
  (box_border.Border.fromBorderSide = function(side) {
    this[top$] = side;
    this[right$] = side;
    this[bottom$] = side;
    this[left$] = side;
    box_border.Border.__proto__.new.call(this);
    ;
  }).prototype = box_border.Border.prototype;
  (box_border.Border.symmetric = function(opts) {
    let vertical = opts && 'vertical' in opts ? opts.vertical : C[8] || CT.C8;
    let horizontal = opts && 'horizontal' in opts ? opts.horizontal : C[8] || CT.C8;
    this[left$] = vertical;
    this[top$] = horizontal;
    this[right$] = vertical;
    this[bottom$] = horizontal;
    box_border.Border.__proto__.new.call(this);
    ;
  }).prototype = box_border.Border.prototype;
  dart.addTypeTests(box_border.Border);
  dart.addTypeCaches(box_border.Border);
  dart.setMethodSignature(box_border.Border, () => ({
    __proto__: dart.getMethods(box_border.Border.__proto__),
    paint: dart.fnType(dart.void, [widget$.Context, rect$.PdfRect], {borderRadius: dart.nullable(border_radius.BorderRadius), shape: decoration$.BoxShape}, {})
  }));
  dart.setStaticMethodSignature(box_border.Border, () => ['all']);
  dart.setGetterSignature(box_border.Border, () => ({
    __proto__: dart.getGetters(box_border.Border.__proto__),
    isUniform: core.bool
  }));
  dart.setLibraryUri(box_border.Border, I[2]);
  dart.setFieldSignature(box_border.Border, () => ({
    __proto__: dart.getFields(box_border.Border.__proto__),
    top: dart.finalFieldType(box_border.BorderSide),
    bottom: dart.finalFieldType(box_border.BorderSide),
    left: dart.finalFieldType(box_border.BorderSide),
    right: dart.finalFieldType(box_border.BorderSide)
  }));
  table.TableBorder = class TableBorder extends box_border.Border {
    get horizontalInside() {
      return this[horizontalInside$];
    }
    set horizontalInside(value) {
      super.horizontalInside = value;
    }
    get verticalInside() {
      return this[verticalInside$];
    }
    set verticalInside(value) {
      super.verticalInside = value;
    }
    static ['_#new#tearOff'](opts) {
      let left = opts && 'left' in opts ? opts.left : C[8] || CT.C8;
      let top = opts && 'top' in opts ? opts.top : C[8] || CT.C8;
      let right = opts && 'right' in opts ? opts.right : C[8] || CT.C8;
      let bottom = opts && 'bottom' in opts ? opts.bottom : C[8] || CT.C8;
      let horizontalInside = opts && 'horizontalInside' in opts ? opts.horizontalInside : C[8] || CT.C8;
      let verticalInside = opts && 'verticalInside' in opts ? opts.verticalInside : C[8] || CT.C8;
      return new table.TableBorder.new({left: left, top: top, right: right, bottom: bottom, horizontalInside: horizontalInside, verticalInside: verticalInside});
    }
    static all(opts) {
      let color = opts && 'color' in opts ? opts.color : C[10] || CT.C10;
      let width = opts && 'width' in opts ? opts.width : 1;
      let style = opts && 'style' in opts ? opts.style : C[11] || CT.C11;
      let side = new box_border.BorderSide.new({color: color, width: width, style: style});
      return new table.TableBorder.new({top: side, right: side, bottom: side, left: side, horizontalInside: side, verticalInside: side});
    }
    static ['_#all#tearOff'](opts) {
      let color = opts && 'color' in opts ? opts.color : C[10] || CT.C10;
      let width = opts && 'width' in opts ? opts.width : 1;
      let style = opts && 'style' in opts ? opts.style : C[11] || CT.C11;
      return table.TableBorder.all({color: color, width: width, style: style});
    }
    static symmetric(opts) {
      let inside = opts && 'inside' in opts ? opts.inside : C[8] || CT.C8;
      let outside = opts && 'outside' in opts ? opts.outside : C[8] || CT.C8;
      return new table.TableBorder.new({top: outside, right: outside, bottom: outside, left: outside, horizontalInside: inside, verticalInside: inside});
    }
    static ['_#symmetric#tearOff'](opts) {
      let inside = opts && 'inside' in opts ? opts.inside : C[8] || CT.C8;
      let outside = opts && 'outside' in opts ? opts.outside : C[8] || CT.C8;
      return table.TableBorder.symmetric({inside: inside, outside: outside});
    }
    paintTable(context, box, widths = null, heights = null) {
      super.paint(context, box);
      if (this.verticalInside.style.paint) {
        this.verticalInside.style.setStyle(context);
        let offset = box.x;
        for (let width of dart.nullCheck(widths)[$sublist](0, widths[$length] - 1)) {
          offset = offset + dart.nullCheck(width);
          context.canvas.moveTo(offset, box.y);
          context.canvas.lineTo(offset, box.top);
        }
        context.canvas.setStrokeColor(this.verticalInside.color);
        context.canvas.setLineWidth(this.verticalInside.width);
        context.canvas.strokePath();
        this.verticalInside.style.unsetStyle(context);
      }
      if (this.horizontalInside.style.paint) {
        this.horizontalInside.style.setStyle(context);
        let offset = box.top;
        for (let height of dart.nullCheck(heights)[$sublist](0, heights[$length] - 1)) {
          offset = offset - height;
          context.canvas.moveTo(box.x, offset);
          context.canvas.lineTo(box.right, offset);
        }
        context.canvas.setStrokeColor(this.horizontalInside.color);
        context.canvas.setLineWidth(this.horizontalInside.width);
        context.canvas.strokePath();
        this.horizontalInside.style.unsetStyle(context);
      }
    }
  };
  (table.TableBorder.new = function(opts) {
    let left = opts && 'left' in opts ? opts.left : C[8] || CT.C8;
    let top = opts && 'top' in opts ? opts.top : C[8] || CT.C8;
    let right = opts && 'right' in opts ? opts.right : C[8] || CT.C8;
    let bottom = opts && 'bottom' in opts ? opts.bottom : C[8] || CT.C8;
    let horizontalInside = opts && 'horizontalInside' in opts ? opts.horizontalInside : C[8] || CT.C8;
    let verticalInside = opts && 'verticalInside' in opts ? opts.verticalInside : C[8] || CT.C8;
    this[horizontalInside$] = horizontalInside;
    this[verticalInside$] = verticalInside;
    table.TableBorder.__proto__.new.call(this, {top: top, bottom: bottom, left: left, right: right});
    ;
  }).prototype = table.TableBorder.prototype;
  dart.addTypeTests(table.TableBorder);
  dart.addTypeCaches(table.TableBorder);
  dart.setMethodSignature(table.TableBorder, () => ({
    __proto__: dart.getMethods(table.TableBorder.__proto__),
    paintTable: dart.fnType(dart.void, [widget$.Context, rect$.PdfRect], [dart.nullable(core.List$(dart.nullable(core.double))), dart.nullable(core.List$(core.double))])
  }));
  dart.setStaticMethodSignature(table.TableBorder, () => ['all', 'symmetric']);
  dart.setLibraryUri(table.TableBorder, I[0]);
  dart.setFieldSignature(table.TableBorder, () => ({
    __proto__: dart.getFields(table.TableBorder.__proto__),
    horizontalInside: dart.finalFieldType(box_border.BorderSide),
    verticalInside: dart.finalFieldType(box_border.BorderSide)
  }));
  multi_page.WidgetContext = class WidgetContext extends core.Object {};
  (multi_page.WidgetContext.new = function() {
    ;
  }).prototype = multi_page.WidgetContext.prototype;
  dart.addTypeTests(multi_page.WidgetContext);
  dart.addTypeCaches(multi_page.WidgetContext);
  dart.setLibraryUri(multi_page.WidgetContext, I[3]);
  table._TableContext = class _TableContext extends multi_page.WidgetContext {
    apply(other) {
      table._TableContext.as(other);
      this.firstLine = other.firstLine;
      this.lastLine = other.lastLine;
    }
    clone() {
      let t4;
      t4 = new table._TableContext.new();
      return (() => {
        t4.apply(this);
        return t4;
      })();
    }
    toString() {
      return dart.str(this[$runtimeType]) + " firstLine: " + dart.str(this.firstLine) + " lastLine: " + dart.str(this.lastLine);
    }
    static ['_#new#tearOff']() {
      return new table._TableContext.new();
    }
  };
  (table._TableContext.new = function() {
    this.firstLine = 0;
    this.lastLine = 0;
    ;
  }).prototype = table._TableContext.prototype;
  dart.addTypeTests(table._TableContext);
  dart.addTypeCaches(table._TableContext);
  dart.setMethodSignature(table._TableContext, () => ({
    __proto__: dart.getMethods(table._TableContext.__proto__),
    apply: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    clone: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setLibraryUri(table._TableContext, I[0]);
  dart.setFieldSignature(table._TableContext, () => ({
    __proto__: dart.getFields(table._TableContext.__proto__),
    firstLine: dart.fieldType(core.int),
    lastLine: dart.fieldType(core.int)
  }));
  dart.defineExtensionMethods(table._TableContext, ['toString']);
  table._ColumnLayout = class _ColumnLayout extends core.Object {
    static ['_#new#tearOff'](width, flex) {
      return new table._ColumnLayout.new(width, flex);
    }
  };
  (table._ColumnLayout.new = function(width, flex) {
    this.width = width;
    this.flex = flex;
    ;
  }).prototype = table._ColumnLayout.prototype;
  dart.addTypeTests(table._ColumnLayout);
  dart.addTypeCaches(table._ColumnLayout);
  dart.setLibraryUri(table._ColumnLayout, I[0]);
  dart.setFieldSignature(table._ColumnLayout, () => ({
    __proto__: dart.getFields(table._ColumnLayout.__proto__),
    width: dart.finalFieldType(dart.nullable(core.double)),
    flex: dart.finalFieldType(dart.nullable(core.double))
  }));
  table.TableColumnWidth = class TableColumnWidth extends core.Object {};
  (table.TableColumnWidth.new = function() {
    ;
  }).prototype = table.TableColumnWidth.prototype;
  dart.addTypeTests(table.TableColumnWidth);
  dart.addTypeCaches(table.TableColumnWidth);
  dart.setLibraryUri(table.TableColumnWidth, I[0]);
  var flex$0 = dart.privateName(table, "IntrinsicColumnWidth.flex");
  var BoxConstraints_maxHeight = dart.privateName(geometry, "BoxConstraints.maxHeight");
  var BoxConstraints_minHeight = dart.privateName(geometry, "BoxConstraints.minHeight");
  var BoxConstraints_maxWidth = dart.privateName(geometry, "BoxConstraints.maxWidth");
  var BoxConstraints_minWidth = dart.privateName(geometry, "BoxConstraints.minWidth");
  table.IntrinsicColumnWidth = class IntrinsicColumnWidth extends table.TableColumnWidth {
    get flex() {
      return this[flex$0];
    }
    set flex(value) {
      super.flex = value;
    }
    static ['_#new#tearOff'](opts) {
      let flex = opts && 'flex' in opts ? opts.flex : null;
      return new table.IntrinsicColumnWidth.new({flex: flex});
    }
    layout(child, context, constraints) {
      let t4;
      if (this.flex != null) {
        return new table._ColumnLayout.new(0.0, this.flex);
      }
      child.layout(context, C[14] || CT.C14);
      if (!(child.box != null)) dart.assertFailed(null, I[4], 185, 12, "child.box != null");
      let calculatedWidth = dart.nullCheck(child.box).width === 1 / 0 ? 0.0 : dart.nullCheck(child.box).width;
      let childFlex = (t4 = this.flex, t4 == null ? flex$.Expanded.is(child) ? child.flex[$toDouble]() : dart.nullCheck(child.box).width === 1 / 0 ? 1.0 : 0.0 : t4);
      return new table._ColumnLayout.new(calculatedWidth, childFlex);
    }
  };
  (table.IntrinsicColumnWidth.new = function(opts) {
    let flex = opts && 'flex' in opts ? opts.flex : null;
    this[flex$0] = flex;
    table.IntrinsicColumnWidth.__proto__.new.call(this);
    ;
  }).prototype = table.IntrinsicColumnWidth.prototype;
  dart.addTypeTests(table.IntrinsicColumnWidth);
  dart.addTypeCaches(table.IntrinsicColumnWidth);
  dart.setMethodSignature(table.IntrinsicColumnWidth, () => ({
    __proto__: dart.getMethods(table.IntrinsicColumnWidth.__proto__),
    layout: dart.fnType(table._ColumnLayout, [widget$.Widget, widget$.Context, geometry.BoxConstraints])
  }));
  dart.setLibraryUri(table.IntrinsicColumnWidth, I[0]);
  dart.setFieldSignature(table.IntrinsicColumnWidth, () => ({
    __proto__: dart.getFields(table.IntrinsicColumnWidth.__proto__),
    flex: dart.finalFieldType(dart.nullable(core.double))
  }));
  var width$ = dart.privateName(table, "FixedColumnWidth.width");
  table.FixedColumnWidth = class FixedColumnWidth extends table.TableColumnWidth {
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    static ['_#new#tearOff'](width) {
      return new table.FixedColumnWidth.new(width);
    }
    layout(child, context, constraints) {
      return new table._ColumnLayout.new(this.width, 0.0);
    }
  };
  (table.FixedColumnWidth.new = function(width) {
    this[width$] = width;
    table.FixedColumnWidth.__proto__.new.call(this);
    ;
  }).prototype = table.FixedColumnWidth.prototype;
  dart.addTypeTests(table.FixedColumnWidth);
  dart.addTypeCaches(table.FixedColumnWidth);
  dart.setMethodSignature(table.FixedColumnWidth, () => ({
    __proto__: dart.getMethods(table.FixedColumnWidth.__proto__),
    layout: dart.fnType(table._ColumnLayout, [widget$.Widget, widget$.Context, dart.nullable(geometry.BoxConstraints)])
  }));
  dart.setLibraryUri(table.FixedColumnWidth, I[0]);
  dart.setFieldSignature(table.FixedColumnWidth, () => ({
    __proto__: dart.getFields(table.FixedColumnWidth.__proto__),
    width: dart.finalFieldType(core.double)
  }));
  var flex$1 = dart.privateName(table, "FlexColumnWidth.flex");
  table.FlexColumnWidth = class FlexColumnWidth extends table.TableColumnWidth {
    get flex() {
      return this[flex$1];
    }
    set flex(value) {
      super.flex = value;
    }
    static ['_#new#tearOff'](flex = 1) {
      return new table.FlexColumnWidth.new(flex);
    }
    layout(child, context, constraints) {
      return new table._ColumnLayout.new(0.0, this.flex);
    }
  };
  (table.FlexColumnWidth.new = function(flex = 1) {
    this[flex$1] = flex;
    table.FlexColumnWidth.__proto__.new.call(this);
    ;
  }).prototype = table.FlexColumnWidth.prototype;
  dart.addTypeTests(table.FlexColumnWidth);
  dart.addTypeCaches(table.FlexColumnWidth);
  dart.setMethodSignature(table.FlexColumnWidth, () => ({
    __proto__: dart.getMethods(table.FlexColumnWidth.__proto__),
    layout: dart.fnType(table._ColumnLayout, [widget$.Widget, widget$.Context, dart.nullable(geometry.BoxConstraints)])
  }));
  dart.setLibraryUri(table.FlexColumnWidth, I[0]);
  dart.setFieldSignature(table.FlexColumnWidth, () => ({
    __proto__: dart.getFields(table.FlexColumnWidth.__proto__),
    flex: dart.finalFieldType(core.double)
  }));
  var value$ = dart.privateName(table, "FractionColumnWidth.value");
  table.FractionColumnWidth = class FractionColumnWidth extends table.TableColumnWidth {
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](value) {
      return new table.FractionColumnWidth.new(value);
    }
    layout(child, context, constraints) {
      return new table._ColumnLayout.new(dart.nullCheck(constraints).maxWidth * this.value, 0.0);
    }
  };
  (table.FractionColumnWidth.new = function(value) {
    this[value$] = value;
    table.FractionColumnWidth.__proto__.new.call(this);
    ;
  }).prototype = table.FractionColumnWidth.prototype;
  dart.addTypeTests(table.FractionColumnWidth);
  dart.addTypeCaches(table.FractionColumnWidth);
  dart.setMethodSignature(table.FractionColumnWidth, () => ({
    __proto__: dart.getMethods(table.FractionColumnWidth.__proto__),
    layout: dart.fnType(table._ColumnLayout, [widget$.Widget, widget$.Context, dart.nullable(geometry.BoxConstraints)])
  }));
  dart.setLibraryUri(table.FractionColumnWidth, I[0]);
  dart.setFieldSignature(table.FractionColumnWidth, () => ({
    __proto__: dart.getFields(table.FractionColumnWidth.__proto__),
    value: dart.finalFieldType(core.double)
  }));
  var children$0 = dart.privateName(table, "Table.children");
  var border$ = dart.privateName(table, "Table.border");
  var defaultVerticalAlignment$ = dart.privateName(table, "Table.defaultVerticalAlignment");
  var tableWidth$ = dart.privateName(table, "Table.tableWidth");
  var defaultColumnWidth$ = dart.privateName(table, "Table.defaultColumnWidth");
  var columnWidths$ = dart.privateName(table, "Table.columnWidths");
  var _widths = dart.privateName(table, "_widths");
  var _heights = dart.privateName(table, "_heights");
  var _context = dart.privateName(table, "_context");
  var EdgeInsets_bottom = dart.privateName(geometry, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(geometry, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(geometry, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(geometry, "EdgeInsets.left");
  var Alignment_y = dart.privateName(geometry, "Alignment.y");
  var Alignment_x = dart.privateName(geometry, "Alignment.x");
  var _getHeight = dart.privateName(table, "_getHeight");
  var box = dart.privateName(widget$, "Widget.box");
  widget$.Widget = class Widget extends core.Object {
    get box() {
      return this[box];
    }
    set box(value) {
      this[box] = value;
    }
    static draw(widget, opts) {
      let t4;
      let page = opts && 'page' in opts ? opts.page : null;
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      let constraints = opts && 'constraints' in opts ? opts.constraints : null;
      let offset = opts && 'offset' in opts ? opts.offset : null;
      let alignment = opts && 'alignment' in opts ? opts.alignment : null;
      let context = opts && 'context' in opts ? opts.context : null;
      context == null ? context = widget$.Context.new({document: dart.nullCheck(page).pdfDocument, page: page, canvas: dart.nullCheck(canvas)}).inheritFromAll(T$.JSArrayOfInherited().of([theme$.ThemeData.base()])) : null;
      widget.layout(context, (t4 = constraints, t4 == null ? C[14] || CT.C14 : t4));
      if (!(widget.box != null)) dart.assertFailed(null, I[5], 165, 12, "widget.box != null");
      if (alignment != null) {
        let d = alignment.withinRect(dart.nullCheck(widget.box));
        offset = new point$.PdfPoint.new(offset.x - d.x, offset.y - d.y);
      }
      widget.box = rect$.PdfRect.fromPoints(offset, dart.nullCheck(widget.box).size);
      widget.paint(context);
    }
    static measure(widget, opts) {
      let t4;
      let page = opts && 'page' in opts ? opts.page : null;
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      let constraints = opts && 'constraints' in opts ? opts.constraints : null;
      let context = opts && 'context' in opts ? opts.context : null;
      context == null ? context = widget$.Context.new({document: dart.nullCheck(page).pdfDocument, page: page, canvas: dart.nullCheck(canvas)}).inheritFromAll(T$.JSArrayOfInherited().of([theme$.ThemeData.base()])) : null;
      widget.layout(context, (t4 = constraints, t4 == null ? C[14] || CT.C14 : t4));
      if (!(widget.box != null)) dart.assertFailed(null, I[5], 198, 12, "widget.box != null");
      return dart.nullCheck(widget.box).size;
    }
    paint(context) {
      if (!dart.fn(() => {
        if (document$0.Document.debug) {
          this.debugPaint(context);
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[5], 211, 12, "() {\n      if (Document.debug) {\n        debugPaint(context);\n      }\n      return true;\n    }()");
    }
    debugPaint(context) {
      let t4;
      t4 = context.canvas;
      (() => {
        t4.setStrokeColor(colors.PdfColors.purple);
        t4.setLineWidth(1.0);
        t4.drawBox(dart.nullCheck(this.box));
        t4.strokePath();
        return t4;
      })();
    }
  };
  (widget$.Widget.new = function() {
    this[box] = null;
    ;
  }).prototype = widget$.Widget.prototype;
  dart.addTypeTests(widget$.Widget);
  dart.addTypeCaches(widget$.Widget);
  dart.setMethodSignature(widget$.Widget, () => ({
    __proto__: dart.getMethods(widget$.Widget.__proto__),
    paint: dart.fnType(dart.void, [widget$.Context]),
    debugPaint: dart.fnType(dart.void, [widget$.Context])
  }));
  dart.setStaticMethodSignature(widget$.Widget, () => ['draw', 'measure']);
  dart.setLibraryUri(widget$.Widget, I[6]);
  dart.setFieldSignature(widget$.Widget, () => ({
    __proto__: dart.getFields(widget$.Widget.__proto__),
    box: dart.fieldType(dart.nullable(rect$.PdfRect))
  }));
  multi_page.SpanningWidget = class SpanningWidget extends widget$.Widget {};
  multi_page.SpanningWidget[dart.mixinOn] = Widget => class SpanningWidget extends Widget {
    cloneContext() {
      return this.saveContext().clone();
    }
    applyContext(context) {
      multi_page.WidgetContext.as(context);
      return this.saveContext().apply(context);
    }
  };
  dart.addTypeTests(multi_page.SpanningWidget);
  dart.addTypeCaches(multi_page.SpanningWidget);
  multi_page.SpanningWidget[dart.implements] = () => [widget$.Widget];
  dart.setMethodSignature(multi_page.SpanningWidget, () => ({
    __proto__: dart.getMethods(multi_page.SpanningWidget.__proto__),
    cloneContext: dart.fnType(multi_page.WidgetContext, []),
    applyContext: dart.fnType(dart.void, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(multi_page.SpanningWidget, I[3]);
  const Widget_SpanningWidget$36 = class Widget_SpanningWidget extends widget$.Widget {};
  (Widget_SpanningWidget$36.new = function() {
    Widget_SpanningWidget$36.__proto__.new.call(this);
  }).prototype = Widget_SpanningWidget$36.prototype;
  dart.applyMixin(Widget_SpanningWidget$36, multi_page.SpanningWidget);
  table.Table = class Table extends Widget_SpanningWidget$36 {
    get children() {
      return this[children$0];
    }
    set children(value) {
      super.children = value;
    }
    get border() {
      return this[border$];
    }
    set border(value) {
      super.border = value;
    }
    get defaultVerticalAlignment() {
      return this[defaultVerticalAlignment$];
    }
    set defaultVerticalAlignment(value) {
      super.defaultVerticalAlignment = value;
    }
    get tableWidth() {
      return this[tableWidth$];
    }
    set tableWidth(value) {
      super.tableWidth = value;
    }
    get defaultColumnWidth() {
      return this[defaultColumnWidth$];
    }
    set defaultColumnWidth(value) {
      super.defaultColumnWidth = value;
    }
    get columnWidths() {
      return this[columnWidths$];
    }
    set columnWidths(value) {
      super.columnWidths = value;
    }
    static ['_#new#tearOff'](opts) {
      let children = opts && 'children' in opts ? opts.children : C[15] || CT.C15;
      let border = opts && 'border' in opts ? opts.border : null;
      let defaultVerticalAlignment = opts && 'defaultVerticalAlignment' in opts ? opts.defaultVerticalAlignment : C[3] || CT.C3;
      let columnWidths = opts && 'columnWidths' in opts ? opts.columnWidths : null;
      let defaultColumnWidth = opts && 'defaultColumnWidth' in opts ? opts.defaultColumnWidth : C[16] || CT.C16;
      let tableWidth = opts && 'tableWidth' in opts ? opts.tableWidth : C[7] || CT.C7;
      return new table.Table.new({children: children, border: border, defaultVerticalAlignment: defaultVerticalAlignment, columnWidths: columnWidths, defaultColumnWidth: defaultColumnWidth, tableWidth: tableWidth});
    }
    static fromTextArray(opts) {
      let t4, t4$, t4$0;
      let context = opts && 'context' in opts ? opts.context : null;
      let data = opts && 'data' in opts ? opts.data : null;
      let cellPadding = opts && 'cellPadding' in opts ? opts.cellPadding : C[17] || CT.C17;
      let cellHeight = opts && 'cellHeight' in opts ? opts.cellHeight : 0;
      let cellAlignment = opts && 'cellAlignment' in opts ? opts.cellAlignment : C[18] || CT.C18;
      let cellAlignments = opts && 'cellAlignments' in opts ? opts.cellAlignments : null;
      let cellStyle = opts && 'cellStyle' in opts ? opts.cellStyle : null;
      let oddCellStyle = opts && 'oddCellStyle' in opts ? opts.oddCellStyle : null;
      let cellFormat = opts && 'cellFormat' in opts ? opts.cellFormat : null;
      let cellDecoration = opts && 'cellDecoration' in opts ? opts.cellDecoration : null;
      let headerCount = opts && 'headerCount' in opts ? opts.headerCount : 1;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let headerPadding = opts && 'headerPadding' in opts ? opts.headerPadding : null;
      let headerHeight = opts && 'headerHeight' in opts ? opts.headerHeight : null;
      let headerAlignment = opts && 'headerAlignment' in opts ? opts.headerAlignment : C[19] || CT.C19;
      let headerAlignments = opts && 'headerAlignments' in opts ? opts.headerAlignments : null;
      let headerStyle = opts && 'headerStyle' in opts ? opts.headerStyle : null;
      let headerFormat = opts && 'headerFormat' in opts ? opts.headerFormat : null;
      let border = opts && 'border' in opts ? opts.border : C[20] || CT.C20;
      let columnWidths = opts && 'columnWidths' in opts ? opts.columnWidths : null;
      let defaultColumnWidth = opts && 'defaultColumnWidth' in opts ? opts.defaultColumnWidth : C[16] || CT.C16;
      let tableWidth = opts && 'tableWidth' in opts ? opts.tableWidth : C[7] || CT.C7;
      let headerDecoration = opts && 'headerDecoration' in opts ? opts.headerDecoration : null;
      let headerCellDecoration = opts && 'headerCellDecoration' in opts ? opts.headerCellDecoration : null;
      let rowDecoration = opts && 'rowDecoration' in opts ? opts.rowDecoration : null;
      let oddRowDecoration = opts && 'oddRowDecoration' in opts ? opts.oddRowDecoration : null;
      if (!(headerCount >= 0)) dart.assertFailed(null, I[4], 282, 12, "headerCount >= 0");
      if (context != null) {
        let theme = theme$.Theme.of(context);
        headerStyle == null ? headerStyle = theme.tableHeader : null;
        cellStyle == null ? cellStyle = theme.tableCell : null;
      }
      headerPadding == null ? headerPadding = cellPadding : null;
      headerHeight == null ? headerHeight = cellHeight : null;
      oddRowDecoration == null ? oddRowDecoration = rowDecoration : null;
      oddCellStyle == null ? oddCellStyle = cellStyle : null;
      cellAlignments == null ? cellAlignments = C[22] || CT.C22 : null;
      headerAlignments == null ? headerAlignments = cellAlignments : null;
      let rows = T$.JSArrayOfTableRow().of([]);
      let rowNum = 0;
      if (headers != null) {
        let tableRow = T$.JSArrayOfWidget().of([]);
        for (let cell of headers) {
          tableRow[$add](new container$.Container.new({alignment: (t4 = headerAlignments[$_get](tableRow[$length]), t4 == null ? headerAlignment : t4), padding: headerPadding, decoration: headerCellDecoration, constraints: new geometry.BoxConstraints.new({minHeight: headerHeight}), child: new text$1.Text.new(headerFormat == null ? dart.toString(cell) : headerFormat(tableRow[$length], cell), {style: headerStyle})}));
        }
        rows[$add](new table.TableRow.new({children: tableRow, repeat: true, decoration: headerDecoration}));
        rowNum = rowNum + 1;
      }
      for (let row of data) {
        let tableRow = T$.JSArrayOfWidget().of([]);
        let isOdd = (rowNum - headerCount)[$modulo](2) !== 0;
        if (rowNum < headerCount) {
          for (let cell of row) {
            let align = (t4$ = headerAlignments[$_get](tableRow[$length]), t4$ == null ? headerAlignment : t4$);
            let textAlign = table.Table._textAlign(align);
            tableRow[$add](new container$.Container.new({alignment: align, padding: headerPadding, constraints: new geometry.BoxConstraints.new({minHeight: headerHeight}), child: new text$1.Text.new(headerFormat == null ? dart.toString(cell) : headerFormat(tableRow[$length], cell), {style: headerStyle, textAlign: textAlign})}));
          }
        } else {
          for (let cell of row) {
            let align = (t4$0 = cellAlignments[$_get](tableRow[$length]), t4$0 == null ? cellAlignment : t4$0);
            let textAlign = table.Table._textAlign(align);
            tableRow[$add](new container$.Container.new({alignment: align, padding: cellPadding, constraints: new geometry.BoxConstraints.new({minHeight: cellHeight}), decoration: cellDecoration == null ? null : cellDecoration(tableRow[$length], cell, rowNum), child: new text$1.Text.new(cellFormat == null ? dart.toString(cell) : cellFormat(tableRow[$length], cell), {style: isOdd ? oddCellStyle : cellStyle, textAlign: textAlign})}));
          }
        }
        let decoration = isOdd ? oddRowDecoration : rowDecoration;
        if (rowNum < headerCount) {
          decoration = headerDecoration;
        }
        rows[$add](new table.TableRow.new({children: tableRow, repeat: rowNum < headerCount, decoration: decoration}));
        rowNum = rowNum + 1;
      }
      return new table.Table.new({border: border, tableWidth: tableWidth, children: rows, columnWidths: columnWidths, defaultColumnWidth: defaultColumnWidth, defaultVerticalAlignment: table.TableCellVerticalAlignment.full});
    }
    static ['_#fromTextArray#tearOff'](opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let data = opts && 'data' in opts ? opts.data : null;
      let cellPadding = opts && 'cellPadding' in opts ? opts.cellPadding : C[17] || CT.C17;
      let cellHeight = opts && 'cellHeight' in opts ? opts.cellHeight : 0;
      let cellAlignment = opts && 'cellAlignment' in opts ? opts.cellAlignment : C[18] || CT.C18;
      let cellAlignments = opts && 'cellAlignments' in opts ? opts.cellAlignments : null;
      let cellStyle = opts && 'cellStyle' in opts ? opts.cellStyle : null;
      let oddCellStyle = opts && 'oddCellStyle' in opts ? opts.oddCellStyle : null;
      let cellFormat = opts && 'cellFormat' in opts ? opts.cellFormat : null;
      let cellDecoration = opts && 'cellDecoration' in opts ? opts.cellDecoration : null;
      let headerCount = opts && 'headerCount' in opts ? opts.headerCount : 1;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let headerPadding = opts && 'headerPadding' in opts ? opts.headerPadding : null;
      let headerHeight = opts && 'headerHeight' in opts ? opts.headerHeight : null;
      let headerAlignment = opts && 'headerAlignment' in opts ? opts.headerAlignment : C[19] || CT.C19;
      let headerAlignments = opts && 'headerAlignments' in opts ? opts.headerAlignments : null;
      let headerStyle = opts && 'headerStyle' in opts ? opts.headerStyle : null;
      let headerFormat = opts && 'headerFormat' in opts ? opts.headerFormat : null;
      let border = opts && 'border' in opts ? opts.border : C[20] || CT.C20;
      let columnWidths = opts && 'columnWidths' in opts ? opts.columnWidths : null;
      let defaultColumnWidth = opts && 'defaultColumnWidth' in opts ? opts.defaultColumnWidth : C[16] || CT.C16;
      let tableWidth = opts && 'tableWidth' in opts ? opts.tableWidth : C[7] || CT.C7;
      let headerDecoration = opts && 'headerDecoration' in opts ? opts.headerDecoration : null;
      let headerCellDecoration = opts && 'headerCellDecoration' in opts ? opts.headerCellDecoration : null;
      let rowDecoration = opts && 'rowDecoration' in opts ? opts.rowDecoration : null;
      let oddRowDecoration = opts && 'oddRowDecoration' in opts ? opts.oddRowDecoration : null;
      return table.Table.fromTextArray({context: context, data: data, cellPadding: cellPadding, cellHeight: cellHeight, cellAlignment: cellAlignment, cellAlignments: cellAlignments, cellStyle: cellStyle, oddCellStyle: oddCellStyle, cellFormat: cellFormat, cellDecoration: cellDecoration, headerCount: headerCount, headers: headers, headerPadding: headerPadding, headerHeight: headerHeight, headerAlignment: headerAlignment, headerAlignments: headerAlignments, headerStyle: headerStyle, headerFormat: headerFormat, border: border, columnWidths: columnWidths, defaultColumnWidth: defaultColumnWidth, tableWidth: tableWidth, headerDecoration: headerDecoration, headerCellDecoration: headerCellDecoration, rowDecoration: rowDecoration, oddRowDecoration: oddRowDecoration});
    }
    get canSpan() {
      return true;
    }
    get hasMoreWidgets() {
      return true;
    }
    saveContext() {
      return this[_context];
    }
    restoreContext(context) {
      table._TableContext.as(context);
      this[_context].apply(context);
      this[_context].firstLine = this[_context].lastLine;
    }
    layout(context, constraints, opts) {
      let t4, t4$, t4$0, t4$1;
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      let flex = T$.JSArrayOfdoubleN().of([]);
      this[_widths][$clear]();
      this[_heights][$clear]();
      let index = 0;
      for (let row of this.children) {
        let n = 0;
        for (let child of row.children) {
          let columnWidth = this.columnWidths != null && dart.nullCheck(this.columnWidths)[$_get](n) != null ? dart.nullCheck(dart.nullCheck(this.columnWidths)[$_get](n)) : this.defaultColumnWidth;
          let columnLayout = columnWidth.layout(child, context, constraints);
          if (flex[$length] < n + 1) {
            flex[$add](columnLayout.flex);
            this[_widths][$add](columnLayout.width);
          } else {
            if (dart.nullCheck(columnLayout.flex) > 0) {
              flex[$_set](n, math.max(core.double, dart.nullCheck(flex[$_get](n)), dart.nullCheck(columnLayout.flex)));
            }
            this[_widths][$_set](n, math.max(core.double, dart.nullCheck(this[_widths][$_get](n)), dart.nullCheck(columnLayout.width)));
          }
          n = n + 1;
        }
      }
      if (this[_widths][$isEmpty]) {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.smallest);
        return;
      }
      let maxWidth = this[_widths][$reduce](dart.fn((a, b) => dart.nullCheck(a) + dart.nullCheck(b), T$.doubleNAnddoubleNTodouble()));
      if (constraints.hasBoundedWidth) {
        let totalFlex = dart.nullCheck(flex[$reduce](dart.fn((a, b) => dart.nullCheck(a) + dart.nullCheck(b), T$.doubleNAnddoubleNTodouble())));
        let flexSpace = 0.0;
        for (let n = 0; n < this[_widths][$length]; n = n + 1) {
          if (flex[$_get](n) === 0.0) {
            let newWidth = dart.nullCheck(this[_widths][$_get](n)) / dart.nullCheck(maxWidth) * constraints.maxWidth;
            if (this.tableWidth === table.TableWidth.max && totalFlex === 0.0 || newWidth < dart.nullCheck(this[_widths][$_get](n))) {
              this[_widths][$_set](n, newWidth);
            }
            flexSpace = flexSpace + dart.nullCheck(this[_widths][$_get](n));
          }
        }
        let spacePerFlex = totalFlex > 0.0 ? (constraints.maxWidth - flexSpace) / totalFlex : 0 / 0;
        for (let n = 0; n < this[_widths][$length]; n = n + 1) {
          if (dart.nullCheck(flex[$_get](n)) > 0.0) {
            let newWidth = spacePerFlex * dart.nullCheck(flex[$_get](n));
            this[_widths][$_set](n, newWidth);
          }
        }
      }
      let totalWidth = dart.nullCheck(this[_widths][$reduce](dart.fn((a, b) => dart.nullCheck(a) + dart.nullCheck(b), T$.doubleNAnddoubleNTodouble())));
      let totalHeight = 0.0;
      index = 0;
      for (let row of this.children) {
        if ((t4 = index, index = t4 + 1, t4) < this[_context].firstLine && !row.repeat) {
          continue;
        }
        let n = 0;
        let x = 0.0;
        let lineHeight = 0.0;
        for (let child of row.children) {
          let childConstraints = new geometry.BoxConstraints.tightFor({width: this[_widths][$_get](n)});
          child.layout(context, childConstraints);
          if (!(child.box != null)) dart.assertFailed(null, I[4], 510, 16, "child.box != null");
          child.box = new rect$.PdfRect.new(x, totalHeight, dart.nullCheck(child.box).width, dart.nullCheck(child.box).height);
          x = x + dart.nullCheck(this[_widths][$_get](n));
          lineHeight = math.max(core.double, lineHeight, dart.nullCheck(child.box).height);
          n = n + 1;
        }
        let align = (t4$ = row.verticalAlignment, t4$ == null ? this.defaultVerticalAlignment : t4$);
        if (align === table.TableCellVerticalAlignment.full) {
          n = 0;
          x = 0.0;
          for (let child of row.children) {
            let childConstraints = new geometry.BoxConstraints.tightFor({width: this[_widths][$_get](n), height: lineHeight});
            child.layout(context, childConstraints);
            if (!(child.box != null)) dart.assertFailed(null, I[4], 528, 18, "child.box != null");
            child.box = new rect$.PdfRect.new(x, totalHeight, dart.nullCheck(child.box).width, dart.nullCheck(child.box).height);
            x = x + dart.nullCheck(this[_widths][$_get](n));
            n = n + 1;
          }
        }
        if (totalHeight + lineHeight > constraints.maxHeight) {
          index = index - 1;
          break;
        }
        totalHeight = totalHeight + lineHeight;
        this[_heights][$add](lineHeight);
      }
      this[_context].lastLine = index;
      index = 0;
      let heightIndex = 0;
      for (let row of this.children) {
        if ((t4$0 = index, index = t4$0 + 1, t4$0) < this[_context].firstLine && !row.repeat) {
          continue;
        }
        let align = (t4$1 = row.verticalAlignment, t4$1 == null ? this.defaultVerticalAlignment : t4$1);
        for (let child of row.children) {
          let childY = null;
          switch (align) {
            case C[1] || CT.C1:
              {
                childY = totalHeight - dart.nullCheck(child.box).y - this[_getHeight](heightIndex);
                break;
              }
            case C[2] || CT.C2:
              {
                childY = totalHeight - dart.nullCheck(child.box).y - (this[_getHeight](heightIndex) + dart.nullCheck(child.box).height) / 2;
                break;
              }
            case C[3] || CT.C3:
            case C[4] || CT.C4:
              {
                childY = totalHeight - dart.nullCheck(child.box).y - dart.nullCheck(child.box).height;
                break;
              }
          }
          child.box = new rect$.PdfRect.new(dart.nullCheck(child.box).x, childY, dart.nullCheck(child.box).width, dart.nullCheck(child.box).height);
        }
        if (index >= this[_context].lastLine) {
          break;
        }
        heightIndex = heightIndex + 1;
      }
      this.box = new rect$.PdfRect.new(0.0, 0.0, totalWidth, totalHeight);
    }
    paint(context) {
      let t4, t4$, t4$0, t4$1;
      super.paint(context);
      if (this[_context].lastLine === 0) {
        return;
      }
      let mat = vector_math_64.Matrix4.identity();
      mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
      t4 = context.canvas;
      (() => {
        t4.saveContext();
        t4.setTransform(mat);
        return t4;
      })();
      let index = 0;
      for (let row of this.children) {
        if ((t4$ = index, index = t4$ + 1, t4$) < this[_context].firstLine && !row.repeat) {
          continue;
        }
        if (row.decoration != null) {
          let y = 1 / 0;
          let h = 0.0;
          for (let child of row.children) {
            y = math.min(core.double, y, dart.nullCheck(child.box).y);
            h = math.max(core.double, h, dart.nullCheck(child.box).height);
          }
          dart.nullCheck(row.decoration).paint(context, new rect$.PdfRect.new(0.0, y, dart.nullCheck(this.box).width, h), decoration$.PaintPhase.background);
        }
        for (let child of row.children) {
          t4$0 = context.canvas;
          (() => {
            t4$0.saveContext();
            t4$0.drawRect(dart.nullCheck(child.box).x, dart.nullCheck(child.box).y, dart.nullCheck(child.box).width, dart.nullCheck(child.box).height);
            t4$0.clipPath();
            return t4$0;
          })();
          child.paint(context);
          context.canvas.restoreContext();
        }
        if (index >= this[_context].lastLine) {
          break;
        }
      }
      index = 0;
      for (let row of this.children) {
        if ((t4$1 = index, index = t4$1 + 1, t4$1) < this[_context].firstLine && !row.repeat) {
          continue;
        }
        if (row.decoration != null) {
          let y = 1 / 0;
          let h = 0.0;
          for (let child of row.children) {
            y = math.min(core.double, y, dart.nullCheck(child.box).y);
            h = math.max(core.double, h, dart.nullCheck(child.box).height);
          }
          dart.nullCheck(row.decoration).paint(context, new rect$.PdfRect.new(0.0, y, dart.nullCheck(this.box).width, h), decoration$.PaintPhase.foreground);
        }
        if (index >= this[_context].lastLine) {
          break;
        }
      }
      context.canvas.restoreContext();
      if (this.border != null) {
        dart.nullCheck(this.border).paintTable(context, dart.nullCheck(this.box), this[_widths], this[_heights]);
      }
    }
    [_getHeight](heightIndex) {
      return heightIndex >= 0 && heightIndex < this[_heights][$length] ? this[_heights][$_get](heightIndex) : 0.0;
    }
    static _textAlign(align) {
      if (align.x === 0) {
        return text$1.TextAlign.center;
      } else if (align.x < 0) {
        return text$1.TextAlign.left;
      } else {
        return text$1.TextAlign.right;
      }
    }
  };
  (table.Table.new = function(opts) {
    let children = opts && 'children' in opts ? opts.children : C[15] || CT.C15;
    let border = opts && 'border' in opts ? opts.border : null;
    let defaultVerticalAlignment = opts && 'defaultVerticalAlignment' in opts ? opts.defaultVerticalAlignment : C[3] || CT.C3;
    let columnWidths = opts && 'columnWidths' in opts ? opts.columnWidths : null;
    let defaultColumnWidth = opts && 'defaultColumnWidth' in opts ? opts.defaultColumnWidth : C[16] || CT.C16;
    let tableWidth = opts && 'tableWidth' in opts ? opts.tableWidth : C[7] || CT.C7;
    this[_widths] = T$.JSArrayOfdoubleN().of([]);
    this[_heights] = T$.JSArrayOfdouble().of([]);
    this[_context] = new table._TableContext.new();
    this[children$0] = children;
    this[border$] = border;
    this[defaultVerticalAlignment$] = defaultVerticalAlignment;
    this[columnWidths$] = columnWidths;
    this[defaultColumnWidth$] = defaultColumnWidth;
    this[tableWidth$] = tableWidth;
    table.Table.__proto__.new.call(this);
    ;
  }).prototype = table.Table.prototype;
  dart.addTypeTests(table.Table);
  dart.addTypeCaches(table.Table);
  dart.setMethodSignature(table.Table, () => ({
    __proto__: dart.getMethods(table.Table.__proto__),
    saveContext: dart.fnType(multi_page.WidgetContext, []),
    restoreContext: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {}),
    [_getHeight]: dart.fnType(core.double, [core.int])
  }));
  dart.setStaticMethodSignature(table.Table, () => ['fromTextArray', '_textAlign']);
  dart.setGetterSignature(table.Table, () => ({
    __proto__: dart.getGetters(table.Table.__proto__),
    canSpan: core.bool,
    hasMoreWidgets: core.bool
  }));
  dart.setLibraryUri(table.Table, I[0]);
  dart.setFieldSignature(table.Table, () => ({
    __proto__: dart.getFields(table.Table.__proto__),
    children: dart.finalFieldType(core.List$(table.TableRow)),
    border: dart.finalFieldType(dart.nullable(table.TableBorder)),
    defaultVerticalAlignment: dart.finalFieldType(table.TableCellVerticalAlignment),
    tableWidth: dart.finalFieldType(table.TableWidth),
    [_widths]: dart.finalFieldType(core.List$(dart.nullable(core.double))),
    [_heights]: dart.finalFieldType(core.List$(core.double)),
    [_context]: dart.finalFieldType(table._TableContext),
    defaultColumnWidth: dart.finalFieldType(table.TableColumnWidth),
    columnWidths: dart.finalFieldType(dart.nullable(core.Map$(core.int, table.TableColumnWidth)))
  }));
  var value$0 = dart.privateName(progress, "CircularProgressIndicator.value");
  var color$1 = dart.privateName(progress, "CircularProgressIndicator.color");
  var backgroundColor$ = dart.privateName(progress, "CircularProgressIndicator.backgroundColor");
  var strokeWidth$ = dart.privateName(progress, "CircularProgressIndicator.strokeWidth");
  progress.CircularProgressIndicator = class CircularProgressIndicator extends widget$.Widget {
    get value() {
      return this[value$0];
    }
    set value(value) {
      super.value = value;
    }
    get color() {
      return this[color$1];
    }
    set color(value) {
      super.color = value;
    }
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get strokeWidth() {
      return this[strokeWidth$];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    static ['_#new#tearOff'](opts) {
      let value = opts && 'value' in opts ? opts.value : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 4;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      return new progress.CircularProgressIndicator.new({value: value, color: color, strokeWidth: strokeWidth, backgroundColor: backgroundColor});
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.biggest);
    }
    paint(context) {
      let t4, t5, t4$;
      super.paint(context);
      let adjustedValue = this.value[$clamp](0.00001, 0.99999);
      let rx = dart.nullCheck(this.box).width / 2;
      let ry = dart.nullCheck(this.box).height / 2;
      let angleEnd = 1.5707963267948966 - 3.141592653589793 * 2 * adjustedValue;
      let startTop = new point$.PdfPoint.new(dart.nullCheck(this.box).x + rx + math.cos(1.5707963267948966) * rx, dart.nullCheck(this.box).y + ry + math.sin(1.5707963267948966) * ry);
      let endTop = new point$.PdfPoint.new(dart.nullCheck(this.box).x + rx + math.cos(angleEnd) * rx, dart.nullCheck(this.box).y + ry + math.sin(angleEnd) * ry);
      let startBottom = new point$.PdfPoint.new(dart.nullCheck(this.box).x + rx + math.cos(1.5707963267948966) * (rx - this.strokeWidth), dart.nullCheck(this.box).y + ry + math.sin(1.5707963267948966) * (ry - this.strokeWidth));
      let endBottom = new point$.PdfPoint.new(dart.nullCheck(this.box).x + rx + math.cos(angleEnd) * (rx - this.strokeWidth), dart.nullCheck(this.box).y + ry + math.sin(angleEnd) * (ry - this.strokeWidth));
      if (this.backgroundColor != null && this.value < 1) {
        t4 = context.canvas;
        (() => {
          t4.moveTo(startTop.x, startTop.y);
          t4.bezierArc(startTop.x, startTop.y, rx, ry, endTop.x, endTop.y, {large: adjustedValue < 0.5, sweep: true});
          t4.lineTo(endBottom.x, endBottom.y);
          t4.bezierArc(endBottom.x, endBottom.y, rx - this.strokeWidth, ry - this.strokeWidth, startBottom.x, startBottom.y, {large: adjustedValue < 0.5});
          t4.lineTo(startTop.x, startTop.y);
          t4.setFillColor(this.backgroundColor);
          t4.fillPath();
          return t4;
        })();
      }
      if (this.value > 0) {
        t4$ = context.canvas;
        (() => {
          t4$.moveTo(startTop.x, startTop.y);
          t4$.bezierArc(startTop.x, startTop.y, rx, ry, endTop.x, endTop.y, {large: adjustedValue > 0.5});
          t4$.lineTo(endBottom.x, endBottom.y);
          t4$.bezierArc(endBottom.x, endBottom.y, rx - this.strokeWidth, ry - this.strokeWidth, startBottom.x, startBottom.y, {large: adjustedValue > 0.5, sweep: true});
          t4$.lineTo(startTop.x, startTop.y);
          t4$.setFillColor((t5 = this.color, t5 == null ? colors.PdfColors.indigo : t5));
          t4$.fillPath();
          return t4$;
        })();
      }
    }
  };
  (progress.CircularProgressIndicator.new = function(opts) {
    let value = opts && 'value' in opts ? opts.value : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 4;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    this[value$0] = value;
    this[color$1] = color;
    this[strokeWidth$] = strokeWidth;
    this[backgroundColor$] = backgroundColor;
    progress.CircularProgressIndicator.__proto__.new.call(this);
    ;
  }).prototype = progress.CircularProgressIndicator.prototype;
  dart.addTypeTests(progress.CircularProgressIndicator);
  dart.addTypeCaches(progress.CircularProgressIndicator);
  dart.setMethodSignature(progress.CircularProgressIndicator, () => ({
    __proto__: dart.getMethods(progress.CircularProgressIndicator.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setLibraryUri(progress.CircularProgressIndicator, I[7]);
  dart.setFieldSignature(progress.CircularProgressIndicator, () => ({
    __proto__: dart.getFields(progress.CircularProgressIndicator.__proto__),
    value: dart.finalFieldType(core.double),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    backgroundColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    strokeWidth: dart.finalFieldType(core.double)
  }));
  var backgroundColor$0 = dart.privateName(progress, "LinearProgressIndicator.backgroundColor");
  var minHeight$ = dart.privateName(progress, "LinearProgressIndicator.minHeight");
  var value$1 = dart.privateName(progress, "LinearProgressIndicator.value");
  var valueColor$ = dart.privateName(progress, "LinearProgressIndicator.valueColor");
  progress.LinearProgressIndicator = class LinearProgressIndicator extends widget$.Widget {
    get backgroundColor() {
      return this[backgroundColor$0];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get minHeight() {
      return this[minHeight$];
    }
    set minHeight(value) {
      super.minHeight = value;
    }
    get value() {
      return this[value$1];
    }
    set value(value) {
      super.value = value;
    }
    get valueColor() {
      return this[valueColor$];
    }
    set valueColor(value) {
      super.valueColor = value;
    }
    static ['_#new#tearOff'](opts) {
      let value = opts && 'value' in opts ? opts.value : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let valueColor = opts && 'valueColor' in opts ? opts.valueColor : null;
      let minHeight = opts && 'minHeight' in opts ? opts.minHeight : null;
      return new progress.LinearProgressIndicator.new({value: value, backgroundColor: backgroundColor, valueColor: valueColor, minHeight: minHeight});
    }
    layout(context, constraints, opts) {
      let t4;
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, new geometry.BoxConstraints.new({minWidth: 1 / 0, minHeight: (t4 = this.minHeight, t4 == null ? 4.0 : t4)}).enforce(constraints).smallest);
    }
    paint(context) {
      let t4, t4$, t4$0, t4$1;
      super.paint(context);
      let vc = this.value[$clamp](0.0, 1.0);
      let _valueColor = (t4 = this.valueColor, t4 == null ? colors.PdfColors.blue : t4);
      let _backgroundColor = (t4$ = this.backgroundColor, t4$ == null ? _valueColor.shade(0.1) : t4$);
      if (vc < 1.0) {
        let epsilon = vc === 0 ? 0 : 0.01;
        t4$0 = context.canvas;
        (() => {
          t4$0.drawRect(dart.nullCheck(this.box).left + dart.nullCheck(this.box).width * vc - epsilon, dart.nullCheck(this.box).bottom, dart.nullCheck(this.box).width * (1 - vc) + epsilon, dart.nullCheck(this.box).height);
          t4$0.setFillColor(_backgroundColor);
          t4$0.fillPath();
          return t4$0;
        })();
      }
      if (vc > 0.0) {
        t4$1 = context.canvas;
        (() => {
          t4$1.drawRect(dart.nullCheck(this.box).left, dart.nullCheck(this.box).bottom, dart.nullCheck(this.box).width * vc, dart.nullCheck(this.box).height);
          t4$1.setFillColor(_valueColor);
          t4$1.fillPath();
          return t4$1;
        })();
      }
    }
  };
  (progress.LinearProgressIndicator.new = function(opts) {
    let value = opts && 'value' in opts ? opts.value : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let valueColor = opts && 'valueColor' in opts ? opts.valueColor : null;
    let minHeight = opts && 'minHeight' in opts ? opts.minHeight : null;
    this[value$1] = value;
    this[backgroundColor$0] = backgroundColor;
    this[valueColor$] = valueColor;
    this[minHeight$] = minHeight;
    progress.LinearProgressIndicator.__proto__.new.call(this);
    ;
  }).prototype = progress.LinearProgressIndicator.prototype;
  dart.addTypeTests(progress.LinearProgressIndicator);
  dart.addTypeCaches(progress.LinearProgressIndicator);
  dart.setMethodSignature(progress.LinearProgressIndicator, () => ({
    __proto__: dart.getMethods(progress.LinearProgressIndicator.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setLibraryUri(progress.LinearProgressIndicator, I[7]);
  dart.setFieldSignature(progress.LinearProgressIndicator, () => ({
    __proto__: dart.getFields(progress.LinearProgressIndicator.__proto__),
    backgroundColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    minHeight: dart.finalFieldType(dart.nullable(core.double)),
    value: dart.finalFieldType(core.double),
    valueColor: dart.finalFieldType(dart.nullable(color$.PdfColor))
  }));
  var width$0 = dart.privateName(partitions, "Partition.width");
  var flex$2 = dart.privateName(partitions, "Partition.flex");
  var child$ = dart.privateName(partitions, "Partition.child");
  const Widget_SpanningWidget$36$ = class Widget_SpanningWidget extends widget$.Widget {};
  (Widget_SpanningWidget$36$.new = function() {
    Widget_SpanningWidget$36$.__proto__.new.call(this);
  }).prototype = Widget_SpanningWidget$36$.prototype;
  dart.applyMixin(Widget_SpanningWidget$36$, multi_page.SpanningWidget);
  partitions.Partition = class Partition extends Widget_SpanningWidget$36$ {
    get width() {
      return this[width$0];
    }
    set width(value) {
      super.width = value;
    }
    get flex() {
      return this[flex$2];
    }
    set flex(value) {
      super.flex = value;
    }
    get child() {
      return this[child$];
    }
    set child(value) {
      super.child = value;
    }
    static ['_#new#tearOff'](opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let flex = opts && 'flex' in opts ? opts.flex : 1;
      return new partitions.Partition.new({child: child, width: width, flex: flex});
    }
    get box() {
      return this.child.box;
    }
    set box(value) {
      return this.child.box = value;
    }
    get canSpan() {
      return this.child.canSpan;
    }
    debugPaint(context) {
      this.child.debugPaint(context);
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this.child.layout(context, constraints, {parentUsesSize: parentUsesSize});
    }
    paint(context) {
      super.paint(context);
      this.child.paint(context);
    }
    restoreContext(context) {
      multi_page.WidgetContext.as(context);
      this.child.restoreContext(context);
    }
    saveContext() {
      return this.child.saveContext();
    }
    get hasMoreWidgets() {
      return this.child.hasMoreWidgets;
    }
  };
  (partitions.Partition.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let flex = opts && 'flex' in opts ? opts.flex : 1;
    this[child$] = child;
    this[width$0] = width;
    this[flex$2] = width == null ? flex : 0;
    partitions.Partition.__proto__.new.call(this);
    ;
  }).prototype = partitions.Partition.prototype;
  dart.addTypeTests(partitions.Partition);
  dart.addTypeCaches(partitions.Partition);
  dart.setMethodSignature(partitions.Partition, () => ({
    __proto__: dart.getMethods(partitions.Partition.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {}),
    restoreContext: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    saveContext: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setGetterSignature(partitions.Partition, () => ({
    __proto__: dart.getGetters(partitions.Partition.__proto__),
    box: dart.nullable(rect$.PdfRect),
    canSpan: core.bool,
    hasMoreWidgets: core.bool
  }));
  dart.setSetterSignature(partitions.Partition, () => ({
    __proto__: dart.getSetters(partitions.Partition.__proto__),
    box: dart.nullable(rect$.PdfRect)
  }));
  dart.setLibraryUri(partitions.Partition, I[8]);
  dart.setFieldSignature(partitions.Partition, () => ({
    __proto__: dart.getFields(partitions.Partition.__proto__),
    width: dart.finalFieldType(dart.nullable(core.double)),
    flex: dart.finalFieldType(core.int),
    child: dart.finalFieldType(multi_page.SpanningWidget)
  }));
  partitions._PartitionsContext = class _PartitionsContext extends multi_page.WidgetContext {
    static ['_#new#tearOff'](count) {
      return new partitions._PartitionsContext.new(count);
    }
    apply(other) {
      let t4;
      partitions._PartitionsContext.as(other);
      for (let index = 0; index < this.partitionContext[$length]; index = index + 1) {
        t4 = this.partitionContext[$_get](index);
        t4 == null ? null : t4.apply(dart.nullCheck(other.partitionContext[$_get](index)));
      }
    }
    clone() {
      let t4;
      let context = new partitions._PartitionsContext.new(this.partitionContext[$length]);
      for (let index = 0; index < this.partitionContext[$length]; index = index + 1) {
        context.partitionContext[$_set](index, (t4 = this.partitionContext[$_get](index), t4 == null ? null : t4.clone()));
      }
      return context;
    }
  };
  (partitions._PartitionsContext.new = function(count) {
    this.partitionContext = T$.ListOfWidgetContextN().filled(count, null);
    ;
  }).prototype = partitions._PartitionsContext.prototype;
  dart.addTypeTests(partitions._PartitionsContext);
  dart.addTypeCaches(partitions._PartitionsContext);
  dart.setMethodSignature(partitions._PartitionsContext, () => ({
    __proto__: dart.getMethods(partitions._PartitionsContext.__proto__),
    apply: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    clone: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setLibraryUri(partitions._PartitionsContext, I[8]);
  dart.setFieldSignature(partitions._PartitionsContext, () => ({
    __proto__: dart.getFields(partitions._PartitionsContext.__proto__),
    partitionContext: dart.finalFieldType(core.List$(dart.nullable(multi_page.WidgetContext)))
  }));
  var children$1 = dart.privateName(partitions, "Partitions.children");
  var mainAxisSize$ = dart.privateName(partitions, "Partitions.mainAxisSize");
  var _context$ = dart.privateName(partitions, "_context");
  const Widget_SpanningWidget$36$0 = class Widget_SpanningWidget extends widget$.Widget {};
  (Widget_SpanningWidget$36$0.new = function() {
    Widget_SpanningWidget$36$0.__proto__.new.call(this);
  }).prototype = Widget_SpanningWidget$36$0.prototype;
  dart.applyMixin(Widget_SpanningWidget$36$0, multi_page.SpanningWidget);
  partitions.Partitions = class Partitions extends Widget_SpanningWidget$36$0 {
    get children() {
      return this[children$1];
    }
    set children(value) {
      super.children = value;
    }
    get mainAxisSize() {
      return this[mainAxisSize$];
    }
    set mainAxisSize(value) {
      super.mainAxisSize = value;
    }
    static ['_#new#tearOff'](opts) {
      let children = opts && 'children' in opts ? opts.children : null;
      let mainAxisSize = opts && 'mainAxisSize' in opts ? opts.mainAxisSize : C[23] || CT.C23;
      return new partitions.Partitions.new({children: children, mainAxisSize: mainAxisSize});
    }
    get canSpan() {
      return this.children[$any](dart.fn(part => part.canSpan, T$.PartitionTobool()));
    }
    get hasMoreWidgets() {
      return !this.children[$any](dart.fn(part => !part.hasMoreWidgets, T$.PartitionTobool()));
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      let maxMainSize = constraints.maxWidth;
      let canFlex = maxMainSize < 1 / 0;
      let allocatedSize = 0.0;
      let totalFlex = 0;
      let widths = T$.ListOfdoubleN().filled(this.children[$length], 0.0);
      let index = 0;
      for (let child of this.children) {
        if (child.flex > 0) {
          if (!dart.fn(() => {
            if (!canFlex) {
              dart.throw(core.Exception.new("Partition children have non-zero flex but incoming width constraints are unbounded."));
            } else {
              return true;
            }
          }, T$.VoidTobool())()) dart.assertFailed(null, I[9], 138, 16, "() {\n          if (!canFlex) {\n            throw Exception(\n                'Partition children have non-zero flex but incoming width constraints are unbounded.');\n          } else {\n            return true;\n          }\n        }()");
          totalFlex = totalFlex + child.flex;
        } else {
          allocatedSize = allocatedSize + dart.nullCheck(child.width);
          widths[$_set](index, child.width);
        }
        index = index + 1;
      }
      if (totalFlex > 0 && canFlex) {
        let freeSpace = math.max(core.num, 0, (canFlex ? maxMainSize : 0.0) - allocatedSize);
        let spacePerFlex = freeSpace / totalFlex;
        index = 0;
        for (let child of this.children) {
          if (child.flex > 0) {
            let childExtent = spacePerFlex * child.flex;
            allocatedSize = allocatedSize + childExtent;
            widths[$_set](index, childExtent);
          }
          index = index + 1;
        }
      }
      let totalHeight = 0.0;
      index = 0;
      for (let child of this.children) {
        if (dart.nullCheck(widths[$_get](index)) > 0) {
          let innerConstraints = new geometry.BoxConstraints.new({minWidth: dart.nullCheck(widths[$_get](index)), maxWidth: dart.nullCheck(widths[$_get](index)), maxHeight: constraints.maxHeight});
          child.layout(context, innerConstraints);
          if (!(child.box != null)) dart.assertFailed(null, I[9], 182, 16, "child.box != null");
          totalHeight = math.max(core.double, totalHeight, dart.nullCheck(child.box).height);
        }
        index = index + 1;
      }
      index = 0;
      allocatedSize = 0.0;
      for (let child of this.children) {
        if (dart.nullCheck(widths[$_get](index)) > 0) {
          let offsetY = totalHeight - dart.nullCheck(child.box).height;
          child.box = rect$.PdfRect.fromPoints(new point$.PdfPoint.new(allocatedSize, offsetY), dart.nullCheck(child.box).size);
          totalHeight = math.max(core.double, totalHeight, dart.nullCheck(child.box).height);
          allocatedSize = allocatedSize + dart.nullCheck(widths[$_get](index));
        }
        index = index + 1;
      }
      this.box = new rect$.PdfRect.new(0.0, 0.0, allocatedSize, totalHeight);
    }
    paint(context) {
      let t4;
      super.paint(context);
      let mat = vector_math_64.Matrix4.identity();
      mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
      t4 = context.canvas;
      (() => {
        t4.saveContext();
        t4.setTransform(mat);
        return t4;
      })();
      for (let child of this.children) {
        child.paint(context);
      }
      context.canvas.restoreContext();
    }
    restoreContext(context) {
      partitions._PartitionsContext.as(context);
      this[_context$].apply(context);
      let index = 0;
      for (let child of this.children) {
        if (child.canSpan) {
          child.restoreContext(dart.nullCheck(this[_context$].partitionContext[$_get](index)));
        }
        index = index + 1;
      }
    }
    saveContext() {
      let index = 0;
      for (let child of this.children) {
        if (child.canSpan) {
          this[_context$].partitionContext[$_set](index, child.saveContext());
        }
        index = index + 1;
      }
      return this[_context$];
    }
  };
  (partitions.Partitions.new = function(opts) {
    let children = opts && 'children' in opts ? opts.children : null;
    let mainAxisSize = opts && 'mainAxisSize' in opts ? opts.mainAxisSize : C[23] || CT.C23;
    this[children$1] = children;
    this[mainAxisSize$] = mainAxisSize;
    this[_context$] = new partitions._PartitionsContext.new(children[$length]);
    partitions.Partitions.__proto__.new.call(this);
    ;
  }).prototype = partitions.Partitions.prototype;
  dart.addTypeTests(partitions.Partitions);
  dart.addTypeCaches(partitions.Partitions);
  dart.setMethodSignature(partitions.Partitions, () => ({
    __proto__: dart.getMethods(partitions.Partitions.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {}),
    restoreContext: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    saveContext: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setGetterSignature(partitions.Partitions, () => ({
    __proto__: dart.getGetters(partitions.Partitions.__proto__),
    canSpan: core.bool,
    hasMoreWidgets: core.bool
  }));
  dart.setLibraryUri(partitions.Partitions, I[8]);
  dart.setFieldSignature(partitions.Partitions, () => ({
    __proto__: dart.getFields(partitions.Partitions.__proto__),
    children: dart.finalFieldType(core.List$(partitions.Partition)),
    [_context$]: dart.finalFieldType(partitions._PartitionsContext),
    mainAxisSize: dart.finalFieldType(flex$.MainAxisSize)
  }));
  grid_view._GridViewContext = class _GridViewContext extends multi_page.WidgetContext {
    apply(other) {
      let t4, t4$;
      grid_view._GridViewContext.as(other);
      this.firstChild = other.firstChild;
      this.lastChild = other.lastChild;
      this.childCrossAxis = (t4 = other.childCrossAxis, t4 == null ? this.childCrossAxis : t4);
      this.childMainAxis = (t4$ = other.childMainAxis, t4$ == null ? this.childMainAxis : t4$);
    }
    clone() {
      let t4;
      t4 = new grid_view._GridViewContext.new();
      return (() => {
        t4.apply(this);
        return t4;
      })();
    }
    toString() {
      return dart.str(this[$runtimeType]) + " first:" + dart.str(this.firstChild) + " last:" + dart.str(this.lastChild) + " size:" + dart.str(this.childCrossAxis) + "x" + dart.str(this.childMainAxis);
    }
    static ['_#new#tearOff']() {
      return new grid_view._GridViewContext.new();
    }
  };
  (grid_view._GridViewContext.new = function() {
    this.firstChild = 0;
    this.lastChild = 0;
    this.childCrossAxis = null;
    this.childMainAxis = null;
    ;
  }).prototype = grid_view._GridViewContext.prototype;
  dart.addTypeTests(grid_view._GridViewContext);
  dart.addTypeCaches(grid_view._GridViewContext);
  dart.setMethodSignature(grid_view._GridViewContext, () => ({
    __proto__: dart.getMethods(grid_view._GridViewContext.__proto__),
    apply: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    clone: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setLibraryUri(grid_view._GridViewContext, I[10]);
  dart.setFieldSignature(grid_view._GridViewContext, () => ({
    __proto__: dart.getFields(grid_view._GridViewContext.__proto__),
    firstChild: dart.fieldType(core.int),
    lastChild: dart.fieldType(core.int),
    childCrossAxis: dart.fieldType(dart.nullable(core.double)),
    childMainAxis: dart.fieldType(dart.nullable(core.double))
  }));
  dart.defineExtensionMethods(grid_view._GridViewContext, ['toString']);
  var direction$ = dart.privateName(grid_view, "GridView.direction");
  var padding$ = dart.privateName(grid_view, "GridView.padding");
  var crossAxisCount$ = dart.privateName(grid_view, "GridView.crossAxisCount");
  var mainAxisSpacing$ = dart.privateName(grid_view, "GridView.mainAxisSpacing");
  var crossAxisSpacing$ = dart.privateName(grid_view, "GridView.crossAxisSpacing");
  var childAspectRatio$ = dart.privateName(grid_view, "GridView.childAspectRatio");
  var _context$0 = dart.privateName(grid_view, "_context");
  var _mainAxisCount = dart.privateName(grid_view, "_mainAxisCount");
  var children$2 = dart.privateName(widget$, "MultiChildWidget.children");
  widget$.MultiChildWidget = class MultiChildWidget extends widget$.Widget {
    get children() {
      return this[children$2];
    }
    set children(value) {
      super.children = value;
    }
  };
  (widget$.MultiChildWidget.new = function(opts) {
    let children = opts && 'children' in opts ? opts.children : C[26] || CT.C26;
    this[children$2] = children;
    widget$.MultiChildWidget.__proto__.new.call(this);
    ;
  }).prototype = widget$.MultiChildWidget.prototype;
  dart.addTypeTests(widget$.MultiChildWidget);
  dart.addTypeCaches(widget$.MultiChildWidget);
  dart.setLibraryUri(widget$.MultiChildWidget, I[6]);
  dart.setFieldSignature(widget$.MultiChildWidget, () => ({
    __proto__: dart.getFields(widget$.MultiChildWidget.__proto__),
    children: dart.finalFieldType(core.List$(widget$.Widget))
  }));
  const MultiChildWidget_SpanningWidget$36 = class MultiChildWidget_SpanningWidget extends widget$.MultiChildWidget {};
  (MultiChildWidget_SpanningWidget$36.new = function(opts) {
    MultiChildWidget_SpanningWidget$36.__proto__.new.call(this, opts);
  }).prototype = MultiChildWidget_SpanningWidget$36.prototype;
  dart.applyMixin(MultiChildWidget_SpanningWidget$36, multi_page.SpanningWidget);
  grid_view.GridView = class GridView extends MultiChildWidget_SpanningWidget$36 {
    get direction() {
      return this[direction$];
    }
    set direction(value) {
      super.direction = value;
    }
    get padding() {
      return this[padding$];
    }
    set padding(value) {
      super.padding = value;
    }
    get crossAxisCount() {
      return this[crossAxisCount$];
    }
    set crossAxisCount(value) {
      super.crossAxisCount = value;
    }
    get mainAxisSpacing() {
      return this[mainAxisSpacing$];
    }
    set mainAxisSpacing(value) {
      super.mainAxisSpacing = value;
    }
    get crossAxisSpacing() {
      return this[crossAxisSpacing$];
    }
    set crossAxisSpacing(value) {
      super.crossAxisSpacing = value;
    }
    get childAspectRatio() {
      return this[childAspectRatio$];
    }
    set childAspectRatio(value) {
      super.childAspectRatio = value;
    }
    static ['_#new#tearOff'](opts) {
      let direction = opts && 'direction' in opts ? opts.direction : C[24] || CT.C24;
      let padding = opts && 'padding' in opts ? opts.padding : C[25] || CT.C25;
      let crossAxisCount = opts && 'crossAxisCount' in opts ? opts.crossAxisCount : null;
      let mainAxisSpacing = opts && 'mainAxisSpacing' in opts ? opts.mainAxisSpacing : 0;
      let crossAxisSpacing = opts && 'crossAxisSpacing' in opts ? opts.crossAxisSpacing : 0;
      let childAspectRatio = opts && 'childAspectRatio' in opts ? opts.childAspectRatio : 1 / 0;
      let children = opts && 'children' in opts ? opts.children : C[26] || CT.C26;
      return new grid_view.GridView.new({direction: direction, padding: padding, crossAxisCount: crossAxisCount, mainAxisSpacing: mainAxisSpacing, crossAxisSpacing: crossAxisSpacing, childAspectRatio: childAspectRatio, children: children});
    }
    layout(context, constraints, opts) {
      let t16, t16$;
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (this.children[$isEmpty]) {
        this.box = rect$.PdfRect.zero;
        return;
      }
      if (!dart.fn(() => {
        if (constraints.maxHeight[$isInfinite] && this.childAspectRatio[$isInfinite]) {
          core.print("Unable to calculate the GridView dimensions. Please set the height constraints or childAspectRatio.");
          return false;
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[11], 82, 12, "() {\n      if (constraints.maxHeight.isInfinite && childAspectRatio.isInfinite) {\n        print(\n            'Unable to calculate the GridView dimensions. Please set the height constraints or childAspectRatio.');\n        return false;\n      }\n      return true;\n    }()");
      let mainAxisExtent = null;
      function mainAxisExtent$35get() {
        let t5;
        t5 = mainAxisExtent;
        return t5 == null ? dart.throw(new _internal.LateError.localNI("mainAxisExtent")) : t5;
      }
      dart.fn(mainAxisExtent$35get, T$.VoidTodouble());
      function mainAxisExtent$35set(mainAxisExtent$35param) {
        return mainAxisExtent = mainAxisExtent$35param;
      }
      dart.fn(mainAxisExtent$35set, T$.doubleTodynamic());
      let crossAxisExtent = null;
      function crossAxisExtent$35get() {
        let t8;
        t8 = crossAxisExtent;
        return t8 == null ? dart.throw(new _internal.LateError.localNI("crossAxisExtent")) : t8;
      }
      dart.fn(crossAxisExtent$35get, T$.VoidTodouble());
      function crossAxisExtent$35set(crossAxisExtent$35param) {
        return crossAxisExtent = crossAxisExtent$35param;
      }
      dart.fn(crossAxisExtent$35set, T$.doubleTodynamic());
      switch (this.direction) {
        case C[24] || CT.C24:
          {
            mainAxisExtent$35set(constraints.maxHeight - this.padding.vertical);
            crossAxisExtent$35set(constraints.maxWidth - this.padding.horizontal);
            break;
          }
        case C[27] || CT.C27:
          {
            mainAxisExtent$35set(constraints.maxWidth - this.padding.horizontal);
            crossAxisExtent$35set(constraints.maxHeight - this.padding.vertical);
            break;
          }
      }
      if (constraints.maxHeight[$isInfinite] || this[_mainAxisCount] == null) {
        this[_mainAxisCount] = ((this.children[$length] - this[_context$0].firstChild) / this.crossAxisCount)[$ceil]();
        this[_context$0].childCrossAxis = crossAxisExtent$35get() / this.crossAxisCount - this.crossAxisSpacing * (this.crossAxisCount - 1) / this.crossAxisCount;
        this[_context$0].childMainAxis = math.min(core.double, dart.nullCheck(this[_context$0].childCrossAxis) * this.childAspectRatio, mainAxisExtent$35get() / dart.nullCheck(this[_mainAxisCount]) - this.mainAxisSpacing * (dart.nullCheck(this[_mainAxisCount]) - 1) / dart.nullCheck(this[_mainAxisCount]));
        if (dart.nullCheck(this[_context$0].childCrossAxis)[$isInfinite]) {
          dart.throw(core.Exception.new("Unable to calculate child height as the height constraint is infinite."));
        }
      } else {
        this[_mainAxisCount] = ((mainAxisExtent$35get() + this.mainAxisSpacing) / (this.mainAxisSpacing + dart.nullCheck(this[_context$0].childMainAxis)))[$floor]();
        if (dart.nullCheck(this[_mainAxisCount]) < 0) {
          this[_mainAxisCount] = 0;
        }
      }
      let totalMain = (dart.nullCheck(this[_context$0].childMainAxis) + this.mainAxisSpacing) * dart.nullCheck(this[_mainAxisCount]) - this.mainAxisSpacing;
      let totalCross = (dart.nullCheck(this[_context$0].childCrossAxis) + this.crossAxisSpacing) * this.crossAxisCount - this.crossAxisSpacing;
      let startX = this.padding.left;
      let mainAxis = null;
      function mainAxis$35get() {
        let t11;
        t11 = mainAxis;
        return t11 == null ? dart.throw(new _internal.LateError.localNI("mainAxis")) : t11;
      }
      dart.fn(mainAxis$35get, T$.VoidTodouble());
      function mainAxis$35set(mainAxis$35param) {
        return mainAxis = mainAxis$35param;
      }
      dart.fn(mainAxis$35set, T$.doubleTodynamic());
      let crossAxis = null;
      function crossAxis$35get() {
        let t14;
        t14 = crossAxis;
        return t14 == null ? dart.throw(new _internal.LateError.localNI("crossAxis")) : t14;
      }
      dart.fn(crossAxis$35get, T$.VoidTodouble());
      function crossAxis$35set(crossAxis$35param) {
        return crossAxis = crossAxis$35param;
      }
      dart.fn(crossAxis$35set, T$.doubleTodynamic());
      let innerConstraints = null;
      switch (this.direction) {
        case C[24] || CT.C24:
          {
            innerConstraints = new geometry.BoxConstraints.tightFor({width: this[_context$0].childCrossAxis, height: this[_context$0].childMainAxis});
            crossAxis$35set(startX);
            mainAxis$35set(0);
            break;
          }
        case C[27] || CT.C27:
          {
            innerConstraints = new geometry.BoxConstraints.tightFor({width: this[_context$0].childMainAxis, height: this[_context$0].childCrossAxis});
            mainAxis$35set(startX);
            crossAxis$35set(0);
            break;
          }
      }
      let c = 0;
      this[_context$0].lastChild = this[_context$0].firstChild;
      for (let child of this.children[$sublist](this[_context$0].firstChild, math.min(core.int, this.children[$length], this[_context$0].firstChild + this.crossAxisCount * dart.nullCheck(this[_mainAxisCount])))) {
        child.layout(context, innerConstraints);
        if (!(child.box != null)) dart.assertFailed(null, I[11], 166, 14, "child.box != null");
        switch (this.direction) {
          case C[24] || CT.C24:
            {
              child.box = rect$.PdfRect.fromPoints(new point$.PdfPoint.new((dart.nullCheck(this[_context$0].childCrossAxis) - dart.nullCheck(child.box).width) / 2.0 + crossAxis$35get(), totalMain + this.padding.bottom - (dart.nullCheck(this[_context$0].childMainAxis) - dart.nullCheck(child.box).height) / 2.0 - mainAxis$35get() - dart.nullCheck(child.box).height), dart.nullCheck(child.box).size);
              break;
            }
          case C[27] || CT.C27:
            {
              child.box = rect$.PdfRect.fromPoints(new point$.PdfPoint.new((dart.nullCheck(this[_context$0].childMainAxis) - dart.nullCheck(child.box).width) / 2.0 + mainAxis$35get(), totalCross + this.padding.bottom - (dart.nullCheck(this[_context$0].childCrossAxis) - dart.nullCheck(child.box).height) / 2.0 - crossAxis$35get() - dart.nullCheck(child.box).height), dart.nullCheck(child.box).size);
              break;
            }
        }
        if ((c = c + 1) >= this.crossAxisCount) {
          mainAxis$35set(mainAxis$35get() + (dart.nullCheck(this[_context$0].childMainAxis) + this.mainAxisSpacing));
          switch (this.direction) {
            case C[24] || CT.C24:
              {
                crossAxis$35set(startX);
                break;
              }
            case C[27] || CT.C27:
              {
                crossAxis$35set(0);
                break;
              }
          }
          c = 0;
          if (mainAxis$35get() > mainAxisExtent$35get()) {
            t16 = this[_context$0];
            t16.lastChild = t16.lastChild + 1;
            break;
          }
        } else {
          crossAxis$35set(crossAxis$35get() + (dart.nullCheck(this[_context$0].childCrossAxis) + this.crossAxisSpacing));
        }
        t16$ = this[_context$0];
        t16$.lastChild = t16$.lastChild + 1;
      }
      switch (this.direction) {
        case C[24] || CT.C24:
          {
            this.box = constraints.constrainRect({width: totalCross + this.padding.horizontal, height: totalMain + this.padding.vertical});
            break;
          }
        case C[27] || CT.C27:
          {
            this.box = constraints.constrainRect({width: totalMain + this.padding.horizontal, height: totalCross + this.padding.vertical});
            break;
          }
      }
    }
    debugPaint(context) {
      let t16, t16$, t16$0, t16$1, t16$2;
      super.debugPaint(context);
      if (this.children[$isEmpty]) {
        return;
      }
      t16 = context.canvas;
      (() => {
        t16.setFillColor(colors.PdfColors.lime);
        t16.moveTo(dart.nullCheck(this.box).left, dart.nullCheck(this.box).bottom);
        t16.lineTo(dart.nullCheck(this.box).right, dart.nullCheck(this.box).bottom);
        t16.lineTo(dart.nullCheck(this.box).right, dart.nullCheck(this.box).top);
        t16.lineTo(dart.nullCheck(this.box).left, dart.nullCheck(this.box).top);
        t16.moveTo(dart.nullCheck(this.box).left + this.padding.left, dart.nullCheck(this.box).bottom + this.padding.bottom);
        t16.lineTo(dart.nullCheck(this.box).left + this.padding.left, dart.nullCheck(this.box).top - this.padding.top);
        t16.lineTo(dart.nullCheck(this.box).right - this.padding.right, dart.nullCheck(this.box).top - this.padding.top);
        t16.lineTo(dart.nullCheck(this.box).right - this.padding.right, dart.nullCheck(this.box).bottom + this.padding.bottom);
        t16.fillPath();
        return t16;
      })();
      for (let c = 1; c < this.crossAxisCount; c = c + 1) {
        switch (this.direction) {
          case C[24] || CT.C24:
            {
              t16$ = context.canvas;
              (() => {
                t16$.drawRect(dart.nullCheck(this.box).left + this.padding.left + (dart.nullCheck(this[_context$0].childCrossAxis) + this.crossAxisSpacing) * c - this.crossAxisSpacing, dart.nullCheck(this.box).bottom + this.padding.bottom, math.max(core.double, this.crossAxisSpacing, 1.0), dart.nullCheck(this.box).height - this.padding.vertical);
                t16$.fillPath();
                return t16$;
              })();
              break;
            }
          case C[27] || CT.C27:
            {
              t16$0 = context.canvas;
              (() => {
                t16$0.drawRect(dart.nullCheck(this.box).left + this.padding.left, dart.nullCheck(this.box).bottom + this.padding.bottom + (dart.nullCheck(this[_context$0].childCrossAxis) + this.crossAxisSpacing) * c - this.crossAxisSpacing, dart.nullCheck(this.box).width - this.padding.horizontal, math.max(core.double, this.crossAxisSpacing, 1.0));
                t16$0.fillPath();
                return t16$0;
              })();
              break;
            }
        }
      }
      for (let c = 1; c < dart.nullCheck(this[_mainAxisCount]); c = c + 1) {
        switch (this.direction) {
          case C[24] || CT.C24:
            {
              t16$1 = context.canvas;
              (() => {
                t16$1.drawRect(dart.nullCheck(this.box).left + this.padding.left, dart.nullCheck(this.box).bottom + this.padding.bottom + (dart.nullCheck(this[_context$0].childMainAxis) + this.mainAxisSpacing) * c - this.mainAxisSpacing, dart.nullCheck(this.box).width - this.padding.horizontal, math.max(core.double, this.mainAxisSpacing, 1.0));
                t16$1.fillPath();
                return t16$1;
              })();
              break;
            }
          case C[27] || CT.C27:
            {
              t16$2 = context.canvas;
              (() => {
                t16$2.drawRect(dart.nullCheck(this.box).left + this.padding.left + (dart.nullCheck(this[_context$0].childMainAxis) + this.mainAxisSpacing) * c - this.mainAxisSpacing, dart.nullCheck(this.box).bottom + this.padding.bottom, math.max(core.double, this.mainAxisSpacing, 1.0), dart.nullCheck(this.box).height - this.padding.vertical);
                t16$2.fillPath();
                return t16$2;
              })();
              break;
            }
        }
      }
    }
    paint(context) {
      let t16;
      super.paint(context);
      let mat = vector_math_64.Matrix4.identity();
      mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
      t16 = context.canvas;
      (() => {
        t16.saveContext();
        t16.setTransform(mat);
        return t16;
      })();
      for (let child of this.children[$sublist](this[_context$0].firstChild, this[_context$0].lastChild)) {
        child.paint(context);
      }
      context.canvas.restoreContext();
    }
    get canSpan() {
      return true;
    }
    get hasMoreWidgets() {
      return true;
    }
    restoreContext(context) {
      grid_view._GridViewContext.as(context);
      this[_context$0].apply(context);
      this[_context$0].firstChild = context.lastChild;
    }
    saveContext() {
      return this[_context$0];
    }
  };
  (grid_view.GridView.new = function(opts) {
    let direction = opts && 'direction' in opts ? opts.direction : C[24] || CT.C24;
    let padding = opts && 'padding' in opts ? opts.padding : C[25] || CT.C25;
    let crossAxisCount = opts && 'crossAxisCount' in opts ? opts.crossAxisCount : null;
    let mainAxisSpacing = opts && 'mainAxisSpacing' in opts ? opts.mainAxisSpacing : 0;
    let crossAxisSpacing = opts && 'crossAxisSpacing' in opts ? opts.crossAxisSpacing : 0;
    let childAspectRatio = opts && 'childAspectRatio' in opts ? opts.childAspectRatio : 1 / 0;
    let children = opts && 'children' in opts ? opts.children : C[26] || CT.C26;
    this[_context$0] = new grid_view._GridViewContext.new();
    this[_mainAxisCount] = null;
    this[direction$] = direction;
    this[padding$] = padding;
    this[crossAxisCount$] = crossAxisCount;
    this[mainAxisSpacing$] = mainAxisSpacing;
    this[crossAxisSpacing$] = crossAxisSpacing;
    this[childAspectRatio$] = childAspectRatio;
    grid_view.GridView.__proto__.new.call(this, {children: children});
    ;
  }).prototype = grid_view.GridView.prototype;
  dart.addTypeTests(grid_view.GridView);
  dart.addTypeCaches(grid_view.GridView);
  dart.setMethodSignature(grid_view.GridView, () => ({
    __proto__: dart.getMethods(grid_view.GridView.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {}),
    restoreContext: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    saveContext: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setGetterSignature(grid_view.GridView, () => ({
    __proto__: dart.getGetters(grid_view.GridView.__proto__),
    canSpan: core.bool,
    hasMoreWidgets: core.bool
  }));
  dart.setLibraryUri(grid_view.GridView, I[10]);
  dart.setFieldSignature(grid_view.GridView, () => ({
    __proto__: dart.getFields(grid_view.GridView.__proto__),
    direction: dart.finalFieldType(flex$.Axis),
    padding: dart.finalFieldType(geometry.EdgeInsets),
    crossAxisCount: dart.finalFieldType(core.int),
    mainAxisSpacing: dart.finalFieldType(core.double),
    crossAxisSpacing: dart.finalFieldType(core.double),
    childAspectRatio: dart.finalFieldType(core.double),
    [_context$0]: dart.finalFieldType(grid_view._GridViewContext),
    [_mainAxisCount]: dart.fieldType(dart.nullable(core.int))
  }));
  var horizontalColor = dart.privateName(grid_paper, "GridPaper.horizontalColor");
  var verticalColor = dart.privateName(grid_paper, "GridPaper.verticalColor");
  var horizontalInterval = dart.privateName(grid_paper, "GridPaper.horizontalInterval");
  var verticalInterval = dart.privateName(grid_paper, "GridPaper.verticalInterval");
  var horizontalDivisions = dart.privateName(grid_paper, "GridPaper.horizontalDivisions");
  var verticalDivisions = dart.privateName(grid_paper, "GridPaper.verticalDivisions");
  var horizontalSubdivisions = dart.privateName(grid_paper, "GridPaper.horizontalSubdivisions");
  var verticalSubdivisions = dart.privateName(grid_paper, "GridPaper.verticalSubdivisions");
  var margin$ = dart.privateName(grid_paper, "GridPaper.margin");
  var horizontalOffset = dart.privateName(grid_paper, "GridPaper.horizontalOffset");
  var verticalOffset = dart.privateName(grid_paper, "GridPaper.verticalOffset");
  var border$0 = dart.privateName(grid_paper, "GridPaper.border");
  var scale = dart.privateName(grid_paper, "GridPaper.scale");
  var opacity = dart.privateName(grid_paper, "GridPaper.opacity");
  var child$0 = dart.privateName(widget$, "SingleChildWidget.child");
  const Widget_SpanningWidget$36$1 = class Widget_SpanningWidget extends widget$.Widget {};
  (Widget_SpanningWidget$36$1.new = function() {
    Widget_SpanningWidget$36$1.__proto__.new.call(this);
  }).prototype = Widget_SpanningWidget$36$1.prototype;
  dart.applyMixin(Widget_SpanningWidget$36$1, multi_page.SpanningWidget);
  widget$.SingleChildWidget = class SingleChildWidget extends Widget_SpanningWidget$36$1 {
    get child() {
      return this[child$0];
    }
    set child(value) {
      super.child = value;
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (this.child != null) {
        dart.nullCheck(this.child).layout(context, constraints, {parentUsesSize: parentUsesSize});
        if (!(dart.nullCheck(this.child).box != null)) dart.assertFailed(null, I[5], 303, 14, "child!.box != null");
        this.box = dart.nullCheck(this.child).box;
      } else {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.smallest);
      }
    }
    paintChild(context) {
      let t16;
      if (this.child != null) {
        let mat = vector_math_64.Matrix4.identity();
        mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
        t16 = context.canvas;
        (() => {
          t16.saveContext();
          t16.setTransform(mat);
          return t16;
        })();
        dart.nullCheck(this.child).paint(context);
        context.canvas.restoreContext();
      }
    }
    get canSpan() {
      return multi_page.SpanningWidget.is(this.child) && multi_page.SpanningWidget.as(this.child).canSpan;
    }
    get hasMoreWidgets() {
      return multi_page.SpanningWidget.is(this.child) && multi_page.SpanningWidget.as(this.child).hasMoreWidgets;
    }
    restoreContext(context) {
      multi_page.WidgetContext.as(context);
      if (multi_page.SpanningWidget.is(this.child)) {
        multi_page.SpanningWidget.as(this.child).restoreContext(context);
      }
    }
    saveContext() {
      if (multi_page.SpanningWidget.is(this.child)) {
        return multi_page.SpanningWidget.as(this.child).saveContext();
      }
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (widget$.SingleChildWidget.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    this[child$0] = child;
    widget$.SingleChildWidget.__proto__.new.call(this);
    ;
  }).prototype = widget$.SingleChildWidget.prototype;
  dart.addTypeTests(widget$.SingleChildWidget);
  dart.addTypeCaches(widget$.SingleChildWidget);
  dart.setMethodSignature(widget$.SingleChildWidget, () => ({
    __proto__: dart.getMethods(widget$.SingleChildWidget.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {}),
    paintChild: dart.fnType(dart.void, [widget$.Context]),
    restoreContext: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    saveContext: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setGetterSignature(widget$.SingleChildWidget, () => ({
    __proto__: dart.getGetters(widget$.SingleChildWidget.__proto__),
    canSpan: core.bool,
    hasMoreWidgets: core.bool
  }));
  dart.setLibraryUri(widget$.SingleChildWidget, I[6]);
  dart.setFieldSignature(widget$.SingleChildWidget, () => ({
    __proto__: dart.getFields(widget$.SingleChildWidget.__proto__),
    child: dart.finalFieldType(dart.nullable(widget$.Widget))
  }));
  grid_paper.GridPaper = class GridPaper extends widget$.SingleChildWidget {
    get horizontalColor() {
      return this[horizontalColor];
    }
    set horizontalColor(value) {
      super.horizontalColor = value;
    }
    get verticalColor() {
      return this[verticalColor];
    }
    set verticalColor(value) {
      super.verticalColor = value;
    }
    get horizontalInterval() {
      return this[horizontalInterval];
    }
    set horizontalInterval(value) {
      super.horizontalInterval = value;
    }
    get verticalInterval() {
      return this[verticalInterval];
    }
    set verticalInterval(value) {
      super.verticalInterval = value;
    }
    get horizontalDivisions() {
      return this[horizontalDivisions];
    }
    set horizontalDivisions(value) {
      super.horizontalDivisions = value;
    }
    get verticalDivisions() {
      return this[verticalDivisions];
    }
    set verticalDivisions(value) {
      super.verticalDivisions = value;
    }
    get horizontalSubdivisions() {
      return this[horizontalSubdivisions];
    }
    set horizontalSubdivisions(value) {
      super.horizontalSubdivisions = value;
    }
    get verticalSubdivisions() {
      return this[verticalSubdivisions];
    }
    set verticalSubdivisions(value) {
      super.verticalSubdivisions = value;
    }
    get margin() {
      return this[margin$];
    }
    set margin(value) {
      super.margin = value;
    }
    get horizontalOffset() {
      return this[horizontalOffset];
    }
    set horizontalOffset(value) {
      super.horizontalOffset = value;
    }
    get verticalOffset() {
      return this[verticalOffset];
    }
    set verticalOffset(value) {
      super.verticalOffset = value;
    }
    get border() {
      return this[border$0];
    }
    set border(value) {
      super.border = value;
    }
    get scale() {
      return this[scale];
    }
    set scale(value) {
      super.scale = value;
    }
    get opacity() {
      return this[opacity];
    }
    set opacity(value) {
      super.opacity = value;
    }
    static ['_#new#tearOff'](opts) {
      let color = opts && 'color' in opts ? opts.color : C[28] || CT.C28;
      let interval = opts && 'interval' in opts ? opts.interval : 100;
      let divisions = opts && 'divisions' in opts ? opts.divisions : 5;
      let subdivisions = opts && 'subdivisions' in opts ? opts.subdivisions : 2;
      let child = opts && 'child' in opts ? opts.child : null;
      return new grid_paper.GridPaper.new({color: color, interval: interval, divisions: divisions, subdivisions: subdivisions, child: child});
    }
    static ['_#millimeter#tearOff'](opts) {
      let color = opts && 'color' in opts ? opts.color : C[28] || CT.C28;
      let child = opts && 'child' in opts ? opts.child : null;
      return new grid_paper.GridPaper.millimeter({color: color, child: child});
    }
    static ['_#seyes#tearOff'](opts) {
      let margin = opts && 'margin' in opts ? opts.margin : C[30] || CT.C30;
      let child = opts && 'child' in opts ? opts.child : null;
      return new grid_paper.GridPaper.seyes({margin: margin, child: child});
    }
    static ['_#collegeRuled#tearOff'](opts) {
      let margin = opts && 'margin' in opts ? opts.margin : C[35] || CT.C35;
      let child = opts && 'child' in opts ? opts.child : null;
      return new grid_paper.GridPaper.collegeRuled({margin: margin, child: child});
    }
    static ['_#quad#tearOff'](opts) {
      let color = opts && 'color' in opts ? opts.color : C[28] || CT.C28;
      let child = opts && 'child' in opts ? opts.child : null;
      return new grid_paper.GridPaper.quad({color: color, child: child});
    }
    static ['_#engineering#tearOff'](opts) {
      let color = opts && 'color' in opts ? opts.color : C[28] || CT.C28;
      let child = opts && 'child' in opts ? opts.child : null;
      return new grid_paper.GridPaper.engineering({color: color, child: child});
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.biggest);
      if (this.child != null) {
        if (constraints.hasBoundedWidth && constraints.hasBoundedHeight) {
          let childConstraints = new geometry.BoxConstraints.new({maxWidth: constraints.maxWidth - this.margin.horizontal, maxHeight: constraints.maxHeight - this.margin.vertical});
          dart.nullCheck(this.child).layout(context, childConstraints, {parentUsesSize: false});
        } else {
          dart.nullCheck(this.child).layout(context, constraints, {parentUsesSize: false});
        }
        if (!(dart.nullCheck(this.child).box != null)) dart.assertFailed(null, I[12], 217, 14, "child!.box != null");
        dart.nullCheck(this.child).box = rect$.PdfRect.fromPoints(new point$.PdfPoint.new(this.margin.left, dart.nullCheck(this.box).top - this.margin.top - dart.nullCheck(dart.nullCheck(this.child).box).height), dart.nullCheck(dart.nullCheck(this.child).box).size);
      }
    }
    paint(context) {
      let t16, t16$, t16$0, t16$1, t16$2, t16$3;
      super.paint(context);
      this.paintChild(context);
      context.canvas.saveContext();
      context.canvas.setGraphicState(new graphic_state.PdfGraphicState.new({opacity: this.opacity}));
      context.canvas.setStrokeColor(this.horizontalColor);
      let l = this.scale;
      let m = l / 2;
      let s = m / 2;
      let allHorizontalDivisions = (this.horizontalDivisions * this.horizontalSubdivisions)[$toDouble]();
      let n = this.horizontalOffset;
      for (let x = dart.nullCheck(this.box).left + this.margin.left; x <= dart.nullCheck(this.box).right - this.margin.right; x = x + this.horizontalInterval / allHorizontalDivisions) {
        t16 = context.canvas;
        (() => {
          t16.setLineWidth(n[$modulo](this.horizontalSubdivisions * this.horizontalDivisions) === 0 ? l : n[$modulo](this.horizontalSubdivisions) === 0 ? m : s);
          t16.drawLine(x, dart.nullCheck(this.box).top, x, dart.nullCheck(this.box).bottom);
          t16.strokePath();
          return t16;
        })();
        n = n + 1;
      }
      context.canvas.setStrokeColor(this.verticalColor);
      let allVerticalDivisions = (this.verticalDivisions * this.verticalSubdivisions)[$toDouble]();
      n = this.verticalOffset;
      for (let y = dart.nullCheck(this.box).top - this.margin.top; y >= dart.nullCheck(this.box).bottom + this.margin.bottom; y = y - this.verticalInterval / allVerticalDivisions) {
        t16$ = context.canvas;
        (() => {
          t16$.setLineWidth(n[$modulo](this.verticalSubdivisions * this.verticalDivisions) === 0 ? l : n[$modulo](this.verticalSubdivisions) === 0 ? m : s);
          t16$.drawLine(dart.nullCheck(this.box).left, y, dart.nullCheck(this.box).right, y);
          t16$.strokePath();
          return t16$;
        })();
        n = n + 1;
      }
      if (this.border.left.style.paint) {
        this.border.left.style.setStyle(context);
        t16$0 = context.canvas;
        (() => {
          t16$0.setStrokeColor(this.border.left.color);
          t16$0.setLineWidth(this.border.left.width);
          t16$0.drawLine(dart.nullCheck(this.box).left + this.margin.left, dart.nullCheck(this.box).top, dart.nullCheck(this.box).left + this.margin.left, dart.nullCheck(this.box).bottom);
          t16$0.strokePath();
          return t16$0;
        })();
        this.border.left.style.unsetStyle(context);
      }
      if (this.border.right.style.paint) {
        this.border.right.style.setStyle(context);
        t16$1 = context.canvas;
        (() => {
          t16$1.setStrokeColor(this.border.right.color);
          t16$1.setLineWidth(this.border.right.width);
          t16$1.drawLine(dart.nullCheck(this.box).right - this.margin.right, dart.nullCheck(this.box).top, dart.nullCheck(this.box).right - this.margin.right, dart.nullCheck(this.box).bottom);
          t16$1.strokePath();
          return t16$1;
        })();
        this.border.right.style.unsetStyle(context);
      }
      if (this.border.top.style.paint) {
        this.border.top.style.setStyle(context);
        t16$2 = context.canvas;
        (() => {
          t16$2.setStrokeColor(this.border.top.color);
          t16$2.setLineWidth(this.border.top.width);
          t16$2.drawLine(dart.nullCheck(this.box).left, dart.nullCheck(this.box).top - this.margin.top, dart.nullCheck(this.box).right, dart.nullCheck(this.box).top - this.margin.top);
          t16$2.strokePath();
          return t16$2;
        })();
        this.border.top.style.unsetStyle(context);
      }
      if (this.border.bottom.style.paint) {
        this.border.bottom.style.setStyle(context);
        t16$3 = context.canvas;
        (() => {
          t16$3.setStrokeColor(this.border.bottom.color);
          t16$3.setLineWidth(this.border.bottom.width);
          t16$3.drawLine(dart.nullCheck(this.box).left, dart.nullCheck(this.box).bottom + this.margin.bottom, dart.nullCheck(this.box).right, dart.nullCheck(this.box).bottom + this.margin.bottom);
          t16$3.strokePath();
          return t16$3;
        })();
        this.border.bottom.style.unsetStyle(context);
      }
      context.canvas.restoreContext();
    }
  };
  (grid_paper.GridPaper.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : C[28] || CT.C28;
    let interval = opts && 'interval' in opts ? opts.interval : 100;
    let divisions = opts && 'divisions' in opts ? opts.divisions : 5;
    let subdivisions = opts && 'subdivisions' in opts ? opts.subdivisions : 2;
    let child = opts && 'child' in opts ? opts.child : null;
    if (!(divisions > 0)) dart.assertFailed("The \"divisions\" property must be greater than zero. If there were no divisions, the grid paper would not paint anything.", I[12], 32, 16, "divisions > 0");
    if (!(subdivisions > 0)) dart.assertFailed("The \"subdivisions\" property must be greater than zero. If there were no subdivisions, the grid paper would not paint anything.", I[12], 34, 16, "subdivisions > 0");
    this[horizontalColor] = color;
    this[verticalColor] = color;
    this[horizontalInterval] = interval;
    this[verticalInterval] = interval;
    this[horizontalDivisions] = divisions;
    this[verticalDivisions] = divisions;
    this[horizontalSubdivisions] = subdivisions;
    this[verticalSubdivisions] = subdivisions;
    this[margin$] = geometry.EdgeInsets.zero;
    this[horizontalOffset] = 0;
    this[verticalOffset] = 0;
    this[border$0] = C[29] || CT.C29;
    this[scale] = 1.0;
    this[opacity] = 0.5;
    grid_paper.GridPaper.__proto__.new.call(this, {child: child});
    ;
  }).prototype = grid_paper.GridPaper.prototype;
  (grid_paper.GridPaper.millimeter = function(opts) {
    let color = opts && 'color' in opts ? opts.color : C[28] || CT.C28;
    let child = opts && 'child' in opts ? opts.child : null;
    this[horizontalColor] = color;
    this[verticalColor] = color;
    this[horizontalInterval] = 5 * 28.346456692913385;
    this[verticalInterval] = 5 * 28.346456692913385;
    this[horizontalDivisions] = 5;
    this[verticalDivisions] = 5;
    this[horizontalSubdivisions] = 10;
    this[verticalSubdivisions] = 10;
    this[margin$] = geometry.EdgeInsets.zero;
    this[horizontalOffset] = 0;
    this[verticalOffset] = 0;
    this[border$0] = C[29] || CT.C29;
    this[scale] = 1.0;
    this[opacity] = 0.5;
    grid_paper.GridPaper.__proto__.new.call(this, {child: child});
    ;
  }).prototype = grid_paper.GridPaper.prototype;
  (grid_paper.GridPaper.seyes = function(opts) {
    let margin = opts && 'margin' in opts ? opts.margin : C[30] || CT.C30;
    let child = opts && 'child' in opts ? opts.child : null;
    this[margin$] = margin;
    this[horizontalColor] = C[31] || CT.C31;
    this[verticalColor] = C[31] || CT.C31;
    this[horizontalInterval] = 8 * 2.834645669291339;
    this[verticalInterval] = 8 * 2.834645669291339;
    this[horizontalDivisions] = 1;
    this[verticalDivisions] = 4;
    this[horizontalSubdivisions] = 1;
    this[verticalSubdivisions] = 1;
    this[horizontalOffset] = 0;
    this[verticalOffset] = 1;
    this[border$0] = C[32] || CT.C32;
    this[scale] = 1.0;
    this[opacity] = 1.0;
    grid_paper.GridPaper.__proto__.new.call(this, {child: child});
    ;
  }).prototype = grid_paper.GridPaper.prototype;
  (grid_paper.GridPaper.collegeRuled = function(opts) {
    let margin = opts && 'margin' in opts ? opts.margin : C[35] || CT.C35;
    let child = opts && 'child' in opts ? opts.child : null;
    this[margin$] = margin;
    this[horizontalColor] = grid_paper.GridPaper.lineColor;
    this[verticalColor] = grid_paper.GridPaper.lineColor;
    this[horizontalInterval] = 1 / 0;
    this[verticalInterval] = 9 / 32 * 72;
    this[horizontalDivisions] = 1;
    this[verticalDivisions] = 1;
    this[horizontalSubdivisions] = 1;
    this[verticalSubdivisions] = 1;
    this[horizontalOffset] = 0;
    this[verticalOffset] = 1;
    this[border$0] = C[36] || CT.C36;
    this[scale] = 1.0;
    this[opacity] = 1.0;
    grid_paper.GridPaper.__proto__.new.call(this, {child: child});
    ;
  }).prototype = grid_paper.GridPaper.prototype;
  (grid_paper.GridPaper.quad = function(opts) {
    let color = opts && 'color' in opts ? opts.color : C[28] || CT.C28;
    let child = opts && 'child' in opts ? opts.child : null;
    this[horizontalColor] = color;
    this[verticalColor] = color;
    this[horizontalInterval] = 72;
    this[verticalInterval] = 72;
    this[horizontalDivisions] = 4;
    this[verticalDivisions] = 4;
    this[horizontalSubdivisions] = 1;
    this[verticalSubdivisions] = 1;
    this[margin$] = geometry.EdgeInsets.zero;
    this[horizontalOffset] = 0;
    this[verticalOffset] = 0;
    this[border$0] = C[29] || CT.C29;
    this[scale] = 1.0;
    this[opacity] = 0.5;
    grid_paper.GridPaper.__proto__.new.call(this, {child: child});
    ;
  }).prototype = grid_paper.GridPaper.prototype;
  (grid_paper.GridPaper.engineering = function(opts) {
    let color = opts && 'color' in opts ? opts.color : C[28] || CT.C28;
    let child = opts && 'child' in opts ? opts.child : null;
    this[horizontalColor] = color;
    this[verticalColor] = color;
    this[horizontalInterval] = 72;
    this[verticalInterval] = 72;
    this[horizontalDivisions] = 5;
    this[verticalDivisions] = 5;
    this[horizontalSubdivisions] = 2;
    this[verticalSubdivisions] = 2;
    this[margin$] = geometry.EdgeInsets.zero;
    this[horizontalOffset] = 0;
    this[verticalOffset] = 0;
    this[border$0] = C[29] || CT.C29;
    this[scale] = 1.0;
    this[opacity] = 0.5;
    grid_paper.GridPaper.__proto__.new.call(this, {child: child});
    ;
  }).prototype = grid_paper.GridPaper.prototype;
  dart.addTypeTests(grid_paper.GridPaper);
  dart.addTypeCaches(grid_paper.GridPaper);
  dart.setLibraryUri(grid_paper.GridPaper, I[13]);
  dart.setFieldSignature(grid_paper.GridPaper, () => ({
    __proto__: dart.getFields(grid_paper.GridPaper.__proto__),
    horizontalColor: dart.finalFieldType(color$.PdfColor),
    verticalColor: dart.finalFieldType(color$.PdfColor),
    horizontalInterval: dart.finalFieldType(core.double),
    verticalInterval: dart.finalFieldType(core.double),
    horizontalDivisions: dart.finalFieldType(core.int),
    verticalDivisions: dart.finalFieldType(core.int),
    horizontalSubdivisions: dart.finalFieldType(core.int),
    verticalSubdivisions: dart.finalFieldType(core.int),
    margin: dart.finalFieldType(geometry.EdgeInsets),
    horizontalOffset: dart.finalFieldType(core.int),
    verticalOffset: dart.finalFieldType(core.int),
    border: dart.finalFieldType(box_border.BoxBorder),
    scale: dart.finalFieldType(core.double),
    opacity: dart.finalFieldType(core.double)
  }));
  dart.setStaticFieldSignature(grid_paper.GridPaper, () => ['lineColor']);
  dart.defineLazy(grid_paper.GridPaper, {
    /*grid_paper.GridPaper.lineColor*/get lineColor() {
      return C[28] || CT.C28;
    }
  }, false);
  var value$2 = dart.privateName(forms, "Checkbox.value");
  var tristate$ = dart.privateName(forms, "Checkbox.tristate");
  var activeColor$ = dart.privateName(forms, "Checkbox.activeColor");
  var checkColor$ = dart.privateName(forms, "Checkbox.checkColor");
  var name$ = dart.privateName(forms, "Checkbox.name");
  forms.Checkbox = class Checkbox extends widget$.SingleChildWidget {
    get value() {
      return this[value$2];
    }
    set value(value) {
      super.value = value;
    }
    get tristate() {
      return this[tristate$];
    }
    set tristate(value) {
      super.tristate = value;
    }
    get activeColor() {
      return this[activeColor$];
    }
    set activeColor(value) {
      super.activeColor = value;
    }
    get checkColor() {
      return this[checkColor$];
    }
    set checkColor(value) {
      super.checkColor = value;
    }
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    static ['_#new#tearOff'](opts) {
      let value = opts && 'value' in opts ? opts.value : null;
      let tristate = opts && 'tristate' in opts ? opts.tristate : false;
      let activeColor = opts && 'activeColor' in opts ? opts.activeColor : C[39] || CT.C39;
      let checkColor = opts && 'checkColor' in opts ? opts.checkColor : C[40] || CT.C40;
      let name = opts && 'name' in opts ? opts.name : null;
      let width = opts && 'width' in opts ? opts.width : 13;
      let height = opts && 'height' in opts ? opts.height : 13;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      return new forms.Checkbox.new({value: value, tristate: tristate, activeColor: activeColor, checkColor: checkColor, name: name, width: width, height: height, decoration: decoration});
    }
    paint(context) {
      super.paint(context);
      this.paintChild(context);
      let bf = new annotation.PdfButtonField.new({rect: context.localToGlobal(dart.nullCheck(this.box)), fieldName: this.name, value: this.value ? "/Yes" : null, defaultValue: this.value ? "/Yes" : null, flags: T$.LinkedHashSetOfPdfAnnotFlags().from([annotation.PdfAnnotFlags.print])});
      let g = bf.appearance(context.document, annotation.PdfAnnotAppearance.normal, {name: "/Yes", selected: this.value});
      g.drawRect(0.0, 0.0, bf.rect.width, bf.rect.height);
      g.setFillColor(this.activeColor);
      g.fillPath();
      g.moveTo(2.0, bf.rect.height / 2);
      g.lineTo(bf.rect.width / 3, bf.rect.height / 4);
      g.lineTo(bf.rect.width - 2, bf.rect.height / 4 * 3);
      g.setStrokeColor(this.checkColor);
      g.setLineWidth(2.0);
      g.strokePath();
      bf.appearance(context.document, annotation.PdfAnnotAppearance.normal, {name: "/Off", selected: !this.value});
      new annotation.PdfAnnot.new(context.page, bf);
    }
  };
  (forms.Checkbox.new = function(opts) {
    let t16;
    let value = opts && 'value' in opts ? opts.value : null;
    let tristate = opts && 'tristate' in opts ? opts.tristate : false;
    let activeColor = opts && 'activeColor' in opts ? opts.activeColor : C[39] || CT.C39;
    let checkColor = opts && 'checkColor' in opts ? opts.checkColor : C[40] || CT.C40;
    let name = opts && 'name' in opts ? opts.name : null;
    let width = opts && 'width' in opts ? opts.width : 13;
    let height = opts && 'height' in opts ? opts.height : 13;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    this[value$2] = value;
    this[tristate$] = tristate;
    this[activeColor$] = activeColor;
    this[checkColor$] = checkColor;
    this[name$] = name;
    forms.Checkbox.__proto__.new.call(this, {child: new container$.Container.new({width: width, height: height, margin: C[41] || CT.C41, decoration: (t16 = decoration, t16 == null ? new decoration$.BoxDecoration.new({border: box_border.Border.all({color: colors.PdfColors.grey600, width: 2.0})}) : t16)})});
    ;
  }).prototype = forms.Checkbox.prototype;
  dart.addTypeTests(forms.Checkbox);
  dart.addTypeCaches(forms.Checkbox);
  dart.setLibraryUri(forms.Checkbox, I[14]);
  dart.setFieldSignature(forms.Checkbox, () => ({
    __proto__: dart.getFields(forms.Checkbox.__proto__),
    value: dart.finalFieldType(core.bool),
    tristate: dart.finalFieldType(core.bool),
    activeColor: dart.finalFieldType(color$.PdfColor),
    checkColor: dart.finalFieldType(color$.PdfColor),
    name: dart.finalFieldType(core.String)
  }));
  var name$0 = dart.privateName(forms, "FlatButton.name");
  var flags$ = dart.privateName(forms, "FlatButton.flags");
  var _childDown = dart.privateName(forms, "_childDown");
  var Radius_y = dart.privateName(border_radius, "Radius.y");
  var Radius_x = dart.privateName(border_radius, "Radius.x");
  var BorderRadius_bottomRight = dart.privateName(border_radius, "BorderRadius.bottomRight");
  var BorderRadius_bottomLeft = dart.privateName(border_radius, "BorderRadius.bottomLeft");
  var BorderRadius_topRight = dart.privateName(border_radius, "BorderRadius.topRight");
  var BorderRadius_topLeft = dart.privateName(border_radius, "BorderRadius.topLeft");
  var _childRollover = dart.privateName(forms, "_childRollover");
  forms.FlatButton = class FlatButton extends widget$.SingleChildWidget {
    get name() {
      return this[name$0];
    }
    set name(value) {
      super.name = value;
    }
    get flags() {
      return this[flags$];
    }
    set flags(value) {
      super.flags = value;
    }
    static ['_#new#tearOff'](opts) {
      let textColor = opts && 'textColor' in opts ? opts.textColor : C[40] || CT.C40;
      let color = opts && 'color' in opts ? opts.color : C[39] || CT.C39;
      let colorDown = opts && 'colorDown' in opts ? opts.colorDown : C[38] || CT.C38;
      let colorRollover = opts && 'colorRollover' in opts ? opts.colorRollover : C[42] || CT.C42;
      let padding = opts && 'padding' in opts ? opts.padding : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let flags = opts && 'flags' in opts ? opts.flags : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let name = opts && 'name' in opts ? opts.name : null;
      return new forms.FlatButton.new({textColor: textColor, color: color, colorDown: colorDown, colorRollover: colorRollover, padding: padding, decoration: decoration, flags: flags, child: child, name: name});
    }
    paint(context) {
      let t16;
      super.paint(context);
      let bf = new annotation.PdfButtonField.new({rect: context.localToGlobal(dart.nullCheck(this.box)), fieldName: this.name, flags: this.flags, fieldFlags: T$.LinkedHashSetOfPdfFieldFlags().from([annotation.PdfFieldFlags.pushButton])});
      let mat = context.canvas.getTransform();
      let translation = vector_math_64.Vector3.new(0.0, 0.0, 0.0);
      let rotation = vector_math_64.Quaternion.new(0.0, 0.0, 0.0, 0.0);
      let scale = vector_math_64.Vector3.new(0.0, 0.0, 0.0);
      t16 = mat;
      (() => {
        t16.decompose(translation, rotation, scale);
        t16.leftTranslate(-translation.x, -translation.y);
        t16.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
        return t16;
      })();
      let canvas = bf.appearance(context.document, annotation.PdfAnnotAppearance.normal, {matrix: mat, boundingBox: this.box});
      widget$.Widget.draw(dart.nullCheck(this.child), {offset: point$.PdfPoint.zero, canvas: canvas, page: context.page, constraints: new geometry.BoxConstraints.tightFor({width: dart.nullCheck(this.box).width, height: dart.nullCheck(this.box).height})});
      canvas = bf.appearance(context.document, annotation.PdfAnnotAppearance.down, {matrix: mat, boundingBox: this.box});
      widget$.Widget.draw(this[_childDown], {offset: point$.PdfPoint.zero, canvas: canvas, page: context.page, constraints: new geometry.BoxConstraints.tightFor({width: dart.nullCheck(this.box).width, height: dart.nullCheck(this.box).height})});
      canvas = bf.appearance(context.document, annotation.PdfAnnotAppearance.rollover, {matrix: mat, boundingBox: this.box});
      widget$.Widget.draw(this[_childRollover], {offset: point$.PdfPoint.zero, canvas: canvas, page: context.page, constraints: new geometry.BoxConstraints.tightFor({width: dart.nullCheck(this.box).width, height: dart.nullCheck(this.box).height})});
      new annotation.PdfAnnot.new(context.page, bf);
    }
  };
  (forms.FlatButton.new = function(opts) {
    let t16, t16$, t16$0, t16$1, t16$2, t16$3;
    let textColor = opts && 'textColor' in opts ? opts.textColor : C[40] || CT.C40;
    let color = opts && 'color' in opts ? opts.color : C[39] || CT.C39;
    let colorDown = opts && 'colorDown' in opts ? opts.colorDown : C[38] || CT.C38;
    let colorRollover = opts && 'colorRollover' in opts ? opts.colorRollover : C[42] || CT.C42;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let name = opts && 'name' in opts ? opts.name : null;
    this[flags$] = flags;
    this[name$0] = name;
    this[_childDown] = new container$.Container.new({child: new theme$.DefaultTextStyle.new({style: new text_style.TextStyle.new({color: textColor}), child: child}), decoration: (t16 = decoration, t16 == null ? new decoration$.BoxDecoration.new({color: colorDown, borderRadius: C[43] || CT.C43}) : t16), padding: (t16$ = padding, t16$ == null ? C[45] || CT.C45 : t16$)});
    this[_childRollover] = new container$.Container.new({child: new theme$.DefaultTextStyle.new({style: new text_style.TextStyle.new({color: textColor}), child: child}), decoration: (t16$0 = decoration, t16$0 == null ? new decoration$.BoxDecoration.new({color: colorRollover, borderRadius: C[43] || CT.C43}) : t16$0), padding: (t16$1 = padding, t16$1 == null ? C[45] || CT.C45 : t16$1)});
    forms.FlatButton.__proto__.new.call(this, {child: new container$.Container.new({child: new theme$.DefaultTextStyle.new({style: new text_style.TextStyle.new({color: textColor}), child: child}), decoration: (t16$2 = decoration, t16$2 == null ? new decoration$.BoxDecoration.new({color: color, borderRadius: C[43] || CT.C43}) : t16$2), padding: (t16$3 = padding, t16$3 == null ? C[45] || CT.C45 : t16$3)})});
    ;
  }).prototype = forms.FlatButton.prototype;
  dart.addTypeTests(forms.FlatButton);
  dart.addTypeCaches(forms.FlatButton);
  dart.setLibraryUri(forms.FlatButton, I[14]);
  dart.setFieldSignature(forms.FlatButton, () => ({
    __proto__: dart.getFields(forms.FlatButton.__proto__),
    name: dart.finalFieldType(core.String),
    [_childDown]: dart.finalFieldType(widget$.Widget),
    [_childRollover]: dart.finalFieldType(widget$.Widget),
    flags: dart.finalFieldType(dart.nullable(core.Set$(annotation.PdfAnnotFlags)))
  }));
  var child$1 = dart.privateName(forms, "TextField.child");
  var width$1 = dart.privateName(forms, "TextField.width");
  var height$ = dart.privateName(forms, "TextField.height");
  var name$1 = dart.privateName(forms, "TextField.name");
  var border$1 = dart.privateName(forms, "TextField.border");
  var flags$0 = dart.privateName(forms, "TextField.flags");
  var date$ = dart.privateName(forms, "TextField.date");
  var color$2 = dart.privateName(forms, "TextField.color");
  var backgroundColor$1 = dart.privateName(forms, "TextField.backgroundColor");
  var highlighting$ = dart.privateName(forms, "TextField.highlighting");
  var maxLength$ = dart.privateName(forms, "TextField.maxLength");
  var alternateName$ = dart.privateName(forms, "TextField.alternateName");
  var mappingName$ = dart.privateName(forms, "TextField.mappingName");
  var fieldFlags$ = dart.privateName(forms, "TextField.fieldFlags");
  var value$3 = dart.privateName(forms, "TextField.value");
  var defaultValue$ = dart.privateName(forms, "TextField.defaultValue");
  var textStyle$ = dart.privateName(forms, "TextField.textStyle");
  var PdfName_value = dart.privateName(data_types, "PdfName.value");
  var _child = dart.privateName(widget$, "_child");
  const Widget_SpanningWidget$36$2 = class Widget_SpanningWidget extends widget$.Widget {};
  (Widget_SpanningWidget$36$2.new = function() {
    Widget_SpanningWidget$36$2.__proto__.new.call(this);
  }).prototype = Widget_SpanningWidget$36$2.prototype;
  dart.applyMixin(Widget_SpanningWidget$36$2, multi_page.SpanningWidget);
  widget$.StatelessWidget = class StatelessWidget extends Widget_SpanningWidget$36$2 {
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this[_child] == null ? this[_child] = this.build(context) : null;
      if (this[_child] != null) {
        dart.nullCheck(this[_child]).layout(context, constraints, {parentUsesSize: parentUsesSize});
        if (!(dart.nullCheck(this[_child]).box != null)) dart.assertFailed(null, I[5], 241, 14, "_child!.box != null");
        this.box = dart.nullCheck(this[_child]).box;
      } else {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.smallest);
      }
    }
    paint(context) {
      let t16;
      super.paint(context);
      if (this[_child] != null) {
        let mat = vector_math_64.Matrix4.identity();
        mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
        t16 = context.canvas;
        (() => {
          t16.saveContext();
          t16.setTransform(mat);
          return t16;
        })();
        dart.nullCheck(this[_child]).paint(context);
        context.canvas.restoreContext();
      }
    }
    get canSpan() {
      return this[_child] != null && multi_page.SpanningWidget.is(this[_child]) && multi_page.SpanningWidget.as(this[_child]).canSpan;
    }
    get hasMoreWidgets() {
      return multi_page.SpanningWidget.is(this[_child]) && multi_page.SpanningWidget.as(this[_child]).hasMoreWidgets;
    }
    restoreContext(context) {
      multi_page.WidgetContext.as(context);
      if (multi_page.SpanningWidget.is(this[_child])) {
        multi_page.SpanningWidget.as(this[_child]).restoreContext(context);
      }
    }
    saveContext() {
      if (multi_page.SpanningWidget.is(this[_child])) {
        return multi_page.SpanningWidget.as(this[_child]).saveContext();
      }
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (widget$.StatelessWidget.new = function() {
    this[_child] = null;
    widget$.StatelessWidget.__proto__.new.call(this);
    ;
  }).prototype = widget$.StatelessWidget.prototype;
  dart.addTypeTests(widget$.StatelessWidget);
  dart.addTypeCaches(widget$.StatelessWidget);
  dart.setMethodSignature(widget$.StatelessWidget, () => ({
    __proto__: dart.getMethods(widget$.StatelessWidget.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {}),
    restoreContext: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    saveContext: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setGetterSignature(widget$.StatelessWidget, () => ({
    __proto__: dart.getGetters(widget$.StatelessWidget.__proto__),
    canSpan: core.bool,
    hasMoreWidgets: core.bool
  }));
  dart.setLibraryUri(widget$.StatelessWidget, I[6]);
  dart.setFieldSignature(widget$.StatelessWidget, () => ({
    __proto__: dart.getFields(widget$.StatelessWidget.__proto__),
    [_child]: dart.fieldType(dart.nullable(widget$.Widget))
  }));
  forms.TextField = class TextField extends widget$.StatelessWidget {
    get child() {
      return this[child$1];
    }
    set child(value) {
      super.child = value;
    }
    get width() {
      return this[width$1];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    get name() {
      return this[name$1];
    }
    set name(value) {
      super.name = value;
    }
    get border() {
      return this[border$1];
    }
    set border(value) {
      super.border = value;
    }
    get flags() {
      return this[flags$0];
    }
    set flags(value) {
      super.flags = value;
    }
    get date() {
      return this[date$];
    }
    set date(value) {
      super.date = value;
    }
    get color() {
      return this[color$2];
    }
    set color(value) {
      super.color = value;
    }
    get backgroundColor() {
      return this[backgroundColor$1];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get highlighting() {
      return this[highlighting$];
    }
    set highlighting(value) {
      super.highlighting = value;
    }
    get maxLength() {
      return this[maxLength$];
    }
    set maxLength(value) {
      super.maxLength = value;
    }
    get alternateName() {
      return this[alternateName$];
    }
    set alternateName(value) {
      super.alternateName = value;
    }
    get mappingName() {
      return this[mappingName$];
    }
    set mappingName(value) {
      super.mappingName = value;
    }
    get fieldFlags() {
      return this[fieldFlags$];
    }
    set fieldFlags(value) {
      super.fieldFlags = value;
    }
    get value() {
      return this[value$3];
    }
    set value(value) {
      super.value = value;
    }
    get defaultValue() {
      return this[defaultValue$];
    }
    set defaultValue(value) {
      super.defaultValue = value;
    }
    get textStyle() {
      return this[textStyle$];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    static ['_#new#tearOff'](opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let width = opts && 'width' in opts ? opts.width : 120;
      let height = opts && 'height' in opts ? opts.height : 13;
      let name = opts && 'name' in opts ? opts.name : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let flags = opts && 'flags' in opts ? opts.flags : null;
      let date = opts && 'date' in opts ? opts.date : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
      let maxLength = opts && 'maxLength' in opts ? opts.maxLength : null;
      let alternateName = opts && 'alternateName' in opts ? opts.alternateName : null;
      let mappingName = opts && 'mappingName' in opts ? opts.mappingName : null;
      let fieldFlags = opts && 'fieldFlags' in opts ? opts.fieldFlags : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      return new forms.TextField.new({child: child, width: width, height: height, name: name, border: border, flags: flags, date: date, color: color, backgroundColor: backgroundColor, highlighting: highlighting, maxLength: maxLength, alternateName: alternateName, mappingName: mappingName, fieldFlags: fieldFlags, value: value, defaultValue: defaultValue, textStyle: textStyle});
    }
    build(context) {
      let t16;
      t16 = this.child;
      return t16 == null ? new basic.SizedBox.new({width: this.width, height: this.height}) : t16;
    }
    paint(context) {
      let t16, t16$;
      super.paint(context);
      let _textStyle = theme$.Theme.of(context).defaultTextStyle.merge(this.textStyle);
      let tf = new annotation.PdfTextField.new({rect: context.localToGlobal(dart.nullCheck(this.box)), fieldName: this.name, border: this.border, flags: (t16 = this.flags, t16 == null ? C[46] || CT.C46 : t16), date: this.date, color: this.color, backgroundColor: this.backgroundColor, highlighting: this.highlighting, maxLength: this.maxLength, alternateName: this.alternateName, mappingName: this.mappingName, fieldFlags: this.fieldFlags, value: this.value, defaultValue: this.defaultValue, font: dart.nullCheck(_textStyle.font).getFont(context), fontSize: dart.nullCheck(_textStyle.fontSize), textColor: dart.nullCheck(_textStyle.color)});
      let mat = context.canvas.getTransform();
      let translation = vector_math_64.Vector3.new(0.0, 0.0, 0.0);
      let rotation = vector_math_64.Quaternion.new(0.0, 0.0, 0.0, 0.0);
      let scale = vector_math_64.Vector3.new(0.0, 0.0, 0.0);
      t16$ = mat;
      (() => {
        t16$.decompose(translation, rotation, scale);
        t16$.leftTranslate(-translation.x, -translation.y);
        t16$.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
        return t16$;
      })();
      if (this.value != null) {
        let canvas = tf.appearance(context.document, annotation.PdfAnnotAppearance.normal, {matrix: mat, boundingBox: this.box});
        canvas.markContentBegin(C[48] || CT.C48);
        widget$.Widget.draw(new text$1.Text.new(dart.nullCheck(this.value), {style: _textStyle}), {offset: point$.PdfPoint.zero, canvas: canvas, page: context.page, constraints: new geometry.BoxConstraints.tightFor({width: dart.nullCheck(this.box).width, height: dart.nullCheck(this.box).height})});
        canvas.markContentEnd();
      }
      new annotation.PdfAnnot.new(context.page, tf);
    }
  };
  (forms.TextField.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let width = opts && 'width' in opts ? opts.width : 120;
    let height = opts && 'height' in opts ? opts.height : 13;
    let name = opts && 'name' in opts ? opts.name : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
    let maxLength = opts && 'maxLength' in opts ? opts.maxLength : null;
    let alternateName = opts && 'alternateName' in opts ? opts.alternateName : null;
    let mappingName = opts && 'mappingName' in opts ? opts.mappingName : null;
    let fieldFlags = opts && 'fieldFlags' in opts ? opts.fieldFlags : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    this[child$1] = child;
    this[width$1] = width;
    this[height$] = height;
    this[name$1] = name;
    this[border$1] = border;
    this[flags$0] = flags;
    this[date$] = date;
    this[color$2] = color;
    this[backgroundColor$1] = backgroundColor;
    this[highlighting$] = highlighting;
    this[maxLength$] = maxLength;
    this[alternateName$] = alternateName;
    this[mappingName$] = mappingName;
    this[fieldFlags$] = fieldFlags;
    this[value$3] = value;
    this[defaultValue$] = defaultValue;
    this[textStyle$] = textStyle;
    forms.TextField.__proto__.new.call(this);
    ;
  }).prototype = forms.TextField.prototype;
  dart.addTypeTests(forms.TextField);
  dart.addTypeCaches(forms.TextField);
  dart.setMethodSignature(forms.TextField, () => ({
    __proto__: dart.getMethods(forms.TextField.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(forms.TextField, I[14]);
  dart.setFieldSignature(forms.TextField, () => ({
    __proto__: dart.getFields(forms.TextField.__proto__),
    child: dart.finalFieldType(dart.nullable(widget$.Widget)),
    width: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    name: dart.finalFieldType(core.String),
    border: dart.finalFieldType(dart.nullable(border.PdfBorder)),
    flags: dart.finalFieldType(dart.nullable(core.Set$(annotation.PdfAnnotFlags))),
    date: dart.finalFieldType(dart.nullable(core.DateTime)),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    backgroundColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    highlighting: dart.finalFieldType(dart.nullable(annotation.PdfAnnotHighlighting)),
    maxLength: dart.finalFieldType(dart.nullable(core.int)),
    alternateName: dart.finalFieldType(dart.nullable(core.String)),
    mappingName: dart.finalFieldType(dart.nullable(core.String)),
    fieldFlags: dart.finalFieldType(dart.nullable(core.Set$(annotation.PdfFieldFlags))),
    value: dart.finalFieldType(dart.nullable(core.String)),
    defaultValue: dart.finalFieldType(dart.nullable(core.String)),
    textStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle))
  }));
  var name$2 = dart.privateName(forms, "Signature.name");
  var value$4 = dart.privateName(forms, "Signature.value");
  var appendOnly$ = dart.privateName(forms, "Signature.appendOnly");
  var border$2 = dart.privateName(forms, "Signature.border");
  var flags$1 = dart.privateName(forms, "Signature.flags");
  var date$0 = dart.privateName(forms, "Signature.date");
  var color$3 = dart.privateName(forms, "Signature.color");
  var highlighting$0 = dart.privateName(forms, "Signature.highlighting");
  var crl$ = dart.privateName(forms, "Signature.crl");
  var cert$ = dart.privateName(forms, "Signature.cert");
  var ocsp$ = dart.privateName(forms, "Signature.ocsp");
  forms.Signature = class Signature extends widget$.SingleChildWidget {
    get name() {
      return this[name$2];
    }
    set name(value) {
      super.name = value;
    }
    get value() {
      return this[value$4];
    }
    set value(value) {
      super.value = value;
    }
    get appendOnly() {
      return this[appendOnly$];
    }
    set appendOnly(value) {
      super.appendOnly = value;
    }
    get border() {
      return this[border$2];
    }
    set border(value) {
      super.border = value;
    }
    get flags() {
      return this[flags$1];
    }
    set flags(value) {
      super.flags = value;
    }
    get date() {
      return this[date$0];
    }
    set date(value) {
      super.date = value;
    }
    get color() {
      return this[color$3];
    }
    set color(value) {
      super.color = value;
    }
    get highlighting() {
      return this[highlighting$0];
    }
    set highlighting(value) {
      super.highlighting = value;
    }
    get crl() {
      return this[crl$];
    }
    set crl(value) {
      super.crl = value;
    }
    get cert() {
      return this[cert$];
    }
    set cert(value) {
      super.cert = value;
    }
    get ocsp() {
      return this[ocsp$];
    }
    set ocsp(value) {
      super.ocsp = value;
    }
    static ['_#new#tearOff'](opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let crypto = opts && 'crypto' in opts ? opts.crypto : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let appendOnly = opts && 'appendOnly' in opts ? opts.appendOnly : false;
      let border = opts && 'border' in opts ? opts.border : null;
      let flags = opts && 'flags' in opts ? opts.flags : null;
      let date = opts && 'date' in opts ? opts.date : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
      let crl = opts && 'crl' in opts ? opts.crl : null;
      let cert = opts && 'cert' in opts ? opts.cert : null;
      let ocsp = opts && 'ocsp' in opts ? opts.ocsp : null;
      return new forms.Signature.new({child: child, crypto: crypto, value: value, name: name, appendOnly: appendOnly, border: border, flags: flags, date: date, color: color, highlighting: highlighting, crl: crl, cert: cert, ocsp: ocsp});
    }
    paint(context) {
      let t16, t17;
      super.paint(context);
      if (this.value != null) {
        t16 = context.document;
        t16.sign == null ? t16.sign = new signature.PdfSignature.new(context.document, {value: dart.nullCheck(this.value), flags: (() => {
            let t17 = T$.LinkedHashSetOfPdfSigFlags().from([signature.PdfSigFlags.signaturesExist]);
            if (this.appendOnly) t17.add(signature.PdfSigFlags.appendOnly);
            return t17;
          })(), crl: this.crl, cert: this.cert, ocsp: this.ocsp}) : null;
      } else {
        this.paintChild(context);
      }
      let bf = new annotation.PdfAnnotSign.new({rect: context.localToGlobal(dart.nullCheck(this.box)), fieldName: this.name, border: this.border, flags: this.flags, date: this.date, color: this.color, highlighting: this.highlighting});
      if (this.child != null && this.value != null) {
        let mat = context.canvas.getTransform();
        let translation = vector_math_64.Vector3.new(0.0, 0.0, 0.0);
        let rotation = vector_math_64.Quaternion.new(0.0, 0.0, 0.0, 0.0);
        let scale = vector_math_64.Vector3.new(0.0, 0.0, 0.0);
        t17 = mat;
        (() => {
          t17.decompose(translation, rotation, scale);
          t17.leftTranslate(-translation.x, -translation.y);
          t17.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
          return t17;
        })();
        let canvas = bf.appearance(context.document, annotation.PdfAnnotAppearance.normal, {matrix: mat});
        widget$.Widget.draw(dart.nullCheck(this.child), {offset: point$.PdfPoint.zero, canvas: canvas, page: context.page, constraints: new geometry.BoxConstraints.tightFor({width: dart.nullCheck(this.box).width, height: dart.nullCheck(this.box).height})});
      }
      new annotation.PdfAnnot.new(context.page, bf);
    }
  };
  (forms.Signature.new = function(opts) {
    let t16;
    let child = opts && 'child' in opts ? opts.child : null;
    let crypto = opts && 'crypto' in opts ? opts.crypto : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let appendOnly = opts && 'appendOnly' in opts ? opts.appendOnly : false;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
    let crl = opts && 'crl' in opts ? opts.crl : null;
    let cert = opts && 'cert' in opts ? opts.cert : null;
    let ocsp = opts && 'ocsp' in opts ? opts.ocsp : null;
    this[name$2] = name;
    this[appendOnly$] = appendOnly;
    this[border$2] = border;
    this[flags$1] = flags;
    this[date$0] = date;
    this[color$3] = color;
    this[highlighting$0] = highlighting;
    this[crl$] = crl;
    this[cert$] = cert;
    this[ocsp$] = ocsp;
    this[value$4] = (t16 = value, t16 == null ? crypto : t16);
    forms.Signature.__proto__.new.call(this, {child: child});
    ;
  }).prototype = forms.Signature.prototype;
  dart.addTypeTests(forms.Signature);
  dart.addTypeCaches(forms.Signature);
  dart.setLibraryUri(forms.Signature, I[14]);
  dart.setFieldSignature(forms.Signature, () => ({
    __proto__: dart.getFields(forms.Signature.__proto__),
    name: dart.finalFieldType(core.String),
    value: dart.finalFieldType(dart.nullable(signature.PdfSignatureBase)),
    appendOnly: dart.finalFieldType(core.bool),
    border: dart.finalFieldType(dart.nullable(border.PdfBorder)),
    flags: dart.finalFieldType(dart.nullable(core.Set$(annotation.PdfAnnotFlags))),
    date: dart.finalFieldType(dart.nullable(core.DateTime)),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    highlighting: dart.finalFieldType(dart.nullable(annotation.PdfAnnotHighlighting)),
    crl: dart.finalFieldType(dart.nullable(core.List$(typed_data.Uint8List))),
    cert: dart.finalFieldType(dart.nullable(core.List$(typed_data.Uint8List))),
    ocsp: dart.finalFieldType(dart.nullable(core.List$(typed_data.Uint8List)))
  }));
  var title$ = dart.privateName(content, "Header.title");
  var text$2 = dart.privateName(content, "Header.text");
  var child$2 = dart.privateName(content, "Header.child");
  var level$ = dart.privateName(content, "Header.level");
  var decoration$1 = dart.privateName(content, "Header.decoration");
  var margin$0 = dart.privateName(content, "Header.margin");
  var padding$0 = dart.privateName(content, "Header.padding");
  var textStyle$0 = dart.privateName(content, "Header.textStyle");
  var outlineColor$ = dart.privateName(content, "Header.outlineColor");
  var outlineStyle$ = dart.privateName(content, "Header.outlineStyle");
  var BoxDecoration_boxShadow = dart.privateName(decoration$, "BoxDecoration.boxShadow");
  var BoxDecoration_gradient = dart.privateName(decoration$, "BoxDecoration.gradient");
  var BoxDecoration_image = dart.privateName(decoration$, "BoxDecoration.image");
  var BoxDecoration_shape = dart.privateName(decoration$, "BoxDecoration.shape");
  var BoxDecoration_borderRadius = dart.privateName(decoration$, "BoxDecoration.borderRadius");
  var BoxDecoration_border = dart.privateName(decoration$, "BoxDecoration.border");
  var BoxDecoration_color = dart.privateName(decoration$, "BoxDecoration.color");
  content.Header = class Header extends widget$.StatelessWidget {
    get title() {
      return this[title$];
    }
    set title(value) {
      super.title = value;
    }
    get text() {
      return this[text$2];
    }
    set text(value) {
      super.text = value;
    }
    get child() {
      return this[child$2];
    }
    set child(value) {
      super.child = value;
    }
    get level() {
      return this[level$];
    }
    set level(value) {
      super.level = value;
    }
    get decoration() {
      return this[decoration$1];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get margin() {
      return this[margin$0];
    }
    set margin(value) {
      super.margin = value;
    }
    get padding() {
      return this[padding$0];
    }
    set padding(value) {
      super.padding = value;
    }
    get textStyle() {
      return this[textStyle$0];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get outlineColor() {
      return this[outlineColor$];
    }
    set outlineColor(value) {
      super.outlineColor = value;
    }
    get outlineStyle() {
      return this[outlineStyle$];
    }
    set outlineStyle(value) {
      super.outlineStyle = value;
    }
    static ['_#new#tearOff'](opts) {
      let level = opts && 'level' in opts ? opts.level : 1;
      let text = opts && 'text' in opts ? opts.text : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let margin = opts && 'margin' in opts ? opts.margin : null;
      let padding = opts && 'padding' in opts ? opts.padding : null;
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let title = opts && 'title' in opts ? opts.title : null;
      let outlineColor = opts && 'outlineColor' in opts ? opts.outlineColor : null;
      let outlineStyle = opts && 'outlineStyle' in opts ? opts.outlineStyle : C[49] || CT.C49;
      return new content.Header.new({level: level, text: text, child: child, decoration: decoration, margin: margin, padding: padding, textStyle: textStyle, title: title, outlineColor: outlineColor, outlineStyle: outlineStyle});
    }
    build(context) {
      let t17;
      let _decoration = this.decoration;
      let _margin = this.margin;
      let _padding = this.padding;
      let _textStyle = this.textStyle;
      switch (this.level) {
        case 0:
          {
            _margin == null ? _margin = C[50] || CT.C50 : null;
            _padding == null ? _padding = C[51] || CT.C51 : null;
            _decoration == null ? _decoration = C[52] || CT.C52 : null;
            _textStyle == null ? _textStyle = theme$.Theme.of(context).header0 : null;
            break;
          }
        case 1:
          {
            _margin == null ? _margin = C[54] || CT.C54 : null;
            _decoration == null ? _decoration = C[55] || CT.C55 : null;
            _textStyle == null ? _textStyle = theme$.Theme.of(context).header1 : null;
            break;
          }
        case 2:
          {
            _margin == null ? _margin = C[58] || CT.C58 : null;
            _textStyle == null ? _textStyle = theme$.Theme.of(context).header2 : null;
            break;
          }
        case 3:
          {
            _margin == null ? _margin = C[58] || CT.C58 : null;
            _textStyle == null ? _textStyle = theme$.Theme.of(context).header3 : null;
            break;
          }
        case 4:
          {
            _margin == null ? _margin = C[58] || CT.C58 : null;
            _textStyle == null ? _textStyle = theme$.Theme.of(context).header4 : null;
            break;
          }
        case 5:
          {
            _margin == null ? _margin = C[58] || CT.C58 : null;
            _textStyle == null ? _textStyle = theme$.Theme.of(context).header5 : null;
            break;
          }
      }
      let container = new container$.Container.new({alignment: geometry.Alignment.topLeft, margin: _margin, padding: _padding, decoration: _decoration, child: (t17 = this.child, t17 == null ? new text$1.Text.new(dart.nullCheck(this.text), {style: _textStyle}) : t17)});
      if (this.title == null) {
        return container;
      }
      return new annotations.Outline.new({name: dart.hashCode(this.text)[$toString](), title: dart.nullCheck(this.title), child: container, level: this.level, color: this.outlineColor, style: this.outlineStyle});
    }
  };
  (content.Header.new = function(opts) {
    let t17;
    let level = opts && 'level' in opts ? opts.level : 1;
    let text = opts && 'text' in opts ? opts.text : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let outlineColor = opts && 'outlineColor' in opts ? opts.outlineColor : null;
    let outlineStyle = opts && 'outlineStyle' in opts ? opts.outlineStyle : C[49] || CT.C49;
    this[level$] = level;
    this[text$2] = text;
    this[child$2] = child;
    this[decoration$1] = decoration;
    this[margin$0] = margin;
    this[padding$0] = padding;
    this[textStyle$0] = textStyle;
    this[outlineColor$] = outlineColor;
    this[outlineStyle$] = outlineStyle;
    if (!(level >= 0 && level <= 5)) dart.assertFailed(null, I[15], 45, 16, "level >= 0 && level <= 5");
    if (!(child != null || text != null)) dart.assertFailed(null, I[15], 46, 16, "child != null || text != null");
    this[title$] = (t17 = title, t17 == null ? text : t17);
    content.Header.__proto__.new.call(this);
    ;
  }).prototype = content.Header.prototype;
  dart.addTypeTests(content.Header);
  dart.addTypeCaches(content.Header);
  dart.setMethodSignature(content.Header, () => ({
    __proto__: dart.getMethods(content.Header.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(content.Header, I[16]);
  dart.setFieldSignature(content.Header, () => ({
    __proto__: dart.getFields(content.Header.__proto__),
    title: dart.finalFieldType(dart.nullable(core.String)),
    text: dart.finalFieldType(dart.nullable(core.String)),
    child: dart.finalFieldType(dart.nullable(widget$.Widget)),
    level: dart.finalFieldType(core.int),
    decoration: dart.finalFieldType(dart.nullable(decoration$.BoxDecoration)),
    margin: dart.finalFieldType(dart.nullable(geometry.EdgeInsets)),
    padding: dart.finalFieldType(dart.nullable(geometry.EdgeInsets)),
    textStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    outlineColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    outlineStyle: dart.finalFieldType(outline.PdfOutlineStyle)
  }));
  var _buildToc = dart.privateName(content, "_buildToc");
  content.TableOfContent = class TableOfContent extends widget$.StatelessWidget {
    [_buildToc](o, l) {
      return new (T$.SyncIterableOfWidget()).new((function* _buildToc$() {
        for (let c of o.outlines) {
          if (c.title != null) {
            yield new basic.Padding.new({padding: C[59] || CT.C59, child: new annotations.Link.new({destination: dart.nullCheck(c.anchor), child: new flex$.Row.new({children: T$.JSArrayOfWidget().of([new basic.SizedBox.new({width: 10.0 * l}), new text$1.Text.new(dart.nullCheck(c.title)), new basic.SizedBox.new({width: 8.0}), new flex$.Expanded.new({child: new basic.Divider.new({borderStyle: box_border.BorderStyle.dotted, thickness: 0.2})}), new basic.SizedBox.new({width: 8.0}), new widget$.DelayedWidget.new({build: dart.fn(_ => new text$1.Text.new(dart.str(c.page)), T$.ContextToText())})])})})});
            yield* this[_buildToc](c, l + 1);
          }
        }
      }).bind(this));
    }
    build(context) {
      if (!!multi_page.MultiPage.is(context.page)) dart.assertFailed(dart.str(this[$runtimeType]) + " will not work with MultiPage", I[15], 166, 12, "context.page is! MultiPage");
      return new flex$.Column.new({crossAxisAlignment: flex$.CrossAxisAlignment.start, children: (() => {
          let t17 = T$.ListOfWidget().of(this[_buildToc](context.document.outline, 0));
          return t17;
        })()});
    }
    static ['_#new#tearOff']() {
      return new content.TableOfContent.new();
    }
  };
  (content.TableOfContent.new = function() {
    content.TableOfContent.__proto__.new.call(this);
    ;
  }).prototype = content.TableOfContent.prototype;
  dart.addTypeTests(content.TableOfContent);
  dart.addTypeCaches(content.TableOfContent);
  dart.setMethodSignature(content.TableOfContent, () => ({
    __proto__: dart.getMethods(content.TableOfContent.__proto__),
    [_buildToc]: dart.fnType(core.Iterable$(widget$.Widget), [outline.PdfOutline, core.int]),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(content.TableOfContent, I[16]);
  var text$3 = dart.privateName(content, "Paragraph.text");
  var textAlign$ = dart.privateName(content, "Paragraph.textAlign");
  var style$ = dart.privateName(content, "Paragraph.style");
  var margin$1 = dart.privateName(content, "Paragraph.margin");
  var padding$1 = dart.privateName(content, "Paragraph.padding");
  content.Paragraph = class Paragraph extends widget$.StatelessWidget {
    get text() {
      return this[text$3];
    }
    set text(value) {
      super.text = value;
    }
    get textAlign() {
      return this[textAlign$];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    get style() {
      return this[style$];
    }
    set style(value) {
      super.style = value;
    }
    get margin() {
      return this[margin$1];
    }
    set margin(value) {
      super.margin = value;
    }
    get padding() {
      return this[padding$1];
    }
    set padding(value) {
      super.padding = value;
    }
    static ['_#new#tearOff'](opts) {
      let text = opts && 'text' in opts ? opts.text : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[60] || CT.C60;
      let style = opts && 'style' in opts ? opts.style : null;
      let margin = opts && 'margin' in opts ? opts.margin : C[50] || CT.C50;
      let padding = opts && 'padding' in opts ? opts.padding : null;
      return new content.Paragraph.new({text: text, textAlign: textAlign, style: style, margin: margin, padding: padding});
    }
    build(context) {
      let t18;
      return new container$.Container.new({margin: this.margin, padding: this.padding, child: new text$1.Text.new(dart.nullCheck(this.text), {textAlign: this.textAlign, style: (t18 = this.style, t18 == null ? theme$.Theme.of(context).paragraphStyle : t18), overflow: text$1.TextOverflow.span})});
    }
  };
  (content.Paragraph.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[60] || CT.C60;
    let style = opts && 'style' in opts ? opts.style : null;
    let margin = opts && 'margin' in opts ? opts.margin : C[50] || CT.C50;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    this[text$3] = text;
    this[textAlign$] = textAlign;
    this[style$] = style;
    this[margin$1] = margin;
    this[padding$1] = padding;
    content.Paragraph.__proto__.new.call(this);
    ;
  }).prototype = content.Paragraph.prototype;
  dart.addTypeTests(content.Paragraph);
  dart.addTypeCaches(content.Paragraph);
  dart.setMethodSignature(content.Paragraph, () => ({
    __proto__: dart.getMethods(content.Paragraph.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(content.Paragraph, I[16]);
  dart.setFieldSignature(content.Paragraph, () => ({
    __proto__: dart.getFields(content.Paragraph.__proto__),
    text: dart.finalFieldType(dart.nullable(core.String)),
    textAlign: dart.finalFieldType(text$1.TextAlign),
    style: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    margin: dart.finalFieldType(geometry.EdgeInsets),
    padding: dart.finalFieldType(dart.nullable(geometry.EdgeInsets))
  }));
  var text$4 = dart.privateName(content, "Bullet.text");
  var textAlign$0 = dart.privateName(content, "Bullet.textAlign");
  var style$0 = dart.privateName(content, "Bullet.style");
  var margin$2 = dart.privateName(content, "Bullet.margin");
  var padding$2 = dart.privateName(content, "Bullet.padding");
  var bulletMargin$ = dart.privateName(content, "Bullet.bulletMargin");
  var bulletSize$ = dart.privateName(content, "Bullet.bulletSize");
  var bulletShape$ = dart.privateName(content, "Bullet.bulletShape");
  var bulletColor$ = dart.privateName(content, "Bullet.bulletColor");
  content.Bullet = class Bullet extends widget$.StatelessWidget {
    get text() {
      return this[text$4];
    }
    set text(value) {
      super.text = value;
    }
    get textAlign() {
      return this[textAlign$0];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    get style() {
      return this[style$0];
    }
    set style(value) {
      super.style = value;
    }
    get margin() {
      return this[margin$2];
    }
    set margin(value) {
      super.margin = value;
    }
    get padding() {
      return this[padding$2];
    }
    set padding(value) {
      super.padding = value;
    }
    get bulletMargin() {
      return this[bulletMargin$];
    }
    set bulletMargin(value) {
      super.bulletMargin = value;
    }
    get bulletSize() {
      return this[bulletSize$];
    }
    set bulletSize(value) {
      super.bulletSize = value;
    }
    get bulletShape() {
      return this[bulletShape$];
    }
    set bulletShape(value) {
      super.bulletShape = value;
    }
    get bulletColor() {
      return this[bulletColor$];
    }
    set bulletColor(value) {
      super.bulletColor = value;
    }
    static ['_#new#tearOff'](opts) {
      let text = opts && 'text' in opts ? opts.text : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[61] || CT.C61;
      let style = opts && 'style' in opts ? opts.style : null;
      let margin = opts && 'margin' in opts ? opts.margin : C[62] || CT.C62;
      let padding = opts && 'padding' in opts ? opts.padding : null;
      let bulletSize = opts && 'bulletSize' in opts ? opts.bulletSize : 5.669291338582678;
      let bulletMargin = opts && 'bulletMargin' in opts ? opts.bulletMargin : C[63] || CT.C63;
      let bulletShape = opts && 'bulletShape' in opts ? opts.bulletShape : C[13] || CT.C13;
      let bulletColor = opts && 'bulletColor' in opts ? opts.bulletColor : C[10] || CT.C10;
      return new content.Bullet.new({text: text, textAlign: textAlign, style: style, margin: margin, padding: padding, bulletSize: bulletSize, bulletMargin: bulletMargin, bulletShape: bulletShape, bulletColor: bulletColor});
    }
    build(context) {
      return new container$.Container.new({margin: this.margin, padding: this.padding, child: new flex$.Row.new({crossAxisAlignment: flex$.CrossAxisAlignment.start, children: T$.JSArrayOfWidget().of([new container$.Container.new({width: this.bulletSize, height: this.bulletSize, margin: this.bulletMargin, decoration: new decoration$.BoxDecoration.new({color: this.bulletColor, shape: this.bulletShape})}), new flex$.Expanded.new({child: this.text == null ? new basic.SizedBox.new() : new text$1.Text.new(dart.nullCheck(this.text), {textAlign: this.textAlign, style: theme$.Theme.of(context).bulletStyle.merge(this.style)})})])})});
    }
  };
  (content.Bullet.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[61] || CT.C61;
    let style = opts && 'style' in opts ? opts.style : null;
    let margin = opts && 'margin' in opts ? opts.margin : C[62] || CT.C62;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let bulletSize = opts && 'bulletSize' in opts ? opts.bulletSize : 5.669291338582678;
    let bulletMargin = opts && 'bulletMargin' in opts ? opts.bulletMargin : C[63] || CT.C63;
    let bulletShape = opts && 'bulletShape' in opts ? opts.bulletShape : C[13] || CT.C13;
    let bulletColor = opts && 'bulletColor' in opts ? opts.bulletColor : C[10] || CT.C10;
    this[text$4] = text;
    this[textAlign$0] = textAlign;
    this[style$0] = style;
    this[margin$2] = margin;
    this[padding$2] = padding;
    this[bulletSize$] = bulletSize;
    this[bulletMargin$] = bulletMargin;
    this[bulletShape$] = bulletShape;
    this[bulletColor$] = bulletColor;
    content.Bullet.__proto__.new.call(this);
    ;
  }).prototype = content.Bullet.prototype;
  dart.addTypeTests(content.Bullet);
  dart.addTypeCaches(content.Bullet);
  dart.setMethodSignature(content.Bullet, () => ({
    __proto__: dart.getMethods(content.Bullet.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(content.Bullet, I[16]);
  dart.setFieldSignature(content.Bullet, () => ({
    __proto__: dart.getFields(content.Bullet.__proto__),
    text: dart.finalFieldType(dart.nullable(core.String)),
    textAlign: dart.finalFieldType(text$1.TextAlign),
    style: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    margin: dart.finalFieldType(geometry.EdgeInsets),
    padding: dart.finalFieldType(dart.nullable(geometry.EdgeInsets)),
    bulletMargin: dart.finalFieldType(geometry.EdgeInsets),
    bulletSize: dart.finalFieldType(core.double),
    bulletShape: dart.finalFieldType(decoration$.BoxShape),
    bulletColor: dart.finalFieldType(color$.PdfColor)
  }));
  var child$3 = dart.privateName(content, "Watermark.child");
  var angle$ = dart.privateName(content, "Watermark.angle");
  var fit$ = dart.privateName(content, "Watermark.fit");
  content.Watermark = class Watermark extends widget$.StatelessWidget {
    get child() {
      return this[child$3];
    }
    set child(value) {
      super.child = value;
    }
    get angle() {
      return this[angle$];
    }
    set angle(value) {
      super.angle = value;
    }
    get fit() {
      return this[fit$];
    }
    set fit(value) {
      super.fit = value;
    }
    static ['_#new#tearOff'](opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let fit = opts && 'fit' in opts ? opts.fit : C[64] || CT.C64;
      let angle = opts && 'angle' in opts ? opts.angle : 0;
      return new content.Watermark.new({child: child, fit: fit, angle: angle});
    }
    static ['_#text#tearOff'](text, opts) {
      let style = opts && 'style' in opts ? opts.style : null;
      let fit = opts && 'fit' in opts ? opts.fit : C[64] || CT.C64;
      let angle = opts && 'angle' in opts ? opts.angle : 0.7853981633974483;
      return new content.Watermark.text(text, {style: style, fit: fit, angle: angle});
    }
    build(context) {
      return new basic.SizedBox.expand({child: new basic.FittedBox.new({fit: this.fit, child: new basic.Transform.rotateBox({angle: this.angle, child: this.child})})});
    }
  };
  (content.Watermark.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let fit = opts && 'fit' in opts ? opts.fit : C[64] || CT.C64;
    let angle = opts && 'angle' in opts ? opts.angle : 0;
    this[child$3] = child;
    this[fit$] = fit;
    this[angle$] = angle;
    content.Watermark.__proto__.new.call(this);
    ;
  }).prototype = content.Watermark.prototype;
  (content.Watermark.text = function(text, opts) {
    let t18;
    let style = opts && 'style' in opts ? opts.style : null;
    let fit = opts && 'fit' in opts ? opts.fit : C[64] || CT.C64;
    let angle = opts && 'angle' in opts ? opts.angle : 0.7853981633974483;
    this[fit$] = fit;
    this[angle$] = angle;
    this[child$3] = new text$1.Text.new(text, {style: (t18 = style, t18 == null ? new text_style.TextStyle.new({color: colors.PdfColors.grey200, fontWeight: text_style.FontWeight.bold}) : t18)});
    content.Watermark.__proto__.new.call(this);
    ;
  }).prototype = content.Watermark.prototype;
  dart.addTypeTests(content.Watermark);
  dart.addTypeCaches(content.Watermark);
  dart.setMethodSignature(content.Watermark, () => ({
    __proto__: dart.getMethods(content.Watermark.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(content.Watermark, I[16]);
  dart.setFieldSignature(content.Watermark, () => ({
    __proto__: dart.getFields(content.Watermark.__proto__),
    child: dart.finalFieldType(widget$.Widget),
    angle: dart.finalFieldType(core.double),
    fit: dart.finalFieldType(basic.BoxFit)
  }));
  var leading$ = dart.privateName(content, "Footer.leading");
  var title$0 = dart.privateName(content, "Footer.title");
  var trailing$ = dart.privateName(content, "Footer.trailing");
  var margin$3 = dart.privateName(content, "Footer.margin");
  var padding$3 = dart.privateName(content, "Footer.padding");
  var decoration$2 = dart.privateName(content, "Footer.decoration");
  content.Footer = class Footer extends widget$.StatelessWidget {
    get leading() {
      return this[leading$];
    }
    set leading(value) {
      super.leading = value;
    }
    get title() {
      return this[title$0];
    }
    set title(value) {
      super.title = value;
    }
    get trailing() {
      return this[trailing$];
    }
    set trailing(value) {
      super.trailing = value;
    }
    get margin() {
      return this[margin$3];
    }
    set margin(value) {
      super.margin = value;
    }
    get padding() {
      return this[padding$3];
    }
    set padding(value) {
      super.padding = value;
    }
    get decoration() {
      return this[decoration$2];
    }
    set decoration(value) {
      super.decoration = value;
    }
    static ['_#new#tearOff'](opts) {
      let leading = opts && 'leading' in opts ? opts.leading : null;
      let title = opts && 'title' in opts ? opts.title : null;
      let trailing = opts && 'trailing' in opts ? opts.trailing : null;
      let margin = opts && 'margin' in opts ? opts.margin : null;
      let padding = opts && 'padding' in opts ? opts.padding : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      return new content.Footer.new({leading: leading, title: title, trailing: trailing, margin: margin, padding: padding, decoration: decoration});
    }
    build(context) {
      let t18, t18$, t18$0;
      return new container$.Container.new({margin: this.margin, padding: this.padding, decoration: this.decoration, child: new flex$.Row.new({mainAxisSize: flex$.MainAxisSize.max, mainAxisAlignment: flex$.MainAxisAlignment.spaceBetween, children: T$.JSArrayOfWidget().of([(t18 = this.leading, t18 == null ? new basic.SizedBox.new() : t18), (t18$ = this.title, t18$ == null ? new basic.SizedBox.new() : t18$), (t18$0 = this.trailing, t18$0 == null ? new basic.SizedBox.new() : t18$0)])})});
    }
  };
  (content.Footer.new = function(opts) {
    let leading = opts && 'leading' in opts ? opts.leading : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let trailing = opts && 'trailing' in opts ? opts.trailing : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    this[leading$] = leading;
    this[title$0] = title;
    this[trailing$] = trailing;
    this[margin$3] = margin;
    this[padding$3] = padding;
    this[decoration$2] = decoration;
    content.Footer.__proto__.new.call(this);
    ;
  }).prototype = content.Footer.prototype;
  dart.addTypeTests(content.Footer);
  dart.addTypeCaches(content.Footer);
  dart.setMethodSignature(content.Footer, () => ({
    __proto__: dart.getMethods(content.Footer.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(content.Footer, I[16]);
  dart.setFieldSignature(content.Footer, () => ({
    __proto__: dart.getFields(content.Footer.__proto__),
    leading: dart.finalFieldType(dart.nullable(widget$.Widget)),
    title: dart.finalFieldType(dart.nullable(widget$.Widget)),
    trailing: dart.finalFieldType(dart.nullable(widget$.Widget)),
    margin: dart.finalFieldType(dart.nullable(geometry.EdgeInsets)),
    padding: dart.finalFieldType(dart.nullable(geometry.EdgeInsets)),
    decoration: dart.finalFieldType(dart.nullable(decoration$.BoxDecoration))
  }));
  clip.ClipRect = class ClipRect extends widget$.SingleChildWidget {
    static ['_#new#tearOff'](opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      return new clip.ClipRect.new({child: child});
    }
    debugPaint(context) {
      let t18;
      t18 = context.canvas;
      (() => {
        t18.setStrokeColor(colors.PdfColors.deepPurple);
        t18.setLineWidth(1.0);
        t18.drawBox(dart.nullCheck(this.box));
        t18.strokePath();
        return t18;
      })();
    }
    paint(context) {
      let t18;
      super.paint(context);
      if (this.child != null) {
        let mat = vector_math_64.Matrix4.identity();
        mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
        t18 = context.canvas;
        (() => {
          t18.saveContext();
          t18.drawBox(dart.nullCheck(this.box));
          t18.clipPath();
          t18.setTransform(mat);
          return t18;
        })();
        dart.nullCheck(this.child).paint(context);
        context.canvas.restoreContext();
      }
    }
  };
  (clip.ClipRect.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    clip.ClipRect.__proto__.new.call(this, {child: child});
    ;
  }).prototype = clip.ClipRect.prototype;
  dart.addTypeTests(clip.ClipRect);
  dart.addTypeCaches(clip.ClipRect);
  dart.setLibraryUri(clip.ClipRect, I[17]);
  var horizontalRadius$ = dart.privateName(clip, "ClipRRect.horizontalRadius");
  var verticalRadius$ = dart.privateName(clip, "ClipRRect.verticalRadius");
  clip.ClipRRect = class ClipRRect extends widget$.SingleChildWidget {
    get horizontalRadius() {
      return this[horizontalRadius$];
    }
    set horizontalRadius(value) {
      super.horizontalRadius = value;
    }
    get verticalRadius() {
      return this[verticalRadius$];
    }
    set verticalRadius(value) {
      super.verticalRadius = value;
    }
    static ['_#new#tearOff'](opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let horizontalRadius = opts && 'horizontalRadius' in opts ? opts.horizontalRadius : 0;
      let verticalRadius = opts && 'verticalRadius' in opts ? opts.verticalRadius : 0;
      return new clip.ClipRRect.new({child: child, horizontalRadius: horizontalRadius, verticalRadius: verticalRadius});
    }
    debugPaint(context) {
      let t18;
      t18 = context.canvas;
      (() => {
        t18.setStrokeColor(colors.PdfColors.deepPurple);
        t18.setLineWidth(1.0);
        t18.drawRRect(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y, dart.nullCheck(this.box).width, dart.nullCheck(this.box).height, this.horizontalRadius, this.verticalRadius);
        t18.strokePath();
        return t18;
      })();
    }
    paint(context) {
      let t18;
      super.paint(context);
      if (this.child != null) {
        let mat = vector_math_64.Matrix4.identity();
        mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
        t18 = context.canvas;
        (() => {
          t18.saveContext();
          t18.drawRRect(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y, dart.nullCheck(this.box).width, dart.nullCheck(this.box).height, this.horizontalRadius, this.verticalRadius);
          t18.clipPath();
          t18.setTransform(mat);
          return t18;
        })();
        dart.nullCheck(this.child).paint(context);
        context.canvas.restoreContext();
      }
    }
  };
  (clip.ClipRRect.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let horizontalRadius = opts && 'horizontalRadius' in opts ? opts.horizontalRadius : 0;
    let verticalRadius = opts && 'verticalRadius' in opts ? opts.verticalRadius : 0;
    this[horizontalRadius$] = horizontalRadius;
    this[verticalRadius$] = verticalRadius;
    clip.ClipRRect.__proto__.new.call(this, {child: child});
    ;
  }).prototype = clip.ClipRRect.prototype;
  dart.addTypeTests(clip.ClipRRect);
  dart.addTypeCaches(clip.ClipRRect);
  dart.setLibraryUri(clip.ClipRRect, I[17]);
  dart.setFieldSignature(clip.ClipRRect, () => ({
    __proto__: dart.getFields(clip.ClipRRect.__proto__),
    horizontalRadius: dart.finalFieldType(core.double),
    verticalRadius: dart.finalFieldType(core.double)
  }));
  clip.ClipOval = class ClipOval extends widget$.SingleChildWidget {
    static ['_#new#tearOff'](opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      return new clip.ClipOval.new({child: child});
    }
    debugPaint(context) {
      let t18;
      let rx = dart.nullCheck(this.box).width / 2.0;
      let ry = dart.nullCheck(this.box).height / 2.0;
      t18 = context.canvas;
      (() => {
        t18.setStrokeColor(colors.PdfColors.deepPurple);
        t18.setLineWidth(1.0);
        t18.drawEllipse(dart.nullCheck(this.box).x + rx, dart.nullCheck(this.box).y + ry, rx, ry);
        t18.strokePath();
        return t18;
      })();
    }
    paint(context) {
      let t18;
      super.paint(context);
      let rx = dart.nullCheck(this.box).width / 2.0;
      let ry = dart.nullCheck(this.box).height / 2.0;
      if (this.child != null) {
        let mat = vector_math_64.Matrix4.identity();
        mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
        t18 = context.canvas;
        (() => {
          t18.saveContext();
          t18.drawEllipse(dart.nullCheck(this.box).x + rx, dart.nullCheck(this.box).y + ry, rx, ry);
          t18.clipPath();
          t18.setTransform(mat);
          return t18;
        })();
        dart.nullCheck(this.child).paint(context);
        context.canvas.restoreContext();
      }
    }
  };
  (clip.ClipOval.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    clip.ClipOval.__proto__.new.call(this, {child: child});
    ;
  }).prototype = clip.ClipOval.prototype;
  dart.addTypeTests(clip.ClipOval);
  dart.addTypeCaches(clip.ClipOval);
  dart.setLibraryUri(clip.ClipOval, I[17]);
  var startAngle$ = dart.privateName(pie_chart, "PieGrid.startAngle");
  var __PieGrid__radius = dart.privateName(pie_chart, "_#PieGrid#_radius");
  var _radius = dart.privateName(pie_chart, "_radius");
  chart.ChartGrid = class ChartGrid extends widget$.Widget {
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.biggest);
    }
  };
  (chart.ChartGrid.new = function() {
    chart.ChartGrid.__proto__.new.call(this);
    ;
  }).prototype = chart.ChartGrid.prototype;
  dart.addTypeTests(chart.ChartGrid);
  dart.addTypeCaches(chart.ChartGrid);
  dart.setMethodSignature(chart.ChartGrid, () => ({
    __proto__: dart.getMethods(chart.ChartGrid.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setLibraryUri(chart.ChartGrid, I[19]);
  pie_chart.PieGrid = class PieGrid extends chart.ChartGrid {
    get startAngle() {
      return this[startAngle$];
    }
    set startAngle(value) {
      super.startAngle = value;
    }
    static ['_#new#tearOff'](opts) {
      let startAngle = opts && 'startAngle' in opts ? opts.startAngle : 0;
      return new pie_chart.PieGrid.new({startAngle: startAngle});
    }
    get [_radius]() {
      let t18;
      t18 = this[__PieGrid__radius];
      return t18 == null ? dart.throw(new _internal.LateError.fieldNI("_radius")) : t18;
    }
    set [_radius](library$32package$58pdf$47src$47widgets$47chart$47pie_chart$46dart$58$58_radius$35param) {
      this[__PieGrid__radius] = library$32package$58pdf$47src$47widgets$47chart$47pie_chart$46dart$58$58_radius$35param;
    }
    get radius() {
      return this[_radius];
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      super.layout(context, constraints, {parentUsesSize: parentUsesSize});
      let datasets = chart.Chart.of(context).datasets;
      let size = constraints.biggest;
      let _gridBox = new rect$.PdfRect.new(0.0, 0.0, size.x, size.y);
      let _total = 0.0;
      for (let dataset of datasets) {
        if (!pie_chart.PieDataSet.is(dataset)) dart.assertFailed("Use only PieDataset with a PieGrid", I[18], 35, 14, "dataset is PieDataSet");
        if (pie_chart.PieDataSet.is(dataset)) {
          _total = _total + dataset.value;
        }
      }
      let unit = 3.141592653589793 / _total * 2;
      let angle = this.startAngle;
      for (let dataset of datasets) {
        if (pie_chart.PieDataSet.is(dataset)) {
          dataset.angleStart = angle;
          angle = angle + dataset.value * unit;
          dataset.angleEnd = angle;
        }
      }
      this[_radius] = math.min(core.double, _gridBox.width / 2, _gridBox.height / 2);
      let reduce = false;
      do {
        reduce = false;
        for (let dataset of datasets) {
          if (pie_chart.PieDataSet.is(dataset)) {
            dataset.layout(context, new geometry.BoxConstraints.tight(_gridBox.size));
            if (!(dataset.box != null)) dart.assertFailed(null, I[18], 60, 18, "dataset.box != null");
            if (this[_radius] > 20 && (dart.nullCheck(dataset.box).width > _gridBox.width || dart.nullCheck(dataset.box).height > _gridBox.height)) {
              this[_radius] = this[_radius] - 10;
              reduce = true;
              break;
            }
          }
        }
      } while (reduce);
    }
    toChart(p) {
      return p;
    }
    clip(context, size) {
    }
    paint(context) {
      let t18;
      super.paint(context);
      let datasets = chart.Chart.of(context).datasets;
      t18 = context.canvas;
      (() => {
        t18.saveContext();
        t18.setTransform(vector_math_64.Matrix4.translationValues(dart.nullCheck(this.box).width / 2, dart.nullCheck(this.box).height / 2, 0.0));
        return t18;
      })();
      for (let dataSet of datasets) {
        if (pie_chart.PieDataSet.is(dataSet)) {
          dataSet.paintBackground(context);
        }
      }
      for (let dataSet of datasets) {
        if (pie_chart.PieDataSet.is(dataSet)) {
          dataSet.paint(context);
        }
      }
      for (let dataSet of datasets) {
        if (pie_chart.PieDataSet.is(dataSet)) {
          dataSet.paintLegend(context);
        }
      }
      context.canvas.restoreContext();
    }
  };
  (pie_chart.PieGrid.new = function(opts) {
    let startAngle = opts && 'startAngle' in opts ? opts.startAngle : 0;
    this[__PieGrid__radius] = null;
    this[startAngle$] = startAngle;
    pie_chart.PieGrid.__proto__.new.call(this);
    ;
  }).prototype = pie_chart.PieGrid.prototype;
  dart.addTypeTests(pie_chart.PieGrid);
  dart.addTypeCaches(pie_chart.PieGrid);
  dart.setMethodSignature(pie_chart.PieGrid, () => ({
    __proto__: dart.getMethods(pie_chart.PieGrid.__proto__),
    toChart: dart.fnType(point$.PdfPoint, [point$.PdfPoint]),
    clip: dart.fnType(dart.void, [widget$.Context, point$.PdfPoint])
  }));
  dart.setGetterSignature(pie_chart.PieGrid, () => ({
    __proto__: dart.getGetters(pie_chart.PieGrid.__proto__),
    [_radius]: core.double,
    radius: core.double
  }));
  dart.setSetterSignature(pie_chart.PieGrid, () => ({
    __proto__: dart.getSetters(pie_chart.PieGrid.__proto__),
    [_radius]: core.double
  }));
  dart.setLibraryUri(pie_chart.PieGrid, I[20]);
  dart.setFieldSignature(pie_chart.PieGrid, () => ({
    __proto__: dart.getFields(pie_chart.PieGrid.__proto__),
    startAngle: dart.finalFieldType(core.double),
    [__PieGrid__radius]: dart.fieldType(dart.nullable(core.double))
  }));
  pie_chart.PieLegendPosition = class PieLegendPosition extends core._Enum {
    toString() {
      return "PieLegendPosition." + this[_name];
    }
  };
  (pie_chart.PieLegendPosition.new = function(index, name) {
    pie_chart.PieLegendPosition.__proto__.new.call(this, index, name);
    ;
  }).prototype = pie_chart.PieLegendPosition.prototype;
  dart.addTypeTests(pie_chart.PieLegendPosition);
  dart.addTypeCaches(pie_chart.PieLegendPosition);
  dart.setLibraryUri(pie_chart.PieLegendPosition, I[20]);
  dart.setStaticFieldSignature(pie_chart.PieLegendPosition, () => ['values', 'none', 'auto', 'inside', 'outside']);
  dart.defineExtensionMethods(pie_chart.PieLegendPosition, ['toString']);
  dart.defineLazy(pie_chart.PieLegendPosition, {
    /*pie_chart.PieLegendPosition.values*/get values() {
      return C[65] || CT.C65;
    },
    /*pie_chart.PieLegendPosition.none*/get none() {
      return C[66] || CT.C66;
    },
    /*pie_chart.PieLegendPosition.auto*/get auto() {
      return C[67] || CT.C67;
    },
    /*pie_chart.PieLegendPosition.inside*/get inside() {
      return C[68] || CT.C68;
    },
    /*pie_chart.PieLegendPosition.outside*/get outside() {
      return C[69] || CT.C69;
    }
  }, false);
  var value$5 = dart.privateName(pie_chart, "PieDataSet.value");
  var drawBorder$ = dart.privateName(pie_chart, "PieDataSet.drawBorder");
  var borderColor$ = dart.privateName(pie_chart, "PieDataSet.borderColor");
  var borderWidth$ = dart.privateName(pie_chart, "PieDataSet.borderWidth");
  var drawSurface$ = dart.privateName(pie_chart, "PieDataSet.drawSurface");
  var surfaceOpacity$ = dart.privateName(pie_chart, "PieDataSet.surfaceOpacity");
  var offset$ = dart.privateName(pie_chart, "PieDataSet.offset");
  var legendStyle$ = dart.privateName(pie_chart, "PieDataSet.legendStyle");
  var legendAlign$ = dart.privateName(pie_chart, "PieDataSet.legendAlign");
  var legendPosition$ = dart.privateName(pie_chart, "PieDataSet.legendPosition");
  var legendOffset$ = dart.privateName(pie_chart, "PieDataSet.legendOffset");
  var legendLineWidth$ = dart.privateName(pie_chart, "PieDataSet.legendLineWidth");
  var legendLineColor$ = dart.privateName(pie_chart, "PieDataSet.legendLineColor");
  var innerRadius$ = dart.privateName(pie_chart, "PieDataSet.innerRadius");
  var __PieDataSet_angleStart = dart.privateName(pie_chart, "_#PieDataSet#angleStart");
  var __PieDataSet_angleEnd = dart.privateName(pie_chart, "_#PieDataSet#angleEnd");
  var _legendAnchor = dart.privateName(pie_chart, "_legendAnchor");
  var _legendPivot = dart.privateName(pie_chart, "_legendPivot");
  var _legendStart = dart.privateName(pie_chart, "_legendStart");
  var _legendWidget = dart.privateName(pie_chart, "_legendWidget");
  var _isFullCircle = dart.privateName(pie_chart, "_isFullCircle");
  var _paintSliceShape = dart.privateName(pie_chart, "_paintSliceShape");
  var _paintDonnutShape = dart.privateName(pie_chart, "_paintDonnutShape");
  var _paintShape = dart.privateName(pie_chart, "_paintShape");
  var legend$ = dart.privateName(chart, "Dataset.legend");
  var color$4 = dart.privateName(chart, "Dataset.color");
  chart.Dataset = class Dataset extends widget$.Widget {
    get legend() {
      return this[legend$];
    }
    set legend(value) {
      super.legend = value;
    }
    get color() {
      return this[color$4];
    }
    set color(value) {
      super.color = value;
    }
    paintBackground(context) {
    }
    paintForeground(context) {
    }
    legendShape(context) {
      return new container$.Container.new({decoration: new decoration$.BoxDecoration.new({color: this.color, border: box_border.Border.all({color: colors.PdfColors.black, width: 0.5})})});
    }
  };
  (chart.Dataset.new = function(opts) {
    let legend = opts && 'legend' in opts ? opts.legend : null;
    let color = opts && 'color' in opts ? opts.color : null;
    this[legend$] = legend;
    this[color$4] = color;
    chart.Dataset.__proto__.new.call(this);
    ;
  }).prototype = chart.Dataset.prototype;
  dart.addTypeTests(chart.Dataset);
  dart.addTypeCaches(chart.Dataset);
  dart.setMethodSignature(chart.Dataset, () => ({
    __proto__: dart.getMethods(chart.Dataset.__proto__),
    paintBackground: dart.fnType(dart.void, [widget$.Context]),
    paintForeground: dart.fnType(dart.void, [widget$.Context]),
    legendShape: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(chart.Dataset, I[19]);
  dart.setFieldSignature(chart.Dataset, () => ({
    __proto__: dart.getFields(chart.Dataset.__proto__),
    legend: dart.finalFieldType(dart.nullable(core.String)),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor))
  }));
  pie_chart.PieDataSet = class PieDataSet extends chart.Dataset {
    get value() {
      return this[value$5];
    }
    set value(value) {
      super.value = value;
    }
    get drawBorder() {
      return this[drawBorder$];
    }
    set drawBorder(value) {
      super.drawBorder = value;
    }
    get borderColor() {
      return this[borderColor$];
    }
    set borderColor(value) {
      super.borderColor = value;
    }
    get borderWidth() {
      return this[borderWidth$];
    }
    set borderWidth(value) {
      super.borderWidth = value;
    }
    get drawSurface() {
      return this[drawSurface$];
    }
    set drawSurface(value) {
      super.drawSurface = value;
    }
    get surfaceOpacity() {
      return this[surfaceOpacity$];
    }
    set surfaceOpacity(value) {
      super.surfaceOpacity = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    get legendStyle() {
      return this[legendStyle$];
    }
    set legendStyle(value) {
      super.legendStyle = value;
    }
    get legendAlign() {
      return this[legendAlign$];
    }
    set legendAlign(value) {
      super.legendAlign = value;
    }
    get legendPosition() {
      return this[legendPosition$];
    }
    set legendPosition(value) {
      super.legendPosition = value;
    }
    get legendOffset() {
      return this[legendOffset$];
    }
    set legendOffset(value) {
      super.legendOffset = value;
    }
    get legendLineWidth() {
      return this[legendLineWidth$];
    }
    set legendLineWidth(value) {
      super.legendLineWidth = value;
    }
    get legendLineColor() {
      return this[legendLineColor$];
    }
    set legendLineColor(value) {
      super.legendLineColor = value;
    }
    get innerRadius() {
      return this[innerRadius$];
    }
    set innerRadius(value) {
      super.innerRadius = value;
    }
    static ['_#new#tearOff'](opts) {
      let value = opts && 'value' in opts ? opts.value : null;
      let legend = opts && 'legend' in opts ? opts.legend : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let borderColor = opts && 'borderColor' in opts ? opts.borderColor : C[40] || CT.C40;
      let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : 1.5;
      let drawBorder = opts && 'drawBorder' in opts ? opts.drawBorder : null;
      let drawSurface = opts && 'drawSurface' in opts ? opts.drawSurface : true;
      let surfaceOpacity = opts && 'surfaceOpacity' in opts ? opts.surfaceOpacity : 1;
      let offset = opts && 'offset' in opts ? opts.offset : 0;
      let legendStyle = opts && 'legendStyle' in opts ? opts.legendStyle : null;
      let legendAlign = opts && 'legendAlign' in opts ? opts.legendAlign : null;
      let legendPosition = opts && 'legendPosition' in opts ? opts.legendPosition : C[67] || CT.C67;
      let legendLineWidth = opts && 'legendLineWidth' in opts ? opts.legendLineWidth : 1;
      let legendLineColor = opts && 'legendLineColor' in opts ? opts.legendLineColor : null;
      let legendWidget = opts && 'legendWidget' in opts ? opts.legendWidget : null;
      let legendOffset = opts && 'legendOffset' in opts ? opts.legendOffset : 20;
      let innerRadius = opts && 'innerRadius' in opts ? opts.innerRadius : 0;
      return new pie_chart.PieDataSet.new({value: value, legend: legend, color: color, borderColor: borderColor, borderWidth: borderWidth, drawBorder: drawBorder, drawSurface: drawSurface, surfaceOpacity: surfaceOpacity, offset: offset, legendStyle: legendStyle, legendAlign: legendAlign, legendPosition: legendPosition, legendLineWidth: legendLineWidth, legendLineColor: legendLineColor, legendWidget: legendWidget, legendOffset: legendOffset, innerRadius: innerRadius});
    }
    get angleStart() {
      let t20;
      t20 = this[__PieDataSet_angleStart];
      return t20 == null ? dart.throw(new _internal.LateError.fieldNI("angleStart")) : t20;
    }
    set angleStart(angleStart$35param) {
      this[__PieDataSet_angleStart] = angleStart$35param;
    }
    get angleEnd() {
      let t20;
      t20 = this[__PieDataSet_angleEnd];
      return t20 == null ? dart.throw(new _internal.LateError.fieldNI("angleEnd")) : t20;
    }
    set angleEnd(angleEnd$35param) {
      this[__PieDataSet_angleEnd] = angleEnd$35param;
    }
    get [_isFullCircle]() {
      return this.angleEnd - this.angleStart >= 3.141592653589793 * 2;
    }
    layout(context, constraints, opts) {
      let t20;
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      let _offset = this[_isFullCircle] ? 0 : this.offset;
      let grid = pie_chart.PieGrid.as(chart.Chart.of(context).grid);
      let len = grid.radius + _offset;
      let x = -len;
      let y = -len;
      let w = len * 2;
      let h = len * 2;
      let lp = this.legendPosition === pie_chart.PieLegendPosition.auto ? this.angleEnd - this.angleStart > 3.141592653589793 / 6 ? pie_chart.PieLegendPosition.inside : pie_chart.PieLegendPosition.outside : this.legendPosition;
      let bisect = this[_isFullCircle] ? 1 / 4 * 3.141592653589793 : (this.angleStart + this.angleEnd) / 2;
      let _legendAlign = (t20 = this.legendAlign, t20 == null ? lp === pie_chart.PieLegendPosition.inside ? text$1.TextAlign.center : bisect > 3.141592653589793 ? text$1.TextAlign.right : text$1.TextAlign.left : t20);
      this[_legendWidget] == null ? this[_legendWidget] = this.legend == null ? null : new text$1.RichText.new({text: new text$1.TextSpan.new({children: T$.JSArrayOfInlineSpan().of([new text$1.TextSpan.new({text: dart.nullCheck(this.legend), style: this.legendStyle})]), style: new text_style.TextStyle.new({color: lp === pie_chart.PieLegendPosition.inside ? dart.nullCheck(this.color).isLight ? colors.PdfColors.white : colors.PdfColors.black : null})}), textAlign: _legendAlign}) : null;
      if (this[_legendWidget] != null) {
        dart.nullCheck(this[_legendWidget]).layout(context, new geometry.BoxConstraints.new({maxWidth: grid.radius, maxHeight: grid.radius}));
        if (!(dart.nullCheck(this[_legendWidget]).box != null)) dart.assertFailed(null, I[18], 228, 14, "_legendWidget!.box != null");
        let ls = dart.nullCheck(dart.nullCheck(this[_legendWidget]).box).size;
        switch (lp) {
          case C[69] || CT.C69:
            {
              let o = grid.radius + this.legendOffset;
              let cx = math.sin(bisect) * (_offset + o);
              let cy = math.cos(bisect) * (_offset + o);
              this[_legendStart] = new point$.PdfPoint.new(math.sin(bisect) * (_offset + grid.radius + this.legendOffset * 0.1), math.cos(bisect) * (_offset + grid.radius + this.legendOffset * 0.1));
              this[_legendPivot] = new point$.PdfPoint.new(cx, cy);
              if (bisect > 3.141592653589793) {
                this[_legendAnchor] = new point$.PdfPoint.new(cx - this.legendOffset / 2 * 0.8, cy);
                dart.nullCheck(this[_legendWidget]).box = rect$.PdfRect.fromPoints(new point$.PdfPoint.new(cx - this.legendOffset / 2 - ls.x, cy - ls.y / 2), ls);
                w = math.max(core.double, w, (-cx + this.legendOffset / 2 + ls.x) * 2);
                h = math.max(core.double, h, cy[$abs]() * 2 + ls.y);
                x = -w / 2;
                y = -h / 2;
              } else {
                this[_legendAnchor] = new point$.PdfPoint.new(cx + this.legendOffset / 2 * 0.8, cy);
                dart.nullCheck(this[_legendWidget]).box = rect$.PdfRect.fromPoints(new point$.PdfPoint.new(cx + this.legendOffset / 2, cy - ls.y / 2), ls);
                w = math.max(core.double, w, (cx + this.legendOffset / 2 + ls.x) * 2);
                h = math.max(core.double, h, cy[$abs]() * 2 + ls.y);
                x = -w / 2;
                y = -h / 2;
              }
              break;
            }
          case C[68] || CT.C68:
            {
              let o = null;
              let cx = null;
              let cy = null;
              if (this.innerRadius === 0) {
                o = this[_isFullCircle] ? 0.0 : grid.radius * 2 / 3;
                cx = math.sin(bisect) * (_offset + o);
                cy = math.cos(bisect) * (_offset + o);
              } else {
                o = (grid.radius + this.innerRadius) / 2;
                if (this[_isFullCircle]) {
                  cx = 0.0;
                  cy = o;
                } else {
                  cx = math.sin(bisect) * (_offset + o);
                  cy = math.cos(bisect) * (_offset + o);
                }
              }
              dart.nullCheck(this[_legendWidget]).box = rect$.PdfRect.fromPoints(new point$.PdfPoint.new(cx - ls.x / 2, cy - ls.y / 2), ls);
              break;
            }
          default:
            {
              break;
            }
        }
      }
      this.box = new rect$.PdfRect.new(x, y, w, h);
    }
    [_paintSliceShape](context) {
      let t20;
      let grid = pie_chart.PieGrid.as(chart.Chart.of(context).grid);
      let bisect = (this.angleStart + this.angleEnd) / 2;
      let cx = math.sin(bisect) * this.offset;
      let cy = math.cos(bisect) * this.offset;
      let sx = cx + math.sin(this.angleStart) * grid.radius;
      let sy = cy + math.cos(this.angleStart) * grid.radius;
      let ex = cx + math.sin(this.angleEnd) * grid.radius;
      let ey = cy + math.cos(this.angleEnd) * grid.radius;
      if (this[_isFullCircle]) {
        context.canvas.drawEllipse(0.0, 0.0, grid.radius, grid.radius);
      } else {
        t20 = context.canvas;
        (() => {
          t20.moveTo(cx, cy);
          t20.lineTo(sx, sy);
          t20.bezierArc(sx, sy, grid.radius, grid.radius, ex, ey, {large: this.angleEnd - this.angleStart > 3.141592653589793});
          return t20;
        })();
      }
    }
    [_paintDonnutShape](context) {
      let t20;
      let grid = pie_chart.PieGrid.as(chart.Chart.of(context).grid);
      let bisect = (this.angleStart + this.angleEnd) / 2;
      let cx = math.sin(bisect) * this.offset;
      let cy = math.cos(bisect) * this.offset;
      let stx = cx + math.sin(this.angleStart) * grid.radius;
      let sty = cy + math.cos(this.angleStart) * grid.radius;
      let etx = cx + math.sin(this.angleEnd) * grid.radius;
      let ety = cy + math.cos(this.angleEnd) * grid.radius;
      let sbx = cx + math.sin(this.angleStart) * this.innerRadius;
      let sby = cy + math.cos(this.angleStart) * this.innerRadius;
      let ebx = cx + math.sin(this.angleEnd) * this.innerRadius;
      let eby = cy + math.cos(this.angleEnd) * this.innerRadius;
      if (this[_isFullCircle]) {
        context.canvas.drawEllipse(0.0, 0.0, grid.radius, grid.radius);
        context.canvas.drawEllipse(0.0, 0.0, this.innerRadius, this.innerRadius, {clockwise: false});
      } else {
        t20 = context.canvas;
        (() => {
          t20.moveTo(stx, sty);
          t20.bezierArc(stx, sty, grid.radius, grid.radius, etx, ety, {large: this.angleEnd - this.angleStart > 3.141592653589793});
          t20.lineTo(ebx, eby);
          t20.bezierArc(ebx, eby, this.innerRadius, this.innerRadius, sbx, sby, {large: this.angleEnd - this.angleStart > 3.141592653589793, sweep: true});
          t20.lineTo(stx, sty);
          return t20;
        })();
      }
    }
    [_paintShape](context) {
      if (this.innerRadius === 0) {
        this[_paintSliceShape](context);
      } else {
        this[_paintDonnutShape](context);
      }
    }
    paintBackground(context) {
      let t20, t20$;
      super.paint(context);
      if (this.drawSurface) {
        this[_paintShape](context);
        if (this.surfaceOpacity !== 1) {
          t20 = context.canvas;
          (() => {
            t20.saveContext();
            t20.setGraphicState(new graphic_state.PdfGraphicState.new({opacity: this.surfaceOpacity}));
            return t20;
          })();
        }
        t20$ = context.canvas;
        (() => {
          t20$.setFillColor(this.color);
          t20$.fillPath();
          return t20$;
        })();
        if (this.surfaceOpacity !== 1) {
          context.canvas.restoreContext();
        }
      }
    }
    paint(context) {
      let t21, t20;
      super.paint(context);
      if (this.drawBorder) {
        this[_paintShape](context);
        t20 = context.canvas;
        (() => {
          t20.setLineWidth(this.borderWidth);
          t20.setLineJoin(graphics.PdfLineJoin.round);
          t20.setStrokeColor((t21 = this.borderColor, t21 == null ? this.color : t21));
          t20.strokePath({close: true});
          return t20;
        })();
      }
    }
    paintLegend(context) {
      let t20;
      if (this.legendPosition !== pie_chart.PieLegendPosition.none && this[_legendWidget] != null) {
        if (this[_legendAnchor] != null && this[_legendPivot] != null && this[_legendStart] != null) {
          t20 = context.canvas;
          (() => {
            t20.saveContext();
            t20.moveTo(dart.nullCheck(this[_legendStart]).x, dart.nullCheck(this[_legendStart]).y);
            t20.lineTo(dart.nullCheck(this[_legendPivot]).x, dart.nullCheck(this[_legendPivot]).y);
            t20.lineTo(dart.nullCheck(this[_legendAnchor]).x, dart.nullCheck(this[_legendAnchor]).y);
            t20.setLineWidth(this.legendLineWidth);
            t20.setLineCap(graphics.PdfLineCap.round);
            t20.setLineJoin(graphics.PdfLineJoin.round);
            t20.setStrokeColor(this.legendLineColor);
            t20.strokePath();
            t20.restoreContext();
            return t20;
          })();
        }
        dart.nullCheck(this[_legendWidget]).paint(context);
      }
    }
    debugPaint(context) {
      let t20;
      super.debugPaint(context);
      let grid = pie_chart.PieGrid.as(chart.Chart.of(context).grid);
      let bisect = (this.angleStart + this.angleEnd) / 2;
      let cx = math.sin(bisect) * (this.offset + grid.radius + this.legendOffset);
      let cy = math.cos(bisect) * (this.offset + grid.radius + this.legendOffset);
      if (this[_legendWidget] != null) {
        t20 = context.canvas;
        (() => {
          t20.saveContext();
          t20.moveTo(0.0, 0.0);
          t20.lineTo(cx, cy);
          t20.setLineWidth(0.5);
          t20.setLineDashPattern(T$.JSArrayOfnum().of([3, 1]));
          t20.setStrokeColor(colors.PdfColors.blue);
          t20.strokePath();
          t20.restoreContext();
          return t20;
        })();
      }
    }
  };
  (pie_chart.PieDataSet.new = function(opts) {
    let t20, t20$, t20$0;
    let value = opts && 'value' in opts ? opts.value : null;
    let legend = opts && 'legend' in opts ? opts.legend : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let borderColor = opts && 'borderColor' in opts ? opts.borderColor : C[40] || CT.C40;
    let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : 1.5;
    let drawBorder = opts && 'drawBorder' in opts ? opts.drawBorder : null;
    let drawSurface = opts && 'drawSurface' in opts ? opts.drawSurface : true;
    let surfaceOpacity = opts && 'surfaceOpacity' in opts ? opts.surfaceOpacity : 1;
    let offset = opts && 'offset' in opts ? opts.offset : 0;
    let legendStyle = opts && 'legendStyle' in opts ? opts.legendStyle : null;
    let legendAlign = opts && 'legendAlign' in opts ? opts.legendAlign : null;
    let legendPosition = opts && 'legendPosition' in opts ? opts.legendPosition : C[67] || CT.C67;
    let legendLineWidth = opts && 'legendLineWidth' in opts ? opts.legendLineWidth : 1;
    let legendLineColor = opts && 'legendLineColor' in opts ? opts.legendLineColor : null;
    let legendWidget = opts && 'legendWidget' in opts ? opts.legendWidget : null;
    let legendOffset = opts && 'legendOffset' in opts ? opts.legendOffset : 20;
    let innerRadius = opts && 'innerRadius' in opts ? opts.innerRadius : 0;
    this[__PieDataSet_angleStart] = null;
    this[__PieDataSet_angleEnd] = null;
    this[_legendAnchor] = null;
    this[_legendPivot] = null;
    this[_legendStart] = null;
    this[value$5] = value;
    this[borderColor$] = borderColor;
    this[borderWidth$] = borderWidth;
    this[drawSurface$] = drawSurface;
    this[surfaceOpacity$] = surfaceOpacity;
    this[offset$] = offset;
    this[legendStyle$] = legendStyle;
    this[legendAlign$] = legendAlign;
    this[legendPosition$] = legendPosition;
    this[legendLineWidth$] = legendLineWidth;
    this[legendOffset$] = legendOffset;
    this[innerRadius$] = innerRadius;
    if (!(innerRadius >= 0)) dart.assertFailed(null, I[18], 135, 16, "innerRadius >= 0");
    if (!(offset >= 0)) dart.assertFailed(null, I[18], 136, 16, "offset >= 0");
    this[drawBorder$] = (t20 = drawBorder, t20 == null ? borderColor != null && !color._equals(borderColor) : t20);
    if (!(dart.test((t20$ = drawBorder, t20$ == null ? borderColor != null && !color._equals(borderColor) : t20$)) || drawSurface)) dart.assertFailed(null, I[18], 138, 16, "(drawBorder ?? borderColor != null && color != borderColor) ||\n            drawSurface");
    this[_legendWidget] = legendWidget;
    this[legendLineColor$] = (t20$0 = legendLineColor, t20$0 == null ? color : t20$0);
    pie_chart.PieDataSet.__proto__.new.call(this, {legend: legend, color: color});
    ;
  }).prototype = pie_chart.PieDataSet.prototype;
  dart.addTypeTests(pie_chart.PieDataSet);
  dart.addTypeCaches(pie_chart.PieDataSet);
  dart.setMethodSignature(pie_chart.PieDataSet, () => ({
    __proto__: dart.getMethods(pie_chart.PieDataSet.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {}),
    [_paintSliceShape]: dart.fnType(dart.void, [widget$.Context]),
    [_paintDonnutShape]: dart.fnType(dart.void, [widget$.Context]),
    [_paintShape]: dart.fnType(dart.void, [widget$.Context]),
    paintLegend: dart.fnType(dart.void, [widget$.Context])
  }));
  dart.setGetterSignature(pie_chart.PieDataSet, () => ({
    __proto__: dart.getGetters(pie_chart.PieDataSet.__proto__),
    angleStart: core.double,
    angleEnd: core.double,
    [_isFullCircle]: core.bool
  }));
  dart.setSetterSignature(pie_chart.PieDataSet, () => ({
    __proto__: dart.getSetters(pie_chart.PieDataSet.__proto__),
    angleStart: core.double,
    angleEnd: core.double
  }));
  dart.setLibraryUri(pie_chart.PieDataSet, I[20]);
  dart.setFieldSignature(pie_chart.PieDataSet, () => ({
    __proto__: dart.getFields(pie_chart.PieDataSet.__proto__),
    value: dart.finalFieldType(core.num),
    [__PieDataSet_angleStart]: dart.fieldType(dart.nullable(core.double)),
    [__PieDataSet_angleEnd]: dart.fieldType(dart.nullable(core.double)),
    drawBorder: dart.finalFieldType(core.bool),
    borderColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    borderWidth: dart.finalFieldType(core.double),
    drawSurface: dart.finalFieldType(core.bool),
    surfaceOpacity: dart.finalFieldType(core.double),
    offset: dart.finalFieldType(core.double),
    legendStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    legendAlign: dart.finalFieldType(dart.nullable(text$1.TextAlign)),
    legendPosition: dart.finalFieldType(pie_chart.PieLegendPosition),
    [_legendWidget]: dart.fieldType(dart.nullable(widget$.Widget)),
    legendOffset: dart.finalFieldType(core.double),
    legendLineWidth: dart.finalFieldType(core.double),
    legendLineColor: dart.finalFieldType(color$.PdfColor),
    innerRadius: dart.finalFieldType(core.double),
    [_legendAnchor]: dart.fieldType(dart.nullable(point$.PdfPoint)),
    [_legendPivot]: dart.fieldType(dart.nullable(point$.PdfPoint)),
    [_legendStart]: dart.fieldType(dart.nullable(point$.PdfPoint))
  }));
  var x$ = dart.privateName(point_chart, "PointChartValue.x");
  var y$ = dart.privateName(point_chart, "PointChartValue.y");
  chart.ChartValue = class ChartValue extends core.Object {};
  (chart.ChartValue.new = function() {
    ;
  }).prototype = chart.ChartValue.prototype;
  dart.addTypeTests(chart.ChartValue);
  dart.addTypeCaches(chart.ChartValue);
  dart.setLibraryUri(chart.ChartValue, I[19]);
  point_chart.PointChartValue = class PointChartValue extends chart.ChartValue {
    get x() {
      return this[x$];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$];
    }
    set y(value) {
      super.y = value;
    }
    static ['_#new#tearOff'](x, y) {
      return new point_chart.PointChartValue.new(x, y);
    }
    get point() {
      return new point$.PdfPoint.new(this.x, this.y);
    }
  };
  (point_chart.PointChartValue.new = function(x, y) {
    this[x$] = x;
    this[y$] = y;
    point_chart.PointChartValue.__proto__.new.call(this);
    ;
  }).prototype = point_chart.PointChartValue.prototype;
  dart.addTypeTests(point_chart.PointChartValue);
  dart.addTypeCaches(point_chart.PointChartValue);
  dart.setGetterSignature(point_chart.PointChartValue, () => ({
    __proto__: dart.getGetters(point_chart.PointChartValue.__proto__),
    point: point$.PdfPoint
  }));
  dart.setLibraryUri(point_chart.PointChartValue, I[21]);
  dart.setFieldSignature(point_chart.PointChartValue, () => ({
    __proto__: dart.getFields(point_chart.PointChartValue.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double)
  }));
  line_chart.LineChartValue = class LineChartValue extends point_chart.PointChartValue {
    static ['_#new#tearOff'](x, y) {
      return new line_chart.LineChartValue.new(x, y);
    }
  };
  (line_chart.LineChartValue.new = function(x, y) {
    line_chart.LineChartValue.__proto__.new.call(this, x, y);
    ;
  }).prototype = line_chart.LineChartValue.prototype;
  dart.addTypeTests(line_chart.LineChartValue);
  dart.addTypeCaches(line_chart.LineChartValue);
  dart.setLibraryUri(line_chart.LineChartValue, I[22]);
  var drawLine$ = dart.privateName(line_chart, "LineDataSet.drawLine");
  var lineColor$ = dart.privateName(line_chart, "LineDataSet.lineColor");
  var lineWidth$ = dart.privateName(line_chart, "LineDataSet.lineWidth");
  var drawSurface$0 = dart.privateName(line_chart, "LineDataSet.drawSurface");
  var surfaceColor$ = dart.privateName(line_chart, "LineDataSet.surfaceColor");
  var surfaceOpacity$0 = dart.privateName(line_chart, "LineDataSet.surfaceOpacity");
  var isCurved$ = dart.privateName(line_chart, "LineDataSet.isCurved");
  var smoothness$ = dart.privateName(line_chart, "LineDataSet.smoothness");
  var PdfPoint_y = dart.privateName(point$, "PdfPoint.y");
  var PdfPoint_x = dart.privateName(point$, "PdfPoint.x");
  var _drawLine = dart.privateName(line_chart, "_drawLine");
  var _drawSurface = dart.privateName(line_chart, "_drawSurface");
  var data$ = dart.privateName(point_chart, "PointDataSet.data");
  var drawPoints$ = dart.privateName(point_chart, "PointDataSet.drawPoints");
  var pointSize$ = dart.privateName(point_chart, "PointDataSet.pointSize");
  var shape$ = dart.privateName(point_chart, "PointDataSet.shape");
  var buildValue$ = dart.privateName(point_chart, "PointDataSet.buildValue");
  var valuePosition$ = dart.privateName(point_chart, "PointDataSet.valuePosition");
  const _is_PointDataSet_default = Symbol('_is_PointDataSet_default');
  point_chart.PointDataSet$ = dart.generic(T => {
    class PointDataSet extends chart.Dataset {
      get data() {
        return this[data$];
      }
      set data(value) {
        super.data = value;
      }
      get drawPoints() {
        return this[drawPoints$];
      }
      set drawPoints(value) {
        super.drawPoints = value;
      }
      get pointSize() {
        return this[pointSize$];
      }
      set pointSize(value) {
        super.pointSize = value;
      }
      get shape() {
        return this[shape$];
      }
      set shape(value) {
        super.shape = value;
      }
      get buildValue() {
        return this[buildValue$];
      }
      set buildValue(value) {
        super.buildValue = value;
      }
      get valuePosition() {
        return this[valuePosition$];
      }
      set valuePosition(value) {
        super.valuePosition = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let data = opts && 'data' in opts ? opts.data : null;
        let legend = opts && 'legend' in opts ? opts.legend : null;
        let pointSize = opts && 'pointSize' in opts ? opts.pointSize : 3;
        let color = opts && 'color' in opts ? opts.color : C[39] || CT.C39;
        let drawPoints = opts && 'drawPoints' in opts ? opts.drawPoints : true;
        let shape = opts && 'shape' in opts ? opts.shape : null;
        let buildValue = opts && 'buildValue' in opts ? opts.buildValue : null;
        let valuePosition = opts && 'valuePosition' in opts ? opts.valuePosition : C[70] || CT.C70;
        return new (point_chart.PointDataSet$(T)).new({data: data, legend: legend, pointSize: pointSize, color: color, drawPoints: drawPoints, shape: shape, buildValue: buildValue, valuePosition: valuePosition});
      }
      get delta() {
        return this.pointSize * 0.5;
      }
      layout(context, constraints, opts) {
        let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.biggest);
      }
      automaticValuePosition(point, size, previous, next) {
        if (point.x - size.x / 2 < dart.nullCheck(this.box).left) {
          return point_chart.ValuePosition.right;
        }
        if (point.x + size.x / 2 > dart.nullCheck(this.box).right) {
          return point_chart.ValuePosition.left;
        }
        if (point.y + size.y + this.delta > dart.nullCheck(this.box).top) {
          return point_chart.ValuePosition.bottom;
        }
        return point_chart.ValuePosition.top;
      }
      paintForeground(context) {
        let t20, t20$;
        super.paintForeground(context);
        if (this.data[$isEmpty]) {
          return;
        }
        let grid = chart.Chart.of(context).grid;
        if (this.drawPoints) {
          if (this.shape == null) {
            for (let value of this.data) {
              let p = grid.toChart(value.point);
              context.canvas.drawEllipse(p.x, p.y, this.pointSize, this.pointSize);
            }
            t20 = context.canvas;
            (() => {
              t20.setColor(this.color);
              t20.fillPath();
              return t20;
            })();
          } else {
            for (let value of this.data) {
              let p = grid.toChart(value.point);
              widget$.Widget.draw(new basic.SizedBox.square({dimension: this.pointSize * 2, child: dart.nullCheck(this.shape)(context)}), {offset: p, alignment: geometry.Alignment.center, context: context});
            }
          }
        }
        if (this.buildValue != null) {
          let previous = null;
          let index = 1;
          for (let value of this.data) {
            let p = grid.toChart(value.point);
            let size = widget$.Widget.measure(dart.nullCheck(this.buildValue)(context, value), {context: context});
            let offset = null;
            let pos = this.valuePosition;
            if (pos === point_chart.ValuePosition.auto) {
              let next = index < this.data[$length] ? grid.toChart(this.data[$_get]((t20$ = index, index = t20$ + 1, t20$)).point) : null;
              pos = this.automaticValuePosition(p, size, previous, next);
            }
            switch (pos) {
              case C[72] || CT.C72:
                {
                  offset = new point$.PdfPoint.new(p.x - size.x / 2 - this.pointSize - this.delta, p.y);
                  break;
                }
              case C[73] || CT.C73:
                {
                  offset = new point$.PdfPoint.new(p.x, p.y + size.y / 2 + this.pointSize + this.delta);
                  break;
                }
              case C[74] || CT.C74:
                {
                  offset = new point$.PdfPoint.new(p.x + size.x / 2 + this.pointSize + this.delta, p.y);
                  break;
                }
              case C[75] || CT.C75:
                {
                  offset = new point$.PdfPoint.new(p.x, p.y - size.y / 2 - this.pointSize - this.delta);
                  break;
                }
              case C[70] || CT.C70:
                {
                  if (!false) dart.assertFailed("We have an issue here", I[24], 163, 20, "false");
                  offset = p;
                  break;
                }
            }
            widget$.Widget.draw(dart.nullCheck(this.buildValue)(context, value), {offset: offset, alignment: geometry.Alignment.center, context: context});
            previous = p;
          }
        }
      }
      legendShape(context) {
        return this.shape == null ? super.legendShape(context) : dart.nullCheck(this.shape)(context);
      }
    }
    (PointDataSet.new = function(opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let legend = opts && 'legend' in opts ? opts.legend : null;
      let pointSize = opts && 'pointSize' in opts ? opts.pointSize : 3;
      let color = opts && 'color' in opts ? opts.color : C[39] || CT.C39;
      let drawPoints = opts && 'drawPoints' in opts ? opts.drawPoints : true;
      let shape = opts && 'shape' in opts ? opts.shape : null;
      let buildValue = opts && 'buildValue' in opts ? opts.buildValue : null;
      let valuePosition = opts && 'valuePosition' in opts ? opts.valuePosition : C[70] || CT.C70;
      this[data$] = data;
      this[pointSize$] = pointSize;
      this[drawPoints$] = drawPoints;
      this[shape$] = shape;
      this[buildValue$] = buildValue;
      this[valuePosition$] = valuePosition;
      PointDataSet.__proto__.new.call(this, {legend: legend, color: color});
      ;
    }).prototype = PointDataSet.prototype;
    dart.addTypeTests(PointDataSet);
    PointDataSet.prototype[_is_PointDataSet_default] = true;
    dart.addTypeCaches(PointDataSet);
    dart.setMethodSignature(PointDataSet, () => ({
      __proto__: dart.getMethods(PointDataSet.__proto__),
      layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {}),
      automaticValuePosition: dart.fnType(point_chart.ValuePosition, [point$.PdfPoint, point$.PdfPoint, dart.nullable(point$.PdfPoint), dart.nullable(point$.PdfPoint)])
    }));
    dart.setGetterSignature(PointDataSet, () => ({
      __proto__: dart.getGetters(PointDataSet.__proto__),
      delta: core.double
    }));
    dart.setLibraryUri(PointDataSet, I[21]);
    dart.setFieldSignature(PointDataSet, () => ({
      __proto__: dart.getFields(PointDataSet.__proto__),
      data: dart.finalFieldType(core.List$(T)),
      drawPoints: dart.finalFieldType(core.bool),
      pointSize: dart.finalFieldType(core.double),
      shape: dart.finalFieldType(dart.nullable(dart.fnType(widget$.Widget, [widget$.Context]))),
      buildValue: dart.finalFieldType(dart.nullable(dart.fnType(widget$.Widget, [widget$.Context, T]))),
      valuePosition: dart.finalFieldType(point_chart.ValuePosition)
    }));
    return PointDataSet;
  });
  point_chart.PointDataSet = point_chart.PointDataSet$();
  dart.addTypeTests(point_chart.PointDataSet, _is_PointDataSet_default);
  const _is_LineDataSet_default = Symbol('_is_LineDataSet_default');
  line_chart.LineDataSet$ = dart.generic(T => {
    class LineDataSet extends point_chart.PointDataSet$(T) {
      get drawLine() {
        return this[drawLine$];
      }
      set drawLine(value) {
        super.drawLine = value;
      }
      get lineColor() {
        return this[lineColor$];
      }
      set lineColor(value) {
        super.lineColor = value;
      }
      get lineWidth() {
        return this[lineWidth$];
      }
      set lineWidth(value) {
        super.lineWidth = value;
      }
      get drawSurface() {
        return this[drawSurface$0];
      }
      set drawSurface(value) {
        super.drawSurface = value;
      }
      get surfaceColor() {
        return this[surfaceColor$];
      }
      set surfaceColor(value) {
        super.surfaceColor = value;
      }
      get surfaceOpacity() {
        return this[surfaceOpacity$0];
      }
      set surfaceOpacity(value) {
        super.surfaceOpacity = value;
      }
      get isCurved() {
        return this[isCurved$];
      }
      set isCurved(value) {
        super.isCurved = value;
      }
      get smoothness() {
        return this[smoothness$];
      }
      set smoothness(value) {
        super.smoothness = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let data = opts && 'data' in opts ? opts.data : null;
        let legend = opts && 'legend' in opts ? opts.legend : null;
        let pointColor = opts && 'pointColor' in opts ? opts.pointColor : null;
        let pointSize = opts && 'pointSize' in opts ? opts.pointSize : 3;
        let color = opts && 'color' in opts ? opts.color : C[39] || CT.C39;
        let lineWidth = opts && 'lineWidth' in opts ? opts.lineWidth : 2;
        let drawLine = opts && 'drawLine' in opts ? opts.drawLine : true;
        let lineColor = opts && 'lineColor' in opts ? opts.lineColor : null;
        let drawPoints = opts && 'drawPoints' in opts ? opts.drawPoints : true;
        let shape = opts && 'shape' in opts ? opts.shape : null;
        let buildValue = opts && 'buildValue' in opts ? opts.buildValue : null;
        let valuePosition = opts && 'valuePosition' in opts ? opts.valuePosition : C[70] || CT.C70;
        let drawSurface = opts && 'drawSurface' in opts ? opts.drawSurface : false;
        let surfaceOpacity = opts && 'surfaceOpacity' in opts ? opts.surfaceOpacity : 0.2;
        let surfaceColor = opts && 'surfaceColor' in opts ? opts.surfaceColor : null;
        let isCurved = opts && 'isCurved' in opts ? opts.isCurved : false;
        let smoothness = opts && 'smoothness' in opts ? opts.smoothness : 0.35;
        return new (line_chart.LineDataSet$(T)).new({data: data, legend: legend, pointColor: pointColor, pointSize: pointSize, color: color, lineWidth: lineWidth, drawLine: drawLine, lineColor: lineColor, drawPoints: drawPoints, shape: shape, buildValue: buildValue, valuePosition: valuePosition, drawSurface: drawSurface, surfaceOpacity: surfaceOpacity, surfaceColor: surfaceColor, isCurved: isCurved, smoothness: smoothness});
      }
      layout(context, constraints, opts) {
        let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.biggest);
      }
      [_drawLine](context, grid, moveTo) {
        if (this.data[$length] < 2) {
          return;
        }
        let t = C[71] || CT.C71;
        let p = grid.toChart(this.data[$first].point);
        if (moveTo) {
          context.canvas.moveTo(p.x, p.y);
        } else {
          context.canvas.lineTo(p.x, p.y);
        }
        for (let i = 1; i < this.data[$length]; i = i + 1) {
          let p = grid.toChart(this.data[$_get](i).point);
          if (!this.isCurved) {
            context.canvas.lineTo(p.x, p.y);
            continue;
          }
          let pp = grid.toChart(this.data[$_get](i - 1).point);
          let pn = grid.toChart(this.data[$_get](i + 1 < this.data[$length] ? i + 1 : i).point);
          let c1 = new point$.PdfPoint.new(pp.x + t.x, pp.y + t.y);
          t = new point$.PdfPoint.new((pn.x - pp.x) / 2 * this.smoothness, (pn.y - pp.y) / 2 * this.smoothness);
          let c2 = new point$.PdfPoint.new(p.x - t.x, p.y - t.y);
          context.canvas.curveTo(c1.x, c1.y, c2.x, c2.y, p.x, p.y);
        }
      }
      [_drawSurface](context, grid) {
        if (this.data[$length] < 2) {
          return;
        }
        let y = grid_cartesian.CartesianGrid.is(grid) ? grid.xAxisOffset : 0.0;
        this[_drawLine](context, grid, true);
        let pe = grid.toChart(this.data[$last].point);
        context.canvas.lineTo(pe.x, y);
        let pf = grid.toChart(this.data[$first].point);
        context.canvas.lineTo(pf.x, y);
      }
      paintBackground(context) {
        let t20, t21, t20$;
        if (this.data[$isEmpty]) {
          return;
        }
        let grid = chart.Chart.of(context).grid;
        if (this.drawSurface) {
          this[_drawSurface](context, grid);
          if (this.surfaceOpacity !== 1) {
            t20 = context.canvas;
            (() => {
              t20.saveContext();
              t20.setGraphicState(new graphic_state.PdfGraphicState.new({opacity: this.surfaceOpacity}));
              return t20;
            })();
          }
          t20$ = context.canvas;
          (() => {
            t20$.setFillColor((t21 = this.surfaceColor, t21 == null ? this.color : t21));
            t20$.fillPath();
            return t20$;
          })();
          if (this.surfaceOpacity !== 1) {
            context.canvas.restoreContext();
          }
        }
      }
      paint(context) {
        let t21, t20;
        super.paint(context);
        if (this.data[$isEmpty]) {
          return;
        }
        let grid = chart.Chart.of(context).grid;
        if (this.drawLine) {
          this[_drawLine](context, grid, true);
          t20 = context.canvas;
          (() => {
            t20.setStrokeColor((t21 = this.lineColor, t21 == null ? this.color : t21));
            t20.setLineWidth(this.lineWidth);
            t20.setLineCap(graphics.PdfLineCap.round);
            t20.setLineJoin(graphics.PdfLineJoin.round);
            t20.strokePath();
            return t20;
          })();
        }
      }
      automaticValuePosition(point, size, previous, next) {
        if (point.y - size.y - this.delta < dart.nullCheck(this.box).bottom) {
          return point_chart.ValuePosition.top;
        }
        if (previous != null && previous.y > point.y && next != null && next.y > point.y) {
          return point_chart.ValuePosition.bottom;
        }
        if (previous != null && previous.y < point.y && next != null && next.y > point.y) {
          return point_chart.ValuePosition.left;
        }
        if (previous != null && previous.y > point.y && next != null && next.y < point.y) {
          return point_chart.ValuePosition.right;
        }
        return super.automaticValuePosition(point, size, previous, next);
      }
    }
    (LineDataSet.new = function(opts) {
      let t20;
      let data = opts && 'data' in opts ? opts.data : null;
      let legend = opts && 'legend' in opts ? opts.legend : null;
      let pointColor = opts && 'pointColor' in opts ? opts.pointColor : null;
      let pointSize = opts && 'pointSize' in opts ? opts.pointSize : 3;
      let color = opts && 'color' in opts ? opts.color : C[39] || CT.C39;
      let lineWidth = opts && 'lineWidth' in opts ? opts.lineWidth : 2;
      let drawLine = opts && 'drawLine' in opts ? opts.drawLine : true;
      let lineColor = opts && 'lineColor' in opts ? opts.lineColor : null;
      let drawPoints = opts && 'drawPoints' in opts ? opts.drawPoints : true;
      let shape = opts && 'shape' in opts ? opts.shape : null;
      let buildValue = opts && 'buildValue' in opts ? opts.buildValue : null;
      let valuePosition = opts && 'valuePosition' in opts ? opts.valuePosition : C[70] || CT.C70;
      let drawSurface = opts && 'drawSurface' in opts ? opts.drawSurface : false;
      let surfaceOpacity = opts && 'surfaceOpacity' in opts ? opts.surfaceOpacity : 0.2;
      let surfaceColor = opts && 'surfaceColor' in opts ? opts.surfaceColor : null;
      let isCurved = opts && 'isCurved' in opts ? opts.isCurved : false;
      let smoothness = opts && 'smoothness' in opts ? opts.smoothness : 0.35;
      this[lineWidth$] = lineWidth;
      this[drawLine$] = drawLine;
      this[lineColor$] = lineColor;
      this[drawSurface$0] = drawSurface;
      this[surfaceOpacity$0] = surfaceOpacity;
      this[surfaceColor$] = surfaceColor;
      this[isCurved$] = isCurved;
      this[smoothness$] = smoothness;
      if (!(drawLine || drawPoints || drawSurface)) dart.assertFailed(null, I[23], 49, 16, "drawLine || drawPoints || drawSurface");
      LineDataSet.__proto__.new.call(this, {legend: legend, color: (t20 = pointColor, t20 == null ? color : t20), data: data, drawPoints: drawPoints, pointSize: pointSize, buildValue: buildValue, shape: shape, valuePosition: valuePosition});
      ;
    }).prototype = LineDataSet.prototype;
    dart.addTypeTests(LineDataSet);
    LineDataSet.prototype[_is_LineDataSet_default] = true;
    dart.addTypeCaches(LineDataSet);
    dart.setMethodSignature(LineDataSet, () => ({
      __proto__: dart.getMethods(LineDataSet.__proto__),
      [_drawLine]: dart.fnType(dart.void, [widget$.Context, chart.ChartGrid, core.bool]),
      [_drawSurface]: dart.fnType(dart.void, [widget$.Context, chart.ChartGrid])
    }));
    dart.setLibraryUri(LineDataSet, I[22]);
    dart.setFieldSignature(LineDataSet, () => ({
      __proto__: dart.getFields(LineDataSet.__proto__),
      drawLine: dart.finalFieldType(core.bool),
      lineColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
      lineWidth: dart.finalFieldType(core.double),
      drawSurface: dart.finalFieldType(core.bool),
      surfaceColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
      surfaceOpacity: dart.finalFieldType(core.double),
      isCurved: dart.finalFieldType(core.bool),
      smoothness: dart.finalFieldType(core.double)
    }));
    return LineDataSet;
  });
  line_chart.LineDataSet = line_chart.LineDataSet$();
  dart.addTypeTests(line_chart.LineDataSet, _is_LineDataSet_default);
  wrap$.WrapAlignment = class WrapAlignment extends core._Enum {
    toString() {
      return "WrapAlignment." + this[_name];
    }
  };
  (wrap$.WrapAlignment.new = function(index, name) {
    wrap$.WrapAlignment.__proto__.new.call(this, index, name);
    ;
  }).prototype = wrap$.WrapAlignment.prototype;
  dart.addTypeTests(wrap$.WrapAlignment);
  dart.addTypeCaches(wrap$.WrapAlignment);
  dart.setLibraryUri(wrap$.WrapAlignment, I[25]);
  dart.setStaticFieldSignature(wrap$.WrapAlignment, () => ['values', 'start', 'end', 'center', 'spaceBetween', 'spaceAround', 'spaceEvenly']);
  dart.defineExtensionMethods(wrap$.WrapAlignment, ['toString']);
  dart.defineLazy(wrap$.WrapAlignment, {
    /*wrap$.WrapAlignment.values*/get values() {
      return C[76] || CT.C76;
    },
    /*wrap$.WrapAlignment.start*/get start() {
      return C[77] || CT.C77;
    },
    /*wrap$.WrapAlignment.end*/get end() {
      return C[78] || CT.C78;
    },
    /*wrap$.WrapAlignment.center*/get center() {
      return C[79] || CT.C79;
    },
    /*wrap$.WrapAlignment.spaceBetween*/get spaceBetween() {
      return C[80] || CT.C80;
    },
    /*wrap$.WrapAlignment.spaceAround*/get spaceAround() {
      return C[81] || CT.C81;
    },
    /*wrap$.WrapAlignment.spaceEvenly*/get spaceEvenly() {
      return C[82] || CT.C82;
    }
  }, false);
  wrap$.WrapCrossAlignment = class WrapCrossAlignment extends core._Enum {
    toString() {
      return "WrapCrossAlignment." + this[_name];
    }
  };
  (wrap$.WrapCrossAlignment.new = function(index, name) {
    wrap$.WrapCrossAlignment.__proto__.new.call(this, index, name);
    ;
  }).prototype = wrap$.WrapCrossAlignment.prototype;
  dart.addTypeTests(wrap$.WrapCrossAlignment);
  dart.addTypeCaches(wrap$.WrapCrossAlignment);
  dart.setLibraryUri(wrap$.WrapCrossAlignment, I[25]);
  dart.setStaticFieldSignature(wrap$.WrapCrossAlignment, () => ['values', 'start', 'end', 'center']);
  dart.defineExtensionMethods(wrap$.WrapCrossAlignment, ['toString']);
  dart.defineLazy(wrap$.WrapCrossAlignment, {
    /*wrap$.WrapCrossAlignment.values*/get values() {
      return C[83] || CT.C83;
    },
    /*wrap$.WrapCrossAlignment.start*/get start() {
      return C[84] || CT.C84;
    },
    /*wrap$.WrapCrossAlignment.end*/get end() {
      return C[85] || CT.C85;
    },
    /*wrap$.WrapCrossAlignment.center*/get center() {
      return C[86] || CT.C86;
    }
  }, false);
  wrap$._RunMetrics = class _RunMetrics extends core.Object {
    static ['_#new#tearOff'](mainAxisExtent, crossAxisExtent, childCount) {
      return new wrap$._RunMetrics.new(mainAxisExtent, crossAxisExtent, childCount);
    }
  };
  (wrap$._RunMetrics.new = function(mainAxisExtent, crossAxisExtent, childCount) {
    this.mainAxisExtent = mainAxisExtent;
    this.crossAxisExtent = crossAxisExtent;
    this.childCount = childCount;
    ;
  }).prototype = wrap$._RunMetrics.prototype;
  dart.addTypeTests(wrap$._RunMetrics);
  dart.addTypeCaches(wrap$._RunMetrics);
  dart.setLibraryUri(wrap$._RunMetrics, I[25]);
  dart.setFieldSignature(wrap$._RunMetrics, () => ({
    __proto__: dart.getFields(wrap$._RunMetrics.__proto__),
    mainAxisExtent: dart.finalFieldType(core.double),
    crossAxisExtent: dart.finalFieldType(core.double),
    childCount: dart.finalFieldType(core.int)
  }));
  wrap$._WrapContext = class _WrapContext extends multi_page.WidgetContext {
    apply(other) {
      wrap$._WrapContext.as(other);
      this.firstChild = other.firstChild;
      this.lastChild = other.lastChild;
    }
    clone() {
      let t24;
      t24 = new wrap$._WrapContext.new();
      return (() => {
        t24.apply(this);
        return t24;
      })();
    }
    toString() {
      return dart.str(this[$runtimeType]) + " first:" + dart.str(this.firstChild) + " last:" + dart.str(this.lastChild);
    }
    static ['_#new#tearOff']() {
      return new wrap$._WrapContext.new();
    }
  };
  (wrap$._WrapContext.new = function() {
    this.firstChild = 0;
    this.lastChild = 0;
    ;
  }).prototype = wrap$._WrapContext.prototype;
  dart.addTypeTests(wrap$._WrapContext);
  dart.addTypeCaches(wrap$._WrapContext);
  dart.setMethodSignature(wrap$._WrapContext, () => ({
    __proto__: dart.getMethods(wrap$._WrapContext.__proto__),
    apply: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    clone: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setLibraryUri(wrap$._WrapContext, I[25]);
  dart.setFieldSignature(wrap$._WrapContext, () => ({
    __proto__: dart.getFields(wrap$._WrapContext.__proto__),
    firstChild: dart.fieldType(core.int),
    lastChild: dart.fieldType(core.int)
  }));
  dart.defineExtensionMethods(wrap$._WrapContext, ['toString']);
  var direction$0 = dart.privateName(wrap$, "Wrap.direction");
  var alignment$ = dart.privateName(wrap$, "Wrap.alignment");
  var spacing$ = dart.privateName(wrap$, "Wrap.spacing");
  var runAlignment$ = dart.privateName(wrap$, "Wrap.runAlignment");
  var runSpacing$ = dart.privateName(wrap$, "Wrap.runSpacing");
  var crossAxisAlignment$ = dart.privateName(wrap$, "Wrap.crossAxisAlignment");
  var verticalDirection$ = dart.privateName(wrap$, "Wrap.verticalDirection");
  var _context$1 = dart.privateName(wrap$, "_context");
  var _getMainAxisExtent = dart.privateName(wrap$, "_getMainAxisExtent");
  var _getCrossAxisExtent = dart.privateName(wrap$, "_getCrossAxisExtent");
  var _getOffset = dart.privateName(wrap$, "_getOffset");
  var _getChildCrossAxisOffset = dart.privateName(wrap$, "_getChildCrossAxisOffset");
  const MultiChildWidget_SpanningWidget$36$ = class MultiChildWidget_SpanningWidget extends widget$.MultiChildWidget {};
  (MultiChildWidget_SpanningWidget$36$.new = function(opts) {
    MultiChildWidget_SpanningWidget$36$.__proto__.new.call(this, opts);
  }).prototype = MultiChildWidget_SpanningWidget$36$.prototype;
  dart.applyMixin(MultiChildWidget_SpanningWidget$36$, multi_page.SpanningWidget);
  wrap$.Wrap = class Wrap extends MultiChildWidget_SpanningWidget$36$ {
    get direction() {
      return this[direction$0];
    }
    set direction(value) {
      super.direction = value;
    }
    get alignment() {
      return this[alignment$];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get spacing() {
      return this[spacing$];
    }
    set spacing(value) {
      super.spacing = value;
    }
    get runAlignment() {
      return this[runAlignment$];
    }
    set runAlignment(value) {
      super.runAlignment = value;
    }
    get runSpacing() {
      return this[runSpacing$];
    }
    set runSpacing(value) {
      super.runSpacing = value;
    }
    get crossAxisAlignment() {
      return this[crossAxisAlignment$];
    }
    set crossAxisAlignment(value) {
      super.crossAxisAlignment = value;
    }
    get verticalDirection() {
      return this[verticalDirection$];
    }
    set verticalDirection(value) {
      super.verticalDirection = value;
    }
    static ['_#new#tearOff'](opts) {
      let direction = opts && 'direction' in opts ? opts.direction : C[27] || CT.C27;
      let alignment = opts && 'alignment' in opts ? opts.alignment : C[77] || CT.C77;
      let spacing = opts && 'spacing' in opts ? opts.spacing : 0;
      let runAlignment = opts && 'runAlignment' in opts ? opts.runAlignment : C[77] || CT.C77;
      let runSpacing = opts && 'runSpacing' in opts ? opts.runSpacing : 0;
      let crossAxisAlignment = opts && 'crossAxisAlignment' in opts ? opts.crossAxisAlignment : C[84] || CT.C84;
      let verticalDirection = opts && 'verticalDirection' in opts ? opts.verticalDirection : C[87] || CT.C87;
      let children = opts && 'children' in opts ? opts.children : C[26] || CT.C26;
      return new wrap$.Wrap.new({direction: direction, alignment: alignment, spacing: spacing, runAlignment: runAlignment, runSpacing: runSpacing, crossAxisAlignment: crossAxisAlignment, verticalDirection: verticalDirection, children: children});
    }
    get textDirection() {
      return false;
    }
    get canSpan() {
      return true;
    }
    get hasMoreWidgets() {
      return this[_context$1].lastChild < this.children[$length];
    }
    [_getMainAxisExtent](child) {
      switch (this.direction) {
        case C[27] || CT.C27:
          {
            return dart.nullCheck(child.box).width;
          }
        case C[24] || CT.C24:
          {
            return dart.nullCheck(child.box).height;
          }
      }
    }
    [_getCrossAxisExtent](child) {
      switch (this.direction) {
        case C[27] || CT.C27:
          {
            return dart.nullCheck(child.box).height;
          }
        case C[24] || CT.C24:
          {
            return dart.nullCheck(child.box).width;
          }
      }
    }
    [_getOffset](mainAxisOffset, crossAxisOffset) {
      switch (this.direction) {
        case C[27] || CT.C27:
          {
            return new point$.PdfPoint.new(mainAxisOffset, crossAxisOffset);
          }
        case C[24] || CT.C24:
          {
            return new point$.PdfPoint.new(crossAxisOffset, mainAxisOffset);
          }
      }
    }
    [_getChildCrossAxisOffset](flipCrossAxis, runCrossAxisExtent, childCrossAxisExtent) {
      let freeSpace = runCrossAxisExtent - childCrossAxisExtent;
      switch (this.crossAxisAlignment) {
        case C[84] || CT.C84:
          {
            return flipCrossAxis ? freeSpace : 0.0;
          }
        case C[85] || CT.C85:
          {
            return flipCrossAxis ? 0.0 : freeSpace;
          }
        case C[86] || CT.C86:
          {
            return freeSpace / 2.0;
          }
      }
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (this.children[$isEmpty] || this[_context$1].firstChild >= this.children[$length]) {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.smallest);
        return;
      }
      let childConstraints = null;
      let mainAxisLimit = 0.0;
      let flipMainAxis = false;
      let flipCrossAxis = false;
      switch (this.direction) {
        case C[27] || CT.C27:
          {
            childConstraints = new geometry.BoxConstraints.new({maxWidth: constraints.maxWidth});
            mainAxisLimit = constraints.maxWidth;
            if (this.verticalDirection === flex$.VerticalDirection.down) {
              flipCrossAxis = true;
            }
            break;
          }
        case C[24] || CT.C24:
          {
            childConstraints = new geometry.BoxConstraints.new({maxHeight: constraints.maxHeight});
            mainAxisLimit = constraints.maxHeight;
            if (this.verticalDirection === flex$.VerticalDirection.down) {
              flipMainAxis = true;
            }
            break;
          }
      }
      let runMetrics = T$.JSArrayOf_RunMetrics().of([]);
      let childRunMetrics = new (T$.LinkedMapOfWidget$int()).new();
      let mainAxisExtent = 0.0;
      let crossAxisExtent = 0.0;
      let runMainAxisExtent = 0.0;
      let runCrossAxisExtent = 0.0;
      let childCount = 0;
      for (let child of this.children[$sublist](this[_context$1].firstChild)) {
        child.layout(context, childConstraints, {parentUsesSize: true});
        let childMainAxisExtent = dart.nullCheck(this[_getMainAxisExtent](child));
        let childCrossAxisExtent = dart.nullCheck(this[_getCrossAxisExtent](child));
        if (childCount > 0 && runMainAxisExtent + this.spacing + childMainAxisExtent > mainAxisLimit) {
          mainAxisExtent = math.max(core.double, mainAxisExtent, runMainAxisExtent);
          crossAxisExtent = crossAxisExtent + runCrossAxisExtent;
          if (runMetrics[$isNotEmpty]) {
            crossAxisExtent = crossAxisExtent + this.runSpacing;
          }
          runMetrics[$add](new wrap$._RunMetrics.new(runMainAxisExtent, runCrossAxisExtent, childCount));
          runMainAxisExtent = 0.0;
          runCrossAxisExtent = 0.0;
          childCount = 0;
        }
        runMainAxisExtent = runMainAxisExtent + childMainAxisExtent;
        if (childCount > 0) {
          runMainAxisExtent = runMainAxisExtent + this.spacing;
        }
        runCrossAxisExtent = math.max(core.double, runCrossAxisExtent, childCrossAxisExtent);
        childCount = childCount + 1;
        childRunMetrics[$_set](child, runMetrics[$length]);
      }
      if (childCount > 0) {
        mainAxisExtent = math.max(core.double, mainAxisExtent, runMainAxisExtent);
        crossAxisExtent = crossAxisExtent + runCrossAxisExtent;
        if (runMetrics[$isNotEmpty]) {
          crossAxisExtent = crossAxisExtent + this.runSpacing;
        }
        runMetrics[$add](new wrap$._RunMetrics.new(runMainAxisExtent, runCrossAxisExtent, childCount));
      }
      let runCount = runMetrics[$length];
      if (!(runCount > 0)) dart.assertFailed(null, I[26], 236, 12, "runCount > 0");
      let containerMainAxisExtent = 0.0;
      let containerCrossAxisExtent = 0.0;
      switch (this.direction) {
        case C[27] || CT.C27:
          {
            this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.constrain(new point$.PdfPoint.new(mainAxisExtent, crossAxisExtent)));
            containerMainAxisExtent = dart.nullCheck(this.box).width;
            containerCrossAxisExtent = dart.nullCheck(this.box).height;
            break;
          }
        case C[24] || CT.C24:
          {
            this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.constrain(new point$.PdfPoint.new(crossAxisExtent, mainAxisExtent)));
            containerMainAxisExtent = dart.nullCheck(this.box).height;
            containerCrossAxisExtent = dart.nullCheck(this.box).width;
            break;
          }
      }
      let crossAxisFreeSpace = math.max(core.double, 0.0, containerCrossAxisExtent - crossAxisExtent);
      let runLeadingSpace = 0.0;
      let runBetweenSpace = 0.0;
      switch (this.runAlignment) {
        case C[77] || CT.C77:
          {
            break;
          }
        case C[78] || CT.C78:
          {
            runLeadingSpace = crossAxisFreeSpace;
            break;
          }
        case C[79] || CT.C79:
          {
            runLeadingSpace = crossAxisFreeSpace / 2.0;
            break;
          }
        case C[80] || CT.C80:
          {
            runBetweenSpace = runCount > 1 ? crossAxisFreeSpace / (runCount - 1) : 0.0;
            break;
          }
        case C[81] || CT.C81:
          {
            runBetweenSpace = crossAxisFreeSpace / runCount;
            runLeadingSpace = runBetweenSpace / 2.0;
            break;
          }
        case C[82] || CT.C82:
          {
            runBetweenSpace = crossAxisFreeSpace / (runCount + 1);
            runLeadingSpace = runBetweenSpace;
            break;
          }
      }
      runBetweenSpace = runBetweenSpace + this.runSpacing;
      let crossAxisOffset = flipCrossAxis ? containerCrossAxisExtent - runLeadingSpace : runLeadingSpace;
      this[_context$1].lastChild = this[_context$1].firstChild;
      for (let i = 0; i < runCount; i = i + 1) {
        let metrics = runMetrics[$_get](i);
        let runMainAxisExtent = metrics.mainAxisExtent;
        let runCrossAxisExtent = metrics.crossAxisExtent;
        let childCount = metrics.childCount;
        let mainAxisFreeSpace = math.max(core.double, 0.0, containerMainAxisExtent - runMainAxisExtent);
        let childLeadingSpace = 0.0;
        let childBetweenSpace = 0.0;
        switch (this.alignment) {
          case C[77] || CT.C77:
            {
              break;
            }
          case C[78] || CT.C78:
            {
              childLeadingSpace = mainAxisFreeSpace;
              break;
            }
          case C[79] || CT.C79:
            {
              childLeadingSpace = mainAxisFreeSpace / 2.0;
              break;
            }
          case C[80] || CT.C80:
            {
              childBetweenSpace = childCount > 1 ? mainAxisFreeSpace / (childCount - 1) : 0.0;
              break;
            }
          case C[81] || CT.C81:
            {
              childBetweenSpace = mainAxisFreeSpace / childCount;
              childLeadingSpace = childBetweenSpace / 2.0;
              break;
            }
          case C[82] || CT.C82:
            {
              childBetweenSpace = mainAxisFreeSpace / (childCount + 1);
              childLeadingSpace = childBetweenSpace;
              break;
            }
        }
        childBetweenSpace = childBetweenSpace + this.spacing;
        let childMainPosition = flipMainAxis ? containerMainAxisExtent - childLeadingSpace : childLeadingSpace;
        if (flipCrossAxis) {
          crossAxisOffset = crossAxisOffset - runCrossAxisExtent;
        }
        if (crossAxisOffset < -0.01 || crossAxisOffset + runCrossAxisExtent > containerCrossAxisExtent + 0.01) {
          break;
        }
        let currentWidget = this[_context$1].lastChild;
        for (let child of this.children[$sublist](currentWidget)) {
          let runIndex = childRunMetrics[$_get](child);
          if (runIndex !== i) {
            break;
          }
          currentWidget = currentWidget + 1;
          let childMainAxisExtent = this[_getMainAxisExtent](child);
          let childCrossAxisExtent = dart.nullCheck(this[_getCrossAxisExtent](child));
          let childCrossAxisOffset = this[_getChildCrossAxisOffset](flipCrossAxis, runCrossAxisExtent, childCrossAxisExtent);
          if (flipMainAxis) {
            childMainPosition = childMainPosition - dart.nullCheck(childMainAxisExtent);
          }
          child.box = rect$.PdfRect.fromPoints(this[_getOffset](childMainPosition, crossAxisOffset + childCrossAxisOffset), dart.nullCheck(child.box).size);
          if (flipMainAxis) {
            childMainPosition = childMainPosition - childBetweenSpace;
          } else {
            childMainPosition = childMainPosition + (dart.nullCheck(childMainAxisExtent) + childBetweenSpace);
          }
        }
        if (flipCrossAxis) {
          crossAxisOffset = crossAxisOffset - runBetweenSpace;
        } else {
          crossAxisOffset = crossAxisOffset + (runCrossAxisExtent + runBetweenSpace);
        }
        this[_context$1].lastChild = currentWidget;
      }
    }
    paint(context) {
      super.paint(context);
      context.canvas.saveContext();
      let mat = vector_math_64.Matrix4.identity();
      mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
      context.canvas.setTransform(mat);
      for (let child of this.children[$sublist](this[_context$1].firstChild, this[_context$1].lastChild)) {
        child.paint(context);
      }
      context.canvas.restoreContext();
    }
    restoreContext(context) {
      wrap$._WrapContext.as(context);
      this[_context$1].apply(context);
      this[_context$1].firstChild = context.lastChild;
    }
    saveContext() {
      return this[_context$1];
    }
  };
  (wrap$.Wrap.new = function(opts) {
    let direction = opts && 'direction' in opts ? opts.direction : C[27] || CT.C27;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[77] || CT.C77;
    let spacing = opts && 'spacing' in opts ? opts.spacing : 0;
    let runAlignment = opts && 'runAlignment' in opts ? opts.runAlignment : C[77] || CT.C77;
    let runSpacing = opts && 'runSpacing' in opts ? opts.runSpacing : 0;
    let crossAxisAlignment = opts && 'crossAxisAlignment' in opts ? opts.crossAxisAlignment : C[84] || CT.C84;
    let verticalDirection = opts && 'verticalDirection' in opts ? opts.verticalDirection : C[87] || CT.C87;
    let children = opts && 'children' in opts ? opts.children : C[26] || CT.C26;
    this[_context$1] = new wrap$._WrapContext.new();
    this[direction$0] = direction;
    this[alignment$] = alignment;
    this[spacing$] = spacing;
    this[runAlignment$] = runAlignment;
    this[runSpacing$] = runSpacing;
    this[crossAxisAlignment$] = crossAxisAlignment;
    this[verticalDirection$] = verticalDirection;
    wrap$.Wrap.__proto__.new.call(this, {children: children});
    ;
  }).prototype = wrap$.Wrap.prototype;
  dart.addTypeTests(wrap$.Wrap);
  dart.addTypeCaches(wrap$.Wrap);
  dart.setMethodSignature(wrap$.Wrap, () => ({
    __proto__: dart.getMethods(wrap$.Wrap.__proto__),
    [_getMainAxisExtent]: dart.fnType(dart.nullable(core.double), [widget$.Widget]),
    [_getCrossAxisExtent]: dart.fnType(dart.nullable(core.double), [widget$.Widget]),
    [_getOffset]: dart.fnType(point$.PdfPoint, [core.double, core.double]),
    [_getChildCrossAxisOffset]: dart.fnType(core.double, [core.bool, core.double, core.double]),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {}),
    restoreContext: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    saveContext: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setGetterSignature(wrap$.Wrap, () => ({
    __proto__: dart.getGetters(wrap$.Wrap.__proto__),
    textDirection: core.bool,
    canSpan: core.bool,
    hasMoreWidgets: core.bool
  }));
  dart.setLibraryUri(wrap$.Wrap, I[25]);
  dart.setFieldSignature(wrap$.Wrap, () => ({
    __proto__: dart.getFields(wrap$.Wrap.__proto__),
    direction: dart.finalFieldType(flex$.Axis),
    alignment: dart.finalFieldType(wrap$.WrapAlignment),
    spacing: dart.finalFieldType(core.double),
    runAlignment: dart.finalFieldType(wrap$.WrapAlignment),
    runSpacing: dart.finalFieldType(core.double),
    crossAxisAlignment: dart.finalFieldType(wrap$.WrapCrossAlignment),
    verticalDirection: dart.finalFieldType(flex$.VerticalDirection),
    [_context$1]: dart.finalFieldType(wrap$._WrapContext)
  }));
  var textStyle$1 = dart.privateName(legend, "ChartLegend.textStyle");
  var position$ = dart.privateName(legend, "ChartLegend.position");
  var direction$1 = dart.privateName(legend, "ChartLegend.direction");
  var decoration$3 = dart.privateName(legend, "ChartLegend.decoration");
  var padding$4 = dart.privateName(legend, "ChartLegend.padding");
  var _buildLegend = dart.privateName(legend, "_buildLegend");
  legend.ChartLegend = class ChartLegend extends widget$.StatelessWidget {
    get textStyle() {
      return this[textStyle$1];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get position() {
      return this[position$];
    }
    set position(value) {
      super.position = value;
    }
    get direction() {
      return this[direction$1];
    }
    set direction(value) {
      super.direction = value;
    }
    get decoration() {
      return this[decoration$3];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get padding() {
      return this[padding$4];
    }
    set padding(value) {
      super.padding = value;
    }
    static ['_#new#tearOff'](opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let position = opts && 'position' in opts ? opts.position : C[88] || CT.C88;
      let direction = opts && 'direction' in opts ? opts.direction : C[24] || CT.C24;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let padding = opts && 'padding' in opts ? opts.padding : C[17] || CT.C17;
      return new legend.ChartLegend.new({textStyle: textStyle, position: position, direction: direction, decoration: decoration, padding: padding});
    }
    [_buildLegend](context, dataset) {
      let style = theme$.Theme.of(context).defaultTextStyle.merge(this.textStyle);
      return new flex$.Row.new({mainAxisSize: flex$.MainAxisSize.min, children: T$.JSArrayOfWidget().of([new container$.Container.new({width: style.fontSize, height: style.fontSize, margin: C[89] || CT.C89, child: dataset.legendShape(context)}), new text$1.Text.new(dart.nullCheck(dataset.legend), {style: this.textStyle})])});
    }
    build(context) {
      let t25;
      let datasets = chart.Chart.of(context).datasets;
      let wrap = new wrap$.Wrap.new({direction: this.direction, spacing: 10.0, runSpacing: 10.0, crossAxisAlignment: this.direction === flex$.Axis.horizontal ? wrap$.WrapCrossAlignment.center : wrap$.WrapCrossAlignment.start, children: (() => {
          let t24 = T$.JSArrayOfWidget().of([]);
          for (let dataset of datasets)
            if (dataset.legend != null) t24.push(this[_buildLegend](context, dataset));
          return t24;
        })()});
      return new basic.Align.new({alignment: this.position, child: new container$.Container.new({decoration: (t25 = this.decoration, t25 == null ? C[90] || CT.C90 : t25), padding: this.padding, child: wrap})});
    }
  };
  (legend.ChartLegend.new = function(opts) {
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let position = opts && 'position' in opts ? opts.position : C[88] || CT.C88;
    let direction = opts && 'direction' in opts ? opts.direction : C[24] || CT.C24;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let padding = opts && 'padding' in opts ? opts.padding : C[17] || CT.C17;
    this[textStyle$1] = textStyle;
    this[position$] = position;
    this[direction$1] = direction;
    this[decoration$3] = decoration;
    this[padding$4] = padding;
    legend.ChartLegend.__proto__.new.call(this);
    ;
  }).prototype = legend.ChartLegend.prototype;
  dart.addTypeTests(legend.ChartLegend);
  dart.addTypeCaches(legend.ChartLegend);
  dart.setMethodSignature(legend.ChartLegend, () => ({
    __proto__: dart.getMethods(legend.ChartLegend.__proto__),
    [_buildLegend]: dart.fnType(widget$.Widget, [widget$.Context, chart.Dataset]),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(legend.ChartLegend, I[27]);
  dart.setFieldSignature(legend.ChartLegend, () => ({
    __proto__: dart.getFields(legend.ChartLegend.__proto__),
    textStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    position: dart.finalFieldType(geometry.Alignment),
    direction: dart.finalFieldType(flex$.Axis),
    decoration: dart.finalFieldType(dart.nullable(decoration$.BoxDecoration)),
    padding: dart.finalFieldType(geometry.EdgeInsets)
  }));
  var __RadialGrid_gridBox = dart.privateName(grid_radial, "_#RadialGrid#gridBox");
  grid_radial.RadialGrid = class RadialGrid extends chart.ChartGrid {
    static ['_#new#tearOff']() {
      return new grid_radial.RadialGrid.new();
    }
    get gridBox() {
      let t25;
      t25 = this[__RadialGrid_gridBox];
      return t25 == null ? dart.throw(new _internal.LateError.fieldNI("gridBox")) : t25;
    }
    set gridBox(gridBox$35param) {
      this[__RadialGrid_gridBox] = gridBox$35param;
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      super.layout(context, constraints, {parentUsesSize: parentUsesSize});
      let datasets = chart.Chart.of(context).datasets;
      let size = constraints.biggest;
      this.gridBox = new rect$.PdfRect.new(0.0, 0.0, size.x, size.y);
      for (let dataset of datasets) {
        dataset.layout(context, new geometry.BoxConstraints.tight(this.gridBox.size));
      }
    }
    toChart(p) {
      return new point$.PdfPoint.new(3 * p.y * math.cos(p.x / 7 * 3.141592653589793 * 2) + this.gridBox.width / 2, 3 * p.y * math.sin(p.x / 7 * 3.141592653589793 * 2) + this.gridBox.height / 2);
    }
    paintBackground(context) {
    }
    clip(context, size) {
      let t25;
      t25 = context.canvas;
      (() => {
        t25.saveContext();
        t25.drawBox(this.gridBox);
        t25.clipPath();
        return t25;
      })();
    }
    paint(context) {
      super.paint(context);
      let datasets = chart.Chart.of(context).datasets;
      this.clip(context, dart.nullCheck(this.box).size);
      for (let dataSet of datasets) {
        dataSet.paintBackground(context);
      }
      context.canvas.restoreContext();
      this.paintBackground(context);
      this.clip(context, dart.nullCheck(this.box).size);
      for (let dataSet of datasets) {
        dataSet.paint(context);
      }
      context.canvas.restoreContext();
    }
  };
  (grid_radial.RadialGrid.new = function() {
    this[__RadialGrid_gridBox] = null;
    grid_radial.RadialGrid.__proto__.new.call(this);
    ;
  }).prototype = grid_radial.RadialGrid.prototype;
  dart.addTypeTests(grid_radial.RadialGrid);
  dart.addTypeCaches(grid_radial.RadialGrid);
  dart.setMethodSignature(grid_radial.RadialGrid, () => ({
    __proto__: dart.getMethods(grid_radial.RadialGrid.__proto__),
    toChart: dart.fnType(point$.PdfPoint, [point$.PdfPoint]),
    paintBackground: dart.fnType(dart.void, [widget$.Context]),
    clip: dart.fnType(dart.void, [widget$.Context, point$.PdfPoint])
  }));
  dart.setGetterSignature(grid_radial.RadialGrid, () => ({
    __proto__: dart.getGetters(grid_radial.RadialGrid.__proto__),
    gridBox: rect$.PdfRect
  }));
  dart.setSetterSignature(grid_radial.RadialGrid, () => ({
    __proto__: dart.getSetters(grid_radial.RadialGrid.__proto__),
    gridBox: rect$.PdfRect
  }));
  dart.setLibraryUri(grid_radial.RadialGrid, I[28]);
  dart.setFieldSignature(grid_radial.RadialGrid, () => ({
    __proto__: dart.getFields(grid_radial.RadialGrid.__proto__),
    [__RadialGrid_gridBox]: dart.fieldType(dart.nullable(rect$.PdfRect))
  }));
  point_chart.ValuePosition = class ValuePosition extends core._Enum {
    toString() {
      return "ValuePosition." + this[_name];
    }
  };
  (point_chart.ValuePosition.new = function(index, name) {
    point_chart.ValuePosition.__proto__.new.call(this, index, name);
    ;
  }).prototype = point_chart.ValuePosition.prototype;
  dart.addTypeTests(point_chart.ValuePosition);
  dart.addTypeCaches(point_chart.ValuePosition);
  dart.setLibraryUri(point_chart.ValuePosition, I[21]);
  dart.setStaticFieldSignature(point_chart.ValuePosition, () => ['values', 'left', 'top', 'right', 'bottom', 'auto']);
  dart.defineExtensionMethods(point_chart.ValuePosition, ['toString']);
  dart.defineLazy(point_chart.ValuePosition, {
    /*point_chart.ValuePosition.values*/get values() {
      return C[91] || CT.C91;
    },
    /*point_chart.ValuePosition.left*/get left() {
      return C[72] || CT.C72;
    },
    /*point_chart.ValuePosition.top*/get top() {
      return C[73] || CT.C73;
    },
    /*point_chart.ValuePosition.right*/get right() {
      return C[74] || CT.C74;
    },
    /*point_chart.ValuePosition.bottom*/get bottom() {
      return C[75] || CT.C75;
    },
    /*point_chart.ValuePosition.auto*/get auto() {
      return C[70] || CT.C70;
    }
  }, false);
  var direction = dart.privateName(grid_axis, "GridAxis.direction");
  var format$ = dart.privateName(grid_axis, "GridAxis.format");
  var buildLabel$ = dart.privateName(grid_axis, "GridAxis.buildLabel");
  var textStyle$2 = dart.privateName(grid_axis, "GridAxis.textStyle");
  var margin$4 = dart.privateName(grid_axis, "GridAxis.margin");
  var crossAxisPosition = dart.privateName(grid_axis, "GridAxis.crossAxisPosition");
  var color$5 = dart.privateName(grid_axis, "GridAxis.color");
  var width$2 = dart.privateName(grid_axis, "GridAxis.width");
  var divisions$ = dart.privateName(grid_axis, "GridAxis.divisions");
  var divisionsWidth$ = dart.privateName(grid_axis, "GridAxis.divisionsWidth");
  var divisionsColor$ = dart.privateName(grid_axis, "GridAxis.divisionsColor");
  var divisionsDashed$ = dart.privateName(grid_axis, "GridAxis.divisionsDashed");
  var ticks$ = dart.privateName(grid_axis, "GridAxis.ticks");
  var axisPosition = dart.privateName(grid_axis, "GridAxis.axisPosition");
  var angle$0 = dart.privateName(grid_axis, "GridAxis.angle");
  var __GridAxis__textMargin = dart.privateName(grid_axis, "_#GridAxis#_textMargin");
  var _marginStart = dart.privateName(grid_axis, "_marginStart");
  var _marginEnd = dart.privateName(grid_axis, "_marginEnd");
  var _axisTick = dart.privateName(grid_axis, "_axisTick");
  var _textMargin = dart.privateName(grid_axis, "_textMargin");
  grid_axis.GridAxis = class GridAxis extends widget$.Widget {
    get direction() {
      return this[direction];
    }
    set direction(value) {
      this[direction] = value;
    }
    get format() {
      return this[format$];
    }
    set format(value) {
      super.format = value;
    }
    get buildLabel() {
      return this[buildLabel$];
    }
    set buildLabel(value) {
      super.buildLabel = value;
    }
    get textStyle() {
      return this[textStyle$2];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get margin() {
      return this[margin$4];
    }
    set margin(value) {
      super.margin = value;
    }
    get crossAxisPosition() {
      return this[crossAxisPosition];
    }
    set crossAxisPosition(value) {
      this[crossAxisPosition] = value;
    }
    get color() {
      return this[color$5];
    }
    set color(value) {
      super.color = value;
    }
    get width() {
      return this[width$2];
    }
    set width(value) {
      super.width = value;
    }
    get divisions() {
      return this[divisions$];
    }
    set divisions(value) {
      super.divisions = value;
    }
    get divisionsWidth() {
      return this[divisionsWidth$];
    }
    set divisionsWidth(value) {
      super.divisionsWidth = value;
    }
    get divisionsColor() {
      return this[divisionsColor$];
    }
    set divisionsColor(value) {
      super.divisionsColor = value;
    }
    get divisionsDashed() {
      return this[divisionsDashed$];
    }
    set divisionsDashed(value) {
      super.divisionsDashed = value;
    }
    get ticks() {
      return this[ticks$];
    }
    set ticks(value) {
      super.ticks = value;
    }
    get axisPosition() {
      return this[axisPosition];
    }
    set axisPosition(value) {
      this[axisPosition] = value;
    }
    get angle() {
      return this[angle$0];
    }
    set angle(value) {
      super.angle = value;
    }
    get [_textMargin]() {
      let t27;
      t27 = this[__GridAxis__textMargin];
      return t27 == null ? dart.throw(new _internal.LateError.fieldNI("_textMargin")) : t27;
    }
    set [_textMargin](library$32package$58pdf$47src$47widgets$47chart$47grid_axis$46dart$58$58_textMargin$35param) {
      this[__GridAxis__textMargin] = library$32package$58pdf$47src$47widgets$47chart$47grid_axis$46dart$58$58_textMargin$35param;
    }
    static _defaultFormat(v) {
      return v[$toString]();
    }
    transfer(input) {
      return input[$toDouble]();
    }
  };
  (grid_axis.GridAxis.new = function(opts) {
    let t27, t27$, t27$0, t27$1, t27$2, t27$3, t27$4, t27$5, t27$6, t27$7;
    let format = opts && 'format' in opts ? opts.format : null;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    let marginStart = opts && 'marginStart' in opts ? opts.marginStart : null;
    let marginEnd = opts && 'marginEnd' in opts ? opts.marginEnd : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let divisions = opts && 'divisions' in opts ? opts.divisions : null;
    let divisionsWidth = opts && 'divisionsWidth' in opts ? opts.divisionsWidth : null;
    let divisionsColor = opts && 'divisionsColor' in opts ? opts.divisionsColor : null;
    let divisionsDashed = opts && 'divisionsDashed' in opts ? opts.divisionsDashed : null;
    let ticks = opts && 'ticks' in opts ? opts.ticks : null;
    let axisTick = opts && 'axisTick' in opts ? opts.axisTick : null;
    let angle = opts && 'angle' in opts ? opts.angle : 0;
    let buildLabel = opts && 'buildLabel' in opts ? opts.buildLabel : null;
    this[crossAxisPosition] = 0.0;
    this[__GridAxis__textMargin] = null;
    this[axisPosition] = 0.0;
    this[textStyle$2] = textStyle;
    this[margin$4] = margin;
    this[angle$0] = angle;
    this[buildLabel$] = buildLabel;
    this[format$] = (t27 = format, t27 == null ? C[92] || CT.C92 : t27);
    this[color$5] = (t27$ = color, t27$ == null ? colors.PdfColors.black : t27$);
    this[width$2] = (t27$0 = width, t27$0 == null ? 1.0 : t27$0);
    this[divisions$] = (t27$1 = divisions, t27$1 == null ? false : t27$1);
    this[divisionsWidth$] = (t27$2 = divisionsWidth, t27$2 == null ? 0.5 : t27$2);
    this[divisionsColor$] = (t27$3 = divisionsColor, t27$3 == null ? colors.PdfColors.grey : t27$3);
    this[_marginStart] = (t27$4 = marginStart, t27$4 == null ? 0.0 : t27$4);
    this[_marginEnd] = (t27$5 = marginEnd, t27$5 == null ? 0.0 : t27$5);
    this[ticks$] = (t27$6 = ticks, t27$6 == null ? false : t27$6);
    this[_axisTick] = axisTick;
    this[divisionsDashed$] = (t27$7 = divisionsDashed, t27$7 == null ? false : t27$7);
    this[direction] = flex$.Axis.horizontal;
    grid_axis.GridAxis.__proto__.new.call(this);
    ;
  }).prototype = grid_axis.GridAxis.prototype;
  dart.addTypeTests(grid_axis.GridAxis);
  dart.addTypeCaches(grid_axis.GridAxis);
  dart.setMethodSignature(grid_axis.GridAxis, () => ({
    __proto__: dart.getMethods(grid_axis.GridAxis.__proto__),
    transfer: dart.fnType(core.double, [core.num])
  }));
  dart.setStaticMethodSignature(grid_axis.GridAxis, () => ['_defaultFormat']);
  dart.setGetterSignature(grid_axis.GridAxis, () => ({
    __proto__: dart.getGetters(grid_axis.GridAxis.__proto__),
    [_textMargin]: core.double
  }));
  dart.setSetterSignature(grid_axis.GridAxis, () => ({
    __proto__: dart.getSetters(grid_axis.GridAxis.__proto__),
    [_textMargin]: core.double
  }));
  dart.setLibraryUri(grid_axis.GridAxis, I[29]);
  dart.setFieldSignature(grid_axis.GridAxis, () => ({
    __proto__: dart.getFields(grid_axis.GridAxis.__proto__),
    direction: dart.fieldType(flex$.Axis),
    format: dart.finalFieldType(dart.fnType(core.String, [core.num])),
    buildLabel: dart.finalFieldType(dart.nullable(dart.fnType(widget$.Widget, [core.num]))),
    textStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    margin: dart.finalFieldType(dart.nullable(core.double)),
    crossAxisPosition: dart.fieldType(core.double),
    [__GridAxis__textMargin]: dart.fieldType(dart.nullable(core.double)),
    [_marginStart]: dart.finalFieldType(core.double),
    [_marginEnd]: dart.fieldType(core.double),
    color: dart.finalFieldType(color$.PdfColor),
    width: dart.finalFieldType(core.double),
    divisions: dart.finalFieldType(core.bool),
    divisionsWidth: dart.finalFieldType(core.double),
    divisionsColor: dart.finalFieldType(color$.PdfColor),
    divisionsDashed: dart.finalFieldType(core.bool),
    ticks: dart.finalFieldType(core.bool),
    [_axisTick]: dart.fieldType(dart.nullable(core.bool)),
    axisPosition: dart.fieldType(core.double),
    angle: dart.finalFieldType(core.double)
  }));
  var values$ = dart.privateName(grid_axis, "FixedAxis.values");
  var _text = dart.privateName(grid_axis, "_text");
  var _angleDirection = dart.privateName(grid_axis, "_angleDirection");
  var _drawYValues = dart.privateName(grid_axis, "_drawYValues");
  var _drawXValues = dart.privateName(grid_axis, "_drawXValues");
  const _is_FixedAxis_default = Symbol('_is_FixedAxis_default');
  grid_axis.FixedAxis$ = dart.generic(T => {
    class FixedAxis extends grid_axis.GridAxis {
      get values() {
        return this[values$];
      }
      set values(value) {
        super.values = value;
      }
      static ['_#new#tearOff'](T, values, opts) {
        let format = opts && 'format' in opts ? opts.format : null;
        let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
        let margin = opts && 'margin' in opts ? opts.margin : null;
        let marginStart = opts && 'marginStart' in opts ? opts.marginStart : null;
        let marginEnd = opts && 'marginEnd' in opts ? opts.marginEnd : null;
        let color = opts && 'color' in opts ? opts.color : null;
        let width = opts && 'width' in opts ? opts.width : null;
        let divisions = opts && 'divisions' in opts ? opts.divisions : null;
        let divisionsWidth = opts && 'divisionsWidth' in opts ? opts.divisionsWidth : null;
        let divisionsColor = opts && 'divisionsColor' in opts ? opts.divisionsColor : null;
        let divisionsDashed = opts && 'divisionsDashed' in opts ? opts.divisionsDashed : null;
        let ticks = opts && 'ticks' in opts ? opts.ticks : null;
        let axisTick = opts && 'axisTick' in opts ? opts.axisTick : null;
        let angle = opts && 'angle' in opts ? opts.angle : 0;
        let buildLabel = opts && 'buildLabel' in opts ? opts.buildLabel : null;
        return new (grid_axis.FixedAxis$(T)).new(values, {format: format, textStyle: textStyle, margin: margin, marginStart: marginStart, marginEnd: marginEnd, color: color, width: width, divisions: divisions, divisionsWidth: divisionsWidth, divisionsColor: divisionsColor, divisionsDashed: divisionsDashed, ticks: ticks, axisTick: axisTick, angle: angle, buildLabel: buildLabel});
      }
      static fromStrings(values, opts) {
        let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
        let margin = opts && 'margin' in opts ? opts.margin : null;
        let marginStart = opts && 'marginStart' in opts ? opts.marginStart : null;
        let marginEnd = opts && 'marginEnd' in opts ? opts.marginEnd : null;
        let color = opts && 'color' in opts ? opts.color : null;
        let width = opts && 'width' in opts ? opts.width : null;
        let divisions = opts && 'divisions' in opts ? opts.divisions : null;
        let divisionsWidth = opts && 'divisionsWidth' in opts ? opts.divisionsWidth : null;
        let divisionsColor = opts && 'divisionsColor' in opts ? opts.divisionsColor : null;
        let divisionsDashed = opts && 'divisionsDashed' in opts ? opts.divisionsDashed : null;
        let ticks = opts && 'ticks' in opts ? opts.ticks : null;
        let axisTick = opts && 'axisTick' in opts ? opts.axisTick : null;
        let angle = opts && 'angle' in opts ? opts.angle : 0;
        let buildLabel = opts && 'buildLabel' in opts ? opts.buildLabel : null;
        return new (T$.FixedAxisOfint()).new(T$.ListOfint().generate(values[$length], dart.fn(index => index, T$.intToint())), {format: dart.fn(v => values[$_get](v[$toInt]()), T$.numToString()), textStyle: textStyle, margin: margin, marginStart: marginStart, marginEnd: marginEnd, color: color, width: width, divisions: divisions, divisionsWidth: divisionsWidth, divisionsColor: divisionsColor, divisionsDashed: divisionsDashed, ticks: ticks, axisTick: axisTick, angle: angle, buildLabel: buildLabel});
      }
      static _isSortedAscending(list) {
        let prev = list[$first];
        for (let elem of list) {
          if (prev > elem) {
            return false;
          }
          prev = elem;
        }
        return true;
      }
      toChart(input) {
        let offset = this.transfer(this.values[$first]);
        let total = this.transfer(this.values[$last]) - offset;
        let start = this.crossAxisPosition + this[_marginStart];
        switch (this.direction) {
          case C[27] || CT.C27:
            {
              return dart.nullCheck(this.box).left + start + (dart.nullCheck(this.box).width - start - this[_marginEnd]) * (this.transfer(dart.nullCheck(input)) - offset) / total;
            }
          case C[24] || CT.C24:
            {
              return dart.nullCheck(this.box).bottom + start + (dart.nullCheck(this.box).height - start - this[_marginEnd]) * (this.transfer(dart.nullCheck(input)) - offset) / total;
            }
        }
      }
      [_text](value) {
        let t27;
        let t = this.buildLabel == null ? new text$1.Text.new((t27 = value, this.format(t27)), {style: this.textStyle}) : dart.nullCheck(this.buildLabel)(value);
        if (this.angle === 0.0) {
          return t;
        }
        return new basic.Transform.rotateBox({angle: this.angle, child: t});
      }
      [_angleDirection]() {
        if (this.angle === 0.0) {
          return 0;
        }
        if (this.angle[$modulo](3.141592653589793) > 3.141592653589793 / 2) {
          return -1;
        }
        return 1;
      }
      layout(context, constraints, opts) {
        let t27, t27$;
        let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
        let size = constraints.biggest;
        let maxWidth = 0.0;
        let maxHeight = 0.0;
        let first = null;
        let last = null;
        for (let value of this.values) {
          last = widget$.Widget.measure(this[_text](value), {context: context});
          maxWidth = math.max(core.double, maxWidth, last.x);
          maxHeight = math.max(core.double, maxHeight, last.y);
          first == null ? first = last : null;
        }
        let ad = this[_angleDirection]();
        switch (this.direction) {
          case C[27] || CT.C27:
            {
              this[_textMargin] = (t27 = this.margin, t27 == null ? 2.0 : t27);
              this[_axisTick] == null ? this[_axisTick] = false : null;
              let minStart = ad === 0 ? dart.nullCheck(first).x / 2 : ad > 0 ? dart.nullCheck(first).x : 0.0;
              this[_marginEnd] = math.max(core.double, this[_marginEnd], ad === 0 ? dart.nullCheck(last).x / 2 : ad > 0 ? 0.0 : dart.nullCheck(last).x);
              this.crossAxisPosition = math.max(core.double, this.crossAxisPosition, minStart);
              this.axisPosition = math.max(core.double, this.axisPosition, maxHeight + this[_textMargin]);
              this.box = new rect$.PdfRect.new(0.0, 0.0, size.x, this.axisPosition);
              break;
            }
          case C[24] || CT.C24:
            {
              this[_textMargin] = (t27$ = this.margin, t27$ == null ? 10.0 : t27$);
              this[_axisTick] == null ? this[_axisTick] = true : null;
              this[_marginEnd] = math.max(core.double, this[_marginEnd], ad === 0 ? dart.nullCheck(last).x / 2 : ad < 0 ? dart.nullCheck(last).x : 0.0);
              let minStart = ad === 0 ? dart.nullCheck(first).y / 2 : ad > 0 ? dart.nullCheck(first).x : 0.0;
              this.crossAxisPosition = math.max(core.double, this.crossAxisPosition, minStart);
              this.axisPosition = math.max(core.double, this.axisPosition, maxWidth + this[_textMargin]);
              this.box = new rect$.PdfRect.new(0.0, 0.0, this.axisPosition, size.y);
              break;
            }
        }
      }
      [_drawYValues](context) {
        let t27, t27$, t27$0, t27$1;
        t27 = context.canvas;
        (() => {
          t27.moveTo(this.axisPosition, dart.nullCheck(this.box).top);
          t27.lineTo(this.axisPosition, dart.nullCheck(this.box).bottom + this.crossAxisPosition);
          return t27;
        })();
        if (dart.nullCheck(this[_axisTick]) && this[_textMargin] > 0) {
          t27$ = context.canvas;
          (() => {
            t27$.moveTo(this.axisPosition, dart.nullCheck(this.box).bottom + this.crossAxisPosition);
            t27$.lineTo(this.axisPosition - this[_textMargin] / 2, dart.nullCheck(this.box).bottom + this.crossAxisPosition);
            return t27$;
          })();
        }
        if (this.ticks && this[_textMargin] > 0) {
          for (let x of this.values) {
            let p = this.toChart(x);
            t27$0 = context.canvas;
            (() => {
              t27$0.moveTo(this.axisPosition, p);
              t27$0.lineTo(this.axisPosition - this[_textMargin] / 2, p);
              return t27$0;
            })();
          }
        }
        t27$1 = context.canvas;
        (() => {
          t27$1.setStrokeColor(this.color);
          t27$1.setLineWidth(this.width);
          t27$1.setLineJoin(graphics.PdfLineJoin.bevel);
          t27$1.strokePath();
          return t27$1;
        })();
        let ad = this[_angleDirection]();
        for (let y of this.values) {
          let p = this.toChart(y);
          widget$.Widget.draw(this[_text](y), {offset: new point$.PdfPoint.new(this.axisPosition - this[_textMargin], p), context: context, alignment: ad === 0 ? geometry.Alignment.centerRight : ad > 0 ? geometry.Alignment.topRight : geometry.Alignment.bottomRight});
        }
      }
      [_drawXValues](context) {
        let t27, t27$, t27$0, t27$1;
        t27 = context.canvas;
        (() => {
          t27.moveTo(dart.nullCheck(this.box).left + this.crossAxisPosition, this.axisPosition);
          t27.lineTo(dart.nullCheck(this.box).right, this.axisPosition);
          return t27;
        })();
        if (dart.nullCheck(this[_axisTick]) && this[_textMargin] > 0) {
          t27$ = context.canvas;
          (() => {
            t27$.moveTo(dart.nullCheck(this.box).left + this.crossAxisPosition, this.axisPosition);
            t27$.lineTo(dart.nullCheck(this.box).left + this.crossAxisPosition, this.axisPosition - this[_textMargin]);
            return t27$;
          })();
        }
        if (this.ticks && this[_textMargin] > 0) {
          for (let x of this.values) {
            let p = this.toChart(x);
            t27$0 = context.canvas;
            (() => {
              t27$0.moveTo(p, this.axisPosition);
              t27$0.lineTo(p, this.axisPosition - this[_textMargin]);
              return t27$0;
            })();
          }
        }
        t27$1 = context.canvas;
        (() => {
          t27$1.setStrokeColor(this.color);
          t27$1.setLineWidth(this.width);
          t27$1.setLineJoin(graphics.PdfLineJoin.bevel);
          t27$1.strokePath();
          return t27$1;
        })();
        let ad = this[_angleDirection]();
        for (let x of this.values) {
          let p = this.toChart(x);
          widget$.Widget.draw(this[_text](x), {offset: new point$.PdfPoint.new(p, this.axisPosition - this[_textMargin]), context: context, alignment: ad === 0 ? geometry.Alignment.topCenter : ad > 0 ? geometry.Alignment.topRight : geometry.Alignment.topLeft});
        }
      }
      paintBackground(context) {
        let t27;
        if (!this.divisions) {
          return;
        }
        let grid = grid_cartesian.CartesianGrid.as(chart.Chart.of(context).grid);
        switch (this.direction) {
          case C[27] || CT.C27:
            {
              for (let x of this.values[$sublist](this[_marginStart] > 0 ? 0 : 1)) {
                let p = this.toChart(x);
                context.canvas.drawLine(p, grid.gridBox.top, p, grid.gridBox.bottom);
              }
              break;
            }
          case C[24] || CT.C24:
            {
              for (let y of this.values[$sublist](this[_marginStart] > 0 ? 0 : 1)) {
                let p = this.toChart(y);
                context.canvas.drawLine(grid.gridBox.left, p, grid.gridBox.right, p);
              }
              break;
            }
        }
        if (this.divisionsDashed) {
          context.canvas.setLineDashPattern(T$.JSArrayOfint().of([4, 2]));
        }
        t27 = context.canvas;
        (() => {
          t27.setStrokeColor(this.divisionsColor);
          t27.setLineWidth(this.divisionsWidth);
          t27.setLineJoin(graphics.PdfLineJoin.miter);
          t27.strokePath();
          return t27;
        })();
        if (this.divisionsDashed) {
          context.canvas.setLineDashPattern();
        }
      }
      debugPaint(context) {
        let t27, t27$;
        switch (this.direction) {
          case C[27] || CT.C27:
            {
              t27 = context.canvas;
              (() => {
                t27.setFillColor(colors.PdfColors.grey300);
                t27.drawBox(dart.nullCheck(this.box));
                t27.fillPath();
                return t27;
              })();
              break;
            }
          case C[24] || CT.C24:
            {
              t27$ = context.canvas;
              (() => {
                t27$.setFillColor(colors.PdfColors.grey300);
                t27$.drawRect(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y + this.crossAxisPosition, dart.nullCheck(this.box).width, dart.nullCheck(this.box).height - this.crossAxisPosition);
                t27$.fillPath();
                return t27$;
              })();
              break;
            }
        }
      }
      paint(context) {
        super.paint(context);
        switch (this.direction) {
          case C[27] || CT.C27:
            {
              this[_drawXValues](context);
              break;
            }
          case C[24] || CT.C24:
            {
              this[_drawYValues](context);
              break;
            }
        }
      }
    }
    (FixedAxis.new = function(values, opts) {
      let format = opts && 'format' in opts ? opts.format : null;
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let margin = opts && 'margin' in opts ? opts.margin : null;
      let marginStart = opts && 'marginStart' in opts ? opts.marginStart : null;
      let marginEnd = opts && 'marginEnd' in opts ? opts.marginEnd : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let divisions = opts && 'divisions' in opts ? opts.divisions : null;
      let divisionsWidth = opts && 'divisionsWidth' in opts ? opts.divisionsWidth : null;
      let divisionsColor = opts && 'divisionsColor' in opts ? opts.divisionsColor : null;
      let divisionsDashed = opts && 'divisionsDashed' in opts ? opts.divisionsDashed : null;
      let ticks = opts && 'ticks' in opts ? opts.ticks : null;
      let axisTick = opts && 'axisTick' in opts ? opts.axisTick : null;
      let angle = opts && 'angle' in opts ? opts.angle : 0;
      let buildLabel = opts && 'buildLabel' in opts ? opts.buildLabel : null;
      this[values$] = values;
      if (!grid_axis.FixedAxis._isSortedAscending(values)) dart.assertFailed(null, I[30], 129, 16, "_isSortedAscending(values)");
      FixedAxis.__proto__.new.call(this, {format: format, textStyle: textStyle, margin: margin, marginStart: marginStart, marginEnd: marginEnd, color: color, width: width, divisions: divisions, divisionsWidth: divisionsWidth, divisionsColor: divisionsColor, divisionsDashed: divisionsDashed, ticks: ticks, axisTick: axisTick, angle: angle, buildLabel: buildLabel});
      ;
    }).prototype = FixedAxis.prototype;
    dart.addTypeTests(FixedAxis);
    FixedAxis.prototype[_is_FixedAxis_default] = true;
    dart.addTypeCaches(FixedAxis);
    dart.setMethodSignature(FixedAxis, () => ({
      __proto__: dart.getMethods(FixedAxis.__proto__),
      toChart: dart.fnType(core.double, [dart.nullable(core.num)]),
      [_text]: dart.fnType(widget$.Widget, [core.num]),
      [_angleDirection]: dart.fnType(core.int, []),
      layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {}),
      [_drawYValues]: dart.fnType(dart.void, [widget$.Context]),
      [_drawXValues]: dart.fnType(dart.void, [widget$.Context]),
      paintBackground: dart.fnType(dart.void, [widget$.Context])
    }));
    dart.setStaticMethodSignature(FixedAxis, () => ['fromStrings', '_isSortedAscending']);
    dart.setLibraryUri(FixedAxis, I[29]);
    dart.setFieldSignature(FixedAxis, () => ({
      __proto__: dart.getFields(FixedAxis.__proto__),
      values: dart.finalFieldType(core.List$(T))
    }));
    return FixedAxis;
  });
  grid_axis.FixedAxis = grid_axis.FixedAxis$();
  dart.addTypeTests(grid_axis.FixedAxis, _is_FixedAxis_default);
  var __CartesianGrid_gridBox = dart.privateName(grid_cartesian, "_#CartesianGrid#gridBox");
  var _xAxis = dart.privateName(grid_cartesian, "_xAxis");
  var _yAxis = dart.privateName(grid_cartesian, "_yAxis");
  grid_cartesian.CartesianGrid = class CartesianGrid extends chart.ChartGrid {
    static ['_#new#tearOff'](opts) {
      let xAxis = opts && 'xAxis' in opts ? opts.xAxis : null;
      let yAxis = opts && 'yAxis' in opts ? opts.yAxis : null;
      return new grid_cartesian.CartesianGrid.new({xAxis: xAxis, yAxis: yAxis});
    }
    get gridBox() {
      let t27;
      t27 = this[__CartesianGrid_gridBox];
      return t27 == null ? dart.throw(new _internal.LateError.fieldNI("gridBox")) : t27;
    }
    set gridBox(gridBox$35param) {
      this[__CartesianGrid_gridBox] = gridBox$35param;
    }
    layout(context, constraints, opts) {
      let t27;
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      super.layout(context, constraints, {parentUsesSize: parentUsesSize});
      let datasets = chart.Chart.of(context).datasets;
      let size = constraints.biggest;
      let count = 5;
      while ((t27 = count, count = t27 - 1, t27) > 0) {
        this[_xAxis].crossAxisPosition = this[_yAxis].axisPosition;
        this[_xAxis].axisPosition = math.max(core.double, this[_xAxis].axisPosition, this[_yAxis].crossAxisPosition);
        this[_xAxis].layout(context, constraints);
        if (!(this[_xAxis].box != null)) dart.assertFailed(null, I[31], 53, 14, "_xAxis.box != null");
        this[_yAxis].crossAxisPosition = this[_xAxis].axisPosition;
        this[_yAxis].axisPosition = math.max(core.double, this[_yAxis].axisPosition, this[_xAxis].crossAxisPosition);
        this[_yAxis].layout(context, constraints);
        if (!(this[_yAxis].box != null)) dart.assertFailed(null, I[31], 58, 14, "_yAxis.box != null");
        if (this[_yAxis].crossAxisPosition === this[_xAxis].axisPosition && this[_xAxis].crossAxisPosition === this[_yAxis].axisPosition) {
          break;
        }
      }
      let width = this[_yAxis].axisPosition;
      let height = this[_xAxis].axisPosition;
      this.gridBox = new rect$.PdfRect.new(width, height, size.x - width, size.y - height);
      for (let dataset of datasets) {
        dataset.layout(context, new geometry.BoxConstraints.tight(this.gridBox.size));
        dataset.box = rect$.PdfRect.fromPoints(new point$.PdfPoint.new(width, height), dart.nullCheck(dataset.box).size);
      }
    }
    toChart(p) {
      return new point$.PdfPoint.new(this[_xAxis].toChart(p.x), this[_yAxis].toChart(p.y));
    }
    get xAxisOffset() {
      return this[_xAxis].axisPosition;
    }
    get yAxisOffset() {
      return this[_yAxis].axisPosition;
    }
    paintBackground(context) {
      this[_xAxis].paintBackground(context);
      this[_yAxis].paintBackground(context);
    }
    clip(context, size) {
      let t27;
      t27 = context.canvas;
      (() => {
        t27.saveContext();
        t27.drawBox(this.gridBox);
        t27.clipPath();
        return t27;
      })();
    }
    paint(context) {
      super.paint(context);
      let datasets = chart.Chart.of(context).datasets;
      this.clip(context, dart.nullCheck(this.box).size);
      for (let dataSet of datasets) {
        dataSet.paintBackground(context);
      }
      context.canvas.restoreContext();
      this.paintBackground(context);
      this.clip(context, dart.nullCheck(this.box).size);
      for (let dataSet of datasets) {
        dataSet.paint(context);
      }
      context.canvas.restoreContext();
      this[_xAxis].paint(context);
      this[_yAxis].paint(context);
      for (let dataSet of datasets) {
        dataSet.paintForeground(context);
      }
    }
  };
  (grid_cartesian.CartesianGrid.new = function(opts) {
    let t27, t27$;
    let xAxis = opts && 'xAxis' in opts ? opts.xAxis : null;
    let yAxis = opts && 'yAxis' in opts ? opts.yAxis : null;
    this[__CartesianGrid_gridBox] = null;
    this[_xAxis] = (t27 = xAxis, (() => {
      t27.direction = flex$.Axis.horizontal;
      return t27;
    })());
    this[_yAxis] = (t27$ = yAxis, (() => {
      t27$.direction = flex$.Axis.vertical;
      return t27$;
    })());
    grid_cartesian.CartesianGrid.__proto__.new.call(this);
    ;
  }).prototype = grid_cartesian.CartesianGrid.prototype;
  dart.addTypeTests(grid_cartesian.CartesianGrid);
  dart.addTypeCaches(grid_cartesian.CartesianGrid);
  dart.setMethodSignature(grid_cartesian.CartesianGrid, () => ({
    __proto__: dart.getMethods(grid_cartesian.CartesianGrid.__proto__),
    toChart: dart.fnType(point$.PdfPoint, [point$.PdfPoint]),
    paintBackground: dart.fnType(dart.void, [widget$.Context]),
    clip: dart.fnType(dart.void, [widget$.Context, point$.PdfPoint])
  }));
  dart.setGetterSignature(grid_cartesian.CartesianGrid, () => ({
    __proto__: dart.getGetters(grid_cartesian.CartesianGrid.__proto__),
    gridBox: rect$.PdfRect,
    xAxisOffset: core.double,
    yAxisOffset: core.double
  }));
  dart.setSetterSignature(grid_cartesian.CartesianGrid, () => ({
    __proto__: dart.getSetters(grid_cartesian.CartesianGrid.__proto__),
    gridBox: rect$.PdfRect
  }));
  dart.setLibraryUri(grid_cartesian.CartesianGrid, I[32]);
  dart.setFieldSignature(grid_cartesian.CartesianGrid, () => ({
    __proto__: dart.getFields(grid_cartesian.CartesianGrid.__proto__),
    [_xAxis]: dart.finalFieldType(grid_axis.GridAxis),
    [_yAxis]: dart.finalFieldType(grid_axis.GridAxis),
    [__CartesianGrid_gridBox]: dart.fieldType(dart.nullable(rect$.PdfRect))
  }));
  stack.StackFit = class StackFit extends core._Enum {
    toString() {
      return "StackFit." + this[_name];
    }
  };
  (stack.StackFit.new = function(index, name) {
    stack.StackFit.__proto__.new.call(this, index, name);
    ;
  }).prototype = stack.StackFit.prototype;
  dart.addTypeTests(stack.StackFit);
  dart.addTypeCaches(stack.StackFit);
  dart.setLibraryUri(stack.StackFit, I[33]);
  dart.setStaticFieldSignature(stack.StackFit, () => ['values', 'loose', 'expand', 'passthrough']);
  dart.defineExtensionMethods(stack.StackFit, ['toString']);
  dart.defineLazy(stack.StackFit, {
    /*stack.StackFit.values*/get values() {
      return C[93] || CT.C93;
    },
    /*stack.StackFit.loose*/get loose() {
      return C[94] || CT.C94;
    },
    /*stack.StackFit.expand*/get expand() {
      return C[95] || CT.C95;
    },
    /*stack.StackFit.passthrough*/get passthrough() {
      return C[96] || CT.C96;
    }
  }, false);
  stack.Overflow = class Overflow extends core._Enum {
    toString() {
      return "Overflow." + this[_name];
    }
  };
  (stack.Overflow.new = function(index, name) {
    stack.Overflow.__proto__.new.call(this, index, name);
    ;
  }).prototype = stack.Overflow.prototype;
  dart.addTypeTests(stack.Overflow);
  dart.addTypeCaches(stack.Overflow);
  dart.setLibraryUri(stack.Overflow, I[33]);
  dart.setStaticFieldSignature(stack.Overflow, () => ['values', 'visible', 'clip']);
  dart.defineExtensionMethods(stack.Overflow, ['toString']);
  dart.defineLazy(stack.Overflow, {
    /*stack.Overflow.values*/get values() {
      return C[97] || CT.C97;
    },
    /*stack.Overflow.visible*/get visible() {
      return C[98] || CT.C98;
    },
    /*stack.Overflow.clip*/get clip() {
      return C[99] || CT.C99;
    }
  }, false);
  var left$0 = dart.privateName(stack, "Positioned.left");
  var top$0 = dart.privateName(stack, "Positioned.top");
  var right$0 = dart.privateName(stack, "Positioned.right");
  var bottom$0 = dart.privateName(stack, "Positioned.bottom");
  stack.Positioned = class Positioned extends widget$.SingleChildWidget {
    get left() {
      return this[left$0];
    }
    set left(value) {
      super.left = value;
    }
    get top() {
      return this[top$0];
    }
    set top(value) {
      super.top = value;
    }
    get right() {
      return this[right$0];
    }
    set right(value) {
      super.right = value;
    }
    get bottom() {
      return this[bottom$0];
    }
    set bottom(value) {
      super.bottom = value;
    }
    static ['_#new#tearOff'](opts) {
      let left = opts && 'left' in opts ? opts.left : null;
      let top = opts && 'top' in opts ? opts.top : null;
      let right = opts && 'right' in opts ? opts.right : null;
      let bottom = opts && 'bottom' in opts ? opts.bottom : null;
      let child = opts && 'child' in opts ? opts.child : null;
      return new stack.Positioned.new({left: left, top: top, right: right, bottom: bottom, child: child});
    }
    static ['_#fill#tearOff'](opts) {
      let left = opts && 'left' in opts ? opts.left : 0;
      let top = opts && 'top' in opts ? opts.top : 0;
      let right = opts && 'right' in opts ? opts.right : 0;
      let bottom = opts && 'bottom' in opts ? opts.bottom : 0;
      let child = opts && 'child' in opts ? opts.child : null;
      return new stack.Positioned.fill({left: left, top: top, right: right, bottom: bottom, child: child});
    }
    static directional(opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let start = opts && 'start' in opts ? opts.start : null;
      let top = opts && 'top' in opts ? opts.top : null;
      let end = opts && 'end' in opts ? opts.end : null;
      let bottom = opts && 'bottom' in opts ? opts.bottom : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let left = null;
      let right = null;
      switch (textDirection) {
        case C[100] || CT.C100:
          {
            left = end;
            right = start;
            break;
          }
        case C[101] || CT.C101:
          {
            left = start;
            right = end;
            break;
          }
      }
      return new stack.Positioned.new({left: left, top: top, right: right, bottom: bottom, child: child});
    }
    static ['_#directional#tearOff'](opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let start = opts && 'start' in opts ? opts.start : null;
      let top = opts && 'top' in opts ? opts.top : null;
      let end = opts && 'end' in opts ? opts.end : null;
      let bottom = opts && 'bottom' in opts ? opts.bottom : null;
      let child = opts && 'child' in opts ? opts.child : null;
      return stack.Positioned.directional({textDirection: textDirection, start: start, top: top, end: end, bottom: bottom, child: child});
    }
    get width() {
      let t31;
      t31 = this.box;
      return t31 == null ? null : t31.width;
    }
    get height() {
      let t31;
      t31 = this.box;
      return t31 == null ? null : t31.height;
    }
    paint(context) {
      super.paint(context);
      this.paintChild(context);
    }
  };
  (stack.Positioned.new = function(opts) {
    let left = opts && 'left' in opts ? opts.left : null;
    let top = opts && 'top' in opts ? opts.top : null;
    let right = opts && 'right' in opts ? opts.right : null;
    let bottom = opts && 'bottom' in opts ? opts.bottom : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[left$0] = left;
    this[top$0] = top;
    this[right$0] = right;
    this[bottom$0] = bottom;
    stack.Positioned.__proto__.new.call(this, {child: child});
    ;
  }).prototype = stack.Positioned.prototype;
  (stack.Positioned.fill = function(opts) {
    let left = opts && 'left' in opts ? opts.left : 0;
    let top = opts && 'top' in opts ? opts.top : 0;
    let right = opts && 'right' in opts ? opts.right : 0;
    let bottom = opts && 'bottom' in opts ? opts.bottom : 0;
    let child = opts && 'child' in opts ? opts.child : null;
    this[left$0] = left;
    this[top$0] = top;
    this[right$0] = right;
    this[bottom$0] = bottom;
    stack.Positioned.__proto__.new.call(this, {child: child});
    ;
  }).prototype = stack.Positioned.prototype;
  dart.addTypeTests(stack.Positioned);
  dart.addTypeCaches(stack.Positioned);
  dart.setStaticMethodSignature(stack.Positioned, () => ['directional']);
  dart.setGetterSignature(stack.Positioned, () => ({
    __proto__: dart.getGetters(stack.Positioned.__proto__),
    width: dart.nullable(core.double),
    height: dart.nullable(core.double)
  }));
  dart.setLibraryUri(stack.Positioned, I[33]);
  dart.setFieldSignature(stack.Positioned, () => ({
    __proto__: dart.getFields(stack.Positioned.__proto__),
    left: dart.finalFieldType(dart.nullable(core.double)),
    top: dart.finalFieldType(dart.nullable(core.double)),
    right: dart.finalFieldType(dart.nullable(core.double)),
    bottom: dart.finalFieldType(dart.nullable(core.double))
  }));
  var alignment$0 = dart.privateName(stack, "Stack.alignment");
  var fit$0 = dart.privateName(stack, "Stack.fit");
  var overflow$ = dart.privateName(stack, "Stack.overflow");
  stack.Stack = class Stack extends widget$.MultiChildWidget {
    get alignment() {
      return this[alignment$0];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get fit() {
      return this[fit$0];
    }
    set fit(value) {
      super.fit = value;
    }
    get overflow() {
      return this[overflow$];
    }
    set overflow(value) {
      super.overflow = value;
    }
    static ['_#new#tearOff'](opts) {
      let alignment = opts && 'alignment' in opts ? opts.alignment : C[18] || CT.C18;
      let fit = opts && 'fit' in opts ? opts.fit : C[94] || CT.C94;
      let overflow = opts && 'overflow' in opts ? opts.overflow : C[99] || CT.C99;
      let children = opts && 'children' in opts ? opts.children : C[26] || CT.C26;
      return new stack.Stack.new({alignment: alignment, fit: fit, overflow: overflow, children: children});
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      let childCount = this.children[$length];
      let hasNonPositionedChildren = false;
      if (childCount === 0) {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.biggest);
        return;
      }
      let width = constraints.minWidth;
      let height = constraints.minHeight;
      let nonPositionedConstraints = null;
      switch (this.fit) {
        case C[94] || CT.C94:
          {
            nonPositionedConstraints = constraints.loosen();
            break;
          }
        case C[95] || CT.C95:
          {
            nonPositionedConstraints = new geometry.BoxConstraints.tight(constraints.biggest);
            break;
          }
        case C[96] || CT.C96:
          {
            nonPositionedConstraints = constraints;
            break;
          }
      }
      for (let child of this.children) {
        if (!stack.Positioned.is(child)) {
          hasNonPositionedChildren = true;
          child.layout(context, nonPositionedConstraints, {parentUsesSize: true});
          if (!(child.box != null)) dart.assertFailed(null, I[34], 155, 16, "child.box != null");
          let childSize = dart.nullCheck(child.box);
          width = math.max(core.double, width, childSize.width);
          height = math.max(core.double, height, childSize.height);
        }
      }
      if (hasNonPositionedChildren) {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, new point$.PdfPoint.new(width, height));
        if (!(dart.nullCheck(this.box).width === constraints.constrainWidth(width))) dart.assertFailed(null, I[34], 165, 14, "box!.width == constraints.constrainWidth(width)");
        if (!(dart.nullCheck(this.box).height === constraints.constrainHeight(height))) dart.assertFailed(null, I[34], 166, 14, "box!.height == constraints.constrainHeight(height)");
      } else {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.biggest);
      }
      for (let child of this.children) {
        if (!stack.Positioned.is(child)) {
          child.box = rect$.PdfRect.fromPoints(this.alignment.inscribe(dart.nullCheck(child.box).size, dart.nullCheck(this.box)).offset, dart.nullCheck(child.box).size);
        } else {
          let positioned = child;
          let childConstraints = C[14] || CT.C14;
          if (positioned.left != null && positioned.right != null) {
            childConstraints = childConstraints.tighten({width: dart.nullCheck(this.box).width - dart.nullCheck(positioned.right) - dart.nullCheck(positioned.left)});
          } else if (positioned.width != null) {
            childConstraints = childConstraints.tighten({width: positioned.width});
          }
          if (positioned.top != null && positioned.bottom != null) {
            childConstraints = childConstraints.tighten({height: dart.nullCheck(this.box).height - dart.nullCheck(positioned.bottom) - dart.nullCheck(positioned.top)});
          } else if (positioned.height != null) {
            childConstraints = childConstraints.tighten({height: positioned.height});
          }
          positioned.layout(context, childConstraints, {parentUsesSize: true});
          if (!(positioned.box != null)) dart.assertFailed(null, I[34], 195, 16, "positioned.box != null");
          let x = null;
          if (positioned.left != null) {
            x = positioned.left;
          } else if (positioned.right != null) {
            x = dart.nullCheck(this.box).width - dart.nullCheck(positioned.right) - dart.nullCheck(positioned.width);
          } else {
            x = this.alignment.inscribe(dart.nullCheck(positioned.box).size, dart.nullCheck(this.box)).x;
          }
          let y = null;
          if (positioned.bottom != null) {
            y = positioned.bottom;
          } else if (positioned.top != null) {
            y = dart.nullCheck(this.box).height - dart.nullCheck(positioned.top) - dart.nullCheck(positioned.height);
          } else {
            y = this.alignment.inscribe(dart.nullCheck(positioned.box).size, dart.nullCheck(this.box)).y;
          }
          positioned.box = rect$.PdfRect.fromPoints(new point$.PdfPoint.new(dart.nullCheck(x), dart.nullCheck(y)), dart.nullCheck(positioned.box).size);
        }
      }
    }
    paint(context) {
      let t31, t31$;
      super.paint(context);
      let mat = vector_math_64.Matrix4.identity();
      mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
      t31 = context.canvas;
      (() => {
        t31.saveContext();
        t31.setTransform(mat);
        return t31;
      })();
      if (this.overflow === stack.Overflow.clip) {
        t31$ = context.canvas;
        (() => {
          t31$.drawRect(0.0, 0.0, dart.nullCheck(this.box).width, dart.nullCheck(this.box).height);
          t31$.clipPath();
          return t31$;
        })();
      }
      for (let child of this.children) {
        child.paint(context);
      }
      context.canvas.restoreContext();
    }
  };
  (stack.Stack.new = function(opts) {
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[18] || CT.C18;
    let fit = opts && 'fit' in opts ? opts.fit : C[94] || CT.C94;
    let overflow = opts && 'overflow' in opts ? opts.overflow : C[99] || CT.C99;
    let children = opts && 'children' in opts ? opts.children : C[26] || CT.C26;
    this[alignment$0] = alignment;
    this[fit$0] = fit;
    this[overflow$] = overflow;
    stack.Stack.__proto__.new.call(this, {children: children});
    ;
  }).prototype = stack.Stack.prototype;
  dart.addTypeTests(stack.Stack);
  dart.addTypeCaches(stack.Stack);
  dart.setMethodSignature(stack.Stack, () => ({
    __proto__: dart.getMethods(stack.Stack.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setLibraryUri(stack.Stack, I[33]);
  dart.setFieldSignature(stack.Stack, () => ({
    __proto__: dart.getFields(stack.Stack.__proto__),
    alignment: dart.finalFieldType(geometry.Alignment),
    fit: dart.finalFieldType(stack.StackFit),
    overflow: dart.finalFieldType(stack.Overflow)
  }));
  var grid$ = dart.privateName(chart, "Chart.grid");
  var datasets$ = dart.privateName(chart, "Chart.datasets");
  var overlay$ = dart.privateName(chart, "Chart.overlay");
  var title$1 = dart.privateName(chart, "Chart.title");
  var bottom$1 = dart.privateName(chart, "Chart.bottom");
  var left$1 = dart.privateName(chart, "Chart.left");
  var right$1 = dart.privateName(chart, "Chart.right");
  var _context$2 = dart.privateName(chart, "_context");
  var __Chart__child = dart.privateName(chart, "_#Chart#_child");
  var _child$ = dart.privateName(chart, "_child");
  var _computeSize = dart.privateName(chart, "_computeSize");
  var _build = dart.privateName(chart, "_build");
  chart.Chart = class Chart extends widget$.Widget {
    get grid() {
      return this[grid$];
    }
    set grid(value) {
      super.grid = value;
    }
    get datasets() {
      return this[datasets$];
    }
    set datasets(value) {
      super.datasets = value;
    }
    get overlay() {
      return this[overlay$];
    }
    set overlay(value) {
      super.overlay = value;
    }
    get title() {
      return this[title$1];
    }
    set title(value) {
      super.title = value;
    }
    get bottom() {
      return this[bottom$1];
    }
    set bottom(value) {
      super.bottom = value;
    }
    get left() {
      return this[left$1];
    }
    set left(value) {
      super.left = value;
    }
    get right() {
      return this[right$1];
    }
    set right(value) {
      super.right = value;
    }
    static ['_#new#tearOff'](opts) {
      let grid = opts && 'grid' in opts ? opts.grid : null;
      let datasets = opts && 'datasets' in opts ? opts.datasets : null;
      let overlay = opts && 'overlay' in opts ? opts.overlay : null;
      let title = opts && 'title' in opts ? opts.title : null;
      let bottom = opts && 'bottom' in opts ? opts.bottom : null;
      let left = opts && 'left' in opts ? opts.left : null;
      let right = opts && 'right' in opts ? opts.right : null;
      return new chart.Chart.new({grid: grid, datasets: datasets, overlay: overlay, title: title, bottom: bottom, left: left, right: right});
    }
    get [_child$]() {
      let t31;
      t31 = this[__Chart__child];
      return t31 == null ? dart.throw(new _internal.LateError.fieldNI("_child")) : t31;
    }
    set [_child$](library$32package$58pdf$47src$47widgets$47chart$47chart$46dart$58$58_child$35param) {
      this[__Chart__child] = library$32package$58pdf$47src$47widgets$47chart$47chart$46dart$58$58_child$35param;
    }
    static of(context) {
      return dart.nullCheck(context.dependsOn(chart.Chart));
    }
    [_computeSize](constraints) {
      if (constraints.isTight) {
        return constraints.smallest;
      }
      let width = constraints.maxWidth;
      let height = constraints.maxHeight;
      if (!width[$isFinite]) {
        width = height * 1;
      }
      if (!height[$isFinite]) {
        height = width * 1;
      }
      return constraints.constrain(new point$.PdfPoint.new(width, height));
    }
    [_build](context) {
      return new flex$.Column.new({children: (() => {
          let t31 = T$.JSArrayOfWidget().of([]);
          if (this.title != null) t31.push(dart.nullCheck(this.title));
          t31.push(new flex$.Expanded.new({child: new flex$.Row.new({children: (() => {
                let t32 = T$.JSArrayOfWidget().of([]);
                if (this.left != null) t32.push(dart.nullCheck(this.left));
                t32.push(new flex$.Expanded.new({child: new stack.Stack.new({overflow: stack.Overflow.visible, children: (() => {
                      let t33 = T$.JSArrayOfWidget().of([this.grid]);
                      if (this.overlay != null) t33.push(dart.nullCheck(this.overlay));
                      return t33;
                    })()})}));
                if (this.right != null) t32.push(dart.nullCheck(this.right));
                return t32;
              })()})}));
          if (this.bottom != null) t31.push(dart.nullCheck(this.bottom));
          return t31;
        })()});
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, this[_computeSize](constraints));
      this[_context$2] = context.inheritFrom(this);
      this[_child$] = this[_build](dart.nullCheck(this[_context$2]));
      this[_child$].layout(dart.nullCheck(this[_context$2]), new geometry.BoxConstraints.tight(dart.nullCheck(this.box).size));
    }
    paint(context) {
      let t34;
      super.paint(dart.nullCheck(this[_context$2]));
      let mat = vector_math_64.Matrix4.identity();
      mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
      t34 = dart.nullCheck(this[_context$2]).canvas;
      (() => {
        t34.saveContext();
        t34.setTransform(mat);
        return t34;
      })();
      this[_child$].paint(dart.nullCheck(this[_context$2]));
      dart.nullCheck(this[_context$2]).canvas.restoreContext();
    }
  };
  (chart.Chart.new = function(opts) {
    let grid = opts && 'grid' in opts ? opts.grid : null;
    let datasets = opts && 'datasets' in opts ? opts.datasets : null;
    let overlay = opts && 'overlay' in opts ? opts.overlay : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let bottom = opts && 'bottom' in opts ? opts.bottom : null;
    let left = opts && 'left' in opts ? opts.left : null;
    let right = opts && 'right' in opts ? opts.right : null;
    this[_context$2] = null;
    this[__Chart__child] = null;
    this[grid$] = grid;
    this[datasets$] = datasets;
    this[overlay$] = overlay;
    this[title$1] = title;
    this[bottom$1] = bottom;
    this[left$1] = left;
    this[right$1] = right;
    chart.Chart.__proto__.new.call(this);
    ;
  }).prototype = chart.Chart.prototype;
  dart.addTypeTests(chart.Chart);
  dart.addTypeCaches(chart.Chart);
  chart.Chart[dart.implements] = () => [widget$.Inherited];
  dart.setMethodSignature(chart.Chart, () => ({
    __proto__: dart.getMethods(chart.Chart.__proto__),
    [_computeSize]: dart.fnType(point$.PdfPoint, [geometry.BoxConstraints]),
    [_build]: dart.fnType(widget$.Widget, [widget$.Context]),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setStaticMethodSignature(chart.Chart, () => ['of']);
  dart.setGetterSignature(chart.Chart, () => ({
    __proto__: dart.getGetters(chart.Chart.__proto__),
    [_child$]: widget$.Widget
  }));
  dart.setSetterSignature(chart.Chart, () => ({
    __proto__: dart.getSetters(chart.Chart.__proto__),
    [_child$]: widget$.Widget
  }));
  dart.setLibraryUri(chart.Chart, I[19]);
  dart.setFieldSignature(chart.Chart, () => ({
    __proto__: dart.getFields(chart.Chart.__proto__),
    grid: dart.finalFieldType(chart.ChartGrid),
    datasets: dart.finalFieldType(core.List$(chart.Dataset)),
    overlay: dart.finalFieldType(dart.nullable(widget$.Widget)),
    title: dart.finalFieldType(dart.nullable(widget$.Widget)),
    bottom: dart.finalFieldType(dart.nullable(widget$.Widget)),
    left: dart.finalFieldType(dart.nullable(widget$.Widget)),
    right: dart.finalFieldType(dart.nullable(widget$.Widget)),
    [_context$2]: dart.fieldType(dart.nullable(widget$.Context)),
    [__Chart__child]: dart.fieldType(dart.nullable(widget$.Widget))
  }));
  var drawBorder$0 = dart.privateName(bar_chart, "BarDataSet.drawBorder");
  var borderColor$0 = dart.privateName(bar_chart, "BarDataSet.borderColor");
  var borderWidth$0 = dart.privateName(bar_chart, "BarDataSet.borderWidth");
  var drawSurface$1 = dart.privateName(bar_chart, "BarDataSet.drawSurface");
  var surfaceOpacity$1 = dart.privateName(bar_chart, "BarDataSet.surfaceOpacity");
  var width$3 = dart.privateName(bar_chart, "BarDataSet.width");
  var offset$0 = dart.privateName(bar_chart, "BarDataSet.offset");
  var axis$ = dart.privateName(bar_chart, "BarDataSet.axis");
  var _drawSurface$ = dart.privateName(bar_chart, "_drawSurface");
  const _is_BarDataSet_default = Symbol('_is_BarDataSet_default');
  bar_chart.BarDataSet$ = dart.generic(T => {
    class BarDataSet extends point_chart.PointDataSet$(T) {
      get drawBorder() {
        return this[drawBorder$0];
      }
      set drawBorder(value) {
        super.drawBorder = value;
      }
      get borderColor() {
        return this[borderColor$0];
      }
      set borderColor(value) {
        super.borderColor = value;
      }
      get borderWidth() {
        return this[borderWidth$0];
      }
      set borderWidth(value) {
        super.borderWidth = value;
      }
      get drawSurface() {
        return this[drawSurface$1];
      }
      set drawSurface(value) {
        super.drawSurface = value;
      }
      get surfaceOpacity() {
        return this[surfaceOpacity$1];
      }
      set surfaceOpacity(value) {
        super.surfaceOpacity = value;
      }
      get width() {
        return this[width$3];
      }
      set width(value) {
        super.width = value;
      }
      get offset() {
        return this[offset$0];
      }
      set offset(value) {
        super.offset = value;
      }
      get axis() {
        return this[axis$];
      }
      set axis(value) {
        super.axis = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let data = opts && 'data' in opts ? opts.data : null;
        let legend = opts && 'legend' in opts ? opts.legend : null;
        let borderColor = opts && 'borderColor' in opts ? opts.borderColor : null;
        let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : 1.5;
        let color = opts && 'color' in opts ? opts.color : C[39] || CT.C39;
        let drawBorder = opts && 'drawBorder' in opts ? opts.drawBorder : null;
        let drawSurface = opts && 'drawSurface' in opts ? opts.drawSurface : true;
        let surfaceOpacity = opts && 'surfaceOpacity' in opts ? opts.surfaceOpacity : 1;
        let width = opts && 'width' in opts ? opts.width : 10;
        let offset = opts && 'offset' in opts ? opts.offset : 0;
        let axis = opts && 'axis' in opts ? opts.axis : C[27] || CT.C27;
        let pointColor = opts && 'pointColor' in opts ? opts.pointColor : null;
        let pointSize = opts && 'pointSize' in opts ? opts.pointSize : 3;
        let drawPoints = opts && 'drawPoints' in opts ? opts.drawPoints : false;
        let shape = opts && 'shape' in opts ? opts.shape : null;
        let buildValue = opts && 'buildValue' in opts ? opts.buildValue : null;
        let valuePosition = opts && 'valuePosition' in opts ? opts.valuePosition : C[70] || CT.C70;
        return new (bar_chart.BarDataSet$(T)).new({data: data, legend: legend, borderColor: borderColor, borderWidth: borderWidth, color: color, drawBorder: drawBorder, drawSurface: drawSurface, surfaceOpacity: surfaceOpacity, width: width, offset: offset, axis: axis, pointColor: pointColor, pointSize: pointSize, drawPoints: drawPoints, shape: shape, buildValue: buildValue, valuePosition: valuePosition});
      }
      [_drawSurface$](context, grid, value) {
        switch (this.axis) {
          case C[27] || CT.C27:
            {
              let y = grid_cartesian.CartesianGrid.is(grid) ? grid.xAxisOffset : 0.0;
              let p = grid.toChart(value.point);
              let x = p.x + this.offset - this.width / 2;
              let height = p.y - y;
              context.canvas.drawRect(x, y, this.width, height);
              break;
            }
          case C[24] || CT.C24:
            {
              let x = grid_cartesian.CartesianGrid.is(grid) ? grid.yAxisOffset : 0.0;
              let p = grid.toChart(value.point);
              let y = p.y + this.offset - this.width / 2;
              let height = p.x - x;
              context.canvas.drawRect(x, y, height, this.width);
              break;
            }
        }
      }
      layout(context, constraints, opts) {
        let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.biggest);
      }
      paint(context) {
        let t34, t34$, t35, t34$0;
        super.paint(context);
        if (this.data[$isEmpty]) {
          return;
        }
        let grid = chart.Chart.of(context).grid;
        if (this.drawSurface) {
          for (let value of this.data) {
            this[_drawSurface$](context, grid, value);
          }
          if (this.surfaceOpacity !== 1) {
            t34 = context.canvas;
            (() => {
              t34.saveContext();
              t34.setGraphicState(new graphic_state.PdfGraphicState.new({opacity: this.surfaceOpacity}));
              return t34;
            })();
          }
          t34$ = context.canvas;
          (() => {
            t34$.setFillColor(this.color);
            t34$.fillPath();
            return t34$;
          })();
          if (this.surfaceOpacity !== 1) {
            context.canvas.restoreContext();
          }
        }
        if (this.drawBorder) {
          for (let value of this.data) {
            this[_drawSurface$](context, grid, value);
          }
          t34$0 = context.canvas;
          (() => {
            t34$0.setStrokeColor((t35 = this.borderColor, t35 == null ? this.color : t35));
            t34$0.setLineWidth(this.borderWidth);
            t34$0.strokePath();
            return t34$0;
          })();
        }
      }
      automaticValuePosition(point, size, previous, next) {
        let pos = super.automaticValuePosition(point, size, previous, next);
        if (pos === point_chart.ValuePosition.right || pos === point_chart.ValuePosition.left) {
          return point_chart.ValuePosition.top;
        }
        return pos;
      }
    }
    (BarDataSet.new = function(opts) {
      let t34, t34$, t34$0;
      let data = opts && 'data' in opts ? opts.data : null;
      let legend = opts && 'legend' in opts ? opts.legend : null;
      let borderColor = opts && 'borderColor' in opts ? opts.borderColor : null;
      let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : 1.5;
      let color = opts && 'color' in opts ? opts.color : C[39] || CT.C39;
      let drawBorder = opts && 'drawBorder' in opts ? opts.drawBorder : null;
      let drawSurface = opts && 'drawSurface' in opts ? opts.drawSurface : true;
      let surfaceOpacity = opts && 'surfaceOpacity' in opts ? opts.surfaceOpacity : 1;
      let width = opts && 'width' in opts ? opts.width : 10;
      let offset = opts && 'offset' in opts ? opts.offset : 0;
      let axis = opts && 'axis' in opts ? opts.axis : C[27] || CT.C27;
      let pointColor = opts && 'pointColor' in opts ? opts.pointColor : null;
      let pointSize = opts && 'pointSize' in opts ? opts.pointSize : 3;
      let drawPoints = opts && 'drawPoints' in opts ? opts.drawPoints : false;
      let shape = opts && 'shape' in opts ? opts.shape : null;
      let buildValue = opts && 'buildValue' in opts ? opts.buildValue : null;
      let valuePosition = opts && 'valuePosition' in opts ? opts.valuePosition : C[70] || CT.C70;
      this[borderColor$0] = borderColor;
      this[borderWidth$0] = borderWidth;
      this[drawSurface$1] = drawSurface;
      this[surfaceOpacity$1] = surfaceOpacity;
      this[width$3] = width;
      this[offset$0] = offset;
      this[axis$] = axis;
      this[drawBorder$0] = (t34 = drawBorder, t34 == null ? borderColor != null && !color._equals(borderColor) : t34);
      if (!(dart.test((t34$ = drawBorder, t34$ == null ? borderColor != null && !color._equals(borderColor) : t34$)) || drawSurface)) dart.assertFailed(null, I[35], 46, 16, "(drawBorder ?? borderColor != null && color != borderColor) ||\n            drawSurface");
      BarDataSet.__proto__.new.call(this, {legend: legend, color: (t34$0 = pointColor, t34$0 == null ? color : t34$0), data: data, buildValue: buildValue, drawPoints: drawPoints, pointSize: pointSize, shape: shape, valuePosition: valuePosition});
      ;
    }).prototype = BarDataSet.prototype;
    dart.addTypeTests(BarDataSet);
    BarDataSet.prototype[_is_BarDataSet_default] = true;
    dart.addTypeCaches(BarDataSet);
    dart.setMethodSignature(BarDataSet, () => ({
      __proto__: dart.getMethods(BarDataSet.__proto__),
      [_drawSurface$]: dart.fnType(dart.void, [widget$.Context, chart.ChartGrid, T])
    }));
    dart.setLibraryUri(BarDataSet, I[36]);
    dart.setFieldSignature(BarDataSet, () => ({
      __proto__: dart.getFields(BarDataSet.__proto__),
      drawBorder: dart.finalFieldType(core.bool),
      borderColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
      borderWidth: dart.finalFieldType(core.double),
      drawSurface: dart.finalFieldType(core.bool),
      surfaceOpacity: dart.finalFieldType(core.double),
      width: dart.finalFieldType(core.double),
      offset: dart.finalFieldType(core.double),
      axis: dart.finalFieldType(flex$.Axis)
    }));
    return BarDataSet;
  });
  bar_chart.BarDataSet = bar_chart.BarDataSet$();
  dart.addTypeTests(bar_chart.BarDataSet, _is_BarDataSet_default);
  barcode$._BarcodeWidget = class _BarcodeWidget extends widget$.Widget {
    static ['_#new#tearOff'](dataBytes, dataString, barcode, color, drawText, textStyle, textPadding) {
      return new barcode$._BarcodeWidget.new(dataBytes, dataString, barcode, color, drawText, textStyle, textPadding);
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.biggest);
    }
    get barcodeDraw() {
      return this.dataBytes != null ? dart.nullCheck(this.barcode).makeBytes(dart.nullCheck(this.dataBytes), {width: dart.nullCheck(this.box).width, height: dart.nullCheck(this.box).height, drawText: dart.nullCheck(this.drawText), fontHeight: dart.nullCheck(dart.nullCheck(this.textStyle).fontSize), textPadding: dart.nullCheck(this.textPadding)}) : dart.nullCheck(this.barcode).make(dart.nullCheck(this.dataString), {width: dart.nullCheck(this.box).width, height: dart.nullCheck(this.box).height, drawText: dart.nullCheck(this.drawText), fontHeight: dart.nullCheck(dart.nullCheck(this.textStyle).fontSize), textPadding: dart.nullCheck(this.textPadding)});
    }
    paint(context) {
      let t34, t34$;
      super.paint(context);
      let textList = T$.JSArrayOfBarcodeText().of([]);
      for (let element of this.barcodeDraw) {
        if (barcode_operations.BarcodeBar.is(element)) {
          if (element.black) {
            context.canvas.drawRect(dart.nullCheck(this.box).left + element.left, dart.nullCheck(this.box).top - element.top - element.height, element.width, element.height);
          }
        } else if (barcode_operations.BarcodeText.is(element)) {
          textList[$add](element);
        }
      }
      t34 = context.canvas;
      (() => {
        t34.setFillColor(this.color);
        t34.fillPath();
        return t34;
      })();
      if (dart.nullCheck(this.drawText)) {
        let font = dart.nullCheck(dart.nullCheck(this.textStyle).font).getFont(context);
        for (let text of textList) {
          let metrics = font.stringMetrics(text.text);
          let top = dart.nullCheck(this.box).top - text.top - metrics.descent * dart.nullCheck(dart.nullCheck(this.textStyle).fontSize) - text.height;
          let left = null;
          switch (text.align) {
            case C[102] || CT.C102:
              {
                left = text.left + dart.nullCheck(this.box).left;
                break;
              }
            case C[103] || CT.C103:
              {
                left = text.left + dart.nullCheck(this.box).left + (text.width - metrics.width * text.height) / 2;
                break;
              }
            case C[104] || CT.C104:
              {
                left = text.left + dart.nullCheck(this.box).left + (text.width - metrics.width * text.height);
                break;
              }
          }
          t34$ = context.canvas;
          (() => {
            t34$.setFillColor(dart.nullCheck(this.textStyle).color);
            t34$.drawString(font, text.height, text.text, left, top);
            return t34$;
          })();
        }
      }
    }
    debugPaint(context) {
      let t34;
      super.debugPaint(context);
      if (dart.nullCheck(this.drawText)) {
        for (let element of this.barcodeDraw) {
          if (barcode_operations.BarcodeText.is(element)) {
            context.canvas.drawRect(dart.nullCheck(this.box).x + element.left, dart.nullCheck(this.box).y + dart.nullCheck(this.box).height - element.top - element.height, element.width, element.height);
          }
        }
        t34 = context.canvas;
        (() => {
          t34.setStrokeColor(colors.PdfColors.blue);
          t34.setLineWidth(1.0);
          t34.strokePath();
          return t34;
        })();
      }
    }
  };
  (barcode$._BarcodeWidget.new = function(dataBytes, dataString, barcode, color, drawText, textStyle, textPadding) {
    this.dataBytes = dataBytes;
    this.dataString = dataString;
    this.barcode = barcode;
    this.color = color;
    this.drawText = drawText;
    this.textStyle = textStyle;
    this.textPadding = textPadding;
    barcode$._BarcodeWidget.__proto__.new.call(this);
    ;
  }).prototype = barcode$._BarcodeWidget.prototype;
  dart.addTypeTests(barcode$._BarcodeWidget);
  dart.addTypeCaches(barcode$._BarcodeWidget);
  dart.setMethodSignature(barcode$._BarcodeWidget, () => ({
    __proto__: dart.getMethods(barcode$._BarcodeWidget.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setGetterSignature(barcode$._BarcodeWidget, () => ({
    __proto__: dart.getGetters(barcode$._BarcodeWidget.__proto__),
    barcodeDraw: core.Iterable$(barcode_operations.BarcodeElement)
  }));
  dart.setLibraryUri(barcode$._BarcodeWidget, I[37]);
  dart.setFieldSignature(barcode$._BarcodeWidget, () => ({
    __proto__: dart.getFields(barcode$._BarcodeWidget.__proto__),
    dataString: dart.finalFieldType(dart.nullable(core.String)),
    dataBytes: dart.finalFieldType(dart.nullable(typed_data.Uint8List)),
    barcode: dart.finalFieldType(dart.nullable(barcode.Barcode)),
    color: dart.finalFieldType(color$.PdfColor),
    drawText: dart.finalFieldType(dart.nullable(core.bool)),
    textStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    textPadding: dart.finalFieldType(dart.nullable(core.double))
  }));
  var dataString = dart.privateName(barcode$, "BarcodeWidget.dataString");
  var dataBytes = dart.privateName(barcode$, "BarcodeWidget.dataBytes");
  var barcode$0 = dart.privateName(barcode$, "BarcodeWidget.barcode");
  var color$6 = dart.privateName(barcode$, "BarcodeWidget.color");
  var backgroundColor$2 = dart.privateName(barcode$, "BarcodeWidget.backgroundColor");
  var padding$5 = dart.privateName(barcode$, "BarcodeWidget.padding");
  var margin$5 = dart.privateName(barcode$, "BarcodeWidget.margin");
  var width$4 = dart.privateName(barcode$, "BarcodeWidget.width");
  var height$0 = dart.privateName(barcode$, "BarcodeWidget.height");
  var drawText$ = dart.privateName(barcode$, "BarcodeWidget.drawText");
  var textStyle$3 = dart.privateName(barcode$, "BarcodeWidget.textStyle");
  var textPadding$ = dart.privateName(barcode$, "BarcodeWidget.textPadding");
  var decoration$4 = dart.privateName(barcode$, "BarcodeWidget.decoration");
  barcode$.BarcodeWidget = class BarcodeWidget extends widget$.StatelessWidget {
    get dataString() {
      return this[dataString];
    }
    set dataString(value) {
      super.dataString = value;
    }
    get dataBytes() {
      return this[dataBytes];
    }
    set dataBytes(value) {
      super.dataBytes = value;
    }
    get barcode() {
      return this[barcode$0];
    }
    set barcode(value) {
      super.barcode = value;
    }
    get color() {
      return this[color$6];
    }
    set color(value) {
      super.color = value;
    }
    get backgroundColor() {
      return this[backgroundColor$2];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get padding() {
      return this[padding$5];
    }
    set padding(value) {
      super.padding = value;
    }
    get margin() {
      return this[margin$5];
    }
    set margin(value) {
      super.margin = value;
    }
    get width() {
      return this[width$4];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$0];
    }
    set height(value) {
      super.height = value;
    }
    get drawText() {
      return this[drawText$];
    }
    set drawText(value) {
      super.drawText = value;
    }
    get textStyle() {
      return this[textStyle$3];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get textPadding() {
      return this[textPadding$];
    }
    set textPadding(value) {
      super.textPadding = value;
    }
    get decoration() {
      return this[decoration$4];
    }
    set decoration(value) {
      super.decoration = value;
    }
    static ['_#new#tearOff'](opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let barcode = opts && 'barcode' in opts ? opts.barcode : null;
      let color = opts && 'color' in opts ? opts.color : C[10] || CT.C10;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let margin = opts && 'margin' in opts ? opts.margin : null;
      let padding = opts && 'padding' in opts ? opts.padding : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let drawText = opts && 'drawText' in opts ? opts.drawText : true;
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let textPadding = opts && 'textPadding' in opts ? opts.textPadding : 0;
      return new barcode$.BarcodeWidget.new({data: data, barcode: barcode, color: color, backgroundColor: backgroundColor, decoration: decoration, margin: margin, padding: padding, width: width, height: height, drawText: drawText, textStyle: textStyle, textPadding: textPadding});
    }
    static ['_#fromBytes#tearOff'](opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let barcode = opts && 'barcode' in opts ? opts.barcode : null;
      let color = opts && 'color' in opts ? opts.color : C[10] || CT.C10;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let margin = opts && 'margin' in opts ? opts.margin : null;
      let padding = opts && 'padding' in opts ? opts.padding : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let drawText = opts && 'drawText' in opts ? opts.drawText : true;
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let textPadding = opts && 'textPadding' in opts ? opts.textPadding : 0;
      return new barcode$.BarcodeWidget.fromBytes({data: data, barcode: barcode, color: color, backgroundColor: backgroundColor, decoration: decoration, margin: margin, padding: padding, width: width, height: height, drawText: drawText, textStyle: textStyle, textPadding: textPadding});
    }
    get data() {
      let t34;
      t34 = this.dataBytes;
      return t34 == null ? _native_typed_data.NativeUint8List.fromList(convert.utf8.encode(dart.nullCheck(this.dataString))) : t34;
    }
    build(context) {
      let defaultStyle = theme$.Theme.of(context).defaultTextStyle.copyWith({font: font$.Font.courier(), fontNormal: font$.Font.courier(), fontBold: font$.Font.courierBold(), fontItalic: font$.Font.courierOblique(), fontBoldItalic: font$.Font.courierBoldOblique(), lineSpacing: 1.0, fontSize: this.height != null ? dart.nullCheck(this.height) * 0.2 : null});
      let _textStyle = defaultStyle.merge(this.textStyle);
      let child = new barcode$._BarcodeWidget.new(this.dataBytes, this.dataString, this.barcode, this.color, this.drawText, _textStyle, this.textPadding);
      if (this.padding != null) {
        child = new basic.Padding.new({padding: dart.nullCheck(this.padding), child: child});
      }
      if (this.decoration != null) {
        child = new container$.DecoratedBox.new({decoration: dart.nullCheck(this.decoration), child: child});
      } else if (this.backgroundColor != null) {
        child = new container$.DecoratedBox.new({decoration: new decoration$.BoxDecoration.new({color: this.backgroundColor}), child: child});
      }
      if (this.width != null || this.height != null) {
        child = new basic.SizedBox.new({width: this.width, height: this.height, child: child});
      }
      if (this.margin != null) {
        child = new basic.Padding.new({padding: dart.nullCheck(this.margin), child: child});
      }
      return child;
    }
  };
  (barcode$.BarcodeWidget.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    let barcode = opts && 'barcode' in opts ? opts.barcode : null;
    let color = opts && 'color' in opts ? opts.color : C[10] || CT.C10;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let drawText = opts && 'drawText' in opts ? opts.drawText : true;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let textPadding = opts && 'textPadding' in opts ? opts.textPadding : 0;
    this[barcode$0] = barcode;
    this[color$6] = color;
    this[backgroundColor$2] = backgroundColor;
    this[decoration$4] = decoration;
    this[margin$5] = margin;
    this[padding$5] = padding;
    this[width$4] = width;
    this[height$0] = height;
    this[drawText$] = drawText;
    this[textStyle$3] = textStyle;
    this[textPadding$] = textPadding;
    this[dataBytes] = null;
    this[dataString] = data;
    barcode$.BarcodeWidget.__proto__.new.call(this);
    ;
  }).prototype = barcode$.BarcodeWidget.prototype;
  (barcode$.BarcodeWidget.fromBytes = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    let barcode = opts && 'barcode' in opts ? opts.barcode : null;
    let color = opts && 'color' in opts ? opts.color : C[10] || CT.C10;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let drawText = opts && 'drawText' in opts ? opts.drawText : true;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let textPadding = opts && 'textPadding' in opts ? opts.textPadding : 0;
    this[barcode$0] = barcode;
    this[color$6] = color;
    this[backgroundColor$2] = backgroundColor;
    this[decoration$4] = decoration;
    this[margin$5] = margin;
    this[padding$5] = padding;
    this[width$4] = width;
    this[height$0] = height;
    this[drawText$] = drawText;
    this[textStyle$3] = textStyle;
    this[textPadding$] = textPadding;
    this[dataBytes] = data;
    this[dataString] = null;
    barcode$.BarcodeWidget.__proto__.new.call(this);
    ;
  }).prototype = barcode$.BarcodeWidget.prototype;
  dart.addTypeTests(barcode$.BarcodeWidget);
  dart.addTypeCaches(barcode$.BarcodeWidget);
  dart.setMethodSignature(barcode$.BarcodeWidget, () => ({
    __proto__: dart.getMethods(barcode$.BarcodeWidget.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setGetterSignature(barcode$.BarcodeWidget, () => ({
    __proto__: dart.getGetters(barcode$.BarcodeWidget.__proto__),
    data: typed_data.Uint8List
  }));
  dart.setLibraryUri(barcode$.BarcodeWidget, I[37]);
  dart.setFieldSignature(barcode$.BarcodeWidget, () => ({
    __proto__: dart.getFields(barcode$.BarcodeWidget.__proto__),
    dataString: dart.finalFieldType(dart.nullable(core.String)),
    dataBytes: dart.finalFieldType(dart.nullable(typed_data.Uint8List)),
    barcode: dart.finalFieldType(barcode.Barcode),
    color: dart.finalFieldType(color$.PdfColor),
    backgroundColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    padding: dart.finalFieldType(dart.nullable(geometry.EdgeInsets)),
    margin: dart.finalFieldType(dart.nullable(geometry.EdgeInsets)),
    width: dart.finalFieldType(dart.nullable(core.double)),
    height: dart.finalFieldType(dart.nullable(core.double)),
    drawText: dart.finalFieldType(core.bool),
    textStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    textPadding: dart.finalFieldType(core.double),
    decoration: dart.finalFieldType(dart.nullable(decoration$.BoxDecoration))
  }));
  var fillColor$ = dart.privateName(shape, "Circle.fillColor");
  var strokeColor$ = dart.privateName(shape, "Circle.strokeColor");
  var strokeWidth$0 = dart.privateName(shape, "Circle.strokeWidth");
  shape.Circle = class Circle extends widget$.Widget {
    get fillColor() {
      return this[fillColor$];
    }
    set fillColor(value) {
      super.fillColor = value;
    }
    get strokeColor() {
      return this[strokeColor$];
    }
    set strokeColor(value) {
      super.strokeColor = value;
    }
    get strokeWidth() {
      return this[strokeWidth$0];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    static ['_#new#tearOff'](opts) {
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 1;
      return new shape.Circle.new({fillColor: fillColor, strokeColor: strokeColor, strokeWidth: strokeWidth});
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.biggest);
    }
    paint(context) {
      super.paint(context);
      let canvas = context.canvas;
      canvas.saveContext();
      if (this.fillColor != null) {
        canvas.setFillColor(dart.nullCheck(this.fillColor));
      }
      if (this.strokeColor != null) {
        canvas.setStrokeColor(this.strokeColor);
      }
      canvas.setLineWidth(this.strokeWidth);
      canvas.drawEllipse(dart.nullCheck(this.box).width / 2, dart.nullCheck(this.box).height / 2, dart.nullCheck(this.box).width / 2, dart.nullCheck(this.box).height / 2);
      if (this.strokeColor != null && this.fillColor != null) {
        canvas.fillAndStrokePath();
      } else if (this.strokeColor != null) {
        canvas.strokePath();
      } else {
        canvas.fillPath();
      }
      canvas.restoreContext();
    }
  };
  (shape.Circle.new = function(opts) {
    let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
    let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 1;
    this[fillColor$] = fillColor;
    this[strokeColor$] = strokeColor;
    this[strokeWidth$0] = strokeWidth;
    shape.Circle.__proto__.new.call(this);
    ;
  }).prototype = shape.Circle.prototype;
  dart.addTypeTests(shape.Circle);
  dart.addTypeCaches(shape.Circle);
  dart.setMethodSignature(shape.Circle, () => ({
    __proto__: dart.getMethods(shape.Circle.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setLibraryUri(shape.Circle, I[38]);
  dart.setFieldSignature(shape.Circle, () => ({
    __proto__: dart.getFields(shape.Circle.__proto__),
    fillColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    strokeColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    strokeWidth: dart.finalFieldType(core.double)
  }));
  var fillColor$0 = dart.privateName(shape, "Rectangle.fillColor");
  var strokeColor$0 = dart.privateName(shape, "Rectangle.strokeColor");
  var strokeWidth$1 = dart.privateName(shape, "Rectangle.strokeWidth");
  shape.Rectangle = class Rectangle extends widget$.Widget {
    get fillColor() {
      return this[fillColor$0];
    }
    set fillColor(value) {
      super.fillColor = value;
    }
    get strokeColor() {
      return this[strokeColor$0];
    }
    set strokeColor(value) {
      super.strokeColor = value;
    }
    get strokeWidth() {
      return this[strokeWidth$1];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    static ['_#new#tearOff'](opts) {
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 1;
      return new shape.Rectangle.new({fillColor: fillColor, strokeColor: strokeColor, strokeWidth: strokeWidth});
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.biggest);
    }
    paint(context) {
      super.paint(context);
      let canvas = context.canvas;
      canvas.saveContext();
      if (this.fillColor != null) {
        canvas.setFillColor(dart.nullCheck(this.fillColor));
      }
      if (this.strokeColor != null) {
        canvas.setStrokeColor(this.strokeColor);
      }
      canvas.setLineWidth(this.strokeWidth);
      canvas.drawRect(0.0, 0.0, dart.nullCheck(this.box).width, dart.nullCheck(this.box).height);
      if (this.strokeColor != null && this.fillColor != null) {
        canvas.fillAndStrokePath();
      } else if (this.strokeColor != null) {
        canvas.strokePath();
      } else {
        canvas.fillPath();
      }
      canvas.restoreContext();
    }
  };
  (shape.Rectangle.new = function(opts) {
    let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
    let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 1;
    this[fillColor$0] = fillColor;
    this[strokeColor$0] = strokeColor;
    this[strokeWidth$1] = strokeWidth;
    shape.Rectangle.__proto__.new.call(this);
    ;
  }).prototype = shape.Rectangle.prototype;
  dart.addTypeTests(shape.Rectangle);
  dart.addTypeCaches(shape.Rectangle);
  dart.setMethodSignature(shape.Rectangle, () => ({
    __proto__: dart.getMethods(shape.Rectangle.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setLibraryUri(shape.Rectangle, I[38]);
  dart.setFieldSignature(shape.Rectangle, () => ({
    __proto__: dart.getFields(shape.Rectangle.__proto__),
    fillColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    strokeColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    strokeWidth: dart.finalFieldType(core.double)
  }));
  var points$ = dart.privateName(shape, "Polygon.points");
  var fillColor$1 = dart.privateName(shape, "Polygon.fillColor");
  var strokeColor$1 = dart.privateName(shape, "Polygon.strokeColor");
  var strokeWidth$2 = dart.privateName(shape, "Polygon.strokeWidth");
  var close$ = dart.privateName(shape, "Polygon.close");
  shape.Polygon = class Polygon extends widget$.Widget {
    get points() {
      return this[points$];
    }
    set points(value) {
      super.points = value;
    }
    get fillColor() {
      return this[fillColor$1];
    }
    set fillColor(value) {
      super.fillColor = value;
    }
    get strokeColor() {
      return this[strokeColor$1];
    }
    set strokeColor(value) {
      super.strokeColor = value;
    }
    get strokeWidth() {
      return this[strokeWidth$2];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    get close() {
      return this[close$];
    }
    set close(value) {
      super.close = value;
    }
    static ['_#new#tearOff'](opts) {
      let points = opts && 'points' in opts ? opts.points : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 1;
      let close = opts && 'close' in opts ? opts.close : true;
      return new shape.Polygon.new({points: points, fillColor: fillColor, strokeColor: strokeColor, strokeWidth: strokeWidth, close: close});
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.biggest);
    }
    paint(context) {
      super.paint(context);
      if (this.points[$length] < 3) {
        return;
      }
      let canvas = context.canvas;
      canvas.saveContext();
      if (this.fillColor != null) {
        canvas.setFillColor(dart.nullCheck(this.fillColor));
      }
      if (this.strokeColor != null) {
        canvas.setStrokeColor(this.strokeColor);
      }
      canvas.setLineWidth(this.strokeWidth);
      let flippedPoints = this.points[$map](point$.PdfPoint, dart.fn(e => new point$.PdfPoint.new(e.x, dart.nullCheck(this.box).height - e.y), T$.PdfPointToPdfPoint()))[$toList]();
      canvas.moveTo(flippedPoints[$_get](0).x, flippedPoints[$_get](0).y);
      for (let i = 0; i < flippedPoints[$length]; i = i + 1) {
        canvas.lineTo(flippedPoints[$_get](i).x, flippedPoints[$_get](i).y);
      }
      if (this.close) {
        canvas.closePath();
      }
      if (this.strokeColor != null && this.fillColor != null) {
        canvas.fillAndStrokePath();
      } else if (this.strokeColor != null) {
        canvas.strokePath();
      } else {
        canvas.fillPath();
      }
      canvas.restoreContext();
    }
  };
  (shape.Polygon.new = function(opts) {
    let points = opts && 'points' in opts ? opts.points : null;
    let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
    let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 1;
    let close = opts && 'close' in opts ? opts.close : true;
    this[points$] = points;
    this[fillColor$1] = fillColor;
    this[strokeColor$1] = strokeColor;
    this[strokeWidth$2] = strokeWidth;
    this[close$] = close;
    shape.Polygon.__proto__.new.call(this);
    ;
  }).prototype = shape.Polygon.prototype;
  dart.addTypeTests(shape.Polygon);
  dart.addTypeCaches(shape.Polygon);
  dart.setMethodSignature(shape.Polygon, () => ({
    __proto__: dart.getMethods(shape.Polygon.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setLibraryUri(shape.Polygon, I[38]);
  dart.setFieldSignature(shape.Polygon, () => ({
    __proto__: dart.getFields(shape.Polygon.__proto__),
    points: dart.finalFieldType(core.List$(point$.PdfPoint)),
    fillColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    strokeColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    strokeWidth: dart.finalFieldType(core.double),
    close: dart.finalFieldType(core.bool)
  }));
  var points$0 = dart.privateName(shape, "InkList.points");
  var strokeColor$2 = dart.privateName(shape, "InkList.strokeColor");
  var strokeWidth$3 = dart.privateName(shape, "InkList.strokeWidth");
  shape.InkList = class InkList extends widget$.Widget {
    get points() {
      return this[points$0];
    }
    set points(value) {
      super.points = value;
    }
    get strokeColor() {
      return this[strokeColor$2];
    }
    set strokeColor(value) {
      super.strokeColor = value;
    }
    get strokeWidth() {
      return this[strokeWidth$3];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    static ['_#new#tearOff'](opts) {
      let points = opts && 'points' in opts ? opts.points : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 1;
      return new shape.InkList.new({points: points, strokeColor: strokeColor, strokeWidth: strokeWidth});
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.biggest);
    }
    paint(context) {
      super.paint(context);
      let canvas = context.canvas;
      canvas.saveContext();
      if (this.strokeColor != null) {
        canvas.setStrokeColor(this.strokeColor);
      }
      canvas.setLineWidth(this.strokeWidth);
      for (let subLineIndex = 0; subLineIndex < this.points[$length]; subLineIndex = subLineIndex + 1) {
        let flippedPoints = this.points[$_get](subLineIndex)[$map](point$.PdfPoint, dart.fn(e => new point$.PdfPoint.new(e.x, dart.nullCheck(this.box).height - e.y), T$.PdfPointToPdfPoint()))[$toList]();
        canvas.moveTo(flippedPoints[$_get](0).x, flippedPoints[$_get](0).y);
        for (let i = 0; i < flippedPoints[$length]; i = i + 1) {
          canvas.lineTo(flippedPoints[$_get](i).x, flippedPoints[$_get](i).y);
        }
      }
      canvas.strokePath();
      canvas.restoreContext();
    }
  };
  (shape.InkList.new = function(opts) {
    let points = opts && 'points' in opts ? opts.points : null;
    let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 1;
    this[points$0] = points;
    this[strokeColor$2] = strokeColor;
    this[strokeWidth$3] = strokeWidth;
    shape.InkList.__proto__.new.call(this);
    ;
  }).prototype = shape.InkList.prototype;
  dart.addTypeTests(shape.InkList);
  dart.addTypeCaches(shape.InkList);
  dart.setMethodSignature(shape.InkList, () => ({
    __proto__: dart.getMethods(shape.InkList.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setLibraryUri(shape.InkList, I[38]);
  dart.setFieldSignature(shape.InkList, () => ({
    __proto__: dart.getFields(shape.InkList.__proto__),
    points: dart.finalFieldType(core.List$(core.List$(point$.PdfPoint))),
    strokeColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    strokeWidth: dart.finalFieldType(core.double)
  }));
  var decoration$5 = dart.privateName(container$, "DecoratedBox.decoration");
  var position$0 = dart.privateName(container$, "DecoratedBox.position");
  container$.DecoratedBox = class DecoratedBox extends widget$.SingleChildWidget {
    get decoration() {
      return this[decoration$5];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get position() {
      return this[position$0];
    }
    set position(value) {
      super.position = value;
    }
    static ['_#new#tearOff'](opts) {
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let position = opts && 'position' in opts ? opts.position : C[105] || CT.C105;
      let child = opts && 'child' in opts ? opts.child : null;
      return new container$.DecoratedBox.new({decoration: decoration, position: position, child: child});
    }
    paint(context) {
      super.paint(context);
      if (this.position === decoration$.DecorationPosition.background) {
        this.decoration.paint(context, dart.nullCheck(this.box));
      }
      this.paintChild(context);
      if (this.position === decoration$.DecorationPosition.foreground) {
        this.decoration.paint(context, dart.nullCheck(this.box));
      }
    }
  };
  (container$.DecoratedBox.new = function(opts) {
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let position = opts && 'position' in opts ? opts.position : C[105] || CT.C105;
    let child = opts && 'child' in opts ? opts.child : null;
    this[decoration$5] = decoration;
    this[position$0] = position;
    container$.DecoratedBox.__proto__.new.call(this, {child: child});
    ;
  }).prototype = container$.DecoratedBox.prototype;
  dart.addTypeTests(container$.DecoratedBox);
  dart.addTypeCaches(container$.DecoratedBox);
  dart.setLibraryUri(container$.DecoratedBox, I[39]);
  dart.setFieldSignature(container$.DecoratedBox, () => ({
    __proto__: dart.getFields(container$.DecoratedBox.__proto__),
    decoration: dart.finalFieldType(decoration$.BoxDecoration),
    position: dart.finalFieldType(decoration$.DecorationPosition)
  }));
  var child$4 = dart.privateName(container$, "Container.child");
  var alignment$1 = dart.privateName(container$, "Container.alignment");
  var padding$6 = dart.privateName(container$, "Container.padding");
  var decoration$6 = dart.privateName(container$, "Container.decoration");
  var foregroundDecoration$ = dart.privateName(container$, "Container.foregroundDecoration");
  var constraints$ = dart.privateName(container$, "Container.constraints");
  var margin$6 = dart.privateName(container$, "Container.margin");
  var transform$0 = dart.privateName(container$, "Container.transform");
  container$.Container = class Container extends widget$.StatelessWidget {
    get child() {
      return this[child$4];
    }
    set child(value) {
      super.child = value;
    }
    get alignment() {
      return this[alignment$1];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get padding() {
      return this[padding$6];
    }
    set padding(value) {
      super.padding = value;
    }
    get decoration() {
      return this[decoration$6];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get foregroundDecoration() {
      return this[foregroundDecoration$];
    }
    set foregroundDecoration(value) {
      super.foregroundDecoration = value;
    }
    get constraints() {
      return this[constraints$];
    }
    set constraints(value) {
      super.constraints = value;
    }
    get margin() {
      return this[margin$6];
    }
    set margin(value) {
      super.margin = value;
    }
    get transform() {
      return this[transform$0];
    }
    set transform(value) {
      super.transform = value;
    }
    static ['_#new#tearOff'](opts) {
      let alignment = opts && 'alignment' in opts ? opts.alignment : null;
      let padding = opts && 'padding' in opts ? opts.padding : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let foregroundDecoration = opts && 'foregroundDecoration' in opts ? opts.foregroundDecoration : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let constraints = opts && 'constraints' in opts ? opts.constraints : null;
      let margin = opts && 'margin' in opts ? opts.margin : null;
      let transform = opts && 'transform' in opts ? opts.transform : null;
      let child = opts && 'child' in opts ? opts.child : null;
      return new container$.Container.new({alignment: alignment, padding: padding, color: color, decoration: decoration, foregroundDecoration: foregroundDecoration, width: width, height: height, constraints: constraints, margin: margin, transform: transform, child: child});
    }
    build(context) {
      let current = this.child;
      if (this.child == null && (this.constraints == null || !dart.nullCheck(this.constraints).isTight)) {
        current = new basic.LimitedBox.new({maxWidth: 0.0, maxHeight: 0.0, child: new basic.ConstrainedBox.new({constraints: C[106] || CT.C106})});
      }
      if (this.alignment != null) {
        current = new basic.Align.new({alignment: dart.nullCheck(this.alignment), child: current});
      }
      if (this.padding != null) {
        current = new basic.Padding.new({padding: dart.nullCheck(this.padding), child: current});
      }
      if (this.decoration != null) {
        current = new container$.DecoratedBox.new({decoration: dart.nullCheck(this.decoration), child: current});
      }
      if (this.foregroundDecoration != null) {
        current = new container$.DecoratedBox.new({decoration: dart.nullCheck(this.foregroundDecoration), position: decoration$.DecorationPosition.foreground, child: current});
      }
      if (this.constraints != null) {
        current = new basic.ConstrainedBox.new({constraints: dart.nullCheck(this.constraints), child: current});
      }
      if (this.margin != null) {
        current = new basic.Padding.new({padding: dart.nullCheck(this.margin), child: current});
      }
      if (this.transform != null) {
        current = new basic.Transform.new({transform: dart.nullCheck(this.transform), child: current});
      }
      return dart.nullCheck(current);
    }
  };
  (container$.Container.new = function(opts) {
    let t34, t34$, t34$0;
    let alignment = opts && 'alignment' in opts ? opts.alignment : null;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let foregroundDecoration = opts && 'foregroundDecoration' in opts ? opts.foregroundDecoration : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let constraints = opts && 'constraints' in opts ? opts.constraints : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[alignment$1] = alignment;
    this[padding$6] = padding;
    this[foregroundDecoration$] = foregroundDecoration;
    this[margin$6] = margin;
    this[transform$0] = transform;
    this[child$4] = child;
    if (!(color == null || decoration == null)) dart.assertFailed("Cannot provide both a color and a decoration\n" + "The color argument is just a shorthand for \"decoration: new BoxDecoration(color: color)\".", I[40], 65, 13, "color == null || decoration == null");
    this[decoration$6] = (t34 = decoration, t34 == null ? color != null ? new decoration$.BoxDecoration.new({color: color}) : null : t34);
    this[constraints$] = width != null || height != null ? (t34$0 = (t34$ = constraints, t34$ == null ? null : t34$.tighten({width: width, height: height})), t34$0 == null ? new geometry.BoxConstraints.tightFor({width: width, height: height}) : t34$0) : constraints;
    container$.Container.__proto__.new.call(this);
    ;
  }).prototype = container$.Container.prototype;
  dart.addTypeTests(container$.Container);
  dart.addTypeCaches(container$.Container);
  dart.setMethodSignature(container$.Container, () => ({
    __proto__: dart.getMethods(container$.Container.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(container$.Container, I[39]);
  dart.setFieldSignature(container$.Container, () => ({
    __proto__: dart.getFields(container$.Container.__proto__),
    child: dart.finalFieldType(dart.nullable(widget$.Widget)),
    alignment: dart.finalFieldType(dart.nullable(geometry.Alignment)),
    padding: dart.finalFieldType(dart.nullable(geometry.EdgeInsets)),
    decoration: dart.finalFieldType(dart.nullable(decoration$.BoxDecoration)),
    foregroundDecoration: dart.finalFieldType(dart.nullable(decoration$.BoxDecoration)),
    constraints: dart.finalFieldType(dart.nullable(geometry.BoxConstraints)),
    margin: dart.finalFieldType(dart.nullable(geometry.EdgeInsets)),
    transform: dart.finalFieldType(dart.nullable(vector_math_64.Matrix4))
  }));
  var children$3 = dart.privateName(mask_path, "SvgMaskPath.children");
  var painter$0 = dart.privateName(mask_path, "SvgMaskPath.painter");
  mask_path.SvgMaskPath = class SvgMaskPath extends core.Object {
    get children() {
      return this[children$3];
    }
    set children(value) {
      super.children = value;
    }
    get painter() {
      return this[painter$0];
    }
    set painter(value) {
      super.painter = value;
    }
    static ['_#new#tearOff'](children, painter) {
      return new mask_path.SvgMaskPath.new(children, painter);
    }
    static fromXml(element, painter, brush) {
      let maskPathAttr = element.getAttribute("mask");
      if (maskPathAttr == null) {
        return null;
      }
      let children = null;
      if (maskPathAttr[$startsWith]("url(#")) {
        let id = maskPathAttr[$substring](5, maskPathAttr[$lastIndexOf](")"));
        let maskPath = painter.parser.findById(id);
        if (maskPath != null) {
          let maskBrush = brush$.SvgBrush.fromXml(maskPath, brush, painter);
          children = maskPath.children.whereType(element$.XmlElement)[$map](T$.SvgOperationN(), dart.fn(c => operation.SvgOperation.fromXml(c, painter, maskBrush), T$.XmlElementToSvgOperationN()));
          return new mask_path.SvgMaskPath.new(children, painter);
        }
      }
      return null;
    }
    apply(canvas) {
      let mask = new smask.PdfSoftMask.new(this.painter.document, {boundingBox: this.painter.boundingBox});
      let maskCanvas = mask.getGraphics();
      for (let child of this.children) {
        dart.nullCheck(child).paint(dart.nullCheck(maskCanvas));
      }
      canvas.setGraphicState(new graphic_state.PdfGraphicState.new({softMask: mask}));
    }
  };
  (mask_path.SvgMaskPath.new = function(children, painter) {
    this[children$3] = children;
    this[painter$0] = painter;
    ;
  }).prototype = mask_path.SvgMaskPath.prototype;
  dart.addTypeTests(mask_path.SvgMaskPath);
  dart.addTypeCaches(mask_path.SvgMaskPath);
  dart.setMethodSignature(mask_path.SvgMaskPath, () => ({
    __proto__: dart.getMethods(mask_path.SvgMaskPath.__proto__),
    apply: dart.fnType(dart.void, [graphics.PdfGraphics])
  }));
  dart.setStaticMethodSignature(mask_path.SvgMaskPath, () => ['fromXml']);
  dart.setLibraryUri(mask_path.SvgMaskPath, I[41]);
  dart.setFieldSignature(mask_path.SvgMaskPath, () => ({
    __proto__: dart.getFields(mask_path.SvgMaskPath.__proto__),
    children: dart.finalFieldType(core.Iterable$(dart.nullable(operation.SvgOperation))),
    painter: dart.finalFieldType(painter$.SvgPainter)
  }));
  var x$0 = dart.privateName(use, "SvgUse.x");
  var y$0 = dart.privateName(use, "SvgUse.y");
  var width$5 = dart.privateName(use, "SvgUse.width");
  var height$1 = dart.privateName(use, "SvgUse.height");
  var href$ = dart.privateName(use, "SvgUse.href");
  var brush$0 = dart.privateName(operation, "SvgOperation.brush");
  var clip$ = dart.privateName(operation, "SvgOperation.clip");
  var transform$1 = dart.privateName(operation, "SvgOperation.transform");
  var painter$1 = dart.privateName(operation, "SvgOperation.painter");
  operation.SvgOperation = class SvgOperation extends core.Object {
    get brush() {
      return this[brush$0];
    }
    set brush(value) {
      super.brush = value;
    }
    get clip() {
      return this[clip$];
    }
    set clip(value) {
      super.clip = value;
    }
    get transform() {
      return this[transform$1];
    }
    set transform(value) {
      super.transform = value;
    }
    get painter() {
      return this[painter$1];
    }
    set painter(value) {
      super.painter = value;
    }
    static fromXml(element, painter, brush) {
      if (element.getAttribute("visibility") === "hidden") {
        return null;
      }
      if (element.getAttribute("display") === "none") {
        return null;
      }
      switch (element.name.local) {
        case "circle":
          {
            return path.SvgPath.fromCircleXml(element, painter, brush);
          }
        case "ellipse":
          {
            return path.SvgPath.fromEllipseXml(element, painter, brush);
          }
        case "g":
          {
            return group.SvgGroup.fromXml(element, painter, brush);
          }
        case "image":
          {
            return image$0.SvgImg.fromXml(element, painter, brush);
          }
        case "line":
          {
            return path.SvgPath.fromLineXml(element, painter, brush);
          }
        case "path":
          {
            return path.SvgPath.fromXml(element, painter, brush);
          }
        case "polygon":
          {
            return path.SvgPath.fromPolygonXml(element, painter, brush);
          }
        case "polyline":
          {
            return path.SvgPath.fromPolylineXml(element, painter, brush);
          }
        case "rect":
          {
            return path.SvgPath.fromRectXml(element, painter, brush);
          }
        case "symbol":
          {
            return symbol.SvgSymbol.fromXml(element, painter, brush);
          }
        case "text":
          {
            return text$0.SvgText.fromXml(element, painter, brush);
          }
        case "use":
          {
            return use.SvgUse.fromXml(element, painter, brush);
          }
      }
      return null;
    }
    paint(canvas) {
      canvas.saveContext();
      this.clip.apply(canvas);
      if (this.transform.isNotEmpty) {
        canvas.setTransform(dart.nullCheck(this.transform.matrix));
      }
      if (dart.nullCheck(this.brush.opacity) < 1.0 || this.brush.blendMode != null) {
        canvas.setGraphicState(new graphic_state.PdfGraphicState.new({opacity: this.brush.opacity === 1 ? null : this.brush.opacity, blendMode: this.brush.blendMode}));
      }
      if (this.brush.mask != null) {
        dart.nullCheck(this.brush.mask).apply(canvas);
      }
      this.paintShape(canvas);
      canvas.restoreContext();
    }
    draw(canvas) {
      canvas.saveContext();
      if (this.transform.isNotEmpty) {
        canvas.setTransform(dart.nullCheck(this.transform.matrix));
      }
      this.drawShape(canvas);
      canvas.restoreContext();
    }
  };
  (operation.SvgOperation.new = function(brush, clip, transform, painter) {
    this[brush$0] = brush;
    this[clip$] = clip;
    this[transform$1] = transform;
    this[painter$1] = painter;
    ;
  }).prototype = operation.SvgOperation.prototype;
  dart.addTypeTests(operation.SvgOperation);
  dart.addTypeCaches(operation.SvgOperation);
  dart.setMethodSignature(operation.SvgOperation, () => ({
    __proto__: dart.getMethods(operation.SvgOperation.__proto__),
    paint: dart.fnType(dart.void, [graphics.PdfGraphics]),
    draw: dart.fnType(dart.void, [graphics.PdfGraphics])
  }));
  dart.setStaticMethodSignature(operation.SvgOperation, () => ['fromXml']);
  dart.setLibraryUri(operation.SvgOperation, I[42]);
  dart.setFieldSignature(operation.SvgOperation, () => ({
    __proto__: dart.getFields(operation.SvgOperation.__proto__),
    brush: dart.finalFieldType(brush$.SvgBrush),
    clip: dart.finalFieldType(clip_path.SvgClipPath),
    transform: dart.finalFieldType(transform$.SvgTransform),
    painter: dart.finalFieldType(painter$.SvgPainter)
  }));
  use.SvgUse = class SvgUse extends operation.SvgOperation {
    get x() {
      return this[x$0];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$0];
    }
    set y(value) {
      super.y = value;
    }
    get width() {
      return this[width$5];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$1];
    }
    set height(value) {
      super.height = value;
    }
    get href() {
      return this[href$];
    }
    set href(value) {
      super.href = value;
    }
    static ['_#new#tearOff'](x, y, width, height, href, brush, clip, transform, painter) {
      return new use.SvgUse.new(x, y, width, height, href, brush, clip, transform, painter);
    }
    static fromXml(element, painter, brush) {
      let t34;
      let _brush = brush$.SvgBrush.fromXml(element, brush, painter);
      let width = dart.nullCheck(parser$.SvgParser.getNumeric(element, "width", _brush, {defaultValue: 0.0})).sizeValue;
      let height = dart.nullCheck(parser$.SvgParser.getNumeric(element, "height", _brush, {defaultValue: 0.0})).sizeValue;
      let x = dart.nullCheck(parser$.SvgParser.getNumeric(element, "x", _brush, {defaultValue: 0.0})).sizeValue;
      let y = dart.nullCheck(parser$.SvgParser.getNumeric(element, "y", _brush, {defaultValue: 0.0})).sizeValue;
      let href = null;
      let hrefAttr = (t34 = element.getAttribute("href"), t34 == null ? element.getAttribute("href", {namespace: "http://www.w3.org/1999/xlink"}) : t34);
      if (hrefAttr != null) {
        let hrefElement = painter.parser.findById(hrefAttr[$substring](1));
        if (hrefElement != null) {
          href = operation.SvgOperation.fromXml(hrefElement, painter, _brush);
        }
      }
      return new use.SvgUse.new(x, y, width, height, href, _brush, clip_path.SvgClipPath.fromXml(element, painter, _brush), transform$.SvgTransform.fromXml(element), painter);
    }
    static ['_#fromXml#tearOff'](element, painter, brush) {
      return use.SvgUse.fromXml(element, painter, brush);
    }
    paintShape(canvas) {
      let t34;
      if (this.x !== 0 || this.y !== 0) {
        canvas.setTransform(vector_math_64.Matrix4.translationValues(this.x, this.y, 0.0));
      }
      t34 = this.href;
      t34 == null ? null : t34.paint(canvas);
    }
    drawShape(canvas) {
      let t34;
      if (this.x !== 0 || this.y !== 0) {
        canvas.setTransform(vector_math_64.Matrix4.translationValues(this.x, this.y, 0.0));
      }
      t34 = this.href;
      t34 == null ? null : t34.draw(canvas);
    }
    boundingBox() {
      return dart.nullCheck(this.href).boundingBox();
    }
  };
  (use.SvgUse.new = function(x, y, width, height, href, brush, clip, transform, painter) {
    this[x$0] = x;
    this[y$0] = y;
    this[width$5] = width;
    this[height$1] = height;
    this[href$] = href;
    use.SvgUse.__proto__.new.call(this, brush, clip, transform, painter);
    ;
  }).prototype = use.SvgUse.prototype;
  dart.addTypeTests(use.SvgUse);
  dart.addTypeCaches(use.SvgUse);
  dart.setMethodSignature(use.SvgUse, () => ({
    __proto__: dart.getMethods(use.SvgUse.__proto__),
    paintShape: dart.fnType(dart.void, [graphics.PdfGraphics]),
    drawShape: dart.fnType(dart.void, [graphics.PdfGraphics]),
    boundingBox: dart.fnType(rect$.PdfRect, [])
  }));
  dart.setStaticMethodSignature(use.SvgUse, () => ['fromXml']);
  dart.setLibraryUri(use.SvgUse, I[43]);
  dart.setFieldSignature(use.SvgUse, () => ({
    __proto__: dart.getFields(use.SvgUse.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double),
    width: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    href: dart.finalFieldType(dart.nullable(operation.SvgOperation))
  }));
  var x$1 = dart.privateName(text$0, "SvgText.x");
  var y$1 = dart.privateName(text$0, "SvgText.y");
  var dx$ = dart.privateName(text$0, "SvgText.dx");
  var text$5 = dart.privateName(text$0, "SvgText.text");
  var font$0 = dart.privateName(text$0, "SvgText.font");
  var metrics$ = dart.privateName(text$0, "SvgText.metrics");
  var tspan$ = dart.privateName(text$0, "SvgText.tspan");
  text$0.SvgText = class SvgText extends operation.SvgOperation {
    get x() {
      return this[x$1];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$1];
    }
    set y(value) {
      super.y = value;
    }
    get dx() {
      return this[dx$];
    }
    set dx(value) {
      super.dx = value;
    }
    get text() {
      return this[text$5];
    }
    set text(value) {
      super.text = value;
    }
    get font() {
      return this[font$0];
    }
    set font(value) {
      super.font = value;
    }
    get metrics() {
      return this[metrics$];
    }
    set metrics(value) {
      super.metrics = value;
    }
    get tspan() {
      return this[tspan$];
    }
    set tspan(value) {
      super.tspan = value;
    }
    static ['_#new#tearOff'](x, y, dx, text, font, tspan, metrics, brush, clip, transform, painter) {
      return new text$0.SvgText.new(x, y, dx, text, font, tspan, metrics, brush, clip, transform, painter);
    }
    static fromXml(element, painter, brush, offset = C[71] || CT.C71) {
      let t34, t34$, t34$0, t34$1;
      let _brush = brush$.SvgBrush.fromXml(element, brush, painter);
      let dx = dart.nullCheck(parser$.SvgParser.getNumeric(element, "dx", _brush, {defaultValue: 0.0})).sizeValue;
      let dy = dart.nullCheck(parser$.SvgParser.getNumeric(element, "dy", _brush, {defaultValue: 0.0})).sizeValue;
      let x = (t34 = parser$.SvgParser.getNumeric(element, "x", _brush), t34 == null ? null : t34.sizeValue);
      let y = (t34$ = parser$.SvgParser.getNumeric(element, "y", _brush), t34$ == null ? null : t34$.sizeValue);
      let text = element.children.where(dart.fn(node => text$.XmlText.is(node) || cdata.XmlCDATA.is(node), T$.XmlNodeTobool()))[$map](core.String, dart.fn(node => node.text, T$.XmlNodeToString()))[$join]()[$trim]();
      let font = dart.nullCheck(painter.getFontCache(dart.nullCheck(_brush.fontFamily), dart.nullCheck(_brush.fontStyle), dart.nullCheck(_brush.fontWeight)));
      let pdfFont = font.getFont(widget$.Context.new({document: painter.document}));
      let metrics = pdfFont.stringMetrics(text)['*'](dart.nullCheck(_brush.fontSize).sizeValue);
      offset = new point$.PdfPoint.new(dart.notNull((t34$0 = x, t34$0 == null ? offset.x : t34$0)) + dx, dart.notNull((t34$1 = y, t34$1 == null ? offset.y : t34$1)) + dy);
      switch (dart.nullCheck(_brush.textAnchor)) {
        case C[107] || CT.C107:
          {
            break;
          }
        case C[108] || CT.C108:
          {
            offset = new point$.PdfPoint.new(offset.x - metrics.width / 2, offset.y);
            break;
          }
        case C[109] || CT.C109:
          {
            offset = new point$.PdfPoint.new(offset.x - metrics.width, offset.y);
            break;
          }
      }
      let childOffset = new point$.PdfPoint.new(offset.x + metrics.advanceWidth, offset.y);
      let tspan = element.children.whereType(element$.XmlElement)[$map](text$0.SvgText, dart.fn(e => {
        let child = text$0.SvgText.fromXml(e, painter, _brush, childOffset);
        childOffset = new point$.PdfPoint.new(dart.nullCheck(child.x) + child.dx, dart.nullCheck(child.y));
        return child;
      }, T$.XmlElementToSvgText()));
      return new text$0.SvgText.new(offset.x, offset.y, metrics.advanceWidth, text, pdfFont, tspan, metrics, _brush, clip_path.SvgClipPath.fromXml(element, painter, _brush), transform$.SvgTransform.fromXml(element), painter);
    }
    static ['_#fromXml#tearOff'](element, painter, brush, offset = C[71] || CT.C71) {
      return text$0.SvgText.fromXml(element, painter, brush, offset);
    }
    paintShape(canvas) {
      let t35, t34, t34$;
      t34 = canvas;
      (() => {
        t34.saveContext();
        t34.setTransform((t35 = vector_math_64.Matrix4.identity(), (() => {
          t35.scale(1.0, -1.0);
          t35.translate(this.x, -dart.nullCheck(this.y));
          return t35;
        })()));
        return t34;
      })();
      if (dart.nullCheck(this.brush.fill).isNotEmpty) {
        dart.nullCheck(this.brush.fill).setFillColor(this, canvas);
        if (dart.nullCheck(this.brush.fillOpacity) < 1) {
          t34$ = canvas;
          (() => {
            t34$.saveContext();
            t34$.setGraphicState(new graphic_state.PdfGraphicState.new({opacity: this.brush.fillOpacity}));
            return t34$;
          })();
        }
        canvas.drawString(this.font, dart.nullCheck(this.brush.fontSize).sizeValue, this.text, 0.0, 0.0);
        if (dart.nullCheck(this.brush.fillOpacity) < 1) {
          canvas.restoreContext();
        }
      }
      if (dart.nullCheck(this.brush.stroke).isNotEmpty) {
        if (this.brush.strokeWidth != null) {
          canvas.setLineWidth(dart.nullCheck(this.brush.strokeWidth).sizeValue);
        }
        if (this.brush.strokeDashArray != null) {
          canvas.setLineDashPattern(dart.nullCheck(this.brush.strokeDashArray));
        }
        if (dart.nullCheck(this.brush.strokeOpacity) < 1) {
          canvas.setGraphicState(new graphic_state.PdfGraphicState.new({opacity: this.brush.strokeOpacity}));
        }
        dart.nullCheck(this.brush.stroke).setStrokeColor(this, canvas);
        canvas.drawString(this.font, dart.nullCheck(this.brush.fontSize).sizeValue, this.text, 0.0, 0.0, {mode: graphics.PdfTextRenderingMode.stroke});
      }
      canvas.restoreContext();
      for (let span of this.tspan) {
        span.paint(canvas);
      }
    }
    drawShape(canvas) {
      let t35, t34;
      t34 = canvas;
      (() => {
        t34.saveContext();
        t34.setTransform((t35 = vector_math_64.Matrix4.identity(), (() => {
          t35.scale(1.0, -1.0);
          t35.translate(this.x, -dart.nullCheck(this.y));
          return t35;
        })()));
        t34.drawString(this.font, dart.nullCheck(this.brush.fontSize).sizeValue, this.text, 0.0, 0.0, {mode: graphics.PdfTextRenderingMode.clip});
        t34.restoreContext();
        return t34;
      })();
      for (let span of this.tspan) {
        span.draw(canvas);
      }
    }
    boundingBox() {
      let b = this.metrics.toPdfRect();
      let x = b.x;
      let y = b.y;
      let w = b.width;
      let h = b.height;
      for (let child of this.tspan) {
        let b = child.boundingBox();
        x = math.min(core.double, b.x, x);
        y = math.min(core.double, b.y, y);
        w = math.max(core.double, b.width, w);
        h = math.max(core.double, b.height, w);
      }
      return new rect$.PdfRect.new(x, y, w, h);
    }
  };
  (text$0.SvgText.new = function(x, y, dx, text, font, tspan, metrics, brush, clip, transform, painter) {
    this[x$1] = x;
    this[y$1] = y;
    this[dx$] = dx;
    this[text$5] = text;
    this[font$0] = font;
    this[tspan$] = tspan;
    this[metrics$] = metrics;
    text$0.SvgText.__proto__.new.call(this, brush, clip, transform, painter);
    ;
  }).prototype = text$0.SvgText.prototype;
  dart.addTypeTests(text$0.SvgText);
  dart.addTypeCaches(text$0.SvgText);
  dart.setMethodSignature(text$0.SvgText, () => ({
    __proto__: dart.getMethods(text$0.SvgText.__proto__),
    paintShape: dart.fnType(dart.void, [graphics.PdfGraphics]),
    drawShape: dart.fnType(dart.void, [graphics.PdfGraphics]),
    boundingBox: dart.fnType(rect$.PdfRect, [])
  }));
  dart.setStaticMethodSignature(text$0.SvgText, () => ['fromXml']);
  dart.setLibraryUri(text$0.SvgText, I[44]);
  dart.setFieldSignature(text$0.SvgText, () => ({
    __proto__: dart.getFields(text$0.SvgText.__proto__),
    x: dart.finalFieldType(dart.nullable(core.double)),
    y: dart.finalFieldType(dart.nullable(core.double)),
    dx: dart.finalFieldType(core.double),
    text: dart.finalFieldType(core.String),
    font: dart.finalFieldType(font.PdfFont),
    metrics: dart.finalFieldType(font_metrics.PdfFontMetrics),
    tspan: dart.finalFieldType(core.Iterable$(text$0.SvgText))
  }));
  var children$4 = dart.privateName(group, "SvgGroup.children");
  group.SvgGroup = class SvgGroup extends operation.SvgOperation {
    get children() {
      return this[children$4];
    }
    set children(value) {
      super.children = value;
    }
    static ['_#new#tearOff'](children, brush, clip, transform, painter) {
      return new group.SvgGroup.new(children, brush, clip, transform, painter);
    }
    static fromXml(element, painter, brush) {
      let _brush = brush$.SvgBrush.fromXml(element, brush, painter);
      let children = element.children.whereType(element$.XmlElement)[$where](dart.fn(element => element.name.local !== "symbol", T$.XmlElementTobool()))[$map](T$.SvgOperationN(), dart.fn(child => operation.SvgOperation.fromXml(child, painter, _brush), T$.XmlElementToSvgOperationN()))[$whereType](operation.SvgOperation);
      return new group.SvgGroup.new(children, _brush, clip_path.SvgClipPath.fromXml(element, painter, _brush), transform$.SvgTransform.fromXml(element), painter);
    }
    static ['_#fromXml#tearOff'](element, painter, brush) {
      return group.SvgGroup.fromXml(element, painter, brush);
    }
    paintShape(canvas) {
      for (let child of this.children) {
        child.paint(canvas);
      }
    }
    drawShape(canvas) {
      for (let child of this.children) {
        child.draw(canvas);
      }
    }
    boundingBox() {
      let x = 1 / 0;
      let y = 1 / 0;
      let w = 0.0;
      let h = 0.0;
      for (let child of this.children) {
        let b = child.boundingBox();
        x = math.min(core.double, b.x, x);
        y = math.min(core.double, b.y, y);
        w = math.max(core.double, b.width, w);
        h = math.max(core.double, b.height, w);
      }
      return new rect$.PdfRect.new(x, y, w, h);
    }
  };
  (group.SvgGroup.new = function(children, brush, clip, transform, painter) {
    this[children$4] = children;
    group.SvgGroup.__proto__.new.call(this, brush, clip, transform, painter);
    ;
  }).prototype = group.SvgGroup.prototype;
  dart.addTypeTests(group.SvgGroup);
  dart.addTypeCaches(group.SvgGroup);
  dart.setMethodSignature(group.SvgGroup, () => ({
    __proto__: dart.getMethods(group.SvgGroup.__proto__),
    paintShape: dart.fnType(dart.void, [graphics.PdfGraphics]),
    drawShape: dart.fnType(dart.void, [graphics.PdfGraphics]),
    boundingBox: dart.fnType(rect$.PdfRect, [])
  }));
  dart.setStaticMethodSignature(group.SvgGroup, () => ['fromXml']);
  dart.setLibraryUri(group.SvgGroup, I[45]);
  dart.setFieldSignature(group.SvgGroup, () => ({
    __proto__: dart.getFields(group.SvgGroup.__proto__),
    children: dart.finalFieldType(core.Iterable$(operation.SvgOperation))
  }));
  symbol.SvgSymbol = class SvgSymbol extends group.SvgGroup {
    static ['_#new#tearOff'](children, brush, clip, transform, painter) {
      return new symbol.SvgSymbol.new(children, brush, clip, transform, painter);
    }
    static fromXml(element, painter, brush) {
      let _brush = brush$.SvgBrush.fromXml(element, brush, painter);
      let children = element.children.whereType(element$.XmlElement)[$map](T$.SvgOperationN(), dart.fn(child => operation.SvgOperation.fromXml(child, painter, _brush), T$.XmlElementToSvgOperationN()))[$whereType](operation.SvgOperation);
      return new symbol.SvgSymbol.new(children, _brush, clip_path.SvgClipPath.fromXml(element, painter, _brush), transform$.SvgTransform.fromXml(element), painter);
    }
    static ['_#fromXml#tearOff'](element, painter, brush) {
      return symbol.SvgSymbol.fromXml(element, painter, brush);
    }
    paintShape(canvas) {
      for (let child of this.children) {
        child.paint(canvas);
      }
    }
  };
  (symbol.SvgSymbol.new = function(children, brush, clip, transform, painter) {
    symbol.SvgSymbol.__proto__.new.call(this, children, brush, clip, transform, painter);
    ;
  }).prototype = symbol.SvgSymbol.prototype;
  dart.addTypeTests(symbol.SvgSymbol);
  dart.addTypeCaches(symbol.SvgSymbol);
  dart.setStaticMethodSignature(symbol.SvgSymbol, () => ['fromXml']);
  dart.setLibraryUri(symbol.SvgSymbol, I[46]);
  var d$ = dart.privateName(path, "SvgPath.d");
  path.SvgPath = class SvgPath extends operation.SvgOperation {
    get d() {
      return this[d$];
    }
    set d(value) {
      super.d = value;
    }
    static ['_#new#tearOff'](d, brush, clip, transform, painter) {
      return new path.SvgPath.new(d, brush, clip, transform, painter);
    }
    static fromXml(element, painter, brush) {
      let d = element.getAttribute("d");
      if (d == null) {
        dart.throw(core.Exception.new("Path element must contain \"d\" attribute"));
      }
      let _brush = brush$.SvgBrush.fromXml(element, brush, painter);
      return new path.SvgPath.new(d, _brush, clip_path.SvgClipPath.fromXml(element, painter, _brush), transform$.SvgTransform.fromXml(element), painter);
    }
    static ['_#fromXml#tearOff'](element, painter, brush) {
      return path.SvgPath.fromXml(element, painter, brush);
    }
    static fromRectXml(element, painter, brush) {
      let t34, t34$, t34$0;
      let _brush = brush$.SvgBrush.fromXml(element, brush, painter);
      let x = dart.nullCheck(parser$.SvgParser.getNumeric(element, "x", _brush, {defaultValue: 0.0})).sizeValue;
      let y = dart.nullCheck(parser$.SvgParser.getNumeric(element, "y", _brush, {defaultValue: 0.0})).sizeValue;
      let width = dart.nullCheck(parser$.SvgParser.getNumeric(element, "width", _brush, {defaultValue: 0.0})).sizeValue;
      let height = dart.nullCheck(parser$.SvgParser.getNumeric(element, "height", _brush, {defaultValue: 0.0})).sizeValue;
      let rx = (t34 = parser$.SvgParser.getNumeric(element, "rx", _brush), t34 == null ? null : t34.sizeValue);
      let ry = (t34$ = parser$.SvgParser.getNumeric(element, "ry", _brush), t34$ == null ? null : t34$.sizeValue);
      ry == null ? ry = (t34$0 = rx, t34$0 == null ? 0.0 : t34$0) : null;
      rx == null ? rx = ry : null;
      let topRight = rx !== 0 || ry !== 0 ? "a " + dart.str(rx) + " " + dart.str(ry) + " 0 0 1 " + dart.str(rx) + " " + dart.str(ry) : "";
      let bottomRight = rx !== 0 || ry !== 0 ? "a " + dart.str(rx) + " " + dart.str(ry) + " 0 0 1 " + dart.str(-dart.notNull(rx)) + " " + dart.str(ry) : "";
      let bottomLeft = rx !== 0 || ry !== 0 ? "a " + dart.str(rx) + " " + dart.str(ry) + " 0 0 1 " + dart.str(-dart.notNull(rx)) + " " + dart.str(-dart.notNull(ry)) : "";
      let topLeft = rx !== 0 || ry !== 0 ? "a " + dart.str(rx) + " " + dart.str(ry) + " 0 0 1 " + dart.str(rx) + " " + dart.str(-dart.notNull(ry)) : "";
      let d = "M" + dart.str(x + dart.notNull(rx)) + " " + dart.str(y) + "h" + dart.str(width - dart.notNull(rx) * 2) + topRight + "v" + dart.str(height - dart.notNull(ry) * 2) + bottomRight + "h" + dart.str(-(width - dart.notNull(rx) * 2)) + bottomLeft + "v" + dart.str(-(height - dart.notNull(ry) * 2)) + topLeft + "z";
      return new path.SvgPath.new(d, _brush, clip_path.SvgClipPath.fromXml(element, painter, _brush), transform$.SvgTransform.fromXml(element), painter);
    }
    static ['_#fromRectXml#tearOff'](element, painter, brush) {
      return path.SvgPath.fromRectXml(element, painter, brush);
    }
    static fromCircleXml(element, painter, brush) {
      let _brush = brush$.SvgBrush.fromXml(element, brush, painter);
      let cx = dart.nullCheck(parser$.SvgParser.getNumeric(element, "cx", _brush)).sizeValue;
      let cy = dart.nullCheck(parser$.SvgParser.getNumeric(element, "cy", _brush)).sizeValue;
      let r = dart.nullCheck(parser$.SvgParser.getNumeric(element, "r", _brush)).sizeValue;
      let d = "M" + dart.str(cx - r) + "," + dart.str(cy) + "A" + dart.str(r) + "," + dart.str(r) + " 0,0,0 " + dart.str(cx + r) + "," + dart.str(cy) + "A" + dart.str(r) + "," + dart.str(r) + " 0,0,0 " + dart.str(cx - r) + "," + dart.str(cy) + "z";
      return new path.SvgPath.new(d, _brush, clip_path.SvgClipPath.fromXml(element, painter, _brush), transform$.SvgTransform.fromXml(element), painter);
    }
    static ['_#fromCircleXml#tearOff'](element, painter, brush) {
      return path.SvgPath.fromCircleXml(element, painter, brush);
    }
    static fromEllipseXml(element, painter, brush) {
      let _brush = brush$.SvgBrush.fromXml(element, brush, painter);
      let cx = dart.nullCheck(parser$.SvgParser.getNumeric(element, "cx", _brush)).sizeValue;
      let cy = dart.nullCheck(parser$.SvgParser.getNumeric(element, "cy", _brush)).sizeValue;
      let rx = dart.nullCheck(parser$.SvgParser.getNumeric(element, "rx", _brush)).sizeValue;
      let ry = dart.nullCheck(parser$.SvgParser.getNumeric(element, "ry", _brush)).sizeValue;
      let d = "M" + dart.str(cx - rx) + "," + dart.str(cy) + "A" + dart.str(rx) + "," + dart.str(ry) + " 0,0,0 " + dart.str(cx + rx) + "," + dart.str(cy) + "A" + dart.str(rx) + "," + dart.str(ry) + " 0,0,0 " + dart.str(cx - rx) + "," + dart.str(cy) + "z";
      return new path.SvgPath.new(d, _brush, clip_path.SvgClipPath.fromXml(element, painter, _brush), transform$.SvgTransform.fromXml(element), painter);
    }
    static ['_#fromEllipseXml#tearOff'](element, painter, brush) {
      return path.SvgPath.fromEllipseXml(element, painter, brush);
    }
    static fromPolylineXml(element, painter, brush) {
      let points = element.getAttribute("points");
      let d = "M" + dart.str(points);
      let _brush = brush$.SvgBrush.fromXml(element, brush, painter);
      return new path.SvgPath.new(d, _brush, clip_path.SvgClipPath.fromXml(element, painter, _brush), transform$.SvgTransform.fromXml(element), painter);
    }
    static ['_#fromPolylineXml#tearOff'](element, painter, brush) {
      return path.SvgPath.fromPolylineXml(element, painter, brush);
    }
    static fromPolygonXml(element, painter, brush) {
      let points = element.getAttribute("points");
      let d = "M" + dart.str(points) + "z";
      let _brush = brush$.SvgBrush.fromXml(element, brush, painter);
      return new path.SvgPath.new(d, _brush, clip_path.SvgClipPath.fromXml(element, painter, _brush), transform$.SvgTransform.fromXml(element), painter);
    }
    static ['_#fromPolygonXml#tearOff'](element, painter, brush) {
      return path.SvgPath.fromPolygonXml(element, painter, brush);
    }
    static fromLineXml(element, painter, brush) {
      let _brush = brush$.SvgBrush.fromXml(element, brush, painter);
      let x1 = dart.nullCheck(parser$.SvgParser.getNumeric(element, "x1", _brush)).sizeValue;
      let y1 = dart.nullCheck(parser$.SvgParser.getNumeric(element, "y1", _brush)).sizeValue;
      let x2 = dart.nullCheck(parser$.SvgParser.getNumeric(element, "x2", _brush)).sizeValue;
      let y2 = dart.nullCheck(parser$.SvgParser.getNumeric(element, "y2", _brush)).sizeValue;
      let d = "M" + dart.str(x1) + " " + dart.str(y1) + " " + dart.str(x2) + " " + dart.str(y2);
      return new path.SvgPath.new(d, _brush, clip_path.SvgClipPath.fromXml(element, painter, _brush), transform$.SvgTransform.fromXml(element), painter);
    }
    static ['_#fromLineXml#tearOff'](element, painter, brush) {
      return path.SvgPath.fromLineXml(element, painter, brush);
    }
    paintShape(canvas) {
      let t34, t34$, t34$0;
      if (dart.nullCheck(this.brush.fill).isNotEmpty) {
        dart.nullCheck(this.brush.fill).setFillColor(this, canvas);
        if (dart.nullCheck(this.brush.fillOpacity) < 1) {
          t34 = canvas;
          (() => {
            t34.saveContext();
            t34.setGraphicState(new graphic_state.PdfGraphicState.new({opacity: this.brush.fillOpacity}));
            return t34;
          })();
        }
        t34$ = canvas;
        (() => {
          t34$.drawShape(this.d);
          t34$.fillPath({evenOdd: dart.nullCheck(this.brush.fillEvenOdd)});
          return t34$;
        })();
        if (dart.nullCheck(this.brush.fillOpacity) < 1) {
          canvas.restoreContext();
        }
      }
      if (dart.nullCheck(this.brush.stroke).isNotEmpty) {
        dart.nullCheck(this.brush.stroke).setStrokeColor(this, canvas);
        if (dart.nullCheck(this.brush.strokeOpacity) < 1) {
          canvas.setGraphicState(new graphic_state.PdfGraphicState.new({opacity: this.brush.strokeOpacity}));
        }
        t34$0 = canvas;
        (() => {
          t34$0.drawShape(this.d);
          t34$0.setLineCap(dart.nullCheck(this.brush.strokeLineCap));
          t34$0.setLineJoin(dart.nullCheck(this.brush.strokeLineJoin));
          t34$0.setMiterLimit(math.max(core.double, 1.0, dart.nullCheck(this.brush.strokeMiterLimit)));
          t34$0.setLineDashPattern(dart.nullCheck(this.brush.strokeDashArray), dart.nullCheck(this.brush.strokeDashOffset)[$toInt]());
          t34$0.setLineWidth(dart.nullCheck(this.brush.strokeWidth).sizeValue);
          t34$0.strokePath();
          return t34$0;
        })();
      }
    }
    drawShape(canvas) {
      canvas.drawShape(this.d);
    }
    boundingBox() {
      return graphics.PdfGraphics.shapeBoundingBox(this.d);
    }
  };
  (path.SvgPath.new = function(d, brush, clip, transform, painter) {
    this[d$] = d;
    path.SvgPath.__proto__.new.call(this, brush, clip, transform, painter);
    ;
  }).prototype = path.SvgPath.prototype;
  dart.addTypeTests(path.SvgPath);
  dart.addTypeCaches(path.SvgPath);
  dart.setMethodSignature(path.SvgPath, () => ({
    __proto__: dart.getMethods(path.SvgPath.__proto__),
    paintShape: dart.fnType(dart.void, [graphics.PdfGraphics]),
    drawShape: dart.fnType(dart.void, [graphics.PdfGraphics]),
    boundingBox: dart.fnType(rect$.PdfRect, [])
  }));
  dart.setStaticMethodSignature(path.SvgPath, () => ['fromXml', 'fromRectXml', 'fromCircleXml', 'fromEllipseXml', 'fromPolylineXml', 'fromPolygonXml', 'fromLineXml']);
  dart.setLibraryUri(path.SvgPath, I[47]);
  dart.setFieldSignature(path.SvgPath, () => ({
    __proto__: dart.getFields(path.SvgPath.__proto__),
    d: dart.finalFieldType(core.String)
  }));
  var x$2 = dart.privateName(image$0, "SvgImg.x");
  var y$2 = dart.privateName(image$0, "SvgImg.y");
  var width$6 = dart.privateName(image$0, "SvgImg.width");
  var height$2 = dart.privateName(image$0, "SvgImg.height");
  var image$2 = dart.privateName(image$0, "SvgImg.image");
  image$0.SvgImg = class SvgImg extends operation.SvgOperation {
    get x() {
      return this[x$2];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$2];
    }
    set y(value) {
      super.y = value;
    }
    get width() {
      return this[width$6];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$2];
    }
    set height(value) {
      super.height = value;
    }
    get image() {
      return this[image$2];
    }
    set image(value) {
      super.image = value;
    }
    static ['_#new#tearOff'](x, y, width, height, image, brush, clip, transform, painter) {
      return new image$0.SvgImg.new(x, y, width, height, image, brush, clip, transform, painter);
    }
    static fromXml(element, painter, brush) {
      let t34;
      let _brush = brush$.SvgBrush.fromXml(element, brush, painter);
      let width = dart.nullCheck(parser$.SvgParser.getNumeric(element, "width", _brush, {defaultValue: 0.0})).sizeValue;
      let height = dart.nullCheck(parser$.SvgParser.getNumeric(element, "height", _brush, {defaultValue: 0.0})).sizeValue;
      let x = dart.nullCheck(parser$.SvgParser.getNumeric(element, "x", _brush, {defaultValue: 0.0})).sizeValue;
      let y = dart.nullCheck(parser$.SvgParser.getNumeric(element, "y", _brush, {defaultValue: 0.0})).sizeValue;
      let image = null;
      let hrefAttr = (t34 = element.getAttribute("href"), t34 == null ? element.getAttribute("href", {namespace: "http://www.w3.org/1999/xlink"}) : t34);
      if (hrefAttr != null) {
        if (hrefAttr[$startsWith]("data:")) {
          let px = hrefAttr[$substring](hrefAttr[$indexOf](";") + 1);
          if (px[$startsWith]("base64,")) {
            let b = px[$substring](7)[$replaceAll](core.RegExp.new("\\s"), "");
            let bytes = convert.base64.decode(b);
            let img = dart.nullCheck(formats.decodeImage(bytes));
            image = image$.PdfImage.new(painter.document, {image: img.data[$buffer][$asUint8List](), width: img.width, height: img.height});
          }
        }
      }
      return new image$0.SvgImg.new(x, y, width, height, image, _brush, clip_path.SvgClipPath.fromXml(element, painter, _brush), transform$.SvgTransform.fromXml(element), painter);
    }
    static ['_#fromXml#tearOff'](element, painter, brush) {
      return image$0.SvgImg.fromXml(element, painter, brush);
    }
    paintShape(canvas) {
      let t35, t34;
      if (this.image == null) {
        return;
      }
      let sx = this.width / dart.nullCheck(this.image).width;
      let sy = this.height / dart.nullCheck(this.image).height;
      t34 = canvas;
      (() => {
        t34.setTransform((t35 = vector_math_64.Matrix4.identity(), (() => {
          t35.translate(this.x, this.y + this.height, 0.0);
          t35.scale(sx, -sy);
          return t35;
        })()));
        t34.drawImage(dart.nullCheck(this.image), 0.0, 0.0);
        return t34;
      })();
    }
    drawShape(canvas) {
    }
    boundingBox() {
      return new rect$.PdfRect.new(this.x, this.y, this.width, this.height);
    }
  };
  (image$0.SvgImg.new = function(x, y, width, height, image, brush, clip, transform, painter) {
    this[x$2] = x;
    this[y$2] = y;
    this[width$6] = width;
    this[height$2] = height;
    this[image$2] = image;
    image$0.SvgImg.__proto__.new.call(this, brush, clip, transform, painter);
    ;
  }).prototype = image$0.SvgImg.prototype;
  dart.addTypeTests(image$0.SvgImg);
  dart.addTypeCaches(image$0.SvgImg);
  dart.setMethodSignature(image$0.SvgImg, () => ({
    __proto__: dart.getMethods(image$0.SvgImg.__proto__),
    paintShape: dart.fnType(dart.void, [graphics.PdfGraphics]),
    drawShape: dart.fnType(dart.void, [graphics.PdfGraphics]),
    boundingBox: dart.fnType(rect$.PdfRect, [])
  }));
  dart.setStaticMethodSignature(image$0.SvgImg, () => ['fromXml']);
  dart.setLibraryUri(image$0.SvgImg, I[48]);
  dart.setFieldSignature(image$0.SvgImg, () => ({
    __proto__: dart.getFields(image$0.SvgImg.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double),
    width: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    image: dart.finalFieldType(dart.nullable(image$.PdfImage))
  }));
  var viewBox$ = dart.privateName(parser$, "SvgParser.viewBox");
  var width$7 = dart.privateName(parser$, "SvgParser.width");
  var height$3 = dart.privateName(parser$, "SvgParser.height");
  var root$ = dart.privateName(parser$, "SvgParser.root");
  var colorFilter$ = dart.privateName(parser$, "SvgParser.colorFilter");
  parser$.SvgParser = class SvgParser extends core.Object {
    get viewBox() {
      return this[viewBox$];
    }
    set viewBox(value) {
      super.viewBox = value;
    }
    get width() {
      return this[width$7];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$3];
    }
    set height(value) {
      super.height = value;
    }
    get root() {
      return this[root$];
    }
    set root(value) {
      super.root = value;
    }
    get colorFilter() {
      return this[colorFilter$];
    }
    set colorFilter(value) {
      super.colorFilter = value;
    }
    static new(opts) {
      let t34, t34$, t34$0, t34$1;
      let xml = opts && 'xml' in opts ? opts.xml : null;
      let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
      let root = xml.rootElement;
      let vbattr = root.getAttribute("viewBox");
      let width = (t34 = parser$.SvgParser.getNumeric(root, "width", null), t34 == null ? null : t34.sizeValue);
      let height = (t34$ = parser$.SvgParser.getNumeric(root, "height", null), t34$ == null ? null : t34$.sizeValue);
      let vb = vbattr == null ? T$.JSArrayOfdouble().of([0.0, 0.0, (t34$0 = width, t34$0 == null ? 1000.0 : t34$0), (t34$1 = height, t34$1 == null ? 1000.0 : t34$1)]) : parser$.SvgParser.splitDoubles(vbattr);
      if (vb[$isEmpty] || vb[$length] > 4) {
        dart.throw(core.Exception.new("viewBox must contain 1..4 parameters"));
      }
      let fvb = (() => {
        let t34 = T$.ListOfdouble().of(T$.ListOfdouble().filled(4 - vb[$length], 0.0));
        t34[$addAll](vb);
        return t34;
      })();
      let viewBox = new rect$.PdfRect.new(fvb[$_get](0), fvb[$_get](1), fvb[$_get](2), fvb[$_get](3));
      return new parser$.SvgParser.__(width, height, viewBox, root, colorFilter);
    }
    static ['_#new#tearOff'](opts) {
      let xml = opts && 'xml' in opts ? opts.xml : null;
      let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
      return parser$.SvgParser.new({xml: xml, colorFilter: colorFilter});
    }
    static ['_#_#tearOff'](width, height, viewBox, root, colorFilter) {
      return new parser$.SvgParser.__(width, height, viewBox, root, colorFilter);
    }
    findById(id) {
      try {
        return descendants['XmlDescendantsExtension|get#descendants'](this.root)[$whereType](element$.XmlElement)[$firstWhere](dart.fn(e => e.getAttribute("id") === id, T$.XmlElementTobool()));
      } catch (e) {
        let ex = dart.getThrown(e);
        if (core.StateError.is(ex)) {
          return null;
        } else
          throw e;
      }
    }
    static getDouble(xml, name, opts) {
      let namespace = opts && 'namespace' in opts ? opts.namespace : null;
      let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : 0;
      let attr = xml.getAttribute(name, {namespace: namespace});
      if (attr == null) {
        return defaultValue;
      }
      return core.double.parse(attr);
    }
    static getNumeric(xml, name, brush, opts) {
      let namespace = opts && 'namespace' in opts ? opts.namespace : null;
      let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
      let attr = xml.getAttribute(name, {namespace: namespace});
      if (attr == null) {
        return defaultValue == null ? null : new parser$.SvgNumeric.value(defaultValue, null);
      }
      return parser$.SvgNumeric.new(attr, brush);
    }
    static splitNumeric(parameters, brush) {
      let parameterMatches = parser$.SvgParser._transformParameterRegExp.allMatches(parameters);
      return parameterMatches[$map](parser$.SvgNumeric, dart.fn(m => parser$.SvgNumeric.new(dart.nullCheck(m.group(0)), brush), T$.RegExpMatchToSvgNumeric()));
    }
    static splitDoubles(parameters) {
      let parameterMatches = parser$.SvgParser._transformParameterRegExp.allMatches(parameters);
      return parameterMatches[$map](core.double, dart.fn(m => core.double.parse(dart.nullCheck(m.group(0))), T$.RegExpMatchTodouble()));
    }
    static splitIntegers(parameters) {
      let parameterMatches = parser$.SvgParser._transformParameterRegExp.allMatches(parameters);
      return parameterMatches[$map](core.int, dart.fn(m => core.int.parse(dart.nullCheck(m.group(0))), T$.RegExpMatchToint()));
    }
    static convertStyle(element) {
      let t37;
      let style = (t37 = element.getAttribute("style"), t37 == null ? null : t37[$trim]());
      if (style != null && style[$isNotEmpty]) {
        let iter = style[$split](";");
        for (let style of iter) {
          if (style[$trim]()[$isEmpty]) {
            continue;
          }
          let kv = core.RegExp.new("([\\w-]+)\\s*:\\s*(.*)").allMatches(style)[$first];
          let key = dart.nullCheck(kv.group(1));
          let value = dart.nullCheck(kv.group(2));
          element.setAttribute(key, value);
        }
      }
    }
  };
  (parser$.SvgParser.__ = function(width, height, viewBox, root, colorFilter) {
    this[width$7] = width;
    this[height$3] = height;
    this[viewBox$] = viewBox;
    this[root$] = root;
    this[colorFilter$] = colorFilter;
    ;
  }).prototype = parser$.SvgParser.prototype;
  dart.addTypeTests(parser$.SvgParser);
  dart.addTypeCaches(parser$.SvgParser);
  dart.setMethodSignature(parser$.SvgParser, () => ({
    __proto__: dart.getMethods(parser$.SvgParser.__proto__),
    findById: dart.fnType(dart.nullable(element$.XmlElement), [core.String])
  }));
  dart.setStaticMethodSignature(parser$.SvgParser, () => ['new', 'getDouble', 'getNumeric', 'splitNumeric', 'splitDoubles', 'splitIntegers', 'convertStyle']);
  dart.setLibraryUri(parser$.SvgParser, I[49]);
  dart.setFieldSignature(parser$.SvgParser, () => ({
    __proto__: dart.getFields(parser$.SvgParser.__proto__),
    viewBox: dart.finalFieldType(rect$.PdfRect),
    width: dart.finalFieldType(dart.nullable(core.double)),
    height: dart.finalFieldType(dart.nullable(core.double)),
    root: dart.finalFieldType(element$.XmlElement),
    colorFilter: dart.finalFieldType(dart.nullable(color$.PdfColor))
  }));
  dart.setStaticFieldSignature(parser$.SvgParser, () => ['_transformParameterRegExp']);
  dart.defineLazy(parser$.SvgParser, {
    /*parser$.SvgParser._transformParameterRegExp*/get _transformParameterRegExp() {
      return core.RegExp.new("[\\w.-]+(px|pt|em|cm|mm|in|%|)");
    }
  }, false);
  parser$.SvgUnit = class SvgUnit extends core._Enum {
    toString() {
      return "SvgUnit." + this[_name];
    }
  };
  (parser$.SvgUnit.new = function(index, name) {
    parser$.SvgUnit.__proto__.new.call(this, index, name);
    ;
  }).prototype = parser$.SvgUnit.prototype;
  dart.addTypeTests(parser$.SvgUnit);
  dart.addTypeCaches(parser$.SvgUnit);
  dart.setLibraryUri(parser$.SvgUnit, I[49]);
  dart.setStaticFieldSignature(parser$.SvgUnit, () => ['values', 'pixels', 'milimeters', 'centimeters', 'inch', 'em', 'percent', 'points', 'direct']);
  dart.defineExtensionMethods(parser$.SvgUnit, ['toString']);
  dart.defineLazy(parser$.SvgUnit, {
    /*parser$.SvgUnit.values*/get values() {
      return C[110] || CT.C110;
    },
    /*parser$.SvgUnit.pixels*/get pixels() {
      return C[111] || CT.C111;
    },
    /*parser$.SvgUnit.milimeters*/get milimeters() {
      return C[112] || CT.C112;
    },
    /*parser$.SvgUnit.centimeters*/get centimeters() {
      return C[113] || CT.C113;
    },
    /*parser$.SvgUnit.inch*/get inch() {
      return C[114] || CT.C114;
    },
    /*parser$.SvgUnit.em*/get em() {
      return C[115] || CT.C115;
    },
    /*parser$.SvgUnit.percent*/get percent() {
      return C[116] || CT.C116;
    },
    /*parser$.SvgUnit.points*/get points() {
      return C[117] || CT.C117;
    },
    /*parser$.SvgUnit.direct*/get direct() {
      return C[118] || CT.C118;
    }
  }, false);
  var value$6 = dart.privateName(parser$, "SvgNumeric.value");
  var unit$ = dart.privateName(parser$, "SvgNumeric.unit");
  var brush$1 = dart.privateName(parser$, "SvgNumeric.brush");
  parser$.SvgNumeric = class SvgNumeric extends core.Object {
    get value() {
      return this[value$6];
    }
    set value(value) {
      super.value = value;
    }
    get unit() {
      return this[unit$];
    }
    set unit(value) {
      super.unit = value;
    }
    get brush() {
      return this[brush$1];
    }
    set brush(value) {
      super.brush = value;
    }
    static new(value, brush) {
      let r = core.RegExp.new("([-+]?[\\d\\.]+)\\s*(px|pt|em|cm|mm|in|%|)").allMatches(value)[$first];
      return new parser$.SvgNumeric.value(core.double.parse(dart.nullCheck(r.group(1))), brush, dart.nullCheck(parser$.SvgNumeric._svgUnits[$_get](r.group(2))));
    }
    static ['_#new#tearOff'](value, brush) {
      return parser$.SvgNumeric.new(value, brush);
    }
    static ['_#value#tearOff'](value, brush, unit = C[118] || CT.C118) {
      return new parser$.SvgNumeric.value(value, brush, unit);
    }
    get colorValue() {
      switch (this.unit) {
        case C[116] || CT.C116:
          {
            return this.value / 100.0;
          }
        case C[118] || CT.C118:
          {
            return this.value / 255.0;
          }
        default:
          {
            dart.throw(core.Exception.new("Invalid color value " + dart.str(this.value) + " (" + dart.str(this.unit) + ")"));
          }
      }
    }
    get sizeValue() {
      switch (this.unit) {
        case C[116] || CT.C116:
          {
            return this.value / 100.0;
          }
        case C[118] || CT.C118:
        case C[111] || CT.C111:
        case C[117] || CT.C117:
          {
            return this.value;
          }
        case C[112] || CT.C112:
          {
            return this.value * 2.834645669291339;
          }
        case C[113] || CT.C113:
          {
            return this.value * 28.346456692913385;
          }
        case C[114] || CT.C114:
          {
            return this.value * 72;
          }
        case C[115] || CT.C115:
          {
            return this.value * dart.nullCheck(dart.nullCheck(this.brush).fontSize).sizeValue;
          }
      }
    }
  };
  (parser$.SvgNumeric.value = function(value, brush, unit = C[118] || CT.C118) {
    this[value$6] = value;
    this[brush$1] = brush;
    this[unit$] = unit;
    ;
  }).prototype = parser$.SvgNumeric.prototype;
  dart.addTypeTests(parser$.SvgNumeric);
  dart.addTypeCaches(parser$.SvgNumeric);
  dart.setStaticMethodSignature(parser$.SvgNumeric, () => ['new']);
  dart.setGetterSignature(parser$.SvgNumeric, () => ({
    __proto__: dart.getGetters(parser$.SvgNumeric.__proto__),
    colorValue: core.double,
    sizeValue: core.double
  }));
  dart.setLibraryUri(parser$.SvgNumeric, I[49]);
  dart.setFieldSignature(parser$.SvgNumeric, () => ({
    __proto__: dart.getFields(parser$.SvgNumeric.__proto__),
    value: dart.finalFieldType(core.double),
    unit: dart.finalFieldType(parser$.SvgUnit),
    brush: dart.finalFieldType(dart.nullable(brush$.SvgBrush))
  }));
  dart.setStaticFieldSignature(parser$.SvgNumeric, () => ['_svgUnits']);
  dart.defineLazy(parser$.SvgNumeric, {
    /*parser$.SvgNumeric._svgUnits*/get _svgUnits() {
      return C[119] || CT.C119;
    }
  }, false);
  var matrix$ = dart.privateName(transform$, "SvgTransform.matrix");
  transform$.SvgTransform = class SvgTransform extends core.Object {
    get matrix() {
      return this[matrix$];
    }
    set matrix(value) {
      super.matrix = value;
    }
    static ['_#new#tearOff'](matrix) {
      return new transform$.SvgTransform.new(matrix);
    }
    static fromXml(element) {
      return transform$.SvgTransform.fromString(element.getAttribute("transform"));
    }
    static ['_#fromXml#tearOff'](element) {
      return transform$.SvgTransform.fromXml(element);
    }
    static fromString(transform) {
      let t41, t42;
      if (transform == null) {
        return transform$.SvgTransform.none;
      }
      let mat = vector_math_64.Matrix4.identity();
      for (let m of transform$.SvgTransform._transformRegExp.allMatches(transform)) {
        let name = m.group(1);
        let parameterList = parser$.SvgParser.splitDoubles(dart.nullCheck(m.group(2)))[$toList]();
        switch (name) {
          case "matrix":
            {
              let mm = (() => {
                let t39 = T$.ListOfdouble().of(parameterList);
                t39[$addAll](T$.ListOfdouble().filled(6 - parameterList[$length], 0.0));
                return t39;
              })();
              mat.multiply(vector_math_64.Matrix4.new(mm[$_get](0), mm[$_get](1), 0.0, 0.0, mm[$_get](2), mm[$_get](3), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, mm[$_get](4), mm[$_get](5), 0.0, 1.0));
              break;
            }
          case "translate":
            {
              let dx = parameterList[$_get](0);
              let dy = (() => {
                let t40 = T$.ListOfdouble().of(parameterList);
                t40.push(0.0);
                return t40;
              })()[$_get](1);
              mat.multiply((t41 = vector_math_64.Matrix4.identity(), (() => {
                t41.translate(dx, dy);
                return t41;
              })()));
              break;
            }
          case "scale":
            {
              let sw = parameterList[$_get](0);
              let sh = (() => {
                let t41 = T$.ListOfdouble().of(parameterList);
                t41.push(sw);
                return t41;
              })()[$_get](1);
              mat.multiply((t42 = vector_math_64.Matrix4.identity(), (() => {
                t42.scale(sw, sh);
                return t42;
              })()));
              break;
            }
          case "rotate":
            {
              let degrees = parameterList[$_get](0);
              let ox = 0.0;
              let oy = 0.0;
              if (parameterList[$length] > 1) {
                ox = parameterList[$_get](1);
                oy = (() => {
                  let t42 = T$.ListOfdouble().of(parameterList);
                  t42.push(0.0);
                  return t42;
                })()[$_get](2);
                mat.translate(ox, oy);
              }
              mat.multiply(vector_math_64.Matrix4.rotationZ(vector_math_64.radians(degrees)));
              if (ox !== 0 || oy !== 0) {
                mat.translate(-ox, -oy);
              }
              break;
            }
          case "skewX":
            {
              mat.multiply(vector_math_64.Matrix4.skewX(vector_math_64.radians(parameterList[$_get](0))));
              break;
            }
          case "skewY":
            {
              mat.multiply(vector_math_64.Matrix4.skewY(vector_math_64.radians(parameterList[$_get](0))));
              break;
            }
        }
      }
      return new transform$.SvgTransform.new(mat);
    }
    static ['_#fromString#tearOff'](transform) {
      return transform$.SvgTransform.fromString(transform);
    }
    get isEmpty() {
      return this.matrix == null;
    }
    get isNotEmpty() {
      return this.matrix != null;
    }
  };
  (transform$.SvgTransform.new = function(matrix) {
    this[matrix$] = matrix;
    ;
  }).prototype = transform$.SvgTransform.prototype;
  dart.addTypeTests(transform$.SvgTransform);
  dart.addTypeCaches(transform$.SvgTransform);
  dart.setStaticMethodSignature(transform$.SvgTransform, () => ['fromXml', 'fromString']);
  dart.setGetterSignature(transform$.SvgTransform, () => ({
    __proto__: dart.getGetters(transform$.SvgTransform.__proto__),
    isEmpty: core.bool,
    isNotEmpty: core.bool
  }));
  dart.setLibraryUri(transform$.SvgTransform, I[50]);
  dart.setFieldSignature(transform$.SvgTransform, () => ({
    __proto__: dart.getFields(transform$.SvgTransform.__proto__),
    matrix: dart.finalFieldType(dart.nullable(vector_math_64.Matrix4))
  }));
  dart.setStaticFieldSignature(transform$.SvgTransform, () => ['none', '_transformRegExp']);
  dart.defineLazy(transform$.SvgTransform, {
    /*transform$.SvgTransform.none*/get none() {
      return C[120] || CT.C120;
    },
    /*transform$.SvgTransform._transformRegExp*/get _transformRegExp() {
      return core.RegExp.new("(matrix|translate|scale|rotate|skewX|skewY)\\s*\\(([^)]*)\\)\\s*");
    }
  }, false);
  var children$5 = dart.privateName(clip_path, "SvgClipPath.children");
  var isEmpty$ = dart.privateName(clip_path, "SvgClipPath.isEmpty");
  var painter$2 = dart.privateName(clip_path, "SvgClipPath.painter");
  clip_path.SvgClipPath = class SvgClipPath extends core.Object {
    get children() {
      return this[children$5];
    }
    set children(value) {
      super.children = value;
    }
    get isEmpty() {
      return this[isEmpty$];
    }
    set isEmpty(value) {
      super.isEmpty = value;
    }
    get painter() {
      return this[painter$2];
    }
    set painter(value) {
      super.painter = value;
    }
    static ['_#new#tearOff'](children, isEmpty, painter) {
      return new clip_path.SvgClipPath.new(children, isEmpty, painter);
    }
    static fromXml(element, painter, brush) {
      let clipPathAttr = element.getAttribute("clip-path");
      if (clipPathAttr == null) {
        return C[121] || CT.C121;
      }
      let children = null;
      if (clipPathAttr[$startsWith]("url(#")) {
        let id = clipPathAttr[$substring](5, clipPathAttr[$lastIndexOf](")"));
        let clipPath = painter.parser.findById(id);
        if (clipPath != null) {
          children = clipPath.children.whereType(element$.XmlElement)[$map](T$.SvgOperationN(), dart.fn(c => operation.SvgOperation.fromXml(c, painter, brush), T$.XmlElementToSvgOperationN()));
          return new clip_path.SvgClipPath.new(children, false, painter);
        }
      }
      return C[121] || CT.C121;
    }
    static ['_#fromXml#tearOff'](element, painter, brush) {
      return clip_path.SvgClipPath.fromXml(element, painter, brush);
    }
    get isNotEmpty() {
      return !this.isEmpty;
    }
    apply(canvas) {
      if (this.isEmpty) {
        return;
      }
      for (let child of dart.nullCheck(this.children)) {
        dart.nullCheck(child).draw(canvas);
      }
      canvas.clipPath();
    }
  };
  (clip_path.SvgClipPath.new = function(children, isEmpty, painter) {
    this[children$5] = children;
    this[isEmpty$] = isEmpty;
    this[painter$2] = painter;
    ;
  }).prototype = clip_path.SvgClipPath.prototype;
  dart.addTypeTests(clip_path.SvgClipPath);
  dart.addTypeCaches(clip_path.SvgClipPath);
  dart.setMethodSignature(clip_path.SvgClipPath, () => ({
    __proto__: dart.getMethods(clip_path.SvgClipPath.__proto__),
    apply: dart.fnType(dart.void, [graphics.PdfGraphics])
  }));
  dart.setStaticMethodSignature(clip_path.SvgClipPath, () => ['fromXml']);
  dart.setGetterSignature(clip_path.SvgClipPath, () => ({
    __proto__: dart.getGetters(clip_path.SvgClipPath.__proto__),
    isNotEmpty: core.bool
  }));
  dart.setLibraryUri(clip_path.SvgClipPath, I[51]);
  dart.setFieldSignature(clip_path.SvgClipPath, () => ({
    __proto__: dart.getFields(clip_path.SvgClipPath.__proto__),
    children: dart.finalFieldType(dart.nullable(core.Iterable$(dart.nullable(operation.SvgOperation)))),
    isEmpty: dart.finalFieldType(core.bool),
    painter: dart.finalFieldType(dart.nullable(painter$.SvgPainter))
  }));
  gradient$.GradientUnits = class GradientUnits extends core._Enum {
    toString() {
      return "GradientUnits." + this[_name];
    }
  };
  (gradient$.GradientUnits.new = function(index, name) {
    gradient$.GradientUnits.__proto__.new.call(this, index, name);
    ;
  }).prototype = gradient$.GradientUnits.prototype;
  dart.addTypeTests(gradient$.GradientUnits);
  dart.addTypeCaches(gradient$.GradientUnits);
  dart.setLibraryUri(gradient$.GradientUnits, I[52]);
  dart.setStaticFieldSignature(gradient$.GradientUnits, () => ['values', 'objectBoundingBox', 'userSpaceOnUse']);
  dart.defineExtensionMethods(gradient$.GradientUnits, ['toString']);
  dart.defineLazy(gradient$.GradientUnits, {
    /*gradient$.GradientUnits.values*/get values() {
      return C[122] || CT.C122;
    },
    /*gradient$.GradientUnits.objectBoundingBox*/get objectBoundingBox() {
      return C[123] || CT.C123;
    },
    /*gradient$.GradientUnits.userSpaceOnUse*/get userSpaceOnUse() {
      return C[124] || CT.C124;
    }
  }, false);
  var gradientUnits$ = dart.privateName(gradient$, "SvgGradient.gradientUnits");
  var transform$2 = dart.privateName(gradient$, "SvgGradient.transform");
  var colors$0 = dart.privateName(gradient$, "SvgGradient.colors");
  var stops$ = dart.privateName(gradient$, "SvgGradient.stops");
  var opacityList$ = dart.privateName(gradient$, "SvgGradient.opacityList");
  var color$7 = dart.privateName(color$0, "SvgColor.color");
  var opacity$ = dart.privateName(color$0, "SvgColor.opacity");
  var inherit$ = dart.privateName(color$0, "SvgColor.inherit");
  color$0.SvgColor = class SvgColor extends core.Object {
    get color() {
      return this[color$7];
    }
    set color(value) {
      super.color = value;
    }
    get opacity() {
      return this[opacity$];
    }
    set opacity(value) {
      super.opacity = value;
    }
    get inherit() {
      return this[inherit$];
    }
    set inherit(value) {
      super.inherit = value;
    }
    static ['_#new#tearOff'](opts) {
      let color = opts && 'color' in opts ? opts.color : null;
      let opacity = opts && 'opacity' in opts ? opts.opacity : null;
      let inherit = opts && 'inherit' in opts ? opts.inherit : false;
      return new color$0.SvgColor.new({color: color, opacity: opacity, inherit: inherit});
    }
    static fromXml(color, painter) {
      if (color == null) {
        return color$0.SvgColor.inherited;
      }
      if (color === "none") {
        return color$0.SvgColor.none;
      }
      if (painter.parser.colorFilter != null) {
        return new color$0.SvgColor.new({color: painter.parser.colorFilter});
      }
      if (colors$.svgColors[$containsKey](color)) {
        return new color$0.SvgColor.new({color: colors$.svgColors[$_get](color)});
      }
      if (color[$toLowerCase]()[$startsWith]("rgba")) {
        let rgba = parser$.SvgParser.splitNumeric(color[$substring](color[$indexOf]("(") + 1, color[$indexOf](")")), null)[$toList]();
        return new color$0.SvgColor.new({color: new color$.PdfColor.new(rgba[$_get](0).colorValue, rgba[$_get](1).colorValue, rgba[$_get](2).colorValue, rgba[$_get](3).value)});
      }
      if (color[$toLowerCase]()[$startsWith]("hsl")) {
        let hsl = parser$.SvgParser.splitNumeric(color[$substring](color[$indexOf]("(") + 1, color[$indexOf](")")), null)[$toList]();
        return new color$0.SvgColor.new({color: color$.PdfColorHsl.new(hsl[$_get](0).colorValue, hsl[$_get](1).colorValue, hsl[$_get](2).colorValue)});
      }
      if (color[$toLowerCase]()[$startsWith]("rgb")) {
        let rgb = parser$.SvgParser.splitNumeric(color[$substring](color[$indexOf]("(") + 1, color[$indexOf](")")), null)[$toList]();
        return new color$0.SvgColor.new({color: new color$.PdfColor.new(rgb[$_get](0).colorValue, rgb[$_get](1).colorValue, rgb[$_get](2).colorValue)});
      }
      if (color[$toLowerCase]()[$startsWith]("url(#")) {
        let gradient = dart.nullCheck(painter.parser.findById(color[$substring](5, color[$indexOf](")"))));
        if (gradient.name.local === "linearGradient") {
          return gradient$.SvgLinearGradient.fromXml(gradient, painter);
        }
        if (gradient.name.local === "radialGradient") {
          return gradient$.SvgRadialGradient.fromXml(gradient, painter);
        }
        return color$0.SvgColor.unknown;
      }
      try {
        return new color$0.SvgColor.new({color: color$.PdfColor.fromHex(color)});
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          core.print("Unknown color: " + dart.str(color));
          return color$0.SvgColor.unknown;
        } else
          throw e$;
      }
    }
    static ['_#fromXml#tearOff'](color, painter) {
      return color$0.SvgColor.fromXml(color, painter);
    }
    get isEmpty() {
      return this.color == null;
    }
    get isNotEmpty() {
      return !this.isEmpty;
    }
    merge(other) {
      let t46;
      return new color$0.SvgColor.new({color: (t46 = other.color, t46 == null ? this.color : t46)});
    }
    setFillColor(op, canvas) {
      if (this.isEmpty) {
        return;
      }
      canvas.setFillColor(this.color);
    }
    setStrokeColor(op, canvas) {
      if (this.isEmpty) {
        return;
      }
      canvas.setStrokeColor(this.color);
    }
    toString() {
      return dart.str(this[$runtimeType]) + " color: " + dart.str(this.color) + " inherit:" + dart.str(this.inherit) + " isEmpty: " + dart.str(this.isEmpty);
    }
  };
  (color$0.SvgColor.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let opacity = opts && 'opacity' in opts ? opts.opacity : null;
    let inherit = opts && 'inherit' in opts ? opts.inherit : false;
    this[color$7] = color;
    this[opacity$] = opacity;
    this[inherit$] = inherit;
    ;
  }).prototype = color$0.SvgColor.prototype;
  dart.addTypeTests(color$0.SvgColor);
  dart.addTypeCaches(color$0.SvgColor);
  dart.setMethodSignature(color$0.SvgColor, () => ({
    __proto__: dart.getMethods(color$0.SvgColor.__proto__),
    merge: dart.fnType(color$0.SvgColor, [color$0.SvgColor]),
    setFillColor: dart.fnType(dart.void, [operation.SvgOperation, graphics.PdfGraphics]),
    setStrokeColor: dart.fnType(dart.void, [operation.SvgOperation, graphics.PdfGraphics])
  }));
  dart.setStaticMethodSignature(color$0.SvgColor, () => ['fromXml']);
  dart.setGetterSignature(color$0.SvgColor, () => ({
    __proto__: dart.getGetters(color$0.SvgColor.__proto__),
    isEmpty: core.bool,
    isNotEmpty: core.bool
  }));
  dart.setLibraryUri(color$0.SvgColor, I[54]);
  dart.setFieldSignature(color$0.SvgColor, () => ({
    __proto__: dart.getFields(color$0.SvgColor.__proto__),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    opacity: dart.finalFieldType(dart.nullable(core.double)),
    inherit: dart.finalFieldType(core.bool)
  }));
  dart.setStaticFieldSignature(color$0.SvgColor, () => ['unknown', 'defaultColor', 'none', 'inherited']);
  dart.defineExtensionMethods(color$0.SvgColor, ['toString']);
  dart.defineLazy(color$0.SvgColor, {
    /*color$0.SvgColor.unknown*/get unknown() {
      return C[125] || CT.C125;
    },
    /*color$0.SvgColor.defaultColor*/get defaultColor() {
      return C[126] || CT.C126;
    },
    /*color$0.SvgColor.none*/get none() {
      return C[125] || CT.C125;
    },
    /*color$0.SvgColor.inherited*/get inherited() {
      return C[127] || CT.C127;
    }
  }, false);
  gradient$.SvgGradient = class SvgGradient extends color$0.SvgColor {
    get gradientUnits() {
      return this[gradientUnits$];
    }
    set gradientUnits(value) {
      super.gradientUnits = value;
    }
    get transform() {
      return this[transform$2];
    }
    set transform(value) {
      super.transform = value;
    }
    get colors() {
      return this[colors$0];
    }
    set colors(value) {
      super.colors = value;
    }
    get stops() {
      return this[stops$];
    }
    set stops(value) {
      super.stops = value;
    }
    get opacityList() {
      return this[opacityList$];
    }
    set opacityList(value) {
      super.opacityList = value;
    }
    get isEmpty() {
      return this.colors[$isEmpty];
    }
    setFillColor(op, canvas) {
      if (this.isEmpty) {
        return;
      }
      canvas.setFillPattern(this.buildGradient(op, canvas, this.colors));
      if (this.opacityList[$any](dart.fn(o => o < 1, T$.doubleTobool()))) {
        let mask = new smask.PdfSoftMask.new(op.painter.document, {boundingBox: op.painter.boundingBox});
        canvas.setGraphicState(new graphic_state.PdfGraphicState.new({softMask: mask}));
        let maskCanvas = dart.nullCheck(mask.getGraphics());
        maskCanvas.drawBox(op.boundingBox());
        maskCanvas.setFillPattern(this.buildGradient(op, maskCanvas, this.opacityList[$map](color$.PdfColor, dart.fn(o => new color$.PdfColor.new(o, o, o), T$.doubleToPdfColor()))[$toList]()));
        maskCanvas.fillPath();
        canvas.setFillPattern(this.buildGradient(op, canvas, this.colors));
      }
    }
    setStrokeColor(op, canvas) {
      if (this.isEmpty) {
        return;
      }
      canvas.setStrokePattern(this.buildGradient(op, canvas, this.colors));
    }
  };
  (gradient$.SvgGradient.new = function(gradientUnits, transform, colors, stops, opacityList) {
    this[gradientUnits$] = gradientUnits;
    this[transform$2] = transform;
    this[colors$0] = colors;
    this[stops$] = stops;
    this[opacityList$] = opacityList;
    if (!(colors[$length] === stops[$length])) dart.assertFailed(null, I[53], 38, 16, "colors.length == stops.length");
    if (!(stops[$length] === opacityList[$length])) dart.assertFailed(null, I[53], 39, 16, "stops.length == opacityList.length");
    gradient$.SvgGradient.__proto__.new.call(this);
    ;
  }).prototype = gradient$.SvgGradient.prototype;
  dart.addTypeTests(gradient$.SvgGradient);
  dart.addTypeCaches(gradient$.SvgGradient);
  dart.setLibraryUri(gradient$.SvgGradient, I[52]);
  dart.setFieldSignature(gradient$.SvgGradient, () => ({
    __proto__: dart.getFields(gradient$.SvgGradient.__proto__),
    gradientUnits: dart.finalFieldType(dart.nullable(gradient$.GradientUnits)),
    transform: dart.finalFieldType(transform$.SvgTransform),
    colors: dart.finalFieldType(core.List$(dart.nullable(color$.PdfColor))),
    stops: dart.finalFieldType(core.List$(core.double)),
    opacityList: dart.finalFieldType(core.List$(core.double))
  }));
  var x1$ = dart.privateName(gradient$, "SvgLinearGradient.x1");
  var y1$ = dart.privateName(gradient$, "SvgLinearGradient.y1");
  var x2$ = dart.privateName(gradient$, "SvgLinearGradient.x2");
  var y2$ = dart.privateName(gradient$, "SvgLinearGradient.y2");
  gradient$.SvgLinearGradient = class SvgLinearGradient extends gradient$.SvgGradient {
    get x1() {
      return this[x1$];
    }
    set x1(value) {
      super.x1 = value;
    }
    get y1() {
      return this[y1$];
    }
    set y1(value) {
      super.y1 = value;
    }
    get x2() {
      return this[x2$];
    }
    set x2(value) {
      super.x2 = value;
    }
    get y2() {
      return this[y2$];
    }
    set y2(value) {
      super.y2 = value;
    }
    static ['_#new#tearOff'](gradientUnits, x1, y1, x2, y2, transform, colors, stops, opacityList) {
      return new gradient$.SvgLinearGradient.new(gradientUnits, x1, y1, x2, y2, transform, colors, stops, opacityList);
    }
    static fromXml(element, painter) {
      let t46, t46$, t46$0, t46$1, t46$2, t46$3;
      let x1 = (t46 = parser$.SvgParser.getNumeric(element, "x1", null), t46 == null ? null : t46.sizeValue);
      let y1 = (t46$ = parser$.SvgParser.getNumeric(element, "y1", null), t46$ == null ? null : t46$.sizeValue);
      let x2 = (t46$0 = parser$.SvgParser.getNumeric(element, "x2", null), t46$0 == null ? null : t46$0.sizeValue);
      let y2 = (t46$1 = parser$.SvgParser.getNumeric(element, "y2", null), t46$1 == null ? null : t46$1.sizeValue);
      let colors = T$.JSArrayOfPdfColorN().of([]);
      let stops = T$.JSArrayOfdouble().of([]);
      let opacityList = T$.JSArrayOfdouble().of([]);
      for (let child of element.children.whereType(element$.XmlElement)[$where](dart.fn(e => e.name.local === "stop", T$.XmlElementTobool()))) {
        parser$.SvgParser.convertStyle(child);
        let color = color$0.SvgColor.fromXml((t46$2 = child.getAttribute("stop-color"), t46$2 == null ? "black" : t46$2), painter);
        let opacity = dart.nullCheck(parser$.SvgParser.getDouble(child, "stop-opacity", {defaultValue: 1.0}));
        let stop = dart.nullCheck(parser$.SvgParser.getNumeric(child, "offset", null, {defaultValue: 0.0})).sizeValue;
        colors[$add](color.color);
        stops[$add](stop);
        opacityList[$add](opacity);
      }
      let gradientUnits = null;
      switch (element.getAttribute("gradientUnits")) {
        case "userSpaceOnUse":
          {
            gradientUnits = gradient$.GradientUnits.userSpaceOnUse;
            break;
          }
        case "objectBoundingBox":
          {
            gradientUnits = gradient$.GradientUnits.objectBoundingBox;
            break;
          }
      }
      let result = new gradient$.SvgLinearGradient.new(gradientUnits, x1, y1, x2, y2, transform$.SvgTransform.fromString(element.getAttribute("gradientTransform")), colors, stops, opacityList);
      let href = null;
      let hrefAttr = (t46$3 = element.getAttribute("href"), t46$3 == null ? element.getAttribute("href", {namespace: "http://www.w3.org/1999/xlink"}) : t46$3);
      if (hrefAttr != null) {
        let hrefElement = painter.parser.findById(hrefAttr[$substring](1));
        if (hrefElement != null) {
          href = gradient$.SvgLinearGradient.fromXml(hrefElement, painter);
          return href.mergeWith(result);
        }
      }
      return result;
    }
    static ['_#fromXml#tearOff'](element, painter) {
      return gradient$.SvgLinearGradient.fromXml(element, painter);
    }
    mergeWith(other) {
      let t46, t46$, t46$0, t46$1, t46$2;
      return new gradient$.SvgLinearGradient.new((t46 = other.gradientUnits, t46 == null ? this.gradientUnits : t46), (t46$ = other.x1, t46$ == null ? this.x1 : t46$), (t46$0 = other.y1, t46$0 == null ? this.y1 : t46$0), (t46$1 = other.x2, t46$1 == null ? this.x2 : t46$1), (t46$2 = other.y2, t46$2 == null ? this.y2 : t46$2), other.transform.isNotEmpty ? other.transform : this.transform, other.colors[$isNotEmpty] ? other.colors : this.colors, other.stops[$isNotEmpty] ? other.stops : this.stops, other.opacityList[$isNotEmpty] ? other.opacityList : this.opacityList);
    }
    buildGradient(op, canvas, colors) {
      let t46, t46$, t46$0, t46$1, t46$2;
      let mat = canvas.getTransform();
      if (this.gradientUnits !== gradient$.GradientUnits.userSpaceOnUse) {
        let bb = op.boundingBox();
        t46 = mat;
        (() => {
          t46.translate(bb.x, bb.y);
          t46.scale(bb.width, bb.height);
          return t46;
        })();
      }
      if (this.transform.isNotEmpty) {
        mat.multiply(dart.nullCheck(this.transform.matrix));
      }
      return new pattern.PdfShadingPattern.new(op.painter.document, {shading: new shading.PdfShading.new(op.painter.document, {shadingType: shading.PdfShadingType.axial, function: $function.PdfBaseFunction.colorsAndStops(op.painter.document, colors, this.stops), start: new point$.PdfPoint.new((t46$ = this.x1, t46$ == null ? 0.0 : t46$), (t46$0 = this.y1, t46$0 == null ? 0.0 : t46$0)), end: new point$.PdfPoint.new((t46$1 = this.x2, t46$1 == null ? 1.0 : t46$1), (t46$2 = this.y2, t46$2 == null ? 0.0 : t46$2)), extendStart: true, extendEnd: true}), matrix: mat});
    }
    toString() {
      return dart.str(this[$runtimeType]) + " userSpace:" + dart.str(this.gradientUnits) + " x1:" + dart.str(this.x1) + " y1:" + dart.str(this.y1) + " x2:" + dart.str(this.x2) + " y2:" + dart.str(this.y2) + " colors:" + dart.str(this.colors) + " stops:" + dart.str(this.stops) + " opacityList:" + dart.str(this.opacityList);
    }
  };
  (gradient$.SvgLinearGradient.new = function(gradientUnits, x1, y1, x2, y2, transform, colors, stops, opacityList) {
    this[x1$] = x1;
    this[y1$] = y1;
    this[x2$] = x2;
    this[y2$] = y2;
    gradient$.SvgLinearGradient.__proto__.new.call(this, gradientUnits, transform, colors, stops, opacityList);
    ;
  }).prototype = gradient$.SvgLinearGradient.prototype;
  dart.addTypeTests(gradient$.SvgLinearGradient);
  dart.addTypeCaches(gradient$.SvgLinearGradient);
  dart.setMethodSignature(gradient$.SvgLinearGradient, () => ({
    __proto__: dart.getMethods(gradient$.SvgLinearGradient.__proto__),
    mergeWith: dart.fnType(gradient$.SvgLinearGradient, [gradient$.SvgLinearGradient]),
    buildGradient: dart.fnType(pattern.PdfPattern, [operation.SvgOperation, graphics.PdfGraphics, core.List$(dart.nullable(color$.PdfColor))])
  }));
  dart.setStaticMethodSignature(gradient$.SvgLinearGradient, () => ['fromXml']);
  dart.setLibraryUri(gradient$.SvgLinearGradient, I[52]);
  dart.setFieldSignature(gradient$.SvgLinearGradient, () => ({
    __proto__: dart.getFields(gradient$.SvgLinearGradient.__proto__),
    x1: dart.finalFieldType(dart.nullable(core.double)),
    y1: dart.finalFieldType(dart.nullable(core.double)),
    x2: dart.finalFieldType(dart.nullable(core.double)),
    y2: dart.finalFieldType(dart.nullable(core.double))
  }));
  dart.defineExtensionMethods(gradient$.SvgLinearGradient, ['toString']);
  var r$ = dart.privateName(gradient$, "SvgRadialGradient.r");
  var cx$ = dart.privateName(gradient$, "SvgRadialGradient.cx");
  var cy$ = dart.privateName(gradient$, "SvgRadialGradient.cy");
  var fr$ = dart.privateName(gradient$, "SvgRadialGradient.fr");
  var fx$ = dart.privateName(gradient$, "SvgRadialGradient.fx");
  var fy$ = dart.privateName(gradient$, "SvgRadialGradient.fy");
  gradient$.SvgRadialGradient = class SvgRadialGradient extends gradient$.SvgGradient {
    get r() {
      return this[r$];
    }
    set r(value) {
      super.r = value;
    }
    get cx() {
      return this[cx$];
    }
    set cx(value) {
      super.cx = value;
    }
    get cy() {
      return this[cy$];
    }
    set cy(value) {
      super.cy = value;
    }
    get fr() {
      return this[fr$];
    }
    set fr(value) {
      super.fr = value;
    }
    get fx() {
      return this[fx$];
    }
    set fx(value) {
      super.fx = value;
    }
    get fy() {
      return this[fy$];
    }
    set fy(value) {
      super.fy = value;
    }
    static ['_#new#tearOff'](gradientUnits, r, cx, cy, fr, fx, fy, transform, colors, stops, opacityList) {
      return new gradient$.SvgRadialGradient.new(gradientUnits, r, cx, cy, fr, fx, fy, transform, colors, stops, opacityList);
    }
    static fromXml(element, painter) {
      let t46, t46$;
      let r = dart.nullCheck(parser$.SvgParser.getNumeric(element, "r", null, {defaultValue: 0.5})).sizeValue;
      let cx = dart.nullCheck(parser$.SvgParser.getNumeric(element, "cx", null, {defaultValue: 0.5})).sizeValue;
      let cy = dart.nullCheck(parser$.SvgParser.getNumeric(element, "cy", null, {defaultValue: 0.5})).sizeValue;
      let fr = dart.nullCheck(parser$.SvgParser.getNumeric(element, "fr", null, {defaultValue: 0.0})).sizeValue;
      let fx = dart.nullCheck(parser$.SvgParser.getNumeric(element, "fx", null, {defaultValue: cx})).sizeValue;
      let fy = dart.nullCheck(parser$.SvgParser.getNumeric(element, "fy", null, {defaultValue: cy})).sizeValue;
      let colors = T$.JSArrayOfPdfColorN().of([]);
      let stops = T$.JSArrayOfdouble().of([]);
      let opacityList = T$.JSArrayOfdouble().of([]);
      for (let child of element.children.whereType(element$.XmlElement)[$where](dart.fn(e => e.name.local === "stop", T$.XmlElementTobool()))) {
        parser$.SvgParser.convertStyle(child);
        let color = color$0.SvgColor.fromXml((t46 = child.getAttribute("stop-color"), t46 == null ? "black" : t46), painter);
        let opacity = parser$.SvgParser.getDouble(child, "stop-opacity", {defaultValue: 1.0});
        let stop = dart.nullCheck(parser$.SvgParser.getNumeric(child, "offset", null, {defaultValue: 0.0})).sizeValue;
        colors[$add](color.color);
        stops[$add](stop);
        opacityList[$add](dart.nullCheck(opacity));
      }
      let gradientUnits = null;
      switch (element.getAttribute("gradientUnits")) {
        case "userSpaceOnUse":
          {
            gradientUnits = gradient$.GradientUnits.userSpaceOnUse;
            break;
          }
        case "objectBoundingBox":
          {
            gradientUnits = gradient$.GradientUnits.objectBoundingBox;
            break;
          }
      }
      let result = new gradient$.SvgRadialGradient.new(gradientUnits, r, cx, cy, fr, fx, fy, transform$.SvgTransform.fromString(element.getAttribute("gradientTransform")), colors, stops, opacityList);
      let href = null;
      let hrefAttr = (t46$ = element.getAttribute("href"), t46$ == null ? element.getAttribute("href", {namespace: "http://www.w3.org/1999/xlink"}) : t46$);
      if (hrefAttr != null) {
        let hrefElement = painter.parser.findById(hrefAttr[$substring](1));
        if (hrefElement != null) {
          href = gradient$.SvgRadialGradient.fromXml(hrefElement, painter);
          return href.mergeWith(result);
        }
      }
      return result;
    }
    static ['_#fromXml#tearOff'](element, painter) {
      return gradient$.SvgRadialGradient.fromXml(element, painter);
    }
    mergeWith(other) {
      let t46, t46$, t46$0, t46$1, t46$2, t46$3, t46$4;
      return new gradient$.SvgRadialGradient.new((t46 = other.gradientUnits, t46 == null ? this.gradientUnits : t46), (t46$ = other.r, t46$ == null ? this.r : t46$), (t46$0 = other.cx, t46$0 == null ? this.cx : t46$0), (t46$1 = other.cy, t46$1 == null ? this.cy : t46$1), (t46$2 = other.fr, t46$2 == null ? this.fr : t46$2), (t46$3 = other.fx, t46$3 == null ? this.fx : t46$3), (t46$4 = other.fy, t46$4 == null ? this.fy : t46$4), other.transform.isNotEmpty ? other.transform : this.transform, other.colors[$isNotEmpty] ? other.colors : this.colors, other.stops[$isNotEmpty] ? other.stops : this.stops, other.opacityList[$isNotEmpty] ? other.opacityList : this.opacityList);
    }
    buildGradient(op, canvas, colors) {
      let t46, t46$, t46$0, t46$1, t46$2, t46$3, t46$4, t46$5, t46$6;
      let mat = canvas.getTransform();
      if (this.gradientUnits !== gradient$.GradientUnits.userSpaceOnUse) {
        let bb = op.boundingBox();
        t46 = mat;
        (() => {
          t46.translate(bb.x, bb.y);
          t46.scale(bb.width, bb.height);
          return t46;
        })();
      }
      if (this.transform.isNotEmpty) {
        mat.multiply(dart.nullCheck(this.transform.matrix));
      }
      return new pattern.PdfShadingPattern.new(op.painter.document, {shading: new shading.PdfShading.new(op.painter.document, {shadingType: shading.PdfShadingType.radial, function: $function.PdfBaseFunction.colorsAndStops(op.painter.document, colors, this.stops), start: new point$.PdfPoint.new((t46$0 = (t46$ = this.fx, t46$ == null ? this.cx : t46$), t46$0 == null ? 0.5 : t46$0), (t46$2 = (t46$1 = this.fy, t46$1 == null ? this.cy : t46$1), t46$2 == null ? 0.5 : t46$2)), end: new point$.PdfPoint.new((t46$3 = this.cx, t46$3 == null ? 0.5 : t46$3), (t46$4 = this.cy, t46$4 == null ? 0.5 : t46$4)), radius0: (t46$5 = this.fr, t46$5 == null ? 0.0 : t46$5), radius1: (t46$6 = this.r, t46$6 == null ? 0.5 : t46$6), extendStart: true, extendEnd: true}), matrix: mat});
    }
    toString() {
      return dart.str(this[$runtimeType]) + " userSpace:" + dart.str(this.gradientUnits) + " cx:" + dart.str(this.cx) + " cy:" + dart.str(this.cy) + " r:" + dart.str(this.r) + " fx:" + dart.str(this.fx) + " fy:" + dart.str(this.fy) + " fr:" + dart.str(this.fr) + " colors:" + dart.str(this.colors) + " stops:" + dart.str(this.stops) + " opacityList:" + dart.str(this.opacityList);
    }
  };
  (gradient$.SvgRadialGradient.new = function(gradientUnits, r, cx, cy, fr, fx, fy, transform, colors, stops, opacityList) {
    this[r$] = r;
    this[cx$] = cx;
    this[cy$] = cy;
    this[fr$] = fr;
    this[fx$] = fx;
    this[fy$] = fy;
    gradient$.SvgRadialGradient.__proto__.new.call(this, gradientUnits, transform, colors, stops, opacityList);
    ;
  }).prototype = gradient$.SvgRadialGradient.prototype;
  dart.addTypeTests(gradient$.SvgRadialGradient);
  dart.addTypeCaches(gradient$.SvgRadialGradient);
  dart.setMethodSignature(gradient$.SvgRadialGradient, () => ({
    __proto__: dart.getMethods(gradient$.SvgRadialGradient.__proto__),
    mergeWith: dart.fnType(gradient$.SvgRadialGradient, [gradient$.SvgRadialGradient]),
    buildGradient: dart.fnType(pattern.PdfPattern, [operation.SvgOperation, graphics.PdfGraphics, core.List$(dart.nullable(color$.PdfColor))])
  }));
  dart.setStaticMethodSignature(gradient$.SvgRadialGradient, () => ['fromXml']);
  dart.setLibraryUri(gradient$.SvgRadialGradient, I[52]);
  dart.setFieldSignature(gradient$.SvgRadialGradient, () => ({
    __proto__: dart.getFields(gradient$.SvgRadialGradient.__proto__),
    r: dart.finalFieldType(dart.nullable(core.double)),
    cx: dart.finalFieldType(dart.nullable(core.double)),
    cy: dart.finalFieldType(dart.nullable(core.double)),
    fr: dart.finalFieldType(dart.nullable(core.double)),
    fx: dart.finalFieldType(dart.nullable(core.double)),
    fy: dart.finalFieldType(dart.nullable(core.double))
  }));
  dart.defineExtensionMethods(gradient$.SvgRadialGradient, ['toString']);
  brush$.SvgTextAnchor = class SvgTextAnchor extends core._Enum {
    toString() {
      return "SvgTextAnchor." + this[_name];
    }
  };
  (brush$.SvgTextAnchor.new = function(index, name) {
    brush$.SvgTextAnchor.__proto__.new.call(this, index, name);
    ;
  }).prototype = brush$.SvgTextAnchor.prototype;
  dart.addTypeTests(brush$.SvgTextAnchor);
  dart.addTypeCaches(brush$.SvgTextAnchor);
  dart.setLibraryUri(brush$.SvgTextAnchor, I[55]);
  dart.setStaticFieldSignature(brush$.SvgTextAnchor, () => ['values', 'start', 'middle', 'end']);
  dart.defineExtensionMethods(brush$.SvgTextAnchor, ['toString']);
  dart.defineLazy(brush$.SvgTextAnchor, {
    /*brush$.SvgTextAnchor.values*/get values() {
      return C[128] || CT.C128;
    },
    /*brush$.SvgTextAnchor.start*/get start() {
      return C[107] || CT.C107;
    },
    /*brush$.SvgTextAnchor.middle*/get middle() {
      return C[108] || CT.C108;
    },
    /*brush$.SvgTextAnchor.end*/get end() {
      return C[109] || CT.C109;
    }
  }, false);
  var opacity$0 = dart.privateName(brush$, "SvgBrush.opacity");
  var fill$ = dart.privateName(brush$, "SvgBrush.fill");
  var fillEvenOdd$ = dart.privateName(brush$, "SvgBrush.fillEvenOdd");
  var fillOpacity$ = dart.privateName(brush$, "SvgBrush.fillOpacity");
  var stroke$ = dart.privateName(brush$, "SvgBrush.stroke");
  var strokeOpacity$ = dart.privateName(brush$, "SvgBrush.strokeOpacity");
  var strokeWidth$4 = dart.privateName(brush$, "SvgBrush.strokeWidth");
  var strokeDashArray$ = dart.privateName(brush$, "SvgBrush.strokeDashArray");
  var strokeDashOffset$ = dart.privateName(brush$, "SvgBrush.strokeDashOffset");
  var strokeLineCap$ = dart.privateName(brush$, "SvgBrush.strokeLineCap");
  var strokeLineJoin$ = dart.privateName(brush$, "SvgBrush.strokeLineJoin");
  var strokeMiterLimit$ = dart.privateName(brush$, "SvgBrush.strokeMiterLimit");
  var fontSize$ = dart.privateName(brush$, "SvgBrush.fontSize");
  var fontFamily$ = dart.privateName(brush$, "SvgBrush.fontFamily");
  var fontStyle$ = dart.privateName(brush$, "SvgBrush.fontStyle");
  var fontWeight$ = dart.privateName(brush$, "SvgBrush.fontWeight");
  var textAnchor$ = dart.privateName(brush$, "SvgBrush.textAnchor");
  var blendMode$ = dart.privateName(brush$, "SvgBrush.blendMode");
  var mask$ = dart.privateName(brush$, "SvgBrush.mask");
  brush$.SvgBrush = class SvgBrush extends core.Object {
    get opacity() {
      return this[opacity$0];
    }
    set opacity(value) {
      super.opacity = value;
    }
    get fill() {
      return this[fill$];
    }
    set fill(value) {
      super.fill = value;
    }
    get fillEvenOdd() {
      return this[fillEvenOdd$];
    }
    set fillEvenOdd(value) {
      super.fillEvenOdd = value;
    }
    get fillOpacity() {
      return this[fillOpacity$];
    }
    set fillOpacity(value) {
      super.fillOpacity = value;
    }
    get stroke() {
      return this[stroke$];
    }
    set stroke(value) {
      super.stroke = value;
    }
    get strokeOpacity() {
      return this[strokeOpacity$];
    }
    set strokeOpacity(value) {
      super.strokeOpacity = value;
    }
    get strokeWidth() {
      return this[strokeWidth$4];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    get strokeDashArray() {
      return this[strokeDashArray$];
    }
    set strokeDashArray(value) {
      super.strokeDashArray = value;
    }
    get strokeDashOffset() {
      return this[strokeDashOffset$];
    }
    set strokeDashOffset(value) {
      super.strokeDashOffset = value;
    }
    get strokeLineCap() {
      return this[strokeLineCap$];
    }
    set strokeLineCap(value) {
      super.strokeLineCap = value;
    }
    get strokeLineJoin() {
      return this[strokeLineJoin$];
    }
    set strokeLineJoin(value) {
      super.strokeLineJoin = value;
    }
    get strokeMiterLimit() {
      return this[strokeMiterLimit$];
    }
    set strokeMiterLimit(value) {
      super.strokeMiterLimit = value;
    }
    get fontSize() {
      return this[fontSize$];
    }
    set fontSize(value) {
      super.fontSize = value;
    }
    get fontFamily() {
      return this[fontFamily$];
    }
    set fontFamily(value) {
      super.fontFamily = value;
    }
    get fontStyle() {
      return this[fontStyle$];
    }
    set fontStyle(value) {
      super.fontStyle = value;
    }
    get fontWeight() {
      return this[fontWeight$];
    }
    set fontWeight(value) {
      super.fontWeight = value;
    }
    get textAnchor() {
      return this[textAnchor$];
    }
    set textAnchor(value) {
      super.textAnchor = value;
    }
    get blendMode() {
      return this[blendMode$];
    }
    set blendMode(value) {
      super.blendMode = value;
    }
    get mask() {
      return this[mask$];
    }
    set mask(value) {
      super.mask = value;
    }
    static ['_#new#tearOff'](opts) {
      let opacity = opts && 'opacity' in opts ? opts.opacity : null;
      let fill = opts && 'fill' in opts ? opts.fill : null;
      let fillEvenOdd = opts && 'fillEvenOdd' in opts ? opts.fillEvenOdd : null;
      let fillOpacity = opts && 'fillOpacity' in opts ? opts.fillOpacity : null;
      let stroke = opts && 'stroke' in opts ? opts.stroke : null;
      let strokeOpacity = opts && 'strokeOpacity' in opts ? opts.strokeOpacity : null;
      let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
      let strokeDashArray = opts && 'strokeDashArray' in opts ? opts.strokeDashArray : null;
      let strokeDashOffset = opts && 'strokeDashOffset' in opts ? opts.strokeDashOffset : null;
      let strokeLineCap = opts && 'strokeLineCap' in opts ? opts.strokeLineCap : null;
      let strokeLineJoin = opts && 'strokeLineJoin' in opts ? opts.strokeLineJoin : null;
      let strokeMiterLimit = opts && 'strokeMiterLimit' in opts ? opts.strokeMiterLimit : null;
      let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let textAnchor = opts && 'textAnchor' in opts ? opts.textAnchor : null;
      let blendMode = opts && 'blendMode' in opts ? opts.blendMode : null;
      let mask = opts && 'mask' in opts ? opts.mask : null;
      return new brush$.SvgBrush.new({opacity: opacity, fill: fill, fillEvenOdd: fillEvenOdd, fillOpacity: fillOpacity, stroke: stroke, strokeOpacity: strokeOpacity, strokeWidth: strokeWidth, strokeDashArray: strokeDashArray, strokeDashOffset: strokeDashOffset, strokeLineCap: strokeLineCap, strokeLineJoin: strokeLineJoin, strokeMiterLimit: strokeMiterLimit, fontFamily: fontFamily, fontSize: fontSize, fontStyle: fontStyle, fontWeight: fontWeight, textAnchor: textAnchor, blendMode: blendMode, mask: mask});
    }
    static fromXml(element, parent, painter) {
      let t48;
      parser$.SvgParser.convertStyle(element);
      let strokeDashArray = element.getAttribute("stroke-dasharray");
      let fillRule = element.getAttribute("fill-rule");
      let strokeLineCap = element.getAttribute("stroke-linecap");
      let strokeLineJoin = element.getAttribute("stroke-linejoin");
      let blendMode = element.getAttribute("mix-blend-mode");
      let result = parent.merge(new brush$.SvgBrush.new({opacity: parser$.SvgParser.getDouble(element, "opacity", {defaultValue: null}), blendMode: blendMode == null ? null : brush$.SvgBrush._blendModes[$_get](blendMode), fillOpacity: parser$.SvgParser.getDouble(element, "fill-opacity", {defaultValue: null}), strokeOpacity: parser$.SvgParser.getDouble(element, "stroke-opacity", {defaultValue: null}), strokeLineCap: strokeLineCap == null ? null : brush$.SvgBrush._strokeLineCap[$_get](strokeLineCap), strokeLineJoin: strokeLineJoin == null ? null : brush$.SvgBrush._strokeLineJoin[$_get](strokeLineJoin), strokeMiterLimit: parser$.SvgParser.getDouble(element, "stroke-miterlimit", {defaultValue: null}), fill: color$0.SvgColor.fromXml(element.getAttribute("fill"), painter), fillEvenOdd: fillRule == null ? null : fillRule === "evenodd", stroke: color$0.SvgColor.fromXml(element.getAttribute("stroke"), painter), strokeWidth: parser$.SvgParser.getNumeric(element, "stroke-width", parent), strokeDashArray: strokeDashArray == null ? null : strokeDashArray === "none" ? T$.JSArrayOfdouble().of([]) : parser$.SvgParser.splitNumeric(strokeDashArray, parent)[$map](core.double, dart.fn(e => e.value, T$.SvgNumericTodouble()))[$toList](), strokeDashOffset: (t48 = parser$.SvgParser.getNumeric(element, "stroke-dashoffset", parent), t48 == null ? null : t48.sizeValue), fontSize: parser$.SvgParser.getNumeric(element, "font-size", parent), fontFamily: element.getAttribute("font-family"), fontStyle: element.getAttribute("font-style"), fontWeight: element.getAttribute("font-weight"), textAnchor: brush$.SvgBrush._textAnchors[$_get](element.getAttribute("text-anchor"))}));
      let mask = mask_path.SvgMaskPath.fromXml(element, painter, result);
      if (mask != null) {
        return result.copyWith({mask: mask});
      }
      return result;
    }
    static ['_#fromXml#tearOff'](element, parent, painter) {
      return brush$.SvgBrush.fromXml(element, parent, painter);
    }
    merge(other) {
      let t48, t48$, t48$0, t48$1, t48$2, t48$3, t48$4, t48$5, t48$6, t48$7, t48$8, t48$9, t48$10, t48$11, t48$12, t48$13, t48$14, t48$15, t48$16, t48$17, t48$18;
      if (other == null) {
        return this;
      }
      let _fill = (t48 = other.fill, t48 == null ? this.fill : t48);
      if (dart.test((t48$0 = (t48$ = _fill, t48$ == null ? null : t48$.inherit), t48$0 == null ? false : t48$0))) {
        _fill = dart.nullCheck(this.fill).merge(dart.nullCheck(other.fill));
      }
      let _stroke = (t48$1 = other.stroke, t48$1 == null ? this.stroke : t48$1);
      if (dart.test((t48$3 = (t48$2 = _stroke, t48$2 == null ? null : t48$2.inherit), t48$3 == null ? false : t48$3))) {
        _stroke = dart.nullCheck(this.stroke).merge(dart.nullCheck(other.stroke));
      }
      return new brush$.SvgBrush.new({opacity: (t48$4 = other.opacity, t48$4 == null ? 1.0 : t48$4), blendMode: other.blendMode, fillOpacity: (t48$5 = other.fillOpacity, t48$5 == null ? this.fillOpacity : t48$5), strokeOpacity: (t48$6 = other.strokeOpacity, t48$6 == null ? this.strokeOpacity : t48$6), fill: _fill, fillEvenOdd: (t48$7 = other.fillEvenOdd, t48$7 == null ? this.fillEvenOdd : t48$7), stroke: _stroke, strokeWidth: (t48$8 = other.strokeWidth, t48$8 == null ? this.strokeWidth : t48$8), strokeDashArray: (t48$9 = other.strokeDashArray, t48$9 == null ? this.strokeDashArray : t48$9), strokeDashOffset: (t48$10 = other.strokeDashOffset, t48$10 == null ? this.strokeDashOffset : t48$10), fontSize: (t48$11 = other.fontSize, t48$11 == null ? this.fontSize : t48$11), fontFamily: (t48$12 = other.fontFamily, t48$12 == null ? this.fontFamily : t48$12), fontStyle: (t48$13 = other.fontStyle, t48$13 == null ? this.fontStyle : t48$13), fontWeight: (t48$14 = other.fontWeight, t48$14 == null ? this.fontWeight : t48$14), textAnchor: (t48$15 = other.textAnchor, t48$15 == null ? this.textAnchor : t48$15), strokeLineCap: (t48$16 = other.strokeLineCap, t48$16 == null ? this.strokeLineCap : t48$16), strokeLineJoin: (t48$17 = other.strokeLineJoin, t48$17 == null ? this.strokeLineJoin : t48$17), strokeMiterLimit: (t48$18 = other.strokeMiterLimit, t48$18 == null ? this.strokeMiterLimit : t48$18), mask: other.mask});
    }
    copyWith(opts) {
      let t48, t48$, t48$0, t48$1, t48$2, t48$3, t48$4, t48$5, t48$6, t48$7, t48$8, t48$9, t48$10, t48$11, t48$12, t48$13, t48$14, t48$15, t48$16;
      let opacity = opts && 'opacity' in opts ? opts.opacity : null;
      let fill = opts && 'fill' in opts ? opts.fill : null;
      let fillEvenOdd = opts && 'fillEvenOdd' in opts ? opts.fillEvenOdd : null;
      let fillOpacity = opts && 'fillOpacity' in opts ? opts.fillOpacity : null;
      let stroke = opts && 'stroke' in opts ? opts.stroke : null;
      let strokeOpacity = opts && 'strokeOpacity' in opts ? opts.strokeOpacity : null;
      let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
      let strokeDashArray = opts && 'strokeDashArray' in opts ? opts.strokeDashArray : null;
      let strokeDashOffset = opts && 'strokeDashOffset' in opts ? opts.strokeDashOffset : null;
      let strokeLineCap = opts && 'strokeLineCap' in opts ? opts.strokeLineCap : null;
      let strokeLineJoin = opts && 'strokeLineJoin' in opts ? opts.strokeLineJoin : null;
      let strokeMiterLimit = opts && 'strokeMiterLimit' in opts ? opts.strokeMiterLimit : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let textAnchor = opts && 'textAnchor' in opts ? opts.textAnchor : null;
      let blendMode = opts && 'blendMode' in opts ? opts.blendMode : null;
      let mask = opts && 'mask' in opts ? opts.mask : null;
      return new brush$.SvgBrush.new({opacity: (t48 = opacity, t48 == null ? this.opacity : t48), fill: (t48$ = fill, t48$ == null ? this.fill : t48$), fillEvenOdd: (t48$0 = fillEvenOdd, t48$0 == null ? this.fillEvenOdd : t48$0), fillOpacity: (t48$1 = fillOpacity, t48$1 == null ? this.fillOpacity : t48$1), stroke: (t48$2 = stroke, t48$2 == null ? this.stroke : t48$2), strokeOpacity: (t48$3 = strokeOpacity, t48$3 == null ? this.strokeOpacity : t48$3), strokeWidth: (t48$4 = strokeWidth, t48$4 == null ? this.strokeWidth : t48$4), strokeDashArray: (t48$5 = strokeDashArray, t48$5 == null ? this.strokeDashArray : t48$5), strokeDashOffset: (t48$6 = strokeDashOffset, t48$6 == null ? this.strokeDashOffset : t48$6), strokeLineCap: (t48$7 = strokeLineCap, t48$7 == null ? this.strokeLineCap : t48$7), strokeLineJoin: (t48$8 = strokeLineJoin, t48$8 == null ? this.strokeLineJoin : t48$8), strokeMiterLimit: (t48$9 = strokeMiterLimit, t48$9 == null ? this.strokeMiterLimit : t48$9), fontSize: (t48$10 = fontSize, t48$10 == null ? this.fontSize : t48$10), fontFamily: (t48$11 = fontFamily, t48$11 == null ? this.fontFamily : t48$11), fontStyle: (t48$12 = fontStyle, t48$12 == null ? this.fontStyle : t48$12), fontWeight: (t48$13 = fontWeight, t48$13 == null ? this.fontWeight : t48$13), textAnchor: (t48$14 = textAnchor, t48$14 == null ? this.textAnchor : t48$14), blendMode: (t48$15 = blendMode, t48$15 == null ? this.blendMode : t48$15), mask: (t48$16 = mask, t48$16 == null ? this.mask : t48$16)});
    }
    toString() {
      return dart.str(this[$runtimeType]) + " fill: " + dart.str(this.fill) + " fillEvenOdd: " + dart.str(this.fillEvenOdd) + " stroke:" + dart.str(this.stroke) + " strokeWidth:" + dart.str(this.strokeWidth) + " strokeDashArray:" + dart.str(this.strokeDashArray) + " fontSize:" + dart.str(this.fontSize) + " fontFamily:" + dart.str(this.fontFamily) + " textAnchor:" + dart.str(this.textAnchor) + " ";
    }
  };
  (brush$.SvgBrush.new = function(opts) {
    let opacity = opts && 'opacity' in opts ? opts.opacity : null;
    let fill = opts && 'fill' in opts ? opts.fill : null;
    let fillEvenOdd = opts && 'fillEvenOdd' in opts ? opts.fillEvenOdd : null;
    let fillOpacity = opts && 'fillOpacity' in opts ? opts.fillOpacity : null;
    let stroke = opts && 'stroke' in opts ? opts.stroke : null;
    let strokeOpacity = opts && 'strokeOpacity' in opts ? opts.strokeOpacity : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
    let strokeDashArray = opts && 'strokeDashArray' in opts ? opts.strokeDashArray : null;
    let strokeDashOffset = opts && 'strokeDashOffset' in opts ? opts.strokeDashOffset : null;
    let strokeLineCap = opts && 'strokeLineCap' in opts ? opts.strokeLineCap : null;
    let strokeLineJoin = opts && 'strokeLineJoin' in opts ? opts.strokeLineJoin : null;
    let strokeMiterLimit = opts && 'strokeMiterLimit' in opts ? opts.strokeMiterLimit : null;
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    let textAnchor = opts && 'textAnchor' in opts ? opts.textAnchor : null;
    let blendMode = opts && 'blendMode' in opts ? opts.blendMode : null;
    let mask = opts && 'mask' in opts ? opts.mask : null;
    this[opacity$0] = opacity;
    this[fill$] = fill;
    this[fillEvenOdd$] = fillEvenOdd;
    this[fillOpacity$] = fillOpacity;
    this[stroke$] = stroke;
    this[strokeOpacity$] = strokeOpacity;
    this[strokeWidth$4] = strokeWidth;
    this[strokeDashArray$] = strokeDashArray;
    this[strokeDashOffset$] = strokeDashOffset;
    this[strokeLineCap$] = strokeLineCap;
    this[strokeLineJoin$] = strokeLineJoin;
    this[strokeMiterLimit$] = strokeMiterLimit;
    this[fontFamily$] = fontFamily;
    this[fontSize$] = fontSize;
    this[fontStyle$] = fontStyle;
    this[fontWeight$] = fontWeight;
    this[textAnchor$] = textAnchor;
    this[blendMode$] = blendMode;
    this[mask$] = mask;
    ;
  }).prototype = brush$.SvgBrush.prototype;
  dart.addTypeTests(brush$.SvgBrush);
  dart.addTypeCaches(brush$.SvgBrush);
  dart.setMethodSignature(brush$.SvgBrush, () => ({
    __proto__: dart.getMethods(brush$.SvgBrush.__proto__),
    merge: dart.fnType(brush$.SvgBrush, [dart.nullable(brush$.SvgBrush)]),
    copyWith: dart.fnType(brush$.SvgBrush, [], {blendMode: dart.nullable(graphic_state.PdfBlendMode), fill: dart.nullable(color$0.SvgColor), fillEvenOdd: dart.nullable(core.bool), fillOpacity: dart.nullable(core.double), fontFamily: dart.nullable(core.String), fontSize: dart.nullable(parser$.SvgNumeric), fontStyle: dart.nullable(core.String), fontWeight: dart.nullable(core.String), mask: dart.nullable(mask_path.SvgMaskPath), opacity: dart.nullable(core.double), stroke: dart.nullable(color$0.SvgColor), strokeDashArray: dart.nullable(core.List$(core.double)), strokeDashOffset: dart.nullable(core.double), strokeLineCap: dart.nullable(graphics.PdfLineCap), strokeLineJoin: dart.nullable(graphics.PdfLineJoin), strokeMiterLimit: dart.nullable(core.double), strokeOpacity: dart.nullable(core.double), strokeWidth: dart.nullable(parser$.SvgNumeric), textAnchor: dart.nullable(brush$.SvgTextAnchor)}, {})
  }));
  dart.setStaticMethodSignature(brush$.SvgBrush, () => ['fromXml']);
  dart.setLibraryUri(brush$.SvgBrush, I[55]);
  dart.setFieldSignature(brush$.SvgBrush, () => ({
    __proto__: dart.getFields(brush$.SvgBrush.__proto__),
    opacity: dart.finalFieldType(dart.nullable(core.double)),
    fill: dart.finalFieldType(dart.nullable(color$0.SvgColor)),
    fillEvenOdd: dart.finalFieldType(dart.nullable(core.bool)),
    fillOpacity: dart.finalFieldType(dart.nullable(core.double)),
    stroke: dart.finalFieldType(dart.nullable(color$0.SvgColor)),
    strokeOpacity: dart.finalFieldType(dart.nullable(core.double)),
    strokeWidth: dart.finalFieldType(dart.nullable(parser$.SvgNumeric)),
    strokeDashArray: dart.finalFieldType(dart.nullable(core.List$(core.double))),
    strokeDashOffset: dart.finalFieldType(dart.nullable(core.double)),
    strokeLineCap: dart.finalFieldType(dart.nullable(graphics.PdfLineCap)),
    strokeLineJoin: dart.finalFieldType(dart.nullable(graphics.PdfLineJoin)),
    strokeMiterLimit: dart.finalFieldType(dart.nullable(core.double)),
    fontSize: dart.finalFieldType(dart.nullable(parser$.SvgNumeric)),
    fontFamily: dart.finalFieldType(dart.nullable(core.String)),
    fontStyle: dart.finalFieldType(dart.nullable(core.String)),
    fontWeight: dart.finalFieldType(dart.nullable(core.String)),
    textAnchor: dart.finalFieldType(dart.nullable(brush$.SvgTextAnchor)),
    blendMode: dart.finalFieldType(dart.nullable(graphic_state.PdfBlendMode)),
    mask: dart.finalFieldType(dart.nullable(mask_path.SvgMaskPath))
  }));
  dart.setStaticFieldSignature(brush$.SvgBrush, () => ['defaultContext', '_blendModes', '_strokeLineCap', '_strokeLineJoin', '_textAnchors']);
  dart.defineExtensionMethods(brush$.SvgBrush, ['toString']);
  dart.defineLazy(brush$.SvgBrush, {
    /*brush$.SvgBrush.defaultContext*/get defaultContext() {
      return C[129] || CT.C129;
    },
    /*brush$.SvgBrush._blendModes*/get _blendModes() {
      return C[135] || CT.C135;
    },
    /*brush$.SvgBrush._strokeLineCap*/get _strokeLineCap() {
      return C[150] || CT.C150;
    },
    /*brush$.SvgBrush._strokeLineJoin*/get _strokeLineJoin() {
      return C[153] || CT.C153;
    },
    /*brush$.SvgBrush._textAnchors*/get _textAnchors() {
      return C[156] || CT.C156;
    }
  }, false);
  var parser$0 = dart.privateName(painter$, "SvgPainter.parser");
  var document$1 = dart.privateName(painter$, "SvgPainter.document");
  var boundingBox$ = dart.privateName(painter$, "SvgPainter.boundingBox");
  var _fontCache = dart.privateName(painter$, "_fontCache");
  var _canvas$ = dart.privateName(painter$, "_canvas");
  painter$.SvgPainter = class SvgPainter extends core.Object {
    get parser() {
      return this[parser$0];
    }
    set parser(value) {
      super.parser = value;
    }
    get document() {
      return this[document$1];
    }
    set document(value) {
      super.document = value;
    }
    get boundingBox() {
      return this[boundingBox$];
    }
    set boundingBox(value) {
      super.boundingBox = value;
    }
    static ['_#new#tearOff'](parser, _canvas, document, boundingBox) {
      return new painter$.SvgPainter.new(parser, _canvas, document, boundingBox);
    }
    paint() {
      let brush = this.parser.colorFilter == null ? brush$.SvgBrush.defaultContext : brush$.SvgBrush.defaultContext.copyWith({fill: new color$0.SvgColor.new({color: this.parser.colorFilter})});
      group.SvgGroup.fromXml(this.parser.root, this, brush).paint(dart.nullCheck(this[_canvas$]));
    }
    getFontCache(fontFamily, fontStyle, fontWeight) {
      let cache = fontFamily + "-" + fontStyle + "-" + fontWeight;
      if (!this[_fontCache][$containsKey](cache)) {
        this[_fontCache][$_set](cache, this.getFont(fontFamily, fontStyle, fontWeight));
      }
      return this[_fontCache][$_get](cache);
    }
    getFont(fontFamily, fontStyle, fontWeight) {
      switch (fontFamily) {
        case "serif":
          {
            switch (fontStyle) {
              case "normal":
                {
                  switch (fontWeight) {
                    case "normal":
                    case "lighter":
                      {
                        return font$.Font.times();
                      }
                  }
                  return font$.Font.timesBold();
                }
            }
            switch (fontWeight) {
              case "normal":
              case "lighter":
                {
                  return font$.Font.timesItalic();
                }
            }
            return font$.Font.timesBoldItalic();
          }
        case "monospace":
          {
            switch (fontStyle) {
              case "normal":
                {
                  switch (fontWeight) {
                    case "normal":
                    case "lighter":
                      {
                        return font$.Font.courier();
                      }
                  }
                  return font$.Font.courierBold();
                }
            }
            switch (fontWeight) {
              case "normal":
              case "lighter":
                {
                  return font$.Font.courierOblique();
                }
            }
            return font$.Font.courierBoldOblique();
          }
      }
      switch (fontStyle) {
        case "normal":
          {
            switch (fontWeight) {
              case "normal":
              case "lighter":
                {
                  return font$.Font.helvetica();
                }
            }
            return font$.Font.helveticaBold();
          }
      }
      switch (fontWeight) {
        case "normal":
        case "lighter":
          {
            return font$.Font.helveticaOblique();
          }
      }
      return font$.Font.helveticaBoldOblique();
    }
  };
  (painter$.SvgPainter.new = function(parser, _canvas, document, boundingBox) {
    this[_fontCache] = new (T$.IdentityMapOfString$Font()).new();
    this[parser$0] = parser;
    this[_canvas$] = _canvas;
    this[document$1] = document;
    this[boundingBox$] = boundingBox;
    ;
  }).prototype = painter$.SvgPainter.prototype;
  dart.addTypeTests(painter$.SvgPainter);
  dart.addTypeCaches(painter$.SvgPainter);
  dart.setMethodSignature(painter$.SvgPainter, () => ({
    __proto__: dart.getMethods(painter$.SvgPainter.__proto__),
    paint: dart.fnType(dart.void, []),
    getFontCache: dart.fnType(dart.nullable(font$.Font), [core.String, core.String, core.String]),
    getFont: dart.fnType(font$.Font, [core.String, core.String, core.String])
  }));
  dart.setLibraryUri(painter$.SvgPainter, I[56]);
  dart.setFieldSignature(painter$.SvgPainter, () => ({
    __proto__: dart.getFields(painter$.SvgPainter.__proto__),
    parser: dart.finalFieldType(parser$.SvgParser),
    [_canvas$]: dart.finalFieldType(dart.nullable(graphics.PdfGraphics)),
    document: dart.finalFieldType(document.PdfDocument),
    boundingBox: dart.finalFieldType(rect$.PdfRect),
    [_fontCache]: dart.finalFieldType(core.Map$(core.String, font$.Font))
  }));
  var fit$1 = dart.privateName(svg$, "SvgImage.fit");
  var alignment$2 = dart.privateName(svg$, "SvgImage.alignment");
  var clip$0 = dart.privateName(svg$, "SvgImage.clip");
  var width$8 = dart.privateName(svg$, "SvgImage.width");
  var height$4 = dart.privateName(svg$, "SvgImage.height");
  var __SvgImage_sizes = dart.privateName(svg$, "_#SvgImage#sizes");
  var _svgParser$ = dart.privateName(svg$, "_svgParser");
  svg$.SvgImage = class SvgImage extends widget$.Widget {
    get fit() {
      return this[fit$1];
    }
    set fit(value) {
      super.fit = value;
    }
    get alignment() {
      return this[alignment$2];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get clip() {
      return this[clip$0];
    }
    set clip(value) {
      super.clip = value;
    }
    get width() {
      return this[width$8];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$4];
    }
    set height(value) {
      super.height = value;
    }
    static new(opts) {
      let svg = opts && 'svg' in opts ? opts.svg : null;
      let fit = opts && 'fit' in opts ? opts.fit : C[64] || CT.C64;
      let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
      let clip = opts && 'clip' in opts ? opts.clip : true;
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
      let xml = document$.XmlDocument.parse(svg);
      let parser = parser$.SvgParser.new({xml: xml, colorFilter: colorFilter});
      return new svg$.SvgImage._fromParser(parser, fit, alignment, clip, width, height);
    }
    static ['_#new#tearOff'](opts) {
      let svg = opts && 'svg' in opts ? opts.svg : null;
      let fit = opts && 'fit' in opts ? opts.fit : C[64] || CT.C64;
      let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
      let clip = opts && 'clip' in opts ? opts.clip : true;
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
      return svg$.SvgImage.new({svg: svg, fit: fit, alignment: alignment, clip: clip, width: width, height: height, colorFilter: colorFilter});
    }
    static ['_#_fromParser#tearOff'](_svgParser, fit, alignment, clip, width, height) {
      return new svg$.SvgImage._fromParser(_svgParser, fit, alignment, clip, width, height);
    }
    get sizes() {
      let t48;
      t48 = this[__SvgImage_sizes];
      return t48 == null ? dart.throw(new _internal.LateError.fieldNI("sizes")) : t48;
    }
    set sizes(sizes$35param) {
      this[__SvgImage_sizes] = sizes$35param;
    }
    layout(context, constraints, opts) {
      let t48, t48$;
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      let w = this.width != null || this[_svgParser$].width != null ? constraints.constrainWidth((t48 = this.width, t48 == null ? dart.nullCheck(this[_svgParser$].width) : t48)) : constraints.hasBoundedWidth ? constraints.maxWidth : constraints.constrainWidth(this[_svgParser$].viewBox.width);
      let h = this.height != null || this[_svgParser$].height != null ? constraints.constrainHeight((t48$ = this.height, t48$ == null ? dart.nullCheck(this[_svgParser$].height) : t48$)) : constraints.hasBoundedHeight ? constraints.maxHeight : constraints.constrainHeight(this[_svgParser$].viewBox.height);
      this.sizes = geometry.applyBoxFit(this.fit, this[_svgParser$].viewBox.size, new point$.PdfPoint.new(w, h));
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, dart.nullCheck(this.sizes.destination));
    }
    paint(context) {
      let t48, t48$;
      super.paint(context);
      let _alignment = new geometry.Alignment.new(this.alignment.x, -this.alignment.y);
      let sourceRect = _alignment.inscribe(dart.nullCheck(this.sizes.source), this[_svgParser$].viewBox);
      let sx = dart.nullCheck(this.sizes.destination).x / dart.nullCheck(this.sizes.source).x;
      let sy = dart.nullCheck(this.sizes.destination).y / dart.nullCheck(this.sizes.source).y;
      let dx = sourceRect.x * sx;
      let dy = sourceRect.y * sy;
      let mat = (t48 = vector_math_64.Matrix4.identity(), (() => {
        t48.translate(dart.nullCheck(this.box).x - dx, dart.nullCheck(this.box).y + dy + dart.nullCheck(this.box).height);
        t48.scale(sx, -sy);
        return t48;
      })());
      context.canvas.saveContext();
      if (this.clip) {
        t48$ = context.canvas;
        (() => {
          t48$.drawBox(dart.nullCheck(this.box));
          t48$.clipPath();
          return t48$;
        })();
      }
      context.canvas.setTransform(mat);
      let painter = new painter$.SvgPainter.new(this[_svgParser$], context.canvas, context.document, new rect$.PdfRect.new(0.0, 0.0, context.page.pageFormat.width, context.page.pageFormat.height));
      painter.paint();
      context.canvas.restoreContext();
    }
  };
  (svg$.SvgImage._fromParser = function(_svgParser, fit, alignment, clip, width, height) {
    this[__SvgImage_sizes] = null;
    this[_svgParser$] = _svgParser;
    this[fit$1] = fit;
    this[alignment$2] = alignment;
    this[clip$0] = clip;
    this[width$8] = width;
    this[height$4] = height;
    svg$.SvgImage.__proto__.new.call(this);
    ;
  }).prototype = svg$.SvgImage.prototype;
  dart.addTypeTests(svg$.SvgImage);
  dart.addTypeCaches(svg$.SvgImage);
  dart.setMethodSignature(svg$.SvgImage, () => ({
    __proto__: dart.getMethods(svg$.SvgImage.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setStaticMethodSignature(svg$.SvgImage, () => ['new']);
  dart.setGetterSignature(svg$.SvgImage, () => ({
    __proto__: dart.getGetters(svg$.SvgImage.__proto__),
    sizes: geometry.FittedSizes
  }));
  dart.setSetterSignature(svg$.SvgImage, () => ({
    __proto__: dart.getSetters(svg$.SvgImage.__proto__),
    sizes: geometry.FittedSizes
  }));
  dart.setLibraryUri(svg$.SvgImage, I[57]);
  dart.setFieldSignature(svg$.SvgImage, () => ({
    __proto__: dart.getFields(svg$.SvgImage.__proto__),
    [_svgParser$]: dart.finalFieldType(parser$.SvgParser),
    fit: dart.finalFieldType(basic.BoxFit),
    alignment: dart.finalFieldType(geometry.Alignment),
    clip: dart.finalFieldType(core.bool),
    width: dart.finalFieldType(dart.nullable(core.double)),
    height: dart.finalFieldType(dart.nullable(core.double)),
    [__SvgImage_sizes]: dart.fieldType(dart.nullable(geometry.FittedSizes))
  }));
  var svg$0 = dart.privateName(svg$, "DecorationSvgImage.svg");
  var fit$2 = dart.privateName(svg$, "DecorationSvgImage.fit");
  var alignment$3 = dart.privateName(svg$, "DecorationSvgImage.alignment");
  decoration$.DecorationGraphic = class DecorationGraphic extends core.Object {};
  (decoration$.DecorationGraphic.new = function() {
    ;
  }).prototype = decoration$.DecorationGraphic.prototype;
  dart.addTypeTests(decoration$.DecorationGraphic);
  dart.addTypeCaches(decoration$.DecorationGraphic);
  dart.setLibraryUri(decoration$.DecorationGraphic, I[58]);
  svg$.DecorationSvgImage = class DecorationSvgImage extends decoration$.DecorationGraphic {
    get svg() {
      return this[svg$0];
    }
    set svg(value) {
      super.svg = value;
    }
    get fit() {
      return this[fit$2];
    }
    set fit(value) {
      super.fit = value;
    }
    get alignment() {
      return this[alignment$3];
    }
    set alignment(value) {
      super.alignment = value;
    }
    static ['_#new#tearOff'](opts) {
      let svg = opts && 'svg' in opts ? opts.svg : null;
      let fit = opts && 'fit' in opts ? opts.fit : C[157] || CT.C157;
      let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
      return new svg$.DecorationSvgImage.new({svg: svg, fit: fit, alignment: alignment});
    }
    paint(context, box) {
      widget$.Widget.draw(svg$.SvgImage.new({svg: this.svg, fit: this.fit, alignment: this.alignment}), {offset: box.offset, context: context, constraints: new geometry.BoxConstraints.tight(box.size)});
    }
  };
  (svg$.DecorationSvgImage.new = function(opts) {
    let svg = opts && 'svg' in opts ? opts.svg : null;
    let fit = opts && 'fit' in opts ? opts.fit : C[157] || CT.C157;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
    this[svg$0] = svg;
    this[fit$2] = fit;
    this[alignment$3] = alignment;
    svg$.DecorationSvgImage.__proto__.new.call(this);
    ;
  }).prototype = svg$.DecorationSvgImage.prototype;
  dart.addTypeTests(svg$.DecorationSvgImage);
  dart.addTypeCaches(svg$.DecorationSvgImage);
  dart.setMethodSignature(svg$.DecorationSvgImage, () => ({
    __proto__: dart.getMethods(svg$.DecorationSvgImage.__proto__),
    paint: dart.fnType(dart.void, [widget$.Context, rect$.PdfRect])
  }));
  dart.setLibraryUri(svg$.DecorationSvgImage, I[57]);
  dart.setFieldSignature(svg$.DecorationSvgImage, () => ({
    __proto__: dart.getFields(svg$.DecorationSvgImage.__proto__),
    svg: dart.finalFieldType(core.String),
    fit: dart.finalFieldType(basic.BoxFit),
    alignment: dart.finalFieldType(geometry.Alignment)
  }));
  var color$8 = dart.privateName(placeholders, "Placeholder.color");
  var strokeWidth$5 = dart.privateName(placeholders, "Placeholder.strokeWidth");
  var fallbackWidth$ = dart.privateName(placeholders, "Placeholder.fallbackWidth");
  var fallbackHeight$ = dart.privateName(placeholders, "Placeholder.fallbackHeight");
  placeholders.Placeholder = class Placeholder extends widget$.Widget {
    get color() {
      return this[color$8];
    }
    set color(value) {
      super.color = value;
    }
    get strokeWidth() {
      return this[strokeWidth$5];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    get fallbackWidth() {
      return this[fallbackWidth$];
    }
    set fallbackWidth(value) {
      super.fallbackWidth = value;
    }
    get fallbackHeight() {
      return this[fallbackHeight$];
    }
    set fallbackHeight(value) {
      super.fallbackHeight = value;
    }
    static ['_#new#tearOff'](opts) {
      let color = opts && 'color' in opts ? opts.color : C[158] || CT.C158;
      let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 2;
      let fallbackWidth = opts && 'fallbackWidth' in opts ? opts.fallbackWidth : 400;
      let fallbackHeight = opts && 'fallbackHeight' in opts ? opts.fallbackHeight : 400;
      return new placeholders.Placeholder.new({color: color, strokeWidth: strokeWidth, fallbackWidth: fallbackWidth, fallbackHeight: fallbackHeight});
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this.box = new rect$.PdfRect.new(0.0, 0.0, constraints.constrainWidth(constraints.hasBoundedWidth ? constraints.maxWidth : this.fallbackWidth), constraints.constrainHeight(constraints.hasBoundedHeight ? constraints.maxHeight : this.fallbackHeight));
    }
    paint(context) {
      let t48;
      super.paint(context);
      t48 = context.canvas;
      (() => {
        t48.setStrokeColor(this.color);
        t48.moveTo(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
        t48.lineTo(dart.nullCheck(this.box).right, dart.nullCheck(this.box).top);
        t48.moveTo(dart.nullCheck(this.box).x, dart.nullCheck(this.box).top);
        t48.lineTo(dart.nullCheck(this.box).right, dart.nullCheck(this.box).y);
        t48.drawBox(dart.nullCheck(this.box));
        t48.setLineWidth(this.strokeWidth);
        t48.strokePath();
        return t48;
      })();
    }
  };
  (placeholders.Placeholder.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : C[158] || CT.C158;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 2;
    let fallbackWidth = opts && 'fallbackWidth' in opts ? opts.fallbackWidth : 400;
    let fallbackHeight = opts && 'fallbackHeight' in opts ? opts.fallbackHeight : 400;
    this[color$8] = color;
    this[strokeWidth$5] = strokeWidth;
    this[fallbackWidth$] = fallbackWidth;
    this[fallbackHeight$] = fallbackHeight;
    placeholders.Placeholder.__proto__.new.call(this);
    ;
  }).prototype = placeholders.Placeholder.prototype;
  dart.addTypeTests(placeholders.Placeholder);
  dart.addTypeCaches(placeholders.Placeholder);
  dart.setMethodSignature(placeholders.Placeholder, () => ({
    __proto__: dart.getMethods(placeholders.Placeholder.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setLibraryUri(placeholders.Placeholder, I[59]);
  dart.setFieldSignature(placeholders.Placeholder, () => ({
    __proto__: dart.getFields(placeholders.Placeholder.__proto__),
    color: dart.finalFieldType(color$.PdfColor),
    strokeWidth: dart.finalFieldType(core.double),
    fallbackWidth: dart.finalFieldType(core.double),
    fallbackHeight: dart.finalFieldType(core.double)
  }));
  var color$9 = dart.privateName(placeholders, "PdfLogo.color");
  var fit$3 = dart.privateName(placeholders, "PdfLogo.fit");
  placeholders.PdfLogo = class PdfLogo extends widget$.StatelessWidget {
    get color() {
      return this[color$9];
    }
    set color(value) {
      super.color = value;
    }
    get fit() {
      return this[fit$3];
    }
    set fit(value) {
      super.fit = value;
    }
    static ['_#new#tearOff'](opts) {
      let color = opts && 'color' in opts ? opts.color : C[38] || CT.C38;
      let fit = opts && 'fit' in opts ? opts.fit : C[64] || CT.C64;
      return new placeholders.PdfLogo.new({color: color, fit: fit});
    }
    build(context) {
      return new image$1.Shape.new(placeholders.PdfLogo.pdf, {width: 24.0, height: 27.0, fillColor: this.color, fit: this.fit});
    }
  };
  (placeholders.PdfLogo.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : C[38] || CT.C38;
    let fit = opts && 'fit' in opts ? opts.fit : C[64] || CT.C64;
    this[color$9] = color;
    this[fit$3] = fit;
    placeholders.PdfLogo.__proto__.new.call(this);
    ;
  }).prototype = placeholders.PdfLogo.prototype;
  dart.addTypeTests(placeholders.PdfLogo);
  dart.addTypeCaches(placeholders.PdfLogo);
  dart.setMethodSignature(placeholders.PdfLogo, () => ({
    __proto__: dart.getMethods(placeholders.PdfLogo.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(placeholders.PdfLogo, I[59]);
  dart.setFieldSignature(placeholders.PdfLogo, () => ({
    __proto__: dart.getFields(placeholders.PdfLogo.__proto__),
    color: dart.finalFieldType(color$.PdfColor),
    fit: dart.finalFieldType(basic.BoxFit)
  }));
  dart.setStaticFieldSignature(placeholders.PdfLogo, () => ['pdf']);
  dart.defineLazy(placeholders.PdfLogo, {
    /*placeholders.PdfLogo.pdf*/get pdf() {
      return "M 2.424 26.712 L 2.424 26.712 C 2.076 26.712 1.742 26.599 1.457 26.386 C 0.416 25.605 0.276 24.736 0.342 24.144 C 0.524 22.516 2.537 20.812 6.327 19.076 C 7.831 15.78 9.262 11.719 10.115 8.326 C 9.117 6.154 8.147 3.336 8.854 1.683 C 9.102 1.104 9.411 0.66 9.988 0.468 C 10.216 0.392 10.792 0.296 11.004 0.296 C 11.508 0.296 11.951 0.945 12.265 1.345 C 12.56 1.721 13.229 2.518 11.892 8.147 C 13.24 10.931 15.15 13.767 16.98 15.709 C 18.291 15.472 19.419 15.351 20.338 15.351 C 21.904 15.351 22.853 15.716 23.24 16.468 C 23.56 17.09 23.429 17.817 22.85 18.628 C 22.293 19.407 21.525 19.819 20.63 19.819 C 19.414 19.819 17.998 19.051 16.419 17.534 C 13.582 18.127 10.269 19.185 7.591 20.356 C 6.755 22.13 5.954 23.559 5.208 24.607 C 4.183 26.042 3.299 26.712 2.424 26.712 Z M 5.086 21.586 C 2.949 22.787 2.078 23.774 2.015 24.33 C 2.005 24.422 1.978 24.664 2.446 25.022 C 2.595 24.975 3.465 24.578 5.086 21.586 Z M 18.723 17.144 C 19.538 17.771 19.737 18.088 20.27 18.088 C 20.504 18.088 21.171 18.078 21.48 17.647 C 21.629 17.438 21.687 17.304 21.71 17.232 C 21.587 17.167 21.424 17.035 20.535 17.035 C 20.03 17.036 19.395 17.058 18.723 17.144 Z M 11.253 10.562 C 10.538 13.036 9.594 15.707 8.579 18.126 C 10.669 17.315 12.941 16.607 15.075 16.106 C 13.725 14.538 12.376 12.58 11.253 10.562 Z M 10.646 2.1 C 10.548 2.133 9.316 3.857 10.742 5.316 C 11.691 3.201 10.689 2.086 10.646 2.1 Z";
    }
  }, false);
  var fit$4 = dart.privateName(placeholders, "FlutterLogo.fit");
  placeholders.FlutterLogo = class FlutterLogo extends widget$.StatelessWidget {
    get fit() {
      return this[fit$4];
    }
    set fit(value) {
      super.fit = value;
    }
    static ['_#new#tearOff'](opts) {
      let fit = opts && 'fit' in opts ? opts.fit : C[64] || CT.C64;
      return new placeholders.FlutterLogo.new({fit: fit});
    }
    build(context) {
      return svg$.SvgImage.new({svg: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><svg version=\"1.1\" viewBox=\"0 0 256 317\" xmlns=\"http://www.w3.org/2000/svg\"><defs><linearGradient id=\"a\" x1=\"10%\" x2=\"67%\" y1=\"40%\" y2=\"35%\"><stop stop-color=\"#1a237e\" stop-opacity=\".4\" offset=\"0\"/><stop stop-color=\"#1a237e\" stop-opacity=\"0\" offset=\"1\"/></linearGradient></defs><polygon points=\"157.67 0 0 157.67 48.801 206.47 255.27 0\" fill=\"#54c5f8\"/><polygon points=\"156.57 145.4 72.149 229.82 121.13 279.53 169.84 230.82 255.27 145.4\" fill=\"#54c5f8\"/><polygon points=\"121.13 279.53 158.21 316.61 255.27 316.61 169.84 230.82\" fill=\"#01579b\"/><polygon points=\"71.6 230.36 120.4 181.56 169.84 230.82 121.13 279.53\" fill=\"#29b6f6\"/><polygon points=\"121.13 279.53 189.44 253.83 167.85 233.75\" fill=\"url(#a)\" fill-opacity=\".8\"/></svg>", fit: this.fit});
    }
  };
  (placeholders.FlutterLogo.new = function(opts) {
    let fit = opts && 'fit' in opts ? opts.fit : C[64] || CT.C64;
    this[fit$4] = fit;
    placeholders.FlutterLogo.__proto__.new.call(this);
    ;
  }).prototype = placeholders.FlutterLogo.prototype;
  dart.addTypeTests(placeholders.FlutterLogo);
  dart.addTypeCaches(placeholders.FlutterLogo);
  dart.setMethodSignature(placeholders.FlutterLogo, () => ({
    __proto__: dart.getMethods(placeholders.FlutterLogo.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(placeholders.FlutterLogo, I[59]);
  dart.setFieldSignature(placeholders.FlutterLogo, () => ({
    __proto__: dart.getFields(placeholders.FlutterLogo.__proto__),
    fit: dart.finalFieldType(basic.BoxFit)
  }));
  var random$ = dart.privateName(placeholders, "LoremText.random");
  placeholders.LoremText = class LoremText extends core.Object {
    get random() {
      return this[random$];
    }
    set random(value) {
      super.random = value;
    }
    static ['_#new#tearOff'](opts) {
      let random = opts && 'random' in opts ? opts.random : null;
      return new placeholders.LoremText.new({random: random});
    }
    word() {
      return placeholders.LoremText.words[$_get](this.random.nextInt(placeholders.LoremText.words[$length] - 1));
    }
    sentence(length) {
      let wordList = T$.JSArrayOfString().of([]);
      for (let i = 0; i < length; i = i + 1) {
        let w = this.word();
        if (i < length - 1 && this.random.nextInt(10) === 0) {
          w = w + ",";
        }
        wordList[$add](w);
      }
      let text = wordList[$join](" ") + ".";
      return text[$_get](0)[$toUpperCase]() + text[$substring](1);
    }
    paragraph(length) {
      let wordsCount = 0;
      let sentenceList = T$.JSArrayOfString().of([]);
      let n = 0;
      while (wordsCount < length) {
        n = n + 1;
        if (n > 100) {
          break;
        }
        let count = math.min(core.int, length, math.max(core.int, 10, math.min(core.int, 3, this.random.nextInt(length - wordsCount))));
        sentenceList[$add](this.sentence(count));
        wordsCount = wordsCount + count;
      }
      return sentenceList[$join](" ");
    }
  };
  (placeholders.LoremText.new = function(opts) {
    let t48;
    let random = opts && 'random' in opts ? opts.random : null;
    this[random$] = (t48 = random, t48 == null ? math.Random.new(978) : t48);
    ;
  }).prototype = placeholders.LoremText.prototype;
  dart.addTypeTests(placeholders.LoremText);
  dart.addTypeCaches(placeholders.LoremText);
  dart.setMethodSignature(placeholders.LoremText, () => ({
    __proto__: dart.getMethods(placeholders.LoremText.__proto__),
    word: dart.fnType(core.String, []),
    sentence: dart.fnType(core.String, [core.int]),
    paragraph: dart.fnType(core.String, [core.int])
  }));
  dart.setLibraryUri(placeholders.LoremText, I[59]);
  dart.setFieldSignature(placeholders.LoremText, () => ({
    __proto__: dart.getFields(placeholders.LoremText.__proto__),
    random: dart.finalFieldType(math.Random)
  }));
  dart.setStaticFieldSignature(placeholders.LoremText, () => ['words']);
  dart.defineLazy(placeholders.LoremText, {
    /*placeholders.LoremText.words*/get words() {
      return "ad adipiscing aliqua aliquip amet anim aute cillum commodo consectetur consequat culpa cupidatat deserunt do dolor dolore duis ea eiusmod elit enim esse est et eu ex excepteur exercitation fugiat id in incididunt ipsum irure labore laboris laborum lorem magna minim mollit nisi non nostrud nulla occaecat officia pariatur proident qui quis reprehenderit sed sint sit sunt tempor ullamco ut velit veniam voluptate"[$split](" ");
    }
  }, false);
  var length$ = dart.privateName(placeholders, "Lorem.length");
  var random$0 = dart.privateName(placeholders, "Lorem.random");
  var style$1 = dart.privateName(placeholders, "Lorem.style");
  var textAlign$1 = dart.privateName(placeholders, "Lorem.textAlign");
  var softWrap$ = dart.privateName(placeholders, "Lorem.softWrap");
  var textScaleFactor$ = dart.privateName(placeholders, "Lorem.textScaleFactor");
  var maxLines$ = dart.privateName(placeholders, "Lorem.maxLines");
  placeholders.Lorem = class Lorem extends widget$.StatelessWidget {
    get length() {
      return this[length$];
    }
    set length(value) {
      super.length = value;
    }
    get random() {
      return this[random$0];
    }
    set random(value) {
      super.random = value;
    }
    get style() {
      return this[style$1];
    }
    set style(value) {
      super.style = value;
    }
    get textAlign() {
      return this[textAlign$1];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    get softWrap() {
      return this[softWrap$];
    }
    set softWrap(value) {
      super.softWrap = value;
    }
    get textScaleFactor() {
      return this[textScaleFactor$];
    }
    set textScaleFactor(value) {
      super.textScaleFactor = value;
    }
    get maxLines() {
      return this[maxLines$];
    }
    set maxLines(value) {
      super.maxLines = value;
    }
    static ['_#new#tearOff'](opts) {
      let length = opts && 'length' in opts ? opts.length : 50;
      let random = opts && 'random' in opts ? opts.random : null;
      let style = opts && 'style' in opts ? opts.style : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[61] || CT.C61;
      let softWrap = opts && 'softWrap' in opts ? opts.softWrap : true;
      let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
      return new placeholders.Lorem.new({length: length, random: random, style: style, textAlign: textAlign, softWrap: softWrap, textScaleFactor: textScaleFactor, maxLines: maxLines});
    }
    build(context) {
      let lorem = new placeholders.LoremText.new({random: this.random});
      let text = lorem.paragraph(this.length);
      return new text$1.Text.new(text, {style: this.style, textAlign: this.textAlign, softWrap: this.softWrap, textScaleFactor: this.textScaleFactor, maxLines: this.maxLines});
    }
  };
  (placeholders.Lorem.new = function(opts) {
    let length = opts && 'length' in opts ? opts.length : 50;
    let random = opts && 'random' in opts ? opts.random : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[61] || CT.C61;
    let softWrap = opts && 'softWrap' in opts ? opts.softWrap : true;
    let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    this[length$] = length;
    this[random$0] = random;
    this[style$1] = style;
    this[textAlign$1] = textAlign;
    this[softWrap$] = softWrap;
    this[textScaleFactor$] = textScaleFactor;
    this[maxLines$] = maxLines;
    placeholders.Lorem.__proto__.new.call(this);
    ;
  }).prototype = placeholders.Lorem.prototype;
  dart.addTypeTests(placeholders.Lorem);
  dart.addTypeCaches(placeholders.Lorem);
  dart.setMethodSignature(placeholders.Lorem, () => ({
    __proto__: dart.getMethods(placeholders.Lorem.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(placeholders.Lorem, I[59]);
  dart.setFieldSignature(placeholders.Lorem, () => ({
    __proto__: dart.getFields(placeholders.Lorem.__proto__),
    length: dart.finalFieldType(core.int),
    random: dart.finalFieldType(dart.nullable(math.Random)),
    style: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    textAlign: dart.finalFieldType(text$1.TextAlign),
    softWrap: dart.finalFieldType(core.bool),
    textScaleFactor: dart.finalFieldType(core.double),
    maxLines: dart.finalFieldType(dart.nullable(core.int))
  }));
  var codePoint$ = dart.privateName(icon$, "IconData.codePoint");
  var matchTextDirection$ = dart.privateName(icon$, "IconData.matchTextDirection");
  icon$.IconData = class IconData extends core.Object {
    get codePoint() {
      return this[codePoint$];
    }
    set codePoint(value) {
      super.codePoint = value;
    }
    get matchTextDirection() {
      return this[matchTextDirection$];
    }
    set matchTextDirection(value) {
      super.matchTextDirection = value;
    }
    static ['_#new#tearOff'](codePoint, opts) {
      let matchTextDirection = opts && 'matchTextDirection' in opts ? opts.matchTextDirection : false;
      return new icon$.IconData.new(codePoint, {matchTextDirection: matchTextDirection});
    }
  };
  (icon$.IconData.new = function(codePoint, opts) {
    let matchTextDirection = opts && 'matchTextDirection' in opts ? opts.matchTextDirection : false;
    this[codePoint$] = codePoint;
    this[matchTextDirection$] = matchTextDirection;
    ;
  }).prototype = icon$.IconData.prototype;
  dart.addTypeTests(icon$.IconData);
  dart.addTypeCaches(icon$.IconData);
  dart.setLibraryUri(icon$.IconData, I[60]);
  dart.setFieldSignature(icon$.IconData, () => ({
    __proto__: dart.getFields(icon$.IconData.__proto__),
    codePoint: dart.finalFieldType(core.int),
    matchTextDirection: dart.finalFieldType(core.bool)
  }));
  var color$10 = dart.privateName(icon$, "IconThemeData.color");
  var opacity$1 = dart.privateName(icon$, "IconThemeData.opacity");
  var size$ = dart.privateName(icon$, "IconThemeData.size");
  var font$1 = dart.privateName(icon$, "IconThemeData.font");
  icon$.IconThemeData = class IconThemeData extends core.Object {
    get color() {
      return this[color$10];
    }
    set color(value) {
      super.color = value;
    }
    get opacity() {
      return this[opacity$1];
    }
    set opacity(value) {
      super.opacity = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
    get font() {
      return this[font$1];
    }
    set font(value) {
      super.font = value;
    }
    static ['_#new#tearOff'](opts) {
      let color = opts && 'color' in opts ? opts.color : null;
      let opacity = opts && 'opacity' in opts ? opts.opacity : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let font = opts && 'font' in opts ? opts.font : null;
      return new icon$.IconThemeData.new({color: color, opacity: opacity, size: size, font: font});
    }
    static ['_#fallback#tearOff'](font) {
      return new icon$.IconThemeData.fallback(font);
    }
    copyWith(opts) {
      let t48, t48$, t48$0, t48$1;
      let color = opts && 'color' in opts ? opts.color : null;
      let opacity = opts && 'opacity' in opts ? opts.opacity : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let font = opts && 'font' in opts ? opts.font : null;
      return new icon$.IconThemeData.new({color: (t48 = color, t48 == null ? this.color : t48), opacity: (t48$ = opacity, t48$ == null ? this.opacity : t48$), size: (t48$0 = size, t48$0 == null ? this.size : t48$0), font: (t48$1 = font, t48$1 == null ? this.font : t48$1)});
    }
  };
  (icon$.IconThemeData.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let opacity = opts && 'opacity' in opts ? opts.opacity : null;
    let size = opts && 'size' in opts ? opts.size : null;
    let font = opts && 'font' in opts ? opts.font : null;
    this[color$10] = color;
    this[opacity$1] = opacity;
    this[size$] = size;
    this[font$1] = font;
    ;
  }).prototype = icon$.IconThemeData.prototype;
  (icon$.IconThemeData.fallback = function(font) {
    this[font$1] = font;
    this[color$10] = colors.PdfColors.black;
    this[opacity$1] = 1.0;
    this[size$] = 24.0;
    ;
  }).prototype = icon$.IconThemeData.prototype;
  dart.addTypeTests(icon$.IconThemeData);
  dart.addTypeCaches(icon$.IconThemeData);
  dart.setMethodSignature(icon$.IconThemeData, () => ({
    __proto__: dart.getMethods(icon$.IconThemeData.__proto__),
    copyWith: dart.fnType(icon$.IconThemeData, [], {color: dart.nullable(color$.PdfColor), font: dart.nullable(font$.Font), opacity: dart.nullable(core.double), size: dart.nullable(core.double)}, {})
  }));
  dart.setLibraryUri(icon$.IconThemeData, I[60]);
  dart.setFieldSignature(icon$.IconThemeData, () => ({
    __proto__: dart.getFields(icon$.IconThemeData.__proto__),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    opacity: dart.finalFieldType(dart.nullable(core.double)),
    size: dart.finalFieldType(dart.nullable(core.double)),
    font: dart.finalFieldType(dart.nullable(font$.Font))
  }));
  var icon$0 = dart.privateName(icon$, "Icon.icon");
  var size$0 = dart.privateName(icon$, "Icon.size");
  var color$11 = dart.privateName(icon$, "Icon.color");
  var textDirection$ = dart.privateName(icon$, "Icon.textDirection");
  var font$2 = dart.privateName(icon$, "Icon.font");
  icon$.Icon = class Icon extends widget$.StatelessWidget {
    get icon() {
      return this[icon$0];
    }
    set icon(value) {
      super.icon = value;
    }
    get size() {
      return this[size$0];
    }
    set size(value) {
      super.size = value;
    }
    get color() {
      return this[color$11];
    }
    set color(value) {
      super.color = value;
    }
    get textDirection() {
      return this[textDirection$];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get font() {
      return this[font$2];
    }
    set font(value) {
      super.font = value;
    }
    static ['_#new#tearOff'](icon, opts) {
      let size = opts && 'size' in opts ? opts.size : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let font = opts && 'font' in opts ? opts.font : null;
      return new icon$.Icon.new(icon, {size: size, color: color, textDirection: textDirection, font: font});
    }
    build(context) {
      let t48, t48$, t48$0, t48$1, t48$2;
      let textDirection = (t48 = this.textDirection, t48 == null ? text_style.Directionality.of(context) : t48);
      let iconTheme = theme$.Theme.of(context).iconTheme;
      let iconSize = (t48$ = this.size, t48$ == null ? iconTheme.size : t48$);
      let iconColor = (t48$0 = this.color, t48$0 == null ? dart.nullCheck(iconTheme.color) : t48$0);
      let iconOpacity = iconColor.alpha;
      let iconFont = (t48$1 = this.font, t48$1 == null ? iconTheme.font : t48$1);
      let iconWidget = new text$1.RichText.new({textDirection: textDirection, text: new text$1.TextSpan.new({text: core.String.fromCharCode(this.icon.codePoint), style: text_style.TextStyle.defaultStyle().copyWith({color: iconColor, fontSize: iconSize, fontNormal: iconFont})})});
      if (this.icon.matchTextDirection) {
        switch (textDirection) {
          case C[100] || CT.C100:
            {
              iconWidget = new basic.Transform.new({transform: (t48$2 = vector_math_64.Matrix4.identity(), (() => {
                  t48$2.scale(-1.0, 1.0, 1.0);
                  return t48$2;
                })()), alignment: geometry.Alignment.center, child: iconWidget});
              break;
            }
          case C[101] || CT.C101:
            {
              break;
            }
        }
      }
      if (iconOpacity < 1.0) {
        iconWidget = new basic.Opacity.new({opacity: iconOpacity, child: iconWidget});
      }
      return iconWidget;
    }
  };
  (icon$.Icon.new = function(icon, opts) {
    let size = opts && 'size' in opts ? opts.size : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let font = opts && 'font' in opts ? opts.font : null;
    this[icon$0] = icon;
    this[size$0] = size;
    this[color$11] = color;
    this[textDirection$] = textDirection;
    this[font$2] = font;
    icon$.Icon.__proto__.new.call(this);
    ;
  }).prototype = icon$.Icon.prototype;
  dart.addTypeTests(icon$.Icon);
  dart.addTypeCaches(icon$.Icon);
  dart.setMethodSignature(icon$.Icon, () => ({
    __proto__: dart.getMethods(icon$.Icon.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(icon$.Icon, I[60]);
  dart.setFieldSignature(icon$.Icon, () => ({
    __proto__: dart.getFields(icon$.Icon.__proto__),
    icon: dart.finalFieldType(icon$.IconData),
    size: dart.finalFieldType(dart.nullable(core.double)),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    textDirection: dart.finalFieldType(dart.nullable(text$1.TextDirection)),
    font: dart.finalFieldType(dart.nullable(font$.Font))
  }));
  var defaultTextStyle$ = dart.privateName(theme$, "ThemeData.defaultTextStyle");
  var paragraphStyle$ = dart.privateName(theme$, "ThemeData.paragraphStyle");
  var header0$ = dart.privateName(theme$, "ThemeData.header0");
  var header1$ = dart.privateName(theme$, "ThemeData.header1");
  var header2$ = dart.privateName(theme$, "ThemeData.header2");
  var header3$ = dart.privateName(theme$, "ThemeData.header3");
  var header4$ = dart.privateName(theme$, "ThemeData.header4");
  var header5$ = dart.privateName(theme$, "ThemeData.header5");
  var bulletStyle$ = dart.privateName(theme$, "ThemeData.bulletStyle");
  var tableHeader$ = dart.privateName(theme$, "ThemeData.tableHeader");
  var tableCell$ = dart.privateName(theme$, "ThemeData.tableCell");
  var textAlign$2 = dart.privateName(theme$, "ThemeData.textAlign");
  var softWrap$0 = dart.privateName(theme$, "ThemeData.softWrap");
  var maxLines$0 = dart.privateName(theme$, "ThemeData.maxLines");
  var overflow$0 = dart.privateName(theme$, "ThemeData.overflow");
  var iconTheme$ = dart.privateName(theme$, "ThemeData.iconTheme");
  widget$.Inherited = class Inherited extends core.Object {
    static ['_#new#tearOff']() {
      return new widget$.Inherited.new();
    }
  };
  (widget$.Inherited.new = function() {
    ;
  }).prototype = widget$.Inherited.prototype;
  dart.addTypeTests(widget$.Inherited);
  dart.addTypeCaches(widget$.Inherited);
  dart.setLibraryUri(widget$.Inherited, I[6]);
  theme$.ThemeData = class ThemeData extends widget$.Inherited {
    get defaultTextStyle() {
      return this[defaultTextStyle$];
    }
    set defaultTextStyle(value) {
      super.defaultTextStyle = value;
    }
    get paragraphStyle() {
      return this[paragraphStyle$];
    }
    set paragraphStyle(value) {
      super.paragraphStyle = value;
    }
    get header0() {
      return this[header0$];
    }
    set header0(value) {
      super.header0 = value;
    }
    get header1() {
      return this[header1$];
    }
    set header1(value) {
      super.header1 = value;
    }
    get header2() {
      return this[header2$];
    }
    set header2(value) {
      super.header2 = value;
    }
    get header3() {
      return this[header3$];
    }
    set header3(value) {
      super.header3 = value;
    }
    get header4() {
      return this[header4$];
    }
    set header4(value) {
      super.header4 = value;
    }
    get header5() {
      return this[header5$];
    }
    set header5(value) {
      super.header5 = value;
    }
    get bulletStyle() {
      return this[bulletStyle$];
    }
    set bulletStyle(value) {
      super.bulletStyle = value;
    }
    get tableHeader() {
      return this[tableHeader$];
    }
    set tableHeader(value) {
      super.tableHeader = value;
    }
    get tableCell() {
      return this[tableCell$];
    }
    set tableCell(value) {
      super.tableCell = value;
    }
    get textAlign() {
      return this[textAlign$2];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    get softWrap() {
      return this[softWrap$0];
    }
    set softWrap(value) {
      super.softWrap = value;
    }
    get maxLines() {
      return this[maxLines$0];
    }
    set maxLines(value) {
      super.maxLines = value;
    }
    get overflow() {
      return this[overflow$0];
    }
    set overflow(value) {
      super.overflow = value;
    }
    get iconTheme() {
      return this[iconTheme$];
    }
    set iconTheme(value) {
      super.iconTheme = value;
    }
    static new(opts) {
      let defaultTextStyle = opts && 'defaultTextStyle' in opts ? opts.defaultTextStyle : null;
      let paragraphStyle = opts && 'paragraphStyle' in opts ? opts.paragraphStyle : null;
      let header0 = opts && 'header0' in opts ? opts.header0 : null;
      let header1 = opts && 'header1' in opts ? opts.header1 : null;
      let header2 = opts && 'header2' in opts ? opts.header2 : null;
      let header3 = opts && 'header3' in opts ? opts.header3 : null;
      let header4 = opts && 'header4' in opts ? opts.header4 : null;
      let header5 = opts && 'header5' in opts ? opts.header5 : null;
      let bulletStyle = opts && 'bulletStyle' in opts ? opts.bulletStyle : null;
      let tableHeader = opts && 'tableHeader' in opts ? opts.tableHeader : null;
      let tableCell = opts && 'tableCell' in opts ? opts.tableCell : null;
      let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      let overflow = opts && 'overflow' in opts ? opts.overflow : null;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
      let iconTheme = opts && 'iconTheme' in opts ? opts.iconTheme : null;
      let base = theme$.ThemeData.base();
      return base.copyWith({defaultTextStyle: defaultTextStyle, paragraphStyle: paragraphStyle, bulletStyle: bulletStyle, header0: header0, header1: header1, header2: header2, header3: header3, header4: header4, header5: header5, tableHeader: tableHeader, tableCell: tableCell, softWrap: softWrap, overflow: overflow, textAlign: textAlign, maxLines: maxLines, iconTheme: iconTheme});
    }
    static ['_#new#tearOff'](opts) {
      let defaultTextStyle = opts && 'defaultTextStyle' in opts ? opts.defaultTextStyle : null;
      let paragraphStyle = opts && 'paragraphStyle' in opts ? opts.paragraphStyle : null;
      let header0 = opts && 'header0' in opts ? opts.header0 : null;
      let header1 = opts && 'header1' in opts ? opts.header1 : null;
      let header2 = opts && 'header2' in opts ? opts.header2 : null;
      let header3 = opts && 'header3' in opts ? opts.header3 : null;
      let header4 = opts && 'header4' in opts ? opts.header4 : null;
      let header5 = opts && 'header5' in opts ? opts.header5 : null;
      let bulletStyle = opts && 'bulletStyle' in opts ? opts.bulletStyle : null;
      let tableHeader = opts && 'tableHeader' in opts ? opts.tableHeader : null;
      let tableCell = opts && 'tableCell' in opts ? opts.tableCell : null;
      let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      let overflow = opts && 'overflow' in opts ? opts.overflow : null;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
      let iconTheme = opts && 'iconTheme' in opts ? opts.iconTheme : null;
      return theme$.ThemeData.new({defaultTextStyle: defaultTextStyle, paragraphStyle: paragraphStyle, header0: header0, header1: header1, header2: header2, header3: header3, header4: header4, header5: header5, bulletStyle: bulletStyle, tableHeader: tableHeader, tableCell: tableCell, softWrap: softWrap, textAlign: textAlign, overflow: overflow, maxLines: maxLines, iconTheme: iconTheme});
    }
    static ['_#_#tearOff'](opts) {
      let defaultTextStyle = opts && 'defaultTextStyle' in opts ? opts.defaultTextStyle : null;
      let paragraphStyle = opts && 'paragraphStyle' in opts ? opts.paragraphStyle : null;
      let header0 = opts && 'header0' in opts ? opts.header0 : null;
      let header1 = opts && 'header1' in opts ? opts.header1 : null;
      let header2 = opts && 'header2' in opts ? opts.header2 : null;
      let header3 = opts && 'header3' in opts ? opts.header3 : null;
      let header4 = opts && 'header4' in opts ? opts.header4 : null;
      let header5 = opts && 'header5' in opts ? opts.header5 : null;
      let bulletStyle = opts && 'bulletStyle' in opts ? opts.bulletStyle : null;
      let tableHeader = opts && 'tableHeader' in opts ? opts.tableHeader : null;
      let tableCell = opts && 'tableCell' in opts ? opts.tableCell : null;
      let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
      let overflow = opts && 'overflow' in opts ? opts.overflow : null;
      let iconTheme = opts && 'iconTheme' in opts ? opts.iconTheme : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
      return new theme$.ThemeData.__({defaultTextStyle: defaultTextStyle, paragraphStyle: paragraphStyle, header0: header0, header1: header1, header2: header2, header3: header3, header4: header4, header5: header5, bulletStyle: bulletStyle, tableHeader: tableHeader, tableCell: tableCell, softWrap: softWrap, overflow: overflow, iconTheme: iconTheme, textAlign: textAlign, maxLines: maxLines});
    }
    static withFont(opts) {
      let base = opts && 'base' in opts ? opts.base : null;
      let bold = opts && 'bold' in opts ? opts.bold : null;
      let italic = opts && 'italic' in opts ? opts.italic : null;
      let boldItalic = opts && 'boldItalic' in opts ? opts.boldItalic : null;
      let icons = opts && 'icons' in opts ? opts.icons : null;
      let fontFallback = opts && 'fontFallback' in opts ? opts.fontFallback : null;
      let defaultStyle = text_style.TextStyle.defaultStyle().copyWith({font: base, fontNormal: base, fontBold: bold, fontItalic: italic, fontBoldItalic: boldItalic, fontFallback: fontFallback});
      let fontSize = dart.nullCheck(defaultStyle.fontSize);
      return new theme$.ThemeData.__({defaultTextStyle: defaultStyle, paragraphStyle: defaultStyle.copyWith({lineSpacing: 5.0}), bulletStyle: defaultStyle.copyWith({lineSpacing: 5.0}), header0: defaultStyle.copyWith({fontSize: fontSize * 2.0}), header1: defaultStyle.copyWith({fontSize: fontSize * 1.5}), header2: defaultStyle.copyWith({fontSize: fontSize * 1.4}), header3: defaultStyle.copyWith({fontSize: fontSize * 1.3}), header4: defaultStyle.copyWith({fontSize: fontSize * 1.2}), header5: defaultStyle.copyWith({fontSize: fontSize * 1.1}), tableHeader: defaultStyle.copyWith({fontSize: fontSize * 0.8, fontWeight: text_style.FontWeight.bold}), tableCell: defaultStyle.copyWith({fontSize: fontSize * 0.8}), softWrap: true, overflow: text$1.TextOverflow.visible, iconTheme: new icon$.IconThemeData.fallback(icons)});
    }
    static ['_#withFont#tearOff'](opts) {
      let base = opts && 'base' in opts ? opts.base : null;
      let bold = opts && 'bold' in opts ? opts.bold : null;
      let italic = opts && 'italic' in opts ? opts.italic : null;
      let boldItalic = opts && 'boldItalic' in opts ? opts.boldItalic : null;
      let icons = opts && 'icons' in opts ? opts.icons : null;
      let fontFallback = opts && 'fontFallback' in opts ? opts.fontFallback : null;
      return theme$.ThemeData.withFont({base: base, bold: bold, italic: italic, boldItalic: boldItalic, icons: icons, fontFallback: fontFallback});
    }
    static base() {
      return theme$.ThemeData.buildThemeData == null ? theme$.ThemeData.withFont() : dart.nullCheck(theme$.ThemeData.buildThemeData)();
    }
    static ['_#base#tearOff']() {
      return theme$.ThemeData.base();
    }
    copyWith(opts) {
      let t48, t48$, t48$0, t48$1, t48$2;
      let defaultTextStyle = opts && 'defaultTextStyle' in opts ? opts.defaultTextStyle : null;
      let paragraphStyle = opts && 'paragraphStyle' in opts ? opts.paragraphStyle : null;
      let header0 = opts && 'header0' in opts ? opts.header0 : null;
      let header1 = opts && 'header1' in opts ? opts.header1 : null;
      let header2 = opts && 'header2' in opts ? opts.header2 : null;
      let header3 = opts && 'header3' in opts ? opts.header3 : null;
      let header4 = opts && 'header4' in opts ? opts.header4 : null;
      let header5 = opts && 'header5' in opts ? opts.header5 : null;
      let bulletStyle = opts && 'bulletStyle' in opts ? opts.bulletStyle : null;
      let tableHeader = opts && 'tableHeader' in opts ? opts.tableHeader : null;
      let tableCell = opts && 'tableCell' in opts ? opts.tableCell : null;
      let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
      let overflow = opts && 'overflow' in opts ? opts.overflow : null;
      let iconTheme = opts && 'iconTheme' in opts ? opts.iconTheme : null;
      return new theme$.ThemeData.__({defaultTextStyle: this.defaultTextStyle.merge(defaultTextStyle), paragraphStyle: this.paragraphStyle.merge(paragraphStyle), bulletStyle: this.bulletStyle.merge(bulletStyle), header0: this.header0.merge(header0), header1: this.header1.merge(header1), header2: this.header2.merge(header2), header3: this.header3.merge(header3), header4: this.header4.merge(header4), header5: this.header5.merge(header5), tableHeader: this.tableHeader.merge(tableHeader), tableCell: this.tableCell.merge(tableCell), softWrap: (t48 = softWrap, t48 == null ? this.softWrap : t48), overflow: (t48$ = overflow, t48$ == null ? this.overflow : t48$), textAlign: (t48$0 = textAlign, t48$0 == null ? this.textAlign : t48$0), maxLines: (t48$1 = maxLines, t48$1 == null ? this.maxLines : t48$1), iconTheme: (t48$2 = iconTheme, t48$2 == null ? this.iconTheme : t48$2)});
    }
  };
  (theme$.ThemeData.__ = function(opts) {
    let defaultTextStyle = opts && 'defaultTextStyle' in opts ? opts.defaultTextStyle : null;
    let paragraphStyle = opts && 'paragraphStyle' in opts ? opts.paragraphStyle : null;
    let header0 = opts && 'header0' in opts ? opts.header0 : null;
    let header1 = opts && 'header1' in opts ? opts.header1 : null;
    let header2 = opts && 'header2' in opts ? opts.header2 : null;
    let header3 = opts && 'header3' in opts ? opts.header3 : null;
    let header4 = opts && 'header4' in opts ? opts.header4 : null;
    let header5 = opts && 'header5' in opts ? opts.header5 : null;
    let bulletStyle = opts && 'bulletStyle' in opts ? opts.bulletStyle : null;
    let tableHeader = opts && 'tableHeader' in opts ? opts.tableHeader : null;
    let tableCell = opts && 'tableCell' in opts ? opts.tableCell : null;
    let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
    let overflow = opts && 'overflow' in opts ? opts.overflow : null;
    let iconTheme = opts && 'iconTheme' in opts ? opts.iconTheme : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    this[defaultTextStyle$] = defaultTextStyle;
    this[paragraphStyle$] = paragraphStyle;
    this[header0$] = header0;
    this[header1$] = header1;
    this[header2$] = header2;
    this[header3$] = header3;
    this[header4$] = header4;
    this[header5$] = header5;
    this[bulletStyle$] = bulletStyle;
    this[tableHeader$] = tableHeader;
    this[tableCell$] = tableCell;
    this[softWrap$0] = softWrap;
    this[overflow$0] = overflow;
    this[iconTheme$] = iconTheme;
    this[textAlign$2] = textAlign;
    this[maxLines$0] = maxLines;
    if (!(defaultTextStyle.inherit === false)) dart.assertFailed(null, I[61], 86, 16, "defaultTextStyle.inherit == false");
    if (!(paragraphStyle.inherit === false)) dart.assertFailed(null, I[61], 87, 16, "paragraphStyle.inherit == false");
    if (!(header0.inherit === false)) dart.assertFailed(null, I[61], 88, 16, "header0.inherit == false");
    if (!(header1.inherit === false)) dart.assertFailed(null, I[61], 89, 16, "header1.inherit == false");
    if (!(header2.inherit === false)) dart.assertFailed(null, I[61], 90, 16, "header2.inherit == false");
    if (!(header3.inherit === false)) dart.assertFailed(null, I[61], 91, 16, "header3.inherit == false");
    if (!(header4.inherit === false)) dart.assertFailed(null, I[61], 92, 16, "header4.inherit == false");
    if (!(header5.inherit === false)) dart.assertFailed(null, I[61], 93, 16, "header5.inherit == false");
    if (!(bulletStyle.inherit === false)) dart.assertFailed(null, I[61], 94, 16, "bulletStyle.inherit == false");
    if (!(tableHeader.inherit === false)) dart.assertFailed(null, I[61], 95, 16, "tableHeader.inherit == false");
    if (!(tableCell.inherit === false)) dart.assertFailed(null, I[61], 96, 16, "tableCell.inherit == false");
    if (!(maxLines == null || dart.notNull(maxLines) > 0)) dart.assertFailed(null, I[61], 97, 16, "maxLines == null || maxLines > 0");
    theme$.ThemeData.__proto__.new.call(this);
    ;
  }).prototype = theme$.ThemeData.prototype;
  dart.addTypeTests(theme$.ThemeData);
  dart.addTypeCaches(theme$.ThemeData);
  dart.setMethodSignature(theme$.ThemeData, () => ({
    __proto__: dart.getMethods(theme$.ThemeData.__proto__),
    copyWith: dart.fnType(theme$.ThemeData, [], {bulletStyle: dart.nullable(text_style.TextStyle), defaultTextStyle: dart.nullable(text_style.TextStyle), header0: dart.nullable(text_style.TextStyle), header1: dart.nullable(text_style.TextStyle), header2: dart.nullable(text_style.TextStyle), header3: dart.nullable(text_style.TextStyle), header4: dart.nullable(text_style.TextStyle), header5: dart.nullable(text_style.TextStyle), iconTheme: dart.nullable(icon$.IconThemeData), maxLines: dart.nullable(core.int), overflow: dart.nullable(text$1.TextOverflow), paragraphStyle: dart.nullable(text_style.TextStyle), softWrap: dart.nullable(core.bool), tableCell: dart.nullable(text_style.TextStyle), tableHeader: dart.nullable(text_style.TextStyle), textAlign: dart.nullable(text$1.TextAlign)}, {})
  }));
  dart.setStaticMethodSignature(theme$.ThemeData, () => ['new', 'withFont', 'base']);
  dart.setLibraryUri(theme$.ThemeData, I[62]);
  dart.setFieldSignature(theme$.ThemeData, () => ({
    __proto__: dart.getFields(theme$.ThemeData.__proto__),
    defaultTextStyle: dart.finalFieldType(text_style.TextStyle),
    paragraphStyle: dart.finalFieldType(text_style.TextStyle),
    header0: dart.finalFieldType(text_style.TextStyle),
    header1: dart.finalFieldType(text_style.TextStyle),
    header2: dart.finalFieldType(text_style.TextStyle),
    header3: dart.finalFieldType(text_style.TextStyle),
    header4: dart.finalFieldType(text_style.TextStyle),
    header5: dart.finalFieldType(text_style.TextStyle),
    bulletStyle: dart.finalFieldType(text_style.TextStyle),
    tableHeader: dart.finalFieldType(text_style.TextStyle),
    tableCell: dart.finalFieldType(text_style.TextStyle),
    textAlign: dart.finalFieldType(dart.nullable(text$1.TextAlign)),
    softWrap: dart.finalFieldType(core.bool),
    maxLines: dart.finalFieldType(dart.nullable(core.int)),
    overflow: dart.finalFieldType(text$1.TextOverflow),
    iconTheme: dart.finalFieldType(icon$.IconThemeData)
  }));
  dart.setStaticFieldSignature(theme$.ThemeData, () => ['buildThemeData']);
  dart.defineLazy(theme$.ThemeData, {
    /*theme$.ThemeData.buildThemeData*/get buildThemeData() {
      return null;
    },
    set buildThemeData(_) {}
  }, false);
  var data$0 = dart.privateName(theme$, "Theme.data");
  var child$5 = dart.privateName(theme$, "Theme.child");
  theme$.Theme = class Theme extends widget$.StatelessWidget {
    get data() {
      return this[data$0];
    }
    set data(value) {
      super.data = value;
    }
    get child() {
      return this[child$5];
    }
    set child(value) {
      super.child = value;
    }
    static ['_#new#tearOff'](opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let child = opts && 'child' in opts ? opts.child : null;
      return new theme$.Theme.new({data: data, child: child});
    }
    static of(context) {
      return dart.nullCheck(context.dependsOn(theme$.ThemeData));
    }
    build(context) {
      return new widget$.InheritedWidget.new({inherited: this.data, build: dart.fn(context => this.child, T$.ContextToWidget())});
    }
  };
  (theme$.Theme.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[data$0] = data;
    this[child$5] = child;
    theme$.Theme.__proto__.new.call(this);
    ;
  }).prototype = theme$.Theme.prototype;
  dart.addTypeTests(theme$.Theme);
  dart.addTypeCaches(theme$.Theme);
  dart.setMethodSignature(theme$.Theme, () => ({
    __proto__: dart.getMethods(theme$.Theme.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setStaticMethodSignature(theme$.Theme, () => ['of']);
  dart.setLibraryUri(theme$.Theme, I[62]);
  dart.setFieldSignature(theme$.Theme, () => ({
    __proto__: dart.getFields(theme$.Theme.__proto__),
    data: dart.finalFieldType(theme$.ThemeData),
    child: dart.finalFieldType(widget$.Widget)
  }));
  var style$2 = dart.privateName(theme$, "DefaultTextStyle.style");
  var child$6 = dart.privateName(theme$, "DefaultTextStyle.child");
  var textAlign$3 = dart.privateName(theme$, "DefaultTextStyle.textAlign");
  var softWrap$1 = dart.privateName(theme$, "DefaultTextStyle.softWrap");
  var maxLines$1 = dart.privateName(theme$, "DefaultTextStyle.maxLines");
  var overflow$1 = dart.privateName(theme$, "DefaultTextStyle.overflow");
  theme$.DefaultTextStyle = class DefaultTextStyle extends widget$.StatelessWidget {
    get style() {
      return this[style$2];
    }
    set style(value) {
      super.style = value;
    }
    get child() {
      return this[child$6];
    }
    set child(value) {
      super.child = value;
    }
    get textAlign() {
      return this[textAlign$3];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    get softWrap() {
      return this[softWrap$1];
    }
    set softWrap(value) {
      super.softWrap = value;
    }
    get maxLines() {
      return this[maxLines$1];
    }
    set maxLines(value) {
      super.maxLines = value;
    }
    get overflow() {
      return this[overflow$1];
    }
    set overflow(value) {
      super.overflow = value;
    }
    static ['_#new#tearOff'](opts) {
      let style = opts && 'style' in opts ? opts.style : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      let softWrap = opts && 'softWrap' in opts ? opts.softWrap : true;
      let overflow = opts && 'overflow' in opts ? opts.overflow : null;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
      return new theme$.DefaultTextStyle.new({style: style, child: child, textAlign: textAlign, softWrap: softWrap, overflow: overflow, maxLines: maxLines});
    }
    static merge(opts) {
      let style = opts && 'style' in opts ? opts.style : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
      let overflow = opts && 'overflow' in opts ? opts.overflow : null;
      let child = opts && 'child' in opts ? opts.child : null;
      return new basic.Builder.new({builder: dart.fn(context => {
          let t48, t48$, t48$0, t48$1;
          let parent = theme$.Theme.of(context);
          return new theme$.DefaultTextStyle.new({style: parent.defaultTextStyle.merge(style), textAlign: (t48 = textAlign, t48 == null ? parent.textAlign : t48), softWrap: (t48$ = softWrap, t48$ == null ? parent.softWrap : t48$), overflow: (t48$0 = overflow, t48$0 == null ? parent.overflow : t48$0), maxLines: (t48$1 = maxLines, t48$1 == null ? parent.maxLines : t48$1), child: child});
        }, T$.ContextToDefaultTextStyle())});
    }
    build(context) {
      let theme = theme$.Theme.of(context).copyWith({defaultTextStyle: this.style, textAlign: this.textAlign, softWrap: this.softWrap, overflow: this.overflow, maxLines: this.maxLines});
      return new widget$.InheritedWidget.new({inherited: theme, build: dart.fn(context => this.child, T$.ContextToWidget())});
    }
  };
  (theme$.DefaultTextStyle.new = function(opts) {
    let style = opts && 'style' in opts ? opts.style : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    let softWrap = opts && 'softWrap' in opts ? opts.softWrap : true;
    let overflow = opts && 'overflow' in opts ? opts.overflow : null;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    this[style$2] = style;
    this[child$6] = child;
    this[textAlign$3] = textAlign;
    this[softWrap$1] = softWrap;
    this[overflow$1] = overflow;
    this[maxLines$1] = maxLines;
    if (!(maxLines == null || dart.notNull(maxLines) > 0)) dart.assertFailed(null, I[61], 234, 15, "maxLines == null || maxLines > 0");
    theme$.DefaultTextStyle.__proto__.new.call(this);
    ;
  }).prototype = theme$.DefaultTextStyle.prototype;
  dart.addTypeTests(theme$.DefaultTextStyle);
  dart.addTypeCaches(theme$.DefaultTextStyle);
  theme$.DefaultTextStyle[dart.implements] = () => [widget$.Inherited];
  dart.setMethodSignature(theme$.DefaultTextStyle, () => ({
    __proto__: dart.getMethods(theme$.DefaultTextStyle.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setStaticMethodSignature(theme$.DefaultTextStyle, () => ['merge']);
  dart.setLibraryUri(theme$.DefaultTextStyle, I[62]);
  dart.setFieldSignature(theme$.DefaultTextStyle, () => ({
    __proto__: dart.getFields(theme$.DefaultTextStyle.__proto__),
    style: dart.finalFieldType(text_style.TextStyle),
    child: dart.finalFieldType(widget$.Widget),
    textAlign: dart.finalFieldType(dart.nullable(text$1.TextAlign)),
    softWrap: dart.finalFieldType(core.bool),
    maxLines: dart.finalFieldType(dart.nullable(core.int)),
    overflow: dart.finalFieldType(dart.nullable(text$1.TextOverflow))
  }));
  font$.Type1Fonts = class Type1Fonts extends core._Enum {
    toString() {
      return "Type1Fonts." + this[_name];
    }
  };
  (font$.Type1Fonts.new = function(index, name) {
    font$.Type1Fonts.__proto__.new.call(this, index, name);
    ;
  }).prototype = font$.Type1Fonts.prototype;
  dart.addTypeTests(font$.Type1Fonts);
  dart.addTypeCaches(font$.Type1Fonts);
  dart.setLibraryUri(font$.Type1Fonts, I[63]);
  dart.setStaticFieldSignature(font$.Type1Fonts, () => ['values', 'courier', 'courierBold', 'courierBoldOblique', 'courierOblique', 'helvetica', 'helveticaBold', 'helveticaBoldOblique', 'helveticaOblique', 'times', 'timesBold', 'timesBoldItalic', 'timesItalic', 'symbol', 'zapfDingbats']);
  dart.defineExtensionMethods(font$.Type1Fonts, ['toString']);
  dart.defineLazy(font$.Type1Fonts, {
    /*font$.Type1Fonts.values*/get values() {
      return C[159] || CT.C159;
    },
    /*font$.Type1Fonts.courier*/get courier() {
      return C[160] || CT.C160;
    },
    /*font$.Type1Fonts.courierBold*/get courierBold() {
      return C[161] || CT.C161;
    },
    /*font$.Type1Fonts.courierBoldOblique*/get courierBoldOblique() {
      return C[162] || CT.C162;
    },
    /*font$.Type1Fonts.courierOblique*/get courierOblique() {
      return C[163] || CT.C163;
    },
    /*font$.Type1Fonts.helvetica*/get helvetica() {
      return C[164] || CT.C164;
    },
    /*font$.Type1Fonts.helveticaBold*/get helveticaBold() {
      return C[165] || CT.C165;
    },
    /*font$.Type1Fonts.helveticaBoldOblique*/get helveticaBoldOblique() {
      return C[166] || CT.C166;
    },
    /*font$.Type1Fonts.helveticaOblique*/get helveticaOblique() {
      return C[167] || CT.C167;
    },
    /*font$.Type1Fonts.times*/get times() {
      return C[168] || CT.C168;
    },
    /*font$.Type1Fonts.timesBold*/get timesBold() {
      return C[169] || CT.C169;
    },
    /*font$.Type1Fonts.timesBoldItalic*/get timesBoldItalic() {
      return C[170] || CT.C170;
    },
    /*font$.Type1Fonts.timesItalic*/get timesItalic() {
      return C[171] || CT.C171;
    },
    /*font$.Type1Fonts.symbol*/get symbol() {
      return C[172] || CT.C172;
    },
    /*font$.Type1Fonts.zapfDingbats*/get zapfDingbats() {
      return C[173] || CT.C173;
    }
  }, false);
  var font$3 = dart.privateName(font$, "Font.font");
  var _pdfFont = dart.privateName(font$, "_pdfFont");
  font$.Font = class Font extends core.Object {
    get font() {
      return this[font$3];
    }
    set font(value) {
      super.font = value;
    }
    static ['_#new#tearOff']() {
      return new font$.Font.new();
    }
    static ['_#type1#tearOff'](font) {
      return new font$.Font.type1(font);
    }
    static courier() {
      return new font$.Font.type1(font$.Type1Fonts.courier);
    }
    static ['_#courier#tearOff']() {
      return font$.Font.courier();
    }
    static ['_#courierBold#tearOff']() {
      return font$.Font.courierBold();
    }
    static courierBold() {
      return new font$.Font.type1(font$.Type1Fonts.courierBold);
    }
    static ['_#courierBoldOblique#tearOff']() {
      return font$.Font.courierBoldOblique();
    }
    static courierBoldOblique() {
      return new font$.Font.type1(font$.Type1Fonts.courierBoldOblique);
    }
    static courierOblique() {
      return new font$.Font.type1(font$.Type1Fonts.courierOblique);
    }
    static ['_#courierOblique#tearOff']() {
      return font$.Font.courierOblique();
    }
    static helvetica() {
      return new font$.Font.type1(font$.Type1Fonts.helvetica);
    }
    static ['_#helvetica#tearOff']() {
      return font$.Font.helvetica();
    }
    static helveticaBold() {
      return new font$.Font.type1(font$.Type1Fonts.helveticaBold);
    }
    static ['_#helveticaBold#tearOff']() {
      return font$.Font.helveticaBold();
    }
    static ['_#helveticaBoldOblique#tearOff']() {
      return font$.Font.helveticaBoldOblique();
    }
    static helveticaBoldOblique() {
      return new font$.Font.type1(font$.Type1Fonts.helveticaBoldOblique);
    }
    static ['_#helveticaOblique#tearOff']() {
      return font$.Font.helveticaOblique();
    }
    static helveticaOblique() {
      return new font$.Font.type1(font$.Type1Fonts.helveticaOblique);
    }
    static times() {
      return new font$.Font.type1(font$.Type1Fonts.times);
    }
    static ['_#times#tearOff']() {
      return font$.Font.times();
    }
    static timesBold() {
      return new font$.Font.type1(font$.Type1Fonts.timesBold);
    }
    static ['_#timesBold#tearOff']() {
      return font$.Font.timesBold();
    }
    static timesBoldItalic() {
      return new font$.Font.type1(font$.Type1Fonts.timesBoldItalic);
    }
    static ['_#timesBoldItalic#tearOff']() {
      return font$.Font.timesBoldItalic();
    }
    static timesItalic() {
      return new font$.Font.type1(font$.Type1Fonts.timesItalic);
    }
    static ['_#timesItalic#tearOff']() {
      return font$.Font.timesItalic();
    }
    static symbol() {
      return new font$.Font.type1(font$.Type1Fonts.symbol);
    }
    static ['_#symbol#tearOff']() {
      return font$.Font.symbol();
    }
    static zapfDingbats() {
      return new font$.Font.type1(font$.Type1Fonts.zapfDingbats);
    }
    static ['_#zapfDingbats#tearOff']() {
      return font$.Font.zapfDingbats();
    }
    static ['_#ttf#tearOff'](data) {
      return font$.Font.ttf(data);
    }
    static ttf(data) {
      return new font$.TtfFont.new(data);
    }
    get fontName() {
      return dart.nullCheck(font$.Font._type1Map[$_get](this.font));
    }
    buildFont(pdfDocument) {
      return pdfDocument.fonts[$firstWhere](dart.fn(font => font.subtype === "/Type1" && font.fontName === this.fontName, T$.PdfFontTobool()), {orElse: dart.fn(() => {
          switch (this.font) {
            case C[160] || CT.C160:
              {
                return font.PdfFont.courier(pdfDocument);
              }
            case C[161] || CT.C161:
              {
                return font.PdfFont.courierBold(pdfDocument);
              }
            case C[162] || CT.C162:
              {
                return font.PdfFont.courierBoldOblique(pdfDocument);
              }
            case C[163] || CT.C163:
              {
                return font.PdfFont.courierOblique(pdfDocument);
              }
            case C[164] || CT.C164:
              {
                return font.PdfFont.helvetica(pdfDocument);
              }
            case C[165] || CT.C165:
              {
                return font.PdfFont.helveticaBold(pdfDocument);
              }
            case C[166] || CT.C166:
              {
                return font.PdfFont.helveticaBoldOblique(pdfDocument);
              }
            case C[167] || CT.C167:
              {
                return font.PdfFont.helveticaOblique(pdfDocument);
              }
            case C[168] || CT.C168:
              {
                return font.PdfFont.times(pdfDocument);
              }
            case C[169] || CT.C169:
              {
                return font.PdfFont.timesBold(pdfDocument);
              }
            case C[170] || CT.C170:
              {
                return font.PdfFont.timesBoldItalic(pdfDocument);
              }
            case C[171] || CT.C171:
              {
                return font.PdfFont.timesItalic(pdfDocument);
              }
            case C[172] || CT.C172:
              {
                return font.PdfFont.symbol(pdfDocument);
              }
            case C[173] || CT.C173:
              {
                return font.PdfFont.zapfDingbats(pdfDocument);
              }
            case null:
              {
                return font.PdfFont.helvetica(pdfDocument);
              }
          }
        }, T$.VoidToPdfFont())});
    }
    getFont(context) {
      if (this[_pdfFont] == null || !dart.nullCheck(this[_pdfFont]).pdfDocument[$_equals](context.document)) {
        let pdfDocument = context.document;
        this[_pdfFont] = this.buildFont(pdfDocument);
      }
      return dart.nullCheck(this[_pdfFont]);
    }
    toString() {
      return "<Type1 Font \"" + this.fontName + "\">";
    }
  };
  (font$.Font.new = function() {
    this[_pdfFont] = null;
    this[font$3] = null;
    ;
  }).prototype = font$.Font.prototype;
  (font$.Font.type1 = function(font) {
    this[_pdfFont] = null;
    this[font$3] = font;
    ;
  }).prototype = font$.Font.prototype;
  dart.addTypeTests(font$.Font);
  dart.addTypeCaches(font$.Font);
  dart.setMethodSignature(font$.Font, () => ({
    __proto__: dart.getMethods(font$.Font.__proto__),
    buildFont: dart.fnType(font.PdfFont, [document.PdfDocument]),
    getFont: dart.fnType(font.PdfFont, [widget$.Context])
  }));
  dart.setStaticMethodSignature(font$.Font, () => ['courier', 'courierBold', 'courierBoldOblique', 'courierOblique', 'helvetica', 'helveticaBold', 'helveticaBoldOblique', 'helveticaOblique', 'times', 'timesBold', 'timesBoldItalic', 'timesItalic', 'symbol', 'zapfDingbats', 'ttf']);
  dart.setGetterSignature(font$.Font, () => ({
    __proto__: dart.getGetters(font$.Font.__proto__),
    fontName: core.String
  }));
  dart.setLibraryUri(font$.Font, I[63]);
  dart.setFieldSignature(font$.Font, () => ({
    __proto__: dart.getFields(font$.Font.__proto__),
    font: dart.finalFieldType(dart.nullable(font$.Type1Fonts)),
    [_pdfFont]: dart.fieldType(dart.nullable(font.PdfFont))
  }));
  dart.setStaticFieldSignature(font$.Font, () => ['_type1Map']);
  dart.defineExtensionMethods(font$.Font, ['toString']);
  dart.defineLazy(font$.Font, {
    /*font$.Font._type1Map*/get _type1Map() {
      return C[174] || CT.C174;
    }
  }, false);
  var data$1 = dart.privateName(font$, "TtfFont.data");
  var protect$ = dart.privateName(font$, "TtfFont.protect");
  font$.TtfFont = class TtfFont extends font$.Font {
    get data() {
      return this[data$1];
    }
    set data(value) {
      super.data = value;
    }
    get protect() {
      return this[protect$];
    }
    set protect(value) {
      super.protect = value;
    }
    static ['_#new#tearOff'](data, opts) {
      let protect = opts && 'protect' in opts ? opts.protect : false;
      return new font$.TtfFont.new(data, {protect: protect});
    }
    buildFont(pdfDocument) {
      return new ttffont.PdfTtfFont.new(pdfDocument, this.data, {protect: this.protect});
    }
    get fontName() {
      if (this[_pdfFont] != null) {
        return dart.nullCheck(this[_pdfFont]).fontName;
      }
      let font = new ttf_parser.TtfParser.new(this.data);
      return font.fontName;
    }
    fontNameID(nameID) {
      let pdfFont = this[_pdfFont];
      if (pdfFont != null) {
        if (ttffont.PdfTtfFont.is(pdfFont)) {
          return pdfFont.font.getNameID(nameID);
        }
      }
      let font = new ttf_parser.TtfParser.new(this.data);
      return font.getNameID(nameID);
    }
    toString() {
      let font = new ttf_parser.TtfParser.new(this.data);
      return "<TrueType Font \"" + font.fontName + "\">";
    }
  };
  (font$.TtfFont.new = function(data, opts) {
    let protect = opts && 'protect' in opts ? opts.protect : false;
    this[data$1] = data;
    this[protect$] = protect;
    font$.TtfFont.__proto__.new.call(this);
    ;
  }).prototype = font$.TtfFont.prototype;
  dart.addTypeTests(font$.TtfFont);
  dart.addTypeCaches(font$.TtfFont);
  dart.setMethodSignature(font$.TtfFont, () => ({
    __proto__: dart.getMethods(font$.TtfFont.__proto__),
    fontNameID: dart.fnType(dart.nullable(core.String), [ttf_parser.TtfParserName])
  }));
  dart.setLibraryUri(font$.TtfFont, I[63]);
  dart.setFieldSignature(font$.TtfFont, () => ({
    __proto__: dart.getFields(font$.TtfFont.__proto__),
    data: dart.finalFieldType(typed_data.ByteData),
    protect: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(font$.TtfFont, ['toString']);
  decoration$.DecorationPosition = class DecorationPosition extends core._Enum {
    toString() {
      return "DecorationPosition." + this[_name];
    }
  };
  (decoration$.DecorationPosition.new = function(index, name) {
    decoration$.DecorationPosition.__proto__.new.call(this, index, name);
    ;
  }).prototype = decoration$.DecorationPosition.prototype;
  dart.addTypeTests(decoration$.DecorationPosition);
  dart.addTypeCaches(decoration$.DecorationPosition);
  dart.setLibraryUri(decoration$.DecorationPosition, I[58]);
  dart.setStaticFieldSignature(decoration$.DecorationPosition, () => ['values', 'background', 'foreground']);
  dart.defineExtensionMethods(decoration$.DecorationPosition, ['toString']);
  dart.defineLazy(decoration$.DecorationPosition, {
    /*decoration$.DecorationPosition.values*/get values() {
      return C[175] || CT.C175;
    },
    /*decoration$.DecorationPosition.background*/get background() {
      return C[105] || CT.C105;
    },
    /*decoration$.DecorationPosition.foreground*/get foreground() {
      return C[176] || CT.C176;
    }
  }, false);
  var image$3 = dart.privateName(decoration$, "DecorationImage.image");
  var fit$5 = dart.privateName(decoration$, "DecorationImage.fit");
  var alignment$4 = dart.privateName(decoration$, "DecorationImage.alignment");
  var dpi$ = dart.privateName(decoration$, "DecorationImage.dpi");
  decoration$.DecorationImage = class DecorationImage extends decoration$.DecorationGraphic {
    get image() {
      return this[image$3];
    }
    set image(value) {
      super.image = value;
    }
    get fit() {
      return this[fit$5];
    }
    set fit(value) {
      super.fit = value;
    }
    get alignment() {
      return this[alignment$4];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get dpi() {
      return this[dpi$];
    }
    set dpi(value) {
      super.dpi = value;
    }
    static ['_#new#tearOff'](opts) {
      let image = opts && 'image' in opts ? opts.image : null;
      let fit = opts && 'fit' in opts ? opts.fit : C[157] || CT.C157;
      let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
      let dpi = opts && 'dpi' in opts ? opts.dpi : null;
      return new decoration$.DecorationImage.new({image: image, fit: fit, alignment: alignment, dpi: dpi});
    }
    paint(context, box) {
      let t52, t52$;
      let _image = this.image.resolve(context, box.size, {dpi: this.dpi});
      let imageSize = new point$.PdfPoint.new(_image.width[$toDouble](), _image.height[$toDouble]());
      let sizes = geometry.applyBoxFit(this.fit, imageSize, box.size);
      let scaleX = dart.nullCheck(sizes.destination).x / dart.nullCheck(sizes.source).x;
      let scaleY = dart.nullCheck(sizes.destination).y / dart.nullCheck(sizes.source).y;
      let sourceRect = this.alignment.inscribe(dart.nullCheck(sizes.source), rect$.PdfRect.fromPoints(point$.PdfPoint.zero, imageSize));
      let destinationRect = this.alignment.inscribe(dart.nullCheck(sizes.destination), box);
      let mat = (t52 = vector_math_64.Matrix4.translationValues(destinationRect.x, destinationRect.y, 0.0), (() => {
        t52.scale(scaleX, scaleY, 1.0);
        t52.translate(-sourceRect.x, -sourceRect.y);
        return t52;
      })());
      t52$ = context.canvas;
      (() => {
        t52$.saveContext();
        t52$.drawBox(box);
        t52$.clipPath();
        t52$.setTransform(mat);
        t52$.drawImage(_image, 0.0, 0.0, imageSize.x, imageSize.y);
        t52$.restoreContext();
        return t52$;
      })();
    }
  };
  (decoration$.DecorationImage.new = function(opts) {
    let image = opts && 'image' in opts ? opts.image : null;
    let fit = opts && 'fit' in opts ? opts.fit : C[157] || CT.C157;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
    let dpi = opts && 'dpi' in opts ? opts.dpi : null;
    this[image$3] = image;
    this[fit$5] = fit;
    this[alignment$4] = alignment;
    this[dpi$] = dpi;
    decoration$.DecorationImage.__proto__.new.call(this);
    ;
  }).prototype = decoration$.DecorationImage.prototype;
  dart.addTypeTests(decoration$.DecorationImage);
  dart.addTypeCaches(decoration$.DecorationImage);
  dart.setMethodSignature(decoration$.DecorationImage, () => ({
    __proto__: dart.getMethods(decoration$.DecorationImage.__proto__),
    paint: dart.fnType(dart.void, [widget$.Context, rect$.PdfRect])
  }));
  dart.setLibraryUri(decoration$.DecorationImage, I[58]);
  dart.setFieldSignature(decoration$.DecorationImage, () => ({
    __proto__: dart.getFields(decoration$.DecorationImage.__proto__),
    image: dart.finalFieldType(image_provider.ImageProvider),
    fit: dart.finalFieldType(basic.BoxFit),
    alignment: dart.finalFieldType(geometry.Alignment),
    dpi: dart.finalFieldType(dart.nullable(core.double))
  }));
  decoration$.TileMode = class TileMode extends core._Enum {
    toString() {
      return "TileMode." + this[_name];
    }
  };
  (decoration$.TileMode.new = function(index, name) {
    decoration$.TileMode.__proto__.new.call(this, index, name);
    ;
  }).prototype = decoration$.TileMode.prototype;
  dart.addTypeTests(decoration$.TileMode);
  dart.addTypeCaches(decoration$.TileMode);
  dart.setLibraryUri(decoration$.TileMode, I[58]);
  dart.setStaticFieldSignature(decoration$.TileMode, () => ['values', 'clamp']);
  dart.defineExtensionMethods(decoration$.TileMode, ['toString']);
  dart.defineLazy(decoration$.TileMode, {
    /*decoration$.TileMode.values*/get values() {
      return C[177] || CT.C177;
    },
    /*decoration$.TileMode.clamp*/get clamp() {
      return C[178] || CT.C178;
    }
  }, false);
  var colors$1 = dart.privateName(decoration$, "Gradient.colors");
  var stops$0 = dart.privateName(decoration$, "Gradient.stops");
  decoration$.Gradient = class Gradient extends core.Object {
    get colors() {
      return this[colors$1];
    }
    set colors(value) {
      super.colors = value;
    }
    get stops() {
      return this[stops$0];
    }
    set stops(value) {
      super.stops = value;
    }
  };
  (decoration$.Gradient.new = function(opts) {
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    this[colors$1] = colors;
    this[stops$0] = stops;
    ;
  }).prototype = decoration$.Gradient.prototype;
  dart.addTypeTests(decoration$.Gradient);
  dart.addTypeCaches(decoration$.Gradient);
  dart.setLibraryUri(decoration$.Gradient, I[58]);
  dart.setFieldSignature(decoration$.Gradient, () => ({
    __proto__: dart.getFields(decoration$.Gradient.__proto__),
    colors: dart.finalFieldType(core.List$(color$.PdfColor)),
    stops: dart.finalFieldType(dart.nullable(core.List$(core.double)))
  }));
  var begin$ = dart.privateName(decoration$, "LinearGradient.begin");
  var end$ = dart.privateName(decoration$, "LinearGradient.end");
  var tileMode$ = dart.privateName(decoration$, "LinearGradient.tileMode");
  decoration$.LinearGradient = class LinearGradient extends decoration$.Gradient {
    get begin() {
      return this[begin$];
    }
    set begin(value) {
      super.begin = value;
    }
    get end() {
      return this[end$];
    }
    set end(value) {
      super.end = value;
    }
    get tileMode() {
      return this[tileMode$];
    }
    set tileMode(value) {
      super.tileMode = value;
    }
    static ['_#new#tearOff'](opts) {
      let begin = opts && 'begin' in opts ? opts.begin : C[179] || CT.C179;
      let end = opts && 'end' in opts ? opts.end : C[180] || CT.C180;
      let colors = opts && 'colors' in opts ? opts.colors : null;
      let stops = opts && 'stops' in opts ? opts.stops : null;
      let tileMode = opts && 'tileMode' in opts ? opts.tileMode : C[178] || CT.C178;
      return new decoration$.LinearGradient.new({begin: begin, end: end, colors: colors, stops: stops, tileMode: tileMode});
    }
    paint(context, box) {
      let t54, t54$;
      if (this.colors[$isEmpty]) {
        return;
      }
      if (this.colors[$length] === 1) {
        t54 = context.canvas;
        (() => {
          t54.setFillColor(this.colors[$first]);
          t54.fillPath();
          return t54;
        })();
      }
      if (!(this.stops == null || dart.nullCheck(this.stops)[$length] === this.colors[$length])) dart.assertFailed(null, I[64], 142, 12, "stops == null || stops!.length == colors.length");
      t54$ = context.canvas;
      (() => {
        t54$.saveContext();
        t54$.clipPath();
        t54$.applyShader(new shading.PdfShading.new(context.document, {shadingType: shading.PdfShadingType.axial, boundingBox: box, function: $function.PdfBaseFunction.colorsAndStops(context.document, this.colors, this.stops), start: this.begin.withinRect(box), end: this.end.withinRect(box), extendStart: true, extendEnd: true}));
        t54$.restoreContext();
        return t54$;
      })();
    }
  };
  (decoration$.LinearGradient.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : C[179] || CT.C179;
    let end = opts && 'end' in opts ? opts.end : C[180] || CT.C180;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    let tileMode = opts && 'tileMode' in opts ? opts.tileMode : C[178] || CT.C178;
    this[begin$] = begin;
    this[end$] = end;
    this[tileMode$] = tileMode;
    decoration$.LinearGradient.__proto__.new.call(this, {colors: colors, stops: stops});
    ;
  }).prototype = decoration$.LinearGradient.prototype;
  dart.addTypeTests(decoration$.LinearGradient);
  dart.addTypeCaches(decoration$.LinearGradient);
  dart.setMethodSignature(decoration$.LinearGradient, () => ({
    __proto__: dart.getMethods(decoration$.LinearGradient.__proto__),
    paint: dart.fnType(dart.void, [widget$.Context, rect$.PdfRect])
  }));
  dart.setLibraryUri(decoration$.LinearGradient, I[58]);
  dart.setFieldSignature(decoration$.LinearGradient, () => ({
    __proto__: dart.getFields(decoration$.LinearGradient.__proto__),
    begin: dart.finalFieldType(geometry.Alignment),
    end: dart.finalFieldType(geometry.Alignment),
    tileMode: dart.finalFieldType(decoration$.TileMode)
  }));
  var center$ = dart.privateName(decoration$, "RadialGradient.center");
  var radius$ = dart.privateName(decoration$, "RadialGradient.radius");
  var tileMode$0 = dart.privateName(decoration$, "RadialGradient.tileMode");
  var focal$ = dart.privateName(decoration$, "RadialGradient.focal");
  var focalRadius$ = dart.privateName(decoration$, "RadialGradient.focalRadius");
  decoration$.RadialGradient = class RadialGradient extends decoration$.Gradient {
    get center() {
      return this[center$];
    }
    set center(value) {
      super.center = value;
    }
    get radius() {
      return this[radius$];
    }
    set radius(value) {
      super.radius = value;
    }
    get tileMode() {
      return this[tileMode$0];
    }
    set tileMode(value) {
      super.tileMode = value;
    }
    get focal() {
      return this[focal$];
    }
    set focal(value) {
      super.focal = value;
    }
    get focalRadius() {
      return this[focalRadius$];
    }
    set focalRadius(value) {
      super.focalRadius = value;
    }
    static ['_#new#tearOff'](opts) {
      let center = opts && 'center' in opts ? opts.center : C[19] || CT.C19;
      let radius = opts && 'radius' in opts ? opts.radius : 0.5;
      let colors = opts && 'colors' in opts ? opts.colors : null;
      let stops = opts && 'stops' in opts ? opts.stops : null;
      let tileMode = opts && 'tileMode' in opts ? opts.tileMode : C[178] || CT.C178;
      let focal = opts && 'focal' in opts ? opts.focal : null;
      let focalRadius = opts && 'focalRadius' in opts ? opts.focalRadius : 0;
      return new decoration$.RadialGradient.new({center: center, radius: radius, colors: colors, stops: stops, tileMode: tileMode, focal: focal, focalRadius: focalRadius});
    }
    paint(context, box) {
      let t54, t54$, t54$0;
      if (this.colors[$isEmpty]) {
        return;
      }
      if (this.colors[$length] === 1) {
        t54 = context.canvas;
        (() => {
          t54.setFillColor(this.colors[$first]);
          t54.fillPath();
          return t54;
        })();
      }
      if (!(this.stops == null || dart.nullCheck(this.stops)[$length] === this.colors[$length])) dart.assertFailed(null, I[64], 211, 12, "stops == null || stops!.length == colors.length");
      let _focal = (t54$ = this.focal, t54$ == null ? this.center : t54$);
      let _radius = math.min(core.double, box.width, box.height);
      t54$0 = context.canvas;
      (() => {
        t54$0.saveContext();
        t54$0.clipPath();
        t54$0.applyShader(new shading.PdfShading.new(context.document, {shadingType: shading.PdfShadingType.radial, boundingBox: box, function: $function.PdfBaseFunction.colorsAndStops(context.document, this.colors, this.stops), start: _focal.withinRect(box), end: this.center.withinRect(box), radius0: this.focalRadius * _radius, radius1: this.radius * _radius, extendStart: true, extendEnd: true}));
        t54$0.restoreContext();
        return t54$0;
      })();
    }
  };
  (decoration$.RadialGradient.new = function(opts) {
    let center = opts && 'center' in opts ? opts.center : C[19] || CT.C19;
    let radius = opts && 'radius' in opts ? opts.radius : 0.5;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    let tileMode = opts && 'tileMode' in opts ? opts.tileMode : C[178] || CT.C178;
    let focal = opts && 'focal' in opts ? opts.focal : null;
    let focalRadius = opts && 'focalRadius' in opts ? opts.focalRadius : 0;
    this[center$] = center;
    this[radius$] = radius;
    this[tileMode$0] = tileMode;
    this[focal$] = focal;
    this[focalRadius$] = focalRadius;
    decoration$.RadialGradient.__proto__.new.call(this, {colors: colors, stops: stops});
    ;
  }).prototype = decoration$.RadialGradient.prototype;
  dart.addTypeTests(decoration$.RadialGradient);
  dart.addTypeCaches(decoration$.RadialGradient);
  dart.setMethodSignature(decoration$.RadialGradient, () => ({
    __proto__: dart.getMethods(decoration$.RadialGradient.__proto__),
    paint: dart.fnType(dart.void, [widget$.Context, rect$.PdfRect])
  }));
  dart.setLibraryUri(decoration$.RadialGradient, I[58]);
  dart.setFieldSignature(decoration$.RadialGradient, () => ({
    __proto__: dart.getFields(decoration$.RadialGradient.__proto__),
    center: dart.finalFieldType(geometry.Alignment),
    radius: dart.finalFieldType(core.double),
    tileMode: dart.finalFieldType(decoration$.TileMode),
    focal: dart.finalFieldType(dart.nullable(geometry.Alignment)),
    focalRadius: dart.finalFieldType(core.double)
  }));
  var color$12 = dart.privateName(decoration$, "BoxShadow.color");
  var offset$1 = dart.privateName(decoration$, "BoxShadow.offset");
  var blurRadius$ = dart.privateName(decoration$, "BoxShadow.blurRadius");
  var spreadRadius$ = dart.privateName(decoration$, "BoxShadow.spreadRadius");
  var _rect = dart.privateName(decoration$, "_rect");
  var _ellipse = dart.privateName(decoration$, "_ellipse");
  decoration$.BoxShadow = class BoxShadow extends core.Object {
    get color() {
      return this[color$12];
    }
    set color(value) {
      super.color = value;
    }
    get offset() {
      return this[offset$1];
    }
    set offset(value) {
      super.offset = value;
    }
    get blurRadius() {
      return this[blurRadius$];
    }
    set blurRadius(value) {
      super.blurRadius = value;
    }
    get spreadRadius() {
      return this[spreadRadius$];
    }
    set spreadRadius(value) {
      super.spreadRadius = value;
    }
    static ['_#new#tearOff'](opts) {
      let color = opts && 'color' in opts ? opts.color : C[10] || CT.C10;
      let offset = opts && 'offset' in opts ? opts.offset : C[71] || CT.C71;
      let blurRadius = opts && 'blurRadius' in opts ? opts.blurRadius : 0;
      let spreadRadius = opts && 'spreadRadius' in opts ? opts.spreadRadius : 0;
      return new decoration$.BoxShadow.new({color: color, offset: offset, blurRadius: blurRadius, spreadRadius: spreadRadius});
    }
    [_rect](width, height) {
      let shadow = new image.Image.new((width + this.spreadRadius * 2)[$round](), (height + this.spreadRadius * 2)[$round]());
      fill_rect.fillRect(shadow, this.spreadRadius[$round](), this.spreadRadius[$round](), (this.spreadRadius + width)[$round](), (this.spreadRadius + height)[$round](), this.color.toInt());
      gaussian_blur.gaussianBlur(shadow, this.blurRadius[$round]());
      return shadow;
    }
    [_ellipse](width, height) {
      let shadow = new image.Image.new((width + this.spreadRadius * 2)[$round](), (height + this.spreadRadius * 2)[$round]());
      draw_circle.fillCircle(shadow, (this.spreadRadius + width / 2)[$round](), (this.spreadRadius + height / 2)[$round](), (width / 2)[$round](), this.color.toInt());
      gaussian_blur.gaussianBlur(shadow, this.blurRadius[$round]());
      return shadow;
    }
  };
  (decoration$.BoxShadow.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : C[10] || CT.C10;
    let offset = opts && 'offset' in opts ? opts.offset : C[71] || CT.C71;
    let blurRadius = opts && 'blurRadius' in opts ? opts.blurRadius : 0;
    let spreadRadius = opts && 'spreadRadius' in opts ? opts.spreadRadius : 0;
    this[color$12] = color;
    this[offset$1] = offset;
    this[blurRadius$] = blurRadius;
    this[spreadRadius$] = spreadRadius;
    ;
  }).prototype = decoration$.BoxShadow.prototype;
  dart.addTypeTests(decoration$.BoxShadow);
  dart.addTypeCaches(decoration$.BoxShadow);
  dart.setMethodSignature(decoration$.BoxShadow, () => ({
    __proto__: dart.getMethods(decoration$.BoxShadow.__proto__),
    [_rect]: dart.fnType(image.Image, [core.double, core.double]),
    [_ellipse]: dart.fnType(image.Image, [core.double, core.double])
  }));
  dart.setLibraryUri(decoration$.BoxShadow, I[58]);
  dart.setFieldSignature(decoration$.BoxShadow, () => ({
    __proto__: dart.getFields(decoration$.BoxShadow.__proto__),
    color: dart.finalFieldType(color$.PdfColor),
    offset: dart.finalFieldType(point$.PdfPoint),
    blurRadius: dart.finalFieldType(core.double),
    spreadRadius: dart.finalFieldType(core.double)
  }));
  decoration$.BoxShape = class BoxShape extends core._Enum {
    toString() {
      return "BoxShape." + this[_name];
    }
  };
  (decoration$.BoxShape.new = function(index, name) {
    decoration$.BoxShape.__proto__.new.call(this, index, name);
    ;
  }).prototype = decoration$.BoxShape.prototype;
  dart.addTypeTests(decoration$.BoxShape);
  dart.addTypeCaches(decoration$.BoxShape);
  dart.setLibraryUri(decoration$.BoxShape, I[58]);
  dart.setStaticFieldSignature(decoration$.BoxShape, () => ['values', 'circle', 'rectangle']);
  dart.defineExtensionMethods(decoration$.BoxShape, ['toString']);
  dart.defineLazy(decoration$.BoxShape, {
    /*decoration$.BoxShape.values*/get values() {
      return C[181] || CT.C181;
    },
    /*decoration$.BoxShape.circle*/get circle() {
      return C[13] || CT.C13;
    },
    /*decoration$.BoxShape.rectangle*/get rectangle() {
      return C[12] || CT.C12;
    }
  }, false);
  decoration$.PaintPhase = class PaintPhase extends core._Enum {
    toString() {
      return "PaintPhase." + this[_name];
    }
  };
  (decoration$.PaintPhase.new = function(index, name) {
    decoration$.PaintPhase.__proto__.new.call(this, index, name);
    ;
  }).prototype = decoration$.PaintPhase.prototype;
  dart.addTypeTests(decoration$.PaintPhase);
  dart.addTypeCaches(decoration$.PaintPhase);
  dart.setLibraryUri(decoration$.PaintPhase, I[58]);
  dart.setStaticFieldSignature(decoration$.PaintPhase, () => ['values', 'all', 'background', 'foreground']);
  dart.defineExtensionMethods(decoration$.PaintPhase, ['toString']);
  dart.defineLazy(decoration$.PaintPhase, {
    /*decoration$.PaintPhase.values*/get values() {
      return C[182] || CT.C182;
    },
    /*decoration$.PaintPhase.all*/get all() {
      return C[183] || CT.C183;
    },
    /*decoration$.PaintPhase.background*/get background() {
      return C[184] || CT.C184;
    },
    /*decoration$.PaintPhase.foreground*/get foreground() {
      return C[185] || CT.C185;
    }
  }, false);
  const color$13 = BoxDecoration_color;
  const border$3 = BoxDecoration_border;
  const borderRadius$ = BoxDecoration_borderRadius;
  const shape$0 = BoxDecoration_shape;
  const image$4 = BoxDecoration_image;
  const gradient$0 = BoxDecoration_gradient;
  const boxShadow$ = BoxDecoration_boxShadow;
  decoration$.BoxDecoration = class BoxDecoration extends core.Object {
    get color() {
      return this[color$13];
    }
    set color(value) {
      super.color = value;
    }
    get border() {
      return this[border$3];
    }
    set border(value) {
      super.border = value;
    }
    get borderRadius() {
      return this[borderRadius$];
    }
    set borderRadius(value) {
      super.borderRadius = value;
    }
    get shape() {
      return this[shape$0];
    }
    set shape(value) {
      super.shape = value;
    }
    get image() {
      return this[image$4];
    }
    set image(value) {
      super.image = value;
    }
    get gradient() {
      return this[gradient$0];
    }
    set gradient(value) {
      super.gradient = value;
    }
    get boxShadow() {
      return this[boxShadow$];
    }
    set boxShadow(value) {
      super.boxShadow = value;
    }
    static ['_#new#tearOff'](opts) {
      let color = opts && 'color' in opts ? opts.color : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
      let boxShadow = opts && 'boxShadow' in opts ? opts.boxShadow : null;
      let gradient = opts && 'gradient' in opts ? opts.gradient : null;
      let image = opts && 'image' in opts ? opts.image : null;
      let shape = opts && 'shape' in opts ? opts.shape : C[12] || CT.C12;
      return new decoration$.BoxDecoration.new({color: color, border: border, borderRadius: borderRadius, boxShadow: boxShadow, gradient: gradient, image: image, shape: shape});
    }
    paint(context, box, phase = C[183] || CT.C183) {
      let t58, t58$;
      if (phase === decoration$.PaintPhase.all || phase === decoration$.PaintPhase.background) {
        if (this.color != null) {
          switch (this.shape) {
            case C[12] || CT.C12:
              {
                if (this.borderRadius == null) {
                  if (this.boxShadow != null) {
                    for (let s of dart.nullCheck(this.boxShadow)) {
                      let i = s[_rect](box.width, box.height);
                      let m = image$.PdfImage.fromImage(context.document, {image: i});
                      context.canvas.drawImage(m, box.x + s.offset.x - s.spreadRadius, box.y - s.offset.y - s.spreadRadius);
                    }
                  }
                  context.canvas.drawBox(box);
                } else {
                  if (this.boxShadow != null) {
                    for (let s of dart.nullCheck(this.boxShadow)) {
                      let i = s[_rect](box.width, box.height);
                      let m = image$.PdfImage.fromImage(context.document, {image: i});
                      context.canvas.drawImage(m, box.x + s.offset.x - s.spreadRadius, box.y - s.offset.y - s.spreadRadius);
                    }
                  }
                  dart.nullCheck(this.borderRadius).paint(context, box);
                }
                break;
              }
            case C[13] || CT.C13:
              {
                if (this.boxShadow != null && box.width === box.height) {
                  for (let s of dart.nullCheck(this.boxShadow)) {
                    let i = s[_ellipse](box.width, box.height);
                    let m = image$.PdfImage.fromImage(context.document, {image: i});
                    context.canvas.drawImage(m, box.x + s.offset.x - s.spreadRadius, box.y - s.offset.y - s.spreadRadius);
                  }
                }
                context.canvas.drawEllipse(box.x + box.width / 2.0, box.y + box.height / 2.0, box.width / 2.0, box.height / 2.0);
                break;
              }
          }
          t58 = context.canvas;
          (() => {
            t58.setFillColor(this.color);
            t58.fillPath();
            return t58;
          })();
        }
        if (this.gradient != null) {
          switch (this.shape) {
            case C[12] || CT.C12:
              {
                if (this.borderRadius == null) {
                  context.canvas.drawBox(box);
                } else {
                  dart.nullCheck(this.borderRadius).paint(context, box);
                }
                break;
              }
            case C[13] || CT.C13:
              {
                context.canvas.drawEllipse(box.x + box.width / 2.0, box.y + box.height / 2.0, box.width / 2.0, box.height / 2.0);
                break;
              }
          }
          dart.nullCheck(this.gradient).paint(context, box);
        }
        if (this.image != null) {
          context.canvas.saveContext();
          switch (this.shape) {
            case C[13] || CT.C13:
              {
                t58$ = context.canvas;
                (() => {
                  t58$.drawEllipse(box.x + box.width / 2.0, box.y + box.height / 2.0, box.width / 2.0, box.height / 2.0);
                  t58$.clipPath();
                  return t58$;
                })();
                break;
              }
            case C[12] || CT.C12:
              {
                if (this.borderRadius != null) {
                  dart.nullCheck(this.borderRadius).paint(context, box);
                  context.canvas.clipPath();
                }
                break;
              }
          }
          dart.nullCheck(this.image).paint(context, box);
          context.canvas.restoreContext();
        }
      }
      if (phase === decoration$.PaintPhase.all || phase === decoration$.PaintPhase.foreground) {
        if (this.border != null) {
          dart.nullCheck(this.border).paint(context, box, {shape: this.shape, borderRadius: this.borderRadius});
        }
      }
    }
  };
  (decoration$.BoxDecoration.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
    let boxShadow = opts && 'boxShadow' in opts ? opts.boxShadow : null;
    let gradient = opts && 'gradient' in opts ? opts.gradient : null;
    let image = opts && 'image' in opts ? opts.image : null;
    let shape = opts && 'shape' in opts ? opts.shape : C[12] || CT.C12;
    this[color$13] = color;
    this[border$3] = border;
    this[borderRadius$] = borderRadius;
    this[boxShadow$] = boxShadow;
    this[gradient$0] = gradient;
    this[image$4] = image;
    this[shape$0] = shape;
    ;
  }).prototype = decoration$.BoxDecoration.prototype;
  dart.addTypeTests(decoration$.BoxDecoration);
  dart.addTypeCaches(decoration$.BoxDecoration);
  dart.setMethodSignature(decoration$.BoxDecoration, () => ({
    __proto__: dart.getMethods(decoration$.BoxDecoration.__proto__),
    paint: dart.fnType(dart.void, [widget$.Context, rect$.PdfRect], [decoration$.PaintPhase])
  }));
  dart.setLibraryUri(decoration$.BoxDecoration, I[58]);
  dart.setFieldSignature(decoration$.BoxDecoration, () => ({
    __proto__: dart.getFields(decoration$.BoxDecoration.__proto__),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    border: dart.finalFieldType(dart.nullable(box_border.BoxBorder)),
    borderRadius: dart.finalFieldType(dart.nullable(border_radius.BorderRadius)),
    shape: dart.finalFieldType(decoration$.BoxShape),
    image: dart.finalFieldType(dart.nullable(decoration$.DecorationGraphic)),
    gradient: dart.finalFieldType(dart.nullable(decoration$.Gradient)),
    boxShadow: dart.finalFieldType(dart.nullable(core.List$(decoration$.BoxShadow)))
  }));
  text_style.FontWeight = class FontWeight extends core._Enum {
    toString() {
      return "FontWeight." + this[_name];
    }
  };
  (text_style.FontWeight.new = function(index, name) {
    text_style.FontWeight.__proto__.new.call(this, index, name);
    ;
  }).prototype = text_style.FontWeight.prototype;
  dart.addTypeTests(text_style.FontWeight);
  dart.addTypeCaches(text_style.FontWeight);
  dart.setLibraryUri(text_style.FontWeight, I[65]);
  dart.setStaticFieldSignature(text_style.FontWeight, () => ['values', 'normal', 'bold']);
  dart.defineExtensionMethods(text_style.FontWeight, ['toString']);
  dart.defineLazy(text_style.FontWeight, {
    /*text_style.FontWeight.values*/get values() {
      return C[186] || CT.C186;
    },
    /*text_style.FontWeight.normal*/get normal() {
      return C[187] || CT.C187;
    },
    /*text_style.FontWeight.bold*/get bold() {
      return C[188] || CT.C188;
    }
  }, false);
  text_style.FontStyle = class FontStyle extends core._Enum {
    toString() {
      return "FontStyle." + this[_name];
    }
  };
  (text_style.FontStyle.new = function(index, name) {
    text_style.FontStyle.__proto__.new.call(this, index, name);
    ;
  }).prototype = text_style.FontStyle.prototype;
  dart.addTypeTests(text_style.FontStyle);
  dart.addTypeCaches(text_style.FontStyle);
  dart.setLibraryUri(text_style.FontStyle, I[65]);
  dart.setStaticFieldSignature(text_style.FontStyle, () => ['values', 'normal', 'italic']);
  dart.defineExtensionMethods(text_style.FontStyle, ['toString']);
  dart.defineLazy(text_style.FontStyle, {
    /*text_style.FontStyle.values*/get values() {
      return C[189] || CT.C189;
    },
    /*text_style.FontStyle.normal*/get normal() {
      return C[190] || CT.C190;
    },
    /*text_style.FontStyle.italic*/get italic() {
      return C[191] || CT.C191;
    }
  }, false);
  text_style.TextDecorationStyle = class TextDecorationStyle extends core._Enum {
    toString() {
      return "TextDecorationStyle." + this[_name];
    }
  };
  (text_style.TextDecorationStyle.new = function(index, name) {
    text_style.TextDecorationStyle.__proto__.new.call(this, index, name);
    ;
  }).prototype = text_style.TextDecorationStyle.prototype;
  dart.addTypeTests(text_style.TextDecorationStyle);
  dart.addTypeCaches(text_style.TextDecorationStyle);
  dart.setLibraryUri(text_style.TextDecorationStyle, I[65]);
  dart.setStaticFieldSignature(text_style.TextDecorationStyle, () => ['values', 'solid', 'double']);
  dart.defineExtensionMethods(text_style.TextDecorationStyle, ['toString']);
  dart.defineLazy(text_style.TextDecorationStyle, {
    /*text_style.TextDecorationStyle.values*/get values() {
      return C[192] || CT.C192;
    },
    /*text_style.TextDecorationStyle.solid*/get solid() {
      return C[193] || CT.C193;
    },
    /*text_style.TextDecorationStyle.double*/get double() {
      return C[194] || CT.C194;
    }
  }, false);
  var _mask$ = dart.privateName(text_style, "TextDecoration._mask");
  var _mask = dart.privateName(text_style, "_mask");
  text_style.TextDecoration = class TextDecoration extends core.Object {
    get [_mask]() {
      return this[_mask$];
    }
    set [_mask](value) {
      super[_mask] = value;
    }
    static ['_#_#tearOff'](_mask) {
      return new text_style.TextDecoration.__(_mask);
    }
    static combine(decorations) {
      let mask = 0;
      for (let decoration of decorations) {
        mask = (mask | decoration[_mask]) >>> 0;
      }
      return new text_style.TextDecoration.__(mask);
    }
    static ['_#combine#tearOff'](decorations) {
      return text_style.TextDecoration.combine(decorations);
    }
    merge(other) {
      if (other == null) {
        return this;
      }
      return new text_style.TextDecoration.__((this[_mask] | other[_mask]) >>> 0);
    }
    contains(other) {
      return (this[_mask] | other[_mask]) >>> 0 === this[_mask];
    }
    _equals(other) {
      if (other == null) return false;
      if (!text_style.TextDecoration.is(other)) {
        return false;
      }
      let typedOther = other;
      return this[_mask] === typedOther[_mask];
    }
    get hashCode() {
      return this[_mask][$hashCode];
    }
    toString() {
      if (this[_mask] === 0) {
        return "TextDecoration.none";
      }
      let values = T$.JSArrayOfString().of([]);
      if ((this[_mask] & text_style.TextDecoration.underline[_mask]) !== 0) {
        values[$add]("underline");
      }
      if ((this[_mask] & text_style.TextDecoration.overline[_mask]) !== 0) {
        values[$add]("overline");
      }
      if ((this[_mask] & text_style.TextDecoration.lineThrough[_mask]) !== 0) {
        values[$add]("lineThrough");
      }
      if (values[$length] === 1) {
        return "TextDecoration." + values[$_get](0);
      }
      return "TextDecoration.combine([" + values[$join](", ") + "])";
    }
  };
  (text_style.TextDecoration.__ = function(_mask) {
    this[_mask$] = _mask;
    ;
  }).prototype = text_style.TextDecoration.prototype;
  dart.addTypeTests(text_style.TextDecoration);
  dart.addTypeCaches(text_style.TextDecoration);
  dart.setMethodSignature(text_style.TextDecoration, () => ({
    __proto__: dart.getMethods(text_style.TextDecoration.__proto__),
    merge: dart.fnType(text_style.TextDecoration, [dart.nullable(text_style.TextDecoration)]),
    contains: dart.fnType(core.bool, [text_style.TextDecoration]),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setStaticMethodSignature(text_style.TextDecoration, () => ['combine']);
  dart.setLibraryUri(text_style.TextDecoration, I[65]);
  dart.setFieldSignature(text_style.TextDecoration, () => ({
    __proto__: dart.getFields(text_style.TextDecoration.__proto__),
    [_mask]: dart.finalFieldType(core.int)
  }));
  dart.setStaticFieldSignature(text_style.TextDecoration, () => ['none', 'underline', 'overline', 'lineThrough']);
  dart.defineExtensionMethods(text_style.TextDecoration, ['_equals', 'toString']);
  dart.defineExtensionAccessors(text_style.TextDecoration, ['hashCode']);
  dart.defineLazy(text_style.TextDecoration, {
    /*text_style.TextDecoration.none*/get none() {
      return C[195] || CT.C195;
    },
    /*text_style.TextDecoration.underline*/get underline() {
      return C[196] || CT.C196;
    },
    /*text_style.TextDecoration.overline*/get overline() {
      return C[197] || CT.C197;
    },
    /*text_style.TextDecoration.lineThrough*/get lineThrough() {
      return C[198] || CT.C198;
    }
  }, false);
  var inherit$0 = dart.privateName(text_style, "TextStyle.inherit");
  var color$14 = dart.privateName(text_style, "TextStyle.color");
  var fontNormal$ = dart.privateName(text_style, "TextStyle.fontNormal");
  var fontBold$ = dart.privateName(text_style, "TextStyle.fontBold");
  var fontItalic$ = dart.privateName(text_style, "TextStyle.fontItalic");
  var fontBoldItalic$ = dart.privateName(text_style, "TextStyle.fontBoldItalic");
  var fontFallback$ = dart.privateName(text_style, "TextStyle.fontFallback");
  var fontSize$0 = dart.privateName(text_style, "TextStyle.fontSize");
  var fontWeight$0 = dart.privateName(text_style, "TextStyle.fontWeight");
  var fontStyle$0 = dart.privateName(text_style, "TextStyle.fontStyle");
  var letterSpacing$ = dart.privateName(text_style, "TextStyle.letterSpacing");
  var lineSpacing$ = dart.privateName(text_style, "TextStyle.lineSpacing");
  var wordSpacing$ = dart.privateName(text_style, "TextStyle.wordSpacing");
  var height$5 = dart.privateName(text_style, "TextStyle.height");
  var background$ = dart.privateName(text_style, "TextStyle.background");
  var decoration$7 = dart.privateName(text_style, "TextStyle.decoration");
  var decorationColor$ = dart.privateName(text_style, "TextStyle.decorationColor");
  var decorationStyle$ = dart.privateName(text_style, "TextStyle.decorationStyle");
  var decorationThickness$ = dart.privateName(text_style, "TextStyle.decorationThickness");
  var renderingMode$ = dart.privateName(text_style, "TextStyle.renderingMode");
  text_style.TextStyle = class TextStyle extends core.Object {
    get inherit() {
      return this[inherit$0];
    }
    set inherit(value) {
      super.inherit = value;
    }
    get color() {
      return this[color$14];
    }
    set color(value) {
      super.color = value;
    }
    get fontNormal() {
      return this[fontNormal$];
    }
    set fontNormal(value) {
      super.fontNormal = value;
    }
    get fontBold() {
      return this[fontBold$];
    }
    set fontBold(value) {
      super.fontBold = value;
    }
    get fontItalic() {
      return this[fontItalic$];
    }
    set fontItalic(value) {
      super.fontItalic = value;
    }
    get fontBoldItalic() {
      return this[fontBoldItalic$];
    }
    set fontBoldItalic(value) {
      super.fontBoldItalic = value;
    }
    get fontFallback() {
      return this[fontFallback$];
    }
    set fontFallback(value) {
      super.fontFallback = value;
    }
    get fontSize() {
      return this[fontSize$0];
    }
    set fontSize(value) {
      super.fontSize = value;
    }
    get fontWeight() {
      return this[fontWeight$0];
    }
    set fontWeight(value) {
      super.fontWeight = value;
    }
    get fontStyle() {
      return this[fontStyle$0];
    }
    set fontStyle(value) {
      super.fontStyle = value;
    }
    get letterSpacing() {
      return this[letterSpacing$];
    }
    set letterSpacing(value) {
      super.letterSpacing = value;
    }
    get lineSpacing() {
      return this[lineSpacing$];
    }
    set lineSpacing(value) {
      super.lineSpacing = value;
    }
    get wordSpacing() {
      return this[wordSpacing$];
    }
    set wordSpacing(value) {
      super.wordSpacing = value;
    }
    get height() {
      return this[height$5];
    }
    set height(value) {
      super.height = value;
    }
    get background() {
      return this[background$];
    }
    set background(value) {
      super.background = value;
    }
    get decoration() {
      return this[decoration$7];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get decorationColor() {
      return this[decorationColor$];
    }
    set decorationColor(value) {
      super.decorationColor = value;
    }
    get decorationStyle() {
      return this[decorationStyle$];
    }
    set decorationStyle(value) {
      super.decorationStyle = value;
    }
    get decorationThickness() {
      return this[decorationThickness$];
    }
    set decorationThickness(value) {
      super.decorationThickness = value;
    }
    get renderingMode() {
      return this[renderingMode$];
    }
    set renderingMode(value) {
      super.renderingMode = value;
    }
    static ['_#new#tearOff'](opts) {
      let inherit = opts && 'inherit' in opts ? opts.inherit : true;
      let color = opts && 'color' in opts ? opts.color : null;
      let font = opts && 'font' in opts ? opts.font : null;
      let fontNormal = opts && 'fontNormal' in opts ? opts.fontNormal : null;
      let fontBold = opts && 'fontBold' in opts ? opts.fontBold : null;
      let fontItalic = opts && 'fontItalic' in opts ? opts.fontItalic : null;
      let fontBoldItalic = opts && 'fontBoldItalic' in opts ? opts.fontBoldItalic : null;
      let fontFallback = opts && 'fontFallback' in opts ? opts.fontFallback : C[199] || CT.C199;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let lineSpacing = opts && 'lineSpacing' in opts ? opts.lineSpacing : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let renderingMode = opts && 'renderingMode' in opts ? opts.renderingMode : null;
      return new text_style.TextStyle.new({inherit: inherit, color: color, font: font, fontNormal: fontNormal, fontBold: fontBold, fontItalic: fontItalic, fontBoldItalic: fontBoldItalic, fontFallback: fontFallback, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, letterSpacing: letterSpacing, wordSpacing: wordSpacing, lineSpacing: lineSpacing, height: height, background: background, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, decorationThickness: decorationThickness, renderingMode: renderingMode});
    }
    static defaultStyle() {
      return new text_style.TextStyle.new({inherit: false, color: colors.PdfColors.black, fontNormal: font$.Font.helvetica(), fontBold: font$.Font.helveticaBold(), fontItalic: font$.Font.helveticaOblique(), fontBoldItalic: font$.Font.helveticaBoldOblique(), fontFallback: C[199] || CT.C199, fontSize: 12, fontWeight: text_style.FontWeight.normal, fontStyle: text_style.FontStyle.normal, letterSpacing: 0.0, wordSpacing: 1.0, lineSpacing: 0.0, height: 1.0, decoration: text_style.TextDecoration.none, decorationColor: null, decorationStyle: text_style.TextDecorationStyle.solid, decorationThickness: 1.0, renderingMode: graphics.PdfTextRenderingMode.fill});
    }
    static ['_#defaultStyle#tearOff']() {
      return text_style.TextStyle.defaultStyle();
    }
    copyWith(opts) {
      let t64, t64$, t64$0, t64$1, t64$2, t64$3, t64$4, t64$5, t64$6, t64$7, t64$8, t64$9, t64$10, t64$11, t64$12, t64$13, t64$14, t64$15, t64$16, t64$17;
      let color = opts && 'color' in opts ? opts.color : null;
      let font = opts && 'font' in opts ? opts.font : null;
      let fontNormal = opts && 'fontNormal' in opts ? opts.fontNormal : null;
      let fontBold = opts && 'fontBold' in opts ? opts.fontBold : null;
      let fontItalic = opts && 'fontItalic' in opts ? opts.fontItalic : null;
      let fontBoldItalic = opts && 'fontBoldItalic' in opts ? opts.fontBoldItalic : null;
      let fontFallback = opts && 'fontFallback' in opts ? opts.fontFallback : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let lineSpacing = opts && 'lineSpacing' in opts ? opts.lineSpacing : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let renderingMode = opts && 'renderingMode' in opts ? opts.renderingMode : null;
      return new text_style.TextStyle.new({inherit: this.inherit, color: (t64 = color, t64 == null ? this.color : t64), font: (t64$ = font, t64$ == null ? this.font : t64$), fontNormal: (t64$0 = fontNormal, t64$0 == null ? this.fontNormal : t64$0), fontBold: (t64$1 = fontBold, t64$1 == null ? this.fontBold : t64$1), fontItalic: (t64$2 = fontItalic, t64$2 == null ? this.fontItalic : t64$2), fontBoldItalic: (t64$3 = fontBoldItalic, t64$3 == null ? this.fontBoldItalic : t64$3), fontFallback: (t64$4 = fontFallback, t64$4 == null ? this.fontFallback : t64$4), fontSize: (t64$5 = fontSize, t64$5 == null ? this.fontSize : t64$5), fontWeight: (t64$6 = fontWeight, t64$6 == null ? this.fontWeight : t64$6), fontStyle: (t64$7 = fontStyle, t64$7 == null ? this.fontStyle : t64$7), letterSpacing: (t64$8 = letterSpacing, t64$8 == null ? this.letterSpacing : t64$8), wordSpacing: (t64$9 = wordSpacing, t64$9 == null ? this.wordSpacing : t64$9), lineSpacing: (t64$10 = lineSpacing, t64$10 == null ? this.lineSpacing : t64$10), height: (t64$11 = height, t64$11 == null ? this.height : t64$11), background: (t64$12 = background, t64$12 == null ? this.background : t64$12), decoration: (t64$13 = decoration, t64$13 == null ? this.decoration : t64$13), decorationColor: (t64$14 = decorationColor, t64$14 == null ? this.decorationColor : t64$14), decorationStyle: (t64$15 = decorationStyle, t64$15 == null ? this.decorationStyle : t64$15), decorationThickness: (t64$16 = decorationThickness, t64$16 == null ? this.decorationThickness : t64$16), renderingMode: (t64$17 = renderingMode, t64$17 == null ? this.renderingMode : t64$17)});
    }
    apply(opts) {
      let t64, t64$, t64$0, t64$1, t64$2, t64$3;
      let color = opts && 'color' in opts ? opts.color : null;
      let font = opts && 'font' in opts ? opts.font : null;
      let fontNormal = opts && 'fontNormal' in opts ? opts.fontNormal : null;
      let fontBold = opts && 'fontBold' in opts ? opts.fontBold : null;
      let fontItalic = opts && 'fontItalic' in opts ? opts.fontItalic : null;
      let fontBoldItalic = opts && 'fontBoldItalic' in opts ? opts.fontBoldItalic : null;
      let fontSizeFactor = opts && 'fontSizeFactor' in opts ? opts.fontSizeFactor : 1;
      let fontSizeDelta = opts && 'fontSizeDelta' in opts ? opts.fontSizeDelta : 0;
      let letterSpacingFactor = opts && 'letterSpacingFactor' in opts ? opts.letterSpacingFactor : 1;
      let letterSpacingDelta = opts && 'letterSpacingDelta' in opts ? opts.letterSpacingDelta : 0;
      let wordSpacingFactor = opts && 'wordSpacingFactor' in opts ? opts.wordSpacingFactor : 1;
      let wordSpacingDelta = opts && 'wordSpacingDelta' in opts ? opts.wordSpacingDelta : 0;
      let heightFactor = opts && 'heightFactor' in opts ? opts.heightFactor : 1;
      let heightDelta = opts && 'heightDelta' in opts ? opts.heightDelta : 0;
      let decoration = opts && 'decoration' in opts ? opts.decoration : C[195] || CT.C195;
      if (!(this.fontSize != null || fontSizeFactor === 1.0 && fontSizeDelta === 0.0)) dart.assertFailed(null, I[66], 300, 12, "fontSize != null || (fontSizeFactor == 1.0 && fontSizeDelta == 0.0)");
      if (!(this.letterSpacing != null || letterSpacingFactor === 1.0 && letterSpacingDelta === 0.0)) dart.assertFailed(null, I[66], 301, 12, "letterSpacing != null ||\n        (letterSpacingFactor == 1.0 && letterSpacingDelta == 0.0)");
      if (!(this.wordSpacing != null || wordSpacingFactor === 1.0 && wordSpacingDelta === 0.0)) dart.assertFailed(null, I[66], 303, 12, "wordSpacing != null ||\n        (wordSpacingFactor == 1.0 && wordSpacingDelta == 0.0)");
      if (!(heightFactor === 1.0 && heightDelta === 0.0)) dart.assertFailed(null, I[66], 305, 12, "heightFactor == 1.0 && heightDelta == 0.0");
      return new text_style.TextStyle.new({inherit: this.inherit, color: (t64 = color, t64 == null ? this.color : t64), font: (t64$ = font, t64$ == null ? this.font : t64$), fontNormal: (t64$0 = fontNormal, t64$0 == null ? this.fontNormal : t64$0), fontBold: (t64$1 = fontBold, t64$1 == null ? this.fontBold : t64$1), fontItalic: (t64$2 = fontItalic, t64$2 == null ? this.fontItalic : t64$2), fontBoldItalic: (t64$3 = fontBoldItalic, t64$3 == null ? this.fontBoldItalic : t64$3), fontSize: this.fontSize == null ? null : dart.nullCheck(this.fontSize) * fontSizeFactor + fontSizeDelta, fontWeight: this.fontWeight, fontStyle: this.fontStyle, letterSpacing: this.letterSpacing == null ? null : dart.nullCheck(this.letterSpacing) * letterSpacingFactor + letterSpacingDelta, wordSpacing: this.wordSpacing == null ? null : dart.nullCheck(this.wordSpacing) * wordSpacingFactor + wordSpacingDelta, height: this.height == null ? null : dart.nullCheck(this.height) * heightFactor + heightDelta, background: this.background, decoration: decoration});
    }
    merge(other) {
      let t65;
      if (other == null) {
        return this;
      }
      if (!other.inherit) {
        return other;
      }
      return this.copyWith({color: other.color, font: other.font, fontNormal: other.fontNormal, fontBold: other.fontBold, fontItalic: other.fontItalic, fontBoldItalic: other.fontBoldItalic, fontFallback: (() => {
          let t64 = T$.ListOfFont().of(other.fontFallback);
          t64[$addAll](this.fontFallback);
          return t64;
        })(), fontSize: other.fontSize, fontWeight: other.fontWeight, fontStyle: other.fontStyle, letterSpacing: other.letterSpacing, wordSpacing: other.wordSpacing, lineSpacing: other.lineSpacing, height: other.height, background: other.background, decoration: (t65 = this.decoration, t65 == null ? null : t65.merge(other.decoration)), decorationColor: other.decorationColor, decorationStyle: other.decorationStyle, decorationThickness: other.decorationThickness, renderingMode: other.renderingMode});
    }
    get font() {
      let t65, t65$, t65$0, t65$1, t65$2, t65$3, t65$4, t65$5, t65$6, t65$7, t65$8, t65$9;
      if (this.fontWeight !== text_style.FontWeight.bold) {
        if (this.fontStyle !== text_style.FontStyle.italic) {
          t65$0 = (t65$ = (t65 = this.fontNormal, t65 == null ? this.fontBold : t65), t65$ == null ? this.fontItalic : t65$);
          return t65$0 == null ? this.fontBoldItalic : t65$0;
        } else {
          t65$3 = (t65$2 = (t65$1 = this.fontItalic, t65$1 == null ? this.fontNormal : t65$1), t65$2 == null ? this.fontBold : t65$2);
          return t65$3 == null ? this.fontBoldItalic : t65$3;
        }
      } else {
        if (this.fontStyle !== text_style.FontStyle.italic) {
          t65$6 = (t65$5 = (t65$4 = this.fontBold, t65$4 == null ? this.fontNormal : t65$4), t65$5 == null ? this.fontItalic : t65$5);
          return t65$6 == null ? this.fontBoldItalic : t65$6;
        } else {
          t65$9 = (t65$8 = (t65$7 = this.fontBoldItalic, t65$7 == null ? this.fontBold : t65$7), t65$8 == null ? this.fontItalic : t65$8);
          return t65$9 == null ? this.fontNormal : t65$9;
        }
      }
    }
    toString() {
      return "TextStyle(color:" + dart.str(this.color) + " font:" + dart.str(this.font) + " size:" + dart.str(this.fontSize) + " weight:" + dart.str(this.fontWeight) + " style:" + dart.str(this.fontStyle) + " letterSpacing:" + dart.str(this.letterSpacing) + " wordSpacing:" + dart.str(this.wordSpacing) + " lineSpacing:" + dart.str(this.lineSpacing) + " height:" + dart.str(this.height) + " background:" + dart.str(this.background) + " decoration:" + dart.str(this.decoration) + " decorationColor:" + dart.str(this.decorationColor) + " decorationStyle:" + dart.str(this.decorationStyle) + " decorationThickness:" + dart.str(this.decorationThickness) + ", renderingMode:" + dart.str(this.renderingMode) + ")";
    }
  };
  (text_style.TextStyle.new = function(opts) {
    let t64, t64$, t64$0, t64$1;
    let inherit = opts && 'inherit' in opts ? opts.inherit : true;
    let color = opts && 'color' in opts ? opts.color : null;
    let font = opts && 'font' in opts ? opts.font : null;
    let fontNormal = opts && 'fontNormal' in opts ? opts.fontNormal : null;
    let fontBold = opts && 'fontBold' in opts ? opts.fontBold : null;
    let fontItalic = opts && 'fontItalic' in opts ? opts.fontItalic : null;
    let fontBoldItalic = opts && 'fontBoldItalic' in opts ? opts.fontBoldItalic : null;
    let fontFallback = opts && 'fontFallback' in opts ? opts.fontFallback : C[199] || CT.C199;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
    let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
    let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
    let lineSpacing = opts && 'lineSpacing' in opts ? opts.lineSpacing : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let background = opts && 'background' in opts ? opts.background : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
    let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
    let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
    let renderingMode = opts && 'renderingMode' in opts ? opts.renderingMode : null;
    this[inherit$0] = inherit;
    this[color$14] = color;
    this[fontFallback$] = fontFallback;
    this[fontSize$0] = fontSize;
    this[fontWeight$0] = fontWeight;
    this[fontStyle$0] = fontStyle;
    this[letterSpacing$] = letterSpacing;
    this[wordSpacing$] = wordSpacing;
    this[lineSpacing$] = lineSpacing;
    this[height$5] = height;
    this[background$] = background;
    this[decoration$7] = decoration;
    this[decorationColor$] = decorationColor;
    this[decorationStyle$] = decorationStyle;
    this[decorationThickness$] = decorationThickness;
    this[renderingMode$] = renderingMode;
    if (!(inherit || color != null)) dart.assertFailed(null, I[66], 128, 16, "inherit || color != null");
    if (!(inherit || fontNormal != null)) dart.assertFailed(null, I[66], 129, 16, "inherit || fontNormal != null");
    if (!(inherit || fontBold != null)) dart.assertFailed(null, I[66], 130, 16, "inherit || fontBold != null");
    if (!(inherit || fontItalic != null)) dart.assertFailed(null, I[66], 131, 16, "inherit || fontItalic != null");
    if (!(inherit || fontBoldItalic != null)) dart.assertFailed(null, I[66], 132, 16, "inherit || fontBoldItalic != null");
    if (!(inherit || fontSize != null)) dart.assertFailed(null, I[66], 133, 16, "inherit || fontSize != null");
    if (!(inherit || fontWeight != null)) dart.assertFailed(null, I[66], 134, 16, "inherit || fontWeight != null");
    if (!(inherit || fontStyle != null)) dart.assertFailed(null, I[66], 135, 16, "inherit || fontStyle != null");
    if (!(inherit || letterSpacing != null)) dart.assertFailed(null, I[66], 136, 16, "inherit || letterSpacing != null");
    if (!(inherit || wordSpacing != null)) dart.assertFailed(null, I[66], 137, 16, "inherit || wordSpacing != null");
    if (!(inherit || lineSpacing != null)) dart.assertFailed(null, I[66], 138, 16, "inherit || lineSpacing != null");
    if (!(inherit || height != null)) dart.assertFailed(null, I[66], 139, 16, "inherit || height != null");
    if (!(inherit || decoration != null)) dart.assertFailed(null, I[66], 140, 16, "inherit || decoration != null");
    if (!(inherit || decorationStyle != null)) dart.assertFailed(null, I[66], 141, 16, "inherit || decorationStyle != null");
    if (!(inherit || decorationThickness != null)) dart.assertFailed(null, I[66], 142, 16, "inherit || decorationThickness != null");
    if (!(inherit || renderingMode != null)) dart.assertFailed(null, I[66], 143, 16, "inherit || renderingMode != null");
    this[fontNormal$] = (t64 = fontNormal, t64 == null ? fontStyle !== text_style.FontStyle.italic && fontWeight !== text_style.FontWeight.bold ? font : null : t64);
    this[fontBold$] = (t64$ = fontBold, t64$ == null ? fontStyle !== text_style.FontStyle.italic && fontWeight === text_style.FontWeight.bold ? font : null : t64$);
    this[fontItalic$] = (t64$0 = fontItalic, t64$0 == null ? fontStyle === text_style.FontStyle.italic && fontWeight !== text_style.FontWeight.bold ? font : null : t64$0);
    this[fontBoldItalic$] = (t64$1 = fontBoldItalic, t64$1 == null ? fontStyle === text_style.FontStyle.italic && fontWeight === text_style.FontWeight.bold ? font : null : t64$1);
    ;
  }).prototype = text_style.TextStyle.prototype;
  dart.addTypeTests(text_style.TextStyle);
  dart.addTypeCaches(text_style.TextStyle);
  dart.setMethodSignature(text_style.TextStyle, () => ({
    __proto__: dart.getMethods(text_style.TextStyle.__proto__),
    copyWith: dart.fnType(text_style.TextStyle, [], {background: dart.nullable(decoration$.BoxDecoration), color: dart.nullable(color$.PdfColor), decoration: dart.nullable(text_style.TextDecoration), decorationColor: dart.nullable(color$.PdfColor), decorationStyle: dart.nullable(text_style.TextDecorationStyle), decorationThickness: dart.nullable(core.double), font: dart.nullable(font$.Font), fontBold: dart.nullable(font$.Font), fontBoldItalic: dart.nullable(font$.Font), fontFallback: dart.nullable(core.List$(font$.Font)), fontItalic: dart.nullable(font$.Font), fontNormal: dart.nullable(font$.Font), fontSize: dart.nullable(core.double), fontStyle: dart.nullable(text_style.FontStyle), fontWeight: dart.nullable(text_style.FontWeight), height: dart.nullable(core.double), letterSpacing: dart.nullable(core.double), lineSpacing: dart.nullable(core.double), renderingMode: dart.nullable(graphics.PdfTextRenderingMode), wordSpacing: dart.nullable(core.double)}, {}),
    apply: dart.fnType(text_style.TextStyle, [], {color: dart.nullable(color$.PdfColor), decoration: text_style.TextDecoration, font: dart.nullable(font$.Font), fontBold: dart.nullable(font$.Font), fontBoldItalic: dart.nullable(font$.Font), fontItalic: dart.nullable(font$.Font), fontNormal: dart.nullable(font$.Font), fontSizeDelta: core.double, fontSizeFactor: core.double, heightDelta: core.double, heightFactor: core.double, letterSpacingDelta: core.double, letterSpacingFactor: core.double, wordSpacingDelta: core.double, wordSpacingFactor: core.double}, {}),
    merge: dart.fnType(text_style.TextStyle, [dart.nullable(text_style.TextStyle)])
  }));
  dart.setStaticMethodSignature(text_style.TextStyle, () => ['defaultStyle']);
  dart.setGetterSignature(text_style.TextStyle, () => ({
    __proto__: dart.getGetters(text_style.TextStyle.__proto__),
    font: dart.nullable(font$.Font)
  }));
  dart.setLibraryUri(text_style.TextStyle, I[65]);
  dart.setFieldSignature(text_style.TextStyle, () => ({
    __proto__: dart.getFields(text_style.TextStyle.__proto__),
    inherit: dart.finalFieldType(core.bool),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    fontNormal: dart.finalFieldType(dart.nullable(font$.Font)),
    fontBold: dart.finalFieldType(dart.nullable(font$.Font)),
    fontItalic: dart.finalFieldType(dart.nullable(font$.Font)),
    fontBoldItalic: dart.finalFieldType(dart.nullable(font$.Font)),
    fontFallback: dart.finalFieldType(core.List$(font$.Font)),
    fontSize: dart.finalFieldType(dart.nullable(core.double)),
    fontWeight: dart.finalFieldType(dart.nullable(text_style.FontWeight)),
    fontStyle: dart.finalFieldType(dart.nullable(text_style.FontStyle)),
    letterSpacing: dart.finalFieldType(dart.nullable(core.double)),
    lineSpacing: dart.finalFieldType(dart.nullable(core.double)),
    wordSpacing: dart.finalFieldType(dart.nullable(core.double)),
    height: dart.finalFieldType(dart.nullable(core.double)),
    background: dart.finalFieldType(dart.nullable(decoration$.BoxDecoration)),
    decoration: dart.finalFieldType(dart.nullable(text_style.TextDecoration)),
    decorationColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    decorationStyle: dart.finalFieldType(dart.nullable(text_style.TextDecorationStyle)),
    decorationThickness: dart.finalFieldType(dart.nullable(core.double)),
    renderingMode: dart.finalFieldType(dart.nullable(graphics.PdfTextRenderingMode))
  }));
  dart.setStaticFieldSignature(text_style.TextStyle, () => ['_defaultFontSize']);
  dart.defineExtensionMethods(text_style.TextStyle, ['toString']);
  dart.defineLazy(text_style.TextStyle, {
    /*text_style.TextStyle._defaultFontSize*/get _defaultFontSize() {
      return 12;
    }
  }, false);
  var textDirection$0 = dart.privateName(text_style, "InheritedDirectionality.textDirection");
  text_style.InheritedDirectionality = class InheritedDirectionality extends widget$.Inherited {
    get textDirection() {
      return this[textDirection$0];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    static ['_#new#tearOff'](textDirection) {
      return new text_style.InheritedDirectionality.new(textDirection);
    }
  };
  (text_style.InheritedDirectionality.new = function(textDirection) {
    this[textDirection$0] = textDirection;
    text_style.InheritedDirectionality.__proto__.new.call(this);
    ;
  }).prototype = text_style.InheritedDirectionality.prototype;
  dart.addTypeTests(text_style.InheritedDirectionality);
  dart.addTypeCaches(text_style.InheritedDirectionality);
  dart.setLibraryUri(text_style.InheritedDirectionality, I[65]);
  dart.setFieldSignature(text_style.InheritedDirectionality, () => ({
    __proto__: dart.getFields(text_style.InheritedDirectionality.__proto__),
    textDirection: dart.finalFieldType(dart.nullable(text$1.TextDirection))
  }));
  var child$7 = dart.privateName(text_style, "Directionality.child");
  var textDirection$1 = dart.privateName(text_style, "Directionality.textDirection");
  text_style.Directionality = class Directionality extends widget$.StatelessWidget {
    get child() {
      return this[child$7];
    }
    set child(value) {
      super.child = value;
    }
    get textDirection() {
      return this[textDirection$1];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    static ['_#new#tearOff'](opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let child = opts && 'child' in opts ? opts.child : null;
      return new text_style.Directionality.new({textDirection: textDirection, child: child});
    }
    static of(context) {
      let t65, t65$;
      let inherited = context.dependsOn(text_style.InheritedDirectionality);
      t65$ = (t65 = inherited, t65 == null ? null : t65.textDirection);
      return t65$ == null ? text$1.TextDirection.ltr : t65$;
    }
    build(context) {
      return new widget$.InheritedWidget.new({build: dart.fn(context => this.child, T$.ContextToWidget()), inherited: new text_style.InheritedDirectionality.new(this.textDirection)});
    }
  };
  (text_style.Directionality.new = function(opts) {
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[textDirection$1] = textDirection;
    this[child$7] = child;
    text_style.Directionality.__proto__.new.call(this);
    ;
  }).prototype = text_style.Directionality.prototype;
  dart.addTypeTests(text_style.Directionality);
  dart.addTypeCaches(text_style.Directionality);
  dart.setMethodSignature(text_style.Directionality, () => ({
    __proto__: dart.getMethods(text_style.Directionality.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setStaticMethodSignature(text_style.Directionality, () => ['of']);
  dart.setLibraryUri(text_style.Directionality, I[65]);
  dart.setFieldSignature(text_style.Directionality, () => ({
    __proto__: dart.getFields(text_style.Directionality.__proto__),
    child: dart.finalFieldType(widget$.Widget),
    textDirection: dart.finalFieldType(text$1.TextDirection)
  }));
  flex$.FlexFit = class FlexFit extends core._Enum {
    toString() {
      return "FlexFit." + this[_name];
    }
  };
  (flex$.FlexFit.new = function(index, name) {
    flex$.FlexFit.__proto__.new.call(this, index, name);
    ;
  }).prototype = flex$.FlexFit.prototype;
  dart.addTypeTests(flex$.FlexFit);
  dart.addTypeCaches(flex$.FlexFit);
  dart.setLibraryUri(flex$.FlexFit, I[67]);
  dart.setStaticFieldSignature(flex$.FlexFit, () => ['values', 'tight', 'loose']);
  dart.defineExtensionMethods(flex$.FlexFit, ['toString']);
  dart.defineLazy(flex$.FlexFit, {
    /*flex$.FlexFit.values*/get values() {
      return C[200] || CT.C200;
    },
    /*flex$.FlexFit.tight*/get tight() {
      return C[201] || CT.C201;
    },
    /*flex$.FlexFit.loose*/get loose() {
      return C[202] || CT.C202;
    }
  }, false);
  flex$.Axis = class Axis extends core._Enum {
    toString() {
      return "Axis." + this[_name];
    }
  };
  (flex$.Axis.new = function(index, name) {
    flex$.Axis.__proto__.new.call(this, index, name);
    ;
  }).prototype = flex$.Axis.prototype;
  dart.addTypeTests(flex$.Axis);
  dart.addTypeCaches(flex$.Axis);
  dart.setLibraryUri(flex$.Axis, I[67]);
  dart.setStaticFieldSignature(flex$.Axis, () => ['values', 'horizontal', 'vertical']);
  dart.defineExtensionMethods(flex$.Axis, ['toString']);
  dart.defineLazy(flex$.Axis, {
    /*flex$.Axis.values*/get values() {
      return C[203] || CT.C203;
    },
    /*flex$.Axis.horizontal*/get horizontal() {
      return C[27] || CT.C27;
    },
    /*flex$.Axis.vertical*/get vertical() {
      return C[24] || CT.C24;
    }
  }, false);
  flex$.MainAxisSize = class MainAxisSize extends core._Enum {
    toString() {
      return "MainAxisSize." + this[_name];
    }
  };
  (flex$.MainAxisSize.new = function(index, name) {
    flex$.MainAxisSize.__proto__.new.call(this, index, name);
    ;
  }).prototype = flex$.MainAxisSize.prototype;
  dart.addTypeTests(flex$.MainAxisSize);
  dart.addTypeCaches(flex$.MainAxisSize);
  dart.setLibraryUri(flex$.MainAxisSize, I[67]);
  dart.setStaticFieldSignature(flex$.MainAxisSize, () => ['values', 'min', 'max']);
  dart.defineExtensionMethods(flex$.MainAxisSize, ['toString']);
  dart.defineLazy(flex$.MainAxisSize, {
    /*flex$.MainAxisSize.values*/get values() {
      return C[204] || CT.C204;
    },
    /*flex$.MainAxisSize.min*/get min() {
      return C[205] || CT.C205;
    },
    /*flex$.MainAxisSize.max*/get max() {
      return C[23] || CT.C23;
    }
  }, false);
  flex$.MainAxisAlignment = class MainAxisAlignment extends core._Enum {
    toString() {
      return "MainAxisAlignment." + this[_name];
    }
  };
  (flex$.MainAxisAlignment.new = function(index, name) {
    flex$.MainAxisAlignment.__proto__.new.call(this, index, name);
    ;
  }).prototype = flex$.MainAxisAlignment.prototype;
  dart.addTypeTests(flex$.MainAxisAlignment);
  dart.addTypeCaches(flex$.MainAxisAlignment);
  dart.setLibraryUri(flex$.MainAxisAlignment, I[67]);
  dart.setStaticFieldSignature(flex$.MainAxisAlignment, () => ['values', 'start', 'end', 'center', 'spaceBetween', 'spaceAround', 'spaceEvenly']);
  dart.defineExtensionMethods(flex$.MainAxisAlignment, ['toString']);
  dart.defineLazy(flex$.MainAxisAlignment, {
    /*flex$.MainAxisAlignment.values*/get values() {
      return C[206] || CT.C206;
    },
    /*flex$.MainAxisAlignment.start*/get start() {
      return C[207] || CT.C207;
    },
    /*flex$.MainAxisAlignment.end*/get end() {
      return C[208] || CT.C208;
    },
    /*flex$.MainAxisAlignment.center*/get center() {
      return C[209] || CT.C209;
    },
    /*flex$.MainAxisAlignment.spaceBetween*/get spaceBetween() {
      return C[210] || CT.C210;
    },
    /*flex$.MainAxisAlignment.spaceAround*/get spaceAround() {
      return C[211] || CT.C211;
    },
    /*flex$.MainAxisAlignment.spaceEvenly*/get spaceEvenly() {
      return C[212] || CT.C212;
    }
  }, false);
  flex$.CrossAxisAlignment = class CrossAxisAlignment extends core._Enum {
    toString() {
      return "CrossAxisAlignment." + this[_name];
    }
  };
  (flex$.CrossAxisAlignment.new = function(index, name) {
    flex$.CrossAxisAlignment.__proto__.new.call(this, index, name);
    ;
  }).prototype = flex$.CrossAxisAlignment.prototype;
  dart.addTypeTests(flex$.CrossAxisAlignment);
  dart.addTypeCaches(flex$.CrossAxisAlignment);
  dart.setLibraryUri(flex$.CrossAxisAlignment, I[67]);
  dart.setStaticFieldSignature(flex$.CrossAxisAlignment, () => ['values', 'start', 'end', 'center', 'stretch']);
  dart.defineExtensionMethods(flex$.CrossAxisAlignment, ['toString']);
  dart.defineLazy(flex$.CrossAxisAlignment, {
    /*flex$.CrossAxisAlignment.values*/get values() {
      return C[213] || CT.C213;
    },
    /*flex$.CrossAxisAlignment.start*/get start() {
      return C[214] || CT.C214;
    },
    /*flex$.CrossAxisAlignment.end*/get end() {
      return C[215] || CT.C215;
    },
    /*flex$.CrossAxisAlignment.center*/get center() {
      return C[216] || CT.C216;
    },
    /*flex$.CrossAxisAlignment.stretch*/get stretch() {
      return C[217] || CT.C217;
    }
  }, false);
  flex$.VerticalDirection = class VerticalDirection extends core._Enum {
    toString() {
      return "VerticalDirection." + this[_name];
    }
  };
  (flex$.VerticalDirection.new = function(index, name) {
    flex$.VerticalDirection.__proto__.new.call(this, index, name);
    ;
  }).prototype = flex$.VerticalDirection.prototype;
  dart.addTypeTests(flex$.VerticalDirection);
  dart.addTypeCaches(flex$.VerticalDirection);
  dart.setLibraryUri(flex$.VerticalDirection, I[67]);
  dart.setStaticFieldSignature(flex$.VerticalDirection, () => ['values', 'up', 'down']);
  dart.defineExtensionMethods(flex$.VerticalDirection, ['toString']);
  dart.defineLazy(flex$.VerticalDirection, {
    /*flex$.VerticalDirection.values*/get values() {
      return C[218] || CT.C218;
    },
    /*flex$.VerticalDirection.up*/get up() {
      return C[219] || CT.C219;
    },
    /*flex$.VerticalDirection.down*/get down() {
      return C[87] || CT.C87;
    }
  }, false);
  flex$._FlexContext = class _FlexContext extends multi_page.WidgetContext {
    apply(other) {
      flex$._FlexContext.as(other);
      this.firstChild = other.firstChild;
      this.lastChild = other.lastChild;
    }
    clone() {
      let t77;
      t77 = new flex$._FlexContext.new();
      return (() => {
        t77.apply(this);
        return t77;
      })();
    }
    toString() {
      return dart.str(this[$runtimeType]) + " first:" + dart.str(this.firstChild) + " last:" + dart.str(this.lastChild);
    }
    static ['_#new#tearOff']() {
      return new flex$._FlexContext.new();
    }
  };
  (flex$._FlexContext.new = function() {
    this.firstChild = 0;
    this.lastChild = 0;
    ;
  }).prototype = flex$._FlexContext.prototype;
  dart.addTypeTests(flex$._FlexContext);
  dart.addTypeCaches(flex$._FlexContext);
  dart.setMethodSignature(flex$._FlexContext, () => ({
    __proto__: dart.getMethods(flex$._FlexContext.__proto__),
    apply: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    clone: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setLibraryUri(flex$._FlexContext, I[67]);
  dart.setFieldSignature(flex$._FlexContext, () => ({
    __proto__: dart.getFields(flex$._FlexContext.__proto__),
    firstChild: dart.fieldType(core.int),
    lastChild: dart.fieldType(core.int)
  }));
  dart.defineExtensionMethods(flex$._FlexContext, ['toString']);
  var direction$2 = dart.privateName(flex$, "Flex.direction");
  var mainAxisAlignment$ = dart.privateName(flex$, "Flex.mainAxisAlignment");
  var mainAxisSize$0 = dart.privateName(flex$, "Flex.mainAxisSize");
  var crossAxisAlignment$0 = dart.privateName(flex$, "Flex.crossAxisAlignment");
  var verticalDirection$0 = dart.privateName(flex$, "Flex.verticalDirection");
  var _context$3 = dart.privateName(flex$, "_context");
  var _getIntrinsicSize = dart.privateName(flex$, "_getIntrinsicSize");
  var _getCrossSize = dart.privateName(flex$, "_getCrossSize");
  var _getMainSize = dart.privateName(flex$, "_getMainSize");
  const MultiChildWidget_SpanningWidget$36$0 = class MultiChildWidget_SpanningWidget extends widget$.MultiChildWidget {};
  (MultiChildWidget_SpanningWidget$36$0.new = function(opts) {
    MultiChildWidget_SpanningWidget$36$0.__proto__.new.call(this, opts);
  }).prototype = MultiChildWidget_SpanningWidget$36$0.prototype;
  dart.applyMixin(MultiChildWidget_SpanningWidget$36$0, multi_page.SpanningWidget);
  flex$.Flex = class Flex extends MultiChildWidget_SpanningWidget$36$0 {
    get direction() {
      return this[direction$2];
    }
    set direction(value) {
      super.direction = value;
    }
    get mainAxisAlignment() {
      return this[mainAxisAlignment$];
    }
    set mainAxisAlignment(value) {
      super.mainAxisAlignment = value;
    }
    get mainAxisSize() {
      return this[mainAxisSize$0];
    }
    set mainAxisSize(value) {
      super.mainAxisSize = value;
    }
    get crossAxisAlignment() {
      return this[crossAxisAlignment$0];
    }
    set crossAxisAlignment(value) {
      super.crossAxisAlignment = value;
    }
    get verticalDirection() {
      return this[verticalDirection$0];
    }
    set verticalDirection(value) {
      super.verticalDirection = value;
    }
    static ['_#new#tearOff'](opts) {
      let direction = opts && 'direction' in opts ? opts.direction : null;
      let mainAxisAlignment = opts && 'mainAxisAlignment' in opts ? opts.mainAxisAlignment : C[207] || CT.C207;
      let mainAxisSize = opts && 'mainAxisSize' in opts ? opts.mainAxisSize : C[23] || CT.C23;
      let crossAxisAlignment = opts && 'crossAxisAlignment' in opts ? opts.crossAxisAlignment : C[216] || CT.C216;
      let verticalDirection = opts && 'verticalDirection' in opts ? opts.verticalDirection : C[87] || CT.C87;
      let children = opts && 'children' in opts ? opts.children : C[26] || CT.C26;
      return new flex$.Flex.new({direction: direction, mainAxisAlignment: mainAxisAlignment, mainAxisSize: mainAxisSize, crossAxisAlignment: crossAxisAlignment, verticalDirection: verticalDirection, children: children});
    }
    [_getIntrinsicSize](opts) {
      let sizingDirection = opts && 'sizingDirection' in opts ? opts.sizingDirection : null;
      let extent = opts && 'extent' in opts ? opts.extent : null;
      let childSize = opts && 'childSize' in opts ? opts.childSize : null;
      if (this.direction === sizingDirection) {
        let totalFlex = 0.0;
        let inflexibleSpace = 0.0;
        let maxFlexFractionSoFar = 0.0;
        for (let child of this.children) {
          let flex = flex$.Flexible.is(child) ? child.flex : 0;
          totalFlex = totalFlex + flex;
          if (flex > 0) {
            let flexFraction = dart.nullCheck(dart.nullCheck(childSize)(child, extent)) / flex;
            maxFlexFractionSoFar = math.max(core.double, maxFlexFractionSoFar, flexFraction);
          } else {
            inflexibleSpace = inflexibleSpace + dart.nullCheck(dart.nullCheck(childSize)(child, extent));
          }
        }
        return maxFlexFractionSoFar * totalFlex + inflexibleSpace;
      } else {
        let availableMainSpace = extent;
        let totalFlex = 0;
        let inflexibleSpace = 0.0;
        let maxCrossSize = 0.0;
        for (let child of this.children) {
          let flex = flex$.Flexible.is(child) ? child.flex : 0;
          totalFlex = totalFlex + flex;
          let mainSize = null;
          let crossSize = null;
          if (flex === 0) {
            switch (this.direction) {
              case C[27] || CT.C27:
                {
                  mainSize = dart.nullCheck(child.box).width;
                  crossSize = dart.nullCheck(childSize)(child, mainSize);
                  break;
                }
              case C[24] || CT.C24:
                {
                  mainSize = dart.nullCheck(child.box).height;
                  crossSize = dart.nullCheck(childSize)(child, mainSize);
                  break;
                }
            }
            inflexibleSpace = inflexibleSpace + dart.notNull(mainSize);
            maxCrossSize = math.max(core.double, maxCrossSize, dart.nullCheck(crossSize));
          }
        }
        let spacePerFlex = math.max(core.double, 0.0, (dart.nullCheck(availableMainSpace) - inflexibleSpace) / totalFlex);
        for (let child of this.children) {
          let flex = flex$.Flexible.is(child) ? child.flex : 0;
          if (flex > 0) {
            maxCrossSize = math.max(core.double, maxCrossSize, dart.nullCheck(dart.nullCheck(childSize)(child, spacePerFlex * flex)));
          }
        }
        return maxCrossSize;
      }
    }
    computeMinIntrinsicWidth(height) {
      return this[_getIntrinsicSize]({sizingDirection: flex$.Axis.horizontal, extent: height, childSize: dart.fn((child, extent) => dart.nullCheck(child.box).width, T$.WidgetAnddoubleNTodouble())});
    }
    computeMaxIntrinsicWidth(height) {
      return this[_getIntrinsicSize]({sizingDirection: flex$.Axis.horizontal, extent: height, childSize: dart.fn((child, extent) => dart.nullCheck(child.box).width, T$.WidgetAnddoubleNTodouble())});
    }
    computeMinIntrinsicHeight(width) {
      return this[_getIntrinsicSize]({sizingDirection: flex$.Axis.vertical, extent: width, childSize: dart.fn((child, extent) => dart.nullCheck(child.box).height, T$.WidgetAnddoubleNTodouble())});
    }
    computeMaxIntrinsicHeight(width) {
      return this[_getIntrinsicSize]({sizingDirection: flex$.Axis.vertical, extent: width, childSize: dart.fn((child, extent) => dart.nullCheck(child.box).height, T$.WidgetAnddoubleNTodouble())});
    }
    [_getCrossSize](child) {
      switch (this.direction) {
        case C[27] || CT.C27:
          {
            return dart.nullCheck(child.box).height;
          }
        case C[24] || CT.C24:
          {
            return dart.nullCheck(child.box).width;
          }
      }
    }
    [_getMainSize](child) {
      switch (this.direction) {
        case C[27] || CT.C27:
          {
            return dart.nullCheck(child.box).width;
          }
        case C[24] || CT.C24:
          {
            return dart.nullCheck(child.box).height;
          }
      }
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      let totalFlex = 0;
      let lastFlexChild = null;
      let maxMainSize = this.direction === flex$.Axis.horizontal ? constraints.maxWidth : constraints.maxHeight;
      let canFlex = maxMainSize < 1 / 0;
      let crossSize = 0.0;
      let allocatedSize = 0.0;
      let index = this[_context$3].firstChild;
      for (let child of this.children[$sublist](this[_context$3].firstChild)) {
        let flex = flex$.Flexible.is(child) ? child.flex : 0;
        let fit = flex$.Flexible.is(child) ? child.fit : flex$.FlexFit.loose;
        if (flex > 0) {
          if (!dart.fn(() => {
            let dimension = this.direction === flex$.Axis.horizontal ? "width" : "height";
            if (!canFlex && (this.mainAxisSize === flex$.MainAxisSize.max || fit === flex$.FlexFit.tight)) {
              dart.throw(core.Exception.new("Flex children have non-zero flex but incoming " + dimension + " constraints are unbounded."));
            } else {
              return true;
            }
          }, T$.VoidTobool())()) dart.assertFailed(null, I[68], 248, 16, "() {\n          final dimension = direction == Axis.horizontal ? 'width' : 'height';\n          if (!canFlex &&\n              (mainAxisSize == MainAxisSize.max || fit == FlexFit.tight)) {\n            throw Exception(\n                'Flex children have non-zero flex but incoming $dimension constraints are unbounded.');\n          } else {\n            return true;\n          }\n        }()");
          totalFlex = totalFlex + flex;
        } else {
          let innerConstraints = null;
          if (this.crossAxisAlignment === flex$.CrossAxisAlignment.stretch) {
            switch (this.direction) {
              case C[27] || CT.C27:
                {
                  innerConstraints = new geometry.BoxConstraints.new({minHeight: constraints.maxHeight, maxHeight: constraints.maxHeight});
                  break;
                }
              case C[24] || CT.C24:
                {
                  innerConstraints = new geometry.BoxConstraints.new({minWidth: constraints.maxWidth, maxWidth: constraints.maxWidth});
                  break;
                }
            }
          } else {
            switch (this.direction) {
              case C[27] || CT.C27:
                {
                  innerConstraints = new geometry.BoxConstraints.new({maxHeight: constraints.maxHeight});
                  break;
                }
              case C[24] || CT.C24:
                {
                  innerConstraints = new geometry.BoxConstraints.new({maxWidth: constraints.maxWidth});
                  break;
                }
            }
          }
          child.layout(context, innerConstraints, {parentUsesSize: true});
          if (!(child.box != null)) dart.assertFailed(null, I[68], 286, 16, "child.box != null");
          allocatedSize = allocatedSize + this[_getMainSize](child);
          crossSize = math.max(core.double, crossSize, this[_getCrossSize](child));
          if (this.direction === flex$.Axis.vertical && allocatedSize > constraints.maxHeight) {
            break;
          }
        }
        lastFlexChild = child;
        index = index + 1;
      }
      this[_context$3].lastChild = index;
      let totalChildren = this[_context$3].lastChild - this[_context$3].firstChild;
      let freeSpace = math.max(core.double, 0.0, (canFlex ? maxMainSize : 0.0) - allocatedSize);
      let allocatedFlexSpace = 0.0;
      if (totalFlex > 0) {
        let spacePerFlex = canFlex && totalFlex > 0 ? freeSpace / totalFlex : 0 / 0;
        for (let child of this.children) {
          let flex = flex$.Flexible.is(child) ? child.flex : 0;
          let fit = flex$.Flexible.is(child) ? child.fit : flex$.FlexFit.loose;
          if (flex > 0) {
            let maxChildExtent = canFlex ? child[$_equals](lastFlexChild) ? freeSpace - allocatedFlexSpace : spacePerFlex * flex : 1 / 0;
            let minChildExtent = null;
            switch (fit) {
              case C[201] || CT.C201:
                {
                  if (!(maxChildExtent < 1 / 0)) dart.assertFailed(null, I[68], 320, 22, "maxChildExtent < double.infinity");
                  minChildExtent = maxChildExtent;
                  break;
                }
              case C[202] || CT.C202:
                {
                  minChildExtent = 0.0;
                  break;
                }
            }
            let innerConstraints = null;
            if (this.crossAxisAlignment === flex$.CrossAxisAlignment.stretch) {
              switch (this.direction) {
                case C[27] || CT.C27:
                  {
                    innerConstraints = new geometry.BoxConstraints.new({minWidth: minChildExtent, maxWidth: maxChildExtent, minHeight: constraints.maxHeight, maxHeight: constraints.maxHeight});
                    break;
                  }
                case C[24] || CT.C24:
                  {
                    innerConstraints = new geometry.BoxConstraints.new({minWidth: constraints.maxWidth, maxWidth: constraints.maxWidth, minHeight: minChildExtent, maxHeight: maxChildExtent});
                    break;
                  }
              }
            } else {
              switch (this.direction) {
                case C[27] || CT.C27:
                  {
                    innerConstraints = new geometry.BoxConstraints.new({minWidth: minChildExtent, maxWidth: maxChildExtent, maxHeight: constraints.maxHeight});
                    break;
                  }
                case C[24] || CT.C24:
                  {
                    innerConstraints = new geometry.BoxConstraints.new({maxWidth: constraints.maxWidth, minHeight: minChildExtent, maxHeight: maxChildExtent});
                    break;
                  }
              }
            }
            child.layout(context, innerConstraints, {parentUsesSize: true});
            if (!(child.box != null)) dart.assertFailed(null, I[68], 363, 18, "child.box != null");
            let childSize = this[_getMainSize](child);
            if (!(childSize <= maxChildExtent)) dart.assertFailed(null, I[68], 365, 18, "childSize <= maxChildExtent");
            allocatedSize = allocatedSize + childSize;
            allocatedFlexSpace = allocatedFlexSpace + maxChildExtent;
            crossSize = math.max(core.double, crossSize, this[_getCrossSize](child));
          }
        }
      }
      let idealSize = canFlex && this.mainAxisSize === flex$.MainAxisSize.max ? maxMainSize : allocatedSize;
      let actualSize = null;
      let actualSizeDelta = null;
      let size = null;
      function size$35get() {
        let t78;
        t78 = size;
        return t78 == null ? dart.throw(new _internal.LateError.localNI("size")) : t78;
      }
      dart.fn(size$35get, T$.VoidToPdfPoint());
      function size$35set(size$35param) {
        return size = size$35param;
      }
      dart.fn(size$35set, T$.PdfPointTodynamic());
      switch (this.direction) {
        case C[27] || CT.C27:
          {
            size$35set(constraints.constrain(new point$.PdfPoint.new(idealSize, crossSize)));
            actualSize = size$35get().x;
            crossSize = size$35get().y;
            break;
          }
        case C[24] || CT.C24:
          {
            size$35set(constraints.constrain(new point$.PdfPoint.new(crossSize, idealSize)));
            actualSize = size$35get().y;
            crossSize = size$35get().x;
            break;
          }
      }
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, size$35get());
      actualSizeDelta = dart.notNull(actualSize) - allocatedSize;
      let remainingSpace = math.max(core.double, 0.0, actualSizeDelta);
      let leadingSpace = null;
      let betweenSpace = null;
      function betweenSpace$35get() {
        let t81;
        t81 = betweenSpace;
        return t81 == null ? dart.throw(new _internal.LateError.localNI("betweenSpace")) : t81;
      }
      dart.fn(betweenSpace$35get, T$.VoidTodouble());
      function betweenSpace$35set(betweenSpace$35param) {
        return betweenSpace = betweenSpace$35param;
      }
      dart.fn(betweenSpace$35set, T$.doubleTodynamic());
      let flipMainAxis = this.verticalDirection === flex$.VerticalDirection.down && this.direction === flex$.Axis.vertical || this.verticalDirection === flex$.VerticalDirection.up && this.direction === flex$.Axis.horizontal;
      switch (this.mainAxisAlignment) {
        case C[207] || CT.C207:
          {
            leadingSpace = 0.0;
            betweenSpace$35set(0.0);
            break;
          }
        case C[208] || CT.C208:
          {
            leadingSpace = remainingSpace;
            betweenSpace$35set(0.0);
            break;
          }
        case C[209] || CT.C209:
          {
            leadingSpace = remainingSpace / 2.0;
            betweenSpace$35set(0.0);
            break;
          }
        case C[210] || CT.C210:
          {
            leadingSpace = 0.0;
            betweenSpace$35set(totalChildren > 1 ? remainingSpace / (totalChildren - 1) : 0.0);
            break;
          }
        case C[211] || CT.C211:
          {
            betweenSpace$35set(totalChildren > 0 ? remainingSpace / totalChildren : 0.0);
            leadingSpace = betweenSpace$35get() / 2.0;
            break;
          }
        case C[212] || CT.C212:
          {
            betweenSpace$35set(totalChildren > 0 ? remainingSpace / (totalChildren + 1) : 0.0);
            leadingSpace = betweenSpace$35get();
            break;
          }
      }
      let flipCrossAxis = this.verticalDirection === flex$.VerticalDirection.down && this.direction === flex$.Axis.horizontal || this.verticalDirection === flex$.VerticalDirection.up && this.direction === flex$.Axis.vertical;
      let childMainPosition = flipMainAxis ? dart.notNull(actualSize) - dart.notNull(leadingSpace) : leadingSpace;
      for (let child of this.children[$sublist](this[_context$3].firstChild, this[_context$3].lastChild)) {
        let childCrossPosition = null;
        switch (this.crossAxisAlignment) {
          case C[214] || CT.C214:
            {
              childCrossPosition = flipCrossAxis ? crossSize - this[_getCrossSize](child) : 0.0;
              break;
            }
          case C[215] || CT.C215:
            {
              childCrossPosition = !flipCrossAxis ? crossSize - this[_getCrossSize](child) : 0.0;
              break;
            }
          case C[216] || CT.C216:
            {
              childCrossPosition = crossSize / 2.0 - this[_getCrossSize](child) / 2.0;
              break;
            }
          case C[217] || CT.C217:
            {
              childCrossPosition = 0.0;
              break;
            }
        }
        if (flipMainAxis) {
          childMainPosition = childMainPosition - this[_getMainSize](child);
        }
        switch (this.direction) {
          case C[27] || CT.C27:
            {
              child.box = new rect$.PdfRect.new(dart.nullCheck(this.box).x + childMainPosition, dart.nullCheck(this.box).y + dart.notNull(childCrossPosition), dart.nullCheck(child.box).width, dart.nullCheck(child.box).height);
              break;
            }
          case C[24] || CT.C24:
            {
              child.box = new rect$.PdfRect.new(childCrossPosition, childMainPosition, dart.nullCheck(child.box).width, dart.nullCheck(child.box).height);
              break;
            }
        }
        if (flipMainAxis) {
          childMainPosition = childMainPosition - betweenSpace$35get();
        } else {
          childMainPosition = childMainPosition + (this[_getMainSize](child) + betweenSpace$35get());
        }
      }
    }
    paint(context) {
      let t83;
      super.paint(context);
      let mat = vector_math_64.Matrix4.identity();
      mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
      t83 = context.canvas;
      (() => {
        t83.saveContext();
        t83.setTransform(mat);
        return t83;
      })();
      for (let child of this.children[$sublist](this[_context$3].firstChild, this[_context$3].lastChild)) {
        child.paint(context);
      }
      context.canvas.restoreContext();
    }
    get canSpan() {
      return this.direction === flex$.Axis.vertical;
    }
    get hasMoreWidgets() {
      return true;
    }
    restoreContext(context) {
      flex$._FlexContext.as(context);
      this[_context$3].firstChild = context.lastChild;
    }
    saveContext() {
      return this[_context$3];
    }
  };
  (flex$.Flex.new = function(opts) {
    let direction = opts && 'direction' in opts ? opts.direction : null;
    let mainAxisAlignment = opts && 'mainAxisAlignment' in opts ? opts.mainAxisAlignment : C[207] || CT.C207;
    let mainAxisSize = opts && 'mainAxisSize' in opts ? opts.mainAxisSize : C[23] || CT.C23;
    let crossAxisAlignment = opts && 'crossAxisAlignment' in opts ? opts.crossAxisAlignment : C[216] || CT.C216;
    let verticalDirection = opts && 'verticalDirection' in opts ? opts.verticalDirection : C[87] || CT.C87;
    let children = opts && 'children' in opts ? opts.children : C[26] || CT.C26;
    this[_context$3] = new flex$._FlexContext.new();
    this[direction$2] = direction;
    this[mainAxisAlignment$] = mainAxisAlignment;
    this[mainAxisSize$0] = mainAxisSize;
    this[crossAxisAlignment$0] = crossAxisAlignment;
    this[verticalDirection$0] = verticalDirection;
    flex$.Flex.__proto__.new.call(this, {children: children});
    ;
  }).prototype = flex$.Flex.prototype;
  dart.addTypeTests(flex$.Flex);
  dart.addTypeCaches(flex$.Flex);
  dart.setMethodSignature(flex$.Flex, () => ({
    __proto__: dart.getMethods(flex$.Flex.__proto__),
    [_getIntrinsicSize]: dart.fnType(core.double, [], {childSize: dart.nullable(dart.fnType(dart.nullable(core.double), [widget$.Widget, dart.nullable(core.double)])), extent: dart.nullable(core.double), sizingDirection: dart.nullable(flex$.Axis)}, {}),
    computeMinIntrinsicWidth: dart.fnType(core.double, [core.double]),
    computeMaxIntrinsicWidth: dart.fnType(core.double, [core.double]),
    computeMinIntrinsicHeight: dart.fnType(core.double, [core.double]),
    computeMaxIntrinsicHeight: dart.fnType(core.double, [core.double]),
    [_getCrossSize]: dart.fnType(core.double, [widget$.Widget]),
    [_getMainSize]: dart.fnType(core.double, [widget$.Widget]),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {}),
    restoreContext: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    saveContext: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setGetterSignature(flex$.Flex, () => ({
    __proto__: dart.getGetters(flex$.Flex.__proto__),
    canSpan: core.bool,
    hasMoreWidgets: core.bool
  }));
  dart.setLibraryUri(flex$.Flex, I[67]);
  dart.setFieldSignature(flex$.Flex, () => ({
    __proto__: dart.getFields(flex$.Flex.__proto__),
    direction: dart.finalFieldType(flex$.Axis),
    mainAxisAlignment: dart.finalFieldType(flex$.MainAxisAlignment),
    mainAxisSize: dart.finalFieldType(flex$.MainAxisSize),
    crossAxisAlignment: dart.finalFieldType(flex$.CrossAxisAlignment),
    verticalDirection: dart.finalFieldType(flex$.VerticalDirection),
    [_context$3]: dart.finalFieldType(flex$._FlexContext)
  }));
  flex$.Row = class Row extends flex$.Flex {
    static ['_#new#tearOff'](opts) {
      let mainAxisAlignment = opts && 'mainAxisAlignment' in opts ? opts.mainAxisAlignment : C[207] || CT.C207;
      let mainAxisSize = opts && 'mainAxisSize' in opts ? opts.mainAxisSize : C[23] || CT.C23;
      let crossAxisAlignment = opts && 'crossAxisAlignment' in opts ? opts.crossAxisAlignment : C[216] || CT.C216;
      let verticalDirection = opts && 'verticalDirection' in opts ? opts.verticalDirection : C[87] || CT.C87;
      let children = opts && 'children' in opts ? opts.children : C[26] || CT.C26;
      return new flex$.Row.new({mainAxisAlignment: mainAxisAlignment, mainAxisSize: mainAxisSize, crossAxisAlignment: crossAxisAlignment, verticalDirection: verticalDirection, children: children});
    }
  };
  (flex$.Row.new = function(opts) {
    let mainAxisAlignment = opts && 'mainAxisAlignment' in opts ? opts.mainAxisAlignment : C[207] || CT.C207;
    let mainAxisSize = opts && 'mainAxisSize' in opts ? opts.mainAxisSize : C[23] || CT.C23;
    let crossAxisAlignment = opts && 'crossAxisAlignment' in opts ? opts.crossAxisAlignment : C[216] || CT.C216;
    let verticalDirection = opts && 'verticalDirection' in opts ? opts.verticalDirection : C[87] || CT.C87;
    let children = opts && 'children' in opts ? opts.children : C[26] || CT.C26;
    flex$.Row.__proto__.new.call(this, {children: children, direction: flex$.Axis.horizontal, mainAxisAlignment: mainAxisAlignment, mainAxisSize: mainAxisSize, crossAxisAlignment: crossAxisAlignment, verticalDirection: verticalDirection});
    ;
  }).prototype = flex$.Row.prototype;
  dart.addTypeTests(flex$.Row);
  dart.addTypeCaches(flex$.Row);
  dart.setLibraryUri(flex$.Row, I[67]);
  flex$.Column = class Column extends flex$.Flex {
    static ['_#new#tearOff'](opts) {
      let mainAxisAlignment = opts && 'mainAxisAlignment' in opts ? opts.mainAxisAlignment : C[207] || CT.C207;
      let mainAxisSize = opts && 'mainAxisSize' in opts ? opts.mainAxisSize : C[23] || CT.C23;
      let crossAxisAlignment = opts && 'crossAxisAlignment' in opts ? opts.crossAxisAlignment : C[216] || CT.C216;
      let verticalDirection = opts && 'verticalDirection' in opts ? opts.verticalDirection : C[87] || CT.C87;
      let children = opts && 'children' in opts ? opts.children : C[26] || CT.C26;
      return new flex$.Column.new({mainAxisAlignment: mainAxisAlignment, mainAxisSize: mainAxisSize, crossAxisAlignment: crossAxisAlignment, verticalDirection: verticalDirection, children: children});
    }
  };
  (flex$.Column.new = function(opts) {
    let mainAxisAlignment = opts && 'mainAxisAlignment' in opts ? opts.mainAxisAlignment : C[207] || CT.C207;
    let mainAxisSize = opts && 'mainAxisSize' in opts ? opts.mainAxisSize : C[23] || CT.C23;
    let crossAxisAlignment = opts && 'crossAxisAlignment' in opts ? opts.crossAxisAlignment : C[216] || CT.C216;
    let verticalDirection = opts && 'verticalDirection' in opts ? opts.verticalDirection : C[87] || CT.C87;
    let children = opts && 'children' in opts ? opts.children : C[26] || CT.C26;
    flex$.Column.__proto__.new.call(this, {children: children, direction: flex$.Axis.vertical, mainAxisAlignment: mainAxisAlignment, mainAxisSize: mainAxisSize, crossAxisAlignment: crossAxisAlignment, verticalDirection: verticalDirection});
    ;
  }).prototype = flex$.Column.prototype;
  dart.addTypeTests(flex$.Column);
  dart.addTypeCaches(flex$.Column);
  dart.setLibraryUri(flex$.Column, I[67]);
  var flex$3 = dart.privateName(flex$, "Flexible.flex");
  var fit$6 = dart.privateName(flex$, "Flexible.fit");
  flex$.Flexible = class Flexible extends widget$.SingleChildWidget {
    get flex() {
      return this[flex$3];
    }
    set flex(value) {
      super.flex = value;
    }
    get fit() {
      return this[fit$6];
    }
    set fit(value) {
      super.fit = value;
    }
    static ['_#new#tearOff'](opts) {
      let flex = opts && 'flex' in opts ? opts.flex : 1;
      let fit = opts && 'fit' in opts ? opts.fit : C[202] || CT.C202;
      let child = opts && 'child' in opts ? opts.child : null;
      return new flex$.Flexible.new({flex: flex, fit: fit, child: child});
    }
    paint(context) {
      super.paint(context);
      this.paintChild(context);
    }
  };
  (flex$.Flexible.new = function(opts) {
    let flex = opts && 'flex' in opts ? opts.flex : 1;
    let fit = opts && 'fit' in opts ? opts.fit : C[202] || CT.C202;
    let child = opts && 'child' in opts ? opts.child : null;
    this[flex$3] = flex;
    this[fit$6] = fit;
    flex$.Flexible.__proto__.new.call(this, {child: child});
    ;
  }).prototype = flex$.Flexible.prototype;
  dart.addTypeTests(flex$.Flexible);
  dart.addTypeCaches(flex$.Flexible);
  dart.setLibraryUri(flex$.Flexible, I[67]);
  dart.setFieldSignature(flex$.Flexible, () => ({
    __proto__: dart.getFields(flex$.Flexible.__proto__),
    flex: dart.finalFieldType(core.int),
    fit: dart.finalFieldType(flex$.FlexFit)
  }));
  flex$.Expanded = class Expanded extends flex$.Flexible {
    static ['_#new#tearOff'](opts) {
      let flex = opts && 'flex' in opts ? opts.flex : 1;
      let fit = opts && 'fit' in opts ? opts.fit : C[201] || CT.C201;
      let child = opts && 'child' in opts ? opts.child : null;
      return new flex$.Expanded.new({flex: flex, fit: fit, child: child});
    }
  };
  (flex$.Expanded.new = function(opts) {
    let flex = opts && 'flex' in opts ? opts.flex : 1;
    let fit = opts && 'fit' in opts ? opts.fit : C[201] || CT.C201;
    let child = opts && 'child' in opts ? opts.child : null;
    flex$.Expanded.__proto__.new.call(this, {child: child, flex: flex, fit: fit});
    ;
  }).prototype = flex$.Expanded.prototype;
  dart.addTypeTests(flex$.Expanded);
  dart.addTypeCaches(flex$.Expanded);
  dart.setLibraryUri(flex$.Expanded, I[67]);
  flex$.Spacer = class Spacer extends flex$.Flexible {
    static ['_#new#tearOff'](opts) {
      let flex = opts && 'flex' in opts ? opts.flex : 1;
      return new flex$.Spacer.new({flex: flex});
    }
  };
  (flex$.Spacer.new = function(opts) {
    let flex = opts && 'flex' in opts ? opts.flex : 1;
    if (!(flex > 0)) dart.assertFailed(null, I[68], 582, 16, "flex > 0");
    flex$.Spacer.__proto__.new.call(this, {flex: flex, fit: flex$.FlexFit.tight, child: new basic.SizedBox.shrink()});
    ;
  }).prototype = flex$.Spacer.prototype;
  dart.addTypeTests(flex$.Spacer);
  dart.addTypeCaches(flex$.Spacer);
  dart.setLibraryUri(flex$.Spacer, I[67]);
  var direction$3 = dart.privateName(flex$, "ListView.direction");
  var padding$7 = dart.privateName(flex$, "ListView.padding");
  var spacing$0 = dart.privateName(flex$, "ListView.spacing");
  var reverse$ = dart.privateName(flex$, "ListView.reverse");
  var itemBuilder$ = dart.privateName(flex$, "ListView.itemBuilder");
  var separatorBuilder$ = dart.privateName(flex$, "ListView.separatorBuilder");
  var children$6 = dart.privateName(flex$, "ListView.children");
  var itemCount$ = dart.privateName(flex$, "ListView.itemCount");
  var _getItem = dart.privateName(flex$, "_getItem");
  var _getSeparator = dart.privateName(flex$, "_getSeparator");
  flex$.ListView = class ListView extends widget$.StatelessWidget {
    get direction() {
      return this[direction$3];
    }
    set direction(value) {
      super.direction = value;
    }
    get padding() {
      return this[padding$7];
    }
    set padding(value) {
      super.padding = value;
    }
    get spacing() {
      return this[spacing$0];
    }
    set spacing(value) {
      super.spacing = value;
    }
    get reverse() {
      return this[reverse$];
    }
    set reverse(value) {
      super.reverse = value;
    }
    get itemBuilder() {
      return this[itemBuilder$];
    }
    set itemBuilder(value) {
      super.itemBuilder = value;
    }
    get separatorBuilder() {
      return this[separatorBuilder$];
    }
    set separatorBuilder(value) {
      super.separatorBuilder = value;
    }
    get children() {
      return this[children$6];
    }
    set children(value) {
      super.children = value;
    }
    get itemCount() {
      return this[itemCount$];
    }
    set itemCount(value) {
      super.itemCount = value;
    }
    static ['_#new#tearOff'](opts) {
      let direction = opts && 'direction' in opts ? opts.direction : C[24] || CT.C24;
      let reverse = opts && 'reverse' in opts ? opts.reverse : false;
      let spacing = opts && 'spacing' in opts ? opts.spacing : 0;
      let padding = opts && 'padding' in opts ? opts.padding : null;
      let children = opts && 'children' in opts ? opts.children : C[26] || CT.C26;
      return new flex$.ListView.new({direction: direction, reverse: reverse, spacing: spacing, padding: padding, children: children});
    }
    static ['_#builder#tearOff'](opts) {
      let direction = opts && 'direction' in opts ? opts.direction : C[24] || CT.C24;
      let reverse = opts && 'reverse' in opts ? opts.reverse : false;
      let spacing = opts && 'spacing' in opts ? opts.spacing : 0;
      let padding = opts && 'padding' in opts ? opts.padding : null;
      let itemBuilder = opts && 'itemBuilder' in opts ? opts.itemBuilder : null;
      let itemCount = opts && 'itemCount' in opts ? opts.itemCount : null;
      return new flex$.ListView.builder({direction: direction, reverse: reverse, spacing: spacing, padding: padding, itemBuilder: itemBuilder, itemCount: itemCount});
    }
    static ['_#separated#tearOff'](opts) {
      let direction = opts && 'direction' in opts ? opts.direction : C[24] || CT.C24;
      let reverse = opts && 'reverse' in opts ? opts.reverse : false;
      let padding = opts && 'padding' in opts ? opts.padding : null;
      let itemBuilder = opts && 'itemBuilder' in opts ? opts.itemBuilder : null;
      let separatorBuilder = opts && 'separatorBuilder' in opts ? opts.separatorBuilder : null;
      let itemCount = opts && 'itemCount' in opts ? opts.itemCount : null;
      return new flex$.ListView.separated({direction: direction, reverse: reverse, padding: padding, itemBuilder: itemBuilder, separatorBuilder: separatorBuilder, itemCount: itemCount});
    }
    [_getItem](context, index) {
      return this.children == null ? dart.nullCheck(this.itemBuilder)(context, index) : dart.nullCheck(this.children)[$_get](index);
    }
    [_getSeparator](context, index) {
      return this.spacing == null ? dart.nullCheck(this.separatorBuilder)(context, index) : this.direction === flex$.Axis.vertical ? new basic.SizedBox.new({height: this.spacing}) : new basic.SizedBox.new({width: this.spacing});
    }
    build(context) {
      let _children = T$.JSArrayOfWidget().of([]);
      if (this.reverse) {
        for (let index = this.itemCount - 1; index >= 0; index = index - 1) {
          _children[$add](this[_getItem](context, index));
          if (this.spacing !== 0 && index > 0) {
            _children[$add](this[_getSeparator](context, index));
          }
        }
      } else {
        for (let index = 0; index < this.itemCount; index = index + 1) {
          _children[$add](this[_getItem](context, index));
          if (this.spacing !== 0 && index < this.itemCount - 1) {
            _children[$add](this[_getSeparator](context, index));
          }
        }
      }
      let widget = new flex$.Flex.new({direction: this.direction, mainAxisAlignment: flex$.MainAxisAlignment.start, mainAxisSize: flex$.MainAxisSize.max, crossAxisAlignment: flex$.CrossAxisAlignment.center, verticalDirection: flex$.VerticalDirection.down, children: _children});
      if (this.padding != null) {
        return new basic.Padding.new({padding: dart.nullCheck(this.padding), child: widget});
      }
      return widget;
    }
  };
  (flex$.ListView.new = function(opts) {
    let direction = opts && 'direction' in opts ? opts.direction : C[24] || CT.C24;
    let reverse = opts && 'reverse' in opts ? opts.reverse : false;
    let spacing = opts && 'spacing' in opts ? opts.spacing : 0;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let children = opts && 'children' in opts ? opts.children : C[26] || CT.C26;
    this[direction$3] = direction;
    this[reverse$] = reverse;
    this[spacing$0] = spacing;
    this[padding$7] = padding;
    this[children$6] = children;
    this[itemBuilder$] = null;
    this[separatorBuilder$] = null;
    this[itemCount$] = children[$length];
    flex$.ListView.__proto__.new.call(this);
    ;
  }).prototype = flex$.ListView.prototype;
  (flex$.ListView.builder = function(opts) {
    let direction = opts && 'direction' in opts ? opts.direction : C[24] || CT.C24;
    let reverse = opts && 'reverse' in opts ? opts.reverse : false;
    let spacing = opts && 'spacing' in opts ? opts.spacing : 0;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let itemBuilder = opts && 'itemBuilder' in opts ? opts.itemBuilder : null;
    let itemCount = opts && 'itemCount' in opts ? opts.itemCount : null;
    this[direction$3] = direction;
    this[reverse$] = reverse;
    this[spacing$0] = spacing;
    this[padding$7] = padding;
    this[itemBuilder$] = itemBuilder;
    this[itemCount$] = itemCount;
    this[children$6] = null;
    this[separatorBuilder$] = null;
    flex$.ListView.__proto__.new.call(this);
    ;
  }).prototype = flex$.ListView.prototype;
  (flex$.ListView.separated = function(opts) {
    let direction = opts && 'direction' in opts ? opts.direction : C[24] || CT.C24;
    let reverse = opts && 'reverse' in opts ? opts.reverse : false;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let itemBuilder = opts && 'itemBuilder' in opts ? opts.itemBuilder : null;
    let separatorBuilder = opts && 'separatorBuilder' in opts ? opts.separatorBuilder : null;
    let itemCount = opts && 'itemCount' in opts ? opts.itemCount : null;
    this[direction$3] = direction;
    this[reverse$] = reverse;
    this[padding$7] = padding;
    this[itemBuilder$] = itemBuilder;
    this[separatorBuilder$] = separatorBuilder;
    this[itemCount$] = itemCount;
    this[children$6] = null;
    this[spacing$0] = null;
    flex$.ListView.__proto__.new.call(this);
    ;
  }).prototype = flex$.ListView.prototype;
  dart.addTypeTests(flex$.ListView);
  dart.addTypeCaches(flex$.ListView);
  dart.setMethodSignature(flex$.ListView, () => ({
    __proto__: dart.getMethods(flex$.ListView.__proto__),
    [_getItem]: dart.fnType(widget$.Widget, [widget$.Context, core.int]),
    [_getSeparator]: dart.fnType(widget$.Widget, [widget$.Context, core.int]),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(flex$.ListView, I[67]);
  dart.setFieldSignature(flex$.ListView, () => ({
    __proto__: dart.getFields(flex$.ListView.__proto__),
    direction: dart.finalFieldType(flex$.Axis),
    padding: dart.finalFieldType(dart.nullable(geometry.EdgeInsets)),
    spacing: dart.finalFieldType(dart.nullable(core.double)),
    reverse: dart.finalFieldType(core.bool),
    itemBuilder: dart.finalFieldType(dart.nullable(dart.fnType(widget$.Widget, [widget$.Context, core.int]))),
    separatorBuilder: dart.finalFieldType(dart.nullable(dart.fnType(widget$.Widget, [widget$.Context, core.int]))),
    children: dart.finalFieldType(dart.nullable(core.List$(widget$.Widget))),
    itemCount: dart.finalFieldType(core.int)
  }));
  multi_page.NewPage = class NewPage extends widget$.Widget {
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this.box = rect$.PdfRect.zero;
    }
    static ['_#new#tearOff']() {
      return new multi_page.NewPage.new();
    }
  };
  (multi_page.NewPage.new = function() {
    multi_page.NewPage.__proto__.new.call(this);
    ;
  }).prototype = multi_page.NewPage.prototype;
  dart.addTypeTests(multi_page.NewPage);
  dart.addTypeCaches(multi_page.NewPage);
  dart.setMethodSignature(multi_page.NewPage, () => ({
    __proto__: dart.getMethods(multi_page.NewPage.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setLibraryUri(multi_page.NewPage, I[3]);
  var child$8 = dart.privateName(multi_page, "_MultiPageWidget.child");
  var constraints$0 = dart.privateName(multi_page, "_MultiPageWidget.constraints");
  var widgetContext$ = dart.privateName(multi_page, "_MultiPageWidget.widgetContext");
  multi_page._MultiPageWidget = class _MultiPageWidget extends core.Object {
    get child() {
      return this[child$8];
    }
    set child(value) {
      super.child = value;
    }
    get constraints() {
      return this[constraints$0];
    }
    set constraints(value) {
      super.constraints = value;
    }
    get widgetContext() {
      return this[widgetContext$];
    }
    set widgetContext(value) {
      super.widgetContext = value;
    }
    static ['_#new#tearOff'](opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let constraints = opts && 'constraints' in opts ? opts.constraints : null;
      let widgetContext = opts && 'widgetContext' in opts ? opts.widgetContext : null;
      return new multi_page._MultiPageWidget.new({child: child, constraints: constraints, widgetContext: widgetContext});
    }
  };
  (multi_page._MultiPageWidget.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let constraints = opts && 'constraints' in opts ? opts.constraints : null;
    let widgetContext = opts && 'widgetContext' in opts ? opts.widgetContext : null;
    this[child$8] = child;
    this[constraints$0] = constraints;
    this[widgetContext$] = widgetContext;
    ;
  }).prototype = multi_page._MultiPageWidget.prototype;
  dart.addTypeTests(multi_page._MultiPageWidget);
  dart.addTypeCaches(multi_page._MultiPageWidget);
  dart.setLibraryUri(multi_page._MultiPageWidget, I[3]);
  dart.setFieldSignature(multi_page._MultiPageWidget, () => ({
    __proto__: dart.getFields(multi_page._MultiPageWidget.__proto__),
    child: dart.finalFieldType(widget$.Widget),
    constraints: dart.finalFieldType(geometry.BoxConstraints),
    widgetContext: dart.finalFieldType(dart.nullable(multi_page.WidgetContext))
  }));
  multi_page._MultiPageInstance = class _MultiPageInstance extends core.Object {
    static ['_#new#tearOff'](opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let constraints = opts && 'constraints' in opts ? opts.constraints : null;
      let fullConstraints = opts && 'fullConstraints' in opts ? opts.fullConstraints : null;
      let offsetStart = opts && 'offsetStart' in opts ? opts.offsetStart : null;
      return new multi_page._MultiPageInstance.new({context: context, constraints: constraints, fullConstraints: fullConstraints, offsetStart: offsetStart});
    }
  };
  (multi_page._MultiPageInstance.new = function(opts) {
    let context = opts && 'context' in opts ? opts.context : null;
    let constraints = opts && 'constraints' in opts ? opts.constraints : null;
    let fullConstraints = opts && 'fullConstraints' in opts ? opts.fullConstraints : null;
    let offsetStart = opts && 'offsetStart' in opts ? opts.offsetStart : null;
    this.widgets = T$.JSArrayOf_MultiPageWidget().of([]);
    this.context = context;
    this.constraints = constraints;
    this.fullConstraints = fullConstraints;
    this.offsetStart = offsetStart;
    ;
  }).prototype = multi_page._MultiPageInstance.prototype;
  dart.addTypeTests(multi_page._MultiPageInstance);
  dart.addTypeCaches(multi_page._MultiPageInstance);
  dart.setLibraryUri(multi_page._MultiPageInstance, I[3]);
  dart.setFieldSignature(multi_page._MultiPageInstance, () => ({
    __proto__: dart.getFields(multi_page._MultiPageInstance.__proto__),
    context: dart.finalFieldType(widget$.Context),
    constraints: dart.finalFieldType(geometry.BoxConstraints),
    fullConstraints: dart.finalFieldType(geometry.BoxConstraints),
    offsetStart: dart.finalFieldType(dart.nullable(core.double)),
    widgets: dart.finalFieldType(core.List$(multi_page._MultiPageWidget))
  }));
  var crossAxisAlignment$1 = dart.privateName(multi_page, "MultiPage.crossAxisAlignment");
  var header$ = dart.privateName(multi_page, "MultiPage.header");
  var footer$ = dart.privateName(multi_page, "MultiPage.footer");
  var mainAxisAlignment$0 = dart.privateName(multi_page, "MultiPage.mainAxisAlignment");
  var maxPages$ = dart.privateName(multi_page, "MultiPage.maxPages");
  var _pages = dart.privateName(multi_page, "_pages");
  var _buildList = dart.privateName(multi_page, "_buildList");
  var _paintChild = dart.privateName(multi_page, "_paintChild");
  var pageTheme$ = dart.privateName(page$, "Page.pageTheme");
  var _pdfPage = dart.privateName(page$, "_pdfPage");
  var _build$ = dart.privateName(page$, "_build");
  page$.Page = class Page extends core.Object {
    get pageTheme() {
      return this[pageTheme$];
    }
    set pageTheme(value) {
      super.pageTheme = value;
    }
    static ['_#new#tearOff'](opts) {
      let pageTheme = opts && 'pageTheme' in opts ? opts.pageTheme : null;
      let pageFormat = opts && 'pageFormat' in opts ? opts.pageFormat : null;
      let build = opts && 'build' in opts ? opts.build : null;
      let theme = opts && 'theme' in opts ? opts.theme : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let margin = opts && 'margin' in opts ? opts.margin : null;
      let clip = opts && 'clip' in opts ? opts.clip : false;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      return new page$.Page.new({pageTheme: pageTheme, pageFormat: pageFormat, build: build, theme: theme, orientation: orientation, margin: margin, clip: clip, textDirection: textDirection});
    }
    get pageFormat() {
      let t93, t93$;
      t93$ = (t93 = this[_pdfPage], t93 == null ? null : t93.pageFormat);
      return t93$ == null ? this.pageTheme.pageFormat : t93$;
    }
    get orientation() {
      return this.pageTheme.orientation;
    }
    get theme() {
      return this.pageTheme.theme;
    }
    get mustRotate() {
      return this.pageTheme.mustRotate;
    }
    get margin() {
      return this.pageTheme.margin;
    }
    debugPaint(context) {
      let t93;
      let _margin = dart.nullCheck(this.margin);
      t93 = context.canvas;
      (() => {
        t93.setFillColor(colors.PdfColors.lightGreen);
        t93.moveTo(0.0, 0.0);
        t93.lineTo(this.pageFormat.width, 0.0);
        t93.lineTo(this.pageFormat.width, this.pageFormat.height);
        t93.lineTo(0.0, this.pageFormat.height);
        t93.moveTo(_margin.left, _margin.bottom);
        t93.lineTo(_margin.left, this.pageFormat.height - _margin.top);
        t93.lineTo(this.pageFormat.width - _margin.right, this.pageFormat.height - _margin.top);
        t93.lineTo(this.pageFormat.width - _margin.right, _margin.bottom);
        t93.fillPath();
        return t93;
      })();
    }
    generate(document, opts) {
      let insert = opts && 'insert' in opts ? opts.insert : true;
      let index = opts && 'index' in opts ? opts.index : null;
      if (index != null) {
        if (insert) {
          this[_pdfPage] = new page.PdfPage.new(document.document, {pageFormat: this.pageFormat, index: index});
        } else {
          this[_pdfPage] = document.document.page(index);
        }
      } else {
        this[_pdfPage] = new page.PdfPage.new(document.document, {pageFormat: this.pageFormat});
      }
    }
    postProcess(document) {
      let t93, t93$, t94;
      let canvas = dart.nullCheck(this[_pdfPage]).getGraphics();
      canvas.reset();
      let _margin = this.margin;
      let constraints = this.mustRotate ? new geometry.BoxConstraints.new({maxWidth: this.pageFormat.height - dart.nullCheck(_margin).vertical, maxHeight: this.pageFormat.width - _margin.horizontal}) : new geometry.BoxConstraints.new({maxWidth: this.pageFormat.width - dart.nullCheck(_margin).horizontal, maxHeight: this.pageFormat.height - _margin.vertical});
      let calculatedTheme = (t93$ = (t93 = this.theme, t93 == null ? document.theme : t93), t93$ == null ? theme$.ThemeData.base() : t93$);
      let context = widget$.Context.new({document: document.document, page: dart.nullCheck(this[_pdfPage]), canvas: canvas}).inheritFromAll((() => {
        let t93 = T$.JSArrayOfInherited().of([calculatedTheme]);
        if (this.pageTheme.textDirection != null) t93.push(new text_style.InheritedDirectionality.new(this.pageTheme.textDirection));
        return t93;
      })());
      let background = null;
      let content = null;
      let foreground = null;
      content = (t94 = context, this[_build$](t94));
      let size = this.layout(content, context, constraints);
      if (dart.nullCheck(this[_pdfPage]).pageFormat.height === 1 / 0) {
        dart.nullCheck(this[_pdfPage]).pageFormat = dart.nullCheck(this[_pdfPage]).pageFormat.copyWith({width: size.x, height: size.y});
        constraints = this.mustRotate ? new geometry.BoxConstraints.new({maxWidth: dart.nullCheck(this[_pdfPage]).pageFormat.height - _margin.vertical, maxHeight: dart.nullCheck(this[_pdfPage]).pageFormat.width - _margin.horizontal}) : new geometry.BoxConstraints.new({maxWidth: dart.nullCheck(this[_pdfPage]).pageFormat.width - _margin.horizontal, maxHeight: dart.nullCheck(this[_pdfPage]).pageFormat.height - _margin.vertical});
      }
      if (this.pageTheme.buildBackground != null) {
        background = dart.nullCheck(this.pageTheme.buildBackground)(context);
        this.layout(background, context, constraints);
      }
      if (this.pageTheme.buildForeground != null) {
        foreground = dart.nullCheck(this.pageTheme.buildForeground)(context);
        this.layout(foreground, context, constraints);
      }
      if (!dart.fn(() => {
        if (document$0.Document.debug) {
          this.debugPaint(context);
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[70], 165, 12, "() {\n      if (Document.debug) {\n        debugPaint(context);\n      }\n      return true;\n    }()");
      if (background != null) {
        this.paint(background, context);
      }
      this.paint(content, context);
      if (foreground != null) {
        this.paint(foreground, context);
      }
    }
    layout(child, context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      let _margin = dart.nullCheck(this.margin);
      child.layout(context, constraints, {parentUsesSize: parentUsesSize});
      if (!(child.box != null)) dart.assertFailed(null, I[70], 188, 12, "child.box != null");
      let width = this.pageFormat.width === 1 / 0 ? dart.nullCheck(child.box).width + _margin.left + _margin.right : this.pageFormat.width;
      let height = this.pageFormat.height === 1 / 0 ? dart.nullCheck(child.box).height + _margin.top + _margin.bottom : this.pageFormat.height;
      child.box = new rect$.PdfRect.new(_margin.left, height - dart.nullCheck(child.box).height - _margin.top, dart.nullCheck(child.box).width, dart.nullCheck(child.box).height);
      return new point$.PdfPoint.new(width, height);
    }
    paint(child, context) {
      let t94, t95, t94$;
      if (this.pageTheme.clip) {
        let _margin = dart.nullCheck(this.margin);
        t94 = context.canvas;
        (() => {
          t94.saveContext();
          t94.drawRect(_margin.left, _margin.bottom, this.pageFormat.width - _margin.horizontal, this.pageFormat.height - _margin.vertical);
          t94.clipPath();
          return t94;
        })();
      }
      if (this.mustRotate) {
        let _margin = dart.nullCheck(this.margin);
        t94$ = context.canvas;
        (() => {
          t94$.saveContext();
          t94$.setTransform((t95 = vector_math_64.Matrix4.identity(), (() => {
            t95.rotateZ(-3.141592653589793 / 2);
            t95.translate(-this.pageFormat.height - _margin.left + _margin.top, -this.pageFormat.height + this.pageFormat.width + _margin.top - _margin.right);
            return t95;
          })()));
          return t94$;
        })();
        child.paint(context);
        context.canvas.restoreContext();
      } else {
        child.paint(context);
      }
      if (this.pageTheme.clip) {
        context.canvas.restoreContext();
      }
    }
  };
  (page$.Page.new = function(opts) {
    let t93;
    let pageTheme = opts && 'pageTheme' in opts ? opts.pageTheme : null;
    let pageFormat = opts && 'pageFormat' in opts ? opts.pageFormat : null;
    let build = opts && 'build' in opts ? opts.build : null;
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let orientation = opts && 'orientation' in opts ? opts.orientation : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    let clip = opts && 'clip' in opts ? opts.clip : false;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    this[_pdfPage] = null;
    if (!(pageTheme == null || pageFormat == null && theme == null && orientation == null && margin == null && clip === false && textDirection == null)) dart.assertFailed("Don't set both pageTheme and other settings", I[70], 47, 13, "pageTheme == null ||\n                (pageFormat == null &&\n                    theme == null &&\n                    orientation == null &&\n                    margin == null &&\n                    clip == false &&\n                    textDirection == null)");
    this[pageTheme$] = (t93 = pageTheme, t93 == null ? new page_theme.PageTheme.new({pageFormat: pageFormat, orientation: orientation, margin: margin, theme: theme, clip: clip, textDirection: textDirection}) : t93);
    this[_build$] = build;
    ;
  }).prototype = page$.Page.prototype;
  dart.addTypeTests(page$.Page);
  dart.addTypeCaches(page$.Page);
  dart.setMethodSignature(page$.Page, () => ({
    __proto__: dart.getMethods(page$.Page.__proto__),
    debugPaint: dart.fnType(dart.void, [widget$.Context]),
    generate: dart.fnType(dart.void, [document$0.Document], {index: dart.nullable(core.int), insert: core.bool}, {}),
    postProcess: dart.fnType(dart.void, [document$0.Document]),
    layout: dart.fnType(point$.PdfPoint, [widget$.Widget, widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {}),
    paint: dart.fnType(dart.void, [widget$.Widget, widget$.Context])
  }));
  dart.setGetterSignature(page$.Page, () => ({
    __proto__: dart.getGetters(page$.Page.__proto__),
    pageFormat: page_format.PdfPageFormat,
    orientation: page$.PageOrientation,
    theme: dart.nullable(theme$.ThemeData),
    mustRotate: core.bool,
    margin: dart.nullable(geometry.EdgeInsets)
  }));
  dart.setLibraryUri(page$.Page, I[71]);
  dart.setFieldSignature(page$.Page, () => ({
    __proto__: dart.getFields(page$.Page.__proto__),
    pageTheme: dart.finalFieldType(page_theme.PageTheme),
    [_build$]: dart.finalFieldType(dart.fnType(widget$.Widget, [widget$.Context])),
    [_pdfPage]: dart.fieldType(dart.nullable(page.PdfPage))
  }));
  multi_page.MultiPage = class MultiPage extends page$.Page {
    get crossAxisAlignment() {
      return this[crossAxisAlignment$1];
    }
    set crossAxisAlignment(value) {
      super.crossAxisAlignment = value;
    }
    get header() {
      return this[header$];
    }
    set header(value) {
      super.header = value;
    }
    get footer() {
      return this[footer$];
    }
    set footer(value) {
      super.footer = value;
    }
    get mainAxisAlignment() {
      return this[mainAxisAlignment$0];
    }
    set mainAxisAlignment(value) {
      super.mainAxisAlignment = value;
    }
    get maxPages() {
      return this[maxPages$];
    }
    set maxPages(value) {
      super.maxPages = value;
    }
    static ['_#new#tearOff'](opts) {
      let pageTheme = opts && 'pageTheme' in opts ? opts.pageTheme : null;
      let pageFormat = opts && 'pageFormat' in opts ? opts.pageFormat : null;
      let build = opts && 'build' in opts ? opts.build : null;
      let mainAxisAlignment = opts && 'mainAxisAlignment' in opts ? opts.mainAxisAlignment : C[207] || CT.C207;
      let crossAxisAlignment = opts && 'crossAxisAlignment' in opts ? opts.crossAxisAlignment : C[214] || CT.C214;
      let header = opts && 'header' in opts ? opts.header : null;
      let footer = opts && 'footer' in opts ? opts.footer : null;
      let theme = opts && 'theme' in opts ? opts.theme : null;
      let maxPages = opts && 'maxPages' in opts ? opts.maxPages : 20;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let margin = opts && 'margin' in opts ? opts.margin : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      return new multi_page.MultiPage.new({pageTheme: pageTheme, pageFormat: pageFormat, build: build, mainAxisAlignment: mainAxisAlignment, crossAxisAlignment: crossAxisAlignment, header: header, footer: footer, theme: theme, maxPages: maxPages, orientation: orientation, margin: margin, textDirection: textDirection});
    }
    [_paintChild](context, child, x, y, pageHeight) {
      let t84, t83;
      if (this.mustRotate) {
        let _margin = dart.nullCheck(this.margin);
        t83 = context.canvas;
        (() => {
          t83.saveContext();
          t83.setTransform((t84 = vector_math_64.Matrix4.identity(), (() => {
            t84.rotateZ(-3.141592653589793 / 2);
            t84.translate(x - pageHeight + _margin.top - _margin.left, y + _margin.left - _margin.bottom);
            return t84;
          })()));
          return t83;
        })();
        child.paint(context);
        context.canvas.restoreContext();
      } else {
        child.box = new rect$.PdfRect.new(x, y, dart.nullCheck(child.box).width, dart.nullCheck(child.box).height);
        child.paint(context);
      }
    }
    generate(document, opts) {
      let t83, t83$, t87, t87$;
      let insert = opts && 'insert' in opts ? opts.insert : true;
      let index = opts && 'index' in opts ? opts.index : null;
      if (!(this.pageFormat.width > 0 && this.pageFormat.width < 1 / 0)) dart.assertFailed(null, I[69], 211, 12, "pageFormat.width > 0 && pageFormat.width < double.infinity");
      if (!(this.pageFormat.height > 0 && this.pageFormat.height < 1 / 0)) dart.assertFailed(null, I[69], 212, 12, "pageFormat.height > 0 && pageFormat.height < double.infinity");
      let _margin = this.margin;
      let _mustRotate = this.mustRotate;
      let pageHeight = _mustRotate ? this.pageFormat.width : this.pageFormat.height;
      let pageHeightMargin = _mustRotate ? dart.nullCheck(_margin).horizontal : dart.nullCheck(_margin).vertical;
      let constraints = new geometry.BoxConstraints.new({maxWidth: _mustRotate ? this.pageFormat.height - _margin.vertical : this.pageFormat.width - _margin.horizontal});
      let fullConstraints = this.mustRotate ? new geometry.BoxConstraints.new({maxWidth: this.pageFormat.height - _margin.vertical, maxHeight: this.pageFormat.width - _margin.horizontal}) : new geometry.BoxConstraints.new({maxWidth: this.pageFormat.width - _margin.horizontal, maxHeight: this.pageFormat.height - _margin.vertical});
      let calculatedTheme = (t83$ = (t83 = this.theme, t83 == null ? document.theme : t83), t83$ == null ? theme$.ThemeData.base() : t83$);
      let context = null;
      let offsetEnd = null;
      function offsetEnd$35get() {
        let t84;
        t84 = offsetEnd;
        return t84 == null ? dart.throw(new _internal.LateError.localNI("offsetEnd")) : t84;
      }
      dart.fn(offsetEnd$35get, T$.VoidTodouble());
      function offsetEnd$35set(offsetEnd$35param) {
        return offsetEnd = offsetEnd$35param;
      }
      dart.fn(offsetEnd$35set, T$.doubleTodynamic());
      let offsetStart = null;
      let _index = 0;
      let sameCount = 0;
      let baseContext = widget$.Context.new({document: document.document}).inheritFromAll((() => {
        let t86 = T$.JSArrayOfInherited().of([calculatedTheme]);
        if (this.pageTheme.textDirection != null) t86.push(new text_style.InheritedDirectionality.new(this.pageTheme.textDirection));
        return t86;
      })());
      let children = (t87 = baseContext, this[_buildList](t87));
      let widgetContext = null;
      while (_index < children[$length]) {
        let child = children[$_get](_index);
        if (!dart.fn(() => {
          let t87;
          if ((t87 = sameCount, sameCount = t87 + 1, t87) > this.maxPages) {
            dart.throw(core.Exception.new("This widget created more than " + dart.str(this.maxPages) + " pages. This may be an issue in the widget or the document. See https://pub.dev/documentation/pdf/latest/widgets/MultiPage-class.html"));
          }
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[69], 248, 14, "() {\n        // Detect too big widgets\n        if (sameCount++ > maxPages) {\n          throw Exception(\n              'This widget created more than $maxPages pages. This may be an issue in the widget or the document. See https://pub.dev/documentation/pdf/latest/widgets/MultiPage-class.html');\n        }\n        return true;\n      }()");
        if (context == null || multi_page.NewPage.is(child)) {
          let pdfPage = new page.PdfPage.new(document.document, {pageFormat: this.pageFormat, index: index == null ? null : (t87$ = index, index = t87$ + 1, t87$)});
          let canvas = pdfPage.getGraphics();
          canvas.reset();
          context = baseContext.copyWith({page: pdfPage, canvas: canvas});
          if (!dart.fn(() => {
            if (document$0.Document.debug) {
              this.debugPaint(dart.nullCheck(context));
            }
            return true;
          }, T$.VoidTobool())()) dart.assertFailed(null, I[69], 268, 16, "() {\n          if (Document.debug) {\n            debugPaint(context!);\n          }\n          return true;\n        }()");
          offsetStart = pageHeight - (_mustRotate ? pageHeightMargin - _margin.bottom : _margin.top);
          offsetEnd$35set(_mustRotate ? pageHeightMargin - _margin.left : _margin.bottom);
          this[_pages][$add](new multi_page._MultiPageInstance.new({context: context, constraints: constraints, fullConstraints: fullConstraints, offsetStart: offsetStart}));
          if (this.header != null) {
            let headerWidget = dart.nullCheck(this.header)(context);
            headerWidget.layout(context, constraints, {parentUsesSize: false});
            if (!(headerWidget.box != null)) dart.assertFailed(null, I[69], 291, 18, "headerWidget.box != null");
            offsetStart = dart.notNull(offsetStart) - dart.nullCheck(headerWidget.box).height;
          }
          if (this.footer != null) {
            let footerWidget = dart.nullCheck(this.footer)(context);
            footerWidget.layout(context, constraints, {parentUsesSize: false});
            if (!(footerWidget.box != null)) dart.assertFailed(null, I[69], 299, 18, "footerWidget.box != null");
            offsetEnd$35set(offsetEnd$35get() + dart.nullCheck(footerWidget.box).height);
          }
        }
        let savedContext = null;
        if (multi_page.SpanningWidget.is(child) && child.canSpan) {
          if (widgetContext != null) {
            child.restoreContext(widgetContext);
            widgetContext = null;
          }
          savedContext = child.cloneContext();
        }
        child.layout(context, constraints, {parentUsesSize: false});
        if (!(child.box != null)) dart.assertFailed(null, I[69], 315, 14, "child.box != null");
        let canSpan = multi_page.SpanningWidget.is(child) && child.canSpan;
        if (dart.nullCheck(offsetStart) - dart.nullCheck(child.box).height < offsetEnd$35get()) {
          if (dart.nullCheck(child.box).height <= pageHeight - pageHeightMargin && !canSpan) {
            context = null;
            continue;
          }
          if (!canSpan) {
            dart.throw(core.Exception.new("Widget won't fit into the page as its height (" + dart.str(dart.nullCheck(child.box).height) + ") " + "exceed a page height (" + dart.str(pageHeight - pageHeightMargin) + "). " + "You probably need a SpanningWidget or use a single page layout"));
          }
          let span = multi_page.SpanningWidget.as(child);
          if (savedContext != null) {
            span.applyContext(savedContext);
          }
          let localConstraints = constraints.copyWith({maxHeight: dart.notNull(offsetStart) - offsetEnd$35get()});
          span.layout(context, localConstraints, {parentUsesSize: false});
          if (!(span.box != null)) dart.assertFailed(null, I[69], 346, 16, "span.box != null");
          widgetContext = span.saveContext();
          this[_pages][$last].widgets[$add](new multi_page._MultiPageWidget.new({child: span, constraints: localConstraints, widgetContext: widgetContext.clone()}));
          if (!span.hasMoreWidgets) {
            sameCount = 0;
            _index = _index + 1;
          }
          context = null;
          continue;
        }
        this[_pages][$last].widgets[$add](new multi_page._MultiPageWidget.new({child: child, constraints: constraints, widgetContext: multi_page.SpanningWidget.is(child) && canSpan ? child.cloneContext() : null}));
        offsetStart = dart.notNull(offsetStart) - dart.nullCheck(child.box).height;
        sameCount = 0;
        _index = _index + 1;
      }
    }
    postProcess(document) {
      let _margin = this.margin;
      let _mustRotate = this.mustRotate;
      let pageHeight = _mustRotate ? this.pageFormat.width : this.pageFormat.height;
      let pageWidth = _mustRotate ? this.pageFormat.height : this.pageFormat.width;
      let pageHeightMargin = _mustRotate ? dart.nullCheck(_margin).horizontal : dart.nullCheck(_margin).vertical;
      let pageWidthMargin = _mustRotate ? _margin.vertical : _margin.horizontal;
      let availableWidth = pageWidth - pageWidthMargin;
      for (let page of this[_pages]) {
        let offsetStart = pageHeight - (_mustRotate ? pageHeightMargin - _margin.bottom : _margin.top);
        let offsetEnd = _mustRotate ? pageHeightMargin - _margin.left : _margin.bottom;
        if (this.pageTheme.buildBackground != null) {
          let child = dart.nullCheck(this.pageTheme.buildBackground)(page.context);
          child.layout(page.context, page.fullConstraints, {parentUsesSize: false});
          if (!(child.box != null)) dart.assertFailed(null, I[69], 403, 16, "child.box != null");
          this[_paintChild](page.context, child, _margin.left, _margin.bottom, this.pageFormat.height);
        }
        let totalFlex = 0;
        let allocatedSize = 0.0;
        let lastFlexChild = null;
        for (let widget of page.widgets) {
          let child = widget.child;
          let flex = flex$.Flexible.is(child) ? child.flex : 0;
          if (flex > 0) {
            totalFlex = totalFlex + flex;
            lastFlexChild = child;
          } else {
            if (multi_page.SpanningWidget.is(child) && child.canSpan) {
              child.applyContext(dart.nullCheck(widget.widgetContext));
            }
            child.layout(page.context, widget.constraints, {parentUsesSize: false});
            if (!(child.box != null)) dart.assertFailed(null, I[69], 423, 18, "child.box != null");
            allocatedSize = allocatedSize + dart.nullCheck(child.box).height;
          }
        }
        if (this.header != null) {
          let headerWidget = dart.nullCheck(this.header)(page.context);
          headerWidget.layout(page.context, page.constraints, {parentUsesSize: false});
          if (!(headerWidget.box != null)) dart.assertFailed(null, I[69], 433, 16, "headerWidget.box != null");
          offsetStart = offsetStart - dart.nullCheck(headerWidget.box).height;
          this[_paintChild](page.context, headerWidget, _margin.left, dart.nullCheck(page.offsetStart) - dart.nullCheck(headerWidget.box).height, this.pageFormat.height);
        }
        if (this.footer != null) {
          let footerWidget = dart.nullCheck(this.footer)(page.context);
          footerWidget.layout(page.context, page.constraints, {parentUsesSize: false});
          if (!(footerWidget.box != null)) dart.assertFailed(null, I[69], 444, 16, "footerWidget.box != null");
          offsetEnd = offsetEnd + dart.nullCheck(footerWidget.box).height;
          this[_paintChild](page.context, footerWidget, _margin.left, _margin.bottom, this.pageFormat.height);
        }
        let freeSpace = math.max(core.double, 0.0, offsetStart - offsetEnd - allocatedSize);
        let spacePerFlex = totalFlex > 0 ? freeSpace / totalFlex : 0 / 0;
        let allocatedFlexSpace = 0.0;
        let leadingSpace = 0.0;
        let betweenSpace = 0.0;
        if (totalFlex === 0) {
          let totalChildren = page.widgets[$length];
          switch (this.mainAxisAlignment) {
            case C[207] || CT.C207:
              {
                leadingSpace = 0.0;
                betweenSpace = 0.0;
                break;
              }
            case C[208] || CT.C208:
              {
                leadingSpace = freeSpace;
                betweenSpace = 0.0;
                break;
              }
            case C[209] || CT.C209:
              {
                leadingSpace = freeSpace / 2.0;
                betweenSpace = 0.0;
                break;
              }
            case C[210] || CT.C210:
              {
                leadingSpace = 0.0;
                betweenSpace = totalChildren > 1 ? freeSpace / (totalChildren - 1) : 0.0;
                break;
              }
            case C[211] || CT.C211:
              {
                betweenSpace = totalChildren > 0 ? freeSpace / totalChildren : 0.0;
                leadingSpace = betweenSpace / 2.0;
                break;
              }
            case C[212] || CT.C212:
              {
                betweenSpace = totalChildren > 0 ? freeSpace / (totalChildren + 1) : 0.0;
                leadingSpace = betweenSpace;
                break;
              }
          }
        }
        for (let widget of page.widgets) {
          let child = widget.child;
          let flex = flex$.Flexible.is(child) ? child.flex : 0;
          let fit = flex$.Flexible.is(child) ? child.fit : flex$.FlexFit.loose;
          if (flex > 0) {
            if (!(!multi_page.SpanningWidget.is(child) || child.canSpan === false)) dart.assertFailed("Cannot have a spanning widget flexible", I[69], 497, 18, "child is! SpanningWidget || child.canSpan == false");
            let maxChildExtent = child[$_equals](lastFlexChild) ? freeSpace - allocatedFlexSpace : spacePerFlex * flex;
            let minChildExtent = null;
            function minChildExtent$35get() {
              let t88;
              t88 = minChildExtent;
              return t88 == null ? dart.throw(new _internal.LateError.localNI("minChildExtent")) : t88;
            }
            dart.fn(minChildExtent$35get, T$.VoidTodouble());
            function minChildExtent$35set(minChildExtent$35param) {
              return minChildExtent = minChildExtent$35param;
            }
            dart.fn(minChildExtent$35set, T$.doubleTodynamic());
            switch (fit) {
              case C[201] || CT.C201:
                {
                  if (!(maxChildExtent < 1 / 0)) dart.assertFailed(null, I[69], 505, 22, "maxChildExtent < double.infinity");
                  minChildExtent$35set(maxChildExtent);
                  break;
                }
              case C[202] || CT.C202:
                {
                  minChildExtent$35set(0.0);
                  break;
                }
            }
            let innerConstraints = new geometry.BoxConstraints.new({minWidth: widget.constraints.maxWidth, maxWidth: widget.constraints.maxWidth, minHeight: minChildExtent$35get(), maxHeight: maxChildExtent});
            child.layout(page.context, innerConstraints, {parentUsesSize: false});
            if (!(child.box != null)) dart.assertFailed(null, I[69], 520, 18, "child.box != null");
            let childSize = dart.nullCheck(child.box).height;
            if (!(childSize <= maxChildExtent)) dart.assertFailed(null, I[69], 522, 18, "childSize <= maxChildExtent");
            allocatedSize = allocatedSize + childSize;
            allocatedFlexSpace = allocatedFlexSpace + maxChildExtent;
          }
        }
        let pos = offsetStart - leadingSpace;
        for (let widget of page.widgets) {
          pos = pos - dart.nullCheck(widget.child.box).height;
          let x = null;
          function x$35get() {
            let t91;
            t91 = x;
            return t91 == null ? dart.throw(new _internal.LateError.localNI("x")) : t91;
          }
          dart.fn(x$35get, T$.VoidTodouble());
          function x$35set(x$35param) {
            return x = x$35param;
          }
          dart.fn(x$35set, T$.doubleTodynamic());
          switch (this.crossAxisAlignment) {
            case C[214] || CT.C214:
              {
                x$35set(0.0);
                break;
              }
            case C[215] || CT.C215:
              {
                x$35set(availableWidth - dart.nullCheck(widget.child.box).width);
                break;
              }
            case C[216] || CT.C216:
              {
                x$35set(availableWidth / 2 - dart.nullCheck(widget.child.box).width / 2);
                break;
              }
            case C[217] || CT.C217:
              {
                x$35set(0.0);
                break;
              }
          }
          let child = widget.child;
          if (multi_page.SpanningWidget.is(child) && child.canSpan) {
            child.applyContext(dart.nullCheck(widget.widgetContext));
          }
          this[_paintChild](page.context, widget.child, _margin.left + x$35get(), pos, this.pageFormat.height);
          pos = pos - betweenSpace;
        }
        if (this.pageTheme.buildForeground != null) {
          let child = dart.nullCheck(this.pageTheme.buildForeground)(page.context);
          child.layout(page.context, page.fullConstraints, {parentUsesSize: false});
          if (!(child.box != null)) dart.assertFailed(null, I[69], 559, 16, "child.box != null");
          this[_paintChild](page.context, child, _margin.left, _margin.bottom, this.pageFormat.height);
        }
      }
    }
  };
  (multi_page.MultiPage.new = function(opts) {
    let pageTheme = opts && 'pageTheme' in opts ? opts.pageTheme : null;
    let pageFormat = opts && 'pageFormat' in opts ? opts.pageFormat : null;
    let build = opts && 'build' in opts ? opts.build : null;
    let mainAxisAlignment = opts && 'mainAxisAlignment' in opts ? opts.mainAxisAlignment : C[207] || CT.C207;
    let crossAxisAlignment = opts && 'crossAxisAlignment' in opts ? opts.crossAxisAlignment : C[214] || CT.C214;
    let header = opts && 'header' in opts ? opts.header : null;
    let footer = opts && 'footer' in opts ? opts.footer : null;
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let maxPages = opts && 'maxPages' in opts ? opts.maxPages : 20;
    let orientation = opts && 'orientation' in opts ? opts.orientation : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    this[_pages] = T$.JSArrayOf_MultiPageInstance().of([]);
    this[mainAxisAlignment$0] = mainAxisAlignment;
    this[crossAxisAlignment$1] = crossAxisAlignment;
    this[header$] = header;
    this[footer$] = footer;
    this[maxPages$] = maxPages;
    this[_buildList] = build;
    if (!(maxPages > 0)) dart.assertFailed(null, I[69], 157, 16, "maxPages > 0");
    multi_page.MultiPage.__proto__.new.call(this, {pageTheme: pageTheme, pageFormat: pageFormat, build: dart.fn(_ => new basic.SizedBox.new(), T$.ContextToSizedBox()), margin: margin, theme: theme, orientation: orientation, textDirection: textDirection});
    ;
  }).prototype = multi_page.MultiPage.prototype;
  dart.addTypeTests(multi_page.MultiPage);
  dart.addTypeCaches(multi_page.MultiPage);
  dart.setMethodSignature(multi_page.MultiPage, () => ({
    __proto__: dart.getMethods(multi_page.MultiPage.__proto__),
    [_paintChild]: dart.fnType(dart.void, [widget$.Context, widget$.Widget, core.double, core.double, core.double])
  }));
  dart.setLibraryUri(multi_page.MultiPage, I[3]);
  dart.setFieldSignature(multi_page.MultiPage, () => ({
    __proto__: dart.getFields(multi_page.MultiPage.__proto__),
    [_buildList]: dart.finalFieldType(dart.fnType(core.List$(widget$.Widget), [widget$.Context])),
    crossAxisAlignment: dart.finalFieldType(flex$.CrossAxisAlignment),
    header: dart.finalFieldType(dart.nullable(dart.fnType(widget$.Widget, [widget$.Context]))),
    footer: dart.finalFieldType(dart.nullable(dart.fnType(widget$.Widget, [widget$.Context]))),
    mainAxisAlignment: dart.finalFieldType(flex$.MainAxisAlignment),
    [_pages]: dart.finalFieldType(core.List$(multi_page._MultiPageInstance)),
    maxPages: dart.finalFieldType(core.int)
  }));
  var dpi$0 = dart.privateName(image_provider, "ImageProvider.dpi");
  var orientation$ = dart.privateName(image_provider, "ImageProvider.orientation");
  var _cache = dart.privateName(image_provider, "_cache");
  var _width$ = dart.privateName(image_provider, "_width");
  var _height$ = dart.privateName(image_provider, "_height");
  image_provider.ImageProvider = class ImageProvider extends core.Object {
    get dpi() {
      return this[dpi$0];
    }
    set dpi(value) {
      super.dpi = value;
    }
    get orientation() {
      return this[orientation$];
    }
    set orientation(value) {
      super.orientation = value;
    }
    get width() {
      return this.orientation.index >= 4 ? this[_height$] : this[_width$];
    }
    get height() {
      return this.orientation.index < 4 ? this[_height$] : this[_width$];
    }
    resolve(context, size, opts) {
      let t94, t95, t94$, t94$0;
      let dpi = opts && 'dpi' in opts ? opts.dpi : null;
      let effectiveDpi = (t94 = dpi, t94 == null ? this.dpi : t94);
      if (effectiveDpi == null || this[_cache][$_get](0) != null) {
        t94$ = this[_cache];
        t95 = 0;
        t94$[$_get](t95) == null ? t94$[$_set](t95, this.buildImage(context)) : null;
        if (!dart.nullCheck(this[_cache][$_get](0)).pdfDocument[$_equals](context.document)) {
          this[_cache][$_set](0, this.buildImage(context));
        }
        return dart.nullCheck(this[_cache][$_get](0));
      }
      let width = (size.x / 72 * dart.notNull(effectiveDpi))[$toInt]();
      let height = (size.y / 72 * dart.notNull(effectiveDpi))[$toInt]();
      if (!this[_cache][$containsKey](width)) {
        t94$0 = this[_cache];
        t94$0[$_get](width) == null ? t94$0[$_set](width, this.buildImage(context, {width: width, height: height})) : null;
      }
      if (!dart.nullCheck(this[_cache][$_get](width)).pdfDocument[$_equals](context.document)) {
        this[_cache][$_set](width, this.buildImage(context, {width: width, height: height}));
      }
      return dart.nullCheck(this[_cache][$_get](width));
    }
  };
  (image_provider.ImageProvider.new = function(_width, _height, orientation, dpi) {
    this[_cache] = new (T$.IdentityMapOfint$PdfImage()).new();
    this[_width$] = _width;
    this[_height$] = _height;
    this[orientation$] = orientation;
    this[dpi$0] = dpi;
    ;
  }).prototype = image_provider.ImageProvider.prototype;
  dart.addTypeTests(image_provider.ImageProvider);
  dart.addTypeCaches(image_provider.ImageProvider);
  dart.setMethodSignature(image_provider.ImageProvider, () => ({
    __proto__: dart.getMethods(image_provider.ImageProvider.__proto__),
    resolve: dart.fnType(image$.PdfImage, [widget$.Context, point$.PdfPoint], {dpi: dart.nullable(core.double)}, {})
  }));
  dart.setGetterSignature(image_provider.ImageProvider, () => ({
    __proto__: dart.getGetters(image_provider.ImageProvider.__proto__),
    width: dart.nullable(core.int),
    height: dart.nullable(core.int)
  }));
  dart.setLibraryUri(image_provider.ImageProvider, I[72]);
  dart.setFieldSignature(image_provider.ImageProvider, () => ({
    __proto__: dart.getFields(image_provider.ImageProvider.__proto__),
    dpi: dart.finalFieldType(dart.nullable(core.double)),
    [_width$]: dart.finalFieldType(dart.nullable(core.int)),
    [_height$]: dart.finalFieldType(core.int),
    orientation: dart.finalFieldType(image$.PdfImageOrientation),
    [_cache]: dart.finalFieldType(core.Map$(core.int, image$.PdfImage))
  }));
  var _image$ = dart.privateName(image_provider, "_image");
  image_provider.ImageProxy = class ImageProxy extends image_provider.ImageProvider {
    static ['_#new#tearOff'](_image, opts) {
      let dpi = opts && 'dpi' in opts ? opts.dpi : null;
      return new image_provider.ImageProxy.new(_image, {dpi: dpi});
    }
    buildImage(context, opts) {
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      return this[_image$];
    }
  };
  (image_provider.ImageProxy.new = function(_image, opts) {
    let dpi = opts && 'dpi' in opts ? opts.dpi : null;
    this[_image$] = _image;
    image_provider.ImageProxy.__proto__.new.call(this, _image.width, _image.height, _image.orientation, dpi);
    ;
  }).prototype = image_provider.ImageProxy.prototype;
  dart.addTypeTests(image_provider.ImageProxy);
  dart.addTypeCaches(image_provider.ImageProxy);
  dart.setMethodSignature(image_provider.ImageProxy, () => ({
    __proto__: dart.getMethods(image_provider.ImageProxy.__proto__),
    buildImage: dart.fnType(image$.PdfImage, [widget$.Context], {height: dart.nullable(core.int), width: dart.nullable(core.int)}, {})
  }));
  dart.setLibraryUri(image_provider.ImageProxy, I[72]);
  dart.setFieldSignature(image_provider.ImageProxy, () => ({
    __proto__: dart.getFields(image_provider.ImageProxy.__proto__),
    [_image$]: dart.finalFieldType(image$.PdfImage)
  }));
  var bytes$ = dart.privateName(image_provider, "MemoryImage.bytes");
  image_provider.MemoryImage = class MemoryImage extends image_provider.ImageProvider {
    get bytes() {
      return this[bytes$];
    }
    set bytes(value) {
      super.bytes = value;
    }
    static new(bytes, opts) {
      let t94, t94$;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let dpi = opts && 'dpi' in opts ? opts.dpi : null;
      let decoder = formats.findDecoderForData(bytes);
      if (decoder == null) {
        dart.throw(core.Exception.new("Unable to guess the image type " + dart.str(bytes[$length]) + " bytes"));
      }
      if (jpeg_decoder.JpegDecoder.is(decoder)) {
        let info = exif.PdfJpegInfo.new(bytes);
        return new image_provider.MemoryImage.__(bytes, info.width, info.height, (t94 = orientation, t94 == null ? info.orientation : t94), dpi);
      }
      let info = decoder.startDecode(bytes);
      if (info == null) {
        dart.throw(core.Exception.new("Unable decode the image"));
      }
      return new image_provider.MemoryImage.__(bytes, info.width, info.height, (t94$ = orientation, t94$ == null ? image$.PdfImageOrientation.topLeft : t94$), dpi);
    }
    static ['_#new#tearOff'](bytes, opts) {
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let dpi = opts && 'dpi' in opts ? opts.dpi : null;
      return image_provider.MemoryImage.new(bytes, {orientation: orientation, dpi: dpi});
    }
    static ['_#_#tearOff'](bytes, width, height, orientation, dpi) {
      return new image_provider.MemoryImage.__(bytes, width, height, orientation, dpi);
    }
    buildImage(context, opts) {
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      if (width == null) {
        return image$.PdfImage.file(context.document, {bytes: this.bytes});
      }
      let image = formats.decodeImage(this.bytes);
      if (image == null) {
        dart.throw(core.Exception.new("Unable decode the image"));
      }
      let resized = copy_resize.copyResize(image, {width: width});
      return image$.PdfImage.fromImage(context.document, {image: resized});
    }
  };
  (image_provider.MemoryImage.__ = function(bytes, width, height, orientation, dpi) {
    this[bytes$] = bytes;
    image_provider.MemoryImage.__proto__.new.call(this, width, height, orientation, dpi);
    ;
  }).prototype = image_provider.MemoryImage.prototype;
  dart.addTypeTests(image_provider.MemoryImage);
  dart.addTypeCaches(image_provider.MemoryImage);
  dart.setMethodSignature(image_provider.MemoryImage, () => ({
    __proto__: dart.getMethods(image_provider.MemoryImage.__proto__),
    buildImage: dart.fnType(image$.PdfImage, [widget$.Context], {height: dart.nullable(core.int), width: dart.nullable(core.int)}, {})
  }));
  dart.setStaticMethodSignature(image_provider.MemoryImage, () => ['new']);
  dart.setLibraryUri(image_provider.MemoryImage, I[72]);
  dart.setFieldSignature(image_provider.MemoryImage, () => ({
    __proto__: dart.getFields(image_provider.MemoryImage.__proto__),
    bytes: dart.finalFieldType(typed_data.Uint8List)
  }));
  image_provider.ImageImage = class ImageImage extends image_provider.ImageProvider {
    static ['_#new#tearOff'](_image, opts) {
      let dpi = opts && 'dpi' in opts ? opts.dpi : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      return new image_provider.ImageImage.new(_image, {dpi: dpi, orientation: orientation});
    }
    buildImage(context, opts) {
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      if (width == null) {
        return image$.PdfImage.fromImage(context.document, {image: this[_image$]});
      }
      let resized = copy_resize.copyResize(this[_image$], {width: width});
      return image$.PdfImage.fromImage(context.document, {image: resized});
    }
  };
  (image_provider.ImageImage.new = function(_image, opts) {
    let t94;
    let dpi = opts && 'dpi' in opts ? opts.dpi : null;
    let orientation = opts && 'orientation' in opts ? opts.orientation : null;
    this[_image$] = _image;
    image_provider.ImageImage.__proto__.new.call(this, _image.width, _image.height, (t94 = orientation, t94 == null ? image$.PdfImageOrientation.topLeft : t94), dpi);
    ;
  }).prototype = image_provider.ImageImage.prototype;
  dart.addTypeTests(image_provider.ImageImage);
  dart.addTypeCaches(image_provider.ImageImage);
  dart.setMethodSignature(image_provider.ImageImage, () => ({
    __proto__: dart.getMethods(image_provider.ImageImage.__proto__),
    buildImage: dart.fnType(image$.PdfImage, [widget$.Context], {height: dart.nullable(core.int), width: dart.nullable(core.int)}, {})
  }));
  dart.setLibraryUri(image_provider.ImageImage, I[72]);
  dart.setFieldSignature(image_provider.ImageImage, () => ({
    __proto__: dart.getFields(image_provider.ImageImage.__proto__),
    [_image$]: dart.finalFieldType(image.Image)
  }));
  image_provider.RawImage = class RawImage extends image_provider.ImageImage {
    static ['_#new#tearOff'](opts) {
      let bytes = opts && 'bytes' in opts ? opts.bytes : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let dpi = opts && 'dpi' in opts ? opts.dpi : null;
      return new image_provider.RawImage.new({bytes: bytes, width: width, height: height, orientation: orientation, dpi: dpi});
    }
  };
  (image_provider.RawImage.new = function(opts) {
    let bytes = opts && 'bytes' in opts ? opts.bytes : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let orientation = opts && 'orientation' in opts ? opts.orientation : null;
    let dpi = opts && 'dpi' in opts ? opts.dpi : null;
    image_provider.RawImage.__proto__.new.call(this, new image.Image.fromBytes(width, height, bytes), {orientation: orientation, dpi: dpi});
    ;
  }).prototype = image_provider.RawImage.prototype;
  dart.addTypeTests(image_provider.RawImage);
  dart.addTypeCaches(image_provider.RawImage);
  dart.setLibraryUri(image_provider.RawImage, I[72]);
  var image$5 = dart.privateName(image$1, "Image.image");
  var fit$7 = dart.privateName(image$1, "Image.fit");
  var alignment$5 = dart.privateName(image$1, "Image.alignment");
  var width$9 = dart.privateName(image$1, "Image.width");
  var height$6 = dart.privateName(image$1, "Image.height");
  var dpi$1 = dart.privateName(image$1, "Image.dpi");
  image$1.Image = class Image extends widget$.Widget {
    get image() {
      return this[image$5];
    }
    set image(value) {
      super.image = value;
    }
    get fit() {
      return this[fit$7];
    }
    set fit(value) {
      super.fit = value;
    }
    get alignment() {
      return this[alignment$5];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get width() {
      return this[width$9];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$6];
    }
    set height(value) {
      super.height = value;
    }
    get dpi() {
      return this[dpi$1];
    }
    set dpi(value) {
      super.dpi = value;
    }
    static ['_#new#tearOff'](image, opts) {
      let fit = opts && 'fit' in opts ? opts.fit : C[64] || CT.C64;
      let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let dpi = opts && 'dpi' in opts ? opts.dpi : null;
      return new image$1.Image.new(image, {fit: fit, alignment: alignment, width: width, height: height, dpi: dpi});
    }
    layout(context, constraints, opts) {
      let t94, t94$;
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      let w = (t94 = this.width, t94 == null ? constraints.hasBoundedWidth ? constraints.maxWidth : constraints.constrainWidth(dart.nullCheck(this.image.width)[$toDouble]()) : t94);
      let h = (t94$ = this.height, t94$ == null ? constraints.hasBoundedHeight ? constraints.maxHeight : constraints.constrainHeight(dart.nullCheck(this.image.height)[$toDouble]()) : t94$);
      let sizes = geometry.applyBoxFit(this.fit, new point$.PdfPoint.new(dart.nullCheck(this.image.width)[$toDouble](), dart.nullCheck(this.image.height)[$toDouble]()), new point$.PdfPoint.new(w, h));
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, dart.nullCheck(sizes.destination));
    }
    paint(context) {
      super.paint(context);
      let rect = context.localToGlobal(dart.nullCheck(this.box));
      image$1._paintImage({canvas: context.canvas, image: this.image.resolve(context, rect.size, {dpi: this.dpi}), rect: dart.nullCheck(this.box), alignment: this.alignment, fit: this.fit});
    }
  };
  (image$1.Image.new = function(image, opts) {
    let fit = opts && 'fit' in opts ? opts.fit : C[64] || CT.C64;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let dpi = opts && 'dpi' in opts ? opts.dpi : null;
    this[image$5] = image;
    this[fit$7] = fit;
    this[alignment$5] = alignment;
    this[width$9] = width;
    this[height$6] = height;
    this[dpi$1] = dpi;
    image$1.Image.__proto__.new.call(this);
    ;
  }).prototype = image$1.Image.prototype;
  dart.addTypeTests(image$1.Image);
  dart.addTypeCaches(image$1.Image);
  dart.setMethodSignature(image$1.Image, () => ({
    __proto__: dart.getMethods(image$1.Image.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setLibraryUri(image$1.Image, I[73]);
  dart.setFieldSignature(image$1.Image, () => ({
    __proto__: dart.getFields(image$1.Image.__proto__),
    image: dart.finalFieldType(image_provider.ImageProvider),
    fit: dart.finalFieldType(basic.BoxFit),
    alignment: dart.finalFieldType(geometry.Alignment),
    width: dart.finalFieldType(dart.nullable(core.double)),
    height: dart.finalFieldType(dart.nullable(core.double)),
    dpi: dart.finalFieldType(dart.nullable(core.double))
  }));
  var shape$1 = dart.privateName(image$1, "Shape.shape");
  var strokeColor$3 = dart.privateName(image$1, "Shape.strokeColor");
  var fillColor$2 = dart.privateName(image$1, "Shape.fillColor");
  var width$10 = dart.privateName(image$1, "Shape.width");
  var height$7 = dart.privateName(image$1, "Shape.height");
  var fit$8 = dart.privateName(image$1, "Shape.fit");
  var __Shape__boundingBox = dart.privateName(image$1, "_#Shape#_boundingBox");
  var _boundingBox = dart.privateName(image$1, "_boundingBox");
  image$1.Shape = class Shape extends widget$.Widget {
    get shape() {
      return this[shape$1];
    }
    set shape(value) {
      super.shape = value;
    }
    get strokeColor() {
      return this[strokeColor$3];
    }
    set strokeColor(value) {
      super.strokeColor = value;
    }
    get fillColor() {
      return this[fillColor$2];
    }
    set fillColor(value) {
      super.fillColor = value;
    }
    get width() {
      return this[width$10];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$7];
    }
    set height(value) {
      super.height = value;
    }
    get fit() {
      return this[fit$8];
    }
    set fit(value) {
      super.fit = value;
    }
    static ['_#new#tearOff'](shape, opts) {
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let fit = opts && 'fit' in opts ? opts.fit : C[64] || CT.C64;
      return new image$1.Shape.new(shape, {strokeColor: strokeColor, fillColor: fillColor, width: width, height: height, fit: fit});
    }
    get [_boundingBox]() {
      let t94;
      t94 = this[__Shape__boundingBox];
      return t94 == null ? dart.throw(new _internal.LateError.fieldNI("_boundingBox")) : t94;
    }
    set [_boundingBox](library$32package$58pdf$47src$47widgets$47image$46dart$58$58_boundingBox$35param) {
      this[__Shape__boundingBox] = library$32package$58pdf$47src$47widgets$47image$46dart$58$58_boundingBox$35param;
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (this.width == null || this.height == null) {
        this[_boundingBox] = graphics.PdfGraphics.shapeBoundingBox(this.shape);
      } else {
        this[_boundingBox] = new rect$.PdfRect.new(0.0, 0.0, dart.nullCheck(this.width), dart.nullCheck(this.height));
      }
      let w = constraints.hasBoundedWidth ? constraints.maxWidth : constraints.constrainWidth(this[_boundingBox].width);
      let h = constraints.hasBoundedHeight ? constraints.maxHeight : constraints.constrainHeight(this[_boundingBox].height);
      let sizes = geometry.applyBoxFit(this.fit, this[_boundingBox].size, new point$.PdfPoint.new(w, h));
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, dart.nullCheck(sizes.destination));
    }
    paint(context) {
      let t95, t94, t94$, t94$0;
      super.paint(context);
      t94 = context.canvas;
      (() => {
        t94.saveContext();
        t94.setTransform((t95 = vector_math_64.Matrix4.identity(), (() => {
          t95.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y + dart.nullCheck(this.box).height);
          t95.scale(dart.nullCheck(this.box).width / this[_boundingBox].width, -dart.nullCheck(this.box).height / this[_boundingBox].height);
          t95.translate(-this[_boundingBox].x, -this[_boundingBox].y);
          return t95;
        })()));
        return t94;
      })();
      if (this.fillColor != null) {
        t94$ = context.canvas;
        (() => {
          t94$.setFillColor(this.fillColor);
          t94$.drawShape(this.shape);
          t94$.fillPath();
          return t94$;
        })();
      }
      if (this.strokeColor != null) {
        t94$0 = context.canvas;
        (() => {
          t94$0.setStrokeColor(this.strokeColor);
          t94$0.drawShape(this.shape);
          t94$0.strokePath();
          return t94$0;
        })();
      }
      context.canvas.restoreContext();
    }
  };
  (image$1.Shape.new = function(shape, opts) {
    let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
    let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let fit = opts && 'fit' in opts ? opts.fit : C[64] || CT.C64;
    this[__Shape__boundingBox] = null;
    this[shape$1] = shape;
    this[strokeColor$3] = strokeColor;
    this[fillColor$2] = fillColor;
    this[width$10] = width;
    this[height$7] = height;
    this[fit$8] = fit;
    if (!(width == null || dart.notNull(width) > 0.0)) dart.assertFailed(null, I[74], 140, 16, "width == null || width > 0.0");
    if (!(height == null || dart.notNull(height) > 0.0)) dart.assertFailed(null, I[74], 141, 16, "height == null || height > 0.0");
    image$1.Shape.__proto__.new.call(this);
    ;
  }).prototype = image$1.Shape.prototype;
  dart.addTypeTests(image$1.Shape);
  dart.addTypeCaches(image$1.Shape);
  dart.setMethodSignature(image$1.Shape, () => ({
    __proto__: dart.getMethods(image$1.Shape.__proto__),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {})
  }));
  dart.setGetterSignature(image$1.Shape, () => ({
    __proto__: dart.getGetters(image$1.Shape.__proto__),
    [_boundingBox]: rect$.PdfRect
  }));
  dart.setSetterSignature(image$1.Shape, () => ({
    __proto__: dart.getSetters(image$1.Shape.__proto__),
    [_boundingBox]: rect$.PdfRect
  }));
  dart.setLibraryUri(image$1.Shape, I[73]);
  dart.setFieldSignature(image$1.Shape, () => ({
    __proto__: dart.getFields(image$1.Shape.__proto__),
    shape: dart.finalFieldType(core.String),
    strokeColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    fillColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    width: dart.finalFieldType(dart.nullable(core.double)),
    height: dart.finalFieldType(dart.nullable(core.double)),
    fit: dart.finalFieldType(basic.BoxFit),
    [__Shape__boundingBox]: dart.fieldType(dart.nullable(rect$.PdfRect))
  }));
  image$1._paintImage = function _paintImage(opts) {
    let canvas = opts && 'canvas' in opts ? opts.canvas : null;
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let image = opts && 'image' in opts ? opts.image : null;
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    let fit = opts && 'fit' in opts ? opts.fit : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
    let outputSize = rect.size;
    let inputSize = new point$.PdfPoint.new(image.width[$toDouble](), image.height[$toDouble]());
    fit == null ? fit = basic.BoxFit.scaleDown : null;
    let fittedSizes = geometry.applyBoxFit(fit, new point$.PdfPoint.new(inputSize.x / scale, inputSize.y / scale), outputSize);
    let sourceSize = new point$.PdfPoint.new(dart.nullCheck(fittedSizes.source).x * scale, dart.nullCheck(fittedSizes.source).y * scale);
    let destinationSize = dart.nullCheck(fittedSizes.destination);
    let halfWidthDelta = (outputSize.x - destinationSize.x) / 2.0;
    let halfHeightDelta = (outputSize.y - destinationSize.y) / 2.0;
    let dx = halfWidthDelta + alignment.x * halfWidthDelta;
    let dy = halfHeightDelta + alignment.y * halfHeightDelta;
    let destinationPosition = rect.topLeft.translate(dx, dy);
    let destinationRect = rect$.PdfRect.fromPoints(destinationPosition, destinationSize);
    let sourceRect = alignment.inscribe(sourceSize, rect$.PdfRect.fromPoints(point$.PdfPoint.zero, inputSize));
    image$1._drawImageRect(canvas, image, sourceRect, destinationRect);
  };
  image$1._drawImageRect = function _drawImageRect(canvas, image, sourceRect, destinationRect) {
    let t94;
    let fw = destinationRect.width / sourceRect.width;
    let fh = destinationRect.height / sourceRect.height;
    canvas.saveContext();
    t94 = canvas;
    (() => {
      t94.drawBox(destinationRect);
      t94.clipPath();
      t94.drawImage(image, destinationRect.x - sourceRect.x * fw, destinationRect.y - sourceRect.y * fh, image.width[$toDouble]() * fw, image.height[$toDouble]() * fh);
      t94.restoreContext();
      return t94;
    })();
  };
  text$1.TextAlign = class TextAlign extends core._Enum {
    toString() {
      return "TextAlign." + this[_name];
    }
  };
  (text$1.TextAlign.new = function(index, name) {
    text$1.TextAlign.__proto__.new.call(this, index, name);
    ;
  }).prototype = text$1.TextAlign.prototype;
  dart.addTypeTests(text$1.TextAlign);
  dart.addTypeCaches(text$1.TextAlign);
  dart.setLibraryUri(text$1.TextAlign, I[75]);
  dart.setStaticFieldSignature(text$1.TextAlign, () => ['values', 'left', 'right', 'center', 'justify']);
  dart.defineExtensionMethods(text$1.TextAlign, ['toString']);
  dart.defineLazy(text$1.TextAlign, {
    /*text$1.TextAlign.values*/get values() {
      return C[220] || CT.C220;
    },
    /*text$1.TextAlign.left*/get left() {
      return C[61] || CT.C61;
    },
    /*text$1.TextAlign.right*/get right() {
      return C[221] || CT.C221;
    },
    /*text$1.TextAlign.center*/get center() {
      return C[222] || CT.C222;
    },
    /*text$1.TextAlign.justify*/get justify() {
      return C[60] || CT.C60;
    }
  }, false);
  text$1.TextDirection = class TextDirection extends core._Enum {
    toString() {
      return "TextDirection." + this[_name];
    }
  };
  (text$1.TextDirection.new = function(index, name) {
    text$1.TextDirection.__proto__.new.call(this, index, name);
    ;
  }).prototype = text$1.TextDirection.prototype;
  dart.addTypeTests(text$1.TextDirection);
  dart.addTypeCaches(text$1.TextDirection);
  dart.setLibraryUri(text$1.TextDirection, I[75]);
  dart.setStaticFieldSignature(text$1.TextDirection, () => ['values', 'ltr', 'rtl']);
  dart.defineExtensionMethods(text$1.TextDirection, ['toString']);
  dart.defineLazy(text$1.TextDirection, {
    /*text$1.TextDirection.values*/get values() {
      return C[223] || CT.C223;
    },
    /*text$1.TextDirection.ltr*/get ltr() {
      return C[101] || CT.C101;
    },
    /*text$1.TextDirection.rtl*/get rtl() {
      return C[100] || CT.C100;
    }
  }, false);
  text$1.TextOverflow = class TextOverflow extends core._Enum {
    toString() {
      return "TextOverflow." + this[_name];
    }
  };
  (text$1.TextOverflow.new = function(index, name) {
    text$1.TextOverflow.__proto__.new.call(this, index, name);
    ;
  }).prototype = text$1.TextOverflow.prototype;
  dart.addTypeTests(text$1.TextOverflow);
  dart.addTypeCaches(text$1.TextOverflow);
  dart.setLibraryUri(text$1.TextOverflow, I[75]);
  dart.setStaticFieldSignature(text$1.TextOverflow, () => ['values', 'clip', 'visible', 'span']);
  dart.defineExtensionMethods(text$1.TextOverflow, ['toString']);
  dart.defineLazy(text$1.TextOverflow, {
    /*text$1.TextOverflow.values*/get values() {
      return C[224] || CT.C224;
    },
    /*text$1.TextOverflow.clip*/get clip() {
      return C[225] || CT.C225;
    },
    /*text$1.TextOverflow.visible*/get visible() {
      return C[226] || CT.C226;
    },
    /*text$1.TextOverflow.span*/get span() {
      return C[227] || CT.C227;
    }
  }, false);
  var offset = dart.privateName(text$1, "_Span.offset");
  text$1._Span = class _Span extends core.Object {
    get offset() {
      return this[offset];
    }
    set offset(value) {
      this[offset] = value;
    }
    toString() {
      return "Span \"offset:" + dart.str(this.offset);
    }
    debugPaint(context, textScaleFactor, globalBox) {
    }
  };
  (text$1._Span.new = function(style) {
    this[offset] = point$.PdfPoint.zero;
    this.style = style;
    ;
  }).prototype = text$1._Span.prototype;
  dart.addTypeTests(text$1._Span);
  dart.addTypeCaches(text$1._Span);
  dart.setMethodSignature(text$1._Span, () => ({
    __proto__: dart.getMethods(text$1._Span.__proto__),
    debugPaint: dart.fnType(dart.void, [widget$.Context, core.double, dart.nullable(rect$.PdfRect)])
  }));
  dart.setLibraryUri(text$1._Span, I[75]);
  dart.setFieldSignature(text$1._Span, () => ({
    __proto__: dart.getFields(text$1._Span.__proto__),
    style: dart.finalFieldType(text_style.TextStyle),
    offset: dart.fieldType(point$.PdfPoint)
  }));
  dart.defineExtensionMethods(text$1._Span, ['toString']);
  var _box = dart.privateName(text$1, "_box");
  var _getBox = dart.privateName(text$1, "_getBox");
  text$1._TextDecoration = class _TextDecoration extends core.Object {
    static ['_#new#tearOff'](style, annotation, startSpan, endSpan) {
      return new text$1._TextDecoration.new(style, annotation, startSpan, endSpan);
    }
    [_getBox](spans) {
      if (this[_box] != null) {
        return this[_box];
      }
      let x1 = spans[$_get](this.startSpan).offset.x + spans[$_get](this.startSpan).left;
      let x2 = spans[$_get](this.endSpan).offset.x + spans[$_get](this.endSpan).left + spans[$_get](this.endSpan).width;
      let y1 = spans[$_get](this.startSpan).offset.y + spans[$_get](this.startSpan).top;
      let y2 = y1 + spans[$_get](this.startSpan).height;
      for (let n = this.startSpan + 1; n <= this.endSpan; n = n + 1) {
        let ny1 = spans[$_get](n).offset.y + spans[$_get](n).top;
        let ny2 = ny1 + spans[$_get](n).height;
        y1 = math.min(core.double, y1, ny1);
        y2 = math.max(core.double, y2, ny2);
      }
      this[_box] = rect$.PdfRect.fromLTRB(x1, y1, x2, y2);
      return this[_box];
    }
    copyWith(opts) {
      let t100;
      let endSpan = opts && 'endSpan' in opts ? opts.endSpan : null;
      return new text$1._TextDecoration.new(this.style, this.annotation, this.startSpan, (t100 = endSpan, t100 == null ? this.endSpan : t100));
    }
    backgroundPaint(context, textScaleFactor, globalBox, spans) {
      let box = this[_getBox](spans);
      if (this.annotation != null) {
        let spanBox = new rect$.PdfRect.new(dart.nullCheck(globalBox).x + dart.nullCheck(box).left, globalBox.top + box.bottom, box.width, box.height);
        dart.nullCheck(this.annotation).build(context, spanBox);
      }
      if (this.style.background != null) {
        let boundingBox = new rect$.PdfRect.new(dart.nullCheck(globalBox).x + dart.nullCheck(box).left, globalBox.top + box.bottom, box.width, box.height);
        dart.nullCheck(this.style.background).paint(context, boundingBox);
        context.canvas.setFillColor(this.style.color);
      }
    }
    foregroundPaint(context, textScaleFactor, globalBox, spans) {
      let t101, t100;
      if (this.style.decoration == null) {
        return;
      }
      let box = this[_getBox](spans);
      let font = dart.nullCheck(this.style.font).getFont(context);
      let space = -0.15 * dart.nullCheck(this.style.fontSize) * textScaleFactor * dart.nullCheck(this.style.decorationThickness);
      t100 = context.canvas;
      (() => {
        t100.setStrokeColor((t101 = this.style.decorationColor, t101 == null ? this.style.color : t101));
        t100.setLineWidth(dart.nullCheck(this.style.decorationThickness) * dart.nullCheck(this.style.fontSize) * textScaleFactor * 0.05);
        return t100;
      })();
      if (dart.nullCheck(this.style.decoration).contains(text_style.TextDecoration.underline)) {
        let base = -font.descent * dart.nullCheck(this.style.fontSize) * textScaleFactor / 2;
        context.canvas.drawLine(dart.nullCheck(globalBox).x + dart.nullCheck(box).left, globalBox.top + box.bottom + base, globalBox.x + box.right, globalBox.top + box.bottom + base);
        if (this.style.decorationStyle === text_style.TextDecorationStyle.double) {
          context.canvas.drawLine(globalBox.x + box.left, globalBox.top + box.bottom + base + space, globalBox.x + box.right, globalBox.top + box.bottom + base + space);
        }
        context.canvas.strokePath();
      }
      if (dart.nullCheck(this.style.decoration).contains(text_style.TextDecoration.overline)) {
        let base = dart.nullCheck(this.style.fontSize) * textScaleFactor;
        context.canvas.drawLine(dart.nullCheck(globalBox).x + dart.nullCheck(box).left, globalBox.top + box.bottom + base, globalBox.x + box.right, globalBox.top + box.bottom + base);
        if (this.style.decorationStyle === text_style.TextDecorationStyle.double) {
          context.canvas.drawLine(globalBox.x + box.left, globalBox.top + box.bottom + base - space, globalBox.x + box.right, globalBox.top + box.bottom + base - space);
        }
        context.canvas.strokePath();
      }
      if (dart.nullCheck(this.style.decoration).contains(text_style.TextDecoration.lineThrough)) {
        let base = (1 - font.descent) * dart.nullCheck(this.style.fontSize) * textScaleFactor / 2;
        context.canvas.drawLine(dart.nullCheck(globalBox).x + dart.nullCheck(box).left, globalBox.top + box.bottom + base, globalBox.x + box.right, globalBox.top + box.bottom + base);
        if (this.style.decorationStyle === text_style.TextDecorationStyle.double) {
          context.canvas.drawLine(globalBox.x + box.left, globalBox.top + box.bottom + base + space, globalBox.x + box.right, globalBox.top + box.bottom + base + space);
        }
        context.canvas.strokePath();
      }
    }
    debugPaint(context, textScaleFactor, globalBox, spans) {
      let t100;
      let box = dart.nullCheck(this[_getBox](spans));
      t100 = context.canvas;
      (() => {
        t100.setLineWidth(0.5);
        t100.drawRect(globalBox.x + box.x, globalBox.top + box.y, box.width, box.height);
        t100.setStrokeColor(colors.PdfColors.yellow);
        t100.strokePath();
        return t100;
      })();
    }
  };
  (text$1._TextDecoration.new = function(style, annotation, startSpan, endSpan) {
    this[_box] = null;
    this.style = style;
    this.annotation = annotation;
    this.startSpan = startSpan;
    this.endSpan = endSpan;
    if (!(startSpan <= endSpan)) dart.assertFailed(null, I[76], 87, 16, "startSpan <= endSpan");
    ;
  }).prototype = text$1._TextDecoration.prototype;
  dart.addTypeTests(text$1._TextDecoration);
  dart.addTypeCaches(text$1._TextDecoration);
  dart.setMethodSignature(text$1._TextDecoration, () => ({
    __proto__: dart.getMethods(text$1._TextDecoration.__proto__),
    [_getBox]: dart.fnType(dart.nullable(rect$.PdfRect), [core.List$(text$1._Span)]),
    copyWith: dart.fnType(text$1._TextDecoration, [], {endSpan: dart.nullable(core.int)}, {}),
    backgroundPaint: dart.fnType(dart.void, [widget$.Context, core.double, dart.nullable(rect$.PdfRect), core.List$(text$1._Span)]),
    foregroundPaint: dart.fnType(dart.void, [widget$.Context, core.double, dart.nullable(rect$.PdfRect), core.List$(text$1._Span)]),
    debugPaint: dart.fnType(dart.void, [widget$.Context, core.double, rect$.PdfRect, core.List$(text$1._Span)])
  }));
  dart.setLibraryUri(text$1._TextDecoration, I[75]);
  dart.setFieldSignature(text$1._TextDecoration, () => ({
    __proto__: dart.getFields(text$1._TextDecoration.__proto__),
    style: dart.finalFieldType(text_style.TextStyle),
    annotation: dart.finalFieldType(dart.nullable(annotations.AnnotationBuilder)),
    startSpan: dart.finalFieldType(core.int),
    endSpan: dart.finalFieldType(core.int),
    [_box]: dart.fieldType(dart.nullable(rect$.PdfRect))
  }));
  dart.setStaticFieldSignature(text$1._TextDecoration, () => ['_space']);
  dart.defineLazy(text$1._TextDecoration, {
    /*text$1._TextDecoration._space*/get _space() {
      return -0.15;
    }
  }, false);
  text$1._Word = class _Word extends text$1._Span {
    static ['_#new#tearOff'](text, style, metrics) {
      return new text$1._Word.new(text, style, metrics);
    }
    get left() {
      return this.metrics.left;
    }
    get top() {
      return this.metrics.descent;
    }
    get width() {
      return this.metrics.width;
    }
    get height() {
      return this.metrics.maxHeight;
    }
    toString() {
      return "Word \"" + this.text + "\" offset:" + dart.str(this.offset) + " metrics:" + dart.str(this.metrics) + " style:" + dart.str(this.style);
    }
    paint(context, style, textScaleFactor, point) {
      let t100, t100$;
      context.canvas.drawString(dart.nullCheck(style.font).getFont(context), dart.nullCheck(style.fontSize) * textScaleFactor, this.text, point.x + this.offset.x, point.y + this.offset.y, {mode: (t100 = style.renderingMode, t100 == null ? graphics.PdfTextRenderingMode.fill : t100), charSpace: (t100$ = style.letterSpacing, t100$ == null ? 0.0 : t100$)});
    }
    debugPaint(context, textScaleFactor, globalBox) {
      let t100;
      t100 = context.canvas;
      (() => {
        t100.setLineWidth(0.5);
        t100.drawRect(dart.nullCheck(globalBox).x + this.offset.x + this.metrics.left, globalBox.top + this.offset.y + this.metrics.top, this.metrics.width, this.metrics.height);
        t100.setStrokeColor(colors.PdfColors.orange);
        t100.strokePath();
        t100.drawLine(globalBox.x + this.offset.x - 5, globalBox.top + this.offset.y, globalBox.x + this.offset.x + this.metrics.right + 5, globalBox.top + this.offset.y);
        t100.setStrokeColor(colors.PdfColors.deepPurple);
        t100.strokePath();
        return t100;
      })();
    }
  };
  (text$1._Word.new = function(text, style, metrics) {
    this.text = text;
    this.metrics = metrics;
    text$1._Word.__proto__.new.call(this, style);
    ;
  }).prototype = text$1._Word.prototype;
  dart.addTypeTests(text$1._Word);
  dart.addTypeCaches(text$1._Word);
  dart.setMethodSignature(text$1._Word, () => ({
    __proto__: dart.getMethods(text$1._Word.__proto__),
    paint: dart.fnType(dart.void, [widget$.Context, text_style.TextStyle, core.double, point$.PdfPoint])
  }));
  dart.setGetterSignature(text$1._Word, () => ({
    __proto__: dart.getGetters(text$1._Word.__proto__),
    left: core.double,
    top: core.double,
    width: core.double,
    height: core.double
  }));
  dart.setLibraryUri(text$1._Word, I[75]);
  dart.setFieldSignature(text$1._Word, () => ({
    __proto__: dart.getFields(text$1._Word.__proto__),
    text: dart.finalFieldType(core.String),
    metrics: dart.finalFieldType(font_metrics.PdfFontMetrics)
  }));
  dart.defineExtensionMethods(text$1._Word, ['toString']);
  text$1._WidgetSpan = class _WidgetSpan extends text$1._Span {
    static ['_#new#tearOff'](widget, style, baseline) {
      return new text$1._WidgetSpan.new(widget, style, baseline);
    }
    get left() {
      return 0.0;
    }
    get top() {
      return 0.0;
    }
    get width() {
      return dart.nullCheck(this.widget.box).width;
    }
    get height() {
      return dart.nullCheck(this.widget.box).height;
    }
    get offset() {
      return dart.nullCheck(this.widget.box).offset;
    }
    set offset(value) {
      this.widget.box = rect$.PdfRect.fromPoints(value, dart.nullCheck(this.widget.box).size);
    }
    toString() {
      return "Widget \"" + dart.str(this.widget) + "\" offset:" + dart.str(this.offset);
    }
    paint(context, style, textScaleFactor, point) {
      this.widget.box = rect$.PdfRect.fromPoints(new point$.PdfPoint.new(point.x + dart.nullCheck(this.widget.box).offset.x, point.y + dart.nullCheck(this.widget.box).offset.y), dart.nullCheck(this.widget.box).size);
      this.widget.paint(context);
    }
    debugPaint(context, textScaleFactor, globalBox) {
      let t100;
      t100 = context.canvas;
      (() => {
        t100.setLineWidth(0.5);
        t100.drawRect(dart.nullCheck(globalBox).x + this.offset.x, globalBox.top + this.offset.y, this.width, this.height);
        t100.setStrokeColor(colors.PdfColors.orange);
        t100.strokePath();
        t100.drawLine(globalBox.x + this.offset.x - 5, globalBox.top + this.offset.y - this.baseline, globalBox.x + this.offset.x + this.width + 5, globalBox.top + this.offset.y - this.baseline);
        t100.setStrokeColor(colors.PdfColors.deepPurple);
        t100.strokePath();
        return t100;
      })();
    }
  };
  (text$1._WidgetSpan.new = function(widget, style, baseline) {
    this.widget = widget;
    this.baseline = baseline;
    text$1._WidgetSpan.__proto__.new.call(this, style);
    ;
  }).prototype = text$1._WidgetSpan.prototype;
  dart.addTypeTests(text$1._WidgetSpan);
  dart.addTypeCaches(text$1._WidgetSpan);
  dart.setMethodSignature(text$1._WidgetSpan, () => ({
    __proto__: dart.getMethods(text$1._WidgetSpan.__proto__),
    paint: dart.fnType(dart.void, [widget$.Context, dart.nullable(text_style.TextStyle), core.double, point$.PdfPoint])
  }));
  dart.setGetterSignature(text$1._WidgetSpan, () => ({
    __proto__: dart.getGetters(text$1._WidgetSpan.__proto__),
    left: core.double,
    top: core.double,
    width: core.double,
    height: core.double,
    offset: point$.PdfPoint
  }));
  dart.setSetterSignature(text$1._WidgetSpan, () => ({
    __proto__: dart.getSetters(text$1._WidgetSpan.__proto__),
    offset: point$.PdfPoint
  }));
  dart.setLibraryUri(text$1._WidgetSpan, I[75]);
  dart.setFieldSignature(text$1._WidgetSpan, () => ({
    __proto__: dart.getFields(text$1._WidgetSpan.__proto__),
    widget: dart.finalFieldType(widget$.Widget),
    baseline: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(text$1._WidgetSpan, ['toString']);
  var style$3 = dart.privateName(text$1, "InlineSpan.style");
  var baseline$ = dart.privateName(text$1, "InlineSpan.baseline");
  var annotation$ = dart.privateName(text$1, "InlineSpan.annotation");
  text$1.InlineSpan = class InlineSpan extends core.Object {
    get style() {
      return this[style$3];
    }
    set style(value) {
      super.style = value;
    }
    get baseline() {
      return this[baseline$];
    }
    set baseline(value) {
      super.baseline = value;
    }
    get annotation() {
      return this[annotation$];
    }
    set annotation(value) {
      super.annotation = value;
    }
    toPlainText() {
      let buffer = new core.StringBuffer.new();
      this.visitChildren(dart.fn((span, style, annotation) => {
        if (text$1.TextSpan.is(span)) {
          buffer.write(span.text);
        }
        return true;
      }, T$.InlineSpanAndTextStyleNAndAnnotationBuilderNTobool()), null, null);
      return buffer.toString();
    }
  };
  (text$1.InlineSpan.new = function(opts) {
    let style = opts && 'style' in opts ? opts.style : null;
    let baseline = opts && 'baseline' in opts ? opts.baseline : null;
    let annotation = opts && 'annotation' in opts ? opts.annotation : null;
    this[style$3] = style;
    this[baseline$] = baseline;
    this[annotation$] = annotation;
    ;
  }).prototype = text$1.InlineSpan.prototype;
  dart.addTypeTests(text$1.InlineSpan);
  dart.addTypeCaches(text$1.InlineSpan);
  dart.setMethodSignature(text$1.InlineSpan, () => ({
    __proto__: dart.getMethods(text$1.InlineSpan.__proto__),
    toPlainText: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(text$1.InlineSpan, I[75]);
  dart.setFieldSignature(text$1.InlineSpan, () => ({
    __proto__: dart.getFields(text$1.InlineSpan.__proto__),
    style: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    baseline: dart.finalFieldType(core.double),
    annotation: dart.finalFieldType(dart.nullable(annotations.AnnotationBuilder))
  }));
  var child$9 = dart.privateName(text$1, "WidgetSpan.child");
  text$1.WidgetSpan = class WidgetSpan extends text$1.InlineSpan {
    get child() {
      return this[child$9];
    }
    set child(value) {
      super.child = value;
    }
    static ['_#new#tearOff'](opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let baseline = opts && 'baseline' in opts ? opts.baseline : 0;
      let style = opts && 'style' in opts ? opts.style : null;
      let annotation = opts && 'annotation' in opts ? opts.annotation : null;
      return new text$1.WidgetSpan.new({child: child, baseline: baseline, style: style, annotation: annotation});
    }
    copyWith(opts) {
      let t100, t100$, t100$0;
      let style = opts && 'style' in opts ? opts.style : null;
      let baseline = opts && 'baseline' in opts ? opts.baseline : null;
      let annotation = opts && 'annotation' in opts ? opts.annotation : null;
      return new text$1.WidgetSpan.new({child: this.child, style: (t100 = style, t100 == null ? this.style : t100), baseline: (t100$ = baseline, t100$ == null ? this.baseline : t100$), annotation: (t100$0 = annotation, t100$0 == null ? this.annotation : t100$0)});
    }
    visitChildren(visitor, parentStyle, annotation) {
      let t100, t100$;
      let _style = (t100 = parentStyle, t100 == null ? null : t100.merge(this.style));
      let _a = (t100$ = this.annotation, t100$ == null ? annotation : t100$);
      return visitor(this, _style, _a);
    }
  };
  (text$1.WidgetSpan.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let baseline = opts && 'baseline' in opts ? opts.baseline : 0;
    let style = opts && 'style' in opts ? opts.style : null;
    let annotation = opts && 'annotation' in opts ? opts.annotation : null;
    this[child$9] = child;
    text$1.WidgetSpan.__proto__.new.call(this, {style: style, baseline: baseline, annotation: annotation});
    ;
  }).prototype = text$1.WidgetSpan.prototype;
  dart.addTypeTests(text$1.WidgetSpan);
  dart.addTypeCaches(text$1.WidgetSpan);
  dart.setMethodSignature(text$1.WidgetSpan, () => ({
    __proto__: dart.getMethods(text$1.WidgetSpan.__proto__),
    copyWith: dart.fnType(text$1.InlineSpan, [], {annotation: dart.nullable(annotations.AnnotationBuilder), baseline: dart.nullable(core.double), style: dart.nullable(text_style.TextStyle)}, {}),
    visitChildren: dart.fnType(core.bool, [dart.fnType(core.bool, [text$1.InlineSpan, dart.nullable(text_style.TextStyle), dart.nullable(annotations.AnnotationBuilder)]), dart.nullable(text_style.TextStyle), dart.nullable(annotations.AnnotationBuilder)])
  }));
  dart.setLibraryUri(text$1.WidgetSpan, I[75]);
  dart.setFieldSignature(text$1.WidgetSpan, () => ({
    __proto__: dart.getFields(text$1.WidgetSpan.__proto__),
    child: dart.finalFieldType(widget$.Widget)
  }));
  var text$6 = dart.privateName(text$1, "TextSpan.text");
  var children$7 = dart.privateName(text$1, "TextSpan.children");
  text$1.TextSpan = class TextSpan extends text$1.InlineSpan {
    get text() {
      return this[text$6];
    }
    set text(value) {
      super.text = value;
    }
    get children() {
      return this[children$7];
    }
    set children(value) {
      super.children = value;
    }
    static ['_#new#tearOff'](opts) {
      let style = opts && 'style' in opts ? opts.style : null;
      let text = opts && 'text' in opts ? opts.text : null;
      let baseline = opts && 'baseline' in opts ? opts.baseline : 0;
      let children = opts && 'children' in opts ? opts.children : null;
      let annotation = opts && 'annotation' in opts ? opts.annotation : null;
      return new text$1.TextSpan.new({style: style, text: text, baseline: baseline, children: children, annotation: annotation});
    }
    copyWith(opts) {
      let t100, t100$, t100$0;
      let style = opts && 'style' in opts ? opts.style : null;
      let baseline = opts && 'baseline' in opts ? opts.baseline : null;
      let annotation = opts && 'annotation' in opts ? opts.annotation : null;
      return new text$1.TextSpan.new({style: (t100 = style, t100 == null ? this.style : t100), text: this.text, baseline: (t100$ = baseline, t100$ == null ? this.baseline : t100$), children: this.children, annotation: (t100$0 = annotation, t100$0 == null ? this.annotation : t100$0)});
    }
    visitChildren(visitor, parentStyle, annotation) {
      let t100, t100$;
      let _style = (t100 = parentStyle, t100 == null ? null : t100.merge(this.style));
      let _annotation = (t100$ = this.annotation, t100$ == null ? annotation : t100$);
      if (this.text != null) {
        if (!visitor(this, _style, _annotation)) {
          return false;
        }
      }
      if (this.children != null) {
        for (let child of dart.nullCheck(this.children)) {
          if (!child.visitChildren(visitor, _style, _annotation)) {
            return false;
          }
        }
      }
      return true;
    }
  };
  (text$1.TextSpan.new = function(opts) {
    let style = opts && 'style' in opts ? opts.style : null;
    let text = opts && 'text' in opts ? opts.text : null;
    let baseline = opts && 'baseline' in opts ? opts.baseline : 0;
    let children = opts && 'children' in opts ? opts.children : null;
    let annotation = opts && 'annotation' in opts ? opts.annotation : null;
    this[text$6] = text;
    this[children$7] = children;
    text$1.TextSpan.__proto__.new.call(this, {style: style, baseline: baseline, annotation: annotation});
    ;
  }).prototype = text$1.TextSpan.prototype;
  dart.addTypeTests(text$1.TextSpan);
  dart.addTypeCaches(text$1.TextSpan);
  dart.setMethodSignature(text$1.TextSpan, () => ({
    __proto__: dart.getMethods(text$1.TextSpan.__proto__),
    copyWith: dart.fnType(text$1.InlineSpan, [], {annotation: dart.nullable(annotations.AnnotationBuilder), baseline: dart.nullable(core.double), style: dart.nullable(text_style.TextStyle)}, {}),
    visitChildren: dart.fnType(core.bool, [dart.fnType(core.bool, [text$1.InlineSpan, dart.nullable(text_style.TextStyle), dart.nullable(annotations.AnnotationBuilder)]), dart.nullable(text_style.TextStyle), dart.nullable(annotations.AnnotationBuilder)])
  }));
  dart.setLibraryUri(text$1.TextSpan, I[75]);
  dart.setFieldSignature(text$1.TextSpan, () => ({
    __proto__: dart.getFields(text$1.TextSpan.__proto__),
    text: dart.finalFieldType(dart.nullable(core.String)),
    children: dart.finalFieldType(dart.nullable(core.List$(text$1.InlineSpan)))
  }));
  var parent$ = dart.privateName(text$1, "_Line.parent");
  var firstSpan$ = dart.privateName(text$1, "_Line.firstSpan");
  var countSpan$ = dart.privateName(text$1, "_Line.countSpan");
  var baseline$0 = dart.privateName(text$1, "_Line.baseline");
  var wordsWidth$ = dart.privateName(text$1, "_Line.wordsWidth");
  var textDirection$2 = dart.privateName(text$1, "_Line.textDirection");
  var justify$ = dart.privateName(text$1, "_Line.justify");
  var _textAlign = dart.privateName(text$1, "_textAlign");
  var _spans = dart.privateName(text$1, "_spans");
  text$1._Line = class _Line extends core.Object {
    get parent() {
      return this[parent$];
    }
    set parent(value) {
      super.parent = value;
    }
    get firstSpan() {
      return this[firstSpan$];
    }
    set firstSpan(value) {
      super.firstSpan = value;
    }
    get countSpan() {
      return this[countSpan$];
    }
    set countSpan(value) {
      super.countSpan = value;
    }
    get baseline() {
      return this[baseline$0];
    }
    set baseline(value) {
      super.baseline = value;
    }
    get wordsWidth() {
      return this[wordsWidth$];
    }
    set wordsWidth(value) {
      super.wordsWidth = value;
    }
    get textDirection() {
      return this[textDirection$2];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get justify() {
      return this[justify$];
    }
    set justify(value) {
      super.justify = value;
    }
    static ['_#new#tearOff'](parent, firstSpan, countSpan, baseline, wordsWidth, textDirection, justify) {
      return new text$1._Line.new(parent, firstSpan, countSpan, baseline, wordsWidth, textDirection, justify);
    }
    get lastSpan() {
      return this.firstSpan + this.countSpan;
    }
    get textAlign() {
      return this.parent[_textAlign];
    }
    get height() {
      let list = this.parent[_spans][$sublist](this.firstSpan, this.lastSpan);
      return list[$isEmpty] ? 0.0 : list[$reduce](dart.fn((a, b) => a.height > b.height ? a : b, T$._SpanAnd_SpanTo_Span())).height;
    }
    toString() {
      return dart.str(this[$runtimeType]) + " " + dart.str(this.firstSpan) + "-" + dart.str(this.lastSpan) + " baseline: " + dart.str(this.baseline) + " width:" + dart.str(this.wordsWidth);
    }
    realign(totalWidth) {
      let spans = this.parent[_spans][$sublist](this.firstSpan, this.lastSpan);
      let isRTL = this.textDirection === text$1.TextDirection.rtl;
      let delta = 0.0;
      switch (this.textAlign) {
        case C[61] || CT.C61:
          {
            delta = isRTL ? totalWidth - this.wordsWidth : 0.0;
            break;
          }
        case C[221] || CT.C221:
          {
            delta = isRTL ? 0.0 : totalWidth - this.wordsWidth;
            break;
          }
        case C[222] || CT.C222:
          {
            delta = (totalWidth - this.wordsWidth) / 2.0;
            break;
          }
        case C[60] || CT.C60:
          {
            if (!this.justify) {
              break;
            }
            delta = (totalWidth - this.wordsWidth) / (spans[$length] - 1);
            let x = 0.0;
            for (let span of spans) {
              if (isRTL) {
                let xOffset = span.offset.x + span.width;
                span.offset = new point$.PdfPoint.new(totalWidth - xOffset - x, span.offset.y - this.baseline);
              } else {
                span.offset = span.offset.translate(x, -this.baseline);
              }
              x = x + delta;
            }
            return;
          }
      }
      if (isRTL) {
        for (let span of spans) {
          span.offset = new point$.PdfPoint.new(totalWidth - (span.offset.x + span.width) - delta, span.offset.y - this.baseline);
        }
        return;
      }
      for (let span of spans) {
        span.offset = span.offset.translate(delta, -this.baseline);
      }
      return;
    }
  };
  (text$1._Line.new = function(parent, firstSpan, countSpan, baseline, wordsWidth, textDirection, justify) {
    this[parent$] = parent;
    this[firstSpan$] = firstSpan;
    this[countSpan$] = countSpan;
    this[baseline$0] = baseline;
    this[wordsWidth$] = wordsWidth;
    this[textDirection$2] = textDirection;
    this[justify$] = justify;
    ;
  }).prototype = text$1._Line.prototype;
  dart.addTypeTests(text$1._Line);
  dart.addTypeCaches(text$1._Line);
  dart.setMethodSignature(text$1._Line, () => ({
    __proto__: dart.getMethods(text$1._Line.__proto__),
    realign: dart.fnType(dart.void, [core.double])
  }));
  dart.setGetterSignature(text$1._Line, () => ({
    __proto__: dart.getGetters(text$1._Line.__proto__),
    lastSpan: core.int,
    textAlign: text$1.TextAlign,
    height: core.double
  }));
  dart.setLibraryUri(text$1._Line, I[75]);
  dart.setFieldSignature(text$1._Line, () => ({
    __proto__: dart.getFields(text$1._Line.__proto__),
    parent: dart.finalFieldType(text$1.RichText),
    firstSpan: dart.finalFieldType(core.int),
    countSpan: dart.finalFieldType(core.int),
    baseline: dart.finalFieldType(core.double),
    wordsWidth: dart.finalFieldType(core.double),
    textDirection: dart.finalFieldType(text$1.TextDirection),
    justify: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(text$1._Line, ['toString']);
  text$1._RichTextContext = class _RichTextContext extends multi_page.WidgetContext {
    apply(other) {
      text$1._RichTextContext.as(other);
      this.startOffset = other.startOffset;
      this.endOffset = other.endOffset;
      this.spanStart = other.spanStart;
      this.spanEnd = other.spanEnd;
    }
    clone() {
      let t100;
      t100 = new text$1._RichTextContext.new();
      return (() => {
        t100.apply(this);
        return t100;
      })();
    }
    toString() {
      return dart.str(this[$runtimeType]) + " Offset: " + dart.str(this.startOffset) + " -> " + dart.str(this.endOffset) + "  Span: " + dart.str(this.spanStart) + " -> " + dart.str(this.spanEnd);
    }
    static ['_#new#tearOff']() {
      return new text$1._RichTextContext.new();
    }
  };
  (text$1._RichTextContext.new = function() {
    this.startOffset = 0.0;
    this.endOffset = 0.0;
    this.spanStart = 0;
    this.spanEnd = 0;
    ;
  }).prototype = text$1._RichTextContext.prototype;
  dart.addTypeTests(text$1._RichTextContext);
  dart.addTypeCaches(text$1._RichTextContext);
  dart.setMethodSignature(text$1._RichTextContext, () => ({
    __proto__: dart.getMethods(text$1._RichTextContext.__proto__),
    apply: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    clone: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setLibraryUri(text$1._RichTextContext, I[75]);
  dart.setFieldSignature(text$1._RichTextContext, () => ({
    __proto__: dart.getFields(text$1._RichTextContext.__proto__),
    startOffset: dart.fieldType(core.double),
    endOffset: dart.fieldType(core.double),
    spanStart: dart.fieldType(core.int),
    spanEnd: dart.fieldType(core.int)
  }));
  dart.defineExtensionMethods(text$1._RichTextContext, ['toString']);
  var text$7 = dart.privateName(text$1, "RichText.text");
  var textAlign$4 = dart.privateName(text$1, "RichText.textAlign");
  var textDirection$3 = dart.privateName(text$1, "RichText.textDirection");
  var textScaleFactor$0 = dart.privateName(text$1, "RichText.textScaleFactor");
  var softWrap$2 = dart.privateName(text$1, "RichText.softWrap");
  var tightBounds$ = dart.privateName(text$1, "RichText.tightBounds");
  var maxLines$2 = dart.privateName(text$1, "RichText.maxLines");
  var overflow$2 = dart.privateName(text$1, "RichText.overflow");
  var __RichText__textAlign = dart.privateName(text$1, "_#RichText#_textAlign");
  var _decorations = dart.privateName(text$1, "_decorations");
  var _context$4 = dart.privateName(text$1, "_context");
  var _mustClip = dart.privateName(text$1, "_mustClip");
  var _preprocessed = dart.privateName(text$1, "_preprocessed");
  var _appendDecoration = dart.privateName(text$1, "_appendDecoration");
  var _addEmoji = dart.privateName(text$1, "_addEmoji");
  var _addText = dart.privateName(text$1, "_addText");
  var _addPlaceholder = dart.privateName(text$1, "_addPlaceholder");
  var _preProcessSpans = dart.privateName(text$1, "_preProcessSpans");
  var _splitWord = dart.privateName(text$1, "_splitWord");
  const Widget_SpanningWidget$36$3 = class Widget_SpanningWidget extends widget$.Widget {};
  (Widget_SpanningWidget$36$3.new = function() {
    Widget_SpanningWidget$36$3.__proto__.new.call(this);
  }).prototype = Widget_SpanningWidget$36$3.prototype;
  dart.applyMixin(Widget_SpanningWidget$36$3, multi_page.SpanningWidget);
  text$1.RichText = class RichText extends Widget_SpanningWidget$36$3 {
    get text() {
      return this[text$7];
    }
    set text(value) {
      super.text = value;
    }
    get textAlign() {
      return this[textAlign$4];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    get textDirection() {
      return this[textDirection$3];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get textScaleFactor() {
      return this[textScaleFactor$0];
    }
    set textScaleFactor(value) {
      super.textScaleFactor = value;
    }
    get softWrap() {
      return this[softWrap$2];
    }
    set softWrap(value) {
      super.softWrap = value;
    }
    get tightBounds() {
      return this[tightBounds$];
    }
    set tightBounds(value) {
      super.tightBounds = value;
    }
    get maxLines() {
      return this[maxLines$2];
    }
    set maxLines(value) {
      super.maxLines = value;
    }
    get overflow() {
      return this[overflow$2];
    }
    set overflow(value) {
      super.overflow = value;
    }
    static ['_#new#tearOff'](opts) {
      let text = opts && 'text' in opts ? opts.text : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
      let tightBounds = opts && 'tightBounds' in opts ? opts.tightBounds : false;
      let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
      let overflow = opts && 'overflow' in opts ? opts.overflow : C[226] || CT.C226;
      return new text$1.RichText.new({text: text, textAlign: textAlign, textDirection: textDirection, softWrap: softWrap, tightBounds: tightBounds, textScaleFactor: textScaleFactor, maxLines: maxLines, overflow: overflow});
    }
    get [_textAlign]() {
      let t100;
      t100 = this[__RichText__textAlign];
      return t100 == null ? dart.throw(new _internal.LateError.fieldNI("_textAlign")) : t100;
    }
    set [_textAlign](library$32package$58pdf$47src$47widgets$47text$46dart$58$58_textAlign$35param) {
      this[__RichText__textAlign] = library$32package$58pdf$47src$47widgets$47text$46dart$58$58_textAlign$35param;
    }
    [_appendDecoration](append, td) {
      if (append && this[_decorations][$isNotEmpty]) {
        let last = this[_decorations][$last];
        if (last.style[$_equals](td.style) && dart.equals(last.annotation, td.annotation)) {
          this[_decorations][$_set](this[_decorations][$length] - 1, last.copyWith({endSpan: td.endSpan}));
          return;
        }
      }
      this[_decorations][$add](td);
    }
    [_addEmoji](opts) {
      let bitmap = opts && 'bitmap' in opts ? opts.bitmap : null;
      let baseline = opts && 'baseline' in opts ? opts.baseline : 0;
      let style = opts && 'style' in opts ? opts.style : null;
      let annotation = opts && 'annotation' in opts ? opts.annotation : null;
      let metrics = bitmap.metrics['*'](dart.nullCheck(style.fontSize));
      return new text$1.WidgetSpan.new({child: new basic.SizedBox.new({height: style.fontSize, child: new image$1.Image.new(image_provider.MemoryImage.new(bitmap.data))}), style: style, baseline: baseline + metrics.ascent + metrics.descent - metrics.height, annotation: annotation});
    }
    [_addText](opts) {
      let text = opts && 'text' in opts ? opts.text : null;
      let start = opts && 'start' in opts ? opts.start : 0;
      let end = opts && 'end' in opts ? opts.end : null;
      let baseline = opts && 'baseline' in opts ? opts.baseline : 0;
      let style = opts && 'style' in opts ? opts.style : null;
      let annotation = opts && 'annotation' in opts ? opts.annotation : null;
      return new text$1.TextSpan.new({text: core.String.fromCharCodes(text, start, end), style: style, baseline: baseline, annotation: annotation});
    }
    [_addPlaceholder](opts) {
      let baseline = opts && 'baseline' in opts ? opts.baseline : 0;
      let style = opts && 'style' in opts ? opts.style : null;
      let annotation = opts && 'annotation' in opts ? opts.annotation : null;
      return new text$1.WidgetSpan.new({child: new basic.SizedBox.new({height: style.fontSize, width: dart.nullCheck(style.fontSize) / 2, child: new placeholders.Placeholder.new({color: dart.nullCheck(style.color), strokeWidth: 1.0})}), style: style, baseline: baseline, annotation: annotation});
    }
    [_preProcessSpans](context) {
      let theme = theme$.Theme.of(context);
      let defaultStyle = theme.defaultTextStyle;
      let spans = T$.JSArrayOfInlineSpan().of([]);
      this.text.visitChildren(dart.fn((span, style, annotation) => {
        if (!text$1.TextSpan.is(span)) {
          spans[$add](span.copyWith({style: style, annotation: annotation}));
          return true;
        }
        if (span.text == null) {
          return true;
        }
        let font = dart.nullCheck(dart.nullCheck(style).font).getFont(context);
        let text = dart.nullCheck(span.text)[$runes][$toList]();
        for (let index = 0; index < text[$length]; index = index + 1) {
          let rune = text[$_get](index);
          let spaces = C[228] || CT.C228;
          if (spaces.contains(rune)) {
            continue;
          }
          if (!font.isRuneSupported(rune)) {
            if (index > 0) {
              spans[$add](this[_addText]({text: text, end: index, style: style, baseline: span.baseline, annotation: annotation}));
            }
            let found = false;
            for (let fb of style.fontFallback) {
              let font = fb.getFont(context);
              if (font.isRuneSupported(rune)) {
                if (ttffont.PdfTtfFont.is(font)) {
                  let bitmap = font.font.getBitmap(rune);
                  if (bitmap != null) {
                    spans[$add](this[_addEmoji]({bitmap: bitmap, style: style, baseline: span.baseline, annotation: annotation}));
                    found = true;
                    break;
                  }
                }
                spans[$add](this[_addText]({text: T$.JSArrayOfint().of([rune]), style: style.copyWith({font: fb, fontNormal: fb, fontBold: fb, fontBoldItalic: fb, fontItalic: fb}), baseline: span.baseline, annotation: annotation}));
                found = true;
                break;
              }
            }
            if (!found) {
              spans[$add](this[_addPlaceholder]({style: style, baseline: span.baseline, annotation: annotation}));
              if (!dart.fn(() => {
                core.print("Unable to find a font to draw \"" + core.String.fromCharCode(rune) + "\" (U+" + rune[$toRadixString](16) + ") try to provide a TextStyle.fontFallback");
                return true;
              }, T$.VoidTobool())()) dart.assertFailed(null, I[76], 843, 20, "() {\n              print(\n                  'Unable to find a font to draw \"${String.fromCharCode(rune)}\" (U+${rune.toRadixString(16)}) try to provide a TextStyle.fontFallback');\n              return true;\n            }()");
            }
            text = text[$sublist](index + 1);
            index = -1;
          }
        }
        spans[$add](this[_addText]({text: text, style: style, baseline: span.baseline, annotation: annotation}));
        return true;
      }, T$.InlineSpanAndTextStyleNAndAnnotationBuilderNTobool()), defaultStyle, null);
      return spans;
    }
    layout(context, constraints, opts) {
      let t100, t100$, t100$0, t100$1, t100$2, t100$3, t100$4, t100$5, t100$6;
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this[_spans][$clear]();
      this[_decorations][$clear]();
      let theme = theme$.Theme.of(context);
      let _softWrap = (t100 = this.softWrap, t100 == null ? theme.softWrap : t100);
      let _maxLines = (t100$ = this.maxLines, t100$ == null ? theme.maxLines : t100$);
      let _textDirection = (t100$0 = this.textDirection, t100$0 == null ? text_style.Directionality.of(context) : t100$0);
      this[_textAlign] = (t100$2 = (t100$1 = this.textAlign, t100$1 == null ? theme.textAlign : t100$1), t100$2 == null ? _textDirection === text$1.TextDirection.rtl ? text$1.TextAlign.right : text$1.TextAlign.left : t100$2);
      let _overflow = (t100$3 = this.overflow, t100$3 == null ? theme.overflow : t100$3);
      let constraintWidth = constraints.hasBoundedWidth ? constraints.maxWidth : constraints.constrainWidth();
      let constraintHeight = constraints.hasBoundedHeight ? constraints.maxHeight : constraints.constrainHeight();
      let offsetX = 0.0;
      let offsetY = this[_context$4].startOffset;
      let top = 0.0;
      let bottom = 0.0;
      let lines = T$.JSArrayOf_Line().of([]);
      let spanCount = 0;
      let spanStart = 0;
      let overflow = false;
      this[_preprocessed] == null ? this[_preprocessed] = this[_preProcessSpans](context) : null;
      const _buildLines = () => {
        for (let span of dart.nullCheck(this[_preprocessed])) {
          let style = span.style;
          let annotation = span.annotation;
          if (text$1.TextSpan.is(span)) {
            if (span.text == null) {
              continue;
            }
            let font = dart.nullCheck(dart.nullCheck(style).font).getFont(context);
            let space = font.stringMetrics(" ")['*'](dart.nullCheck(style.fontSize) * this.textScaleFactor);
            let spanLines = dart.nullCheck(_textDirection === text$1.TextDirection.rtl ? arabic.convert(dart.nullCheck(span.text)) : span.text)[$split]("\n");
            for (let line = 0; line < spanLines[$length]; line = line + 1) {
              let words = spanLines[$_get](line)[$split](core.RegExp.new("\\s"));
              for (let index = 0; index < words[$length]; index = index + 1) {
                let word = words[$_get](index);
                if (word[$isEmpty]) {
                  offsetX = offsetX + (space.advanceWidth * dart.nullCheck(style.wordSpacing) + dart.nullCheck(style.letterSpacing));
                  continue;
                }
                let metrics = font.stringMetrics(word, {letterSpacing: dart.nullCheck(style.letterSpacing) / (dart.nullCheck(style.fontSize) * this.textScaleFactor)})['*'](dart.nullCheck(style.fontSize) * this.textScaleFactor);
                if (_softWrap && offsetX + metrics.width > constraintWidth + 0.00001) {
                  if (spanCount > 0 && metrics.width <= constraintWidth) {
                    overflow = true;
                    lines[$add](new text$1._Line.new(this, spanStart, spanCount, bottom, offsetX - space.advanceWidth * dart.nullCheck(style.wordSpacing) - dart.nullCheck(style.letterSpacing), _textDirection, true));
                    spanStart = spanStart + spanCount;
                    spanCount = 0;
                    offsetX = 0.0;
                    offsetY = offsetY + (bottom - top);
                    top = 0.0;
                    bottom = 0.0;
                    if (_maxLines != null && lines[$length] >= dart.notNull(_maxLines)) {
                      return;
                    }
                    if (offsetY > constraintHeight) {
                      return;
                    }
                    offsetY = offsetY + dart.nullCheck(style.lineSpacing) * this.textScaleFactor;
                  } else {
                    let pos = this[_splitWord](word, font, style, constraintWidth);
                    if (pos < word.length) {
                      words[$_set](index, word[$substring](0, pos));
                      words[$insert](index + 1, word[$substring](pos));
                      index = index - 1;
                      continue;
                    }
                  }
                }
                let baseline = span.baseline * this.textScaleFactor;
                let mt = this.tightBounds ? metrics.top : metrics.descent;
                let mb = this.tightBounds ? metrics.bottom : metrics.ascent;
                top = math.min(core.double, top, mt + baseline);
                bottom = math.max(core.double, bottom, mb + baseline);
                let wd = new text$1._Word.new(word, style, metrics);
                wd.offset = new point$.PdfPoint.new(offsetX, -offsetY + baseline);
                this[_spans][$add](wd);
                spanCount = spanCount + 1;
                this[_appendDecoration](spanCount > 1, new text$1._TextDecoration.new(style, annotation, this[_spans][$length] - 1, this[_spans][$length] - 1));
                offsetX = offsetX + (metrics.advanceWidth + space.advanceWidth * dart.nullCheck(style.wordSpacing) + dart.nullCheck(style.letterSpacing));
              }
              if (line < spanLines[$length] - 1) {
                lines[$add](new text$1._Line.new(this, spanStart, spanCount, bottom, offsetX - space.advanceWidth * dart.nullCheck(style.wordSpacing) - dart.nullCheck(style.letterSpacing), _textDirection, false));
                spanStart = spanStart + spanCount;
                offsetX = 0.0;
                if (spanCount > 0) {
                  offsetY = offsetY + (bottom - top);
                } else {
                  offsetY = offsetY + (space.ascent + space.descent);
                }
                top = 0.0;
                bottom = 0.0;
                spanCount = 0;
                if (_maxLines != null && lines[$length] >= dart.notNull(_maxLines)) {
                  return;
                }
                if (offsetY > constraintHeight) {
                  return;
                }
                offsetY = offsetY + dart.nullCheck(style.lineSpacing) * this.textScaleFactor;
              }
            }
            offsetX = offsetX - (space.advanceWidth * dart.nullCheck(style.wordSpacing) - dart.nullCheck(style.letterSpacing));
          } else if (text$1.WidgetSpan.is(span)) {
            span.child.layout(context, new geometry.BoxConstraints.new({maxWidth: constraintWidth, maxHeight: constraintHeight}));
            let ws = new text$1._WidgetSpan.new(span.child, dart.nullCheck(style), span.baseline);
            if (offsetX + ws.width > constraintWidth && spanCount > 0) {
              overflow = true;
              lines[$add](new text$1._Line.new(this, spanStart, spanCount, bottom, offsetX, _textDirection, true));
              spanStart = spanStart + spanCount;
              spanCount = 0;
              if (_maxLines != null && lines[$length] > dart.notNull(_maxLines)) {
                return;
              }
              offsetX = 0.0;
              offsetY = offsetY + (bottom - top);
              top = 0.0;
              bottom = 0.0;
              if (offsetY > constraintHeight) {
                return;
              }
              offsetY = offsetY + dart.nullCheck(style.lineSpacing) * this.textScaleFactor;
            }
            let baseline = span.baseline * this.textScaleFactor;
            top = math.min(core.double, top, baseline);
            bottom = math.max(core.double, bottom, ws.height + baseline);
            ws.offset = new point$.PdfPoint.new(offsetX, -offsetY + baseline);
            this[_spans][$add](ws);
            spanCount = spanCount + 1;
            this[_appendDecoration](spanCount > 1, new text$1._TextDecoration.new(style, annotation, this[_spans][$length] - 1, this[_spans][$length] - 1));
            offsetX = offsetX + (ws.left + ws.width);
          }
        }
      };
      dart.fn(_buildLines, T$.VoidTovoid());
      _buildLines();
      if (spanCount > 0) {
        lines[$add](new text$1._Line.new(this, spanStart, spanCount, bottom, offsetX, _textDirection, false));
        offsetY = offsetY + (bottom - top);
      }
      if (!(!overflow || constraintWidth[$isFinite])) dart.assertFailed(null, I[76], 1143, 12, "!overflow || constraintWidth.isFinite");
      let width = overflow ? constraintWidth : constraints.minWidth;
      if (lines[$isNotEmpty]) {
        if (!overflow) {
          for (let line of lines) {
            width = math.max(core.double, width, line.wordsWidth);
          }
        }
        for (let line of lines) {
          line.realign(width);
        }
      }
      this.box = new rect$.PdfRect.new(0.0, 0.0, constraints.constrainWidth(width), constraints.constrainHeight(offsetY));
      t100$4 = this[_context$4];
      (() => {
        t100$4.endOffset = offsetY - this[_context$4].startOffset;
        t100$4.spanEnd = this[_spans][$length];
        return t100$4;
      })();
      if (_overflow !== text$1.TextOverflow.span) {
        if (_overflow !== text$1.TextOverflow.visible) {
          this[_mustClip] = true;
        }
        return;
      }
      if (offsetY > constraintHeight + 0.0001) {
        t100$5 = this[_context$4];
        t100$5.spanEnd = t100$5.spanEnd - lines[$last].countSpan;
        t100$6 = this[_context$4];
        t100$6.endOffset = t100$6.endOffset - lines[$last].height;
      }
      for (let index = 0; index < this[_decorations][$length]; index = index + 1) {
        let decoration = this[_decorations][$_get](index);
        if (decoration.startSpan >= this[_context$4].spanEnd || decoration.endSpan < this[_context$4].spanStart) {
          this[_decorations][$removeAt](index);
          index = index - 1;
        }
      }
    }
    debugPaint(context) {
      let t100;
      t100 = context.canvas;
      (() => {
        t100.setStrokeColor(colors.PdfColors.blue);
        t100.setLineWidth(1.0);
        t100.drawRect(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y, dart.nullCheck(this.box).width === 1 / 0 ? 1000.0 : dart.nullCheck(this.box).width, dart.nullCheck(this.box).height === 1 / 0 ? 1000.0 : dart.nullCheck(this.box).height);
        t100.strokePath();
        return t100;
      })();
    }
    paint(context) {
      let t100;
      super.paint(context);
      let currentStyle = null;
      let currentColor = null;
      if (this[_mustClip]) {
        t100 = context.canvas;
        (() => {
          t100.saveContext();
          t100.drawBox(dart.nullCheck(this.box));
          t100.clipPath();
          return t100;
        })();
      }
      for (let decoration of this[_decorations]) {
        if (!dart.fn(() => {
          if (document$0.Document.debug && text$1.RichText.debug) {
            decoration.debugPaint(context, this.textScaleFactor, dart.nullCheck(this.box), this[_spans]);
          }
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[76], 1217, 14, "() {\n        if (Document.debug && RichText.debug) {\n          decoration.debugPaint(context, textScaleFactor, box!, _spans);\n        }\n        return true;\n      }()");
        decoration.backgroundPaint(context, this.textScaleFactor, this.box, this[_spans]);
      }
      for (let span of this[_spans][$sublist](this[_context$4].spanStart, this[_context$4].spanEnd)) {
        if (!dart.fn(() => {
          if (document$0.Document.debug && text$1.RichText.debug) {
            span.debugPaint(context, this.textScaleFactor, this.box);
          }
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[76], 1233, 14, "() {\n        if (Document.debug && RichText.debug) {\n          span.debugPaint(context, textScaleFactor, box);\n        }\n        return true;\n      }()");
        if (!span.style[$_equals](currentStyle)) {
          currentStyle = span.style;
          if (!dart.equals(currentStyle.color, currentColor)) {
            currentColor = currentStyle.color;
            context.canvas.setFillColor(currentColor);
          }
        }
        span.paint(context, dart.nullCheck(currentStyle), this.textScaleFactor, new point$.PdfPoint.new(dart.nullCheck(this.box).left, dart.nullCheck(this.box).top));
      }
      for (let decoration of this[_decorations]) {
        decoration.foregroundPaint(context, this.textScaleFactor, this.box, this[_spans]);
      }
      if (this[_mustClip]) {
        context.canvas.restoreContext();
      }
    }
    [_splitWord](word, font, style, maxWidth) {
      let low = 0;
      let high = word.length;
      let pos = ((low + high) / 2)[$truncate]();
      while (low + 1 < high) {
        let metrics = font.stringMetrics(word[$substring](0, pos), {letterSpacing: dart.nullCheck(style.letterSpacing) / (dart.nullCheck(style.fontSize) * this.textScaleFactor)})['*'](dart.nullCheck(style.fontSize) * this.textScaleFactor);
        if (metrics.width > maxWidth) {
          high = pos;
        } else {
          low = pos;
        }
        pos = ((low + high) / 2)[$truncate]();
      }
      return math.max(core.int, 1, pos);
    }
    get canSpan() {
      return this.overflow === text$1.TextOverflow.span;
    }
    get hasMoreWidgets() {
      return this.canSpan;
    }
    restoreContext(context) {
      text$1._RichTextContext.as(context);
      this[_context$4].spanStart = context.spanEnd;
      this[_context$4].startOffset = -context.endOffset;
    }
    saveContext() {
      return this[_context$4];
    }
  };
  (text$1.RichText.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
    let tightBounds = opts && 'tightBounds' in opts ? opts.tightBounds : false;
    let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    let overflow = opts && 'overflow' in opts ? opts.overflow : C[226] || CT.C226;
    this[__RichText__textAlign] = null;
    this[_spans] = T$.JSArrayOf_Span().of([]);
    this[_decorations] = T$.JSArrayOf_TextDecoration().of([]);
    this[_context$4] = new text$1._RichTextContext.new();
    this[_mustClip] = false;
    this[_preprocessed] = null;
    this[text$7] = text;
    this[textAlign$4] = textAlign;
    this[textDirection$3] = textDirection;
    this[softWrap$2] = softWrap;
    this[tightBounds$] = tightBounds;
    this[textScaleFactor$0] = textScaleFactor;
    this[maxLines$2] = maxLines;
    this[overflow$2] = overflow;
    text$1.RichText.__proto__.new.call(this);
    ;
  }).prototype = text$1.RichText.prototype;
  dart.addTypeTests(text$1.RichText);
  dart.addTypeCaches(text$1.RichText);
  dart.setMethodSignature(text$1.RichText, () => ({
    __proto__: dart.getMethods(text$1.RichText.__proto__),
    [_appendDecoration]: dart.fnType(dart.void, [core.bool, text$1._TextDecoration]),
    [_addEmoji]: dart.fnType(text$1.InlineSpan, [], {annotation: dart.nullable(annotations.AnnotationBuilder), baseline: core.double}, {bitmap: ttf_parser.TtfBitmapInfo, style: text_style.TextStyle}),
    [_addText]: dart.fnType(text$1.InlineSpan, [], {annotation: dart.nullable(annotations.AnnotationBuilder), baseline: core.double, end: dart.nullable(core.int), start: core.int}, {style: text_style.TextStyle, text: core.List$(core.int)}),
    [_addPlaceholder]: dart.fnType(text$1.InlineSpan, [], {annotation: dart.nullable(annotations.AnnotationBuilder), baseline: core.double}, {style: text_style.TextStyle}),
    [_preProcessSpans]: dart.fnType(core.List$(text$1.InlineSpan), [widget$.Context]),
    layout: dart.fnType(dart.void, [widget$.Context, geometry.BoxConstraints], {parentUsesSize: core.bool}, {}),
    [_splitWord]: dart.fnType(core.int, [core.String, font.PdfFont, text_style.TextStyle, core.double]),
    restoreContext: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    saveContext: dart.fnType(multi_page.WidgetContext, [])
  }));
  dart.setGetterSignature(text$1.RichText, () => ({
    __proto__: dart.getGetters(text$1.RichText.__proto__),
    [_textAlign]: text$1.TextAlign,
    canSpan: core.bool,
    hasMoreWidgets: core.bool
  }));
  dart.setSetterSignature(text$1.RichText, () => ({
    __proto__: dart.getSetters(text$1.RichText.__proto__),
    [_textAlign]: text$1.TextAlign
  }));
  dart.setLibraryUri(text$1.RichText, I[75]);
  dart.setFieldSignature(text$1.RichText, () => ({
    __proto__: dart.getFields(text$1.RichText.__proto__),
    text: dart.finalFieldType(text$1.InlineSpan),
    textAlign: dart.finalFieldType(dart.nullable(text$1.TextAlign)),
    [__RichText__textAlign]: dart.fieldType(dart.nullable(text$1.TextAlign)),
    textDirection: dart.finalFieldType(dart.nullable(text$1.TextDirection)),
    textScaleFactor: dart.finalFieldType(core.double),
    softWrap: dart.finalFieldType(dart.nullable(core.bool)),
    tightBounds: dart.finalFieldType(core.bool),
    maxLines: dart.finalFieldType(dart.nullable(core.int)),
    [_spans]: dart.finalFieldType(core.List$(text$1._Span)),
    [_decorations]: dart.finalFieldType(core.List$(text$1._TextDecoration)),
    [_context$4]: dart.finalFieldType(text$1._RichTextContext),
    overflow: dart.finalFieldType(dart.nullable(text$1.TextOverflow)),
    [_mustClip]: dart.fieldType(core.bool),
    [_preprocessed]: dart.fieldType(dart.nullable(core.List$(text$1.InlineSpan)))
  }));
  dart.setStaticFieldSignature(text$1.RichText, () => ['debug']);
  dart.defineLazy(text$1.RichText, {
    /*text$1.RichText.debug*/get debug() {
      return false;
    },
    set debug(_) {}
  }, false);
  text$1.Text = class Text extends text$1.RichText {
    static ['_#new#tearOff'](text, opts) {
      let style = opts && 'style' in opts ? opts.style : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
      let tightBounds = opts && 'tightBounds' in opts ? opts.tightBounds : false;
      let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
      let overflow = opts && 'overflow' in opts ? opts.overflow : null;
      return new text$1.Text.new(text, {style: style, textAlign: textAlign, textDirection: textDirection, softWrap: softWrap, tightBounds: tightBounds, textScaleFactor: textScaleFactor, maxLines: maxLines, overflow: overflow});
    }
  };
  (text$1.Text.new = function(text, opts) {
    let style = opts && 'style' in opts ? opts.style : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
    let tightBounds = opts && 'tightBounds' in opts ? opts.tightBounds : false;
    let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    let overflow = opts && 'overflow' in opts ? opts.overflow : null;
    text$1.Text.__proto__.new.call(this, {text: new text$1.TextSpan.new({text: text, style: style}), textAlign: textAlign, softWrap: softWrap, tightBounds: tightBounds, textDirection: textDirection, textScaleFactor: textScaleFactor, maxLines: maxLines, overflow: overflow});
    ;
  }).prototype = text$1.Text.prototype;
  dart.addTypeTests(text$1.Text);
  dart.addTypeCaches(text$1.Text);
  dart.setLibraryUri(text$1.Text, I[75]);
  var pageFormat$ = dart.privateName(page_theme, "PageTheme.pageFormat");
  var orientation$0 = dart.privateName(page_theme, "PageTheme.orientation");
  var _margin = dart.privateName(page_theme, "PageTheme._margin");
  var buildBackground$ = dart.privateName(page_theme, "PageTheme.buildBackground");
  var buildForeground$ = dart.privateName(page_theme, "PageTheme.buildForeground");
  var theme$0 = dart.privateName(page_theme, "PageTheme.theme");
  var clip$1 = dart.privateName(page_theme, "PageTheme.clip");
  var textDirection$4 = dart.privateName(page_theme, "PageTheme.textDirection");
  var _margin$ = dart.privateName(page_theme, "_margin");
  page_theme.PageTheme = class PageTheme extends core.Object {
    get pageFormat() {
      return this[pageFormat$];
    }
    set pageFormat(value) {
      super.pageFormat = value;
    }
    get orientation() {
      return this[orientation$0];
    }
    set orientation(value) {
      super.orientation = value;
    }
    get [_margin$]() {
      return this[_margin];
    }
    set [_margin$](value) {
      super[_margin$] = value;
    }
    get buildBackground() {
      return this[buildBackground$];
    }
    set buildBackground(value) {
      super.buildBackground = value;
    }
    get buildForeground() {
      return this[buildForeground$];
    }
    set buildForeground(value) {
      super.buildForeground = value;
    }
    get theme() {
      return this[theme$0];
    }
    set theme(value) {
      super.theme = value;
    }
    get clip() {
      return this[clip$1];
    }
    set clip(value) {
      super.clip = value;
    }
    get textDirection() {
      return this[textDirection$4];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    static ['_#new#tearOff'](opts) {
      let pageFormat = opts && 'pageFormat' in opts ? opts.pageFormat : null;
      let buildBackground = opts && 'buildBackground' in opts ? opts.buildBackground : null;
      let buildForeground = opts && 'buildForeground' in opts ? opts.buildForeground : null;
      let theme = opts && 'theme' in opts ? opts.theme : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let margin = opts && 'margin' in opts ? opts.margin : null;
      let clip = opts && 'clip' in opts ? opts.clip : false;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      return new page_theme.PageTheme.new({pageFormat: pageFormat, buildBackground: buildBackground, buildForeground: buildForeground, theme: theme, orientation: orientation, margin: margin, clip: clip, textDirection: textDirection});
    }
    get mustRotate() {
      return this.orientation === page$.PageOrientation.landscape && this.pageFormat.height > this.pageFormat.width || this.orientation === page$.PageOrientation.portrait && this.pageFormat.width > this.pageFormat.height;
    }
    get margin() {
      if (this[_margin$] != null) {
        if (this.mustRotate) {
          return new geometry.EdgeInsets.fromLTRB(dart.nullCheck(this[_margin$]).bottom, dart.nullCheck(this[_margin$]).left, dart.nullCheck(this[_margin$]).top, dart.nullCheck(this[_margin$]).right);
        } else {
          return this[_margin$];
        }
      }
      if (this.mustRotate) {
        return new geometry.EdgeInsets.fromLTRB(this.pageFormat.marginBottom, this.pageFormat.marginLeft, this.pageFormat.marginTop, this.pageFormat.marginRight);
      } else {
        return new geometry.EdgeInsets.fromLTRB(this.pageFormat.marginLeft, this.pageFormat.marginTop, this.pageFormat.marginRight, this.pageFormat.marginBottom);
      }
    }
    copyWith(opts) {
      let t100, t100$, t100$0, t100$1, t100$2, t100$3, t100$4, t100$5;
      let pageFormat = opts && 'pageFormat' in opts ? opts.pageFormat : null;
      let buildBackground = opts && 'buildBackground' in opts ? opts.buildBackground : null;
      let buildForeground = opts && 'buildForeground' in opts ? opts.buildForeground : null;
      let theme = opts && 'theme' in opts ? opts.theme : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let margin = opts && 'margin' in opts ? opts.margin : null;
      let clip = opts && 'clip' in opts ? opts.clip : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      return new page_theme.PageTheme.new({pageFormat: (t100 = pageFormat, t100 == null ? this.pageFormat : t100), buildBackground: (t100$ = buildBackground, t100$ == null ? this.buildBackground : t100$), buildForeground: (t100$0 = buildForeground, t100$0 == null ? this.buildForeground : t100$0), theme: (t100$1 = theme, t100$1 == null ? this.theme : t100$1), orientation: (t100$2 = orientation, t100$2 == null ? this.orientation : t100$2), margin: (t100$3 = margin, t100$3 == null ? this.margin : t100$3), clip: (t100$4 = clip, t100$4 == null ? this.clip : t100$4), textDirection: (t100$5 = textDirection, t100$5 == null ? this.textDirection : t100$5)});
    }
  };
  (page_theme.PageTheme.new = function(opts) {
    let t100, t100$;
    let pageFormat = opts && 'pageFormat' in opts ? opts.pageFormat : null;
    let buildBackground = opts && 'buildBackground' in opts ? opts.buildBackground : null;
    let buildForeground = opts && 'buildForeground' in opts ? opts.buildForeground : null;
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let orientation = opts && 'orientation' in opts ? opts.orientation : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    let clip = opts && 'clip' in opts ? opts.clip : false;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    this[buildBackground$] = buildBackground;
    this[buildForeground$] = buildForeground;
    this[theme$0] = theme;
    this[clip$1] = clip;
    this[textDirection$4] = textDirection;
    this[pageFormat$] = (t100 = pageFormat, t100 == null ? page_format.PdfPageFormat.standard : t100);
    this[orientation$0] = (t100$ = orientation, t100$ == null ? page$.PageOrientation.natural : t100$);
    this[_margin] = margin;
    ;
  }).prototype = page_theme.PageTheme.prototype;
  dart.addTypeTests(page_theme.PageTheme);
  dart.addTypeCaches(page_theme.PageTheme);
  dart.setMethodSignature(page_theme.PageTheme, () => ({
    __proto__: dart.getMethods(page_theme.PageTheme.__proto__),
    copyWith: dart.fnType(page_theme.PageTheme, [], {buildBackground: dart.nullable(dart.fnType(widget$.Widget, [widget$.Context])), buildForeground: dart.nullable(dart.fnType(widget$.Widget, [widget$.Context])), clip: dart.nullable(core.bool), margin: dart.nullable(geometry.EdgeInsets), orientation: dart.nullable(page$.PageOrientation), pageFormat: dart.nullable(page_format.PdfPageFormat), textDirection: dart.nullable(text$1.TextDirection), theme: dart.nullable(theme$.ThemeData)}, {})
  }));
  dart.setGetterSignature(page_theme.PageTheme, () => ({
    __proto__: dart.getGetters(page_theme.PageTheme.__proto__),
    mustRotate: core.bool,
    margin: dart.nullable(geometry.EdgeInsets)
  }));
  dart.setLibraryUri(page_theme.PageTheme, I[77]);
  dart.setFieldSignature(page_theme.PageTheme, () => ({
    __proto__: dart.getFields(page_theme.PageTheme.__proto__),
    pageFormat: dart.finalFieldType(page_format.PdfPageFormat),
    orientation: dart.finalFieldType(page$.PageOrientation),
    [_margin$]: dart.finalFieldType(dart.nullable(geometry.EdgeInsets)),
    buildBackground: dart.finalFieldType(dart.nullable(dart.fnType(widget$.Widget, [widget$.Context]))),
    buildForeground: dart.finalFieldType(dart.nullable(dart.fnType(widget$.Widget, [widget$.Context]))),
    theme: dart.finalFieldType(dart.nullable(theme$.ThemeData)),
    clip: dart.finalFieldType(core.bool),
    textDirection: dart.finalFieldType(dart.nullable(text$1.TextDirection))
  }));
  page$.PageOrientation = class PageOrientation extends core._Enum {
    toString() {
      return "PageOrientation." + this[_name];
    }
  };
  (page$.PageOrientation.new = function(index, name) {
    page$.PageOrientation.__proto__.new.call(this, index, name);
    ;
  }).prototype = page$.PageOrientation.prototype;
  dart.addTypeTests(page$.PageOrientation);
  dart.addTypeCaches(page$.PageOrientation);
  dart.setLibraryUri(page$.PageOrientation, I[71]);
  dart.setStaticFieldSignature(page$.PageOrientation, () => ['values', 'natural', 'landscape', 'portrait']);
  dart.defineExtensionMethods(page$.PageOrientation, ['toString']);
  dart.defineLazy(page$.PageOrientation, {
    /*page$.PageOrientation.values*/get values() {
      return C[229] || CT.C229;
    },
    /*page$.PageOrientation.natural*/get natural() {
      return C[230] || CT.C230;
    },
    /*page$.PageOrientation.landscape*/get landscape() {
      return C[231] || CT.C231;
    },
    /*page$.PageOrientation.portrait*/get portrait() {
      return C[232] || CT.C232;
    }
  }, false);
  var document$2 = dart.privateName(document$0, "Document.document");
  var theme$1 = dart.privateName(document$0, "Document.theme");
  var _pages$ = dart.privateName(document$0, "_pages");
  var _paint = dart.privateName(document$0, "_paint");
  document$0.Document = class Document extends core.Object {
    get document() {
      return this[document$2];
    }
    set document(value) {
      super.document = value;
    }
    get theme() {
      return this[theme$1];
    }
    set theme(value) {
      super.theme = value;
    }
    static ['_#new#tearOff'](opts) {
      let pageMode = opts && 'pageMode' in opts ? opts.pageMode : C[233] || CT.C233;
      let deflate = opts && 'deflate' in opts ? opts.deflate : null;
      let compress = opts && 'compress' in opts ? opts.compress : true;
      let verbose = opts && 'verbose' in opts ? opts.verbose : false;
      let version = opts && 'version' in opts ? opts.version : C[234] || CT.C234;
      let theme = opts && 'theme' in opts ? opts.theme : null;
      let title = opts && 'title' in opts ? opts.title : null;
      let author = opts && 'author' in opts ? opts.author : null;
      let creator = opts && 'creator' in opts ? opts.creator : null;
      let subject = opts && 'subject' in opts ? opts.subject : null;
      let keywords = opts && 'keywords' in opts ? opts.keywords : null;
      let producer = opts && 'producer' in opts ? opts.producer : null;
      let metadata = opts && 'metadata' in opts ? opts.metadata : null;
      return new document$0.Document.new({pageMode: pageMode, deflate: deflate, compress: compress, verbose: verbose, version: version, theme: theme, title: title, author: author, creator: creator, subject: subject, keywords: keywords, producer: producer, metadata: metadata});
    }
    static ['_#load#tearOff'](parser, opts) {
      let pageMode = opts && 'pageMode' in opts ? opts.pageMode : C[233] || CT.C233;
      let deflate = opts && 'deflate' in opts ? opts.deflate : null;
      let compress = opts && 'compress' in opts ? opts.compress : true;
      let verbose = opts && 'verbose' in opts ? opts.verbose : false;
      let theme = opts && 'theme' in opts ? opts.theme : null;
      let title = opts && 'title' in opts ? opts.title : null;
      let author = opts && 'author' in opts ? opts.author : null;
      let creator = opts && 'creator' in opts ? opts.creator : null;
      let subject = opts && 'subject' in opts ? opts.subject : null;
      let keywords = opts && 'keywords' in opts ? opts.keywords : null;
      let producer = opts && 'producer' in opts ? opts.producer : null;
      return new document$0.Document.load(parser, {pageMode: pageMode, deflate: deflate, compress: compress, verbose: verbose, theme: theme, title: title, author: author, creator: creator, subject: subject, keywords: keywords, producer: producer});
    }
    addPage(page, opts) {
      let index = opts && 'index' in opts ? opts.index : null;
      if (!!this[_paint]) dart.assertFailed("The document has already been saved.", I[78], 117, 12, "!_paint");
      page.generate(this, {index: index});
      this[_pages$][$add](page);
    }
    editPage(index, page) {
      if (!!this[_paint]) dart.assertFailed("The document has already been saved.", I[78], 123, 12, "!_paint");
      page.generate(this, {index: index, insert: false});
      this[_pages$][$add](page);
    }
    save() {
      return async.async(typed_data.Uint8List, (function* save() {
        if (!this[_paint]) {
          for (let page of this[_pages$]) {
            page.postProcess(this);
          }
          this[_paint] = true;
        }
        return yield this.document.save();
      }).bind(this));
    }
  };
  (document$0.Document.new = function(opts) {
    let pageMode = opts && 'pageMode' in opts ? opts.pageMode : C[233] || CT.C233;
    let deflate = opts && 'deflate' in opts ? opts.deflate : null;
    let compress = opts && 'compress' in opts ? opts.compress : true;
    let verbose = opts && 'verbose' in opts ? opts.verbose : false;
    let version = opts && 'version' in opts ? opts.version : C[234] || CT.C234;
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let creator = opts && 'creator' in opts ? opts.creator : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let keywords = opts && 'keywords' in opts ? opts.keywords : null;
    let producer = opts && 'producer' in opts ? opts.producer : null;
    let metadata = opts && 'metadata' in opts ? opts.metadata : null;
    this[_pages$] = T$.JSArrayOfPage().of([]);
    this[_paint] = false;
    this[theme$1] = theme;
    this[document$2] = new document.PdfDocument.new({pageMode: pageMode, deflate: deflate, compress: compress, verbose: verbose, version: version});
    if (title != null || author != null || creator != null || subject != null || keywords != null || producer != null) {
      new info.PdfInfo.new(this.document, {title: title, author: author, creator: creator, subject: subject, keywords: keywords, producer: producer});
    }
    if (metadata != null) {
      new metadata$.PdfMetadata.new(this.document, metadata);
    }
  }).prototype = document$0.Document.prototype;
  (document$0.Document.load = function(parser, opts) {
    let pageMode = opts && 'pageMode' in opts ? opts.pageMode : C[233] || CT.C233;
    let deflate = opts && 'deflate' in opts ? opts.deflate : null;
    let compress = opts && 'compress' in opts ? opts.compress : true;
    let verbose = opts && 'verbose' in opts ? opts.verbose : false;
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let creator = opts && 'creator' in opts ? opts.creator : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let keywords = opts && 'keywords' in opts ? opts.keywords : null;
    let producer = opts && 'producer' in opts ? opts.producer : null;
    this[_pages$] = T$.JSArrayOfPage().of([]);
    this[_paint] = false;
    this[theme$1] = theme;
    this[document$2] = new document.PdfDocument.load(parser, {pageMode: pageMode, deflate: deflate, compress: compress, verbose: verbose});
    if (title != null || author != null || creator != null || subject != null || keywords != null || producer != null) {
      new info.PdfInfo.new(this.document, {title: title, author: author, creator: creator, subject: subject, keywords: keywords, producer: producer});
    }
  }).prototype = document$0.Document.prototype;
  dart.addTypeTests(document$0.Document);
  dart.addTypeCaches(document$0.Document);
  dart.setMethodSignature(document$0.Document, () => ({
    __proto__: dart.getMethods(document$0.Document.__proto__),
    addPage: dart.fnType(dart.void, [page$.Page], {index: dart.nullable(core.int)}, {}),
    editPage: dart.fnType(dart.void, [core.int, page$.Page]),
    save: dart.fnType(async.Future$(typed_data.Uint8List), [])
  }));
  dart.setLibraryUri(document$0.Document, I[79]);
  dart.setFieldSignature(document$0.Document, () => ({
    __proto__: dart.getFields(document$0.Document.__proto__),
    document: dart.finalFieldType(document.PdfDocument),
    theme: dart.finalFieldType(dart.nullable(theme$.ThemeData)),
    [_pages$]: dart.finalFieldType(core.List$(page$.Page)),
    [_paint]: dart.fieldType(core.bool)
  }));
  dart.setStaticFieldSignature(document$0.Document, () => ['debug']);
  dart.defineLazy(document$0.Document, {
    /*document$0.Document.debug*/get debug() {
      return false;
    },
    set debug(_) {}
  }, false);
  var _page = dart.privateName(widget$, "Context._page");
  var _canvas = dart.privateName(widget$, "Context._canvas");
  var _inherited = dart.privateName(widget$, "Context._inherited");
  var document$3 = dart.privateName(widget$, "Context.document");
  var _page$ = dart.privateName(widget$, "_page");
  var _canvas$0 = dart.privateName(widget$, "_canvas");
  var _inherited$ = dart.privateName(widget$, "_inherited");
  var _pageNumber = dart.privateName(widget$, "_pageNumber");
  widget$.Context = class Context extends core.Object {
    get [_page$]() {
      return this[_page];
    }
    set [_page$](value) {
      super[_page$] = value;
    }
    get [_canvas$0]() {
      return this[_canvas];
    }
    set [_canvas$0](value) {
      super[_canvas$0] = value;
    }
    get [_inherited$]() {
      return this[_inherited];
    }
    set [_inherited$](value) {
      super[_inherited$] = value;
    }
    get document() {
      return this[document$3];
    }
    set document(value) {
      super.document = value;
    }
    static new(opts) {
      let document = opts && 'document' in opts ? opts.document : null;
      let page = opts && 'page' in opts ? opts.page : null;
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      return new widget$.Context.__({document: document, page: page, canvas: canvas, inherited: new (T$.LinkedMapOfType$Inherited()).new()});
    }
    static ['_#new#tearOff'](opts) {
      let document = opts && 'document' in opts ? opts.document : null;
      let page = opts && 'page' in opts ? opts.page : null;
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      return widget$.Context.new({document: document, page: page, canvas: canvas});
    }
    static ['_#_#tearOff'](opts) {
      let document = opts && 'document' in opts ? opts.document : null;
      let page = opts && 'page' in opts ? opts.page : null;
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      let inherited = opts && 'inherited' in opts ? opts.inherited : null;
      return new widget$.Context.__({document: document, page: page, canvas: canvas, inherited: inherited});
    }
    get page() {
      return dart.nullCheck(this[_page$]);
    }
    get canvas() {
      return dart.nullCheck(this[_canvas$0]);
    }
    get [_pageNumber]() {
      return this.document.pdfPageList.pages[$indexOf](this.page);
    }
    get pageNumber() {
      return this[_pageNumber] + 1;
    }
    get pageLabel() {
      return this.document.catalog.pageLabels == null ? this.pageNumber[$toString]() : this.document.pageLabels.pageLabel(this[_pageNumber]);
    }
    set pageLabel(value) {
      let t104, t103, t102;
      t102 = this.document.pageLabels.labels;
      t103 = this[_pageNumber];
      t104 = new page_label.PdfPageLabel.new(value);
      t102[$_set](t103, t104);
      return t104;
    }
    get pagesCount() {
      return this.document.pdfPageList.pages[$length];
    }
    copyWith(opts) {
      let t102, t102$, t102$0;
      let page = opts && 'page' in opts ? opts.page : null;
      let canvas = opts && 'canvas' in opts ? opts.canvas : null;
      let ctm = opts && 'ctm' in opts ? opts.ctm : null;
      let inherited = opts && 'inherited' in opts ? opts.inherited : null;
      return new widget$.Context.__({document: this.document, page: (t102 = page, t102 == null ? this[_page$] : t102), canvas: (t102$ = canvas, t102$ == null ? this[_canvas$0] : t102$), inherited: (t102$0 = inherited, t102$0 == null ? this[_inherited$] : t102$0)});
    }
    dependsOn(T) {
      return dart.nullable(T).as(this[_inherited$][$_get](dart.wrapType(T)));
    }
    inheritFrom(object) {
      return this.inheritFromAll(T$.JSArrayOfInherited().of([object]));
    }
    inheritFromAll(objects) {
      let inherited = T$.HashMapOfType$Inherited().of(this[_inherited$]);
      for (let object of objects) {
        inherited[$_set](object[$runtimeType], object);
      }
      return this.copyWith({inherited: inherited});
    }
    localToGlobal(box) {
      let mat = this.canvas.getTransform();
      let lt = mat.transform3(vector_math_64.Vector3.new(box.left, box.bottom, 0.0));
      let lb = mat.transform3(vector_math_64.Vector3.new(box.left, box.top, 0.0));
      let rt = mat.transform3(vector_math_64.Vector3.new(box.right, box.bottom, 0.0));
      let rb = mat.transform3(vector_math_64.Vector3.new(box.right, box.top, 0.0));
      let x = T$.JSArrayOfdouble().of([lt.x, lb.x, rt.x, rb.x]);
      let y = T$.JSArrayOfdouble().of([lt.y, lb.y, rt.y, rb.y]);
      return rect$.PdfRect.fromLTRB(x[$reduce](C[235] || CT.C235), y[$reduce](C[235] || CT.C235), x[$reduce](C[237] || CT.C237), y[$reduce](C[237] || CT.C237));
    }
    localToGlobalPoint(point) {
      let mat = this.canvas.getTransform();
      let xy = mat.transform3(vector_math_64.Vector3.new(point.x, point.y, 0.0));
      return new point$.PdfPoint.new(xy.x, xy.y);
    }
  };
  (widget$.Context.__ = function(opts) {
    let document = opts && 'document' in opts ? opts.document : null;
    let page = opts && 'page' in opts ? opts.page : null;
    let canvas = opts && 'canvas' in opts ? opts.canvas : null;
    let inherited = opts && 'inherited' in opts ? opts.inherited : null;
    this[document$3] = document;
    this[_page] = page;
    this[_canvas] = canvas;
    this[_inherited] = inherited;
    ;
  }).prototype = widget$.Context.prototype;
  dart.addTypeTests(widget$.Context);
  dart.addTypeCaches(widget$.Context);
  dart.setMethodSignature(widget$.Context, () => ({
    __proto__: dart.getMethods(widget$.Context.__proto__),
    copyWith: dart.fnType(widget$.Context, [], {canvas: dart.nullable(graphics.PdfGraphics), ctm: dart.nullable(vector_math_64.Matrix4), inherited: dart.nullable(collection.HashMap$(core.Type, widget$.Inherited)), page: dart.nullable(page.PdfPage)}, {}),
    dependsOn: dart.gFnType(T => [dart.nullable(T), []], T => [dart.nullable(core.Object)]),
    inheritFrom: dart.fnType(widget$.Context, [widget$.Inherited]),
    inheritFromAll: dart.fnType(widget$.Context, [core.Iterable$(widget$.Inherited)]),
    localToGlobal: dart.fnType(rect$.PdfRect, [rect$.PdfRect]),
    localToGlobalPoint: dart.fnType(point$.PdfPoint, [point$.PdfPoint])
  }));
  dart.setStaticMethodSignature(widget$.Context, () => ['new']);
  dart.setGetterSignature(widget$.Context, () => ({
    __proto__: dart.getGetters(widget$.Context.__proto__),
    page: page.PdfPage,
    canvas: graphics.PdfGraphics,
    [_pageNumber]: core.int,
    pageNumber: core.int,
    pageLabel: core.String,
    pagesCount: core.int
  }));
  dart.setSetterSignature(widget$.Context, () => ({
    __proto__: dart.getSetters(widget$.Context.__proto__),
    pageLabel: core.String
  }));
  dart.setLibraryUri(widget$.Context, I[6]);
  dart.setFieldSignature(widget$.Context, () => ({
    __proto__: dart.getFields(widget$.Context.__proto__),
    [_page$]: dart.finalFieldType(dart.nullable(page.PdfPage)),
    [_canvas$0]: dart.finalFieldType(dart.nullable(graphics.PdfGraphics)),
    [_inherited$]: dart.finalFieldType(collection.HashMap$(core.Type, widget$.Inherited)),
    document: dart.finalFieldType(document.PdfDocument)
  }));
  var build$ = dart.privateName(widget$, "InheritedWidget.build");
  var inherited$ = dart.privateName(widget$, "InheritedWidget.inherited");
  var _context$5 = dart.privateName(widget$, "_context");
  widget$.InheritedWidget = class InheritedWidget extends widget$.SingleChildWidget {
    get build() {
      return this[build$];
    }
    set build(value) {
      super.build = value;
    }
    get inherited() {
      return this[inherited$];
    }
    set inherited(value) {
      super.inherited = value;
    }
    static ['_#new#tearOff'](opts) {
      let build = opts && 'build' in opts ? opts.build : null;
      let inherited = opts && 'inherited' in opts ? opts.inherited : null;
      return new widget$.InheritedWidget.new({build: build, inherited: inherited});
    }
    get child() {
      return this[_child];
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this[_context$5] = this.inherited != null ? context.inheritFrom(dart.nullCheck(this.inherited)) : context;
      this[_child] = dart.nullCheck(this.build)(dart.nullCheck(this[_context$5]));
      super.layout(dart.nullCheck(this[_context$5]), constraints);
    }
    paint(context) {
      if (!(this[_context$5] != null)) dart.assertFailed(null, I[5], 378, 12, "_context != null");
      super.paint(dart.nullCheck(this[_context$5]));
      this.paintChild(dart.nullCheck(this[_context$5]));
    }
  };
  (widget$.InheritedWidget.new = function(opts) {
    let build = opts && 'build' in opts ? opts.build : null;
    let inherited = opts && 'inherited' in opts ? opts.inherited : null;
    this[_context$5] = null;
    this[_child] = null;
    this[build$] = build;
    this[inherited$] = inherited;
    widget$.InheritedWidget.__proto__.new.call(this);
    ;
  }).prototype = widget$.InheritedWidget.prototype;
  dart.addTypeTests(widget$.InheritedWidget);
  dart.addTypeCaches(widget$.InheritedWidget);
  dart.setGetterSignature(widget$.InheritedWidget, () => ({
    __proto__: dart.getGetters(widget$.InheritedWidget.__proto__),
    child: dart.nullable(widget$.Widget)
  }));
  dart.setLibraryUri(widget$.InheritedWidget, I[6]);
  dart.setFieldSignature(widget$.InheritedWidget, () => ({
    __proto__: dart.getFields(widget$.InheritedWidget.__proto__),
    build: dart.finalFieldType(dart.nullable(dart.fnType(widget$.Widget, [widget$.Context]))),
    inherited: dart.finalFieldType(dart.nullable(widget$.Inherited)),
    [_context$5]: dart.fieldType(dart.nullable(widget$.Context)),
    [_child]: dart.fieldType(dart.nullable(widget$.Widget))
  }));
  var build$0 = dart.privateName(widget$, "DelayedWidget.build");
  widget$.DelayedWidget = class DelayedWidget extends widget$.SingleChildWidget {
    get build() {
      return this[build$0];
    }
    set build(value) {
      super.build = value;
    }
    static ['_#new#tearOff'](opts) {
      let build = opts && 'build' in opts ? opts.build : null;
      return new widget$.DelayedWidget.new({build: build});
    }
    get child() {
      return this[_child];
    }
    layout(context, constraints, opts) {
      let t102;
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this[_child] = (t102 = context, this.build(t102));
      super.layout(context, constraints);
    }
    delayedPaint(context) {
      let t102;
      this[_child] = (t102 = context, this.build(t102));
      dart.nullCheck(this.child).layout(context, new geometry.BoxConstraints.tight(dart.nullCheck(this.box).size), {parentUsesSize: false});
      this.paintChild(context);
    }
    paint(context) {
      this.delayedPaint(context);
      super.paint(context);
    }
  };
  (widget$.DelayedWidget.new = function(opts) {
    let build = opts && 'build' in opts ? opts.build : null;
    this[_child] = null;
    this[build$0] = build;
    widget$.DelayedWidget.__proto__.new.call(this);
    ;
  }).prototype = widget$.DelayedWidget.prototype;
  dart.addTypeTests(widget$.DelayedWidget);
  dart.addTypeCaches(widget$.DelayedWidget);
  dart.setMethodSignature(widget$.DelayedWidget, () => ({
    __proto__: dart.getMethods(widget$.DelayedWidget.__proto__),
    delayedPaint: dart.fnType(dart.void, [widget$.Context])
  }));
  dart.setGetterSignature(widget$.DelayedWidget, () => ({
    __proto__: dart.getGetters(widget$.DelayedWidget.__proto__),
    child: dart.nullable(widget$.Widget)
  }));
  dart.setLibraryUri(widget$.DelayedWidget, I[6]);
  dart.setFieldSignature(widget$.DelayedWidget, () => ({
    __proto__: dart.getFields(widget$.DelayedWidget.__proto__),
    build: dart.finalFieldType(dart.fnType(widget$.Widget, [widget$.Context])),
    [_child]: dart.fieldType(dart.nullable(widget$.Widget))
  }));
  const x$3 = Radius_x;
  const y$3 = Radius_y;
  border_radius.Radius = class Radius extends core.Object {
    get x() {
      return this[x$3];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$3];
    }
    set y(value) {
      super.y = value;
    }
    static ['_#circular#tearOff'](radius) {
      return new border_radius.Radius.circular(radius);
    }
    static ['_#elliptical#tearOff'](x, y) {
      return new border_radius.Radius.elliptical(x, y);
    }
  };
  (border_radius.Radius.circular = function(radius) {
    border_radius.Radius.elliptical.call(this, radius, radius);
  }).prototype = border_radius.Radius.prototype;
  (border_radius.Radius.elliptical = function(x, y) {
    this[x$3] = x;
    this[y$3] = y;
    ;
  }).prototype = border_radius.Radius.prototype;
  dart.addTypeTests(border_radius.Radius);
  dart.addTypeCaches(border_radius.Radius);
  dart.setLibraryUri(border_radius.Radius, I[80]);
  dart.setFieldSignature(border_radius.Radius, () => ({
    __proto__: dart.getFields(border_radius.Radius.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double)
  }));
  dart.setStaticFieldSignature(border_radius.Radius, () => ['zero']);
  dart.defineLazy(border_radius.Radius, {
    /*border_radius.Radius.zero*/get zero() {
      return C[239] || CT.C239;
    }
  }, false);
  const topLeft$ = BorderRadius_topLeft;
  const topRight$ = BorderRadius_topRight;
  const bottomLeft$ = BorderRadius_bottomLeft;
  const bottomRight$ = BorderRadius_bottomRight;
  border_radius.BorderRadius = class BorderRadius extends core.Object {
    get topLeft() {
      return this[topLeft$];
    }
    set topLeft(value) {
      super.topLeft = value;
    }
    get topRight() {
      return this[topRight$];
    }
    set topRight(value) {
      super.topRight = value;
    }
    get bottomLeft() {
      return this[bottomLeft$];
    }
    set bottomLeft(value) {
      super.bottomLeft = value;
    }
    get bottomRight() {
      return this[bottomRight$];
    }
    set bottomRight(value) {
      super.bottomRight = value;
    }
    static ['_#all#tearOff'](radius) {
      return new border_radius.BorderRadius.all(radius);
    }
    static ['_#circular#tearOff'](radius) {
      return new border_radius.BorderRadius.circular(radius);
    }
    static ['_#vertical#tearOff'](opts) {
      let top = opts && 'top' in opts ? opts.top : C[239] || CT.C239;
      let bottom = opts && 'bottom' in opts ? opts.bottom : C[239] || CT.C239;
      return new border_radius.BorderRadius.vertical({top: top, bottom: bottom});
    }
    static ['_#horizontal#tearOff'](opts) {
      let left = opts && 'left' in opts ? opts.left : C[239] || CT.C239;
      let right = opts && 'right' in opts ? opts.right : C[239] || CT.C239;
      return new border_radius.BorderRadius.horizontal({left: left, right: right});
    }
    static ['_#only#tearOff'](opts) {
      let topLeft = opts && 'topLeft' in opts ? opts.topLeft : C[239] || CT.C239;
      let topRight = opts && 'topRight' in opts ? opts.topRight : C[239] || CT.C239;
      let bottomLeft = opts && 'bottomLeft' in opts ? opts.bottomLeft : C[239] || CT.C239;
      let bottomRight = opts && 'bottomRight' in opts ? opts.bottomRight : C[239] || CT.C239;
      return new border_radius.BorderRadius.only({topLeft: topLeft, topRight: topRight, bottomLeft: bottomLeft, bottomRight: bottomRight});
    }
    paint(context, box) {
      let t102;
      t102 = context.canvas;
      (() => {
        t102.moveTo(box.x, box.y + this.bottomLeft.y);
        t102.curveTo(box.x, box.y - 0.551784 * this.bottomLeft.y + this.bottomLeft.y, box.x - 0.551784 * this.bottomLeft.x + this.bottomLeft.x, box.y, box.x + this.bottomLeft.x, box.y);
        t102.lineTo(box.x + box.width - this.bottomRight.x, box.y);
        t102.curveTo(box.x + 0.551784 * this.bottomRight.x + box.width - this.bottomRight.x, box.y, box.x + box.width, box.y - 0.551784 * this.bottomRight.y + this.bottomRight.y, box.x + box.width, box.y + this.bottomRight.y);
        t102.lineTo(box.x + box.width, box.y + box.height - this.topRight.y);
        t102.curveTo(box.x + box.width, box.y + 0.551784 * this.topRight.y + box.height - this.topRight.y, box.x + 0.551784 * this.topRight.x + box.width - this.topRight.x, box.y + box.height, box.x + box.width - this.topRight.x, box.y + box.height);
        t102.lineTo(box.x + this.topLeft.x, box.y + box.height);
        t102.curveTo(box.x - 0.551784 * this.topLeft.x + this.topLeft.x, box.y + box.height, box.x, box.y + 0.551784 * this.topLeft.y + box.height - this.topLeft.y, box.x, box.y + box.height - this.topLeft.y);
        t102.lineTo(box.x, box.y + this.bottomLeft.y);
        return t102;
      })();
    }
  };
  (border_radius.BorderRadius.all = function(radius) {
    border_radius.BorderRadius.only.call(this, {topLeft: radius, topRight: radius, bottomLeft: radius, bottomRight: radius});
  }).prototype = border_radius.BorderRadius.prototype;
  (border_radius.BorderRadius.circular = function(radius) {
    border_radius.BorderRadius.all.call(this, new border_radius.Radius.circular(radius));
  }).prototype = border_radius.BorderRadius.prototype;
  (border_radius.BorderRadius.vertical = function(opts) {
    let top = opts && 'top' in opts ? opts.top : C[239] || CT.C239;
    let bottom = opts && 'bottom' in opts ? opts.bottom : C[239] || CT.C239;
    border_radius.BorderRadius.only.call(this, {topLeft: top, topRight: top, bottomLeft: bottom, bottomRight: bottom});
  }).prototype = border_radius.BorderRadius.prototype;
  (border_radius.BorderRadius.horizontal = function(opts) {
    let left = opts && 'left' in opts ? opts.left : C[239] || CT.C239;
    let right = opts && 'right' in opts ? opts.right : C[239] || CT.C239;
    border_radius.BorderRadius.only.call(this, {topLeft: left, topRight: right, bottomLeft: left, bottomRight: right});
  }).prototype = border_radius.BorderRadius.prototype;
  (border_radius.BorderRadius.only = function(opts) {
    let topLeft = opts && 'topLeft' in opts ? opts.topLeft : C[239] || CT.C239;
    let topRight = opts && 'topRight' in opts ? opts.topRight : C[239] || CT.C239;
    let bottomLeft = opts && 'bottomLeft' in opts ? opts.bottomLeft : C[239] || CT.C239;
    let bottomRight = opts && 'bottomRight' in opts ? opts.bottomRight : C[239] || CT.C239;
    this[topLeft$] = topLeft;
    this[topRight$] = topRight;
    this[bottomLeft$] = bottomLeft;
    this[bottomRight$] = bottomRight;
    ;
  }).prototype = border_radius.BorderRadius.prototype;
  dart.addTypeTests(border_radius.BorderRadius);
  dart.addTypeCaches(border_radius.BorderRadius);
  dart.setMethodSignature(border_radius.BorderRadius, () => ({
    __proto__: dart.getMethods(border_radius.BorderRadius.__proto__),
    paint: dart.fnType(dart.void, [widget$.Context, rect$.PdfRect])
  }));
  dart.setLibraryUri(border_radius.BorderRadius, I[80]);
  dart.setFieldSignature(border_radius.BorderRadius, () => ({
    __proto__: dart.getFields(border_radius.BorderRadius.__proto__),
    topLeft: dart.finalFieldType(border_radius.Radius),
    topRight: dart.finalFieldType(border_radius.Radius),
    bottomLeft: dart.finalFieldType(border_radius.Radius),
    bottomRight: dart.finalFieldType(border_radius.Radius)
  }));
  dart.setStaticFieldSignature(border_radius.BorderRadius, () => ['zero']);
  dart.defineLazy(border_radius.BorderRadius, {
    /*border_radius.BorderRadius.zero*/get zero() {
      return C[240] || CT.C240;
    }
  }, false);
  const paint$ = BorderStyle_paint;
  const pattern$ = BorderStyle_pattern;
  const phase$ = BorderStyle_phase;
  box_border.BorderStyle = class BorderStyle extends core.Object {
    get paint() {
      return this[paint$];
    }
    set paint(value) {
      super.paint = value;
    }
    get pattern() {
      return this[pattern$];
    }
    set pattern(value) {
      super.pattern = value;
    }
    get phase() {
      return this[phase$];
    }
    set phase(value) {
      super.phase = value;
    }
    static ['_#new#tearOff'](opts) {
      let paint = opts && 'paint' in opts ? opts.paint : true;
      let pattern = opts && 'pattern' in opts ? opts.pattern : null;
      let phase = opts && 'phase' in opts ? opts.phase : 0;
      return new box_border.BorderStyle.new({paint: paint, pattern: pattern, phase: phase});
    }
    setStyle(context) {
      let t102;
      if (this.paint && this.pattern != null) {
        t102 = context.canvas;
        (() => {
          t102.saveContext();
          t102.setLineCap(graphics.PdfLineCap.butt);
          t102.setLineDashPattern(dart.nullCheck(this.pattern), this.phase);
          return t102;
        })();
      }
    }
    unsetStyle(context) {
      if (this.paint && this.pattern != null) {
        context.canvas.restoreContext();
      }
    }
  };
  (box_border.BorderStyle.new = function(opts) {
    let paint = opts && 'paint' in opts ? opts.paint : true;
    let pattern = opts && 'pattern' in opts ? opts.pattern : null;
    let phase = opts && 'phase' in opts ? opts.phase : 0;
    this[paint$] = paint;
    this[pattern$] = pattern;
    this[phase$] = phase;
    ;
  }).prototype = box_border.BorderStyle.prototype;
  dart.addTypeTests(box_border.BorderStyle);
  dart.addTypeCaches(box_border.BorderStyle);
  dart.setMethodSignature(box_border.BorderStyle, () => ({
    __proto__: dart.getMethods(box_border.BorderStyle.__proto__),
    setStyle: dart.fnType(dart.void, [widget$.Context]),
    unsetStyle: dart.fnType(dart.void, [widget$.Context])
  }));
  dart.setLibraryUri(box_border.BorderStyle, I[2]);
  dart.setFieldSignature(box_border.BorderStyle, () => ({
    __proto__: dart.getFields(box_border.BorderStyle.__proto__),
    paint: dart.finalFieldType(core.bool),
    pattern: dart.finalFieldType(dart.nullable(core.List$(core.num))),
    phase: dart.finalFieldType(core.int)
  }));
  dart.setStaticFieldSignature(box_border.BorderStyle, () => ['none', 'solid', 'dashed', 'dotted']);
  dart.defineLazy(box_border.BorderStyle, {
    /*box_border.BorderStyle.none*/get none() {
      return C[9] || CT.C9;
    },
    /*box_border.BorderStyle.solid*/get solid() {
      return C[11] || CT.C11;
    },
    /*box_border.BorderStyle.dashed*/get dashed() {
      return C[241] || CT.C241;
    },
    /*box_border.BorderStyle.dotted*/get dotted() {
      return C[243] || CT.C243;
    }
  }, false);
  const color$15 = BorderSide_color;
  const width$11 = BorderSide_width;
  const style$4 = BorderSide_style;
  box_border.BorderSide = class BorderSide extends core.Object {
    get color() {
      return this[color$15];
    }
    set color(value) {
      super.color = value;
    }
    get width() {
      return this[width$11];
    }
    set width(value) {
      super.width = value;
    }
    get style() {
      return this[style$4];
    }
    set style(value) {
      super.style = value;
    }
    static ['_#new#tearOff'](opts) {
      let color = opts && 'color' in opts ? opts.color : C[10] || CT.C10;
      let width = opts && 'width' in opts ? opts.width : 1;
      let style = opts && 'style' in opts ? opts.style : C[11] || CT.C11;
      return new box_border.BorderSide.new({color: color, width: width, style: style});
    }
    copyWith(opts) {
      let t102, t102$, t102$0;
      let color = opts && 'color' in opts ? opts.color : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let style = opts && 'style' in opts ? opts.style : null;
      return new box_border.BorderSide.new({color: (t102 = color, t102 == null ? this.color : t102), width: (t102$ = width, t102$ == null ? this.width : t102$), style: (t102$0 = style, t102$0 == null ? this.style : t102$0)});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!other[$runtimeType]._equals(this[$runtimeType])) {
        return false;
      }
      return box_border.BorderSide.is(other) && other.color._equals(this.color) && other.width === this.width && other.style[$_equals](this.style);
    }
    get hashCode() {
      return this.color.hashCode + this.width[$hashCode] + this.style[$hashCode];
    }
  };
  (box_border.BorderSide.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : C[10] || CT.C10;
    let width = opts && 'width' in opts ? opts.width : 1;
    let style = opts && 'style' in opts ? opts.style : C[11] || CT.C11;
    this[color$15] = color;
    this[width$11] = width;
    this[style$4] = style;
    ;
  }).prototype = box_border.BorderSide.prototype;
  dart.addTypeTests(box_border.BorderSide);
  dart.addTypeCaches(box_border.BorderSide);
  dart.setMethodSignature(box_border.BorderSide, () => ({
    __proto__: dart.getMethods(box_border.BorderSide.__proto__),
    copyWith: dart.fnType(box_border.BorderSide, [], {color: dart.nullable(color$.PdfColor), style: dart.nullable(box_border.BorderStyle), width: dart.nullable(core.double)}, {})
  }));
  dart.setLibraryUri(box_border.BorderSide, I[2]);
  dart.setFieldSignature(box_border.BorderSide, () => ({
    __proto__: dart.getFields(box_border.BorderSide.__proto__),
    color: dart.finalFieldType(color$.PdfColor),
    width: dart.finalFieldType(core.double),
    style: dart.finalFieldType(box_border.BorderStyle)
  }));
  dart.setStaticFieldSignature(box_border.BorderSide, () => ['none']);
  dart.defineExtensionMethods(box_border.BorderSide, ['_equals']);
  dart.defineExtensionAccessors(box_border.BorderSide, ['hashCode']);
  dart.defineLazy(box_border.BorderSide, {
    /*box_border.BorderSide.none*/get none() {
      return C[8] || CT.C8;
    }
  }, false);
  basic.BoxFit = class BoxFit extends core._Enum {
    toString() {
      return "BoxFit." + this[_name];
    }
  };
  (basic.BoxFit.new = function(index, name) {
    basic.BoxFit.__proto__.new.call(this, index, name);
    ;
  }).prototype = basic.BoxFit.prototype;
  dart.addTypeTests(basic.BoxFit);
  dart.addTypeCaches(basic.BoxFit);
  dart.setLibraryUri(basic.BoxFit, I[81]);
  dart.setStaticFieldSignature(basic.BoxFit, () => ['values', 'fill', 'contain', 'cover', 'fitWidth', 'fitHeight', 'none', 'scaleDown']);
  dart.defineExtensionMethods(basic.BoxFit, ['toString']);
  dart.defineLazy(basic.BoxFit, {
    /*basic.BoxFit.values*/get values() {
      return C[245] || CT.C245;
    },
    /*basic.BoxFit.fill*/get fill() {
      return C[246] || CT.C246;
    },
    /*basic.BoxFit.contain*/get contain() {
      return C[64] || CT.C64;
    },
    /*basic.BoxFit.cover*/get cover() {
      return C[157] || CT.C157;
    },
    /*basic.BoxFit.fitWidth*/get fitWidth() {
      return C[247] || CT.C247;
    },
    /*basic.BoxFit.fitHeight*/get fitHeight() {
      return C[248] || CT.C248;
    },
    /*basic.BoxFit.none*/get none() {
      return C[249] || CT.C249;
    },
    /*basic.BoxFit.scaleDown*/get scaleDown() {
      return C[250] || CT.C250;
    }
  }, false);
  var maxWidth$ = dart.privateName(basic, "LimitedBox.maxWidth");
  var maxHeight$ = dart.privateName(basic, "LimitedBox.maxHeight");
  var _limitConstraints = dart.privateName(basic, "_limitConstraints");
  basic.LimitedBox = class LimitedBox extends widget$.SingleChildWidget {
    get maxWidth() {
      return this[maxWidth$];
    }
    set maxWidth(value) {
      super.maxWidth = value;
    }
    get maxHeight() {
      return this[maxHeight$];
    }
    set maxHeight(value) {
      super.maxHeight = value;
    }
    static ['_#new#tearOff'](opts) {
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : 1 / 0;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : 1 / 0;
      let child = opts && 'child' in opts ? opts.child : null;
      return new basic.LimitedBox.new({maxWidth: maxWidth, maxHeight: maxHeight, child: child});
    }
    [_limitConstraints](constraints) {
      return new geometry.BoxConstraints.new({minWidth: constraints.minWidth, maxWidth: constraints.hasBoundedWidth ? constraints.maxWidth : constraints.constrainWidth(this.maxWidth), minHeight: constraints.minHeight, maxHeight: constraints.hasBoundedHeight ? constraints.maxHeight : constraints.constrainHeight(this.maxHeight)});
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      let size = null;
      if (this.child != null) {
        dart.nullCheck(this.child).layout(context, this[_limitConstraints](constraints), {parentUsesSize: true});
        if (!(dart.nullCheck(this.child).box != null)) dart.assertFailed(null, I[82], 62, 14, "child!.box != null");
        size = constraints.constrain(dart.nullCheck(dart.nullCheck(this.child).box).size);
      } else {
        size = this[_limitConstraints](constraints).smallest;
      }
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, size);
    }
    paint(context) {
      super.paint(context);
      this.paintChild(context);
    }
  };
  (basic.LimitedBox.new = function(opts) {
    let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : 1 / 0;
    let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : 1 / 0;
    let child = opts && 'child' in opts ? opts.child : null;
    this[maxWidth$] = maxWidth;
    this[maxHeight$] = maxHeight;
    if (!(maxWidth >= 0.0)) dart.assertFailed(null, I[82], 35, 16, "maxWidth >= 0.0");
    if (!(maxHeight >= 0.0)) dart.assertFailed(null, I[82], 36, 16, "maxHeight >= 0.0");
    basic.LimitedBox.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.LimitedBox.prototype;
  dart.addTypeTests(basic.LimitedBox);
  dart.addTypeCaches(basic.LimitedBox);
  dart.setMethodSignature(basic.LimitedBox, () => ({
    __proto__: dart.getMethods(basic.LimitedBox.__proto__),
    [_limitConstraints]: dart.fnType(geometry.BoxConstraints, [geometry.BoxConstraints])
  }));
  dart.setLibraryUri(basic.LimitedBox, I[81]);
  dart.setFieldSignature(basic.LimitedBox, () => ({
    __proto__: dart.getFields(basic.LimitedBox.__proto__),
    maxWidth: dart.finalFieldType(core.double),
    maxHeight: dart.finalFieldType(core.double)
  }));
  var padding$8 = dart.privateName(basic, "Padding.padding");
  basic.Padding = class Padding extends widget$.SingleChildWidget {
    get padding() {
      return this[padding$8];
    }
    set padding(value) {
      super.padding = value;
    }
    static ['_#new#tearOff'](opts) {
      let padding = opts && 'padding' in opts ? opts.padding : null;
      let child = opts && 'child' in opts ? opts.child : null;
      return new basic.Padding.new({padding: padding, child: child});
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (this.child != null) {
        let childConstraints = constraints.deflate(this.padding);
        dart.nullCheck(this.child).layout(context, childConstraints, {parentUsesSize: parentUsesSize});
        if (!(dart.nullCheck(this.child).box != null)) dart.assertFailed(null, I[82], 91, 14, "child!.box != null");
        this.box = constraints.constrainRect({width: dart.nullCheck(dart.nullCheck(this.child).box).width + this.padding.horizontal, height: dart.nullCheck(dart.nullCheck(this.child).box).height + this.padding.vertical});
      } else {
        this.box = constraints.constrainRect({width: this.padding.horizontal, height: this.padding.vertical});
      }
    }
    debugPaint(context) {
      let t104;
      t104 = context.canvas;
      (() => {
        t104.setFillColor(colors.PdfColors.lime);
        t104.moveTo(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
        t104.lineTo(dart.nullCheck(this.box).right, dart.nullCheck(this.box).y);
        t104.lineTo(dart.nullCheck(this.box).right, dart.nullCheck(this.box).top);
        t104.lineTo(dart.nullCheck(this.box).x, dart.nullCheck(this.box).top);
        t104.moveTo(dart.nullCheck(this.box).x + this.padding.left, dart.nullCheck(this.box).y + this.padding.bottom);
        t104.lineTo(dart.nullCheck(this.box).x + this.padding.left, dart.nullCheck(this.box).top - this.padding.top);
        t104.lineTo(dart.nullCheck(this.box).right - this.padding.right, dart.nullCheck(this.box).top - this.padding.top);
        t104.lineTo(dart.nullCheck(this.box).right - this.padding.right, dart.nullCheck(this.box).y + this.padding.bottom);
        t104.fillPath();
        return t104;
      })();
    }
    paint(context) {
      let t104;
      super.paint(context);
      if (this.child != null) {
        let mat = vector_math_64.Matrix4.identity();
        mat.translate(dart.nullCheck(this.box).x + this.padding.left, dart.nullCheck(this.box).y + this.padding.bottom);
        t104 = context.canvas;
        (() => {
          t104.saveContext();
          t104.setTransform(mat);
          return t104;
        })();
        dart.nullCheck(this.child).paint(context);
        context.canvas.restoreContext();
      }
    }
  };
  (basic.Padding.new = function(opts) {
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[padding$8] = padding;
    basic.Padding.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.Padding.prototype;
  dart.addTypeTests(basic.Padding);
  dart.addTypeCaches(basic.Padding);
  dart.setLibraryUri(basic.Padding, I[81]);
  dart.setFieldSignature(basic.Padding, () => ({
    __proto__: dart.getFields(basic.Padding.__proto__),
    padding: dart.finalFieldType(geometry.EdgeInsets)
  }));
  var transform$3 = dart.privateName(basic, "Transform.transform");
  var origin$ = dart.privateName(basic, "Transform.origin");
  var alignment$6 = dart.privateName(basic, "Transform.alignment");
  var adjustLayout$ = dart.privateName(basic, "Transform.adjustLayout");
  var unconstrained$ = dart.privateName(basic, "Transform.unconstrained");
  var _effectiveTransform = dart.privateName(basic, "_effectiveTransform");
  basic.Transform = class Transform extends widget$.SingleChildWidget {
    get transform() {
      return this[transform$3];
    }
    set transform(value) {
      super.transform = value;
    }
    get origin() {
      return this[origin$];
    }
    set origin(value) {
      super.origin = value;
    }
    get alignment() {
      return this[alignment$6];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get adjustLayout() {
      return this[adjustLayout$];
    }
    set adjustLayout(value) {
      super.adjustLayout = value;
    }
    get unconstrained() {
      return this[unconstrained$];
    }
    set unconstrained(value) {
      super.unconstrained = value;
    }
    static ['_#new#tearOff'](opts) {
      let transform = opts && 'transform' in opts ? opts.transform : null;
      let origin = opts && 'origin' in opts ? opts.origin : null;
      let alignment = opts && 'alignment' in opts ? opts.alignment : null;
      let adjustLayout = opts && 'adjustLayout' in opts ? opts.adjustLayout : false;
      let unconstrained = opts && 'unconstrained' in opts ? opts.unconstrained : false;
      let child = opts && 'child' in opts ? opts.child : null;
      return new basic.Transform.new({transform: transform, origin: origin, alignment: alignment, adjustLayout: adjustLayout, unconstrained: unconstrained, child: child});
    }
    static ['_#rotate#tearOff'](opts) {
      let angle = opts && 'angle' in opts ? opts.angle : null;
      let origin = opts && 'origin' in opts ? opts.origin : null;
      let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
      let child = opts && 'child' in opts ? opts.child : null;
      return new basic.Transform.rotate({angle: angle, origin: origin, alignment: alignment, child: child});
    }
    static ['_#rotateBox#tearOff'](opts) {
      let angle = opts && 'angle' in opts ? opts.angle : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let unconstrained = opts && 'unconstrained' in opts ? opts.unconstrained : false;
      return new basic.Transform.rotateBox({angle: angle, child: child, unconstrained: unconstrained});
    }
    static ['_#translate#tearOff'](opts) {
      let offset = opts && 'offset' in opts ? opts.offset : null;
      let child = opts && 'child' in opts ? opts.child : null;
      return new basic.Transform.translate({offset: offset, child: child});
    }
    static ['_#scale#tearOff'](opts) {
      let scale = opts && 'scale' in opts ? opts.scale : null;
      let origin = opts && 'origin' in opts ? opts.origin : null;
      let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
      let child = opts && 'child' in opts ? opts.child : null;
      return new basic.Transform.scale({scale: scale, origin: origin, alignment: alignment, child: child});
    }
    get [_effectiveTransform]() {
      let result = vector_math_64.Matrix4.identity();
      if (this.origin != null) {
        result.translate(dart.nullCheck(this.origin).x, dart.nullCheck(this.origin).y);
      }
      result.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
      let translation = null;
      function translation$35get() {
        let t105;
        t105 = translation;
        return t105 == null ? dart.throw(new _internal.LateError.localNI("translation")) : t105;
      }
      dart.fn(translation$35get, T$.VoidToPdfPoint());
      function translation$35set(translation$35param) {
        return translation = translation$35param;
      }
      dart.fn(translation$35set, T$.PdfPointTodynamic());
      if (this.alignment != null) {
        translation$35set(dart.nullCheck(this.alignment).alongSize(dart.nullCheck(this.box).size));
        result.translate(translation$35get().x, translation$35get().y);
      }
      result.multiply(this.transform);
      if (this.alignment != null) {
        result.translate(-translation$35get().x, -translation$35get().y);
      }
      if (this.origin != null) {
        result.translate(-dart.nullCheck(this.origin).x, -dart.nullCheck(this.origin).y);
      }
      return result;
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (!this.adjustLayout) {
        return super.layout(context, constraints, {parentUsesSize: parentUsesSize});
      }
      if (this.child != null) {
        dart.nullCheck(this.child).layout(context, this.unconstrained ? C[14] || CT.C14 : constraints, {parentUsesSize: parentUsesSize});
        if (!(dart.nullCheck(this.child).box != null)) dart.assertFailed(null, I[82], 235, 14, "child!.box != null");
        let mat = this.transform;
        let values = mat.applyToVector3Array(T$.JSArrayOfdouble().of([dart.nullCheck(dart.nullCheck(this.child).box).left, dart.nullCheck(dart.nullCheck(this.child).box).top, 0.0, dart.nullCheck(dart.nullCheck(this.child).box).right, dart.nullCheck(dart.nullCheck(this.child).box).top, 0.0, dart.nullCheck(dart.nullCheck(this.child).box).right, dart.nullCheck(dart.nullCheck(this.child).box).bottom, 0.0, dart.nullCheck(dart.nullCheck(this.child).box).left, dart.nullCheck(dart.nullCheck(this.child).box).bottom, 0.0]));
        let dx = -math.min(core.double, math.min(core.double, math.min(core.double, values[$_get](0), values[$_get](3)), values[$_get](6)), values[$_get](9));
        let dy = -math.min(core.double, math.min(core.double, math.min(core.double, values[$_get](1), values[$_get](4)), values[$_get](7)), values[$_get](10));
        this.box = rect$.PdfRect.fromLTRB(0.0, 0.0, math.max(core.double, math.max(core.double, math.max(core.double, values[$_get](0), values[$_get](3)), values[$_get](6)), values[$_get](9)) + dx, math.max(core.double, math.max(core.double, math.max(core.double, values[$_get](1), values[$_get](4)), values[$_get](7)), values[$_get](10)) + dy);
        this.transform.leftTranslate(dx, dy);
      } else {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.smallest);
      }
    }
    paint(context) {
      let t107;
      super.paint(context);
      if (this.child != null) {
        let mat = this[_effectiveTransform];
        t107 = context.canvas;
        (() => {
          t107.saveContext();
          t107.setTransform(mat);
          return t107;
        })();
        dart.nullCheck(this.child).paint(context);
        context.canvas.restoreContext();
      }
    }
  };
  (basic.Transform.new = function(opts) {
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let origin = opts && 'origin' in opts ? opts.origin : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : null;
    let adjustLayout = opts && 'adjustLayout' in opts ? opts.adjustLayout : false;
    let unconstrained = opts && 'unconstrained' in opts ? opts.unconstrained : false;
    let child = opts && 'child' in opts ? opts.child : null;
    this[transform$3] = transform;
    this[origin$] = origin;
    this[alignment$6] = alignment;
    this[adjustLayout$] = adjustLayout;
    this[unconstrained$] = unconstrained;
    basic.Transform.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.Transform.prototype;
  (basic.Transform.rotate = function(opts) {
    let angle = opts && 'angle' in opts ? opts.angle : null;
    let origin = opts && 'origin' in opts ? opts.origin : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
    let child = opts && 'child' in opts ? opts.child : null;
    this[origin$] = origin;
    this[alignment$6] = alignment;
    this[transform$3] = vector_math_64.Matrix4.rotationZ(angle);
    this[adjustLayout$] = false;
    this[unconstrained$] = false;
    basic.Transform.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.Transform.prototype;
  (basic.Transform.rotateBox = function(opts) {
    let angle = opts && 'angle' in opts ? opts.angle : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let unconstrained = opts && 'unconstrained' in opts ? opts.unconstrained : false;
    this[unconstrained$] = unconstrained;
    this[transform$3] = vector_math_64.Matrix4.rotationZ(angle);
    this[adjustLayout$] = true;
    this[alignment$6] = null;
    this[origin$] = null;
    basic.Transform.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.Transform.prototype;
  (basic.Transform.translate = function(opts) {
    let offset = opts && 'offset' in opts ? opts.offset : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[transform$3] = vector_math_64.Matrix4.translationValues(offset.x, offset.y, 0.0);
    this[origin$] = null;
    this[alignment$6] = null;
    this[adjustLayout$] = false;
    this[unconstrained$] = false;
    basic.Transform.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.Transform.prototype;
  (basic.Transform.scale = function(opts) {
    let scale = opts && 'scale' in opts ? opts.scale : null;
    let origin = opts && 'origin' in opts ? opts.origin : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
    let child = opts && 'child' in opts ? opts.child : null;
    this[origin$] = origin;
    this[alignment$6] = alignment;
    this[transform$3] = vector_math_64.Matrix4.diagonal3Values(scale, scale, 1.0);
    this[adjustLayout$] = false;
    this[unconstrained$] = false;
    basic.Transform.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.Transform.prototype;
  dart.addTypeTests(basic.Transform);
  dart.addTypeCaches(basic.Transform);
  dart.setGetterSignature(basic.Transform, () => ({
    __proto__: dart.getGetters(basic.Transform.__proto__),
    [_effectiveTransform]: vector_math_64.Matrix4
  }));
  dart.setLibraryUri(basic.Transform, I[81]);
  dart.setFieldSignature(basic.Transform, () => ({
    __proto__: dart.getFields(basic.Transform.__proto__),
    transform: dart.finalFieldType(vector_math_64.Matrix4),
    origin: dart.finalFieldType(dart.nullable(point$.PdfPoint)),
    alignment: dart.finalFieldType(dart.nullable(geometry.Alignment)),
    adjustLayout: dart.finalFieldType(core.bool),
    unconstrained: dart.finalFieldType(core.bool)
  }));
  var alignment$7 = dart.privateName(basic, "Align.alignment");
  var widthFactor$ = dart.privateName(basic, "Align.widthFactor");
  var heightFactor$ = dart.privateName(basic, "Align.heightFactor");
  basic.Align = class Align extends widget$.SingleChildWidget {
    get alignment() {
      return this[alignment$7];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get widthFactor() {
      return this[widthFactor$];
    }
    set widthFactor(value) {
      super.widthFactor = value;
    }
    get heightFactor() {
      return this[heightFactor$];
    }
    set heightFactor(value) {
      super.heightFactor = value;
    }
    static ['_#new#tearOff'](opts) {
      let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
      let widthFactor = opts && 'widthFactor' in opts ? opts.widthFactor : null;
      let heightFactor = opts && 'heightFactor' in opts ? opts.heightFactor : null;
      let child = opts && 'child' in opts ? opts.child : null;
      return new basic.Align.new({alignment: alignment, widthFactor: widthFactor, heightFactor: heightFactor, child: child});
    }
    layout(context, constraints, opts) {
      let t107, t107$;
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      let shrinkWrapWidth = this.widthFactor != null || constraints.maxWidth === 1 / 0;
      let shrinkWrapHeight = this.heightFactor != null || constraints.maxHeight === 1 / 0;
      if (this.child != null) {
        dart.nullCheck(this.child).layout(context, constraints.loosen(), {parentUsesSize: true});
        if (!(dart.nullCheck(this.child).box != null)) dart.assertFailed(null, I[82], 321, 14, "child!.box != null");
        this.box = constraints.constrainRect({width: shrinkWrapWidth ? dart.nullCheck(dart.nullCheck(this.child).box).width * dart.notNull((t107 = this.widthFactor, t107 == null ? 1.0 : t107)) : 1 / 0, height: shrinkWrapHeight ? dart.nullCheck(dart.nullCheck(this.child).box).height * dart.notNull((t107$ = this.heightFactor, t107$ == null ? 1.0 : t107$)) : 1 / 0});
        dart.nullCheck(this.child).box = this.alignment.inscribe(dart.nullCheck(dart.nullCheck(this.child).box).size, dart.nullCheck(this.box));
      } else {
        this.box = constraints.constrainRect({width: shrinkWrapWidth ? 0.0 : 1 / 0, height: shrinkWrapHeight ? 0.0 : 1 / 0});
      }
    }
    debugPaint(context) {
      let t107, t107$, t107$0, t107$1, t107$2;
      t107 = context.canvas;
      (() => {
        t107.setStrokeColor(colors.PdfColors.green);
        t107.setLineWidth(1.0);
        t107.drawBox(dart.nullCheck(this.box));
        return t107;
      })();
      if (this.child == null) {
        context.canvas.strokePath();
        return;
      }
      if (dart.nullCheck(dart.nullCheck(this.child).box).bottom > 0) {
        let headSize = math.min(core.num, dart.nullCheck(dart.nullCheck(this.child).box).bottom * 0.2, 10);
        t107$ = context.canvas;
        (() => {
          t107$.moveTo(dart.nullCheck(this.box).left + dart.nullCheck(dart.nullCheck(this.child).box).horizontalCenter, dart.nullCheck(this.box).bottom);
          t107$.lineTo(dart.nullCheck(this.box).left + dart.nullCheck(dart.nullCheck(this.child).box).horizontalCenter, dart.nullCheck(this.box).bottom + dart.nullCheck(dart.nullCheck(this.child).box).bottom);
          t107$.lineTo(dart.nullCheck(this.box).left + dart.nullCheck(dart.nullCheck(this.child).box).horizontalCenter - headSize, dart.nullCheck(this.box).bottom + dart.nullCheck(dart.nullCheck(this.child).box).bottom - headSize);
          t107$.moveTo(dart.nullCheck(this.box).left + dart.nullCheck(dart.nullCheck(this.child).box).horizontalCenter, dart.nullCheck(this.box).bottom + dart.nullCheck(dart.nullCheck(this.child).box).bottom);
          t107$.lineTo(dart.nullCheck(this.box).left + dart.nullCheck(dart.nullCheck(this.child).box).horizontalCenter + headSize, dart.nullCheck(this.box).bottom + dart.nullCheck(dart.nullCheck(this.child).box).bottom - headSize);
          return t107$;
        })();
      }
      if (dart.nullCheck(this.box).bottom + dart.nullCheck(dart.nullCheck(this.child).box).top < dart.nullCheck(this.box).top) {
        let headSize = math.min(core.num, (dart.nullCheck(this.box).top - dart.nullCheck(dart.nullCheck(this.child).box).top - dart.nullCheck(this.box).bottom) * 0.2, 10);
        t107$0 = context.canvas;
        (() => {
          t107$0.moveTo(dart.nullCheck(this.box).left + dart.nullCheck(dart.nullCheck(this.child).box).horizontalCenter, dart.nullCheck(this.box).top);
          t107$0.lineTo(dart.nullCheck(this.box).left + dart.nullCheck(dart.nullCheck(this.child).box).horizontalCenter, dart.nullCheck(this.box).bottom + dart.nullCheck(dart.nullCheck(this.child).box).top);
          t107$0.lineTo(dart.nullCheck(this.box).left + dart.nullCheck(dart.nullCheck(this.child).box).horizontalCenter - headSize, dart.nullCheck(this.box).bottom + dart.nullCheck(dart.nullCheck(this.child).box).top + headSize);
          t107$0.moveTo(dart.nullCheck(this.box).left + dart.nullCheck(dart.nullCheck(this.child).box).horizontalCenter, dart.nullCheck(this.box).bottom + dart.nullCheck(dart.nullCheck(this.child).box).top);
          t107$0.lineTo(dart.nullCheck(this.box).left + dart.nullCheck(dart.nullCheck(this.child).box).horizontalCenter + headSize, dart.nullCheck(this.box).bottom + dart.nullCheck(dart.nullCheck(this.child).box).top + headSize);
          return t107$0;
        })();
      }
      if (dart.nullCheck(dart.nullCheck(this.child).box).left > 0) {
        let headSize = math.min(core.num, dart.nullCheck(dart.nullCheck(this.child).box).left * 0.2, 10);
        t107$1 = context.canvas;
        (() => {
          t107$1.moveTo(dart.nullCheck(this.box).left, dart.nullCheck(this.box).bottom + dart.nullCheck(dart.nullCheck(this.child).box).verticalCenter);
          t107$1.lineTo(dart.nullCheck(this.box).left + dart.nullCheck(dart.nullCheck(this.child).box).left, dart.nullCheck(this.box).bottom + dart.nullCheck(dart.nullCheck(this.child).box).verticalCenter);
          t107$1.lineTo(dart.nullCheck(this.box).left + dart.nullCheck(dart.nullCheck(this.child).box).left - headSize, dart.nullCheck(this.box).bottom + dart.nullCheck(dart.nullCheck(this.child).box).verticalCenter - headSize);
          t107$1.moveTo(dart.nullCheck(this.box).left + dart.nullCheck(dart.nullCheck(this.child).box).left, dart.nullCheck(this.box).bottom + dart.nullCheck(dart.nullCheck(this.child).box).verticalCenter);
          t107$1.lineTo(dart.nullCheck(this.box).left + dart.nullCheck(dart.nullCheck(this.child).box).left - headSize, dart.nullCheck(this.box).bottom + dart.nullCheck(dart.nullCheck(this.child).box).verticalCenter + headSize);
          return t107$1;
        })();
      }
      if (dart.nullCheck(this.box).left + dart.nullCheck(dart.nullCheck(this.child).box).right < dart.nullCheck(this.box).right) {
        let headSize = math.min(core.num, (dart.nullCheck(this.box).right - dart.nullCheck(dart.nullCheck(this.child).box).right - dart.nullCheck(this.box).left) * 0.2, 10);
        t107$2 = context.canvas;
        (() => {
          t107$2.moveTo(dart.nullCheck(this.box).right, dart.nullCheck(this.box).bottom + dart.nullCheck(dart.nullCheck(this.child).box).verticalCenter);
          t107$2.lineTo(dart.nullCheck(this.box).left + dart.nullCheck(dart.nullCheck(this.child).box).right, dart.nullCheck(this.box).bottom + dart.nullCheck(dart.nullCheck(this.child).box).verticalCenter);
          t107$2.lineTo(dart.nullCheck(this.box).left + dart.nullCheck(dart.nullCheck(this.child).box).right + headSize, dart.nullCheck(this.box).bottom + dart.nullCheck(dart.nullCheck(this.child).box).verticalCenter - headSize);
          t107$2.moveTo(dart.nullCheck(this.box).left + dart.nullCheck(dart.nullCheck(this.child).box).right, dart.nullCheck(this.box).bottom + dart.nullCheck(dart.nullCheck(this.child).box).verticalCenter);
          t107$2.lineTo(dart.nullCheck(this.box).left + dart.nullCheck(dart.nullCheck(this.child).box).right + headSize, dart.nullCheck(this.box).bottom + dart.nullCheck(dart.nullCheck(this.child).box).verticalCenter + headSize);
          return t107$2;
        })();
      }
      context.canvas.strokePath();
    }
    paint(context) {
      super.paint(context);
      this.paintChild(context);
    }
  };
  (basic.Align.new = function(opts) {
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
    let widthFactor = opts && 'widthFactor' in opts ? opts.widthFactor : null;
    let heightFactor = opts && 'heightFactor' in opts ? opts.heightFactor : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[alignment$7] = alignment;
    this[widthFactor$] = widthFactor;
    this[heightFactor$] = heightFactor;
    if (!(widthFactor == null || dart.notNull(widthFactor) >= 0.0)) dart.assertFailed(null, I[82], 298, 16, "widthFactor == null || widthFactor >= 0.0");
    if (!(heightFactor == null || dart.notNull(heightFactor) >= 0.0)) dart.assertFailed(null, I[82], 299, 16, "heightFactor == null || heightFactor >= 0.0");
    basic.Align.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.Align.prototype;
  dart.addTypeTests(basic.Align);
  dart.addTypeCaches(basic.Align);
  dart.setLibraryUri(basic.Align, I[81]);
  dart.setFieldSignature(basic.Align, () => ({
    __proto__: dart.getFields(basic.Align.__proto__),
    alignment: dart.finalFieldType(geometry.Alignment),
    widthFactor: dart.finalFieldType(dart.nullable(core.double)),
    heightFactor: dart.finalFieldType(dart.nullable(core.double))
  }));
  var constraints$1 = dart.privateName(basic, "ConstrainedBox.constraints");
  basic.ConstrainedBox = class ConstrainedBox extends widget$.SingleChildWidget {
    get constraints() {
      return this[constraints$1];
    }
    set constraints(value) {
      super.constraints = value;
    }
    static ['_#new#tearOff'](opts) {
      let constraints = opts && 'constraints' in opts ? opts.constraints : null;
      let child = opts && 'child' in opts ? opts.child : null;
      return new basic.ConstrainedBox.new({constraints: constraints, child: child});
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (this.child != null) {
        dart.nullCheck(this.child).layout(context, this.constraints.enforce(constraints), {parentUsesSize: true});
        if (!(dart.nullCheck(this.child).box != null)) dart.assertFailed(null, I[82], 436, 14, "child!.box != null");
        this.box = dart.nullCheck(this.child).box;
      } else {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, this.constraints.enforce(constraints).smallest);
      }
    }
    paint(context) {
      super.paint(context);
      this.paintChild(context);
    }
  };
  (basic.ConstrainedBox.new = function(opts) {
    let constraints = opts && 'constraints' in opts ? opts.constraints : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[constraints$1] = constraints;
    basic.ConstrainedBox.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.ConstrainedBox.prototype;
  dart.addTypeTests(basic.ConstrainedBox);
  dart.addTypeCaches(basic.ConstrainedBox);
  dart.setLibraryUri(basic.ConstrainedBox, I[81]);
  dart.setFieldSignature(basic.ConstrainedBox, () => ({
    __proto__: dart.getFields(basic.ConstrainedBox.__proto__),
    constraints: dart.finalFieldType(geometry.BoxConstraints)
  }));
  basic.Center = class Center extends basic.Align {
    static ['_#new#tearOff'](opts) {
      let widthFactor = opts && 'widthFactor' in opts ? opts.widthFactor : null;
      let heightFactor = opts && 'heightFactor' in opts ? opts.heightFactor : null;
      let child = opts && 'child' in opts ? opts.child : null;
      return new basic.Center.new({widthFactor: widthFactor, heightFactor: heightFactor, child: child});
    }
  };
  (basic.Center.new = function(opts) {
    let widthFactor = opts && 'widthFactor' in opts ? opts.widthFactor : null;
    let heightFactor = opts && 'heightFactor' in opts ? opts.heightFactor : null;
    let child = opts && 'child' in opts ? opts.child : null;
    basic.Center.__proto__.new.call(this, {widthFactor: widthFactor, heightFactor: heightFactor, child: child});
    ;
  }).prototype = basic.Center.prototype;
  dart.addTypeTests(basic.Center);
  dart.addTypeCaches(basic.Center);
  dart.setLibraryUri(basic.Center, I[81]);
  var fit$9 = dart.privateName(basic, "FittedBox.fit");
  var alignment$8 = dart.privateName(basic, "FittedBox.alignment");
  basic.FittedBox = class FittedBox extends widget$.SingleChildWidget {
    get fit() {
      return this[fit$9];
    }
    set fit(value) {
      super.fit = value;
    }
    get alignment() {
      return this[alignment$8];
    }
    set alignment(value) {
      super.alignment = value;
    }
    static ['_#new#tearOff'](opts) {
      let fit = opts && 'fit' in opts ? opts.fit : C[64] || CT.C64;
      let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
      let child = opts && 'child' in opts ? opts.child : null;
      return new basic.FittedBox.new({fit: fit, alignment: alignment, child: child});
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      let size = null;
      if (this.child != null) {
        dart.nullCheck(this.child).layout(context, C[14] || CT.C14, {parentUsesSize: true});
        if (!(dart.nullCheck(this.child).box != null)) dart.assertFailed(null, I[82], 477, 14, "child!.box != null");
        size = constraints.constrainSizeAndAttemptToPreserveAspectRatio(dart.nullCheck(dart.nullCheck(this.child).box).size);
      } else {
        size = constraints.smallest;
      }
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, size);
    }
    paint(context) {
      let t107, t107$;
      super.paint(context);
      if (this.child != null) {
        let childSize = dart.nullCheck(dart.nullCheck(this.child).box).size;
        let sizes = geometry.applyBoxFit(this.fit, childSize, dart.nullCheck(this.box).size);
        let scaleX = dart.nullCheck(sizes.destination).x / dart.nullCheck(sizes.source).x;
        let scaleY = dart.nullCheck(sizes.destination).y / dart.nullCheck(sizes.source).y;
        let sourceRect = this.alignment.inscribe(dart.nullCheck(sizes.source), rect$.PdfRect.fromPoints(point$.PdfPoint.zero, childSize));
        let destinationRect = this.alignment.inscribe(dart.nullCheck(sizes.destination), dart.nullCheck(this.box));
        let mat = (t107 = vector_math_64.Matrix4.translationValues(destinationRect.x, destinationRect.y, 0.0), (() => {
          t107.scale(scaleX, scaleY, 1.0);
          t107.translate(-sourceRect.x, -sourceRect.y);
          return t107;
        })());
        t107$ = context.canvas;
        (() => {
          t107$.saveContext();
          t107$.drawBox(dart.nullCheck(this.box));
          t107$.clipPath();
          t107$.setTransform(mat);
          return t107$;
        })();
        dart.nullCheck(this.child).paint(context);
        context.canvas.restoreContext();
      }
    }
  };
  (basic.FittedBox.new = function(opts) {
    let fit = opts && 'fit' in opts ? opts.fit : C[64] || CT.C64;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
    let child = opts && 'child' in opts ? opts.child : null;
    this[fit$9] = fit;
    this[alignment$8] = alignment;
    basic.FittedBox.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.FittedBox.prototype;
  dart.addTypeTests(basic.FittedBox);
  dart.addTypeCaches(basic.FittedBox);
  dart.setLibraryUri(basic.FittedBox, I[81]);
  dart.setFieldSignature(basic.FittedBox, () => ({
    __proto__: dart.getFields(basic.FittedBox.__proto__),
    fit: dart.finalFieldType(basic.BoxFit),
    alignment: dart.finalFieldType(geometry.Alignment)
  }));
  var aspectRatio$ = dart.privateName(basic, "AspectRatio.aspectRatio");
  var _applyAspectRatio = dart.privateName(basic, "_applyAspectRatio");
  basic.AspectRatio = class AspectRatio extends widget$.SingleChildWidget {
    get aspectRatio() {
      return this[aspectRatio$];
    }
    set aspectRatio(value) {
      super.aspectRatio = value;
    }
    static ['_#new#tearOff'](opts) {
      let aspectRatio = opts && 'aspectRatio' in opts ? opts.aspectRatio : null;
      let child = opts && 'child' in opts ? opts.child : null;
      return new basic.AspectRatio.new({aspectRatio: aspectRatio, child: child});
    }
    [_applyAspectRatio](constraints) {
      if (constraints.isTight) {
        return constraints.smallest;
      }
      let width = constraints.maxWidth;
      let height = null;
      if (width[$isFinite]) {
        height = width / this.aspectRatio;
      } else {
        height = constraints.maxHeight;
        width = dart.notNull(height) * this.aspectRatio;
      }
      if (width > constraints.maxWidth) {
        width = constraints.maxWidth;
        height = width / this.aspectRatio;
      }
      if (dart.notNull(height) > constraints.maxHeight) {
        height = constraints.maxHeight;
        width = dart.notNull(height) * this.aspectRatio;
      }
      if (width < constraints.minWidth) {
        width = constraints.minWidth;
        height = width / this.aspectRatio;
      }
      if (dart.notNull(height) < constraints.minHeight) {
        height = constraints.minHeight;
        width = dart.notNull(height) * this.aspectRatio;
      }
      return constraints.constrain(new point$.PdfPoint.new(width, height));
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, this[_applyAspectRatio](constraints));
      if (this.child != null) {
        dart.nullCheck(this.child).layout(context, new geometry.BoxConstraints.tightFor({width: dart.nullCheck(this.box).width, height: dart.nullCheck(this.box).height}));
      }
      if (!(dart.nullCheck(this.child).box != null)) dart.assertFailed(null, I[82], 567, 12, "child!.box != null");
    }
    paint(context) {
      super.paint(context);
      this.paintChild(context);
    }
  };
  (basic.AspectRatio.new = function(opts) {
    let aspectRatio = opts && 'aspectRatio' in opts ? opts.aspectRatio : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[aspectRatio$] = aspectRatio;
    basic.AspectRatio.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.AspectRatio.prototype;
  dart.addTypeTests(basic.AspectRatio);
  dart.addTypeCaches(basic.AspectRatio);
  dart.setMethodSignature(basic.AspectRatio, () => ({
    __proto__: dart.getMethods(basic.AspectRatio.__proto__),
    [_applyAspectRatio]: dart.fnType(point$.PdfPoint, [geometry.BoxConstraints])
  }));
  dart.setLibraryUri(basic.AspectRatio, I[81]);
  dart.setFieldSignature(basic.AspectRatio, () => ({
    __proto__: dart.getFields(basic.AspectRatio.__proto__),
    aspectRatio: dart.finalFieldType(core.double)
  }));
  var painter$3 = dart.privateName(basic, "CustomPaint.painter");
  var foregroundPainter$ = dart.privateName(basic, "CustomPaint.foregroundPainter");
  var size$1 = dart.privateName(basic, "CustomPaint.size");
  basic.CustomPaint = class CustomPaint extends widget$.SingleChildWidget {
    get painter() {
      return this[painter$3];
    }
    set painter(value) {
      super.painter = value;
    }
    get foregroundPainter() {
      return this[foregroundPainter$];
    }
    set foregroundPainter(value) {
      super.foregroundPainter = value;
    }
    get size() {
      return this[size$1];
    }
    set size(value) {
      super.size = value;
    }
    static ['_#new#tearOff'](opts) {
      let painter = opts && 'painter' in opts ? opts.painter : null;
      let foregroundPainter = opts && 'foregroundPainter' in opts ? opts.foregroundPainter : null;
      let size = opts && 'size' in opts ? opts.size : C[71] || CT.C71;
      let child = opts && 'child' in opts ? opts.child : null;
      return new basic.CustomPaint.new({painter: painter, foregroundPainter: foregroundPainter, size: size, child: child});
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (this.child != null) {
        dart.nullCheck(this.child).layout(context, constraints, {parentUsesSize: parentUsesSize});
        if (!(dart.nullCheck(this.child).box != null)) dart.assertFailed(null, I[82], 596, 14, "child!.box != null");
        this.box = dart.nullCheck(this.child).box;
      } else {
        this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.constrain(this.size));
      }
    }
    paint(context) {
      let t107;
      super.paint(context);
      let mat = vector_math_64.Matrix4.identity();
      mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
      t107 = context.canvas;
      (() => {
        t107.saveContext();
        t107.setTransform(mat);
        return t107;
      })();
      if (this.painter != null) {
        dart.nullCheck(this.painter)(context.canvas, dart.nullCheck(this.box).size);
      }
      if (this.child != null) {
        dart.nullCheck(this.child).paint(context);
      }
      if (this.foregroundPainter != null) {
        dart.nullCheck(this.foregroundPainter)(context.canvas, dart.nullCheck(this.box).size);
      }
      context.canvas.restoreContext();
    }
  };
  (basic.CustomPaint.new = function(opts) {
    let painter = opts && 'painter' in opts ? opts.painter : null;
    let foregroundPainter = opts && 'foregroundPainter' in opts ? opts.foregroundPainter : null;
    let size = opts && 'size' in opts ? opts.size : C[71] || CT.C71;
    let child = opts && 'child' in opts ? opts.child : null;
    this[painter$3] = painter;
    this[foregroundPainter$] = foregroundPainter;
    this[size$1] = size;
    basic.CustomPaint.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.CustomPaint.prototype;
  dart.addTypeTests(basic.CustomPaint);
  dart.addTypeCaches(basic.CustomPaint);
  dart.setLibraryUri(basic.CustomPaint, I[81]);
  dart.setFieldSignature(basic.CustomPaint, () => ({
    __proto__: dart.getFields(basic.CustomPaint.__proto__),
    painter: dart.finalFieldType(dart.nullable(dart.fnType(dart.dynamic, [graphics.PdfGraphics, point$.PdfPoint]))),
    foregroundPainter: dart.finalFieldType(dart.nullable(dart.fnType(dart.dynamic, [graphics.PdfGraphics, point$.PdfPoint]))),
    size: dart.finalFieldType(point$.PdfPoint)
  }));
  var width$12 = dart.privateName(basic, "SizedBox.width");
  var height$8 = dart.privateName(basic, "SizedBox.height");
  var child$10 = dart.privateName(basic, "SizedBox.child");
  basic.SizedBox = class SizedBox extends widget$.StatelessWidget {
    get width() {
      return this[width$12];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$8];
    }
    set height(value) {
      super.height = value;
    }
    get child() {
      return this[child$10];
    }
    set child(value) {
      super.child = value;
    }
    static ['_#new#tearOff'](opts) {
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let child = opts && 'child' in opts ? opts.child : null;
      return new basic.SizedBox.new({width: width, height: height, child: child});
    }
    static ['_#expand#tearOff'](opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      return new basic.SizedBox.expand({child: child});
    }
    static ['_#shrink#tearOff'](opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      return new basic.SizedBox.shrink({child: child});
    }
    static ['_#fromSize#tearOff'](opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let size = opts && 'size' in opts ? opts.size : null;
      return new basic.SizedBox.fromSize({child: child, size: size});
    }
    static ['_#square#tearOff'](opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let dimension = opts && 'dimension' in opts ? opts.dimension : null;
      return new basic.SizedBox.square({child: child, dimension: dimension});
    }
    build(context) {
      return new basic.ConstrainedBox.new({child: this.child, constraints: new geometry.BoxConstraints.tightFor({width: this.width, height: this.height})});
    }
  };
  (basic.SizedBox.new = function(opts) {
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[width$12] = width;
    this[height$8] = height;
    this[child$10] = child;
    basic.SizedBox.__proto__.new.call(this);
    ;
  }).prototype = basic.SizedBox.prototype;
  (basic.SizedBox.expand = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    this[child$10] = child;
    this[width$12] = 1 / 0;
    this[height$8] = 1 / 0;
    basic.SizedBox.__proto__.new.call(this);
    ;
  }).prototype = basic.SizedBox.prototype;
  (basic.SizedBox.shrink = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    this[child$10] = child;
    this[width$12] = 0.0;
    this[height$8] = 0.0;
    basic.SizedBox.__proto__.new.call(this);
    ;
  }).prototype = basic.SizedBox.prototype;
  (basic.SizedBox.fromSize = function(opts) {
    let t107, t107$;
    let child = opts && 'child' in opts ? opts.child : null;
    let size = opts && 'size' in opts ? opts.size : null;
    this[child$10] = child;
    this[width$12] = (t107 = size, t107 == null ? null : t107.x);
    this[height$8] = (t107$ = size, t107$ == null ? null : t107$.y);
    basic.SizedBox.__proto__.new.call(this);
    ;
  }).prototype = basic.SizedBox.prototype;
  (basic.SizedBox.square = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let dimension = opts && 'dimension' in opts ? opts.dimension : null;
    this[child$10] = child;
    this[width$12] = dimension;
    this[height$8] = dimension;
    basic.SizedBox.__proto__.new.call(this);
    ;
  }).prototype = basic.SizedBox.prototype;
  dart.addTypeTests(basic.SizedBox);
  dart.addTypeCaches(basic.SizedBox);
  dart.setMethodSignature(basic.SizedBox, () => ({
    __proto__: dart.getMethods(basic.SizedBox.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(basic.SizedBox, I[81]);
  dart.setFieldSignature(basic.SizedBox, () => ({
    __proto__: dart.getFields(basic.SizedBox.__proto__),
    width: dart.finalFieldType(dart.nullable(core.double)),
    height: dart.finalFieldType(dart.nullable(core.double)),
    child: dart.finalFieldType(dart.nullable(widget$.Widget))
  }));
  var builder$ = dart.privateName(basic, "Builder.builder");
  basic.Builder = class Builder extends widget$.StatelessWidget {
    get builder() {
      return this[builder$];
    }
    set builder(value) {
      super.builder = value;
    }
    static ['_#new#tearOff'](opts) {
      let builder = opts && 'builder' in opts ? opts.builder : null;
      return new basic.Builder.new({builder: builder});
    }
    build(context) {
      let t107;
      t107 = context;
      return this.builder(t107);
    }
  };
  (basic.Builder.new = function(opts) {
    let builder = opts && 'builder' in opts ? opts.builder : null;
    this[builder$] = builder;
    basic.Builder.__proto__.new.call(this);
    ;
  }).prototype = basic.Builder.prototype;
  dart.addTypeTests(basic.Builder);
  dart.addTypeCaches(basic.Builder);
  dart.setMethodSignature(basic.Builder, () => ({
    __proto__: dart.getMethods(basic.Builder.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(basic.Builder, I[81]);
  dart.setFieldSignature(basic.Builder, () => ({
    __proto__: dart.getFields(basic.Builder.__proto__),
    builder: dart.finalFieldType(dart.fnType(widget$.Widget, [widget$.Context]))
  }));
  var builder$0 = dart.privateName(basic, "LayoutBuilder.builder");
  var _constraints = dart.privateName(basic, "_constraints");
  basic.LayoutBuilder = class LayoutBuilder extends widget$.StatelessWidget {
    get builder() {
      return this[builder$0];
    }
    set builder(value) {
      super.builder = value;
    }
    static ['_#new#tearOff'](opts) {
      let builder = opts && 'builder' in opts ? opts.builder : null;
      return new basic.LayoutBuilder.new({builder: builder});
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this[_constraints] = constraints;
      super.layout(context, constraints);
    }
    build(context) {
      let t108, t107;
      t107 = context;
      t108 = this[_constraints];
      return this.builder(t107, t108);
    }
  };
  (basic.LayoutBuilder.new = function(opts) {
    let builder = opts && 'builder' in opts ? opts.builder : null;
    this[_constraints] = null;
    this[builder$0] = builder;
    basic.LayoutBuilder.__proto__.new.call(this);
    ;
  }).prototype = basic.LayoutBuilder.prototype;
  dart.addTypeTests(basic.LayoutBuilder);
  dart.addTypeCaches(basic.LayoutBuilder);
  dart.setMethodSignature(basic.LayoutBuilder, () => ({
    __proto__: dart.getMethods(basic.LayoutBuilder.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(basic.LayoutBuilder, I[81]);
  dart.setFieldSignature(basic.LayoutBuilder, () => ({
    __proto__: dart.getFields(basic.LayoutBuilder.__proto__),
    builder: dart.finalFieldType(dart.fnType(widget$.Widget, [widget$.Context, dart.nullable(geometry.BoxConstraints)])),
    [_constraints]: dart.fieldType(dart.nullable(geometry.BoxConstraints))
  }));
  var ignoreMargins$ = dart.privateName(basic, "FullPage.ignoreMargins");
  var _getConstraints = dart.privateName(basic, "_getConstraints");
  var _getBox$ = dart.privateName(basic, "_getBox");
  basic.FullPage = class FullPage extends widget$.SingleChildWidget {
    get ignoreMargins() {
      return this[ignoreMargins$];
    }
    set ignoreMargins(value) {
      super.ignoreMargins = value;
    }
    static ['_#new#tearOff'](opts) {
      let ignoreMargins = opts && 'ignoreMargins' in opts ? opts.ignoreMargins : null;
      let child = opts && 'child' in opts ? opts.child : null;
      return new basic.FullPage.new({ignoreMargins: ignoreMargins, child: child});
    }
    [_getConstraints](context) {
      if (!(context.page.pageFormat.width !== 1 / 0)) dart.assertFailed(null, I[82], 720, 12, "context.page.pageFormat.width != double.infinity");
      if (!(context.page.pageFormat.height !== 1 / 0)) dart.assertFailed(null, I[82], 721, 12, "context.page.pageFormat.height != double.infinity");
      return this.ignoreMargins ? new geometry.BoxConstraints.tightFor({width: context.page.pageFormat.width, height: context.page.pageFormat.height}) : new geometry.BoxConstraints.tightFor({width: context.page.pageFormat.availableWidth, height: context.page.pageFormat.availableHeight});
    }
    [_getBox$](context) {
      let box = this[_getConstraints](context).constrainRect();
      if (this.ignoreMargins) {
        return box;
      }
      return rect$.PdfRect.fromPoints(new point$.PdfPoint.new(context.page.pageFormat.marginLeft, context.page.pageFormat.marginTop), box.size);
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      {
        let constraints = this[_getConstraints](context);
        if (this.child != null) {
          dart.nullCheck(this.child).layout(context, constraints, {parentUsesSize: false});
          if (!(dart.nullCheck(this.child).box != null)) dart.assertFailed(null, I[82], 755, 14, "child!.box != null");
        }
        this.box = this[_getBox$](context);
      }
    }
    debugPaint(context) {
    }
    paint(context) {
      let t107;
      super.paint(context);
      if (this.child == null) {
        return;
      }
      let box = this[_getBox$](context);
      let mat = dart.nullCheck(vector_math_64.Matrix4.tryInvert(context.canvas.getTransform()));
      mat.translate(box.x, box.y);
      t107 = context.canvas;
      (() => {
        t107.saveContext();
        t107.setTransform(mat);
        return t107;
      })();
      dart.nullCheck(this.child).paint(context);
      context.canvas.restoreContext();
    }
  };
  (basic.FullPage.new = function(opts) {
    let ignoreMargins = opts && 'ignoreMargins' in opts ? opts.ignoreMargins : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[ignoreMargins$] = ignoreMargins;
    basic.FullPage.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.FullPage.prototype;
  dart.addTypeTests(basic.FullPage);
  dart.addTypeCaches(basic.FullPage);
  dart.setMethodSignature(basic.FullPage, () => ({
    __proto__: dart.getMethods(basic.FullPage.__proto__),
    [_getConstraints]: dart.fnType(geometry.BoxConstraints, [widget$.Context]),
    [_getBox$]: dart.fnType(rect$.PdfRect, [widget$.Context])
  }));
  dart.setLibraryUri(basic.FullPage, I[81]);
  dart.setFieldSignature(basic.FullPage, () => ({
    __proto__: dart.getFields(basic.FullPage.__proto__),
    ignoreMargins: dart.finalFieldType(core.bool)
  }));
  var opacity$2 = dart.privateName(basic, "Opacity.opacity");
  basic.Opacity = class Opacity extends widget$.SingleChildWidget {
    get opacity() {
      return this[opacity$2];
    }
    set opacity(value) {
      super.opacity = value;
    }
    static ['_#new#tearOff'](opts) {
      let opacity = opts && 'opacity' in opts ? opts.opacity : null;
      let child = opts && 'child' in opts ? opts.child : null;
      return new basic.Opacity.new({opacity: opacity, child: child});
    }
    paint(context) {
      let t107;
      super.paint(context);
      if (this.child != null) {
        let mat = vector_math_64.Matrix4.identity();
        mat.translate(dart.nullCheck(this.box).x, dart.nullCheck(this.box).y);
        t107 = context.canvas;
        (() => {
          t107.saveContext();
          t107.setTransform(mat);
          t107.setGraphicState(new graphic_state.PdfGraphicState.new({opacity: this.opacity}));
          return t107;
        })();
        dart.nullCheck(this.child).paint(context);
        context.canvas.restoreContext();
      }
    }
  };
  (basic.Opacity.new = function(opts) {
    let opacity = opts && 'opacity' in opts ? opts.opacity : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[opacity$2] = opacity;
    basic.Opacity.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.Opacity.prototype;
  dart.addTypeTests(basic.Opacity);
  dart.addTypeCaches(basic.Opacity);
  dart.setLibraryUri(basic.Opacity, I[81]);
  dart.setFieldSignature(basic.Opacity, () => ({
    __proto__: dart.getFields(basic.Opacity.__proto__),
    opacity: dart.finalFieldType(core.double)
  }));
  var color$16 = dart.privateName(basic, "Divider.color");
  var endIndent$ = dart.privateName(basic, "Divider.endIndent");
  var height$9 = dart.privateName(basic, "Divider.height");
  var indent$ = dart.privateName(basic, "Divider.indent");
  var thickness$ = dart.privateName(basic, "Divider.thickness");
  var borderStyle$ = dart.privateName(basic, "Divider.borderStyle");
  basic.Divider = class Divider extends widget$.StatelessWidget {
    get color() {
      return this[color$16];
    }
    set color(value) {
      super.color = value;
    }
    get endIndent() {
      return this[endIndent$];
    }
    set endIndent(value) {
      super.endIndent = value;
    }
    get height() {
      return this[height$9];
    }
    set height(value) {
      super.height = value;
    }
    get indent() {
      return this[indent$];
    }
    set indent(value) {
      super.indent = value;
    }
    get thickness() {
      return this[thickness$];
    }
    set thickness(value) {
      super.thickness = value;
    }
    get borderStyle() {
      return this[borderStyle$];
    }
    set borderStyle(value) {
      super.borderStyle = value;
    }
    static ['_#new#tearOff'](opts) {
      let height = opts && 'height' in opts ? opts.height : null;
      let thickness = opts && 'thickness' in opts ? opts.thickness : null;
      let indent = opts && 'indent' in opts ? opts.indent : null;
      let endIndent = opts && 'endIndent' in opts ? opts.endIndent : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let borderStyle = opts && 'borderStyle' in opts ? opts.borderStyle : null;
      return new basic.Divider.new({height: height, thickness: thickness, indent: indent, endIndent: endIndent, color: color, borderStyle: borderStyle});
    }
    build(context) {
      let t107, t107$, t107$0, t107$1, t107$2, t107$3;
      let height = (t107 = this.height, t107 == null ? 16.0 : t107);
      let thickness = (t107$ = this.thickness, t107$ == null ? 1.0 : t107$);
      let indent = (t107$0 = this.indent, t107$0 == null ? 0.0 : t107$0);
      let endIndent = (t107$1 = this.endIndent, t107$1 == null ? 0.0 : t107$1);
      let color = (t107$2 = this.color, t107$2 == null ? colors.PdfColors.black : t107$2);
      let borderStyle = (t107$3 = this.borderStyle, t107$3 == null ? box_border.BorderStyle.solid : t107$3);
      return new basic.SizedBox.new({height: height, child: new basic.Center.new({child: new container$.Container.new({height: thickness, margin: new geometry.EdgeInsets.only({left: indent, right: endIndent}), decoration: new decoration$.BoxDecoration.new({border: new box_border.Border.new({bottom: new box_border.BorderSide.new({color: color, width: thickness, style: borderStyle})})})})})});
    }
  };
  (basic.Divider.new = function(opts) {
    let height = opts && 'height' in opts ? opts.height : null;
    let thickness = opts && 'thickness' in opts ? opts.thickness : null;
    let indent = opts && 'indent' in opts ? opts.indent : null;
    let endIndent = opts && 'endIndent' in opts ? opts.endIndent : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let borderStyle = opts && 'borderStyle' in opts ? opts.borderStyle : null;
    this[height$9] = height;
    this[thickness$] = thickness;
    this[indent$] = indent;
    this[endIndent$] = endIndent;
    this[color$16] = color;
    this[borderStyle$] = borderStyle;
    if (!(height == null || dart.notNull(height) >= 0.0)) dart.assertFailed(null, I[82], 816, 16, "height == null || height >= 0.0");
    if (!(thickness == null || dart.notNull(thickness) >= 0.0)) dart.assertFailed(null, I[82], 817, 16, "thickness == null || thickness >= 0.0");
    if (!(indent == null || dart.notNull(indent) >= 0.0)) dart.assertFailed(null, I[82], 818, 16, "indent == null || indent >= 0.0");
    if (!(endIndent == null || dart.notNull(endIndent) >= 0.0)) dart.assertFailed(null, I[82], 819, 16, "endIndent == null || endIndent >= 0.0");
    basic.Divider.__proto__.new.call(this);
    ;
  }).prototype = basic.Divider.prototype;
  dart.addTypeTests(basic.Divider);
  dart.addTypeCaches(basic.Divider);
  dart.setMethodSignature(basic.Divider, () => ({
    __proto__: dart.getMethods(basic.Divider.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(basic.Divider, I[81]);
  dart.setFieldSignature(basic.Divider, () => ({
    __proto__: dart.getFields(basic.Divider.__proto__),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    endIndent: dart.finalFieldType(dart.nullable(core.double)),
    height: dart.finalFieldType(dart.nullable(core.double)),
    indent: dart.finalFieldType(dart.nullable(core.double)),
    thickness: dart.finalFieldType(dart.nullable(core.double)),
    borderStyle: dart.finalFieldType(dart.nullable(box_border.BorderStyle))
  }));
  var color$17 = dart.privateName(basic, "VerticalDivider.color");
  var endIndent$0 = dart.privateName(basic, "VerticalDivider.endIndent");
  var width$13 = dart.privateName(basic, "VerticalDivider.width");
  var indent$0 = dart.privateName(basic, "VerticalDivider.indent");
  var thickness$0 = dart.privateName(basic, "VerticalDivider.thickness");
  var borderStyle$0 = dart.privateName(basic, "VerticalDivider.borderStyle");
  basic.VerticalDivider = class VerticalDivider extends widget$.StatelessWidget {
    get color() {
      return this[color$17];
    }
    set color(value) {
      super.color = value;
    }
    get endIndent() {
      return this[endIndent$0];
    }
    set endIndent(value) {
      super.endIndent = value;
    }
    get width() {
      return this[width$13];
    }
    set width(value) {
      super.width = value;
    }
    get indent() {
      return this[indent$0];
    }
    set indent(value) {
      super.indent = value;
    }
    get thickness() {
      return this[thickness$0];
    }
    set thickness(value) {
      super.thickness = value;
    }
    get borderStyle() {
      return this[borderStyle$0];
    }
    set borderStyle(value) {
      super.borderStyle = value;
    }
    static ['_#new#tearOff'](opts) {
      let width = opts && 'width' in opts ? opts.width : null;
      let thickness = opts && 'thickness' in opts ? opts.thickness : null;
      let indent = opts && 'indent' in opts ? opts.indent : null;
      let endIndent = opts && 'endIndent' in opts ? opts.endIndent : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let borderStyle = opts && 'borderStyle' in opts ? opts.borderStyle : null;
      return new basic.VerticalDivider.new({width: width, thickness: thickness, indent: indent, endIndent: endIndent, color: color, borderStyle: borderStyle});
    }
    build(context) {
      let t107, t107$, t107$0, t107$1, t107$2, t107$3;
      let width = (t107 = this.width, t107 == null ? 16.0 : t107);
      let thickness = (t107$ = this.thickness, t107$ == null ? 1.0 : t107$);
      let indent = (t107$0 = this.indent, t107$0 == null ? 0.0 : t107$0);
      let endIndent = (t107$1 = this.endIndent, t107$1 == null ? 0.0 : t107$1);
      let color = (t107$2 = this.color, t107$2 == null ? colors.PdfColors.black : t107$2);
      let borderStyle = (t107$3 = this.borderStyle, t107$3 == null ? box_border.BorderStyle.solid : t107$3);
      return new basic.SizedBox.new({width: width, child: new basic.Center.new({child: new container$.Container.new({width: thickness, margin: new geometry.EdgeInsets.only({top: indent, bottom: endIndent}), decoration: new decoration$.BoxDecoration.new({border: new box_border.Border.new({left: new box_border.BorderSide.new({color: color, width: thickness, style: borderStyle})})})})})});
    }
  };
  (basic.VerticalDivider.new = function(opts) {
    let width = opts && 'width' in opts ? opts.width : null;
    let thickness = opts && 'thickness' in opts ? opts.thickness : null;
    let indent = opts && 'indent' in opts ? opts.indent : null;
    let endIndent = opts && 'endIndent' in opts ? opts.endIndent : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let borderStyle = opts && 'borderStyle' in opts ? opts.borderStyle : null;
    this[width$13] = width;
    this[thickness$0] = thickness;
    this[indent$0] = indent;
    this[endIndent$0] = endIndent;
    this[color$17] = color;
    this[borderStyle$0] = borderStyle;
    if (!(width == null || dart.notNull(width) >= 0.0)) dart.assertFailed(null, I[82], 877, 16, "width == null || width >= 0.0");
    if (!(thickness == null || dart.notNull(thickness) >= 0.0)) dart.assertFailed(null, I[82], 878, 16, "thickness == null || thickness >= 0.0");
    if (!(indent == null || dart.notNull(indent) >= 0.0)) dart.assertFailed(null, I[82], 879, 16, "indent == null || indent >= 0.0");
    if (!(endIndent == null || dart.notNull(endIndent) >= 0.0)) dart.assertFailed(null, I[82], 880, 16, "endIndent == null || endIndent >= 0.0");
    basic.VerticalDivider.__proto__.new.call(this);
    ;
  }).prototype = basic.VerticalDivider.prototype;
  dart.addTypeTests(basic.VerticalDivider);
  dart.addTypeCaches(basic.VerticalDivider);
  dart.setMethodSignature(basic.VerticalDivider, () => ({
    __proto__: dart.getMethods(basic.VerticalDivider.__proto__),
    build: dart.fnType(widget$.Widget, [widget$.Context])
  }));
  dart.setLibraryUri(basic.VerticalDivider, I[81]);
  dart.setFieldSignature(basic.VerticalDivider, () => ({
    __proto__: dart.getFields(basic.VerticalDivider.__proto__),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    endIndent: dart.finalFieldType(dart.nullable(core.double)),
    width: dart.finalFieldType(dart.nullable(core.double)),
    indent: dart.finalFieldType(dart.nullable(core.double)),
    thickness: dart.finalFieldType(dart.nullable(core.double)),
    borderStyle: dart.finalFieldType(dart.nullable(box_border.BorderStyle))
  }));
  var alignment$9 = dart.privateName(basic, "OverflowBox.alignment");
  var minWidth$ = dart.privateName(basic, "OverflowBox.minWidth");
  var maxWidth$0 = dart.privateName(basic, "OverflowBox.maxWidth");
  var minHeight$0 = dart.privateName(basic, "OverflowBox.minHeight");
  var maxHeight$0 = dart.privateName(basic, "OverflowBox.maxHeight");
  var _getInnerConstraints = dart.privateName(basic, "_getInnerConstraints");
  basic.OverflowBox = class OverflowBox extends widget$.SingleChildWidget {
    get alignment() {
      return this[alignment$9];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get minWidth() {
      return this[minWidth$];
    }
    set minWidth(value) {
      super.minWidth = value;
    }
    get maxWidth() {
      return this[maxWidth$0];
    }
    set maxWidth(value) {
      super.maxWidth = value;
    }
    get minHeight() {
      return this[minHeight$0];
    }
    set minHeight(value) {
      super.minHeight = value;
    }
    get maxHeight() {
      return this[maxHeight$0];
    }
    set maxHeight(value) {
      super.maxHeight = value;
    }
    static ['_#new#tearOff'](opts) {
      let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
      let minWidth = opts && 'minWidth' in opts ? opts.minWidth : null;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let minHeight = opts && 'minHeight' in opts ? opts.minHeight : null;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let child = opts && 'child' in opts ? opts.child : null;
      return new basic.OverflowBox.new({alignment: alignment, minWidth: minWidth, maxWidth: maxWidth, minHeight: minHeight, maxHeight: maxHeight, child: child});
    }
    [_getInnerConstraints](constraints) {
      let t107, t107$, t107$0, t107$1;
      return new geometry.BoxConstraints.new({minWidth: (t107 = this.minWidth, t107 == null ? constraints.minWidth : t107), maxWidth: (t107$ = this.maxWidth, t107$ == null ? constraints.maxWidth : t107$), minHeight: (t107$0 = this.minHeight, t107$0 == null ? constraints.minHeight : t107$0), maxHeight: (t107$1 = this.maxHeight, t107$1 == null ? constraints.maxHeight : t107$1)});
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      this.box = rect$.PdfRect.fromPoints(point$.PdfPoint.zero, constraints.smallest);
      if (this.child != null) {
        dart.nullCheck(this.child).layout(context, this[_getInnerConstraints](constraints), {parentUsesSize: true});
        if (!(dart.nullCheck(this.child).box != null)) dart.assertFailed(null, I[82], 977, 14, "child!.box != null");
        dart.nullCheck(this.child).box = this.alignment.inscribe(dart.nullCheck(dart.nullCheck(this.child).box).size, dart.nullCheck(this.box));
      }
    }
    paint(context) {
      super.paint(context);
      this.paintChild(context);
    }
  };
  (basic.OverflowBox.new = function(opts) {
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[19] || CT.C19;
    let minWidth = opts && 'minWidth' in opts ? opts.minWidth : null;
    let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
    let minHeight = opts && 'minHeight' in opts ? opts.minHeight : null;
    let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[alignment$9] = alignment;
    this[minWidth$] = minWidth;
    this[maxWidth$0] = maxWidth;
    this[minHeight$0] = minHeight;
    this[maxHeight$0] = maxHeight;
    basic.OverflowBox.__proto__.new.call(this, {child: child});
    ;
  }).prototype = basic.OverflowBox.prototype;
  dart.addTypeTests(basic.OverflowBox);
  dart.addTypeCaches(basic.OverflowBox);
  dart.setMethodSignature(basic.OverflowBox, () => ({
    __proto__: dart.getMethods(basic.OverflowBox.__proto__),
    [_getInnerConstraints]: dart.fnType(geometry.BoxConstraints, [geometry.BoxConstraints])
  }));
  dart.setLibraryUri(basic.OverflowBox, I[81]);
  dart.setFieldSignature(basic.OverflowBox, () => ({
    __proto__: dart.getFields(basic.OverflowBox.__proto__),
    alignment: dart.finalFieldType(geometry.Alignment),
    minWidth: dart.finalFieldType(dart.nullable(core.double)),
    maxWidth: dart.finalFieldType(dart.nullable(core.double)),
    minHeight: dart.finalFieldType(dart.nullable(core.double)),
    maxHeight: dart.finalFieldType(dart.nullable(core.double))
  }));
  const minWidth$0 = BoxConstraints_minWidth;
  const maxWidth$1 = BoxConstraints_maxWidth;
  const minHeight$1 = BoxConstraints_minHeight;
  const maxHeight$1 = BoxConstraints_maxHeight;
  geometry.BoxConstraints = class BoxConstraints extends core.Object {
    get minWidth() {
      return this[minWidth$0];
    }
    set minWidth(value) {
      super.minWidth = value;
    }
    get maxWidth() {
      return this[maxWidth$1];
    }
    set maxWidth(value) {
      super.maxWidth = value;
    }
    get minHeight() {
      return this[minHeight$1];
    }
    set minHeight(value) {
      super.minHeight = value;
    }
    get maxHeight() {
      return this[maxHeight$1];
    }
    set maxHeight(value) {
      super.maxHeight = value;
    }
    static ['_#new#tearOff'](opts) {
      let minWidth = opts && 'minWidth' in opts ? opts.minWidth : 0;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : 1 / 0;
      let minHeight = opts && 'minHeight' in opts ? opts.minHeight : 0;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : 1 / 0;
      return new geometry.BoxConstraints.new({minWidth: minWidth, maxWidth: maxWidth, minHeight: minHeight, maxHeight: maxHeight});
    }
    static ['_#tightFor#tearOff'](opts) {
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      return new geometry.BoxConstraints.tightFor({width: width, height: height});
    }
    static ['_#tight#tearOff'](size) {
      return new geometry.BoxConstraints.tight(size);
    }
    static ['_#expand#tearOff'](opts) {
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      return new geometry.BoxConstraints.expand({width: width, height: height});
    }
    static ['_#tightForFinite#tearOff'](opts) {
      let width = opts && 'width' in opts ? opts.width : 1 / 0;
      let height = opts && 'height' in opts ? opts.height : 1 / 0;
      return new geometry.BoxConstraints.tightForFinite({width: width, height: height});
    }
    get hasBoundedWidth() {
      return this.maxWidth < 1 / 0;
    }
    get hasBoundedHeight() {
      return this.maxHeight < 1 / 0;
    }
    get hasInfiniteWidth() {
      return this.minWidth >= 1 / 0;
    }
    get hasInfiniteHeight() {
      return this.minHeight >= 1 / 0;
    }
    get biggest() {
      return new point$.PdfPoint.new(this.constrainWidth(), this.constrainHeight());
    }
    get smallest() {
      return new point$.PdfPoint.new(this.constrainWidth(0.0), this.constrainHeight(0.0));
    }
    get hasTightWidth() {
      return this.minWidth >= this.maxWidth;
    }
    get hasTightHeight() {
      return this.minHeight >= this.maxHeight;
    }
    get isTight() {
      return this.hasTightWidth && this.hasTightHeight;
    }
    constrain(size) {
      let result = new point$.PdfPoint.new(this.constrainWidth(size.x), this.constrainHeight(size.y));
      return result;
    }
    constrainRect(opts) {
      let width = opts && 'width' in opts ? opts.width : 1 / 0;
      let height = opts && 'height' in opts ? opts.height : 1 / 0;
      let result = new point$.PdfPoint.new(this.constrainWidth(width), this.constrainHeight(height));
      return rect$.PdfRect.fromPoints(point$.PdfPoint.zero, result);
    }
    constrainWidth(width = 1 / 0) {
      return width[$clamp](this.minWidth, this.maxWidth);
    }
    constrainHeight(height = 1 / 0) {
      return height[$clamp](this.minHeight, this.maxHeight);
    }
    constrainSizeAndAttemptToPreserveAspectRatio(size) {
      if (this.isTight) {
        let result = this.smallest;
        return result;
      }
      let width = size.x;
      let height = size.y;
      if (!(width > 0.0)) dart.assertFailed(null, I[83], 130, 12, "width > 0.0");
      if (!(height > 0.0)) dart.assertFailed(null, I[83], 131, 12, "height > 0.0");
      let aspectRatio = width / height;
      if (width > this.maxWidth) {
        width = this.maxWidth;
        height = width / aspectRatio;
      }
      if (height > this.maxHeight) {
        height = this.maxHeight;
        width = height * aspectRatio;
      }
      if (width < this.minWidth) {
        width = this.minWidth;
        height = width / aspectRatio;
      }
      if (height < this.minHeight) {
        height = this.minHeight;
        width = height * aspectRatio;
      }
      let result = new point$.PdfPoint.new(this.constrainWidth(width), this.constrainHeight(height));
      return result;
    }
    tighten(opts) {
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      return new geometry.BoxConstraints.new({minWidth: width == null ? this.minWidth : width[$clamp](this.minWidth, this.maxWidth), maxWidth: width == null ? this.maxWidth : width[$clamp](this.minWidth, this.maxWidth), minHeight: height == null ? this.minHeight : height[$clamp](this.minHeight, this.maxHeight), maxHeight: height == null ? this.maxHeight : height[$clamp](this.minHeight, this.maxHeight)});
    }
    deflate(edges) {
      let horizontal = edges.horizontal;
      let vertical = edges.vertical;
      let deflatedMinWidth = math.max(core.double, 0.0, this.minWidth - horizontal);
      let deflatedMinHeight = math.max(core.double, 0.0, this.minHeight - vertical);
      return new geometry.BoxConstraints.new({minWidth: deflatedMinWidth, maxWidth: math.max(core.double, deflatedMinWidth, this.maxWidth - horizontal), minHeight: deflatedMinHeight, maxHeight: math.max(core.double, deflatedMinHeight, this.maxHeight - vertical)});
    }
    loosen() {
      return new geometry.BoxConstraints.new({minWidth: 0.0, maxWidth: this.maxWidth, minHeight: 0.0, maxHeight: this.maxHeight});
    }
    enforce(constraints) {
      return new geometry.BoxConstraints.new({minWidth: this.minWidth[$clamp](constraints.minWidth, constraints.maxWidth), maxWidth: this.maxWidth[$clamp](constraints.minWidth, constraints.maxWidth), minHeight: this.minHeight[$clamp](constraints.minHeight, constraints.maxHeight), maxHeight: this.maxHeight[$clamp](constraints.minHeight, constraints.maxHeight)});
    }
    copyWith(opts) {
      let t107, t107$, t107$0, t107$1;
      let minWidth = opts && 'minWidth' in opts ? opts.minWidth : null;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let minHeight = opts && 'minHeight' in opts ? opts.minHeight : null;
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      return new geometry.BoxConstraints.new({minWidth: (t107 = minWidth, t107 == null ? this.minWidth : t107), maxWidth: (t107$ = maxWidth, t107$ == null ? this.maxWidth : t107$), minHeight: (t107$0 = minHeight, t107$0 == null ? this.minHeight : t107$0), maxHeight: (t107$1 = maxHeight, t107$1 == null ? this.maxHeight : t107$1)});
    }
    toString() {
      return "BoxConstraint <" + dart.str(this.minWidth) + ", " + dart.str(this.maxWidth) + "> <" + dart.str(this.minHeight) + ", " + dart.str(this.maxHeight) + ">";
    }
  };
  (geometry.BoxConstraints.new = function(opts) {
    let minWidth = opts && 'minWidth' in opts ? opts.minWidth : 0;
    let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : 1 / 0;
    let minHeight = opts && 'minHeight' in opts ? opts.minHeight : 0;
    let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : 1 / 0;
    this[minWidth$0] = minWidth;
    this[maxWidth$1] = maxWidth;
    this[minHeight$1] = minHeight;
    this[maxHeight$1] = maxHeight;
    ;
  }).prototype = geometry.BoxConstraints.prototype;
  (geometry.BoxConstraints.tightFor = function(opts) {
    let t107, t107$, t107$0, t107$1;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    this[minWidth$0] = (t107 = width, t107 == null ? 0.0 : t107);
    this[maxWidth$1] = (t107$ = width, t107$ == null ? 1 / 0 : t107$);
    this[minHeight$1] = (t107$0 = height, t107$0 == null ? 0.0 : t107$0);
    this[maxHeight$1] = (t107$1 = height, t107$1 == null ? 1 / 0 : t107$1);
    ;
  }).prototype = geometry.BoxConstraints.prototype;
  (geometry.BoxConstraints.tight = function(size) {
    this[minWidth$0] = size.x;
    this[maxWidth$1] = size.x;
    this[minHeight$1] = size.y;
    this[maxHeight$1] = size.y;
    ;
  }).prototype = geometry.BoxConstraints.prototype;
  (geometry.BoxConstraints.expand = function(opts) {
    let t107, t107$, t107$0, t107$1;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    this[minWidth$0] = (t107 = width, t107 == null ? 1 / 0 : t107);
    this[maxWidth$1] = (t107$ = width, t107$ == null ? 1 / 0 : t107$);
    this[minHeight$1] = (t107$0 = height, t107$0 == null ? 1 / 0 : t107$0);
    this[maxHeight$1] = (t107$1 = height, t107$1 == null ? 1 / 0 : t107$1);
    ;
  }).prototype = geometry.BoxConstraints.prototype;
  (geometry.BoxConstraints.tightForFinite = function(opts) {
    let width = opts && 'width' in opts ? opts.width : 1 / 0;
    let height = opts && 'height' in opts ? opts.height : 1 / 0;
    this[minWidth$0] = width !== 1 / 0 ? width : 0.0;
    this[maxWidth$1] = width !== 1 / 0 ? width : 1 / 0;
    this[minHeight$1] = height !== 1 / 0 ? height : 0.0;
    this[maxHeight$1] = height !== 1 / 0 ? height : 1 / 0;
    ;
  }).prototype = geometry.BoxConstraints.prototype;
  dart.addTypeTests(geometry.BoxConstraints);
  dart.addTypeCaches(geometry.BoxConstraints);
  dart.setMethodSignature(geometry.BoxConstraints, () => ({
    __proto__: dart.getMethods(geometry.BoxConstraints.__proto__),
    constrain: dart.fnType(point$.PdfPoint, [point$.PdfPoint]),
    constrainRect: dart.fnType(rect$.PdfRect, [], {height: core.double, width: core.double}, {}),
    constrainWidth: dart.fnType(core.double, [], [core.double]),
    constrainHeight: dart.fnType(core.double, [], [core.double]),
    constrainSizeAndAttemptToPreserveAspectRatio: dart.fnType(point$.PdfPoint, [point$.PdfPoint]),
    tighten: dart.fnType(geometry.BoxConstraints, [], {height: dart.nullable(core.double), width: dart.nullable(core.double)}, {}),
    deflate: dart.fnType(geometry.BoxConstraints, [geometry.EdgeInsets]),
    loosen: dart.fnType(geometry.BoxConstraints, []),
    enforce: dart.fnType(geometry.BoxConstraints, [geometry.BoxConstraints]),
    copyWith: dart.fnType(geometry.BoxConstraints, [], {maxHeight: dart.nullable(core.double), maxWidth: dart.nullable(core.double), minHeight: dart.nullable(core.double), minWidth: dart.nullable(core.double)}, {})
  }));
  dart.setGetterSignature(geometry.BoxConstraints, () => ({
    __proto__: dart.getGetters(geometry.BoxConstraints.__proto__),
    hasBoundedWidth: core.bool,
    hasBoundedHeight: core.bool,
    hasInfiniteWidth: core.bool,
    hasInfiniteHeight: core.bool,
    biggest: point$.PdfPoint,
    smallest: point$.PdfPoint,
    hasTightWidth: core.bool,
    hasTightHeight: core.bool,
    isTight: core.bool
  }));
  dart.setLibraryUri(geometry.BoxConstraints, I[84]);
  dart.setFieldSignature(geometry.BoxConstraints, () => ({
    __proto__: dart.getFields(geometry.BoxConstraints.__proto__),
    minWidth: dart.finalFieldType(core.double),
    maxWidth: dart.finalFieldType(core.double),
    minHeight: dart.finalFieldType(core.double),
    maxHeight: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(geometry.BoxConstraints, ['toString']);
  const left$2 = EdgeInsets_left;
  const top$1 = EdgeInsets_top;
  const right$2 = EdgeInsets_right;
  const bottom$2 = EdgeInsets_bottom;
  geometry.EdgeInsets = class EdgeInsets extends core.Object {
    get left() {
      return this[left$2];
    }
    set left(value) {
      super.left = value;
    }
    get top() {
      return this[top$1];
    }
    set top(value) {
      super.top = value;
    }
    get right() {
      return this[right$2];
    }
    set right(value) {
      super.right = value;
    }
    get bottom() {
      return this[bottom$2];
    }
    set bottom(value) {
      super.bottom = value;
    }
    static ['_#fromLTRB#tearOff'](left, top, right, bottom) {
      return new geometry.EdgeInsets.fromLTRB(left, top, right, bottom);
    }
    static ['_#all#tearOff'](value) {
      return new geometry.EdgeInsets.all(value);
    }
    static ['_#only#tearOff'](opts) {
      let left = opts && 'left' in opts ? opts.left : 0;
      let top = opts && 'top' in opts ? opts.top : 0;
      let right = opts && 'right' in opts ? opts.right : 0;
      let bottom = opts && 'bottom' in opts ? opts.bottom : 0;
      return new geometry.EdgeInsets.only({left: left, top: top, right: right, bottom: bottom});
    }
    static ['_#symmetric#tearOff'](opts) {
      let vertical = opts && 'vertical' in opts ? opts.vertical : 0;
      let horizontal = opts && 'horizontal' in opts ? opts.horizontal : 0;
      return new geometry.EdgeInsets.symmetric({vertical: vertical, horizontal: horizontal});
    }
    get horizontal() {
      return this.left + this.right;
    }
    get vertical() {
      return this.top + this.bottom;
    }
    copyWith(opts) {
      let t107, t107$, t107$0, t107$1;
      let left = opts && 'left' in opts ? opts.left : null;
      let top = opts && 'top' in opts ? opts.top : null;
      let right = opts && 'right' in opts ? opts.right : null;
      let bottom = opts && 'bottom' in opts ? opts.bottom : null;
      return new geometry.EdgeInsets.only({left: (t107 = left, t107 == null ? this.left : t107), top: (t107$ = top, t107$ == null ? this.top : t107$), right: (t107$0 = right, t107$0 == null ? this.right : t107$0), bottom: (t107$1 = bottom, t107$1 == null ? this.bottom : t107$1)});
    }
    add(other) {
      return new geometry.EdgeInsets.fromLTRB(this.left + other.left, this.top + other.top, this.right + other.right, this.bottom + other.bottom);
    }
    toString() {
      return "EdgeInsets " + dart.str(this.left) + ", " + dart.str(this.top) + ", " + dart.str(this.right) + ", " + dart.str(this.bottom);
    }
  };
  (geometry.EdgeInsets.fromLTRB = function(left, top, right, bottom) {
    this[left$2] = left;
    this[top$1] = top;
    this[right$2] = right;
    this[bottom$2] = bottom;
    ;
  }).prototype = geometry.EdgeInsets.prototype;
  (geometry.EdgeInsets.all = function(value) {
    this[left$2] = value;
    this[top$1] = value;
    this[right$2] = value;
    this[bottom$2] = value;
    ;
  }).prototype = geometry.EdgeInsets.prototype;
  (geometry.EdgeInsets.only = function(opts) {
    let left = opts && 'left' in opts ? opts.left : 0;
    let top = opts && 'top' in opts ? opts.top : 0;
    let right = opts && 'right' in opts ? opts.right : 0;
    let bottom = opts && 'bottom' in opts ? opts.bottom : 0;
    this[left$2] = left;
    this[top$1] = top;
    this[right$2] = right;
    this[bottom$2] = bottom;
    ;
  }).prototype = geometry.EdgeInsets.prototype;
  (geometry.EdgeInsets.symmetric = function(opts) {
    let vertical = opts && 'vertical' in opts ? opts.vertical : 0;
    let horizontal = opts && 'horizontal' in opts ? opts.horizontal : 0;
    this[left$2] = horizontal;
    this[top$1] = vertical;
    this[right$2] = horizontal;
    this[bottom$2] = vertical;
    ;
  }).prototype = geometry.EdgeInsets.prototype;
  dart.addTypeTests(geometry.EdgeInsets);
  dart.addTypeCaches(geometry.EdgeInsets);
  dart.setMethodSignature(geometry.EdgeInsets, () => ({
    __proto__: dart.getMethods(geometry.EdgeInsets.__proto__),
    copyWith: dart.fnType(geometry.EdgeInsets, [], {bottom: dart.nullable(core.double), left: dart.nullable(core.double), right: dart.nullable(core.double), top: dart.nullable(core.double)}, {}),
    add: dart.fnType(geometry.EdgeInsets, [geometry.EdgeInsets])
  }));
  dart.setGetterSignature(geometry.EdgeInsets, () => ({
    __proto__: dart.getGetters(geometry.EdgeInsets.__proto__),
    horizontal: core.double,
    vertical: core.double
  }));
  dart.setLibraryUri(geometry.EdgeInsets, I[84]);
  dart.setFieldSignature(geometry.EdgeInsets, () => ({
    __proto__: dart.getFields(geometry.EdgeInsets.__proto__),
    left: dart.finalFieldType(core.double),
    top: dart.finalFieldType(core.double),
    right: dart.finalFieldType(core.double),
    bottom: dart.finalFieldType(core.double)
  }));
  dart.setStaticFieldSignature(geometry.EdgeInsets, () => ['zero']);
  dart.defineExtensionMethods(geometry.EdgeInsets, ['toString']);
  dart.defineLazy(geometry.EdgeInsets, {
    /*geometry.EdgeInsets.zero*/get zero() {
      return C[25] || CT.C25;
    }
  }, false);
  const x$4 = Alignment_x;
  const y$4 = Alignment_y;
  geometry.Alignment = class Alignment extends core.Object {
    get x() {
      return this[x$4];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$4];
    }
    set y(value) {
      super.y = value;
    }
    static ['_#new#tearOff'](x, y) {
      return new geometry.Alignment.new(x, y);
    }
    alongSize(other) {
      let centerX = other.x / 2.0;
      let centerY = other.y / 2.0;
      return new point$.PdfPoint.new(centerX + this.x * centerX, centerY + this.y * centerY);
    }
    withinRect(rect) {
      let halfWidth = rect.width / 2.0;
      let halfHeight = rect.height / 2.0;
      return new point$.PdfPoint.new(rect.left + halfWidth + this.x * halfWidth, rect.bottom + halfHeight + this.y * halfHeight);
    }
    inscribe(size, rect) {
      let halfWidthDelta = (rect.width - size.x) / 2.0;
      let halfHeightDelta = (rect.height - size.y) / 2.0;
      return new rect$.PdfRect.new(rect.x + halfWidthDelta + this.x * halfWidthDelta, rect.y + halfHeightDelta + this.y * halfHeightDelta, size.x, size.y);
    }
    toString() {
      return "(" + dart.str(this.x) + ", " + dart.str(this.y) + ")";
    }
  };
  (geometry.Alignment.new = function(x, y) {
    this[x$4] = x;
    this[y$4] = y;
    ;
  }).prototype = geometry.Alignment.prototype;
  dart.addTypeTests(geometry.Alignment);
  dart.addTypeCaches(geometry.Alignment);
  dart.setMethodSignature(geometry.Alignment, () => ({
    __proto__: dart.getMethods(geometry.Alignment.__proto__),
    alongSize: dart.fnType(point$.PdfPoint, [point$.PdfPoint]),
    withinRect: dart.fnType(point$.PdfPoint, [rect$.PdfRect]),
    inscribe: dart.fnType(rect$.PdfRect, [point$.PdfPoint, rect$.PdfRect])
  }));
  dart.setLibraryUri(geometry.Alignment, I[84]);
  dart.setFieldSignature(geometry.Alignment, () => ({
    __proto__: dart.getFields(geometry.Alignment.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double)
  }));
  dart.setStaticFieldSignature(geometry.Alignment, () => ['topLeft', 'topCenter', 'topRight', 'centerLeft', 'center', 'centerRight', 'bottomLeft', 'bottomCenter', 'bottomRight']);
  dart.defineExtensionMethods(geometry.Alignment, ['toString']);
  dart.defineLazy(geometry.Alignment, {
    /*geometry.Alignment.topLeft*/get topLeft() {
      return C[18] || CT.C18;
    },
    /*geometry.Alignment.topCenter*/get topCenter() {
      return C[251] || CT.C251;
    },
    /*geometry.Alignment.topRight*/get topRight() {
      return C[88] || CT.C88;
    },
    /*geometry.Alignment.centerLeft*/get centerLeft() {
      return C[179] || CT.C179;
    },
    /*geometry.Alignment.center*/get center() {
      return C[19] || CT.C19;
    },
    /*geometry.Alignment.centerRight*/get centerRight() {
      return C[180] || CT.C180;
    },
    /*geometry.Alignment.bottomLeft*/get bottomLeft() {
      return C[252] || CT.C252;
    },
    /*geometry.Alignment.bottomCenter*/get bottomCenter() {
      return C[253] || CT.C253;
    },
    /*geometry.Alignment.bottomRight*/get bottomRight() {
      return C[254] || CT.C254;
    }
  }, false);
  geometry.FractionalOffset = class FractionalOffset extends geometry.Alignment {
    static ['_#new#tearOff'](dx, dy) {
      return new geometry.FractionalOffset.new(dx, dy);
    }
  };
  (geometry.FractionalOffset.new = function(dx, dy) {
    geometry.FractionalOffset.__proto__.new.call(this, dx * 2 - 1, 1 - dy * 2);
    ;
  }).prototype = geometry.FractionalOffset.prototype;
  dart.addTypeTests(geometry.FractionalOffset);
  dart.addTypeCaches(geometry.FractionalOffset);
  dart.setLibraryUri(geometry.FractionalOffset, I[84]);
  var source$ = dart.privateName(geometry, "FittedSizes.source");
  var destination$ = dart.privateName(geometry, "FittedSizes.destination");
  geometry.FittedSizes = class FittedSizes extends core.Object {
    get source() {
      return this[source$];
    }
    set source(value) {
      super.source = value;
    }
    get destination() {
      return this[destination$];
    }
    set destination(value) {
      super.destination = value;
    }
    static ['_#new#tearOff'](source, destination) {
      return new geometry.FittedSizes.new(source, destination);
    }
  };
  (geometry.FittedSizes.new = function(source, destination) {
    this[source$] = source;
    this[destination$] = destination;
    ;
  }).prototype = geometry.FittedSizes.prototype;
  dart.addTypeTests(geometry.FittedSizes);
  dart.addTypeCaches(geometry.FittedSizes);
  dart.setLibraryUri(geometry.FittedSizes, I[84]);
  dart.setFieldSignature(geometry.FittedSizes, () => ({
    __proto__: dart.getFields(geometry.FittedSizes.__proto__),
    source: dart.finalFieldType(dart.nullable(point$.PdfPoint)),
    destination: dart.finalFieldType(dart.nullable(point$.PdfPoint))
  }));
  geometry.applyBoxFit = function applyBoxFit(fit, inputSize, outputSize) {
    if (inputSize.y <= 0.0 || inputSize.x <= 0.0 || outputSize.y <= 0.0 || outputSize.x <= 0.0) {
      return C[255] || CT.C255;
    }
    let sourceSize = null;
    let destinationSize = null;
    switch (fit) {
      case C[246] || CT.C246:
        {
          sourceSize = inputSize;
          destinationSize = outputSize;
          break;
        }
      case C[64] || CT.C64:
        {
          sourceSize = inputSize;
          if (outputSize.x / outputSize.y > sourceSize.x / sourceSize.y) {
            destinationSize = new point$.PdfPoint.new(sourceSize.x * outputSize.y / sourceSize.y, outputSize.y);
          } else {
            destinationSize = new point$.PdfPoint.new(outputSize.x, sourceSize.y * outputSize.x / sourceSize.x);
          }
          break;
        }
      case C[157] || CT.C157:
        {
          if (outputSize.x / outputSize.y > inputSize.x / inputSize.y) {
            sourceSize = new point$.PdfPoint.new(inputSize.x, inputSize.x * outputSize.y / outputSize.x);
          } else {
            sourceSize = new point$.PdfPoint.new(inputSize.y * outputSize.x / outputSize.y, inputSize.y);
          }
          destinationSize = outputSize;
          break;
        }
      case C[247] || CT.C247:
        {
          sourceSize = new point$.PdfPoint.new(inputSize.x, inputSize.x * outputSize.y / outputSize.x);
          destinationSize = new point$.PdfPoint.new(outputSize.x, sourceSize.y * outputSize.x / sourceSize.x);
          break;
        }
      case C[248] || CT.C248:
        {
          sourceSize = new point$.PdfPoint.new(inputSize.y * outputSize.x / outputSize.y, inputSize.y);
          destinationSize = new point$.PdfPoint.new(sourceSize.x * outputSize.y / sourceSize.y, outputSize.y);
          break;
        }
      case C[249] || CT.C249:
        {
          sourceSize = new point$.PdfPoint.new(math.min(core.double, inputSize.x, outputSize.x), math.min(core.double, inputSize.y, outputSize.y));
          destinationSize = sourceSize;
          break;
        }
      case C[250] || CT.C250:
        {
          sourceSize = inputSize;
          destinationSize = inputSize;
          let aspectRatio = inputSize.x / inputSize.y;
          if (destinationSize.y > outputSize.y) {
            destinationSize = new point$.PdfPoint.new(outputSize.y * aspectRatio, outputSize.y);
          }
          if (destinationSize.x > outputSize.x) {
            destinationSize = new point$.PdfPoint.new(outputSize.x, outputSize.x / aspectRatio);
          }
          break;
        }
    }
    return new geometry.FittedSizes.new(sourceSize, destinationSize);
  };
  geometry.transformPoint = function transformPoint(transform, point) {
    let position3 = vector_math_64.Vector3.new(point.x, point.y, 0.0);
    let transformed3 = transform.perspectiveTransform(position3);
    return new point$.PdfPoint.new(transformed3.x, transformed3.y);
  };
  geometry.transformRect = function transformRect(transform, rect) {
    let point1 = geometry.transformPoint(transform, rect.topLeft);
    let point2 = geometry.transformPoint(transform, rect.topRight);
    let point3 = geometry.transformPoint(transform, rect.bottomLeft);
    let point4 = geometry.transformPoint(transform, rect.bottomRight);
    return rect$.PdfRect.fromLTRB(math.min(core.double, point1.x, math.min(core.double, point2.x, math.min(core.double, point3.x, point4.x))), math.min(core.double, point1.y, math.min(core.double, point2.y, math.min(core.double, point3.y, point4.y))), math.max(core.double, point1.x, math.max(core.double, point2.x, math.max(core.double, point3.x, point4.x))), math.max(core.double, point1.y, math.max(core.double, point2.y, math.max(core.double, point3.y, point4.y))));
  };
  var name$3 = dart.privateName(annotations, "Anchor.name");
  var description$ = dart.privateName(annotations, "Anchor.description");
  var zoom$ = dart.privateName(annotations, "Anchor.zoom");
  var setX$ = dart.privateName(annotations, "Anchor.setX");
  annotations.Anchor = class Anchor extends widget$.SingleChildWidget {
    get name() {
      return this[name$3];
    }
    set name(value) {
      super.name = value;
    }
    get description() {
      return this[description$];
    }
    set description(value) {
      super.description = value;
    }
    get zoom() {
      return this[zoom$];
    }
    set zoom(value) {
      super.zoom = value;
    }
    get setX() {
      return this[setX$];
    }
    set setX(value) {
      super.setX = value;
    }
    static ['_#new#tearOff'](opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let description = opts && 'description' in opts ? opts.description : null;
      let zoom = opts && 'zoom' in opts ? opts.zoom : null;
      let setX = opts && 'setX' in opts ? opts.setX : false;
      return new annotations.Anchor.new({child: child, name: name, description: description, zoom: zoom, setX: setX});
    }
    paint(context) {
      super.paint(context);
      this.paintChild(context);
      let mat = context.canvas.getTransform();
      let lt = mat.transform3(vector_math_64.Vector3.new(dart.nullCheck(this.box).left, dart.nullCheck(this.box).top, 0.0));
      context.document.pdfNames.addDest(this.name, context.page, {posX: this.setX ? lt.x : null, posY: lt.y, posZ: this.zoom});
      if (this.description != null) {
        let rb = mat.transform3(vector_math_64.Vector3.new(dart.nullCheck(this.box).right, dart.nullCheck(this.box).top, 0.0));
        let iBox = rect$.PdfRect.fromLTRB(lt.x, lt.y, rb.x, rb.y);
        new annotation.PdfAnnot.new(context.page, new annotation.PdfAnnotText.new({rect: iBox, content: dart.nullCheck(this.description)}));
      }
    }
  };
  (annotations.Anchor.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let description = opts && 'description' in opts ? opts.description : null;
    let zoom = opts && 'zoom' in opts ? opts.zoom : null;
    let setX = opts && 'setX' in opts ? opts.setX : false;
    this[name$3] = name;
    this[description$] = description;
    this[zoom$] = zoom;
    this[setX$] = setX;
    annotations.Anchor.__proto__.new.call(this, {child: child});
    ;
  }).prototype = annotations.Anchor.prototype;
  dart.addTypeTests(annotations.Anchor);
  dart.addTypeCaches(annotations.Anchor);
  dart.setLibraryUri(annotations.Anchor, I[85]);
  dart.setFieldSignature(annotations.Anchor, () => ({
    __proto__: dart.getFields(annotations.Anchor.__proto__),
    name: dart.finalFieldType(core.String),
    description: dart.finalFieldType(dart.nullable(core.String)),
    zoom: dart.finalFieldType(dart.nullable(core.double)),
    setX: dart.finalFieldType(core.bool)
  }));
  annotations.AnnotationBuilder = class AnnotationBuilder extends core.Object {};
  (annotations.AnnotationBuilder.new = function() {
    ;
  }).prototype = annotations.AnnotationBuilder.prototype;
  dart.addTypeTests(annotations.AnnotationBuilder);
  dart.addTypeCaches(annotations.AnnotationBuilder);
  dart.setLibraryUri(annotations.AnnotationBuilder, I[85]);
  var destination$0 = dart.privateName(annotations, "AnnotationLink.destination");
  annotations.AnnotationLink = class AnnotationLink extends annotations.AnnotationBuilder {
    get destination() {
      return this[destination$0];
    }
    set destination(value) {
      super.destination = value;
    }
    static ['_#new#tearOff'](destination) {
      return new annotations.AnnotationLink.new(destination);
    }
    build(context, box) {
      return new annotation.PdfAnnot.new(context.page, new annotation.PdfAnnotNamedLink.new({rect: context.localToGlobal(dart.nullCheck(box)), dest: this.destination}));
    }
  };
  (annotations.AnnotationLink.new = function(destination) {
    this[destination$0] = destination;
    ;
  }).prototype = annotations.AnnotationLink.prototype;
  dart.addTypeTests(annotations.AnnotationLink);
  dart.addTypeCaches(annotations.AnnotationLink);
  dart.setMethodSignature(annotations.AnnotationLink, () => ({
    __proto__: dart.getMethods(annotations.AnnotationLink.__proto__),
    build: dart.fnType(annotation.PdfAnnot, [widget$.Context, dart.nullable(rect$.PdfRect)])
  }));
  dart.setLibraryUri(annotations.AnnotationLink, I[85]);
  dart.setFieldSignature(annotations.AnnotationLink, () => ({
    __proto__: dart.getFields(annotations.AnnotationLink.__proto__),
    destination: dart.finalFieldType(core.String)
  }));
  var destination$1 = dart.privateName(annotations, "AnnotationUrl.destination");
  var date$1 = dart.privateName(annotations, "AnnotationUrl.date");
  var author$ = dart.privateName(annotations, "AnnotationUrl.author");
  var subject$ = dart.privateName(annotations, "AnnotationUrl.subject");
  annotations.AnnotationUrl = class AnnotationUrl extends annotations.AnnotationBuilder {
    get destination() {
      return this[destination$1];
    }
    set destination(value) {
      super.destination = value;
    }
    get date() {
      return this[date$1];
    }
    set date(value) {
      super.date = value;
    }
    get author() {
      return this[author$];
    }
    set author(value) {
      super.author = value;
    }
    get subject() {
      return this[subject$];
    }
    set subject(value) {
      super.subject = value;
    }
    static ['_#new#tearOff'](destination, opts) {
      let date = opts && 'date' in opts ? opts.date : null;
      let subject = opts && 'subject' in opts ? opts.subject : null;
      let author = opts && 'author' in opts ? opts.author : null;
      return new annotations.AnnotationUrl.new(destination, {date: date, subject: subject, author: author});
    }
    build(context, box) {
      return new annotation.PdfAnnot.new(context.page, new annotation.PdfAnnotUrlLink.new({rect: context.localToGlobal(dart.nullCheck(box)), url: this.destination, date: this.date, author: this.author, subject: this.subject}));
    }
  };
  (annotations.AnnotationUrl.new = function(destination, opts) {
    let date = opts && 'date' in opts ? opts.date : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    this[destination$1] = destination;
    this[date$1] = date;
    this[subject$] = subject;
    this[author$] = author;
    ;
  }).prototype = annotations.AnnotationUrl.prototype;
  dart.addTypeTests(annotations.AnnotationUrl);
  dart.addTypeCaches(annotations.AnnotationUrl);
  dart.setMethodSignature(annotations.AnnotationUrl, () => ({
    __proto__: dart.getMethods(annotations.AnnotationUrl.__proto__),
    build: dart.fnType(annotation.PdfAnnot, [widget$.Context, dart.nullable(rect$.PdfRect)])
  }));
  dart.setLibraryUri(annotations.AnnotationUrl, I[85]);
  dart.setFieldSignature(annotations.AnnotationUrl, () => ({
    __proto__: dart.getFields(annotations.AnnotationUrl.__proto__),
    destination: dart.finalFieldType(core.String),
    date: dart.finalFieldType(dart.nullable(core.DateTime)),
    author: dart.finalFieldType(dart.nullable(core.String)),
    subject: dart.finalFieldType(dart.nullable(core.String))
  }));
  var color$18 = dart.privateName(annotations, "AnnotationSquare.color");
  var interiorColor$ = dart.privateName(annotations, "AnnotationSquare.interiorColor");
  var border$4 = dart.privateName(annotations, "AnnotationSquare.border");
  var author$0 = dart.privateName(annotations, "AnnotationSquare.author");
  var date$2 = dart.privateName(annotations, "AnnotationSquare.date");
  var subject$0 = dart.privateName(annotations, "AnnotationSquare.subject");
  var content$ = dart.privateName(annotations, "AnnotationSquare.content");
  annotations.AnnotationSquare = class AnnotationSquare extends annotations.AnnotationBuilder {
    get color() {
      return this[color$18];
    }
    set color(value) {
      super.color = value;
    }
    get interiorColor() {
      return this[interiorColor$];
    }
    set interiorColor(value) {
      super.interiorColor = value;
    }
    get border() {
      return this[border$4];
    }
    set border(value) {
      super.border = value;
    }
    get author() {
      return this[author$0];
    }
    set author(value) {
      super.author = value;
    }
    get date() {
      return this[date$2];
    }
    set date(value) {
      super.date = value;
    }
    get subject() {
      return this[subject$0];
    }
    set subject(value) {
      super.subject = value;
    }
    get content() {
      return this[content$];
    }
    set content(value) {
      super.content = value;
    }
    static ['_#new#tearOff'](opts) {
      let color = opts && 'color' in opts ? opts.color : null;
      let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let author = opts && 'author' in opts ? opts.author : null;
      let date = opts && 'date' in opts ? opts.date : null;
      let subject = opts && 'subject' in opts ? opts.subject : null;
      let content = opts && 'content' in opts ? opts.content : null;
      return new annotations.AnnotationSquare.new({color: color, interiorColor: interiorColor, border: border, author: author, date: date, subject: subject, content: content});
    }
    build(context, box) {
      return new annotation.PdfAnnot.new(context.page, new annotation.PdfAnnotSquare.new({rect: context.localToGlobal(dart.nullCheck(box)), border: this.border, color: this.color, interiorColor: this.interiorColor, date: this.date, author: this.author, subject: this.subject}));
    }
  };
  (annotations.AnnotationSquare.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let content = opts && 'content' in opts ? opts.content : null;
    this[color$18] = color;
    this[interiorColor$] = interiorColor;
    this[border$4] = border;
    this[author$0] = author;
    this[date$2] = date;
    this[subject$0] = subject;
    this[content$] = content;
    ;
  }).prototype = annotations.AnnotationSquare.prototype;
  dart.addTypeTests(annotations.AnnotationSquare);
  dart.addTypeCaches(annotations.AnnotationSquare);
  dart.setMethodSignature(annotations.AnnotationSquare, () => ({
    __proto__: dart.getMethods(annotations.AnnotationSquare.__proto__),
    build: dart.fnType(annotation.PdfAnnot, [widget$.Context, dart.nullable(rect$.PdfRect)])
  }));
  dart.setLibraryUri(annotations.AnnotationSquare, I[85]);
  dart.setFieldSignature(annotations.AnnotationSquare, () => ({
    __proto__: dart.getFields(annotations.AnnotationSquare.__proto__),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    interiorColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    border: dart.finalFieldType(dart.nullable(border.PdfBorder)),
    author: dart.finalFieldType(dart.nullable(core.String)),
    date: dart.finalFieldType(dart.nullable(core.DateTime)),
    subject: dart.finalFieldType(dart.nullable(core.String)),
    content: dart.finalFieldType(dart.nullable(core.String))
  }));
  var color$19 = dart.privateName(annotations, "AnnotationCircle.color");
  var interiorColor$0 = dart.privateName(annotations, "AnnotationCircle.interiorColor");
  var border$5 = dart.privateName(annotations, "AnnotationCircle.border");
  var author$1 = dart.privateName(annotations, "AnnotationCircle.author");
  var date$3 = dart.privateName(annotations, "AnnotationCircle.date");
  var subject$1 = dart.privateName(annotations, "AnnotationCircle.subject");
  var content$0 = dart.privateName(annotations, "AnnotationCircle.content");
  annotations.AnnotationCircle = class AnnotationCircle extends annotations.AnnotationBuilder {
    get color() {
      return this[color$19];
    }
    set color(value) {
      super.color = value;
    }
    get interiorColor() {
      return this[interiorColor$0];
    }
    set interiorColor(value) {
      super.interiorColor = value;
    }
    get border() {
      return this[border$5];
    }
    set border(value) {
      super.border = value;
    }
    get author() {
      return this[author$1];
    }
    set author(value) {
      super.author = value;
    }
    get date() {
      return this[date$3];
    }
    set date(value) {
      super.date = value;
    }
    get subject() {
      return this[subject$1];
    }
    set subject(value) {
      super.subject = value;
    }
    get content() {
      return this[content$0];
    }
    set content(value) {
      super.content = value;
    }
    static ['_#new#tearOff'](opts) {
      let color = opts && 'color' in opts ? opts.color : null;
      let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let author = opts && 'author' in opts ? opts.author : null;
      let date = opts && 'date' in opts ? opts.date : null;
      let subject = opts && 'subject' in opts ? opts.subject : null;
      let content = opts && 'content' in opts ? opts.content : null;
      return new annotations.AnnotationCircle.new({color: color, interiorColor: interiorColor, border: border, author: author, date: date, subject: subject, content: content});
    }
    build(context, box) {
      return new annotation.PdfAnnot.new(context.page, new annotation.PdfAnnotCircle.new({rect: context.localToGlobal(dart.nullCheck(box)), border: this.border, color: this.color, interiorColor: this.interiorColor, date: this.date, author: this.author, subject: this.subject}));
    }
  };
  (annotations.AnnotationCircle.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let content = opts && 'content' in opts ? opts.content : null;
    this[color$19] = color;
    this[interiorColor$0] = interiorColor;
    this[border$5] = border;
    this[author$1] = author;
    this[date$3] = date;
    this[subject$1] = subject;
    this[content$0] = content;
    ;
  }).prototype = annotations.AnnotationCircle.prototype;
  dart.addTypeTests(annotations.AnnotationCircle);
  dart.addTypeCaches(annotations.AnnotationCircle);
  dart.setMethodSignature(annotations.AnnotationCircle, () => ({
    __proto__: dart.getMethods(annotations.AnnotationCircle.__proto__),
    build: dart.fnType(annotation.PdfAnnot, [widget$.Context, dart.nullable(rect$.PdfRect)])
  }));
  dart.setLibraryUri(annotations.AnnotationCircle, I[85]);
  dart.setFieldSignature(annotations.AnnotationCircle, () => ({
    __proto__: dart.getFields(annotations.AnnotationCircle.__proto__),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    interiorColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    border: dart.finalFieldType(dart.nullable(border.PdfBorder)),
    author: dart.finalFieldType(dart.nullable(core.String)),
    date: dart.finalFieldType(dart.nullable(core.DateTime)),
    subject: dart.finalFieldType(dart.nullable(core.String)),
    content: dart.finalFieldType(dart.nullable(core.String))
  }));
  var points$1 = dart.privateName(annotations, "AnnotationPolygon.points");
  var color$20 = dart.privateName(annotations, "AnnotationPolygon.color");
  var interiorColor$1 = dart.privateName(annotations, "AnnotationPolygon.interiorColor");
  var border$6 = dart.privateName(annotations, "AnnotationPolygon.border");
  var author$2 = dart.privateName(annotations, "AnnotationPolygon.author");
  var date$4 = dart.privateName(annotations, "AnnotationPolygon.date");
  var subject$2 = dart.privateName(annotations, "AnnotationPolygon.subject");
  var content$1 = dart.privateName(annotations, "AnnotationPolygon.content");
  annotations.AnnotationPolygon = class AnnotationPolygon extends annotations.AnnotationBuilder {
    get points() {
      return this[points$1];
    }
    set points(value) {
      super.points = value;
    }
    get color() {
      return this[color$20];
    }
    set color(value) {
      super.color = value;
    }
    get interiorColor() {
      return this[interiorColor$1];
    }
    set interiorColor(value) {
      super.interiorColor = value;
    }
    get border() {
      return this[border$6];
    }
    set border(value) {
      super.border = value;
    }
    get author() {
      return this[author$2];
    }
    set author(value) {
      super.author = value;
    }
    get date() {
      return this[date$4];
    }
    set date(value) {
      super.date = value;
    }
    get subject() {
      return this[subject$2];
    }
    set subject(value) {
      super.subject = value;
    }
    get content() {
      return this[content$1];
    }
    set content(value) {
      super.content = value;
    }
    static ['_#new#tearOff'](points, opts) {
      let color = opts && 'color' in opts ? opts.color : null;
      let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let author = opts && 'author' in opts ? opts.author : null;
      let date = opts && 'date' in opts ? opts.date : null;
      let subject = opts && 'subject' in opts ? opts.subject : null;
      let content = opts && 'content' in opts ? opts.content : null;
      return new annotations.AnnotationPolygon.new(points, {color: color, interiorColor: interiorColor, border: border, author: author, date: date, subject: subject, content: content});
    }
    build(context, box) {
      let globalPoints = this.points[$map](point$.PdfPoint, dart.fn(e => context.localToGlobalPoint(e), T$.PdfPointToPdfPoint()))[$toList]();
      let rect = context.localToGlobal(new rect$.PdfRect.new(this.points[$map](core.double, dart.fn(point => point.x, T$.PdfPointTodouble()))[$reduce](C[235] || CT.C235), this.points[$map](core.double, dart.fn(point => point.y, T$.PdfPointTodouble()))[$reduce](C[235] || CT.C235), this.points[$map](core.double, dart.fn(point => point.x, T$.PdfPointTodouble()))[$reduce](C[237] || CT.C237) - this.points[$map](core.double, dart.fn(point => point.x, T$.PdfPointTodouble()))[$reduce](C[235] || CT.C235), this.points[$map](core.double, dart.fn(point => point.y, T$.PdfPointTodouble()))[$reduce](C[237] || CT.C237) - this.points[$map](core.double, dart.fn(point => point.y, T$.PdfPointTodouble()))[$reduce](C[235] || CT.C235)));
      let pdfAnnotPolygon = new annotation.PdfAnnotPolygon.new(context.document, globalPoints, {rect: rect, border: this.border, color: this.color, interiorColor: this.interiorColor, date: this.date, author: this.author, subject: this.subject});
      return new annotation.PdfAnnot.new(context.page, pdfAnnotPolygon);
    }
  };
  (annotations.AnnotationPolygon.new = function(points, opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let content = opts && 'content' in opts ? opts.content : null;
    this[points$1] = points;
    this[color$20] = color;
    this[interiorColor$1] = interiorColor;
    this[border$6] = border;
    this[author$2] = author;
    this[date$4] = date;
    this[subject$2] = subject;
    this[content$1] = content;
    ;
  }).prototype = annotations.AnnotationPolygon.prototype;
  dart.addTypeTests(annotations.AnnotationPolygon);
  dart.addTypeCaches(annotations.AnnotationPolygon);
  dart.setMethodSignature(annotations.AnnotationPolygon, () => ({
    __proto__: dart.getMethods(annotations.AnnotationPolygon.__proto__),
    build: dart.fnType(annotation.PdfAnnot, [widget$.Context, dart.nullable(rect$.PdfRect)])
  }));
  dart.setLibraryUri(annotations.AnnotationPolygon, I[85]);
  dart.setFieldSignature(annotations.AnnotationPolygon, () => ({
    __proto__: dart.getFields(annotations.AnnotationPolygon.__proto__),
    points: dart.finalFieldType(core.List$(point$.PdfPoint)),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    interiorColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    border: dart.finalFieldType(dart.nullable(border.PdfBorder)),
    author: dart.finalFieldType(dart.nullable(core.String)),
    date: dart.finalFieldType(dart.nullable(core.DateTime)),
    subject: dart.finalFieldType(dart.nullable(core.String)),
    content: dart.finalFieldType(dart.nullable(core.String))
  }));
  var points$2 = dart.privateName(annotations, "AnnotationInk.points");
  var color$21 = dart.privateName(annotations, "AnnotationInk.color");
  var border$7 = dart.privateName(annotations, "AnnotationInk.border");
  var author$3 = dart.privateName(annotations, "AnnotationInk.author");
  var date$5 = dart.privateName(annotations, "AnnotationInk.date");
  var subject$3 = dart.privateName(annotations, "AnnotationInk.subject");
  var content$2 = dart.privateName(annotations, "AnnotationInk.content");
  annotations.AnnotationInk = class AnnotationInk extends annotations.AnnotationBuilder {
    get points() {
      return this[points$2];
    }
    set points(value) {
      super.points = value;
    }
    get color() {
      return this[color$21];
    }
    set color(value) {
      super.color = value;
    }
    get border() {
      return this[border$7];
    }
    set border(value) {
      super.border = value;
    }
    get author() {
      return this[author$3];
    }
    set author(value) {
      super.author = value;
    }
    get date() {
      return this[date$5];
    }
    set date(value) {
      super.date = value;
    }
    get subject() {
      return this[subject$3];
    }
    set subject(value) {
      super.subject = value;
    }
    get content() {
      return this[content$2];
    }
    set content(value) {
      super.content = value;
    }
    static ['_#new#tearOff'](points, opts) {
      let color = opts && 'color' in opts ? opts.color : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let author = opts && 'author' in opts ? opts.author : null;
      let date = opts && 'date' in opts ? opts.date : null;
      let subject = opts && 'subject' in opts ? opts.subject : null;
      let content = opts && 'content' in opts ? opts.content : null;
      return new annotations.AnnotationInk.new(points, {color: color, border: border, author: author, date: date, subject: subject, content: content});
    }
    build(context, box) {
      let globalPoints = this.points[$map](T$.ListOfPdfPoint(), dart.fn(pList => pList[$map](point$.PdfPoint, dart.fn(e => context.localToGlobalPoint(e), T$.PdfPointToPdfPoint()))[$toList]({growable: false}), T$.ListOfPdfPointToListOfPdfPoint()))[$toList]({growable: false});
      let allPoints = this.points[$expand](point$.PdfPoint, dart.fn(pointList => pointList, T$.ListOfPdfPointToListOfPdfPoint()))[$toList]({growable: false});
      let minX = allPoints[$map](core.double, dart.fn(point => point.x, T$.PdfPointTodouble()))[$reduce](C[235] || CT.C235);
      let minY = allPoints[$map](core.double, dart.fn(point => point.y, T$.PdfPointTodouble()))[$reduce](C[235] || CT.C235);
      let maxX = allPoints[$map](core.double, dart.fn(point => point.x, T$.PdfPointTodouble()))[$reduce](C[237] || CT.C237);
      let maxY = allPoints[$map](core.double, dart.fn(point => point.y, T$.PdfPointTodouble()))[$reduce](C[237] || CT.C237);
      let rect = context.localToGlobal(new rect$.PdfRect.new(minX, minY, maxX - minX, maxY - minY));
      let pdfAnnotInk = new annotation.PdfAnnotInk.new(context.document, globalPoints, {rect: rect, border: this.border, color: this.color, date: this.date, author: this.author, subject: this.subject, content: this.content});
      return new annotation.PdfAnnot.new(context.page, pdfAnnotInk);
    }
  };
  (annotations.AnnotationInk.new = function(points, opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let content = opts && 'content' in opts ? opts.content : null;
    this[points$2] = points;
    this[color$21] = color;
    this[border$7] = border;
    this[author$3] = author;
    this[date$5] = date;
    this[subject$3] = subject;
    this[content$2] = content;
    ;
  }).prototype = annotations.AnnotationInk.prototype;
  dart.addTypeTests(annotations.AnnotationInk);
  dart.addTypeCaches(annotations.AnnotationInk);
  dart.setMethodSignature(annotations.AnnotationInk, () => ({
    __proto__: dart.getMethods(annotations.AnnotationInk.__proto__),
    build: dart.fnType(annotation.PdfAnnot, [widget$.Context, dart.nullable(rect$.PdfRect)])
  }));
  dart.setLibraryUri(annotations.AnnotationInk, I[85]);
  dart.setFieldSignature(annotations.AnnotationInk, () => ({
    __proto__: dart.getFields(annotations.AnnotationInk.__proto__),
    points: dart.finalFieldType(core.List$(core.List$(point$.PdfPoint))),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    border: dart.finalFieldType(dart.nullable(border.PdfBorder)),
    author: dart.finalFieldType(dart.nullable(core.String)),
    date: dart.finalFieldType(dart.nullable(core.DateTime)),
    subject: dart.finalFieldType(dart.nullable(core.String)),
    content: dart.finalFieldType(dart.nullable(core.String))
  }));
  var name$4 = dart.privateName(annotations, "AnnotationTextField.name");
  var border$8 = dart.privateName(annotations, "AnnotationTextField.border");
  var flags$2 = dart.privateName(annotations, "AnnotationTextField.flags");
  var date$6 = dart.privateName(annotations, "AnnotationTextField.date");
  var color$22 = dart.privateName(annotations, "AnnotationTextField.color");
  var backgroundColor$3 = dart.privateName(annotations, "AnnotationTextField.backgroundColor");
  var highlighting$1 = dart.privateName(annotations, "AnnotationTextField.highlighting");
  var maxLength$0 = dart.privateName(annotations, "AnnotationTextField.maxLength");
  var value$7 = dart.privateName(annotations, "AnnotationTextField.value");
  var defaultValue$0 = dart.privateName(annotations, "AnnotationTextField.defaultValue");
  var textStyle$4 = dart.privateName(annotations, "AnnotationTextField.textStyle");
  var alternateName$0 = dart.privateName(annotations, "AnnotationTextField.alternateName");
  var mappingName$0 = dart.privateName(annotations, "AnnotationTextField.mappingName");
  var fieldFlags$0 = dart.privateName(annotations, "AnnotationTextField.fieldFlags");
  var author$4 = dart.privateName(annotations, "AnnotationTextField.author");
  var subject$4 = dart.privateName(annotations, "AnnotationTextField.subject");
  annotations.AnnotationTextField = class AnnotationTextField extends annotations.AnnotationBuilder {
    get name() {
      return this[name$4];
    }
    set name(value) {
      super.name = value;
    }
    get border() {
      return this[border$8];
    }
    set border(value) {
      super.border = value;
    }
    get flags() {
      return this[flags$2];
    }
    set flags(value) {
      super.flags = value;
    }
    get date() {
      return this[date$6];
    }
    set date(value) {
      super.date = value;
    }
    get color() {
      return this[color$22];
    }
    set color(value) {
      super.color = value;
    }
    get backgroundColor() {
      return this[backgroundColor$3];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get highlighting() {
      return this[highlighting$1];
    }
    set highlighting(value) {
      super.highlighting = value;
    }
    get maxLength() {
      return this[maxLength$0];
    }
    set maxLength(value) {
      super.maxLength = value;
    }
    get value() {
      return this[value$7];
    }
    set value(value) {
      super.value = value;
    }
    get defaultValue() {
      return this[defaultValue$0];
    }
    set defaultValue(value) {
      super.defaultValue = value;
    }
    get textStyle() {
      return this[textStyle$4];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get alternateName() {
      return this[alternateName$0];
    }
    set alternateName(value) {
      super.alternateName = value;
    }
    get mappingName() {
      return this[mappingName$0];
    }
    set mappingName(value) {
      super.mappingName = value;
    }
    get fieldFlags() {
      return this[fieldFlags$0];
    }
    set fieldFlags(value) {
      super.fieldFlags = value;
    }
    get author() {
      return this[author$4];
    }
    set author(value) {
      super.author = value;
    }
    get subject() {
      return this[subject$4];
    }
    set subject(value) {
      super.subject = value;
    }
    static ['_#new#tearOff'](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let flags = opts && 'flags' in opts ? opts.flags : null;
      let date = opts && 'date' in opts ? opts.date : null;
      let subject = opts && 'subject' in opts ? opts.subject : null;
      let author = opts && 'author' in opts ? opts.author : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
      let maxLength = opts && 'maxLength' in opts ? opts.maxLength : null;
      let alternateName = opts && 'alternateName' in opts ? opts.alternateName : null;
      let mappingName = opts && 'mappingName' in opts ? opts.mappingName : null;
      let fieldFlags = opts && 'fieldFlags' in opts ? opts.fieldFlags : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      return new annotations.AnnotationTextField.new({name: name, border: border, flags: flags, date: date, subject: subject, author: author, color: color, backgroundColor: backgroundColor, highlighting: highlighting, maxLength: maxLength, alternateName: alternateName, mappingName: mappingName, fieldFlags: fieldFlags, value: value, defaultValue: defaultValue, textStyle: textStyle});
    }
    build(context, box) {
      let _textStyle = theme$.Theme.of(context).defaultTextStyle.merge(this.textStyle);
      return new annotation.PdfAnnot.new(context.page, new annotation.PdfTextField.new({rect: context.localToGlobal(dart.nullCheck(box)), fieldName: this.name, border: this.border, flags: this.flags, date: this.date, author: this.author, subject: this.subject, color: this.color, backgroundColor: this.backgroundColor, highlighting: this.highlighting, maxLength: this.maxLength, alternateName: this.alternateName, mappingName: this.mappingName, fieldFlags: this.fieldFlags, value: this.value, defaultValue: this.defaultValue, font: dart.nullCheck(_textStyle.font).getFont(context), fontSize: dart.nullCheck(_textStyle.fontSize), textColor: dart.nullCheck(_textStyle.color)}));
    }
  };
  (annotations.AnnotationTextField.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let highlighting = opts && 'highlighting' in opts ? opts.highlighting : null;
    let maxLength = opts && 'maxLength' in opts ? opts.maxLength : null;
    let alternateName = opts && 'alternateName' in opts ? opts.alternateName : null;
    let mappingName = opts && 'mappingName' in opts ? opts.mappingName : null;
    let fieldFlags = opts && 'fieldFlags' in opts ? opts.fieldFlags : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    this[name$4] = name;
    this[border$8] = border;
    this[flags$2] = flags;
    this[date$6] = date;
    this[subject$4] = subject;
    this[author$4] = author;
    this[color$22] = color;
    this[backgroundColor$3] = backgroundColor;
    this[highlighting$1] = highlighting;
    this[maxLength$0] = maxLength;
    this[alternateName$0] = alternateName;
    this[mappingName$0] = mappingName;
    this[fieldFlags$0] = fieldFlags;
    this[value$7] = value;
    this[defaultValue$0] = defaultValue;
    this[textStyle$4] = textStyle;
    ;
  }).prototype = annotations.AnnotationTextField.prototype;
  dart.addTypeTests(annotations.AnnotationTextField);
  dart.addTypeCaches(annotations.AnnotationTextField);
  dart.setMethodSignature(annotations.AnnotationTextField, () => ({
    __proto__: dart.getMethods(annotations.AnnotationTextField.__proto__),
    build: dart.fnType(annotation.PdfAnnot, [widget$.Context, dart.nullable(rect$.PdfRect)])
  }));
  dart.setLibraryUri(annotations.AnnotationTextField, I[85]);
  dart.setFieldSignature(annotations.AnnotationTextField, () => ({
    __proto__: dart.getFields(annotations.AnnotationTextField.__proto__),
    name: dart.finalFieldType(dart.nullable(core.String)),
    border: dart.finalFieldType(dart.nullable(border.PdfBorder)),
    flags: dart.finalFieldType(dart.nullable(core.Set$(annotation.PdfAnnotFlags))),
    date: dart.finalFieldType(dart.nullable(core.DateTime)),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    backgroundColor: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    highlighting: dart.finalFieldType(dart.nullable(annotation.PdfAnnotHighlighting)),
    maxLength: dart.finalFieldType(dart.nullable(core.int)),
    value: dart.finalFieldType(dart.nullable(core.String)),
    defaultValue: dart.finalFieldType(dart.nullable(core.String)),
    textStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    alternateName: dart.finalFieldType(dart.nullable(core.String)),
    mappingName: dart.finalFieldType(dart.nullable(core.String)),
    fieldFlags: dart.finalFieldType(dart.nullable(core.Set$(annotation.PdfFieldFlags))),
    author: dart.finalFieldType(dart.nullable(core.String)),
    subject: dart.finalFieldType(dart.nullable(core.String))
  }));
  var builder$1 = dart.privateName(annotations, "Annotation.builder");
  annotations.Annotation = class Annotation extends widget$.SingleChildWidget {
    get builder() {
      return this[builder$1];
    }
    set builder(value) {
      super.builder = value;
    }
    static ['_#new#tearOff'](opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      return new annotations.Annotation.new({child: child, builder: builder});
    }
    debugPaint(context) {
      let t107;
      t107 = context.canvas;
      (() => {
        t107.setFillColor(colors.PdfColors.pink);
        t107.drawBox(dart.nullCheck(this.box));
        t107.fillPath();
        return t107;
      })();
    }
    paint(context) {
      let t107;
      super.paint(context);
      this.paintChild(context);
      t107 = this.builder;
      t107 == null ? null : t107.build(context, this.box);
    }
  };
  (annotations.Annotation.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    this[builder$1] = builder;
    annotations.Annotation.__proto__.new.call(this, {child: child});
    ;
  }).prototype = annotations.Annotation.prototype;
  dart.addTypeTests(annotations.Annotation);
  dart.addTypeCaches(annotations.Annotation);
  dart.setLibraryUri(annotations.Annotation, I[85]);
  dart.setFieldSignature(annotations.Annotation, () => ({
    __proto__: dart.getFields(annotations.Annotation.__proto__),
    builder: dart.finalFieldType(dart.nullable(annotations.AnnotationBuilder))
  }));
  annotations.Link = class Link extends annotations.Annotation {
    static ['_#new#tearOff'](opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let destination = opts && 'destination' in opts ? opts.destination : null;
      return new annotations.Link.new({child: child, destination: destination});
    }
  };
  (annotations.Link.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let destination = opts && 'destination' in opts ? opts.destination : null;
    annotations.Link.__proto__.new.call(this, {child: child, builder: new annotations.AnnotationLink.new(destination)});
    ;
  }).prototype = annotations.Link.prototype;
  dart.addTypeTests(annotations.Link);
  dart.addTypeCaches(annotations.Link);
  dart.setLibraryUri(annotations.Link, I[85]);
  annotations.UrlLink = class UrlLink extends annotations.Annotation {
    static ['_#new#tearOff'](opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let destination = opts && 'destination' in opts ? opts.destination : null;
      return new annotations.UrlLink.new({child: child, destination: destination});
    }
  };
  (annotations.UrlLink.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let destination = opts && 'destination' in opts ? opts.destination : null;
    annotations.UrlLink.__proto__.new.call(this, {child: child, builder: new annotations.AnnotationUrl.new(destination)});
    ;
  }).prototype = annotations.UrlLink.prototype;
  dart.addTypeTests(annotations.UrlLink);
  dart.addTypeCaches(annotations.UrlLink);
  dart.setLibraryUri(annotations.UrlLink, I[85]);
  annotations.SquareAnnotation = class SquareAnnotation extends annotations.Annotation {
    static ['_#new#tearOff'](opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let author = opts && 'author' in opts ? opts.author : null;
      let date = opts && 'date' in opts ? opts.date : null;
      let subject = opts && 'subject' in opts ? opts.subject : null;
      let content = opts && 'content' in opts ? opts.content : null;
      return new annotations.SquareAnnotation.new({child: child, color: color, interiorColor: interiorColor, border: border, author: author, date: date, subject: subject, content: content});
    }
  };
  (annotations.SquareAnnotation.new = function(opts) {
    let t108, t108$, t107;
    let child = opts && 'child' in opts ? opts.child : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let content = opts && 'content' in opts ? opts.content : null;
    annotations.SquareAnnotation.__proto__.new.call(this, {child: (t107 = child, t107 == null ? new shape.Rectangle.new({fillColor: interiorColor, strokeWidth: (t108$ = (t108 = border, t108 == null ? null : t108.width), t108$ == null ? 1.0 : t108$), strokeColor: color}) : t107), builder: new annotations.AnnotationSquare.new({color: color, interiorColor: interiorColor, border: border, author: author, date: date, content: content, subject: subject})});
    ;
  }).prototype = annotations.SquareAnnotation.prototype;
  dart.addTypeTests(annotations.SquareAnnotation);
  dart.addTypeCaches(annotations.SquareAnnotation);
  dart.setLibraryUri(annotations.SquareAnnotation, I[85]);
  annotations.CircleAnnotation = class CircleAnnotation extends annotations.Annotation {
    static ['_#new#tearOff'](opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let author = opts && 'author' in opts ? opts.author : null;
      let date = opts && 'date' in opts ? opts.date : null;
      let subject = opts && 'subject' in opts ? opts.subject : null;
      let content = opts && 'content' in opts ? opts.content : null;
      return new annotations.CircleAnnotation.new({child: child, color: color, interiorColor: interiorColor, border: border, author: author, date: date, subject: subject, content: content});
    }
  };
  (annotations.CircleAnnotation.new = function(opts) {
    let t108, t108$, t107;
    let child = opts && 'child' in opts ? opts.child : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let content = opts && 'content' in opts ? opts.content : null;
    annotations.CircleAnnotation.__proto__.new.call(this, {child: (t107 = child, t107 == null ? new shape.Circle.new({fillColor: interiorColor, strokeWidth: (t108$ = (t108 = border, t108 == null ? null : t108.width), t108$ == null ? 1.0 : t108$), strokeColor: color}) : t107), builder: new annotations.AnnotationCircle.new({color: color, interiorColor: interiorColor, border: border, author: author, date: date, content: content, subject: subject})});
    ;
  }).prototype = annotations.CircleAnnotation.prototype;
  dart.addTypeTests(annotations.CircleAnnotation);
  dart.addTypeCaches(annotations.CircleAnnotation);
  dart.setLibraryUri(annotations.CircleAnnotation, I[85]);
  annotations.PolygonAnnotation = class PolygonAnnotation extends annotations.Annotation {
    static ['_#new#tearOff'](opts) {
      let points = opts && 'points' in opts ? opts.points : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let author = opts && 'author' in opts ? opts.author : null;
      let date = opts && 'date' in opts ? opts.date : null;
      let subject = opts && 'subject' in opts ? opts.subject : null;
      let content = opts && 'content' in opts ? opts.content : null;
      return new annotations.PolygonAnnotation.new({points: points, child: child, color: color, interiorColor: interiorColor, border: border, author: author, date: date, subject: subject, content: content});
    }
  };
  (annotations.PolygonAnnotation.new = function(opts) {
    let t108, t108$, t107;
    let points = opts && 'points' in opts ? opts.points : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let interiorColor = opts && 'interiorColor' in opts ? opts.interiorColor : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    let content = opts && 'content' in opts ? opts.content : null;
    annotations.PolygonAnnotation.__proto__.new.call(this, {child: (t107 = child, t107 == null ? new shape.Polygon.new({points: points, strokeColor: color, fillColor: interiorColor, strokeWidth: (t108$ = (t108 = border, t108 == null ? null : t108.width), t108$ == null ? 1.0 : t108$)}) : t107), builder: new annotations.AnnotationPolygon.new(points, {color: color, interiorColor: interiorColor, border: border, author: author, date: date, content: content, subject: subject})});
    ;
  }).prototype = annotations.PolygonAnnotation.prototype;
  dart.addTypeTests(annotations.PolygonAnnotation);
  dart.addTypeCaches(annotations.PolygonAnnotation);
  dart.setLibraryUri(annotations.PolygonAnnotation, I[85]);
  annotations.PolyLineAnnotation = class PolyLineAnnotation extends annotations.Annotation {
    static ['_#new#tearOff'](opts) {
      let points = opts && 'points' in opts ? opts.points : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let author = opts && 'author' in opts ? opts.author : null;
      let date = opts && 'date' in opts ? opts.date : null;
      let content = opts && 'content' in opts ? opts.content : null;
      let subject = opts && 'subject' in opts ? opts.subject : null;
      return new annotations.PolyLineAnnotation.new({points: points, color: color, border: border, author: author, date: date, content: content, subject: subject});
    }
  };
  (annotations.PolyLineAnnotation.new = function(opts) {
    let t107, t107$;
    let points = opts && 'points' in opts ? opts.points : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let content = opts && 'content' in opts ? opts.content : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    annotations.PolyLineAnnotation.__proto__.new.call(this, {child: new shape.Polygon.new({points: points, strokeColor: color, close: false, strokeWidth: (t107$ = (t107 = border, t107 == null ? null : t107.width), t107$ == null ? 1.0 : t107$)}), builder: new annotations.AnnotationPolygon.new(points, {color: color, border: border, author: author, date: date, content: content, subject: subject})});
    ;
  }).prototype = annotations.PolyLineAnnotation.prototype;
  dart.addTypeTests(annotations.PolyLineAnnotation);
  dart.addTypeCaches(annotations.PolyLineAnnotation);
  dart.setLibraryUri(annotations.PolyLineAnnotation, I[85]);
  annotations.InkAnnotation = class InkAnnotation extends annotations.Annotation {
    static ['_#new#tearOff'](opts) {
      let points = opts && 'points' in opts ? opts.points : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let author = opts && 'author' in opts ? opts.author : null;
      let date = opts && 'date' in opts ? opts.date : null;
      let content = opts && 'content' in opts ? opts.content : null;
      let subject = opts && 'subject' in opts ? opts.subject : null;
      return new annotations.InkAnnotation.new({points: points, child: child, color: color, border: border, author: author, date: date, content: content, subject: subject});
    }
  };
  (annotations.InkAnnotation.new = function(opts) {
    let t108, t108$, t107;
    let points = opts && 'points' in opts ? opts.points : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let date = opts && 'date' in opts ? opts.date : null;
    let content = opts && 'content' in opts ? opts.content : null;
    let subject = opts && 'subject' in opts ? opts.subject : null;
    annotations.InkAnnotation.__proto__.new.call(this, {child: (t107 = child, t107 == null ? new shape.InkList.new({points: points, strokeColor: color, strokeWidth: (t108$ = (t108 = border, t108 == null ? null : t108.width), t108$ == null ? 1.0 : t108$)}) : t107), builder: new annotations.AnnotationInk.new(points, {color: color, border: border, author: author, date: date, content: content, subject: subject})});
    ;
  }).prototype = annotations.InkAnnotation.prototype;
  dart.addTypeTests(annotations.InkAnnotation);
  dart.addTypeCaches(annotations.InkAnnotation);
  dart.setLibraryUri(annotations.InkAnnotation, I[85]);
  var title$2 = dart.privateName(annotations, "Outline.title");
  var level$0 = dart.privateName(annotations, "Outline.level");
  var color$23 = dart.privateName(annotations, "Outline.color");
  var style$5 = dart.privateName(annotations, "Outline.style");
  var _outline = dart.privateName(annotations, "_outline");
  var _buildOutline = dart.privateName(annotations, "_buildOutline");
  annotations.Outline = class Outline extends annotations.Anchor {
    get title() {
      return this[title$2];
    }
    set title(value) {
      super.title = value;
    }
    get level() {
      return this[level$0];
    }
    set level(value) {
      super.level = value;
    }
    get color() {
      return this[color$23];
    }
    set color(value) {
      super.color = value;
    }
    get style() {
      return this[style$5];
    }
    set style(value) {
      super.style = value;
    }
    static ['_#new#tearOff'](opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let title = opts && 'title' in opts ? opts.title : null;
      let level = opts && 'level' in opts ? opts.level : 0;
      let color = opts && 'color' in opts ? opts.color : null;
      let style = opts && 'style' in opts ? opts.style : C[49] || CT.C49;
      return new annotations.Outline.new({child: child, name: name, title: title, level: level, color: color, style: style});
    }
    layout(context, constraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      super.layout(context, constraints, {parentUsesSize: parentUsesSize});
      this[_buildOutline](context);
    }
    debugPaint(context) {
      let t107;
      t107 = context.canvas;
      (() => {
        t107.setFillColor(colors.PdfColors.pink100);
        t107.drawBox(dart.nullCheck(this.box));
        t107.fillPath();
        return t107;
      })();
    }
    [_buildOutline](context) {
      let t107, t107$;
      if (this[_outline] != null) {
        return;
      }
      this[_outline] = (t107 = new outline.PdfOutline.new(context.document, {title: this.title, anchor: this.name, color: this.color, style: this.style, page: context.page}), (() => {
        t107.effectiveLevel = this.level;
        return t107;
      })());
      let root = context.document.outline;
      let actualLevel = -1;
      let candidate = root;
      while (candidate.outlines[$isNotEmpty]) {
        candidate = candidate.outlines[$last];
        actualLevel = actualLevel + 1;
      }
      while (!candidate[$_equals](root)) {
        let candidateLevel = (t107$ = candidate.effectiveLevel, t107$ == null ? actualLevel : t107$);
        if (candidateLevel < this.level) {
          break;
        }
        candidate = dart.nullCheck(candidate.parent);
        actualLevel = actualLevel - 1;
      }
      candidate.add(dart.nullCheck(this[_outline]));
    }
  };
  (annotations.Outline.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let level = opts && 'level' in opts ? opts.level : 0;
    let color = opts && 'color' in opts ? opts.color : null;
    let style = opts && 'style' in opts ? opts.style : C[49] || CT.C49;
    this[_outline] = null;
    this[title$2] = title;
    this[level$0] = level;
    this[color$23] = color;
    this[style$5] = style;
    if (!(level >= 0)) dart.assertFailed(null, I[86], 586, 16, "level >= 0");
    annotations.Outline.__proto__.new.call(this, {child: child, name: name, setX: true});
    ;
  }).prototype = annotations.Outline.prototype;
  dart.addTypeTests(annotations.Outline);
  dart.addTypeCaches(annotations.Outline);
  dart.setMethodSignature(annotations.Outline, () => ({
    __proto__: dart.getMethods(annotations.Outline.__proto__),
    [_buildOutline]: dart.fnType(dart.void, [widget$.Context])
  }));
  dart.setLibraryUri(annotations.Outline, I[85]);
  dart.setFieldSignature(annotations.Outline, () => ({
    __proto__: dart.getFields(annotations.Outline.__proto__),
    title: dart.finalFieldType(core.String),
    level: dart.finalFieldType(core.int),
    color: dart.finalFieldType(dart.nullable(color$.PdfColor)),
    style: dart.finalFieldType(outline.PdfOutlineStyle),
    [_outline]: dart.fieldType(dart.nullable(outline.PdfOutline))
  }));
  dart.trackLibraries("packages/pdf/src/widgets/table.dart", {
    "package:pdf/src/widgets/table.dart": table,
    "package:pdf/src/widgets/progress.dart": progress,
    "package:pdf/src/widgets/partitions.dart": partitions,
    "package:pdf/src/widgets/grid_view.dart": grid_view,
    "package:pdf/src/widgets/grid_paper.dart": grid_paper,
    "package:pdf/src/widgets/forms.dart": forms,
    "package:pdf/src/widgets/content.dart": content,
    "package:pdf/src/widgets/clip.dart": clip,
    "package:pdf/src/widgets/chart/pie_chart.dart": pie_chart,
    "package:pdf/src/widgets/chart/line_chart.dart": line_chart,
    "package:pdf/src/widgets/wrap.dart": wrap$,
    "package:pdf/src/widgets/chart/legend.dart": legend,
    "package:pdf/src/widgets/chart/grid_radial.dart": grid_radial,
    "package:pdf/src/widgets/chart/point_chart.dart": point_chart,
    "package:pdf/src/widgets/chart/grid_axis.dart": grid_axis,
    "package:pdf/src/widgets/chart/grid_cartesian.dart": grid_cartesian,
    "package:pdf/src/widgets/stack.dart": stack,
    "package:pdf/src/widgets/chart/chart.dart": chart,
    "package:pdf/src/widgets/chart/bar_chart.dart": bar_chart,
    "package:pdf/src/widgets/barcode.dart": barcode$,
    "package:pdf/src/widgets/shape.dart": shape,
    "package:pdf/src/widgets/container.dart": container$,
    "package:pdf/src/svg/mask_path.dart": mask_path,
    "package:pdf/src/svg/use.dart": use,
    "package:pdf/src/svg/text.dart": text$0,
    "package:pdf/src/svg/symbol.dart": symbol,
    "package:pdf/src/svg/path.dart": path,
    "package:pdf/src/svg/image.dart": image$0,
    "package:pdf/src/svg/parser.dart": parser$,
    "package:pdf/src/svg/transform.dart": transform$,
    "package:pdf/src/svg/group.dart": group,
    "package:pdf/src/svg/clip_path.dart": clip_path,
    "package:pdf/src/svg/operation.dart": operation,
    "package:pdf/src/svg/gradient.dart": gradient$,
    "package:pdf/src/svg/color.dart": color$0,
    "package:pdf/src/svg/brush.dart": brush$,
    "package:pdf/src/svg/painter.dart": painter$,
    "package:pdf/src/widgets/svg.dart": svg$,
    "package:pdf/src/widgets/placeholders.dart": placeholders,
    "package:pdf/src/widgets/icon.dart": icon$,
    "package:pdf/src/widgets/theme.dart": theme$,
    "package:pdf/src/widgets/font.dart": font$,
    "package:pdf/src/widgets/decoration.dart": decoration$,
    "package:pdf/src/widgets/text_style.dart": text_style,
    "package:pdf/src/widgets/flex.dart": flex$,
    "package:pdf/src/widgets/multi_page.dart": multi_page,
    "package:pdf/src/widgets/image_provider.dart": image_provider,
    "package:pdf/src/widgets/image.dart": image$1,
    "package:pdf/src/widgets/text.dart": text$1,
    "package:pdf/src/widgets/page_theme.dart": page_theme,
    "package:pdf/src/widgets/page.dart": page$,
    "package:pdf/src/widgets/document.dart": document$0,
    "package:pdf/src/widgets/widget.dart": widget$,
    "package:pdf/src/widgets/border_radius.dart": border_radius,
    "package:pdf/src/widgets/box_border.dart": box_border,
    "package:pdf/src/widgets/basic.dart": basic,
    "package:pdf/src/widgets/geometry.dart": geometry,
    "package:pdf/src/widgets/annotations.dart": annotations,
    "package:pdf/widgets.dart": widgets
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["table.dart","box_border.dart","multi_page.dart","widget.dart","progress.dart","partitions.dart","grid_view.dart","grid_paper.dart","forms.dart","content.dart","clip.dart","chart/chart.dart","chart/pie_chart.dart","chart/point_chart.dart","chart/line_chart.dart","wrap.dart","chart/legend.dart","chart/grid_radial.dart","chart/grid_axis.dart","chart/grid_cartesian.dart","stack.dart","chart/bar_chart.dart","barcode.dart","shape.dart","container.dart","../svg/mask_path.dart","../svg/operation.dart","../svg/use.dart","../svg/text.dart","../svg/group.dart","../svg/symbol.dart","../svg/path.dart","../svg/image.dart","../svg/parser.dart","../svg/transform.dart","../svg/clip_path.dart","../svg/gradient.dart","../svg/color.dart","../svg/brush.dart","../svg/painter.dart","svg.dart","decoration.dart","placeholders.dart","icon.dart","theme.dart","font.dart","text_style.dart","flex.dart","page.dart","image_provider.dart","image.dart","text.dart","page_theme.dart","document.dart","border_radius.dart","basic.dart","geometry.dart","annotations.dart"],"names":[],"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","file":"../../../../../../../../../../../../packages/pdf/src/widgets/table.dart.lib.js"}');
  // Exports:
  return {
    src__widgets__table: table,
    src__widgets__progress: progress,
    src__widgets__partitions: partitions,
    src__widgets__grid_view: grid_view,
    src__widgets__grid_paper: grid_paper,
    src__widgets__forms: forms,
    src__widgets__content: content,
    src__widgets__clip: clip,
    src__widgets__chart__pie_chart: pie_chart,
    src__widgets__chart__line_chart: line_chart,
    src__widgets__wrap: wrap$,
    src__widgets__chart__legend: legend,
    src__widgets__chart__grid_radial: grid_radial,
    src__widgets__chart__point_chart: point_chart,
    src__widgets__chart__grid_axis: grid_axis,
    src__widgets__chart__grid_cartesian: grid_cartesian,
    src__widgets__stack: stack,
    src__widgets__chart__chart: chart,
    src__widgets__chart__bar_chart: bar_chart,
    src__widgets__barcode: barcode$,
    src__widgets__shape: shape,
    src__widgets__container: container$,
    src__svg__mask_path: mask_path,
    src__svg__use: use,
    src__svg__text: text$0,
    src__svg__symbol: symbol,
    src__svg__path: path,
    src__svg__image: image$0,
    src__svg__parser: parser$,
    src__svg__transform: transform$,
    src__svg__group: group,
    src__svg__clip_path: clip_path,
    src__svg__operation: operation,
    src__svg__gradient: gradient$,
    src__svg__color: color$0,
    src__svg__brush: brush$,
    src__svg__painter: painter$,
    src__widgets__svg: svg$,
    src__widgets__placeholders: placeholders,
    src__widgets__icon: icon$,
    src__widgets__theme: theme$,
    src__widgets__font: font$,
    src__widgets__decoration: decoration$,
    src__widgets__text_style: text_style,
    src__widgets__flex: flex$,
    src__widgets__multi_page: multi_page,
    src__widgets__image_provider: image_provider,
    src__widgets__image: image$1,
    src__widgets__text: text$1,
    src__widgets__page_theme: page_theme,
    src__widgets__page: page$,
    src__widgets__document: document$0,
    src__widgets__widget: widget$,
    src__widgets__border_radius: border_radius,
    src__widgets__box_border: box_border,
    src__widgets__basic: basic,
    src__widgets__geometry: geometry,
    src__widgets__annotations: annotations,
    widgets: widgets
  };
}));

//# sourceMappingURL=table.dart.lib.js.map
