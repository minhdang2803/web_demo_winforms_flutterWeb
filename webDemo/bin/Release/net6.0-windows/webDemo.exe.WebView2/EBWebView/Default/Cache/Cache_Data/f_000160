define(['dart_sdk', 'packages/rxdart/src/utils/collection_extensions.dart', 'packages/rxdart/src/utils/forwarding_sink.dart', 'packages/rxdart/src/utils/forwarding_stream.dart'], (function load__packages__rxdart__src__transformers__backpressure__backpressure_dart(dart_sdk, packages__rxdart__src__utils__collection_extensions$46dart, packages__rxdart__src__utils__forwarding_sink$46dart, packages__rxdart__src__utils__forwarding_stream$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const collection = dart_sdk.collection;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const collection_extensions = packages__rxdart__src__utils__collection_extensions$46dart.src__utils__collection_extensions;
  const forwarding_sink = packages__rxdart__src__utils__forwarding_sink$46dart.src__utils__forwarding_sink;
  const forwarding_stream = packages__rxdart__src__utils__forwarding_stream$46dart.src__utils__forwarding_stream;
  var backpressure = Object.create(dart.library);
  var $length = dartx.length;
  var $isNotEmpty = dartx.isNotEmpty;
  var $last = dartx.last;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T$ = {
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    dynamicTovoid: () => (T$.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const({
        __proto__: backpressure.WindowStrategy.prototype,
        [_Enum__name]: "everyEvent",
        [_Enum_index]: 0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: backpressure.WindowStrategy.prototype,
        [_Enum__name]: "eventAfterLastWindow",
        [_Enum_index]: 1
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: backpressure.WindowStrategy.prototype,
        [_Enum__name]: "firstEventOnly",
        [_Enum_index]: 2
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: backpressure.WindowStrategy.prototype,
        [_Enum__name]: "onHandler",
        [_Enum_index]: 3
      });
    },
    get C0() {
      return C[0] = dart.constList([C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4], backpressure.WindowStrategy);
    }
  }, false);
  var C = Array(5).fill(void 0);
  var I = ["package:rxdart/src/transformers/backpressure/backpressure.dart"];
  var _name = dart.privateName(core, "_name");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  backpressure.WindowStrategy = class WindowStrategy extends core._Enum {
    toString() {
      return "WindowStrategy." + this[_name];
    }
  };
  (backpressure.WindowStrategy.new = function(index, name) {
    backpressure.WindowStrategy.__proto__.new.call(this, index, name);
    ;
  }).prototype = backpressure.WindowStrategy.prototype;
  dart.addTypeTests(backpressure.WindowStrategy);
  dart.addTypeCaches(backpressure.WindowStrategy);
  dart.setLibraryUri(backpressure.WindowStrategy, I[0]);
  dart.setStaticFieldSignature(backpressure.WindowStrategy, () => ['values', 'everyEvent', 'eventAfterLastWindow', 'firstEventOnly', 'onHandler']);
  dart.defineExtensionMethods(backpressure.WindowStrategy, ['toString']);
  dart.defineLazy(backpressure.WindowStrategy, {
    /*backpressure.WindowStrategy.values*/get values() {
      return C[0] || CT.C0;
    },
    /*backpressure.WindowStrategy.everyEvent*/get everyEvent() {
      return C[1] || CT.C1;
    },
    /*backpressure.WindowStrategy.eventAfterLastWindow*/get eventAfterLastWindow() {
      return C[2] || CT.C2;
    },
    /*backpressure.WindowStrategy.firstEventOnly*/get firstEventOnly() {
      return C[3] || CT.C3;
    },
    /*backpressure.WindowStrategy.onHandler*/get onHandler() {
      return C[4] || CT.C4;
    }
  }, false);
  var _hasData = dart.privateName(backpressure, "_hasData");
  var _mainClosed = dart.privateName(backpressure, "_mainClosed");
  var _windowSubscription = dart.privateName(backpressure, "_windowSubscription");
  var _strategy$ = dart.privateName(backpressure, "_strategy");
  var _windowStreamFactory$ = dart.privateName(backpressure, "_windowStreamFactory");
  var _onWindowStart$ = dart.privateName(backpressure, "_onWindowStart");
  var _onWindowEnd$ = dart.privateName(backpressure, "_onWindowEnd");
  var _startBufferEvery$ = dart.privateName(backpressure, "_startBufferEvery");
  var _closeWindowWhen$ = dart.privateName(backpressure, "_closeWindowWhen");
  var _ignoreEmptyWindows$ = dart.privateName(backpressure, "_ignoreEmptyWindows");
  var _dispatchOnClose$ = dart.privateName(backpressure, "_dispatchOnClose");
  const _is__BackpressureStreamSink_default = Symbol('_is__BackpressureStreamSink_default');
  backpressure._BackpressureStreamSink$ = dart.generic((S, T) => {
    var __t$DoubleLinkedQueueOfS = () => (__t$DoubleLinkedQueueOfS = dart.constFn(collection.DoubleLinkedQueue$(S)))();
    var __t$ListOfS = () => (__t$ListOfS = dart.constFn(core.List$(S)))();
    var __t$EventSinkOfT = () => (__t$EventSinkOfT = dart.constFn(async.EventSink$(T)))();
    class _BackpressureStreamSink extends forwarding_sink.ForwardingSink$(S, T) {
      static ['_#new#tearOff'](S, T, _strategy, _windowStreamFactory, _onWindowStart, _onWindowEnd, _startBufferEvery, _closeWindowWhen, _ignoreEmptyWindows, _dispatchOnClose, maxLengthQueue) {
        return new (backpressure._BackpressureStreamSink$(S, T)).new(_strategy, _windowStreamFactory, _onWindowStart, _onWindowEnd, _startBufferEvery, _closeWindowWhen, _ignoreEmptyWindows, _dispatchOnClose, maxLengthQueue);
      }
      onData(data) {
        S.as(data);
        this[_hasData] = true;
        this.maybeCreateWindow(data, this.sink);
        if (this.skip === 0) {
          this.queue.add(data);
          if (this.maxLengthQueue != null && this.queue[$length] > dart.nullCheck(this.maxLengthQueue)) {
            collection_extensions['RemoveFirstElementsQueueExtension|removeFirstElements'](S, this.queue, this.queue[$length] - dart.nullCheck(this.maxLengthQueue));
          }
        }
        if (this.skip > 0) {
          this.skip = this.skip - 1;
        }
        this.maybeCloseWindow(this.sink);
      }
      onError(e, st) {
        return this.sink.addError(e, st);
      }
      onDone() {
        let t2;
        this[_mainClosed] = true;
        if (this[_strategy$] === backpressure.WindowStrategy.eventAfterLastWindow) {
          return;
        }
        if (this[_dispatchOnClose$] && this.queue[$isNotEmpty]) {
          this.resolveWindowStart(this.queue[$last], this.sink);
        }
        this.resolveWindowEnd(this.sink, true);
        this.queue.clear();
        t2 = this[_windowSubscription];
        t2 == null ? null : t2.cancel();
        this.sink.close();
      }
      onCancel() {
        let t2;
        t2 = this[_windowSubscription];
        return t2 == null ? null : t2.cancel();
      }
      onListen() {
      }
      onPause() {
        let t2;
        t2 = this[_windowSubscription];
        return t2 == null ? null : t2.pause();
      }
      onResume() {
        let t2;
        t2 = this[_windowSubscription];
        return t2 == null ? null : t2.resume();
      }
      maybeCreateWindow(event, sink) {
        let t2;
        S.as(event);
        __t$EventSinkOfT().as(sink);
        switch (this[_strategy$]) {
          case C[2] || CT.C2:
            {
              if (this[_windowSubscription] != null) return;
              this[_windowSubscription] = this.singleWindow(event, sink);
              this.resolveWindowStart(event, sink);
              break;
            }
          case C[3] || CT.C3:
            {
              if (this[_windowSubscription] != null) return;
              this[_windowSubscription] = this.multiWindow(event, sink);
              this.resolveWindowStart(event, sink);
              break;
            }
          case C[1] || CT.C1:
            {
              t2 = this[_windowSubscription];
              t2 == null ? null : t2.cancel();
              this[_windowSubscription] = this.singleWindow(event, sink);
              this.resolveWindowStart(event, sink);
              break;
            }
          case C[4] || CT.C4:
            {
              break;
            }
        }
      }
      maybeCloseWindow(sink) {
        __t$EventSinkOfT().as(sink);
        if (this[_closeWindowWhen$] != null && dart.nullCheck(this[_closeWindowWhen$])(this.unmodifiableQueue)) {
          this.resolveWindowEnd(sink);
        }
      }
      singleWindow(event, sink) {
        S.as(event);
        __t$EventSinkOfT().as(sink);
        return this.buildStream(event, sink).take(1).listen(null, {onError: dart.bind(sink, 'addError'), onDone: dart.fn(() => this.resolveWindowEnd(sink, this[_mainClosed]), T$.VoidTovoid())});
      }
      multiWindow(event, sink) {
        S.as(event);
        __t$EventSinkOfT().as(sink);
        return this.buildStream(event, sink).listen(dart.fn(_ => this.resolveWindowEnd(sink), T$.dynamicTovoid()), {onError: dart.bind(sink, 'addError'), onDone: dart.fn(() => this.resolveWindowEnd(sink), T$.VoidTovoid())});
      }
      buildStream(event, sink) {
        let t2;
        S.as(event);
        __t$EventSinkOfT().as(sink);
        let stream = null;
        t2 = this[_windowSubscription];
        t2 == null ? null : t2.cancel();
        stream = dart.nullCheck(this[_windowStreamFactory$])(event);
        return stream;
      }
      resolveWindowStart(event, sink) {
        S.as(event);
        __t$EventSinkOfT().as(sink);
        if (this[_onWindowStart$] != null) {
          sink.add(dart.nullCheck(this[_onWindowStart$])(event));
        }
      }
      resolveWindowEnd(sink, isControllerClosing = false) {
        let t2, t2$;
        __t$EventSinkOfT().as(sink);
        if (isControllerClosing && this[_strategy$] === backpressure.WindowStrategy.eventAfterLastWindow) {
          if (this[_dispatchOnClose$] && this[_hasData] && this.queue[$length] > 1 && this[_onWindowEnd$] != null) {
            sink.add(dart.nullCheck(this[_onWindowEnd$])(this.unmodifiableQueue));
          }
          this.queue.clear();
          t2 = this[_windowSubscription];
          t2 == null ? null : t2.cancel();
          this[_windowSubscription] = null;
          sink.close();
          return;
        }
        if (isControllerClosing || this[_strategy$] === backpressure.WindowStrategy.eventAfterLastWindow || this[_strategy$] === backpressure.WindowStrategy.everyEvent) {
          t2$ = this[_windowSubscription];
          t2$ == null ? null : t2$.cancel();
          this[_windowSubscription] = null;
        }
        if (isControllerClosing && !this[_dispatchOnClose$]) {
          return;
        }
        if (this[_hasData] && (this.queue[$isNotEmpty] || !this[_ignoreEmptyWindows$])) {
          if (this[_onWindowEnd$] != null) {
            sink.add(dart.nullCheck(this[_onWindowEnd$])(this.unmodifiableQueue));
          }
          if (!isControllerClosing && this[_startBufferEvery$] > 0) {
            this.skip = this[_startBufferEvery$] > this.queue[$length] ? this[_startBufferEvery$] - this.queue[$length] : 0;
            if (this[_startBufferEvery$] < this.queue[$length]) {
              collection_extensions['RemoveFirstElementsQueueExtension|removeFirstElements'](S, this.queue, this[_startBufferEvery$]);
            } else {
              this.queue.clear();
            }
          } else {
            this.queue.clear();
          }
        }
      }
      get unmodifiableQueue() {
        return __t$ListOfS().unmodifiable(this.queue);
      }
    }
    (_BackpressureStreamSink.new = function(_strategy, _windowStreamFactory, _onWindowStart, _onWindowEnd, _startBufferEvery, _closeWindowWhen, _ignoreEmptyWindows, _dispatchOnClose, maxLengthQueue) {
      this.queue = new (__t$DoubleLinkedQueueOfS()).new();
      this.skip = 0;
      this[_hasData] = false;
      this[_mainClosed] = false;
      this[_windowSubscription] = null;
      this[_strategy$] = _strategy;
      this[_windowStreamFactory$] = _windowStreamFactory;
      this[_onWindowStart$] = _onWindowStart;
      this[_onWindowEnd$] = _onWindowEnd;
      this[_startBufferEvery$] = _startBufferEvery;
      this[_closeWindowWhen$] = _closeWindowWhen;
      this[_ignoreEmptyWindows$] = _ignoreEmptyWindows;
      this[_dispatchOnClose$] = _dispatchOnClose;
      this.maxLengthQueue = maxLengthQueue;
      _BackpressureStreamSink.__proto__.new.call(this);
      ;
    }).prototype = _BackpressureStreamSink.prototype;
    dart.addTypeTests(_BackpressureStreamSink);
    _BackpressureStreamSink.prototype[_is__BackpressureStreamSink_default] = true;
    dart.addTypeCaches(_BackpressureStreamSink);
    dart.setMethodSignature(_BackpressureStreamSink, () => ({
      __proto__: dart.getMethods(_BackpressureStreamSink.__proto__),
      onData: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      onDone: dart.fnType(dart.void, []),
      onCancel: dart.fnType(dart.void, []),
      onListen: dart.fnType(dart.void, []),
      onPause: dart.fnType(dart.void, []),
      onResume: dart.fnType(dart.void, []),
      maybeCreateWindow: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      maybeCloseWindow: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      singleWindow: dart.fnType(async.StreamSubscription, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      multiWindow: dart.fnType(async.StreamSubscription, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      buildStream: dart.fnType(async.Stream, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      resolveWindowStart: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      resolveWindowEnd: dart.fnType(dart.void, [dart.nullable(core.Object)], [core.bool])
    }));
    dart.setGetterSignature(_BackpressureStreamSink, () => ({
      __proto__: dart.getGetters(_BackpressureStreamSink.__proto__),
      unmodifiableQueue: core.List$(S)
    }));
    dart.setLibraryUri(_BackpressureStreamSink, I[0]);
    dart.setFieldSignature(_BackpressureStreamSink, () => ({
      __proto__: dart.getFields(_BackpressureStreamSink.__proto__),
      [_strategy$]: dart.finalFieldType(backpressure.WindowStrategy),
      [_windowStreamFactory$]: dart.finalFieldType(dart.nullable(dart.fnType(async.Stream, [S]))),
      [_onWindowStart$]: dart.finalFieldType(dart.nullable(dart.fnType(T, [S]))),
      [_onWindowEnd$]: dart.finalFieldType(dart.nullable(dart.fnType(T, [core.List$(S)]))),
      [_startBufferEvery$]: dart.finalFieldType(core.int),
      [_closeWindowWhen$]: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [core.List$(S)]))),
      [_ignoreEmptyWindows$]: dart.finalFieldType(core.bool),
      [_dispatchOnClose$]: dart.finalFieldType(core.bool),
      queue: dart.finalFieldType(collection.Queue$(S)),
      maxLengthQueue: dart.finalFieldType(dart.nullable(core.int)),
      skip: dart.fieldType(core.int),
      [_hasData]: dart.fieldType(core.bool),
      [_mainClosed]: dart.fieldType(core.bool),
      [_windowSubscription]: dart.fieldType(dart.nullable(async.StreamSubscription))
    }));
    return _BackpressureStreamSink;
  });
  backpressure._BackpressureStreamSink = backpressure._BackpressureStreamSink$();
  dart.addTypeTests(backpressure._BackpressureStreamSink, _is__BackpressureStreamSink_default);
  var strategy$ = dart.privateName(backpressure, "BackpressureStreamTransformer.strategy");
  var windowStreamFactory$ = dart.privateName(backpressure, "BackpressureStreamTransformer.windowStreamFactory");
  var onWindowStart$ = dart.privateName(backpressure, "BackpressureStreamTransformer.onWindowStart");
  var onWindowEnd$ = dart.privateName(backpressure, "BackpressureStreamTransformer.onWindowEnd");
  var maxLengthQueue$ = dart.privateName(backpressure, "BackpressureStreamTransformer.maxLengthQueue");
  var startBufferEvery$ = dart.privateName(backpressure, "BackpressureStreamTransformer.startBufferEvery");
  var closeWindowWhen$ = dart.privateName(backpressure, "BackpressureStreamTransformer.closeWindowWhen");
  var ignoreEmptyWindows$ = dart.privateName(backpressure, "BackpressureStreamTransformer.ignoreEmptyWindows");
  var dispatchOnClose$ = dart.privateName(backpressure, "BackpressureStreamTransformer.dispatchOnClose");
  const _is_BackpressureStreamTransformer_default = Symbol('_is_BackpressureStreamTransformer_default');
  backpressure.BackpressureStreamTransformer$ = dart.generic((S, T) => {
    var __t$StreamOfS = () => (__t$StreamOfS = dart.constFn(async.Stream$(S)))();
    var __t$_BackpressureStreamSinkOfS$T = () => (__t$_BackpressureStreamSinkOfS$T = dart.constFn(backpressure._BackpressureStreamSink$(S, T)))();
    var __t$VoidTo_BackpressureStreamSinkOfS$T = () => (__t$VoidTo_BackpressureStreamSinkOfS$T = dart.constFn(dart.fnType(__t$_BackpressureStreamSinkOfS$T(), [])))();
    class BackpressureStreamTransformer extends async.StreamTransformerBase$(S, T) {
      get strategy() {
        return this[strategy$];
      }
      set strategy(value) {
        super.strategy = value;
      }
      get windowStreamFactory() {
        return this[windowStreamFactory$];
      }
      set windowStreamFactory(value) {
        super.windowStreamFactory = value;
      }
      get onWindowStart() {
        return this[onWindowStart$];
      }
      set onWindowStart(value) {
        super.onWindowStart = value;
      }
      get onWindowEnd() {
        return this[onWindowEnd$];
      }
      set onWindowEnd(value) {
        super.onWindowEnd = value;
      }
      get maxLengthQueue() {
        return this[maxLengthQueue$];
      }
      set maxLengthQueue(value) {
        super.maxLengthQueue = value;
      }
      get startBufferEvery() {
        return this[startBufferEvery$];
      }
      set startBufferEvery(value) {
        super.startBufferEvery = value;
      }
      get closeWindowWhen() {
        return this[closeWindowWhen$];
      }
      set closeWindowWhen(value) {
        super.closeWindowWhen = value;
      }
      get ignoreEmptyWindows() {
        return this[ignoreEmptyWindows$];
      }
      set ignoreEmptyWindows(value) {
        super.ignoreEmptyWindows = value;
      }
      get dispatchOnClose() {
        return this[dispatchOnClose$];
      }
      set dispatchOnClose(value) {
        super.dispatchOnClose = value;
      }
      static ['_#new#tearOff'](S, T, strategy, windowStreamFactory, opts) {
        let onWindowStart = opts && 'onWindowStart' in opts ? opts.onWindowStart : null;
        let onWindowEnd = opts && 'onWindowEnd' in opts ? opts.onWindowEnd : null;
        let startBufferEvery = opts && 'startBufferEvery' in opts ? opts.startBufferEvery : 0;
        let closeWindowWhen = opts && 'closeWindowWhen' in opts ? opts.closeWindowWhen : null;
        let ignoreEmptyWindows = opts && 'ignoreEmptyWindows' in opts ? opts.ignoreEmptyWindows : true;
        let dispatchOnClose = opts && 'dispatchOnClose' in opts ? opts.dispatchOnClose : true;
        let maxLengthQueue = opts && 'maxLengthQueue' in opts ? opts.maxLengthQueue : null;
        return new (backpressure.BackpressureStreamTransformer$(S, T)).new(strategy, windowStreamFactory, {onWindowStart: onWindowStart, onWindowEnd: onWindowEnd, startBufferEvery: startBufferEvery, closeWindowWhen: closeWindowWhen, ignoreEmptyWindows: ignoreEmptyWindows, dispatchOnClose: dispatchOnClose, maxLengthQueue: maxLengthQueue});
      }
      bind(stream) {
        __t$StreamOfS().as(stream);
        return forwarding_stream.forwardStream(S, T, stream, dart.fn(() => new (__t$_BackpressureStreamSinkOfS$T()).new(this.strategy, this.windowStreamFactory, this.onWindowStart, this.onWindowEnd, this.startBufferEvery, this.closeWindowWhen, this.ignoreEmptyWindows, this.dispatchOnClose, this.maxLengthQueue), __t$VoidTo_BackpressureStreamSinkOfS$T()));
      }
    }
    (BackpressureStreamTransformer.new = function(strategy, windowStreamFactory, opts) {
      let onWindowStart = opts && 'onWindowStart' in opts ? opts.onWindowStart : null;
      let onWindowEnd = opts && 'onWindowEnd' in opts ? opts.onWindowEnd : null;
      let startBufferEvery = opts && 'startBufferEvery' in opts ? opts.startBufferEvery : 0;
      let closeWindowWhen = opts && 'closeWindowWhen' in opts ? opts.closeWindowWhen : null;
      let ignoreEmptyWindows = opts && 'ignoreEmptyWindows' in opts ? opts.ignoreEmptyWindows : true;
      let dispatchOnClose = opts && 'dispatchOnClose' in opts ? opts.dispatchOnClose : true;
      let maxLengthQueue = opts && 'maxLengthQueue' in opts ? opts.maxLengthQueue : null;
      this[strategy$] = strategy;
      this[windowStreamFactory$] = windowStreamFactory;
      this[onWindowStart$] = onWindowStart;
      this[onWindowEnd$] = onWindowEnd;
      this[startBufferEvery$] = startBufferEvery;
      this[closeWindowWhen$] = closeWindowWhen;
      this[ignoreEmptyWindows$] = ignoreEmptyWindows;
      this[dispatchOnClose$] = dispatchOnClose;
      this[maxLengthQueue$] = maxLengthQueue;
      BackpressureStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = BackpressureStreamTransformer.prototype;
    dart.addTypeTests(BackpressureStreamTransformer);
    BackpressureStreamTransformer.prototype[_is_BackpressureStreamTransformer_default] = true;
    dart.addTypeCaches(BackpressureStreamTransformer);
    dart.setMethodSignature(BackpressureStreamTransformer, () => ({
      __proto__: dart.getMethods(BackpressureStreamTransformer.__proto__),
      bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(BackpressureStreamTransformer, I[0]);
    dart.setFieldSignature(BackpressureStreamTransformer, () => ({
      __proto__: dart.getFields(BackpressureStreamTransformer.__proto__),
      strategy: dart.finalFieldType(backpressure.WindowStrategy),
      windowStreamFactory: dart.finalFieldType(dart.nullable(dart.fnType(async.Stream, [S]))),
      onWindowStart: dart.finalFieldType(dart.nullable(dart.fnType(T, [S]))),
      onWindowEnd: dart.finalFieldType(dart.nullable(dart.fnType(T, [core.List$(S)]))),
      maxLengthQueue: dart.finalFieldType(dart.nullable(core.int)),
      startBufferEvery: dart.finalFieldType(core.int),
      closeWindowWhen: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [core.List$(S)]))),
      ignoreEmptyWindows: dart.finalFieldType(core.bool),
      dispatchOnClose: dart.finalFieldType(core.bool)
    }));
    return BackpressureStreamTransformer;
  });
  backpressure.BackpressureStreamTransformer = backpressure.BackpressureStreamTransformer$();
  dart.addTypeTests(backpressure.BackpressureStreamTransformer, _is_BackpressureStreamTransformer_default);
  dart.trackLibraries("packages/rxdart/src/transformers/backpressure/backpressure.dart", {
    "package:rxdart/src/transformers/backpressure/backpressure.dart": backpressure
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["backpressure.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../../packages/rxdart/src/transformers/backpressure/backpressure.dart.lib.js"}');
  // Exports:
  return {
    src__transformers__backpressure__backpressure: backpressure
  };
}));

//# sourceMappingURL=backpressure.dart.lib.js.map
