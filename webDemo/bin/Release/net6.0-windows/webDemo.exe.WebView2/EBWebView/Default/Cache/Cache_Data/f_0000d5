define(['dart_sdk', 'packages/convert/src/hex.dart', 'packages/drift/src/utils/single_transformer.dart', 'packages/collection/src/iterable_extensions.dart', 'packages/collection/src/equality.dart', 'packages/drift/src/utils/synchronized.dart', 'packages/drift/src/runtime/cancellation_zone.dart', 'packages/drift/src/runtime/executor/helpers/results.dart'], (function load__packages__drift__src__utils__lazy_database_dart(dart_sdk, packages__convert__src__hex$46dart, packages__drift__src__utils__single_transformer$46dart, packages__collection__src__iterable_extensions$46dart, packages__collection__src__equality$46dart, packages__drift__src__utils__synchronized$46dart, packages__drift__src__runtime__cancellation_zone$46dart, packages__drift__src__runtime__executor__helpers__results$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const async = dart_sdk.async;
  const _native_typed_data = dart_sdk._native_typed_data;
  const typed_data = dart_sdk.typed_data;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const convert = dart_sdk.convert;
  const dart$ = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const hex = packages__convert__src__hex$46dart.src__hex;
  const single_transformer = packages__drift__src__utils__single_transformer$46dart.src__utils__single_transformer;
  const iterable_extensions = packages__collection__src__iterable_extensions$46dart.src__iterable_extensions;
  const equality = packages__collection__src__equality$46dart.src__equality;
  const synchronized = packages__drift__src__utils__synchronized$46dart.src__utils__synchronized;
  const cancellation_zone = packages__drift__src__runtime__cancellation_zone$46dart.src__runtime__cancellation_zone;
  const results = packages__drift__src__runtime__executor__helpers__results$46dart.src__runtime__executor__helpers__results;
  var lazy_database = Object.create(dart$.library);
  var sql_types = Object.create(dart$.library);
  var case_when = Object.create(dart$.library);
  var query_builder = Object.create(dart$.library);
  var engines = Object.create(dart$.library);
  var delegates = Object.create(dart$.library);
  var backends = Object.create(dart$.library);
  var executor$ = Object.create(dart$.library);
  var connection_pool = Object.create(dart$.library);
  var exceptions = Object.create(dart$.library);
  var data_verification = Object.create(dart$.library);
  var data_class = Object.create(dart$.library);
  var custom_result_set = Object.create(dart$.library);
  var transactions = Object.create(dart$.library);
  var stream_queries = Object.create(dart$.library);
  var delayed_stream_queries = Object.create(dart$.library);
  var runtime_api = Object.create(dart$.library);
  var sqlite_keywords = Object.create(dart$.library);
  var dsl = Object.create(dart$.library);
  var drift = Object.create(dart$.library);
  var $toString = dartx.toString;
  var $replaceAll = dartx.replaceAll;
  var $truncate = dartx.truncate;
  var $codeUnits = dartx.codeUnits;
  var $toDouble = dartx.toDouble;
  var $_get = dartx._get;
  var $singleWhere = dartx.singleWhere;
  var $toList = dartx.toList;
  var $isEmpty = dartx.isEmpty;
  var $entries = dartx.entries;
  var $add = dartx.add;
  var $hashCode = dartx.hashCode;
  var $_equals = dartx._equals;
  var $runtimeType = dartx.runtimeType;
  var $addAll = dartx.addAll;
  var $compareTo = dartx.compareTo;
  var $contains = dartx.contains;
  var $isNotEmpty = dartx.isNotEmpty;
  var $_set = dartx._set;
  var $values = dartx.values;
  var $any = dartx.any;
  var $cast = dartx.cast;
  var $map = dartx.map;
  var $single = dartx.single;
  var $iterator = dartx.iterator;
  var $length = dartx.length;
  var $containsKey = dartx.containsKey;
  var $toSet = dartx.toSet;
  var $fold = dartx.fold;
  var $expand = dartx.expand;
  var $insertAll = dartx.insertAll;
  var $forEach = dartx.forEach;
  var $keys = dartx.keys;
  var $join = dartx.join;
  var $remove = dartx.remove;
  var $removeWhere = dartx.removeWhere;
  var $startsWith = dartx.startsWith;
  var $reversed = dartx.reversed;
  var $where = dartx.where;
  var $first = dartx.first;
  var $clear = dartx.clear;
  var $noSuchMethod = dartx.noSuchMethod;
  var $putIfAbsent = dartx.putIfAbsent;
  var $removeLast = dartx.removeLast;
  var $toUpperCase = dartx.toUpperCase;
  dart$._checkModuleNullSafetyMode(true);
  dart$._checkModuleRuntimeTypes(false);
  var T$ = {
    FutureOfvoid: () => (T$.FutureOfvoid = dart$.constFn(async.Future$(dart$.void)))(),
    CompleterOfvoid: () => (T$.CompleterOfvoid = dart$.constFn(async.Completer$(dart$.void)))(),
    FutureOfQueryExecutor: () => (T$.FutureOfQueryExecutor = dart$.constFn(async.Future$(executor$.QueryExecutor)))(),
    QueryExecutorToNull: () => (T$.QueryExecutorToNull = dart$.constFn(dart$.fnType(core.Null, [executor$.QueryExecutor])))(),
    FutureOfbool: () => (T$.FutureOfbool = dart$.constFn(async.Future$(core.bool)))(),
    voidToFutureOfbool: () => (T$.voidToFutureOfbool = dart$.constFn(dart$.fnType(T$.FutureOfbool(), [dart$.void])))(),
    boolN: () => (T$.boolN = dart$.constFn(dart$.nullable(core.bool)))(),
    StringN: () => (T$.StringN = dart$.constFn(dart$.nullable(core.String)))(),
    intN: () => (T$.intN = dart$.constFn(dart$.nullable(core.int)))(),
    DateTimeN: () => (T$.DateTimeN = dart$.constFn(dart$.nullable(core.DateTime)))(),
    Uint8ListN: () => (T$.Uint8ListN = dart$.constFn(dart$.nullable(typed_data.Uint8List)))(),
    numN: () => (T$.numN = dart$.constFn(dart$.nullable(core.num)))(),
    SqlTypeTobool: () => (T$.SqlTypeTobool = dart$.constFn(dart$.fnType(core.bool, [sql_types.SqlType])))(),
    JSArrayOfExpression: () => (T$.JSArrayOfExpression = dart$.constFn(_interceptors.JSArray$(query_builder.Expression)))(),
    TableInfoOfTable$dynamic: () => (T$.TableInfoOfTable$dynamic = dart$.constFn(query_builder.TableInfo$(dsl.Table, dart$.dynamic)))(),
    VariableOfbool: () => (T$.VariableOfbool = dart$.constFn(query_builder.Variable$(core.bool)))(),
    VariableOfint: () => (T$.VariableOfint = dart$.constFn(query_builder.Variable$(core.int)))(),
    VariableOfString: () => (T$.VariableOfString = dart$.constFn(query_builder.Variable$(core.String)))(),
    VariableOfDateTime: () => (T$.VariableOfDateTime = dart$.constFn(query_builder.Variable$(core.DateTime)))(),
    VariableOfUint8List: () => (T$.VariableOfUint8List = dart$.constFn(query_builder.Variable$(typed_data.Uint8List)))(),
    VariableOfdouble: () => (T$.VariableOfdouble = dart$.constFn(query_builder.Variable$(core.double)))(),
    StringNAndVerificationMetaToVerificationResult: () => (T$.StringNAndVerificationMetaToVerificationResult = dart$.constFn(dart$.fnType(data_verification.VerificationResult, [T$.StringN(), data_verification.VerificationMeta])))(),
    IdentityMapOfString$GeneratedColumn: () => (T$.IdentityMapOfString$GeneratedColumn = dart$.constFn(_js_helper.IdentityMap$(core.String, query_builder.GeneratedColumn)))(),
    ExpressionTobool: () => (T$.ExpressionTobool = dart$.constFn(dart$.fnType(core.bool, [query_builder.Expression])))(),
    MapEntryOfString$dynamic: () => (T$.MapEntryOfString$dynamic = dart$.constFn(core.MapEntry$(core.String, dart$.dynamic)))(),
    StringAndVariableToMapEntryOfString$dynamic: () => (T$.StringAndVariableToMapEntryOfString$dynamic = dart$.constFn(dart$.fnType(T$.MapEntryOfString$dynamic(), [core.String, query_builder.Variable])))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart$.constFn(_interceptors.JSArray$(core.String)))(),
    ObjectN: () => (T$.ObjectN = dart$.constFn(dart$.nullable(core.Object)))(),
    MapOfString$ObjectN: () => (T$.MapOfString$ObjectN = dart$.constFn(core.Map$(core.String, T$.ObjectN())))(),
    ListOfMapOfString$ObjectN: () => (T$.ListOfMapOfString$ObjectN = dart$.constFn(core.List$(T$.MapOfString$ObjectN())))(),
    FutureOfListOfMapOfString$ObjectN: () => (T$.FutureOfListOfMapOfString$ObjectN = dart$.constFn(async.Future$(T$.ListOfMapOfString$ObjectN())))(),
    VoidToFutureOfListOfMapOfString$ObjectN: () => (T$.VoidToFutureOfListOfMapOfString$ObjectN = dart$.constFn(dart$.fnType(T$.FutureOfListOfMapOfString$ObjectN(), [])))(),
    ListOfQueryRow: () => (T$.ListOfQueryRow = dart$.constFn(core.List$(query_builder.QueryRow)))(),
    VariableTodynamic: () => (T$.VariableTodynamic = dart$.constFn(dart$.fnType(dart$.dynamic, [query_builder.Variable])))(),
    QueryExecutorToFutureOfListOfMapOfString$ObjectN: () => (T$.QueryExecutorToFutureOfListOfMapOfString$ObjectN = dart$.constFn(dart$.fnType(T$.FutureOfListOfMapOfString$ObjectN(), [executor$.QueryExecutor])))(),
    MapOfString$ObjectNToQueryRow: () => (T$.MapOfString$ObjectNToQueryRow = dart$.constFn(dart$.fnType(query_builder.QueryRow, [T$.MapOfString$ObjectN()])))(),
    LinkedHashSetOfResultSetImplementation: () => (T$.LinkedHashSetOfResultSetImplementation = dart$.constFn(collection.LinkedHashSet$(query_builder.ResultSetImplementation)))(),
    JoinOfHasResultSet$dynamic: () => (T$.JoinOfHasResultSet$dynamic = dart$.constFn(query_builder.Join$(dsl.HasResultSet, dart$.dynamic)))(),
    JSArrayOfJoinOfHasResultSet$dynamic: () => (T$.JSArrayOfJoinOfHasResultSet$dynamic = dart$.constFn(_interceptors.JSArray$(T$.JoinOfHasResultSet$dynamic())))(),
    ComponentN: () => (T$.ComponentN = dart$.constFn(dart$.nullable(query_builder.Component)))(),
    ComponentNTovoid: () => (T$.ComponentNTovoid = dart$.constFn(dart$.fnType(dart$.void, [T$.ComponentN()])))(),
    LinkedMapOfExpression$String: () => (T$.LinkedMapOfExpression$String = dart$.constFn(_js_helper.LinkedMap$(query_builder.Expression, core.String)))(),
    intAndJoinOfHasResultSet$dynamicToint: () => (T$.intAndJoinOfHasResultSet$dynamicToint = dart$.constFn(dart$.fnType(core.int, [core.int, T$.JoinOfHasResultSet$dynamic()])))(),
    SyncIterableOfResultSetImplementation: () => (T$.SyncIterableOfResultSetImplementation = dart$.constFn(_js_helper.SyncIterable$(query_builder.ResultSetImplementation)))(),
    ListOfGeneratedColumn: () => (T$.ListOfGeneratedColumn = dart$.constFn(core.List$(query_builder.GeneratedColumn)))(),
    ResultSetImplementationToListOfGeneratedColumn: () => (T$.ResultSetImplementationToListOfGeneratedColumn = dart$.constFn(dart$.fnType(T$.ListOfGeneratedColumn(), [query_builder.ResultSetImplementation])))(),
    ListOfTypedResult: () => (T$.ListOfTypedResult = dart$.constFn(core.List$(query_builder.TypedResult)))(),
    ListOfMapOfString$ObjectNToListOfTypedResult: () => (T$.ListOfMapOfString$ObjectNToListOfTypedResult = dart$.constFn(dart$.fnType(T$.ListOfTypedResult(), [T$.ListOfMapOfString$ObjectN()])))(),
    LinkedHashSetOfString: () => (T$.LinkedHashSetOfString = dart$.constFn(collection.LinkedHashSet$(core.String)))(),
    LinkedMapOfResultSetImplementation$dynamic: () => (T$.LinkedMapOfResultSetImplementation$dynamic = dart$.constFn(_js_helper.LinkedMap$(query_builder.ResultSetImplementation, dart$.dynamic)))(),
    LinkedMapOfExpression$dynamic: () => (T$.LinkedMapOfExpression$dynamic = dart$.constFn(_js_helper.LinkedMap$(query_builder.Expression, dart$.dynamic)))(),
    GeneratedColumnTobool: () => (T$.GeneratedColumnTobool = dart$.constFn(dart$.fnType(core.bool, [query_builder.GeneratedColumn])))(),
    MapOfString$ObjectNToTypedResult: () => (T$.MapOfString$ObjectNToTypedResult = dart$.constFn(dart$.fnType(query_builder.TypedResult, [T$.MapOfString$ObjectN()])))(),
    LinkedHashSetOfTableUpdate: () => (T$.LinkedHashSetOfTableUpdate = dart$.constFn(collection.LinkedHashSet$(runtime_api.TableUpdate)))(),
    FutureOfint: () => (T$.FutureOfint = dart$.constFn(async.Future$(core.int)))(),
    QueryExecutorToFutureOfint: () => (T$.QueryExecutorToFutureOfint = dart$.constFn(dart$.fnType(T$.FutureOfint(), [executor$.QueryExecutor])))(),
    IdentityMapOfString$Expression: () => (T$.IdentityMapOfString$Expression = dart$.constFn(_js_helper.IdentityMap$(core.String, query_builder.Expression)))(),
    StringAndSqlDialectToString: () => (T$.StringAndSqlDialectToString = dart$.constFn(dart$.fnType(core.String, [core.String], [query_builder.SqlDialect])))(),
    StringAndExpressionTovoid: () => (T$.StringAndExpressionTovoid = dart$.constFn(dart$.fnType(dart$.void, [core.String, query_builder.Expression])))(),
    dynamicAnddynamicTobool: () => (T$.dynamicAnddynamicTobool = dart$.constFn(dart$.fnType(core.bool, [dart$.dynamic, dart$.dynamic])))(),
    MapOfString$Variable: () => (T$.MapOfString$Variable = dart$.constFn(core.Map$(core.String, query_builder.Variable)))(),
    LinkedHashMapOfString$Expression: () => (T$.LinkedHashMapOfString$Expression = dart$.constFn(collection.LinkedHashMap$(core.String, query_builder.Expression)))(),
    GeneratedColumnToString: () => (T$.GeneratedColumnToString = dart$.constFn(dart$.fnType(core.String, [query_builder.GeneratedColumn])))(),
    StringAndExpressionTobool: () => (T$.StringAndExpressionTobool = dart$.constFn(dart$.fnType(core.bool, [core.String, query_builder.Expression])))(),
    JSArrayOfResultSetImplementation: () => (T$.JSArrayOfResultSetImplementation = dart$.constFn(_interceptors.JSArray$(query_builder.ResultSetImplementation)))(),
    JSArrayOfVariable: () => (T$.JSArrayOfVariable = dart$.constFn(_interceptors.JSArray$(query_builder.Variable)))(),
    MigratorToFutureOfvoid: () => (T$.MigratorToFutureOfvoid = dart$.constFn(dart$.fnType(T$.FutureOfvoid(), [query_builder.Migrator])))(),
    MigratorAndintAndintToFutureOfvoid: () => (T$.MigratorAndintAndintToFutureOfvoid = dart$.constFn(dart$.fnType(T$.FutureOfvoid(), [query_builder.Migrator, core.int, core.int])))(),
    ViewInfoOfHasResultSet$dynamic: () => (T$.ViewInfoOfHasResultSet$dynamic = dart$.constFn(query_builder.ViewInfo$(dsl.HasResultSet, dart$.dynamic)))(),
    VirtualTableInfoOfTable$dynamic: () => (T$.VirtualTableInfoOfTable$dynamic = dart$.constFn(query_builder.VirtualTableInfo$(dsl.Table, dart$.dynamic)))(),
    FutureOfNull: () => (T$.FutureOfNull = dart$.constFn(async.Future$(core.Null)))(),
    VoidToFutureOfNull: () => (T$.VoidToFutureOfNull = dart$.constFn(dart$.fnType(T$.FutureOfNull(), [])))(),
    _AggregateExpressionOfint: () => (T$._AggregateExpressionOfint = dart$.constFn(query_builder._AggregateExpression$(core.int)))(),
    ExpressionOfint: () => (T$.ExpressionOfint = dart$.constFn(query_builder.Expression$(core.int)))(),
    ExpressionOfboolN: () => (T$.ExpressionOfboolN = dart$.constFn(query_builder.Expression$(T$.boolN())))(),
    ExpressionNOfboolN: () => (T$.ExpressionNOfboolN = dart$.constFn(dart$.nullable(T$.ExpressionOfboolN())))(),
    __ToExpressionOfint: () => (T$.__ToExpressionOfint = dart$.constFn(dart$.fnType(T$.ExpressionOfint(), [], {distinct: T$.boolN(), filter: T$.ExpressionNOfboolN()}, {})))(),
    _AggregateExpressionOfString: () => (T$._AggregateExpressionOfString = dart$.constFn(query_builder._AggregateExpression$(core.String)))(),
    FunctionCallExpressionOfString: () => (T$.FunctionCallExpressionOfString = dart$.constFn(query_builder.FunctionCallExpression$(core.String)))(),
    ExpressionOfString: () => (T$.ExpressionOfString = dart$.constFn(query_builder.Expression$(core.String)))(),
    __ToExpressionOfString: () => (T$.__ToExpressionOfString = dart$.constFn(dart$.fnType(T$.ExpressionOfString(), [], {separator: core.String}, {})))(),
    doubleN: () => (T$.doubleN = dart$.constFn(dart$.nullable(core.double)))(),
    ExpressionOfdoubleN: () => (T$.ExpressionOfdoubleN = dart$.constFn(query_builder.Expression$(T$.doubleN())))(),
    __ToExpressionOfdoubleN: () => (T$.__ToExpressionOfdoubleN = dart$.constFn(dart$.fnType(T$.ExpressionOfdoubleN(), [], {filter: T$.ExpressionNOfboolN()}, {})))(),
    _AggregateExpressionOfdoubleN: () => (T$._AggregateExpressionOfdoubleN = dart$.constFn(query_builder._AggregateExpression$(T$.doubleN())))(),
    ExpressionOfDateTime: () => (T$.ExpressionOfDateTime = dart$.constFn(query_builder.Expression$(core.DateTime)))(),
    __ToExpressionOfDateTime: () => (T$.__ToExpressionOfDateTime = dart$.constFn(dart$.fnType(T$.ExpressionOfDateTime(), [], {filter: T$.ExpressionNOfboolN()}, {})))(),
    _AggregateExpressionOfDateTime: () => (T$._AggregateExpressionOfDateTime = dart$.constFn(query_builder._AggregateExpression$(core.DateTime)))(),
    ExpressionOfintN: () => (T$.ExpressionOfintN = dart$.constFn(query_builder.Expression$(T$.intN())))(),
    VoidToExpressionOfintN: () => (T$.VoidToExpressionOfintN = dart$.constFn(dart$.fnType(T$.ExpressionOfintN(), [])))(),
    VoidToExpressionOfboolN: () => (T$.VoidToExpressionOfboolN = dart$.constFn(dart$.fnType(T$.ExpressionOfboolN(), [])))(),
    _BaseInfixOperatorOfboolN: () => (T$._BaseInfixOperatorOfboolN = dart$.constFn(query_builder._BaseInfixOperator$(T$.boolN())))(),
    FunctionCallExpressionOfStringN: () => (T$.FunctionCallExpressionOfStringN = dart$.constFn(query_builder.FunctionCallExpression$(T$.StringN())))(),
    ConstantOfString: () => (T$.ConstantOfString = dart$.constFn(query_builder.Constant$(core.String)))(),
    _BaseInfixOperatorOfDateTime: () => (T$._BaseInfixOperatorOfDateTime = dart$.constFn(query_builder._BaseInfixOperator$(core.DateTime)))(),
    ExpressionOfbool: () => (T$.ExpressionOfbool = dart$.constFn(query_builder.Expression$(core.bool)))(),
    VoidToExpressionOfbool: () => (T$.VoidToExpressionOfbool = dart$.constFn(dart$.fnType(T$.ExpressionOfbool(), [])))(),
    StringToExpressionOfboolN: () => (T$.StringToExpressionOfboolN = dart$.constFn(dart$.fnType(T$.ExpressionOfboolN(), [core.String])))(),
    FunctionCallExpressionOfbool: () => (T$.FunctionCallExpressionOfbool = dart$.constFn(query_builder.FunctionCallExpression$(core.bool)))(),
    String__ToExpressionOfboolN: () => (T$.String__ToExpressionOfboolN = dart$.constFn(dart$.fnType(T$.ExpressionOfboolN(), [core.String], {caseSensitive: core.bool, dotAll: core.bool, multiLine: core.bool, unicode: core.bool}, {})))(),
    CollateToExpressionOfString: () => (T$.CollateToExpressionOfString = dart$.constFn(dart$.fnType(T$.ExpressionOfString(), [query_builder.Collate])))(),
    _BaseInfixOperatorOfString: () => (T$._BaseInfixOperatorOfString = dart$.constFn(query_builder._BaseInfixOperator$(core.String)))(),
    VoidToExpressionOfString: () => (T$.VoidToExpressionOfString = dart$.constFn(dart$.fnType(T$.ExpressionOfString(), [])))(),
    FunctionCallExpressionOfintN: () => (T$.FunctionCallExpressionOfintN = dart$.constFn(query_builder.FunctionCallExpression$(T$.intN())))(),
    ExpressionOfStringN: () => (T$.ExpressionOfStringN = dart$.constFn(query_builder.Expression$(T$.StringN())))(),
    VoidToExpressionOfStringN: () => (T$.VoidToExpressionOfStringN = dart$.constFn(dart$.fnType(T$.ExpressionOfStringN(), [])))(),
    MapOfString$String: () => (T$.MapOfString$String = dart$.constFn(core.Map$(core.String, core.String)))(),
    IdentityMapOfString$dynamic: () => (T$.IdentityMapOfString$dynamic = dart$.constFn(_js_helper.IdentityMap$(core.String, dart$.dynamic)))(),
    GeneratedColumnOfintN: () => (T$.GeneratedColumnOfintN = dart$.constFn(query_builder.GeneratedColumn$(T$.intN())))(),
    MapOfString$GeneratedColumn: () => (T$.MapOfString$GeneratedColumn = dart$.constFn(core.Map$(core.String, query_builder.GeneratedColumn)))(),
    MapEntryOfString$GeneratedColumn: () => (T$.MapEntryOfString$GeneratedColumn = dart$.constFn(core.MapEntry$(core.String, query_builder.GeneratedColumn)))(),
    GeneratedColumnToMapEntryOfString$GeneratedColumn: () => (T$.GeneratedColumnToMapEntryOfString$GeneratedColumn = dart$.constFn(dart$.fnType(T$.MapEntryOfString$GeneratedColumn(), [query_builder.GeneratedColumn])))(),
    MapOfString$Expression: () => (T$.MapOfString$Expression = dart$.constFn(core.Map$(core.String, query_builder.Expression)))(),
    MapEntryOfString$Expression: () => (T$.MapEntryOfString$Expression = dart$.constFn(core.MapEntry$(core.String, query_builder.Expression)))(),
    MapEntryOfString$ExpressionTobool: () => (T$.MapEntryOfString$ExpressionTobool = dart$.constFn(dart$.fnType(core.bool, [T$.MapEntryOfString$Expression()])))(),
    MapEntryOfGeneratedColumn$Expression: () => (T$.MapEntryOfGeneratedColumn$Expression = dart$.constFn(core.MapEntry$(query_builder.GeneratedColumn, query_builder.Expression)))(),
    StringAndExpressionToMapEntryOfGeneratedColumn$Expression: () => (T$.StringAndExpressionToMapEntryOfGeneratedColumn$Expression = dart$.constFn(dart$.fnType(T$.MapEntryOfGeneratedColumn$Expression(), [core.String, query_builder.Expression])))(),
    DefaultEqualityOfNever: () => (T$.DefaultEqualityOfNever = dart$.constFn(equality.DefaultEquality$(dart$.Never)))(),
    FutureOfQueryResult: () => (T$.FutureOfQueryResult = dart$.constFn(async.Future$(results.QueryResult)))(),
    VoidToFutureOfQueryResult: () => (T$.VoidToFutureOfQueryResult = dart$.constFn(dart$.fnType(T$.FutureOfQueryResult(), [])))(),
    VoidToFutureOfint: () => (T$.VoidToFutureOfint = dart$.constFn(dart$.fnType(T$.FutureOfint(), [])))(),
    VoidToFutureOfvoid: () => (T$.VoidToFutureOfvoid = dart$.constFn(dart$.fnType(T$.FutureOfvoid(), [])))(),
    CompleterOfbool: () => (T$.CompleterOfbool = dart$.constFn(async.Completer$(core.bool)))(),
    QueryDelegateToFutureOfNull: () => (T$.QueryDelegateToFutureOfNull = dart$.constFn(dart$.fnType(T$.FutureOfNull(), [delegates.QueryDelegate])))(),
    VoidToFutureOfbool: () => (T$.VoidToFutureOfbool = dart$.constFn(dart$.fnType(T$.FutureOfbool(), [])))(),
    LinkedMapOfVerificationMeta$VerificationResult: () => (T$.LinkedMapOfVerificationMeta$VerificationResult = dart$.constFn(_js_helper.LinkedMap$(data_verification.VerificationMeta, data_verification.VerificationResult)))(),
    VerificationMetaAndVerificationResultTovoid: () => (T$.VerificationMetaAndVerificationResultTovoid = dart$.constFn(dart$.fnType(dart$.void, [data_verification.VerificationMeta, data_verification.VerificationResult])))(),
    ListOfDateTimeN: () => (T$.ListOfDateTimeN = dart$.constFn(core.List$(T$.DateTimeN())))(),
    ListOfdoubleN: () => (T$.ListOfdoubleN = dart$.constFn(core.List$(T$.doubleN())))(),
    ListOfUint8ListN: () => (T$.ListOfUint8ListN = dart$.constFn(core.List$(T$.Uint8ListN())))(),
    DatabaseConnectionUserN: () => (T$.DatabaseConnectionUserN = dart$.constFn(dart$.nullable(runtime_api.DatabaseConnectionUser)))(),
    SetOfTableUpdate: () => (T$.SetOfTableUpdate = dart$.constFn(core.Set$(runtime_api.TableUpdate)))(),
    StreamOfSetOfTableUpdate: () => (T$.StreamOfSetOfTableUpdate = dart$.constFn(async.Stream$(T$.SetOfTableUpdate())))(),
    MultiStreamControllerOfSetOfTableUpdate: () => (T$.MultiStreamControllerOfSetOfTableUpdate = dart$.constFn(async.MultiStreamController$(T$.SetOfTableUpdate())))(),
    MultiStreamControllerOfSetOfTableUpdateTovoid: () => (T$.MultiStreamControllerOfSetOfTableUpdateTovoid = dart$.constFn(dart$.fnType(dart$.void, [T$.MultiStreamControllerOfSetOfTableUpdate()])))(),
    QueryExecutorAndStringAndListToFutureOfint: () => (T$.QueryExecutorAndStringAndListToFutureOfint = dart$.constFn(dart$.fnType(T$.FutureOfint(), [executor$.QueryExecutor, core.String, core.List])))(),
    JSArrayOfQueryRow: () => (T$.JSArrayOfQueryRow = dart$.constFn(_interceptors.JSArray$(query_builder.QueryRow)))(),
    FutureOfListOfQueryRow: () => (T$.FutureOfListOfQueryRow = dart$.constFn(async.Future$(T$.ListOfQueryRow())))(),
    QueryExecutorAndStringAndListToFutureOfListOfQueryRow: () => (T$.QueryExecutorAndStringAndListToFutureOfListOfQueryRow = dart$.constFn(dart$.fnType(T$.FutureOfListOfQueryRow(), [executor$.QueryExecutor, core.String, core.List])))(),
    QueryExecutorToFutureOfvoid: () => (T$.QueryExecutorToFutureOfvoid = dart$.constFn(dart$.fnType(T$.FutureOfvoid(), [executor$.QueryExecutor])))(),
    dynamicToFutureOfvoid: () => (T$.dynamicToFutureOfvoid = dart$.constFn(dart$.fnType(T$.FutureOfvoid(), [dart$.dynamic])))(),
    LinkedMapOfObjectN$ObjectN: () => (T$.LinkedMapOfObjectN$ObjectN = dart$.constFn(_js_helper.LinkedMap$(T$.ObjectN(), T$.ObjectN())))(),
    InsertStatementOfTable$dynamic: () => (T$.InsertStatementOfTable$dynamic = dart$.constFn(query_builder.InsertStatement$(dsl.Table, dart$.dynamic)))(),
    LinkedHashSetOfQueryStream: () => (T$.LinkedHashSetOfQueryStream = dart$.constFn(collection.LinkedHashSet$(stream_queries.QueryStream)))(),
    LinkedMapOfStreamKey$QueryStream: () => (T$.LinkedMapOfStreamKey$QueryStream = dart$.constFn(_js_helper.LinkedMap$(stream_queries.StreamKey, stream_queries.QueryStream)))(),
    StreamKeyN: () => (T$.StreamKeyN = dart$.constFn(dart$.nullable(stream_queries.StreamKey)))(),
    _HashSetOfStreamKeyN: () => (T$._HashSetOfStreamKeyN = dart$.constFn(collection._HashSet$(T$.StreamKeyN())))(),
    LinkedHashSetOfCompleter: () => (T$.LinkedHashSetOfCompleter = dart$.constFn(collection.LinkedHashSet$(async.Completer)))(),
    StreamControllerOfSetOfTableUpdate: () => (T$.StreamControllerOfSetOfTableUpdate = dart$.constFn(async.StreamController$(T$.SetOfTableUpdate())))(),
    SetOfTableUpdateToSetOfTableUpdate: () => (T$.SetOfTableUpdateToSetOfTableUpdate = dart$.constFn(dart$.fnType(T$.SetOfTableUpdate(), [T$.SetOfTableUpdate()])))(),
    SetOfTableUpdateTobool: () => (T$.SetOfTableUpdateTobool = dart$.constFn(dart$.fnType(core.bool, [T$.SetOfTableUpdate()])))(),
    VoidTovoid: () => (T$.VoidTovoid = dart$.constFn(dart$.fnType(dart$.void, [])))(),
    JSArrayOf_QueryStreamListener: () => (T$.JSArrayOf_QueryStreamListener = dart$.constFn(_interceptors.JSArray$(stream_queries._QueryStreamListener)))(),
    JSArrayOfCancellationToken: () => (T$.JSArrayOfCancellationToken = dart$.constFn(_interceptors.JSArray$(cancellation_zone.CancellationToken)))(),
    StreamOfListOfMapOfString$ObjectN: () => (T$.StreamOfListOfMapOfString$ObjectN = dart$.constFn(async.Stream$(T$.ListOfMapOfString$ObjectN())))(),
    VoidToNull: () => (T$.VoidToNull = dart$.constFn(dart$.fnType(core.Null, [])))(),
    MultiStreamControllerOfListOfMapOfString$ObjectN: () => (T$.MultiStreamControllerOfListOfMapOfString$ObjectN = dart$.constFn(async.MultiStreamController$(T$.ListOfMapOfString$ObjectN())))(),
    MultiStreamControllerOfListOfMapOfString$ObjectNTovoid: () => (T$.MultiStreamControllerOfListOfMapOfString$ObjectNTovoid = dart$.constFn(dart$.fnType(dart$.void, [T$.MultiStreamControllerOfListOfMapOfString$ObjectN()])))(),
    SetOfTableUpdateTovoid: () => (T$.SetOfTableUpdateTovoid = dart$.constFn(dart$.fnType(dart$.void, [T$.SetOfTableUpdate()])))(),
    JSArrayOfTableUpdateQuery: () => (T$.JSArrayOfTableUpdateQuery = dart$.constFn(_interceptors.JSArray$(runtime_api.TableUpdateQuery)))(),
    TableUpdateQueryTobool: () => (T$.TableUpdateQueryTobool = dart$.constFn(dart$.fnType(core.bool, [runtime_api.TableUpdateQuery])))(),
    ListEqualityOfObjectN: () => (T$.ListEqualityOfObjectN = dart$.constFn(equality.ListEquality$(T$.ObjectN())))(),
    StreamQueryStoreToStreamQueryStore: () => (T$.StreamQueryStoreToStreamQueryStore = dart$.constFn(dart$.fnType(stream_queries.StreamQueryStore, [stream_queries.StreamQueryStore])))(),
    StreamOfStreamQueryStore: () => (T$.StreamOfStreamQueryStore = dart$.constFn(async.Stream$(stream_queries.StreamQueryStore)))(),
    StreamQueryStoreToStreamOfListOfMapOfString$ObjectN: () => (T$.StreamQueryStoreToStreamOfListOfMapOfString$ObjectN = dart$.constFn(dart$.fnType(T$.StreamOfListOfMapOfString$ObjectN(), [stream_queries.StreamQueryStore])))(),
    StreamQueryStoreToStreamOfSetOfTableUpdate: () => (T$.StreamQueryStoreToStreamOfSetOfTableUpdate = dart$.constFn(dart$.fnType(T$.StreamOfSetOfTableUpdate(), [stream_queries.StreamQueryStore])))(),
    SetOfCompleter: () => (T$.SetOfCompleter = dart$.constFn(core.Set$(async.Completer)))(),
    HashSetOfStreamKeyN: () => (T$.HashSetOfStreamKeyN = dart$.constFn(collection.HashSet$(T$.StreamKeyN())))(),
    MapOfStreamKey$QueryStream: () => (T$.MapOfStreamKey$QueryStream = dart$.constFn(core.Map$(stream_queries.StreamKey, stream_queries.QueryStream)))(),
    ObjectNTovoid: () => (T$.ObjectNTovoid = dart$.constFn(dart$.fnType(dart$.void, [T$.ObjectN()])))(),
    IdentityMapOfString$int: () => (T$.IdentityMapOfString$int = dart$.constFn(_js_helper.IdentityMap$(core.String, core.int)))(),
    JSArrayOfArgumentsForBatchedStatement: () => (T$.JSArrayOfArgumentsForBatchedStatement = dart$.constFn(_interceptors.JSArray$(executor$.ArgumentsForBatchedStatement)))(),
    VoidToint: () => (T$.VoidToint = dart$.constFn(dart$.fnType(core.int, [])))(),
    VoidToFutureOfQueryExecutor: () => (T$.VoidToFutureOfQueryExecutor = dart$.constFn(dart$.fnType(T$.FutureOfQueryExecutor(), [])))(),
    DatabaseConnectionToStreamQueryStore: () => (T$.DatabaseConnectionToStreamQueryStore = dart$.constFn(dart$.fnType(stream_queries.StreamQueryStore, [runtime_api.DatabaseConnection])))(),
    VoidTobool: () => (T$.VoidTobool = dart$.constFn(dart$.fnType(core.bool, [])))(),
    ListOfTableUpdate: () => (T$.ListOfTableUpdate = dart$.constFn(core.List$(runtime_api.TableUpdate)))(),
    TableUpdateTobool: () => (T$.TableUpdateTobool = dart$.constFn(dart$.fnType(core.bool, [runtime_api.TableUpdate])))(),
    LinkedMapOfType$int: () => (T$.LinkedMapOfType$int = dart$.constFn(_js_helper.LinkedMap$(core.Type, core.int)))(),
    KeyActionN: () => (T$.KeyActionN = dart$.constFn(dart$.nullable(dsl.KeyAction)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart$.defineLazy(CT, {
    get C1() {
      return C[1] = dart$.const({
        __proto__: sql_types.BoolType.prototype
      });
    },
    get C2() {
      return C[2] = dart$.const({
        __proto__: sql_types.StringType.prototype
      });
    },
    get C3() {
      return C[3] = dart$.const({
        __proto__: sql_types.IntType.prototype
      });
    },
    get C4() {
      return C[4] = dart$.const({
        __proto__: sql_types.DateTimeType.prototype
      });
    },
    get C5() {
      return C[5] = dart$.const({
        __proto__: sql_types.BlobType.prototype
      });
    },
    get C6() {
      return C[6] = dart$.const({
        __proto__: sql_types.RealType.prototype
      });
    },
    get C0() {
      return C[0] = dart$.constList([C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4, C[5] || CT.C5, C[6] || CT.C6], sql_types.SqlType);
    },
    get C7() {
      return C[7] = dart$.const({
        __proto__: sql_types.SqlTypeSystem.prototype,
        [types$]: C[0] || CT.C0
      });
    },
    get C8() {
      return C[8] = dart$.const({
        __proto__: core.Deprecated.prototype,
        [Deprecated_message]: "Types will be removed in drift 5, use the methods on SqlTypeSystem instead."
      });
    },
    get C10() {
      return C[10] = dart$.const({
        __proto__: query_builder.SqlDialect.prototype,
        [_Enum__name]: "sqlite",
        [_Enum_index]: 0
      });
    },
    get C11() {
      return C[11] = dart$.const({
        __proto__: query_builder.SqlDialect.prototype,
        [_Enum__name]: "mysql",
        [_Enum_index]: 1
      });
    },
    get C12() {
      return C[12] = dart$.const({
        __proto__: query_builder.SqlDialect.prototype,
        [_Enum__name]: "postgres",
        [_Enum_index]: 2
      });
    },
    get C9() {
      return C[9] = dart$.constList([C[10] || CT.C10, C[11] || CT.C11, C[12] || CT.C12], query_builder.SqlDialect);
    },
    get C14() {
      return C[14] = dart$.const({
        __proto__: query_builder._JoinType.prototype,
        [_Enum__name]: "inner",
        [_Enum_index]: 0
      });
    },
    get C15() {
      return C[15] = dart$.const({
        __proto__: query_builder._JoinType.prototype,
        [_Enum__name]: "leftOuter",
        [_Enum_index]: 1
      });
    },
    get C16() {
      return C[16] = dart$.const({
        __proto__: query_builder._JoinType.prototype,
        [_Enum__name]: "cross",
        [_Enum_index]: 2
      });
    },
    get C13() {
      return C[13] = dart$.constList([C[14] || CT.C14, C[15] || CT.C15, C[16] || CT.C16], query_builder._JoinType);
    },
    get C18() {
      return C[18] = dart$.const({
        __proto__: query_builder.OrderingMode.prototype,
        [_Enum__name]: "asc",
        [_Enum_index]: 0
      });
    },
    get C19() {
      return C[19] = dart$.const({
        __proto__: query_builder.OrderingMode.prototype,
        [_Enum__name]: "desc",
        [_Enum_index]: 1
      });
    },
    get C17() {
      return C[17] = dart$.constList([C[18] || CT.C18, C[19] || CT.C19], query_builder.OrderingMode);
    },
    get C20() {
      return C[20] = dart$.constList([], query_builder.OrderingTerm);
    },
    get C21() {
      return C[21] = dart$.constList([], T$.TableInfoOfTable$dynamic());
    },
    get C22() {
      return C[22] = dart$.const({
        __proto__: query_builder.Precedence.prototype,
        [Precedence__value]: -1
      });
    },
    get C23() {
      return C[23] = dart$.const({
        __proto__: query_builder.Precedence.prototype,
        [Precedence__value]: 10
      });
    },
    get C24() {
      return C[24] = dart$.const({
        __proto__: query_builder.Precedence.prototype,
        [Precedence__value]: 11
      });
    },
    get C25() {
      return C[25] = dart$.const({
        __proto__: query_builder.Precedence.prototype,
        [Precedence__value]: 12
      });
    },
    get C26() {
      return C[26] = dart$.const({
        __proto__: query_builder.Precedence.prototype,
        [Precedence__value]: 13
      });
    },
    get C27() {
      return C[27] = dart$.const({
        __proto__: query_builder.Precedence.prototype,
        [Precedence__value]: 14
      });
    },
    get C28() {
      return C[28] = dart$.const({
        __proto__: query_builder.Precedence.prototype,
        [Precedence__value]: 15
      });
    },
    get C29() {
      return C[29] = dart$.const({
        __proto__: query_builder.Precedence.prototype,
        [Precedence__value]: 16
      });
    },
    get C30() {
      return C[30] = dart$.const({
        __proto__: query_builder.Precedence.prototype,
        [Precedence__value]: 17
      });
    },
    get C31() {
      return C[31] = dart$.const({
        __proto__: query_builder.Precedence.prototype,
        [Precedence__value]: 20
      });
    },
    get C32() {
      return C[32] = dart$.const({
        __proto__: query_builder.Precedence.prototype,
        [Precedence__value]: 21
      });
    },
    get C33() {
      return C[33] = dart$.const({
        __proto__: query_builder.Precedence.prototype,
        [Precedence__value]: 100
      });
    },
    get C35() {
      return C[35] = dart$.const({
        __proto__: query_builder._ComparisonOperator.prototype,
        [_Enum__name]: "less",
        [_Enum_index]: 0
      });
    },
    get C36() {
      return C[36] = dart$.const({
        __proto__: query_builder._ComparisonOperator.prototype,
        [_Enum__name]: "lessOrEqual",
        [_Enum_index]: 1
      });
    },
    get C37() {
      return C[37] = dart$.const({
        __proto__: query_builder._ComparisonOperator.prototype,
        [_Enum__name]: "equal",
        [_Enum_index]: 2
      });
    },
    get C38() {
      return C[38] = dart$.const({
        __proto__: query_builder._ComparisonOperator.prototype,
        [_Enum__name]: "moreOrEqual",
        [_Enum_index]: 3
      });
    },
    get C39() {
      return C[39] = dart$.const({
        __proto__: query_builder._ComparisonOperator.prototype,
        [_Enum__name]: "more",
        [_Enum_index]: 4
      });
    },
    get C34() {
      return C[34] = dart$.constList([C[35] || CT.C35, C[36] || CT.C36, C[37] || CT.C37, C[38] || CT.C38, C[39] || CT.C39], query_builder._ComparisonOperator);
    },
    get C40() {
      return C[40] = dart$.constMap(query_builder._ComparisonOperator, core.String, [C[35] || CT.C35, "<", C[36] || CT.C36, "<=", C[37] || CT.C37, "=", C[38] || CT.C38, ">=", C[39] || CT.C39, ">"]);
    },
    get C42() {
      return C[42] = dart$.const({
        __proto__: query_builder.Collate.prototype,
        [_Enum__name]: "binary",
        [_Enum_index]: 0
      });
    },
    get C43() {
      return C[43] = dart$.const({
        __proto__: query_builder.Collate.prototype,
        [_Enum__name]: "noCase",
        [_Enum_index]: 1
      });
    },
    get C44() {
      return C[44] = dart$.const({
        __proto__: query_builder.Collate.prototype,
        [_Enum__name]: "rTrim",
        [_Enum_index]: 2
      });
    },
    get C41() {
      return C[41] = dart$.constList([C[42] || CT.C42, C[43] || CT.C43, C[44] || CT.C44], query_builder.Collate);
    },
    get C45() {
      return C[45] = dart$.constMap(query_builder.Collate, core.String, [C[42] || CT.C42, "BINARY", C[43] || CT.C43, "NOCASE", C[44] || CT.C44, "RTRIM"]);
    },
    get C46() {
      return C[46] = dart$.const({
        __proto__: data_verification.VerificationResult.prototype,
        [VerificationResult_message]: null,
        [VerificationResult_success]: true
      });
    },
    get C47() {
      return C[47] = dart$.constSet(query_builder.GeneratedColumn, []);
    },
    get C49() {
      return C[49] = dart$.constMap(data_verification.VerificationMeta, data_verification.VerificationResult, []);
    },
    get C48() {
      return C[48] = dart$.const({
        __proto__: data_verification.VerificationContext.prototype,
        [VerificationContext__errors]: C[49] || CT.C49
      });
    },
    get C50() {
      return C[50] = dart$.constMap(query_builder.Expression, dart$.dynamic, []);
    },
    get C51() {
      return C[51] = dart$.fn(sqlite_keywords.escapeIfNeeded, T$.StringAndSqlDialectToString());
    },
    get C53() {
      return C[53] = dart$.const({
        __proto__: query_builder.InsertMode.prototype,
        [_Enum__name]: "insert",
        [_Enum_index]: 0
      });
    },
    get C54() {
      return C[54] = dart$.const({
        __proto__: query_builder.InsertMode.prototype,
        [_Enum__name]: "replace",
        [_Enum_index]: 1
      });
    },
    get C55() {
      return C[55] = dart$.const({
        __proto__: query_builder.InsertMode.prototype,
        [_Enum__name]: "insertOrReplace",
        [_Enum_index]: 2
      });
    },
    get C56() {
      return C[56] = dart$.const({
        __proto__: query_builder.InsertMode.prototype,
        [_Enum__name]: "insertOrRollback",
        [_Enum_index]: 3
      });
    },
    get C57() {
      return C[57] = dart$.const({
        __proto__: query_builder.InsertMode.prototype,
        [_Enum__name]: "insertOrAbort",
        [_Enum_index]: 4
      });
    },
    get C58() {
      return C[58] = dart$.const({
        __proto__: query_builder.InsertMode.prototype,
        [_Enum__name]: "insertOrFail",
        [_Enum_index]: 5
      });
    },
    get C59() {
      return C[59] = dart$.const({
        __proto__: query_builder.InsertMode.prototype,
        [_Enum__name]: "insertOrIgnore",
        [_Enum_index]: 6
      });
    },
    get C52() {
      return C[52] = dart$.constList([C[53] || CT.C53, C[54] || CT.C54, C[55] || CT.C55, C[56] || CT.C56, C[57] || CT.C57, C[58] || CT.C58, C[59] || CT.C59], query_builder.InsertMode);
    },
    get C60() {
      return C[60] = dart$.fn(query_builder._defaultOnCreate, T$.MigratorToFutureOfvoid());
    },
    get C61() {
      return C[61] = dart$.fn(query_builder._defaultOnUpdate, T$.MigratorAndintAndintToFutureOfvoid());
    },
    get C62() {
      return C[62] = dart$.constList([], dart$.dynamic);
    },
    get C63() {
      return C[63] = dart$.constMap(query_builder.GeneratedColumn, query_builder.Expression, []);
    },
    get C64() {
      return C[64] = dart$.constList([], query_builder.GeneratedColumn);
    },
    get C65() {
      return C[65] = dart$.const({
        __proto__: query_builder._StarFunctionParameter.prototype
      });
    },
    get C66() {
      return C[66] = dart$.const({
        __proto__: T$.ConstantOfString().prototype,
        [value$0]: "unixepoch"
      });
    },
    get C67() {
      return C[67] = dart$.constMap(query_builder._JoinType, core.String, [C[14] || CT.C14, "INNER", C[15] || CT.C15, "LEFT OUTER", C[16] || CT.C16, "CROSS"]);
    },
    get C68() {
      return C[68] = dart$.constMap(query_builder.OrderingMode, core.String, [C[18] || CT.C18, "ASC", C[19] || CT.C19, "DESC"]);
    },
    get C69() {
      return C[69] = dart$.const({
        __proto__: query_builder._CustomDateTimeExpression.prototype,
        [precedence$0]: C[22] || CT.C22,
        [watchedTables$]: C[21] || CT.C21,
        [content$]: "strftime('%s', CURRENT_DATE)"
      });
    },
    get C70() {
      return C[70] = dart$.const({
        __proto__: query_builder._CustomDateTimeExpression.prototype,
        [precedence$0]: C[22] || CT.C22,
        [watchedTables$]: C[21] || CT.C21,
        [content$]: "strftime('%s', CURRENT_TIMESTAMP)"
      });
    },
    get C72() {
      return C[72] = dart$.const({
        __proto__: T$.DefaultEqualityOfNever().prototype
      });
    },
    get C71() {
      return C[71] = dart$.const({
        __proto__: equality.ListEquality.prototype,
        [ListEquality__elementEquality]: C[72] || CT.C72
      });
    },
    get C73() {
      return C[73] = dart$.const({
        __proto__: data_verification.VerificationResult.prototype,
        [VerificationResult_message]: "This column is not nullable and doesn't have a default value. Null fields thus can't be inserted.",
        [VerificationResult_success]: false
      });
    },
    get C74() {
      return C[74] = dart$.constMap(query_builder.InsertMode, core.String, [C[53] || CT.C53, "INSERT", C[54] || CT.C54, "REPLACE", C[55] || CT.C55, "INSERT OR REPLACE", C[56] || CT.C56, "INSERT OR ROLLBACK", C[57] || CT.C57, "INSERT OR ABORT", C[58] || CT.C58, "INSERT OR FAIL", C[59] || CT.C59, "INSERT OR IGNORE"]);
    },
    get C75() {
      return C[75] = dart$.constList([], T$.ObjectN());
    },
    get C76() {
      return C[76] = dart$.const({
        __proto__: data_verification.VerificationResult.prototype,
        [VerificationResult_message]: "This value was required, but isn't present",
        [VerificationResult_success]: false
      });
    },
    get C77() {
      return C[77] = dart$.const({
        __proto__: equality.MapEquality.prototype,
        [MapEquality__valueEquality]: C[72] || CT.C72,
        [MapEquality__keyEquality]: C[72] || CT.C72
      });
    },
    get C78() {
      return C[78] = dart$.const({
        __proto__: stream_queries.AnyUpdateQuery.prototype
      });
    },
    get C79() {
      return C[79] = dart$.constList([], query_builder.Variable);
    },
    get C80() {
      return C[80] = dart$.constSet(query_builder.ResultSetImplementation, []);
    },
    get C81() {
      return C[81] = dart$.const({
        __proto__: T$.ListEqualityOfObjectN().prototype,
        [ListEquality__elementEquality]: C[72] || CT.C72
      });
    },
    get C82() {
      return C[82] = dart$.const(new _js_helper.PrivateSymbol.new('_pendingTimers', _pendingTimers$));
    },
    get C83() {
      return C[83] = dart$.const(new _js_helper.PrivateSymbol.new('_tableUpdates', _tableUpdates$));
    },
    get C84() {
      return C[84] = dart$.const(new _js_helper.PrivateSymbol.new('_isShuttingDown', _isShuttingDown$));
    },
    get C85() {
      return C[85] = dart$.const(new _js_helper.PrivateSymbol.new('_keysPendingRemoval', _keysPendingRemoval$));
    },
    get C86() {
      return C[86] = dart$.const(new _js_helper.PrivateSymbol.new('_activeKeyStreams', _activeKeyStreams$));
    },
    get C87() {
      return C[87] = dart$.const(new _js_helper.PrivateSymbol.new('_isShuttingDown=', _isShuttingDown_));
    },
    get C88() {
      return C[88] = dart$.const({
        __proto__: data_class._DefaultValueSerializer.prototype
      });
    },
    get C89() {
      return C[89] = dart$.fn(core.print, T$.ObjectNTovoid());
    },
    get C91() {
      return C[91] = dart$.constList([], runtime_api.UpdateRule);
    },
    get C90() {
      return C[90] = dart$.const({
        __proto__: runtime_api.StreamQueryUpdateRules.prototype,
        [StreamQueryUpdateRules_rules]: C[91] || CT.C91
      });
    },
    get C93() {
      return C[93] = dart$.const({
        __proto__: runtime_api.UpdateKind.prototype,
        [_Enum__name]: "insert",
        [_Enum_index]: 0
      });
    },
    get C94() {
      return C[94] = dart$.const({
        __proto__: runtime_api.UpdateKind.prototype,
        [_Enum__name]: "update",
        [_Enum_index]: 1
      });
    },
    get C95() {
      return C[95] = dart$.const({
        __proto__: runtime_api.UpdateKind.prototype,
        [_Enum__name]: "delete",
        [_Enum_index]: 2
      });
    },
    get C92() {
      return C[92] = dart$.constList([C[93] || CT.C93, C[94] || CT.C94, C[95] || CT.C95], runtime_api.UpdateKind);
    },
    get C96() {
      return C[96] = dart$.const(new _internal.Symbol.new('DatabaseConnectionUser'));
    },
    get C97() {
      return C[97] = dart$.constSet(core.String, ["ADD", "ABORT", "ACTION", "AFTER", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "AS", "ASC", "ATTACH", "AUTOINCREMENT", "BEFORE", "BEGIN", "BETWEEN", "BY", "CASCADE", "CASE", "CAST", "CHECK", "COLLATE", "COLUMN", "COMMIT", "CONFLICT", "CONSTRAINT", "CREATE", "CROSS", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "DATABASE", "DEFAULT", "DEFERRABLE", "DEFERRED", "DELETE", "DESC", "DETACH", "DISTINCT", "DO", "DROP", "EACH", "ELSE", "END", "ESCAPE", "EXCEPT", "EXCLUDE", "EXCLUSIVE", "EXISTS", "EXPLAIN", "FAIL", "FALSE", "FILTER", "FIRST", "FOLLOWING", "FOR", "FOREIGN", "FROM", "FULL", "GENERATED", "GLOB", "GROUP", "GROUPS", "HAVING", "IF", "IGNORE", "IMMEDIATE", "IN", "INDEX", "INDEXED", "INITIALLY", "INNER", "INSERT", "INSTEAD", "INTERSECT", "INTO", "IS", "ISNULL", "JOIN", "KEY", "LAST", "LEFT", "LIKE", "LIMIT", "MATCH", "NATURAL", "NO", "NOT", "NOTHING", "NOTNULL", "NULL", "NULLS", "OF", "OFFSET", "ON", "OR", "ORDER", "OTHERS", "OUTER", "OVER", "PARTITION", "PLAN", "PRAGMA", "PRECEDING", "PRIMARY", "QUERY", "RAISE", "RANGE", "RECURSIVE", "REFERENCES", "REGEXP", "REINDEX", "RELEASE", "RENAME", "REPLACE", "RIGHT", "RESTRICT", "ROLLBACK", "ROW", "ROWID", "ROWS", "SAVEPOINT", "SELECT", "SET", "TABLE", "TEMP", "TEMPORARY", "THEN", "TIES", "TO", "TRANSACTION", "TRIGGER", "TRUE", "UNBOUNDED", "UNION", "UNIQUE", "UPDATE", "USING", "VACUUM", "VALUES", "VIEW", "VIRTUAL", "WHEN", "WHERE", "WINDOW", "WITH", "WITHOUT"]);
    },
    get C98() {
      return C[98] = dart$.constSet(core.String, []);
    },
    get C99() {
      return C[99] = dart$.constSet(core.String, ["ANY", "ARRAY", "ASYMMETRIC", "BINARY", "BOTH", "CURRENT_USER", "ILIKE", "LEADING", "LOCALTIME", "LOCALTIMESTAMP", "GRANT", "ONLY", "OVERLAPS", "PLACING", "SESSION_USER", "SIMILAR", "SOME", "SYMMETRIC", "TRAILING", "USER"]);
    },
    get C101() {
      return C[101] = dart$.const({
        __proto__: dsl.KeyAction.prototype,
        [_Enum__name]: "setNull",
        [_Enum_index]: 0
      });
    },
    get C102() {
      return C[102] = dart$.const({
        __proto__: dsl.KeyAction.prototype,
        [_Enum__name]: "setDefault",
        [_Enum_index]: 1
      });
    },
    get C103() {
      return C[103] = dart$.const({
        __proto__: dsl.KeyAction.prototype,
        [_Enum__name]: "cascade",
        [_Enum_index]: 2
      });
    },
    get C104() {
      return C[104] = dart$.const({
        __proto__: dsl.KeyAction.prototype,
        [_Enum__name]: "restrict",
        [_Enum_index]: 3
      });
    },
    get C105() {
      return C[105] = dart$.const({
        __proto__: dsl.KeyAction.prototype,
        [_Enum__name]: "noAction",
        [_Enum_index]: 4
      });
    },
    get C100() {
      return C[100] = dart$.constList([C[101] || CT.C101, C[102] || CT.C102, C[103] || CT.C103, C[104] || CT.C104, C[105] || CT.C105], dsl.KeyAction);
    },
    get C106() {
      return C[106] = dart$.constList([], core.Type);
    },
    get C107() {
      return C[107] = dart$.constMap(core.String, core.String, []);
    }
  }, false);
  var C = Array(108).fill(void 0);
  var I = [
    "package:drift/src/runtime/executor/executor.dart",
    "package:drift/src/utils/lazy_database.dart",
    "package:drift/src/runtime/types/sql_types.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/drift-1.2.0/lib/src/runtime/query_builder/expressions/expression.dart",
    "package:drift/src/runtime/query_builder/query_builder.dart",
    "package:drift/src/runtime/query_builder/expressions/case_when.dart",
    "package:drift/src/dsl/dsl.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/drift-1.2.0/lib/src/runtime/query_builder/statements/delete.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/drift-1.2.0/lib/src/runtime/query_builder/statements/update.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/drift-1.2.0/lib/src/runtime/query_builder/migration.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/drift-1.2.0/lib/src/runtime/query_builder/expressions/null_check.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/drift-1.2.0/lib/src/runtime/query_builder/statements/query.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/drift-1.2.0/lib/src/runtime/executor/helpers/engines.dart",
    "package:drift/src/runtime/executor/helpers/engines.dart",
    "package:drift/src/runtime/executor/helpers/delegates.dart",
    "package:drift/src/runtime/executor/connection_pool.dart",
    "package:drift/src/runtime/exceptions.dart",
    "package:drift/src/runtime/data_verification.dart",
    "package:drift/src/runtime/data_class.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/drift-1.2.0/lib/src/runtime/data_class.dart",
    "package:drift/src/runtime/custom_result_set.dart",
    "package:drift/src/runtime/api/runtime_api.dart",
    "package:drift/src/runtime/executor/transactions.dart",
    "package:drift/src/runtime/executor/stream_queries.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/drift-1.2.0/lib/src/runtime/executor/stream_queries.dart",
    "package:drift/src/runtime/executor/delayed_stream_queries.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/drift-1.2.0/lib/src/runtime/api/db_base.dart"
  ];
  var opener$ = dart$.privateName(lazy_database, "LazyDatabase.opener");
  var __LazyDatabase__delegate = dart$.privateName(lazy_database, "_#LazyDatabase#_delegate");
  var _delegateAvailable = dart$.privateName(lazy_database, "_delegateAvailable");
  var _openDelegate = dart$.privateName(lazy_database, "_openDelegate");
  var _delegate = dart$.privateName(lazy_database, "_delegate");
  var _awaitOpened = dart$.privateName(lazy_database, "_awaitOpened");
  executor$.QueryExecutor = class QueryExecutor extends core.Object {
    get dialect() {
      return query_builder.SqlDialect.sqlite;
    }
    close() {
      return async.async(dart$.void, function* close() {
      });
    }
  };
  (executor$.QueryExecutor.new = function() {
    ;
  }).prototype = executor$.QueryExecutor.prototype;
  dart$.addTypeTests(executor$.QueryExecutor);
  dart$.addTypeCaches(executor$.QueryExecutor);
  dart$.setMethodSignature(executor$.QueryExecutor, () => ({
    __proto__: dart$.getMethods(executor$.QueryExecutor.__proto__),
    close: dart$.fnType(async.Future$(dart$.void), [])
  }));
  dart$.setGetterSignature(executor$.QueryExecutor, () => ({
    __proto__: dart$.getGetters(executor$.QueryExecutor.__proto__),
    dialect: query_builder.SqlDialect
  }));
  dart$.setLibraryUri(executor$.QueryExecutor, I[0]);
  lazy_database.LazyDatabase = class LazyDatabase extends executor$.QueryExecutor {
    get opener() {
      return this[opener$];
    }
    set opener(value) {
      super.opener = value;
    }
    get [_delegate]() {
      let t0;
      t0 = this[__LazyDatabase__delegate];
      return t0 == null ? dart$.throw(new _internal.LateError.fieldNI("_delegate")) : t0;
    }
    set [_delegate](library$32package$58drift$47src$47utils$47lazy_database$46dart$58$58_delegate$35param) {
      this[__LazyDatabase__delegate] = library$32package$58drift$47src$47utils$47lazy_database$46dart$58$58_delegate$35param;
    }
    static ['_#new#tearOff'](opener) {
      return new lazy_database.LazyDatabase.new(opener);
    }
    [_awaitOpened]() {
      if (this[_delegateAvailable]) {
        return T$.FutureOfvoid().value();
      } else if (this[_openDelegate] != null) {
        return dart$.nullCheck(this[_openDelegate]).future;
      } else {
        let delegate = this[_openDelegate] = T$.CompleterOfvoid().new();
        T$.FutureOfQueryExecutor().sync(this.opener).then(core.Null, dart$.fn(database => {
          this[_delegate] = database;
          this[_delegateAvailable] = true;
          delegate.complete();
        }, T$.QueryExecutorToNull()), {onError: dart$.bind(delegate, 'completeError')});
        return delegate.future;
      }
    }
    beginTransaction() {
      return this[_delegate].beginTransaction();
    }
    ensureOpen(user) {
      return this[_awaitOpened]().then(core.bool, dart$.fn(_ => this[_delegate].ensureOpen(user), T$.voidToFutureOfbool()));
    }
    runBatched(statements) {
      return this[_delegate].runBatched(statements);
    }
    runCustom(statement, args = null) {
      return this[_delegate].runCustom(statement, args);
    }
    runDelete(statement, args) {
      return this[_delegate].runDelete(statement, args);
    }
    runInsert(statement, args) {
      return this[_delegate].runInsert(statement, args);
    }
    runSelect(statement, args) {
      return this[_delegate].runSelect(statement, args);
    }
    runUpdate(statement, args) {
      return this[_delegate].runUpdate(statement, args);
    }
    close() {
      if (this[_delegateAvailable]) {
        return this[_delegate].close();
      } else {
        return T$.FutureOfvoid().value();
      }
    }
  };
  (lazy_database.LazyDatabase.new = function(opener) {
    this[__LazyDatabase__delegate] = null;
    this[_delegateAvailable] = false;
    this[_openDelegate] = null;
    this[opener$] = opener;
    ;
  }).prototype = lazy_database.LazyDatabase.prototype;
  dart$.addTypeTests(lazy_database.LazyDatabase);
  dart$.addTypeCaches(lazy_database.LazyDatabase);
  dart$.setMethodSignature(lazy_database.LazyDatabase, () => ({
    __proto__: dart$.getMethods(lazy_database.LazyDatabase.__proto__),
    [_awaitOpened]: dart$.fnType(async.Future$(dart$.void), []),
    beginTransaction: dart$.fnType(executor$.TransactionExecutor, []),
    ensureOpen: dart$.fnType(async.Future$(core.bool), [executor$.QueryExecutorUser]),
    runBatched: dart$.fnType(async.Future$(dart$.void), [executor$.BatchedStatements]),
    runCustom: dart$.fnType(async.Future$(dart$.void), [core.String], [dart$.nullable(core.List$(dart$.nullable(core.Object)))]),
    runDelete: dart$.fnType(async.Future$(core.int), [core.String, core.List$(dart$.nullable(core.Object))]),
    runInsert: dart$.fnType(async.Future$(core.int), [core.String, core.List$(dart$.nullable(core.Object))]),
    runSelect: dart$.fnType(async.Future$(core.List$(core.Map$(core.String, dart$.nullable(core.Object)))), [core.String, core.List$(dart$.nullable(core.Object))]),
    runUpdate: dart$.fnType(async.Future$(core.int), [core.String, core.List$(dart$.nullable(core.Object))])
  }));
  dart$.setGetterSignature(lazy_database.LazyDatabase, () => ({
    __proto__: dart$.getGetters(lazy_database.LazyDatabase.__proto__),
    [_delegate]: executor$.QueryExecutor
  }));
  dart$.setSetterSignature(lazy_database.LazyDatabase, () => ({
    __proto__: dart$.getSetters(lazy_database.LazyDatabase.__proto__),
    [_delegate]: executor$.QueryExecutor
  }));
  dart$.setLibraryUri(lazy_database.LazyDatabase, I[1]);
  dart$.setFieldSignature(lazy_database.LazyDatabase, () => ({
    __proto__: dart$.getFields(lazy_database.LazyDatabase.__proto__),
    [__LazyDatabase__delegate]: dart$.fieldType(dart$.nullable(executor$.QueryExecutor)),
    [_delegateAvailable]: dart$.fieldType(core.bool),
    [_openDelegate]: dart$.fieldType(dart$.nullable(async.Completer$(dart$.void))),
    opener: dart$.finalFieldType(dart$.fnType(async.FutureOr$(executor$.QueryExecutor), []))
  }));
  const _is_SqlType_default = Symbol('_is_SqlType_default');
  sql_types.SqlType$ = dart$.generic(T => {
    class SqlType extends core.Object {}
    (SqlType.new = function() {
      ;
    }).prototype = SqlType.prototype;
    dart$.addTypeTests(SqlType);
    SqlType.prototype[_is_SqlType_default] = true;
    dart$.addTypeCaches(SqlType);
    dart$.setLibraryUri(SqlType, I[2]);
    return SqlType;
  });
  sql_types.SqlType = sql_types.SqlType$();
  dart$.addTypeTests(sql_types.SqlType, _is_SqlType_default);
  sql_types.BoolType = class BoolType extends sql_types.SqlType$(core.bool) {
    static ['_#new#tearOff']() {
      return new sql_types.BoolType.new();
    }
    sqlName(dialect) {
      return dialect === query_builder.SqlDialect.sqlite ? "INTEGER" : "integer";
    }
    mapFromDatabaseResponse(response) {
      if (response == null) return null;
      return !dart$.equals(response, 0);
    }
    mapToSqlConstant(content) {
      T$.boolN().as(content);
      if (content == null) {
        return "NULL";
      }
      return dart$.test(content) ? "1" : "0";
    }
    mapToSqlVariable(content) {
      T$.boolN().as(content);
      if (content == null) {
        return null;
      }
      return dart$.test(content) ? 1 : 0;
    }
  };
  (sql_types.BoolType.new = function() {
    sql_types.BoolType.__proto__.new.call(this);
    ;
  }).prototype = sql_types.BoolType.prototype;
  dart$.addTypeTests(sql_types.BoolType);
  dart$.addTypeCaches(sql_types.BoolType);
  dart$.setMethodSignature(sql_types.BoolType, () => ({
    __proto__: dart$.getMethods(sql_types.BoolType.__proto__),
    sqlName: dart$.fnType(core.String, [query_builder.SqlDialect]),
    mapFromDatabaseResponse: dart$.fnType(dart$.nullable(core.bool), [dart$.dynamic]),
    mapToSqlConstant: dart$.fnType(core.String, [dart$.nullable(core.Object)]),
    mapToSqlVariable: dart$.fnType(dart$.nullable(core.int), [dart$.nullable(core.Object)])
  }));
  dart$.setLibraryUri(sql_types.BoolType, I[2]);
  sql_types.StringType = class StringType extends sql_types.SqlType$(core.String) {
    static ['_#new#tearOff']() {
      return new sql_types.StringType.new();
    }
    sqlName(dialect) {
      return dialect === query_builder.SqlDialect.sqlite ? "TEXT" : "text";
    }
    mapFromDatabaseResponse(response) {
      let t0;
      t0 = response;
      return t0 == null ? null : dart$.toString(t0);
    }
    mapToSqlConstant(content) {
      T$.StringN().as(content);
      if (content == null) return "NULL";
      let escapedChars = content[$replaceAll]("'", "''");
      return "'" + escapedChars + "'";
    }
    mapToSqlVariable(content) {
      T$.StringN().as(content);
      return content;
    }
  };
  (sql_types.StringType.new = function() {
    sql_types.StringType.__proto__.new.call(this);
    ;
  }).prototype = sql_types.StringType.prototype;
  dart$.addTypeTests(sql_types.StringType);
  dart$.addTypeCaches(sql_types.StringType);
  dart$.setMethodSignature(sql_types.StringType, () => ({
    __proto__: dart$.getMethods(sql_types.StringType.__proto__),
    sqlName: dart$.fnType(core.String, [query_builder.SqlDialect]),
    mapFromDatabaseResponse: dart$.fnType(dart$.nullable(core.String), [dart$.dynamic]),
    mapToSqlConstant: dart$.fnType(core.String, [dart$.nullable(core.Object)]),
    mapToSqlVariable: dart$.fnType(dart$.nullable(core.String), [dart$.nullable(core.Object)])
  }));
  dart$.setLibraryUri(sql_types.StringType, I[2]);
  sql_types.IntType = class IntType extends sql_types.SqlType$(core.int) {
    static ['_#new#tearOff']() {
      return new sql_types.IntType.new();
    }
    sqlName(dialect) {
      return dialect === query_builder.SqlDialect.sqlite ? "INTEGER" : "bigint";
    }
    mapFromDatabaseResponse(response) {
      if (response == null || T$.intN().is(response)) return T$.intN().as(response);
      return core.int.parse(dart$.toString(response));
    }
    mapToSqlConstant(content) {
      let t0, t0$;
      T$.intN().as(content);
      t0$ = (t0 = content, t0 == null ? null : dart$.toString(t0));
      return t0$ == null ? "NULL" : t0$;
    }
    mapToSqlVariable(content) {
      T$.intN().as(content);
      return content;
    }
  };
  (sql_types.IntType.new = function() {
    sql_types.IntType.__proto__.new.call(this);
    ;
  }).prototype = sql_types.IntType.prototype;
  dart$.addTypeTests(sql_types.IntType);
  dart$.addTypeCaches(sql_types.IntType);
  dart$.setMethodSignature(sql_types.IntType, () => ({
    __proto__: dart$.getMethods(sql_types.IntType.__proto__),
    sqlName: dart$.fnType(core.String, [query_builder.SqlDialect]),
    mapFromDatabaseResponse: dart$.fnType(dart$.nullable(core.int), [dart$.dynamic]),
    mapToSqlConstant: dart$.fnType(core.String, [dart$.nullable(core.Object)]),
    mapToSqlVariable: dart$.fnType(dart$.nullable(core.int), [dart$.nullable(core.Object)])
  }));
  dart$.setLibraryUri(sql_types.IntType, I[2]);
  sql_types.DateTimeType = class DateTimeType extends sql_types.SqlType$(core.DateTime) {
    static ['_#new#tearOff']() {
      return new sql_types.DateTimeType.new();
    }
    sqlName(dialect) {
      return dialect === query_builder.SqlDialect.sqlite ? "INTEGER" : "integer";
    }
    mapFromDatabaseResponse(response) {
      if (response == null) return null;
      let unixSeconds = core.int.as(response);
      return new core.DateTime.fromMillisecondsSinceEpoch(unixSeconds * 1000);
    }
    mapToSqlConstant(content) {
      T$.DateTimeN().as(content);
      if (content == null) return "NULL";
      return (content.millisecondsSinceEpoch / 1000)[$truncate]()[$toString]();
    }
    mapToSqlVariable(content) {
      T$.DateTimeN().as(content);
      if (content == null) return null;
      return (content.millisecondsSinceEpoch / 1000)[$truncate]();
    }
  };
  (sql_types.DateTimeType.new = function() {
    sql_types.DateTimeType.__proto__.new.call(this);
    ;
  }).prototype = sql_types.DateTimeType.prototype;
  dart$.addTypeTests(sql_types.DateTimeType);
  dart$.addTypeCaches(sql_types.DateTimeType);
  dart$.setMethodSignature(sql_types.DateTimeType, () => ({
    __proto__: dart$.getMethods(sql_types.DateTimeType.__proto__),
    sqlName: dart$.fnType(core.String, [query_builder.SqlDialect]),
    mapFromDatabaseResponse: dart$.fnType(dart$.nullable(core.DateTime), [dart$.dynamic]),
    mapToSqlConstant: dart$.fnType(core.String, [dart$.nullable(core.Object)]),
    mapToSqlVariable: dart$.fnType(dart$.nullable(core.int), [dart$.nullable(core.Object)])
  }));
  dart$.setLibraryUri(sql_types.DateTimeType, I[2]);
  sql_types.BlobType = class BlobType extends sql_types.SqlType$(typed_data.Uint8List) {
    static ['_#new#tearOff']() {
      return new sql_types.BlobType.new();
    }
    sqlName(dialect) {
      return dialect === query_builder.SqlDialect.sqlite ? "BLOB" : "bytea";
    }
    mapFromDatabaseResponse(response) {
      if (typeof response == 'string') {
        let list = response[$codeUnits];
        return _native_typed_data.NativeUint8List.fromList(list);
      }
      return T$.Uint8ListN().as(response);
    }
    mapToSqlConstant(content) {
      T$.Uint8ListN().as(content);
      if (content == null) return "NULL";
      return "x'" + hex.hex.encode(content) + "'";
    }
    mapToSqlVariable(content) {
      T$.Uint8ListN().as(content);
      return content;
    }
  };
  (sql_types.BlobType.new = function() {
    sql_types.BlobType.__proto__.new.call(this);
    ;
  }).prototype = sql_types.BlobType.prototype;
  dart$.addTypeTests(sql_types.BlobType);
  dart$.addTypeCaches(sql_types.BlobType);
  dart$.setMethodSignature(sql_types.BlobType, () => ({
    __proto__: dart$.getMethods(sql_types.BlobType.__proto__),
    sqlName: dart$.fnType(core.String, [query_builder.SqlDialect]),
    mapFromDatabaseResponse: dart$.fnType(dart$.nullable(typed_data.Uint8List), [dart$.dynamic]),
    mapToSqlConstant: dart$.fnType(core.String, [dart$.nullable(core.Object)]),
    mapToSqlVariable: dart$.fnType(dart$.nullable(typed_data.Uint8List), [dart$.nullable(core.Object)])
  }));
  dart$.setLibraryUri(sql_types.BlobType, I[2]);
  sql_types.RealType = class RealType extends sql_types.SqlType$(core.double) {
    static ['_#new#tearOff']() {
      return new sql_types.RealType.new();
    }
    sqlName(dialect) {
      return dialect === query_builder.SqlDialect.sqlite ? "REAL" : "float8";
    }
    mapFromDatabaseResponse(response) {
      let t0;
      t0 = T$.numN().as(response);
      return t0 == null ? null : t0[$toDouble]();
    }
    mapToSqlConstant(content) {
      T$.numN().as(content);
      if (content == null) {
        return "NULL";
      }
      return dart$.toString(content);
    }
    mapToSqlVariable(content) {
      T$.numN().as(content);
      return content;
    }
  };
  (sql_types.RealType.new = function() {
    sql_types.RealType.__proto__.new.call(this);
    ;
  }).prototype = sql_types.RealType.prototype;
  dart$.addTypeTests(sql_types.RealType);
  dart$.addTypeCaches(sql_types.RealType);
  dart$.setMethodSignature(sql_types.RealType, () => ({
    __proto__: dart$.getMethods(sql_types.RealType.__proto__),
    sqlName: dart$.fnType(core.String, [query_builder.SqlDialect]),
    mapFromDatabaseResponse: dart$.fnType(dart$.nullable(core.double), [dart$.dynamic]),
    mapToSqlConstant: dart$.fnType(core.String, [dart$.nullable(core.Object)]),
    mapToSqlVariable: dart$.fnType(dart$.nullable(core.num), [dart$.nullable(core.Object)])
  }));
  dart$.setLibraryUri(sql_types.RealType, I[2]);
  const _is_TypeConverter_default = Symbol('_is_TypeConverter_default');
  sql_types.TypeConverter$ = dart$.generic((D, S) => {
    class TypeConverter extends core.Object {}
    (TypeConverter.new = function() {
      ;
    }).prototype = TypeConverter.prototype;
    dart$.addTypeTests(TypeConverter);
    TypeConverter.prototype[_is_TypeConverter_default] = true;
    dart$.addTypeCaches(TypeConverter);
    dart$.setLibraryUri(TypeConverter, I[2]);
    return TypeConverter;
  });
  sql_types.TypeConverter = sql_types.TypeConverter$();
  dart$.addTypeTests(sql_types.TypeConverter, _is_TypeConverter_default);
  var values$ = dart$.privateName(sql_types, "EnumIndexConverter.values");
  const _is_NullAwareTypeConverter_default = Symbol('_is_NullAwareTypeConverter_default');
  sql_types.NullAwareTypeConverter$ = dart$.generic((D, S) => {
    var __t$DN = () => (__t$DN = dart$.constFn(dart$.nullable(D)))();
    var __t$SN = () => (__t$SN = dart$.constFn(dart$.nullable(S)))();
    class NullAwareTypeConverter extends sql_types.TypeConverter$(D, S) {
      mapToDart(fromDb) {
        __t$SN().as(fromDb);
        return fromDb == null ? null : this.requireMapToDart(fromDb);
      }
      mapToSql(value) {
        __t$DN().as(value);
        return value == null ? null : this.requireMapToSql(value);
      }
    }
    (NullAwareTypeConverter.new = function() {
      NullAwareTypeConverter.__proto__.new.call(this);
      ;
    }).prototype = NullAwareTypeConverter.prototype;
    dart$.addTypeTests(NullAwareTypeConverter);
    NullAwareTypeConverter.prototype[_is_NullAwareTypeConverter_default] = true;
    dart$.addTypeCaches(NullAwareTypeConverter);
    dart$.setMethodSignature(NullAwareTypeConverter, () => ({
      __proto__: dart$.getMethods(NullAwareTypeConverter.__proto__),
      mapToDart: dart$.fnType(dart$.nullable(D), [dart$.nullable(core.Object)]),
      mapToSql: dart$.fnType(dart$.nullable(S), [dart$.nullable(core.Object)])
    }));
    dart$.setLibraryUri(NullAwareTypeConverter, I[2]);
    return NullAwareTypeConverter;
  });
  sql_types.NullAwareTypeConverter = sql_types.NullAwareTypeConverter$();
  dart$.addTypeTests(sql_types.NullAwareTypeConverter, _is_NullAwareTypeConverter_default);
  const _is_EnumIndexConverter_default = Symbol('_is_EnumIndexConverter_default');
  sql_types.EnumIndexConverter$ = dart$.generic(T => {
    class EnumIndexConverter extends sql_types.NullAwareTypeConverter$(T, core.int) {
      get values() {
        return this[values$];
      }
      set values(value) {
        super.values = value;
      }
      static ['_#new#tearOff'](T, values) {
        return new (sql_types.EnumIndexConverter$(T)).new(values);
      }
      requireMapToDart(fromDb) {
        core.int.as(fromDb);
        return this.values[$_get](fromDb);
      }
      requireMapToSql(value) {
        T.as(value);
        return core.int.as(dart$.dload(value, 'index'));
      }
    }
    (EnumIndexConverter.new = function(values) {
      this[values$] = values;
      EnumIndexConverter.__proto__.new.call(this);
      ;
    }).prototype = EnumIndexConverter.prototype;
    dart$.addTypeTests(EnumIndexConverter);
    EnumIndexConverter.prototype[_is_EnumIndexConverter_default] = true;
    dart$.addTypeCaches(EnumIndexConverter);
    dart$.setMethodSignature(EnumIndexConverter, () => ({
      __proto__: dart$.getMethods(EnumIndexConverter.__proto__),
      requireMapToDart: dart$.fnType(T, [dart$.nullable(core.Object)]),
      requireMapToSql: dart$.fnType(core.int, [dart$.nullable(core.Object)])
    }));
    dart$.setLibraryUri(EnumIndexConverter, I[2]);
    dart$.setFieldSignature(EnumIndexConverter, () => ({
      __proto__: dart$.getFields(EnumIndexConverter.__proto__),
      values: dart$.finalFieldType(core.List$(T))
    }));
    return EnumIndexConverter;
  });
  sql_types.EnumIndexConverter = sql_types.EnumIndexConverter$();
  dart$.addTypeTests(sql_types.EnumIndexConverter, _is_EnumIndexConverter_default);
  var types$ = dart$.privateName(sql_types, "SqlTypeSystem.types");
  sql_types.SqlTypeSystem = class SqlTypeSystem extends core.Object {
    get types() {
      return this[types$];
    }
    set types(value) {
      super.types = value;
    }
    static ['_#new#tearOff'](types) {
      return new sql_types.SqlTypeSystem.__(types);
    }
    static ['_#_#tearOff'](types) {
      return new sql_types.SqlTypeSystem.__(types);
    }
    static ['_#withDefaults#tearOff']() {
      return new sql_types.SqlTypeSystem.withDefaults();
    }
    forDartType(T) {
      return sql_types.SqlType$(T).as(this.types[$singleWhere](dart$.fn(t => sql_types.SqlType$(T).is(t), T$.SqlTypeTobool())));
    }
    mapToVariable(dart) {
      if (dart == null) return null;
      if (core.DateTime.is(dart)) return (C[4] || CT.C4).mapToSqlVariable(dart);
      if (typeof dart == 'boolean') return (C[1] || CT.C1).mapToSqlVariable(dart);
      return dart;
    }
    static mapToSqlConstant(dart) {
      if (dart == null) return "NULL";
      if (typeof dart == 'boolean') {
        return (C[1] || CT.C1).mapToSqlConstant(dart);
      } else if (typeof dart == 'string') {
        return (C[2] || CT.C2).mapToSqlConstant(dart);
      } else if (core.int.is(dart)) {
        return (C[3] || CT.C3).mapToSqlConstant(dart);
      } else if (core.DateTime.is(dart)) {
        return (C[4] || CT.C4).mapToSqlConstant(dart);
      } else if (typed_data.Uint8List.is(dart)) {
        return (C[5] || CT.C5).mapToSqlConstant(dart);
      } else if (typeof dart == 'number') {
        return (C[6] || CT.C6).mapToSqlConstant(dart);
      }
      dart$.throw(new core.ArgumentError.value(dart, "dart", "Must be null, bool, String, int, DateTime, Uint8List or double"));
    }
  };
  (sql_types.SqlTypeSystem.__ = function(types) {
    this[types$] = types;
    ;
  }).prototype = sql_types.SqlTypeSystem.prototype;
  (sql_types.SqlTypeSystem.withDefaults = function() {
    sql_types.SqlTypeSystem.__.call(this, C[0] || CT.C0);
  }).prototype = sql_types.SqlTypeSystem.prototype;
  dart$.addTypeTests(sql_types.SqlTypeSystem);
  dart$.addTypeCaches(sql_types.SqlTypeSystem);
  dart$.setMethodSignature(sql_types.SqlTypeSystem, () => ({
    __proto__: dart$.getMethods(sql_types.SqlTypeSystem.__proto__),
    forDartType: dart$.gFnType(T => [sql_types.SqlType$(T), []], T => [dart$.nullable(core.Object)]),
    mapToVariable: dart$.fnType(dart$.nullable(core.Object), [dart$.nullable(core.Object)])
  }));
  dart$.setStaticMethodSignature(sql_types.SqlTypeSystem, () => ['new', 'mapToSqlConstant']);
  dart$.setLibraryUri(sql_types.SqlTypeSystem, I[2]);
  dart$.setFieldSignature(sql_types.SqlTypeSystem, () => ({
    __proto__: dart$.getFields(sql_types.SqlTypeSystem.__proto__),
    types: dart$.finalFieldType(core.List$(sql_types.SqlType))
  }));
  dart$.setStaticFieldSignature(sql_types.SqlTypeSystem, () => ['defaultInstance', '_redirecting#']);
  dart$.defineLazy(sql_types.SqlTypeSystem, {
    /*sql_types.SqlTypeSystem.defaultInstance*/get defaultInstance() {
      return C[7] || CT.C7;
    }
  }, false);
  var Deprecated_message = dart$.privateName(core, "Deprecated.message");
  dart$.defineLazy(sql_types, {
    /*sql_types._deprecated*/get _deprecated() {
      return C[8] || CT.C8;
    }
  }, false);
  var base$ = dart$.privateName(case_when, "CaseWhenExpression.base");
  var whenThen$ = dart$.privateName(case_when, "CaseWhenExpression.whenThen");
  var orElse$ = dart$.privateName(case_when, "CaseWhenExpression.orElse");
  const _is_Expression_default = Symbol('_is_Expression_default');
  query_builder.Expression$ = dart$.generic(D => {
    var __t$ExpressionOfD = () => (__t$ExpressionOfD = dart$.constFn(query_builder.Expression$(D)))();
    var __t$VariableOfD = () => (__t$VariableOfD = dart$.constFn(query_builder.Variable$(D)))();
    var __t$IterableOfD = () => (__t$IterableOfD = dart$.constFn(core.Iterable$(D)))();
    var __t$_InExpressionOfD = () => (__t$_InExpressionOfD = dart$.constFn(query_builder._InExpression$(D)))();
    class Expression extends core.Object {
      get precedence() {
        return query_builder.Precedence.unknown;
      }
      get isLiteral() {
        return false;
      }
      equalsExp(compare) {
        __t$ExpressionOfD().as(compare);
        return new query_builder._Comparison.equal(this, compare);
      }
      equals(compare) {
        D.as(compare);
        return new query_builder._Comparison.equal(this, new (__t$VariableOfD()).new(compare));
      }
      dartCast(D2) {
        return new (query_builder._DartCastExpression$(D, D2)).new(this);
      }
      cast(D2) {
        return new (query_builder._CastInSqlExpression$(D, D2)).new(this);
      }
      isIn(values) {
        __t$IterableOfD().as(values);
        return new (__t$_InExpressionOfD()).new(this, values[$toList](), false);
      }
      isNotIn(values) {
        __t$IterableOfD().as(values);
        return new (__t$_InExpressionOfD()).new(this, values[$toList](), true);
      }
      isInQuery(select) {
        query_builder._checkSubquery(select);
        return new query_builder._InSelectExpression.new(select, this, false);
      }
      isNotInQuery(select) {
        query_builder._checkSubquery(select);
        return new query_builder._InSelectExpression.new(select, this, true);
      }
      caseMatch(T, opts) {
        let when = opts && 'when' in opts ? opts.when : null;
        core.Map$(__t$ExpressionOfD(), query_builder.Expression$(dart$.nullable(T))).as(when);
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        if (when[$isEmpty]) {
          dart$.throw(new core.ArgumentError.value(when, "when", "Must not be empty"));
        }
        return new (case_when.CaseWhenExpression$(T)).new(this, when[$entries][$toList](), orElse);
      }
      writeAroundPrecedence(context, precedence) {
        if (this.precedence['<'](precedence)) {
          context.buffer.write("(");
          this.writeInto(context);
          context.buffer.write(")");
        } else {
          this.writeInto(context);
        }
      }
      writeInner(ctx, inner) {
        if (!!this.precedence._equals(query_builder.Precedence.unknown)) dart$.assertFailed("Expressions with unknown precedence shouldn't have inner expressions", I[3], 149, 12, "precedence != Precedence.unknown");
        inner.writeAroundPrecedence(ctx, this.precedence);
      }
      findType(types) {
        return types.forDartType(D);
      }
    }
    (Expression.new = function() {
      ;
    }).prototype = Expression.prototype;
    dart$.addTypeTests(Expression);
    Expression.prototype[_is_Expression_default] = true;
    dart$.addTypeCaches(Expression);
    Expression[dart$.implements] = () => [query_builder.FunctionParameter];
    dart$.setMethodSignature(Expression, () => ({
      __proto__: dart$.getMethods(Expression.__proto__),
      equalsExp: dart$.fnType(query_builder.Expression$(core.bool), [dart$.nullable(core.Object)]),
      equals: dart$.fnType(query_builder.Expression$(core.bool), [dart$.nullable(core.Object)]),
      dartCast: dart$.gFnType(D2 => [query_builder.Expression$(D2), []], D2 => [dart$.nullable(core.Object)]),
      cast: dart$.gFnType(D2 => [query_builder.Expression$(D2), []], D2 => [dart$.nullable(core.Object)]),
      isIn: dart$.fnType(query_builder.Expression$(dart$.nullable(core.bool)), [dart$.nullable(core.Object)]),
      isNotIn: dart$.fnType(query_builder.Expression$(dart$.nullable(core.bool)), [dart$.nullable(core.Object)]),
      isInQuery: dart$.fnType(query_builder.Expression$(dart$.nullable(core.bool)), [query_builder.BaseSelectStatement]),
      isNotInQuery: dart$.fnType(query_builder.Expression$(dart$.nullable(core.bool)), [query_builder.BaseSelectStatement]),
      caseMatch: dart$.gFnType(T => [query_builder.Expression$(dart$.nullable(T)), [], {orElse: dart$.nullable(query_builder.Expression$(dart$.nullable(T))), when: dart$.nullable(core.Object)}, {}], T => [dart$.nullable(core.Object)]),
      writeAroundPrecedence: dart$.fnType(dart$.void, [query_builder.GenerationContext, query_builder.Precedence]),
      writeInner: dart$.fnType(dart$.void, [query_builder.GenerationContext, query_builder.Expression]),
      findType: dart$.fnType(sql_types.SqlType$(D), [sql_types.SqlTypeSystem])
    }));
    dart$.setGetterSignature(Expression, () => ({
      __proto__: dart$.getGetters(Expression.__proto__),
      precedence: query_builder.Precedence,
      isLiteral: core.bool
    }));
    dart$.setLibraryUri(Expression, I[4]);
    return Expression;
  });
  query_builder.Expression = query_builder.Expression$();
  dart$.addTypeTests(query_builder.Expression, _is_Expression_default);
  const _is_CaseWhenExpression_default = Symbol('_is_CaseWhenExpression_default');
  case_when.CaseWhenExpression$ = dart$.generic(T => {
    class CaseWhenExpression extends query_builder.Expression$(dart$.nullable(T)) {
      get base() {
        return this[base$];
      }
      set base(value) {
        super.base = value;
      }
      get whenThen() {
        return this[whenThen$];
      }
      set whenThen(value) {
        super.whenThen = value;
      }
      get orElse() {
        return this[orElse$];
      }
      set orElse(value) {
        super.orElse = value;
      }
      static ['_#new#tearOff'](T, base, whenThen, orElse) {
        return new (case_when.CaseWhenExpression$(T)).new(base, whenThen, orElse);
      }
      writeInto(context) {
        let t0;
        context.buffer.write("CASE ");
        t0 = this.base;
        t0 == null ? null : t0.writeInto(context);
        for (let entry of this.whenThen) {
          context.buffer.write(" WHEN ");
          entry.key.writeInto(context);
          context.buffer.write(" THEN ");
          entry.value.writeInto(context);
        }
        let orElse = this.orElse;
        if (orElse != null) {
          context.buffer.write(" ELSE ");
          orElse.writeInto(context);
        }
        context.buffer.write(" END");
      }
    }
    (CaseWhenExpression.new = function(base, whenThen, orElse) {
      this[base$] = base;
      this[whenThen$] = whenThen;
      this[orElse$] = orElse;
      CaseWhenExpression.__proto__.new.call(this);
      ;
    }).prototype = CaseWhenExpression.prototype;
    dart$.addTypeTests(CaseWhenExpression);
    CaseWhenExpression.prototype[_is_CaseWhenExpression_default] = true;
    dart$.addTypeCaches(CaseWhenExpression);
    dart$.setMethodSignature(CaseWhenExpression, () => ({
      __proto__: dart$.getMethods(CaseWhenExpression.__proto__),
      writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext])
    }));
    dart$.setLibraryUri(CaseWhenExpression, I[5]);
    dart$.setFieldSignature(CaseWhenExpression, () => ({
      __proto__: dart$.getFields(CaseWhenExpression.__proto__),
      base: dart$.finalFieldType(dart$.nullable(query_builder.Expression)),
      whenThen: dart$.finalFieldType(core.List$(core.MapEntry$(query_builder.Expression, query_builder.Expression))),
      orElse: dart$.finalFieldType(dart$.nullable(query_builder.Expression$(dart$.nullable(T))))
    }));
    return CaseWhenExpression;
  });
  case_when.CaseWhenExpression = case_when.CaseWhenExpression$();
  dart$.addTypeTests(case_when.CaseWhenExpression, _is_CaseWhenExpression_default);
  query_builder.Component = class Component extends core.Object {};
  (query_builder.Component.new = function() {
    ;
  }).prototype = query_builder.Component.prototype;
  dart$.addTypeTests(query_builder.Component);
  dart$.addTypeCaches(query_builder.Component);
  dart$.setLibraryUri(query_builder.Component, I[4]);
  var _name = dart$.privateName(core, "_name");
  var _Enum__name = dart$.privateName(core, "_Enum._name");
  var _Enum_index = dart$.privateName(core, "_Enum.index");
  query_builder.SqlDialect = class SqlDialect extends core._Enum {
    toString() {
      return "SqlDialect." + this[_name];
    }
  };
  (query_builder.SqlDialect.new = function(index, name) {
    query_builder.SqlDialect.__proto__.new.call(this, index, name);
    ;
  }).prototype = query_builder.SqlDialect.prototype;
  dart$.addTypeTests(query_builder.SqlDialect);
  dart$.addTypeCaches(query_builder.SqlDialect);
  dart$.setLibraryUri(query_builder.SqlDialect, I[4]);
  dart$.setStaticFieldSignature(query_builder.SqlDialect, () => ['values', 'sqlite', 'mysql', 'postgres']);
  dart$.defineExtensionMethods(query_builder.SqlDialect, ['toString']);
  dart$.defineLazy(query_builder.SqlDialect, {
    /*query_builder.SqlDialect.values*/get values() {
      return C[9] || CT.C9;
    },
    /*query_builder.SqlDialect.sqlite*/get sqlite() {
      return C[10] || CT.C10;
    },
    /*query_builder.SqlDialect.mysql*/get mysql() {
      return C[11] || CT.C11;
    },
    /*query_builder.SqlDialect.postgres*/get postgres() {
      return C[12] || CT.C12;
    }
  }, false);
  var groupBy$ = dart$.privateName(query_builder, "GroupBy.groupBy");
  var having$ = dart$.privateName(query_builder, "GroupBy.having");
  query_builder.GroupBy = class GroupBy extends query_builder.Component {
    get groupBy() {
      return this[groupBy$];
    }
    set groupBy(value) {
      super.groupBy = value;
    }
    get having() {
      return this[having$];
    }
    set having(value) {
      super.having = value;
    }
    static ['_#_#tearOff'](groupBy, having) {
      return new query_builder.GroupBy.__(groupBy, having);
    }
    writeInto(context) {
      context.buffer.write("GROUP BY ");
      query_builder._writeCommaSeparated(context, this.groupBy);
      if (this.having != null) {
        context.buffer.write(" HAVING ");
        dart$.nullCheck(this.having).writeInto(context);
      }
    }
  };
  (query_builder.GroupBy.__ = function(groupBy, having) {
    this[groupBy$] = groupBy;
    this[having$] = having;
    query_builder.GroupBy.__proto__.new.call(this);
    ;
  }).prototype = query_builder.GroupBy.prototype;
  dart$.addTypeTests(query_builder.GroupBy);
  dart$.addTypeCaches(query_builder.GroupBy);
  dart$.setMethodSignature(query_builder.GroupBy, () => ({
    __proto__: dart$.getMethods(query_builder.GroupBy.__proto__),
    writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext])
  }));
  dart$.setLibraryUri(query_builder.GroupBy, I[4]);
  dart$.setFieldSignature(query_builder.GroupBy, () => ({
    __proto__: dart$.getFields(query_builder.GroupBy.__proto__),
    groupBy: dart$.finalFieldType(core.List$(query_builder.Expression)),
    having: dart$.finalFieldType(dart$.nullable(query_builder.Expression$(dart$.nullable(core.bool))))
  }));
  query_builder._JoinType = class _JoinType extends core._Enum {
    toString() {
      return "_JoinType." + this[_name];
    }
  };
  (query_builder._JoinType.new = function(index, name) {
    query_builder._JoinType.__proto__.new.call(this, index, name);
    ;
  }).prototype = query_builder._JoinType.prototype;
  dart$.addTypeTests(query_builder._JoinType);
  dart$.addTypeCaches(query_builder._JoinType);
  dart$.setLibraryUri(query_builder._JoinType, I[4]);
  dart$.setStaticFieldSignature(query_builder._JoinType, () => ['values', 'inner', 'leftOuter', 'cross']);
  dart$.defineExtensionMethods(query_builder._JoinType, ['toString']);
  dart$.defineLazy(query_builder._JoinType, {
    /*query_builder._JoinType.values*/get values() {
      return C[13] || CT.C13;
    },
    /*query_builder._JoinType.inner*/get inner() {
      return C[14] || CT.C14;
    },
    /*query_builder._JoinType.leftOuter*/get leftOuter() {
      return C[15] || CT.C15;
    },
    /*query_builder._JoinType.cross*/get cross() {
      return C[16] || CT.C16;
    }
  }, false);
  var type$ = dart$.privateName(query_builder, "Join.type");
  var table$ = dart$.privateName(query_builder, "Join.table");
  var on$ = dart$.privateName(query_builder, "Join.on");
  var includeInResult$ = dart$.privateName(query_builder, "Join.includeInResult");
  const _is_Join_default = Symbol('_is_Join_default');
  query_builder.Join$ = dart$.generic((T, D) => {
    var __t$ResultSetImplementationOfT$D = () => (__t$ResultSetImplementationOfT$D = dart$.constFn(query_builder.ResultSetImplementation$(T, D)))();
    class Join extends query_builder.Component {
      get type() {
        return this[type$];
      }
      set type(value) {
        super.type = value;
      }
      get table() {
        return this[table$];
      }
      set table(value) {
        super.table = value;
      }
      get on() {
        return this[on$];
      }
      set on(value) {
        super.on = value;
      }
      get includeInResult() {
        return this[includeInResult$];
      }
      set includeInResult(value) {
        super.includeInResult = value;
      }
      static ['_#_#tearOff'](T, D, type, table, on, opts) {
        let includeInResult = opts && 'includeInResult' in opts ? opts.includeInResult : null;
        return new (query_builder.Join$(T, D)).__(type, table, on, {includeInResult: includeInResult});
      }
      writeInto(context) {
        context.buffer.write(query_builder._joinKeywords[$_get](this.type));
        context.buffer.write(" JOIN ");
        let resultSet = __t$ResultSetImplementationOfT$D().as(this.table);
        context.buffer.write(query_builder['NameWithAlias|get#tableWithAlias'](resultSet));
        context.watchedTables[$add](resultSet);
        if (this.type !== query_builder._JoinType.cross) {
          context.buffer.write(" ON ");
          dart$.nullCheck(this.on).writeInto(context);
        }
      }
    }
    (Join.__ = function(type, table, on, opts) {
      let includeInResult = opts && 'includeInResult' in opts ? opts.includeInResult : null;
      this[type$] = type;
      this[table$] = table;
      this[on$] = on;
      this[includeInResult$] = includeInResult;
      Join.__proto__.new.call(this);
      if (!__t$ResultSetImplementationOfT$D().is(this.table)) {
        dart$.throw(new core.ArgumentError.new("Invalid table parameter. You must provide the table reference from " + "generated database object.", "table"));
      }
    }).prototype = Join.prototype;
    dart$.addTypeTests(Join);
    Join.prototype[_is_Join_default] = true;
    dart$.addTypeCaches(Join);
    dart$.setMethodSignature(Join, () => ({
      __proto__: dart$.getMethods(Join.__proto__),
      writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext])
    }));
    dart$.setLibraryUri(Join, I[4]);
    dart$.setFieldSignature(Join, () => ({
      __proto__: dart$.getFields(Join.__proto__),
      type: dart$.finalFieldType(query_builder._JoinType),
      table: dart$.finalFieldType(dsl.Table),
      on: dart$.finalFieldType(dart$.nullable(query_builder.Expression$(dart$.nullable(core.bool)))),
      includeInResult: dart$.finalFieldType(dart$.nullable(core.bool))
    }));
    return Join;
  });
  query_builder.Join = query_builder.Join$();
  dart$.addTypeTests(query_builder.Join, _is_Join_default);
  var amount$ = dart$.privateName(query_builder, "Limit.amount");
  var offset$ = dart$.privateName(query_builder, "Limit.offset");
  query_builder.Limit = class Limit extends query_builder.Component {
    get amount() {
      return this[amount$];
    }
    set amount(value) {
      super.amount = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    static ['_#new#tearOff'](amount, offset) {
      return new query_builder.Limit.new(amount, offset);
    }
    writeInto(context) {
      if (this.offset != null) {
        context.buffer.write("LIMIT " + dart$.str(this.amount) + " OFFSET " + dart$.str(this.offset));
      } else {
        context.buffer.write("LIMIT " + dart$.str(this.amount));
      }
    }
  };
  (query_builder.Limit.new = function(amount, offset) {
    this[amount$] = amount;
    this[offset$] = offset;
    query_builder.Limit.__proto__.new.call(this);
    ;
  }).prototype = query_builder.Limit.prototype;
  dart$.addTypeTests(query_builder.Limit);
  dart$.addTypeCaches(query_builder.Limit);
  dart$.setMethodSignature(query_builder.Limit, () => ({
    __proto__: dart$.getMethods(query_builder.Limit.__proto__),
    writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext])
  }));
  dart$.setLibraryUri(query_builder.Limit, I[4]);
  dart$.setFieldSignature(query_builder.Limit, () => ({
    __proto__: dart$.getFields(query_builder.Limit.__proto__),
    amount: dart$.finalFieldType(core.int),
    offset: dart$.finalFieldType(dart$.nullable(core.int))
  }));
  query_builder.OrderingMode = class OrderingMode extends core._Enum {
    toString() {
      return "OrderingMode." + this[_name];
    }
  };
  (query_builder.OrderingMode.new = function(index, name) {
    query_builder.OrderingMode.__proto__.new.call(this, index, name);
    ;
  }).prototype = query_builder.OrderingMode.prototype;
  dart$.addTypeTests(query_builder.OrderingMode);
  dart$.addTypeCaches(query_builder.OrderingMode);
  dart$.setLibraryUri(query_builder.OrderingMode, I[4]);
  dart$.setStaticFieldSignature(query_builder.OrderingMode, () => ['values', 'asc', 'desc']);
  dart$.defineExtensionMethods(query_builder.OrderingMode, ['toString']);
  dart$.defineLazy(query_builder.OrderingMode, {
    /*query_builder.OrderingMode.values*/get values() {
      return C[17] || CT.C17;
    },
    /*query_builder.OrderingMode.asc*/get asc() {
      return C[18] || CT.C18;
    },
    /*query_builder.OrderingMode.desc*/get desc() {
      return C[19] || CT.C19;
    }
  }, false);
  var expression$ = dart$.privateName(query_builder, "OrderingTerm.expression");
  var mode$ = dart$.privateName(query_builder, "OrderingTerm.mode");
  query_builder.OrderingTerm = class OrderingTerm extends query_builder.Component {
    get expression() {
      return this[expression$];
    }
    set expression(value) {
      super.expression = value;
    }
    get mode() {
      return this[mode$];
    }
    set mode(value) {
      super.mode = value;
    }
    static ['_#new#tearOff'](opts) {
      let expression = opts && 'expression' in opts ? opts.expression : null;
      let mode = opts && 'mode' in opts ? opts.mode : C[18] || CT.C18;
      return new query_builder.OrderingTerm.new({expression: expression, mode: mode});
    }
    static asc(expression) {
      return new query_builder.OrderingTerm.new({expression: expression, mode: query_builder.OrderingMode.asc});
    }
    static ['_#asc#tearOff'](expression) {
      return query_builder.OrderingTerm.asc(expression);
    }
    static desc(expression) {
      return new query_builder.OrderingTerm.new({expression: expression, mode: query_builder.OrderingMode.desc});
    }
    static ['_#desc#tearOff'](expression) {
      return query_builder.OrderingTerm.desc(expression);
    }
    static random() {
      return new query_builder.OrderingTerm.new({expression: new query_builder.FunctionCallExpression.new("random", T$.JSArrayOfExpression().of([]))});
    }
    static ['_#random#tearOff']() {
      return query_builder.OrderingTerm.random();
    }
    writeInto(context) {
      this.expression.writeInto(context);
      context.writeWhitespace();
      context.buffer.write(query_builder._modeToString[$_get](this.mode));
    }
  };
  (query_builder.OrderingTerm.new = function(opts) {
    let expression = opts && 'expression' in opts ? opts.expression : null;
    let mode = opts && 'mode' in opts ? opts.mode : C[18] || CT.C18;
    this[expression$] = expression;
    this[mode$] = mode;
    query_builder.OrderingTerm.__proto__.new.call(this);
    ;
  }).prototype = query_builder.OrderingTerm.prototype;
  dart$.addTypeTests(query_builder.OrderingTerm);
  dart$.addTypeCaches(query_builder.OrderingTerm);
  dart$.setMethodSignature(query_builder.OrderingTerm, () => ({
    __proto__: dart$.getMethods(query_builder.OrderingTerm.__proto__),
    writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext])
  }));
  dart$.setStaticMethodSignature(query_builder.OrderingTerm, () => ['asc', 'desc', 'random']);
  dart$.setLibraryUri(query_builder.OrderingTerm, I[4]);
  dart$.setFieldSignature(query_builder.OrderingTerm, () => ({
    __proto__: dart$.getFields(query_builder.OrderingTerm.__proto__),
    expression: dart$.finalFieldType(query_builder.Expression),
    mode: dart$.finalFieldType(query_builder.OrderingMode)
  }));
  var terms$ = dart$.privateName(query_builder, "OrderBy.terms");
  query_builder.OrderBy = class OrderBy extends query_builder.Component {
    get terms() {
      return this[terms$];
    }
    set terms(value) {
      super.terms = value;
    }
    static ['_#new#tearOff'](terms) {
      return new query_builder.OrderBy.new(terms);
    }
    static ['_#nothing#tearOff']() {
      return new query_builder.OrderBy.nothing();
    }
    writeInto(context) {
      if (this.terms[$isEmpty]) return;
      context.buffer.write("ORDER BY ");
      query_builder._writeCommaSeparated(context, this.terms);
    }
  };
  (query_builder.OrderBy.new = function(terms) {
    this[terms$] = terms;
    query_builder.OrderBy.__proto__.new.call(this);
    ;
  }).prototype = query_builder.OrderBy.prototype;
  (query_builder.OrderBy.nothing = function() {
    query_builder.OrderBy.new.call(this, C[20] || CT.C20);
  }).prototype = query_builder.OrderBy.prototype;
  dart$.addTypeTests(query_builder.OrderBy);
  dart$.addTypeCaches(query_builder.OrderBy);
  dart$.setMethodSignature(query_builder.OrderBy, () => ({
    __proto__: dart$.getMethods(query_builder.OrderBy.__proto__),
    writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext])
  }));
  dart$.setLibraryUri(query_builder.OrderBy, I[4]);
  dart$.setFieldSignature(query_builder.OrderBy, () => ({
    __proto__: dart$.getFields(query_builder.OrderBy.__proto__),
    terms: dart$.finalFieldType(core.List$(query_builder.OrderingTerm))
  }));
  var predicate$ = dart$.privateName(query_builder, "Where.predicate");
  query_builder.Where = class Where extends query_builder.Component {
    get predicate() {
      return this[predicate$];
    }
    set predicate(value) {
      super.predicate = value;
    }
    static ['_#new#tearOff'](predicate) {
      return new query_builder.Where.new(predicate);
    }
    writeInto(context) {
      context.buffer.write("WHERE ");
      this.predicate.writeInto(context);
    }
    get hashCode() {
      return this.predicate[$hashCode] * 7;
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || query_builder.Where.is(other) && other.predicate[$_equals](this.predicate);
    }
  };
  (query_builder.Where.new = function(predicate) {
    this[predicate$] = predicate;
    query_builder.Where.__proto__.new.call(this);
    ;
  }).prototype = query_builder.Where.prototype;
  dart$.addTypeTests(query_builder.Where);
  dart$.addTypeCaches(query_builder.Where);
  dart$.setMethodSignature(query_builder.Where, () => ({
    __proto__: dart$.getMethods(query_builder.Where.__proto__),
    writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext])
  }));
  dart$.setLibraryUri(query_builder.Where, I[4]);
  dart$.setFieldSignature(query_builder.Where, () => ({
    __proto__: dart$.getFields(query_builder.Where.__proto__),
    predicate: dart$.finalFieldType(query_builder.Expression$(dart$.nullable(core.bool)))
  }));
  dart$.defineExtensionMethods(query_builder.Where, ['_equals']);
  dart$.defineExtensionAccessors(query_builder.Where, ['hashCode']);
  var precedence = dart$.privateName(query_builder, "_AggregateExpression.precedence");
  const _is__AggregateExpression_default = Symbol('_is__AggregateExpression_default');
  query_builder._AggregateExpression$ = dart$.generic(D => {
    class _AggregateExpression extends query_builder.Expression$(D) {
      get precedence() {
        return this[precedence];
      }
      set precedence(value) {
        super.precedence = value;
      }
      static ['_#new#tearOff'](D, functionName, parameter, opts) {
        let filter = opts && 'filter' in opts ? opts.filter : null;
        let distinct = opts && 'distinct' in opts ? opts.distinct : null;
        return new (query_builder._AggregateExpression$(D)).new(functionName, parameter, {filter: filter, distinct: distinct});
      }
      writeInto(context) {
        let t6;
        t6 = context.buffer;
        (() => {
          t6.write(this.functionName);
          t6.write("(");
          return t6;
        })();
        if (this.distinct) {
          context.buffer.write("DISTINCT ");
        }
        this.parameter.writeInto(context);
        context.buffer.write(")");
        if (this.filter != null) {
          context.buffer.write(" FILTER (");
          dart$.nullCheck(this.filter).writeInto(context);
          context.buffer.write(")");
        }
      }
      get hashCode() {
        return core.Object.hash(this.functionName, this.distinct, this.parameter, this.filter);
      }
      _equals(other) {
        if (other == null) return false;
        if (this !== other && !other[$runtimeType]._equals(this[$runtimeType])) {
          return false;
        }
        let typedOther = query_builder._AggregateExpression.as(other);
        return typedOther.functionName === this.functionName && typedOther.distinct === this.distinct && typedOther.parameter[$_equals](this.parameter) && dart$.equals(typedOther.filter, this.filter);
      }
    }
    (_AggregateExpression.new = function(functionName, parameter, opts) {
      let t6;
      let filter = opts && 'filter' in opts ? opts.filter : null;
      let distinct = opts && 'distinct' in opts ? opts.distinct : null;
      this[precedence] = query_builder.Precedence.primary;
      this.functionName = functionName;
      this.parameter = parameter;
      this.filter = filter != null ? new query_builder.Where.new(filter) : null;
      this.distinct = (t6 = distinct, t6 == null ? false : t6);
      _AggregateExpression.__proto__.new.call(this);
      ;
    }).prototype = _AggregateExpression.prototype;
    dart$.addTypeTests(_AggregateExpression);
    _AggregateExpression.prototype[_is__AggregateExpression_default] = true;
    dart$.addTypeCaches(_AggregateExpression);
    dart$.setMethodSignature(_AggregateExpression, () => ({
      __proto__: dart$.getMethods(_AggregateExpression.__proto__),
      writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext])
    }));
    dart$.setLibraryUri(_AggregateExpression, I[4]);
    dart$.setFieldSignature(_AggregateExpression, () => ({
      __proto__: dart$.getFields(_AggregateExpression.__proto__),
      functionName: dart$.finalFieldType(core.String),
      distinct: dart$.finalFieldType(core.bool),
      parameter: dart$.finalFieldType(query_builder.FunctionParameter),
      filter: dart$.finalFieldType(dart$.nullable(query_builder.Where)),
      precedence: dart$.finalFieldType(query_builder.Precedence)
    }));
    dart$.defineExtensionMethods(_AggregateExpression, ['_equals']);
    dart$.defineExtensionAccessors(_AggregateExpression, ['hashCode']);
    return _AggregateExpression;
  });
  query_builder._AggregateExpression = query_builder._AggregateExpression$();
  dart$.addTypeTests(query_builder._AggregateExpression, _is__AggregateExpression_default);
  query_builder._StarFunctionParameter = class _StarFunctionParameter extends core.Object {
    static ['_#new#tearOff']() {
      return new query_builder._StarFunctionParameter.new();
    }
    writeInto(context) {
      context.buffer.write("*");
    }
  };
  (query_builder._StarFunctionParameter.new = function() {
    ;
  }).prototype = query_builder._StarFunctionParameter.prototype;
  dart$.addTypeTests(query_builder._StarFunctionParameter);
  dart$.addTypeCaches(query_builder._StarFunctionParameter);
  query_builder._StarFunctionParameter[dart$.implements] = () => [query_builder.FunctionParameter];
  dart$.setMethodSignature(query_builder._StarFunctionParameter, () => ({
    __proto__: dart$.getMethods(query_builder._StarFunctionParameter.__proto__),
    writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext])
  }));
  dart$.setLibraryUri(query_builder._StarFunctionParameter, I[4]);
  query_builder._NotExpression = class _NotExpression extends query_builder.Expression$(dart$.nullable(core.bool)) {
    static ['_#new#tearOff'](inner) {
      return new query_builder._NotExpression.new(inner);
    }
    get precedence() {
      return query_builder.Precedence.unary;
    }
    writeInto(context) {
      context.buffer.write("NOT ");
      this.writeInner(context, this.inner);
    }
    get hashCode() {
      return this.inner[$hashCode] << 1 >>> 0;
    }
    _equals(other) {
      if (other == null) return false;
      return query_builder._NotExpression.is(other) && other.inner[$_equals](this.inner);
    }
  };
  (query_builder._NotExpression.new = function(inner) {
    this.inner = inner;
    query_builder._NotExpression.__proto__.new.call(this);
    ;
  }).prototype = query_builder._NotExpression.prototype;
  dart$.addTypeTests(query_builder._NotExpression);
  dart$.addTypeCaches(query_builder._NotExpression);
  dart$.setMethodSignature(query_builder._NotExpression, () => ({
    __proto__: dart$.getMethods(query_builder._NotExpression.__proto__),
    writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext])
  }));
  dart$.setLibraryUri(query_builder._NotExpression, I[4]);
  dart$.setFieldSignature(query_builder._NotExpression, () => ({
    __proto__: dart$.getFields(query_builder._NotExpression.__proto__),
    inner: dart$.finalFieldType(query_builder.Expression$(dart$.nullable(core.bool)))
  }));
  dart$.defineExtensionMethods(query_builder._NotExpression, ['_equals']);
  dart$.defineExtensionAccessors(query_builder._NotExpression, ['hashCode']);
  var precedence$ = dart$.privateName(query_builder, "_BetweenExpression.precedence");
  query_builder._BetweenExpression = class _BetweenExpression extends query_builder.Expression$(dart$.nullable(core.bool)) {
    get precedence() {
      return this[precedence$];
    }
    set precedence(value) {
      super.precedence = value;
    }
    static ['_#new#tearOff'](opts) {
      let target = opts && 'target' in opts ? opts.target : null;
      let lower = opts && 'lower' in opts ? opts.lower : null;
      let higher = opts && 'higher' in opts ? opts.higher : null;
      let not = opts && 'not' in opts ? opts.not : false;
      return new query_builder._BetweenExpression.new({target: target, lower: lower, higher: higher, not: not});
    }
    writeInto(context) {
      this.writeInner(context, this.target);
      if (this.not) context.buffer.write(" NOT");
      context.buffer.write(" BETWEEN ");
      this.writeInner(context, this.lower);
      context.buffer.write(" AND ");
      this.writeInner(context, this.higher);
    }
    get hashCode() {
      return core.Object.hash(this.target, this.lower, this.higher, this.not);
    }
    _equals(other) {
      if (other == null) return false;
      return query_builder._BetweenExpression.is(other) && other.target[$_equals](this.target) && other.not === this.not && other.lower[$_equals](this.lower) && other.higher[$_equals](this.higher);
    }
  };
  (query_builder._BetweenExpression.new = function(opts) {
    let target = opts && 'target' in opts ? opts.target : null;
    let lower = opts && 'lower' in opts ? opts.lower : null;
    let higher = opts && 'higher' in opts ? opts.higher : null;
    let not = opts && 'not' in opts ? opts.not : false;
    this[precedence$] = query_builder.Precedence.comparisonEq;
    this.target = target;
    this.lower = lower;
    this.higher = higher;
    this.not = not;
    query_builder._BetweenExpression.__proto__.new.call(this);
    ;
  }).prototype = query_builder._BetweenExpression.prototype;
  dart$.addTypeTests(query_builder._BetweenExpression);
  dart$.addTypeCaches(query_builder._BetweenExpression);
  dart$.setMethodSignature(query_builder._BetweenExpression, () => ({
    __proto__: dart$.getMethods(query_builder._BetweenExpression.__proto__),
    writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext])
  }));
  dart$.setLibraryUri(query_builder._BetweenExpression, I[4]);
  dart$.setFieldSignature(query_builder._BetweenExpression, () => ({
    __proto__: dart$.getFields(query_builder._BetweenExpression.__proto__),
    target: dart$.finalFieldType(query_builder.Expression),
    precedence: dart$.finalFieldType(query_builder.Precedence),
    not: dart$.finalFieldType(core.bool),
    lower: dart$.finalFieldType(query_builder.Expression),
    higher: dart$.finalFieldType(query_builder.Expression)
  }));
  dart$.defineExtensionMethods(query_builder._BetweenExpression, ['_equals']);
  dart$.defineExtensionAccessors(query_builder._BetweenExpression, ['hashCode']);
  var content$ = dart$.privateName(query_builder, "CustomExpression.content");
  var watchedTables$ = dart$.privateName(query_builder, "CustomExpression.watchedTables");
  var precedence$0 = dart$.privateName(query_builder, "CustomExpression.precedence");
  var Precedence__value = dart$.privateName(query_builder, "Precedence._value");
  const _is_CustomExpression_default = Symbol('_is_CustomExpression_default');
  query_builder.CustomExpression$ = dart$.generic(D => {
    class CustomExpression extends query_builder.Expression$(D) {
      get content() {
        return this[content$];
      }
      set content(value) {
        super.content = value;
      }
      get watchedTables() {
        return this[watchedTables$];
      }
      set watchedTables(value) {
        super.watchedTables = value;
      }
      get precedence() {
        return this[precedence$0];
      }
      set precedence(value) {
        super.precedence = value;
      }
      static ['_#new#tearOff'](D, content, opts) {
        let watchedTables = opts && 'watchedTables' in opts ? opts.watchedTables : C[21] || CT.C21;
        let precedence = opts && 'precedence' in opts ? opts.precedence : C[22] || CT.C22;
        return new (query_builder.CustomExpression$(D)).new(content, {watchedTables: watchedTables, precedence: precedence});
      }
      writeInto(context) {
        context.buffer.write(this.content);
        context.watchedTables[$addAll](this.watchedTables);
      }
      get hashCode() {
        return this.content[$hashCode] * 3;
      }
      _equals(other) {
        if (other == null) return false;
        return other[$runtimeType]._equals(this[$runtimeType]) && query_builder.CustomExpression.as(other).content === this.content;
      }
    }
    (CustomExpression.new = function(content, opts) {
      let watchedTables = opts && 'watchedTables' in opts ? opts.watchedTables : C[21] || CT.C21;
      let precedence = opts && 'precedence' in opts ? opts.precedence : C[22] || CT.C22;
      this[content$] = content;
      this[watchedTables$] = watchedTables;
      this[precedence$0] = precedence;
      CustomExpression.__proto__.new.call(this);
      ;
    }).prototype = CustomExpression.prototype;
    dart$.addTypeTests(CustomExpression);
    CustomExpression.prototype[_is_CustomExpression_default] = true;
    dart$.addTypeCaches(CustomExpression);
    dart$.setMethodSignature(CustomExpression, () => ({
      __proto__: dart$.getMethods(CustomExpression.__proto__),
      writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext])
    }));
    dart$.setLibraryUri(CustomExpression, I[4]);
    dart$.setFieldSignature(CustomExpression, () => ({
      __proto__: dart$.getFields(CustomExpression.__proto__),
      content: dart$.finalFieldType(core.String),
      watchedTables: dart$.finalFieldType(core.Iterable$(query_builder.TableInfo$(dsl.Table, dart$.dynamic))),
      precedence: dart$.finalFieldType(query_builder.Precedence)
    }));
    dart$.defineExtensionMethods(CustomExpression, ['_equals']);
    dart$.defineExtensionAccessors(CustomExpression, ['hashCode']);
    return CustomExpression;
  });
  query_builder.CustomExpression = query_builder.CustomExpression$();
  dart$.addTypeTests(query_builder.CustomExpression, _is_CustomExpression_default);
  query_builder._CustomDateTimeExpression = class _CustomDateTimeExpression extends query_builder.CustomExpression$(core.DateTime) {
    get precedence() {
      return query_builder.Precedence.primary;
    }
    static ['_#new#tearOff'](content) {
      return new query_builder._CustomDateTimeExpression.new(content);
    }
  };
  (query_builder._CustomDateTimeExpression.new = function(content) {
    query_builder._CustomDateTimeExpression.__proto__.new.call(this, content);
    ;
  }).prototype = query_builder._CustomDateTimeExpression.prototype;
  dart$.addTypeTests(query_builder._CustomDateTimeExpression);
  dart$.addTypeCaches(query_builder._CustomDateTimeExpression);
  dart$.setGetterSignature(query_builder._CustomDateTimeExpression, () => ({
    __proto__: dart$.getGetters(query_builder._CustomDateTimeExpression.__proto__),
    precedence: query_builder.Precedence
  }));
  dart$.setLibraryUri(query_builder._CustomDateTimeExpression, I[4]);
  query_builder._StrftimeSingleFieldExpression = class _StrftimeSingleFieldExpression extends query_builder.Expression$(dart$.nullable(core.int)) {
    static ['_#new#tearOff'](format, date) {
      return new query_builder._StrftimeSingleFieldExpression.new(format, date);
    }
    writeInto(context) {
      context.buffer.write("CAST(strftime('" + this.format + "', ");
      this.date.writeInto(context);
      context.buffer.write(", 'unixepoch') AS INTEGER)");
    }
    get hashCode() {
      return core.Object.hash(this.format, this.date);
    }
    _equals(other) {
      if (other == null) return false;
      return query_builder._StrftimeSingleFieldExpression.is(other) && other.format === this.format && other.date[$_equals](this.date);
    }
  };
  (query_builder._StrftimeSingleFieldExpression.new = function(format, date) {
    this.format = format;
    this.date = date;
    query_builder._StrftimeSingleFieldExpression.__proto__.new.call(this);
    ;
  }).prototype = query_builder._StrftimeSingleFieldExpression.prototype;
  dart$.addTypeTests(query_builder._StrftimeSingleFieldExpression);
  dart$.addTypeCaches(query_builder._StrftimeSingleFieldExpression);
  dart$.setMethodSignature(query_builder._StrftimeSingleFieldExpression, () => ({
    __proto__: dart$.getMethods(query_builder._StrftimeSingleFieldExpression.__proto__),
    writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext])
  }));
  dart$.setLibraryUri(query_builder._StrftimeSingleFieldExpression, I[4]);
  dart$.setFieldSignature(query_builder._StrftimeSingleFieldExpression, () => ({
    __proto__: dart$.getFields(query_builder._StrftimeSingleFieldExpression.__proto__),
    format: dart$.finalFieldType(core.String),
    date: dart$.finalFieldType(query_builder.Expression$(dart$.nullable(core.DateTime)))
  }));
  dart$.defineExtensionMethods(query_builder._StrftimeSingleFieldExpression, ['_equals']);
  dart$.defineExtensionAccessors(query_builder._StrftimeSingleFieldExpression, ['hashCode']);
  var _select$ = dart$.privateName(query_builder, "_select");
  var _not$ = dart$.privateName(query_builder, "_not");
  const _is__ExistsExpression_default = Symbol('_is__ExistsExpression_default');
  query_builder._ExistsExpression$ = dart$.generic(T => {
    class _ExistsExpression extends query_builder.Expression$(core.bool) {
      get precedence() {
        return query_builder.Precedence.comparisonEq;
      }
      static ['_#new#tearOff'](T, _select, _not) {
        return new (query_builder._ExistsExpression$(T)).new(_select, _not);
      }
      writeInto(context) {
        if (this[_not$]) {
          context.buffer.write("NOT ");
        }
        context.buffer.write("EXISTS ");
        context.buffer.write("(");
        this[_select$].writeInto(context);
        context.buffer.write(")");
      }
      get hashCode() {
        return core.Object.hash(this[_select$], this[_not$]);
      }
      _equals(other) {
        if (other == null) return false;
        return query_builder._ExistsExpression.is(other) && other[_select$][$_equals](this[_select$]) && other[_not$] === this[_not$];
      }
    }
    (_ExistsExpression.new = function(_select, _not) {
      this[_select$] = _select;
      this[_not$] = _not;
      _ExistsExpression.__proto__.new.call(this);
      ;
    }).prototype = _ExistsExpression.prototype;
    dart$.addTypeTests(_ExistsExpression);
    _ExistsExpression.prototype[_is__ExistsExpression_default] = true;
    dart$.addTypeCaches(_ExistsExpression);
    dart$.setMethodSignature(_ExistsExpression, () => ({
      __proto__: dart$.getMethods(_ExistsExpression.__proto__),
      writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext])
    }));
    dart$.setLibraryUri(_ExistsExpression, I[4]);
    dart$.setFieldSignature(_ExistsExpression, () => ({
      __proto__: dart$.getFields(_ExistsExpression.__proto__),
      [_select$]: dart$.finalFieldType(query_builder.BaseSelectStatement),
      [_not$]: dart$.finalFieldType(core.bool)
    }));
    dart$.defineExtensionMethods(_ExistsExpression, ['_equals']);
    dart$.defineExtensionAccessors(_ExistsExpression, ['hashCode']);
    return _ExistsExpression;
  });
  query_builder._ExistsExpression = query_builder._ExistsExpression$();
  dart$.addTypeTests(query_builder._ExistsExpression, _is__ExistsExpression_default);
  query_builder.FunctionParameter = class FunctionParameter extends core.Object {};
  (query_builder.FunctionParameter.new = function() {
    ;
  }).prototype = query_builder.FunctionParameter.prototype;
  dart$.addTypeTests(query_builder.FunctionParameter);
  dart$.addTypeCaches(query_builder.FunctionParameter);
  query_builder.FunctionParameter[dart$.implements] = () => [query_builder.Component];
  dart$.setLibraryUri(query_builder.FunctionParameter, I[4]);
  var _value = dart$.privateName(query_builder, "_value");
  const _value$ = Precedence__value;
  query_builder.Precedence = class Precedence extends core.Object {
    get [_value]() {
      return this[_value$];
    }
    set [_value](value) {
      super[_value] = value;
    }
    static ['_#_#tearOff'](_value) {
      return new query_builder.Precedence.__(_value);
    }
    compareTo(other) {
      query_builder.Precedence.as(other);
      return this[_value][$compareTo](other[_value]);
    }
    get hashCode() {
      return this[_value];
    }
    _equals(other) {
      if (other == null) return false;
      return query_builder.Precedence.is(other) && other[_value] === this[_value];
    }
    ['<'](other) {
      return this.compareTo(other) < 0;
    }
    ['<='](other) {
      return this.compareTo(other) <= 0;
    }
    ['>'](other) {
      return this.compareTo(other) > 0;
    }
    ['>='](other) {
      return this.compareTo(other) >= 0;
    }
  };
  (query_builder.Precedence.__ = function(_value) {
    this[_value$] = _value;
    ;
  }).prototype = query_builder.Precedence.prototype;
  dart$.addTypeTests(query_builder.Precedence);
  dart$.addTypeCaches(query_builder.Precedence);
  query_builder.Precedence[dart$.implements] = () => [core.Comparable$(query_builder.Precedence)];
  dart$.setMethodSignature(query_builder.Precedence, () => ({
    __proto__: dart$.getMethods(query_builder.Precedence.__proto__),
    compareTo: dart$.fnType(core.int, [dart$.nullable(core.Object)]),
    [$compareTo]: dart$.fnType(core.int, [dart$.nullable(core.Object)]),
    '<': dart$.fnType(core.bool, [query_builder.Precedence]),
    '<=': dart$.fnType(core.bool, [query_builder.Precedence]),
    '>': dart$.fnType(core.bool, [query_builder.Precedence]),
    '>=': dart$.fnType(core.bool, [query_builder.Precedence])
  }));
  dart$.setLibraryUri(query_builder.Precedence, I[4]);
  dart$.setFieldSignature(query_builder.Precedence, () => ({
    __proto__: dart$.getFields(query_builder.Precedence.__proto__),
    [_value]: dart$.finalFieldType(core.int)
  }));
  dart$.setStaticFieldSignature(query_builder.Precedence, () => ['unknown', 'or', 'and', 'comparisonEq', 'comparison', 'bitwise', 'plusMinus', 'mulDivide', 'stringConcatenation', 'unary', 'postfix', 'primary']);
  dart$.defineExtensionMethods(query_builder.Precedence, ['compareTo', '_equals']);
  dart$.defineExtensionAccessors(query_builder.Precedence, ['hashCode']);
  dart$.defineLazy(query_builder.Precedence, {
    /*query_builder.Precedence.unknown*/get unknown() {
      return C[22] || CT.C22;
    },
    /*query_builder.Precedence.or*/get or() {
      return C[23] || CT.C23;
    },
    /*query_builder.Precedence.and*/get and() {
      return C[24] || CT.C24;
    },
    /*query_builder.Precedence.comparisonEq*/get comparisonEq() {
      return C[25] || CT.C25;
    },
    /*query_builder.Precedence.comparison*/get comparison() {
      return C[26] || CT.C26;
    },
    /*query_builder.Precedence.bitwise*/get bitwise() {
      return C[27] || CT.C27;
    },
    /*query_builder.Precedence.plusMinus*/get plusMinus() {
      return C[28] || CT.C28;
    },
    /*query_builder.Precedence.mulDivide*/get mulDivide() {
      return C[29] || CT.C29;
    },
    /*query_builder.Precedence.stringConcatenation*/get stringConcatenation() {
      return C[30] || CT.C30;
    },
    /*query_builder.Precedence.unary*/get unary() {
      return C[31] || CT.C31;
    },
    /*query_builder.Precedence.postfix*/get postfix() {
      return C[32] || CT.C32;
    },
    /*query_builder.Precedence.primary*/get primary() {
      return C[33] || CT.C33;
    }
  }, false);
  const _is__InfixOperator_default = Symbol('_is__InfixOperator_default');
  query_builder._InfixOperator$ = dart$.generic(D => {
    class _InfixOperator extends query_builder.Expression$(D) {
      writeInto(context) {
        this.writeInner(context, this.left);
        context.writeWhitespace();
        context.buffer.write(this.operator);
        context.writeWhitespace();
        this.writeInner(context, this.right);
      }
      get hashCode() {
        return core.Object.hash(this.left, this.right, this.operator);
      }
      _equals(other) {
        if (other == null) return false;
        return query_builder._InfixOperator.is(other) && other.left[$_equals](this.left) && other.right[$_equals](this.right) && other.operator === this.operator;
      }
    }
    (_InfixOperator.new = function() {
      _InfixOperator.__proto__.new.call(this);
      ;
    }).prototype = _InfixOperator.prototype;
    dart$.addTypeTests(_InfixOperator);
    _InfixOperator.prototype[_is__InfixOperator_default] = true;
    dart$.addTypeCaches(_InfixOperator);
    dart$.setMethodSignature(_InfixOperator, () => ({
      __proto__: dart$.getMethods(_InfixOperator.__proto__),
      writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext])
    }));
    dart$.setLibraryUri(_InfixOperator, I[4]);
    dart$.defineExtensionMethods(_InfixOperator, ['_equals']);
    dart$.defineExtensionAccessors(_InfixOperator, ['hashCode']);
    return _InfixOperator;
  });
  query_builder._InfixOperator = query_builder._InfixOperator$();
  dart$.addTypeTests(query_builder._InfixOperator, _is__InfixOperator_default);
  var left$ = dart$.privateName(query_builder, "_BaseInfixOperator.left");
  var operator$ = dart$.privateName(query_builder, "_BaseInfixOperator.operator");
  var right$ = dart$.privateName(query_builder, "_BaseInfixOperator.right");
  var precedence$1 = dart$.privateName(query_builder, "_BaseInfixOperator.precedence");
  const _is__BaseInfixOperator_default = Symbol('_is__BaseInfixOperator_default');
  query_builder._BaseInfixOperator$ = dart$.generic(D => {
    class _BaseInfixOperator extends query_builder._InfixOperator$(D) {
      get left() {
        return this[left$];
      }
      set left(value) {
        super.left = value;
      }
      get operator() {
        return this[operator$];
      }
      set operator(value) {
        super.operator = value;
      }
      get right() {
        return this[right$];
      }
      set right(value) {
        super.right = value;
      }
      get precedence() {
        return this[precedence$1];
      }
      set precedence(value) {
        super.precedence = value;
      }
      static ['_#new#tearOff'](D, left, operator, right, opts) {
        let precedence = opts && 'precedence' in opts ? opts.precedence : C[22] || CT.C22;
        return new (query_builder._BaseInfixOperator$(D)).new(left, operator, right, {precedence: precedence});
      }
    }
    (_BaseInfixOperator.new = function(left, operator, right, opts) {
      let precedence = opts && 'precedence' in opts ? opts.precedence : C[22] || CT.C22;
      this[left$] = left;
      this[operator$] = operator;
      this[right$] = right;
      this[precedence$1] = precedence;
      _BaseInfixOperator.__proto__.new.call(this);
      ;
    }).prototype = _BaseInfixOperator.prototype;
    dart$.addTypeTests(_BaseInfixOperator);
    _BaseInfixOperator.prototype[_is__BaseInfixOperator_default] = true;
    dart$.addTypeCaches(_BaseInfixOperator);
    dart$.setLibraryUri(_BaseInfixOperator, I[4]);
    dart$.setFieldSignature(_BaseInfixOperator, () => ({
      __proto__: dart$.getFields(_BaseInfixOperator.__proto__),
      left: dart$.finalFieldType(query_builder.Expression),
      operator: dart$.finalFieldType(core.String),
      right: dart$.finalFieldType(query_builder.Expression),
      precedence: dart$.finalFieldType(query_builder.Precedence)
    }));
    return _BaseInfixOperator;
  });
  query_builder._BaseInfixOperator = query_builder._BaseInfixOperator$();
  dart$.addTypeTests(query_builder._BaseInfixOperator, _is__BaseInfixOperator_default);
  query_builder._ComparisonOperator = class _ComparisonOperator extends core._Enum {
    toString() {
      return "_ComparisonOperator." + this[_name];
    }
  };
  (query_builder._ComparisonOperator.new = function(index, name) {
    query_builder._ComparisonOperator.__proto__.new.call(this, index, name);
    ;
  }).prototype = query_builder._ComparisonOperator.prototype;
  dart$.addTypeTests(query_builder._ComparisonOperator);
  dart$.addTypeCaches(query_builder._ComparisonOperator);
  dart$.setLibraryUri(query_builder._ComparisonOperator, I[4]);
  dart$.setStaticFieldSignature(query_builder._ComparisonOperator, () => ['values', 'less', 'lessOrEqual', 'equal', 'moreOrEqual', 'more']);
  dart$.defineExtensionMethods(query_builder._ComparisonOperator, ['toString']);
  dart$.defineLazy(query_builder._ComparisonOperator, {
    /*query_builder._ComparisonOperator.values*/get values() {
      return C[34] || CT.C34;
    },
    /*query_builder._ComparisonOperator.less*/get less() {
      return C[35] || CT.C35;
    },
    /*query_builder._ComparisonOperator.lessOrEqual*/get lessOrEqual() {
      return C[36] || CT.C36;
    },
    /*query_builder._ComparisonOperator.equal*/get equal() {
      return C[37] || CT.C37;
    },
    /*query_builder._ComparisonOperator.moreOrEqual*/get moreOrEqual() {
      return C[38] || CT.C38;
    },
    /*query_builder._ComparisonOperator.more*/get more() {
      return C[39] || CT.C39;
    }
  }, false);
  var left$0 = dart$.privateName(query_builder, "_Comparison.left");
  var right$0 = dart$.privateName(query_builder, "_Comparison.right");
  query_builder._Comparison = class _Comparison extends query_builder._InfixOperator$(core.bool) {
    get left() {
      return this[left$0];
    }
    set left(value) {
      super.left = value;
    }
    get right() {
      return this[right$0];
    }
    set right(value) {
      super.right = value;
    }
    get operator() {
      return dart$.nullCheck(query_builder._Comparison._operatorNames[$_get](this.op));
    }
    get precedence() {
      if (this.op === query_builder._ComparisonOperator.equal) {
        return query_builder.Precedence.comparisonEq;
      } else {
        return query_builder.Precedence.comparison;
      }
    }
    static ['_#new#tearOff'](left, op, right) {
      return new query_builder._Comparison.new(left, op, right);
    }
    static ['_#equal#tearOff'](left, right) {
      return new query_builder._Comparison.equal(left, right);
    }
  };
  (query_builder._Comparison.new = function(left, op, right) {
    this[left$0] = left;
    this.op = op;
    this[right$0] = right;
    query_builder._Comparison.__proto__.new.call(this);
    ;
  }).prototype = query_builder._Comparison.prototype;
  (query_builder._Comparison.equal = function(left, right) {
    this[left$0] = left;
    this[right$0] = right;
    this.op = query_builder._ComparisonOperator.equal;
    query_builder._Comparison.__proto__.new.call(this);
    ;
  }).prototype = query_builder._Comparison.prototype;
  dart$.addTypeTests(query_builder._Comparison);
  dart$.addTypeCaches(query_builder._Comparison);
  dart$.setGetterSignature(query_builder._Comparison, () => ({
    __proto__: dart$.getGetters(query_builder._Comparison.__proto__),
    operator: core.String
  }));
  dart$.setLibraryUri(query_builder._Comparison, I[4]);
  dart$.setFieldSignature(query_builder._Comparison, () => ({
    __proto__: dart$.getFields(query_builder._Comparison.__proto__),
    left: dart$.finalFieldType(query_builder.Expression),
    right: dart$.finalFieldType(query_builder.Expression),
    op: dart$.finalFieldType(query_builder._ComparisonOperator)
  }));
  dart$.setStaticFieldSignature(query_builder._Comparison, () => ['_operatorNames']);
  dart$.defineLazy(query_builder._Comparison, {
    /*query_builder._Comparison._operatorNames*/get _operatorNames() {
      return C[40] || CT.C40;
    }
  }, false);
  const _is__UnaryMinus_default = Symbol('_is__UnaryMinus_default');
  query_builder._UnaryMinus$ = dart$.generic(DT => {
    class _UnaryMinus extends query_builder.Expression$(DT) {
      static ['_#new#tearOff'](DT, inner) {
        return new (query_builder._UnaryMinus$(DT)).new(inner);
      }
      get precedence() {
        return query_builder.Precedence.unary;
      }
      writeInto(context) {
        context.buffer.write("-");
        this.inner.writeInto(context);
      }
      get hashCode() {
        return this.inner[$hashCode] * 5;
      }
      _equals(other) {
        if (other == null) return false;
        return query_builder._UnaryMinus.is(other) && other.inner[$_equals](this.inner);
      }
    }
    (_UnaryMinus.new = function(inner) {
      this.inner = inner;
      _UnaryMinus.__proto__.new.call(this);
      ;
    }).prototype = _UnaryMinus.prototype;
    dart$.addTypeTests(_UnaryMinus);
    _UnaryMinus.prototype[_is__UnaryMinus_default] = true;
    dart$.addTypeCaches(_UnaryMinus);
    dart$.setMethodSignature(_UnaryMinus, () => ({
      __proto__: dart$.getMethods(_UnaryMinus.__proto__),
      writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext])
    }));
    dart$.setLibraryUri(_UnaryMinus, I[4]);
    dart$.setFieldSignature(_UnaryMinus, () => ({
      __proto__: dart$.getFields(_UnaryMinus.__proto__),
      inner: dart$.finalFieldType(query_builder.Expression$(DT))
    }));
    dart$.defineExtensionMethods(_UnaryMinus, ['_equals']);
    dart$.defineExtensionAccessors(_UnaryMinus, ['hashCode']);
    return _UnaryMinus;
  });
  query_builder._UnaryMinus = query_builder._UnaryMinus$();
  dart$.addTypeTests(query_builder._UnaryMinus, _is__UnaryMinus_default);
  const _is__DartCastExpression_default = Symbol('_is__DartCastExpression_default');
  query_builder._DartCastExpression$ = dart$.generic((D1, D2) => {
    class _DartCastExpression extends query_builder.Expression$(D2) {
      static ['_#new#tearOff'](D1, D2, inner) {
        return new (query_builder._DartCastExpression$(D1, D2)).new(inner);
      }
      get precedence() {
        return this.inner.precedence;
      }
      get isLiteral() {
        return this.inner.isLiteral;
      }
      writeInto(context) {
        return this.inner.writeInto(context);
      }
      get hashCode() {
        return this.inner[$hashCode] * 7;
      }
      _equals(other) {
        if (other == null) return false;
        return query_builder._DartCastExpression.is(other) && other.inner[$_equals](this.inner);
      }
    }
    (_DartCastExpression.new = function(inner) {
      this.inner = inner;
      _DartCastExpression.__proto__.new.call(this);
      ;
    }).prototype = _DartCastExpression.prototype;
    dart$.addTypeTests(_DartCastExpression);
    _DartCastExpression.prototype[_is__DartCastExpression_default] = true;
    dart$.addTypeCaches(_DartCastExpression);
    dart$.setMethodSignature(_DartCastExpression, () => ({
      __proto__: dart$.getMethods(_DartCastExpression.__proto__),
      writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext])
    }));
    dart$.setLibraryUri(_DartCastExpression, I[4]);
    dart$.setFieldSignature(_DartCastExpression, () => ({
      __proto__: dart$.getFields(_DartCastExpression.__proto__),
      inner: dart$.finalFieldType(query_builder.Expression$(D1))
    }));
    dart$.defineExtensionMethods(_DartCastExpression, ['_equals']);
    dart$.defineExtensionAccessors(_DartCastExpression, ['hashCode']);
    return _DartCastExpression;
  });
  query_builder._DartCastExpression = query_builder._DartCastExpression$();
  dart$.addTypeTests(query_builder._DartCastExpression, _is__DartCastExpression_default);
  var precedence$2 = dart$.privateName(query_builder, "_CastInSqlExpression.precedence");
  const _is__CastInSqlExpression_default = Symbol('_is__CastInSqlExpression_default');
  query_builder._CastInSqlExpression$ = dart$.generic((D1, D2) => {
    class _CastInSqlExpression extends query_builder.Expression$(D2) {
      get precedence() {
        return this[precedence$2];
      }
      set precedence(value) {
        super.precedence = value;
      }
      static ['_#new#tearOff'](D1, D2, inner) {
        return new (query_builder._CastInSqlExpression$(D1, D2)).new(inner);
      }
      writeInto(context) {
        let type = context.typeSystem.forDartType(D2);
        context.buffer.write("CAST(");
        this.inner.writeInto(context);
        context.buffer.write(" AS " + type.sqlName(context.dialect) + ")");
      }
    }
    (_CastInSqlExpression.new = function(inner) {
      this[precedence$2] = query_builder.Precedence.primary;
      this.inner = inner;
      _CastInSqlExpression.__proto__.new.call(this);
      ;
    }).prototype = _CastInSqlExpression.prototype;
    dart$.addTypeTests(_CastInSqlExpression);
    _CastInSqlExpression.prototype[_is__CastInSqlExpression_default] = true;
    dart$.addTypeCaches(_CastInSqlExpression);
    dart$.setMethodSignature(_CastInSqlExpression, () => ({
      __proto__: dart$.getMethods(_CastInSqlExpression.__proto__),
      writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext])
    }));
    dart$.setLibraryUri(_CastInSqlExpression, I[4]);
    dart$.setFieldSignature(_CastInSqlExpression, () => ({
      __proto__: dart$.getFields(_CastInSqlExpression.__proto__),
      inner: dart$.finalFieldType(query_builder.Expression$(D1)),
      precedence: dart$.finalFieldType(query_builder.Precedence)
    }));
    return _CastInSqlExpression;
  });
  query_builder._CastInSqlExpression = query_builder._CastInSqlExpression$();
  dart$.addTypeTests(query_builder._CastInSqlExpression, _is__CastInSqlExpression_default);
  var functionName$ = dart$.privateName(query_builder, "FunctionCallExpression.functionName");
  var $arguments$ = dart$.privateName(query_builder, "FunctionCallExpression.arguments");
  var precedence$3 = dart$.privateName(query_builder, "FunctionCallExpression.precedence");
  const _is_FunctionCallExpression_default = Symbol('_is_FunctionCallExpression_default');
  query_builder.FunctionCallExpression$ = dart$.generic(R => {
    class FunctionCallExpression extends query_builder.Expression$(R) {
      get functionName() {
        return this[functionName$];
      }
      set functionName(value) {
        super.functionName = value;
      }
      get arguments() {
        return this[$arguments$];
      }
      set arguments(value) {
        super.arguments = value;
      }
      get precedence() {
        return this[precedence$3];
      }
      set precedence(value) {
        super.precedence = value;
      }
      static ['_#new#tearOff'](R, functionName, $arguments) {
        return new (query_builder.FunctionCallExpression$(R)).new(functionName, $arguments);
      }
      writeInto(context) {
        let t8;
        t8 = context.buffer;
        (() => {
          t8.write(this.functionName);
          t8.write("(");
          return t8;
        })();
        query_builder._writeCommaSeparated(context, this.arguments);
        context.buffer.write(")");
      }
      get hashCode() {
        return core.Object.hash(this.functionName, query_builder._equality);
      }
      _equals(other) {
        if (other == null) return false;
        return query_builder.FunctionCallExpression.is(other) && other.functionName === this.functionName && query_builder._equality.equals(other.arguments, this.arguments);
      }
    }
    (FunctionCallExpression.new = function(functionName, $arguments) {
      this[precedence$3] = query_builder.Precedence.primary;
      this[functionName$] = functionName;
      this[$arguments$] = $arguments;
      FunctionCallExpression.__proto__.new.call(this);
      ;
    }).prototype = FunctionCallExpression.prototype;
    dart$.addTypeTests(FunctionCallExpression);
    FunctionCallExpression.prototype[_is_FunctionCallExpression_default] = true;
    dart$.addTypeCaches(FunctionCallExpression);
    dart$.setMethodSignature(FunctionCallExpression, () => ({
      __proto__: dart$.getMethods(FunctionCallExpression.__proto__),
      writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext])
    }));
    dart$.setLibraryUri(FunctionCallExpression, I[4]);
    dart$.setFieldSignature(FunctionCallExpression, () => ({
      __proto__: dart$.getFields(FunctionCallExpression.__proto__),
      functionName: dart$.finalFieldType(core.String),
      arguments: dart$.finalFieldType(core.List$(query_builder.Expression)),
      precedence: dart$.finalFieldType(query_builder.Precedence)
    }));
    dart$.defineExtensionMethods(FunctionCallExpression, ['_equals']);
    dart$.defineExtensionAccessors(FunctionCallExpression, ['hashCode']);
    return FunctionCallExpression;
  });
  query_builder.FunctionCallExpression = query_builder.FunctionCallExpression$();
  dart$.addTypeTests(query_builder.FunctionCallExpression, _is_FunctionCallExpression_default);
  const _is__SubqueryExpression_default = Symbol('_is__SubqueryExpression_default');
  query_builder._SubqueryExpression$ = dart$.generic(R => {
    class _SubqueryExpression extends query_builder.Expression$(R) {
      static ['_#new#tearOff'](R, statement) {
        return new (query_builder._SubqueryExpression$(R)).new(statement);
      }
      writeInto(context) {
        context.buffer.write("(");
        this.statement.writeInto(context);
        context.buffer.write(")");
      }
      get hashCode() {
        return this.statement[$hashCode];
      }
      _equals(other) {
        if (other == null) return false;
        return query_builder._SubqueryExpression.is(other) && other.statement[$_equals](this.statement);
      }
    }
    (_SubqueryExpression.new = function(statement) {
      this.statement = statement;
      _SubqueryExpression.__proto__.new.call(this);
      ;
    }).prototype = _SubqueryExpression.prototype;
    dart$.addTypeTests(_SubqueryExpression);
    _SubqueryExpression.prototype[_is__SubqueryExpression_default] = true;
    dart$.addTypeCaches(_SubqueryExpression);
    dart$.setMethodSignature(_SubqueryExpression, () => ({
      __proto__: dart$.getMethods(_SubqueryExpression.__proto__),
      writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext]),
      _equals: dart$.fnType(core.bool, [dart$.nullable(core.Object)]),
      [$_equals]: dart$.fnType(core.bool, [dart$.nullable(core.Object)])
    }));
    dart$.setLibraryUri(_SubqueryExpression, I[4]);
    dart$.setFieldSignature(_SubqueryExpression, () => ({
      __proto__: dart$.getFields(_SubqueryExpression.__proto__),
      statement: dart$.finalFieldType(query_builder.BaseSelectStatement)
    }));
    dart$.defineExtensionMethods(_SubqueryExpression, ['_equals']);
    dart$.defineExtensionAccessors(_SubqueryExpression, ['hashCode']);
    return _SubqueryExpression;
  });
  query_builder._SubqueryExpression = query_builder._SubqueryExpression$();
  dart$.addTypeTests(query_builder._SubqueryExpression, _is__SubqueryExpression_default);
  var _expression$ = dart$.privateName(query_builder, "_expression");
  var _writeValues = dart$.privateName(query_builder, "_writeValues");
  query_builder._BaseInExpression = class _BaseInExpression extends query_builder.Expression$(dart$.nullable(core.bool)) {
    get precedence() {
      return query_builder.Precedence.comparisonEq;
    }
    writeInto(context) {
      this.writeInner(context, this[_expression$]);
      if (this[_not$]) {
        context.buffer.write(" NOT");
      }
      context.buffer.write(" IN (");
      this[_writeValues](context);
      context.buffer.write(")");
    }
  };
  (query_builder._BaseInExpression.new = function(_expression, _not) {
    this[_expression$] = _expression;
    this[_not$] = _not;
    query_builder._BaseInExpression.__proto__.new.call(this);
    ;
  }).prototype = query_builder._BaseInExpression.prototype;
  dart$.addTypeTests(query_builder._BaseInExpression);
  dart$.addTypeCaches(query_builder._BaseInExpression);
  dart$.setMethodSignature(query_builder._BaseInExpression, () => ({
    __proto__: dart$.getMethods(query_builder._BaseInExpression.__proto__),
    writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext])
  }));
  dart$.setLibraryUri(query_builder._BaseInExpression, I[4]);
  dart$.setFieldSignature(query_builder._BaseInExpression, () => ({
    __proto__: dart$.getFields(query_builder._BaseInExpression.__proto__),
    [_expression$]: dart$.finalFieldType(query_builder.Expression),
    [_not$]: dart$.finalFieldType(core.bool)
  }));
  var _values$ = dart$.privateName(query_builder, "_values");
  const _is__InExpression_default = Symbol('_is__InExpression_default');
  query_builder._InExpression$ = dart$.generic(T => {
    var __t$VariableOfT = () => (__t$VariableOfT = dart$.constFn(query_builder.Variable$(T)))();
    class _InExpression extends query_builder._BaseInExpression {
      static ['_#new#tearOff'](T, expression, _values, not) {
        return new (query_builder._InExpression$(T)).new(expression, _values, not);
      }
      [_writeValues](context) {
        let first = true;
        for (let value of this[_values$]) {
          let variable = new (__t$VariableOfT()).new(value);
          if (first) {
            first = false;
          } else {
            context.buffer.write(", ");
          }
          variable.writeInto(context);
        }
      }
      get hashCode() {
        return core.Object.hash(this[_expression$], query_builder._equality, this[_not$]);
      }
      _equals(other) {
        if (other == null) return false;
        return query_builder._InExpression.is(other) && other[_expression$][$_equals](this[_expression$]) && query_builder._equality.equals(other[_values$], this[_values$]) && other[_not$] === this[_not$];
      }
    }
    (_InExpression.new = function(expression, _values, not) {
      this[_values$] = _values;
      _InExpression.__proto__.new.call(this, expression, not);
      ;
    }).prototype = _InExpression.prototype;
    dart$.addTypeTests(_InExpression);
    _InExpression.prototype[_is__InExpression_default] = true;
    dart$.addTypeCaches(_InExpression);
    dart$.setMethodSignature(_InExpression, () => ({
      __proto__: dart$.getMethods(_InExpression.__proto__),
      [_writeValues]: dart$.fnType(dart$.void, [query_builder.GenerationContext])
    }));
    dart$.setLibraryUri(_InExpression, I[4]);
    dart$.setFieldSignature(_InExpression, () => ({
      __proto__: dart$.getFields(_InExpression.__proto__),
      [_values$]: dart$.finalFieldType(core.List$(T))
    }));
    dart$.defineExtensionMethods(_InExpression, ['_equals']);
    dart$.defineExtensionAccessors(_InExpression, ['hashCode']);
    return _InExpression;
  });
  query_builder._InExpression = query_builder._InExpression$();
  dart$.addTypeTests(query_builder._InExpression, _is__InExpression_default);
  query_builder._InSelectExpression = class _InSelectExpression extends query_builder._BaseInExpression {
    static ['_#new#tearOff'](_select, expression, not) {
      return new query_builder._InSelectExpression.new(_select, expression, not);
    }
    [_writeValues](context) {
      this[_select$].writeInto(context);
    }
    get hashCode() {
      return core.Object.hash(this[_expression$], this[_select$], this[_not$]);
    }
    _equals(other) {
      if (other == null) return false;
      return query_builder._InSelectExpression.is(other) && other[_expression$][$_equals](this[_expression$]) && other[_select$][$_equals](this[_select$]) && other[_not$] === this[_not$];
    }
  };
  (query_builder._InSelectExpression.new = function(_select, expression, not) {
    this[_select$] = _select;
    query_builder._InSelectExpression.__proto__.new.call(this, expression, not);
    ;
  }).prototype = query_builder._InSelectExpression.prototype;
  dart$.addTypeTests(query_builder._InSelectExpression);
  dart$.addTypeCaches(query_builder._InSelectExpression);
  dart$.setMethodSignature(query_builder._InSelectExpression, () => ({
    __proto__: dart$.getMethods(query_builder._InSelectExpression.__proto__),
    [_writeValues]: dart$.fnType(dart$.void, [query_builder.GenerationContext])
  }));
  dart$.setLibraryUri(query_builder._InSelectExpression, I[4]);
  dart$.setFieldSignature(query_builder._InSelectExpression, () => ({
    __proto__: dart$.getFields(query_builder._InSelectExpression.__proto__),
    [_select$]: dart$.finalFieldType(query_builder.BaseSelectStatement)
  }));
  dart$.defineExtensionMethods(query_builder._InSelectExpression, ['_equals']);
  dart$.defineExtensionAccessors(query_builder._InSelectExpression, ['hashCode']);
  var precedence$4 = dart$.privateName(query_builder, "_NullCheck.precedence");
  var _inner$ = dart$.privateName(query_builder, "_inner");
  var _isNull$ = dart$.privateName(query_builder, "_isNull");
  query_builder._NullCheck = class _NullCheck extends query_builder.Expression$(core.bool) {
    get precedence() {
      return this[precedence$4];
    }
    set precedence(value) {
      super.precedence = value;
    }
    static ['_#new#tearOff'](_inner, _isNull) {
      return new query_builder._NullCheck.new(_inner, _isNull);
    }
    writeInto(context) {
      this.writeInner(context, this[_inner$]);
      context.buffer.write(" IS ");
      if (!this[_isNull$]) {
        context.buffer.write("NOT ");
      }
      context.buffer.write("NULL");
    }
    get hashCode() {
      return core.Object.hash(this[_inner$], this[_isNull$]);
    }
    _equals(other) {
      if (other == null) return false;
      return query_builder._NullCheck.is(other) && other[_inner$][$_equals](this[_inner$]) && other[_isNull$] === this[_isNull$];
    }
  };
  (query_builder._NullCheck.new = function(_inner, _isNull) {
    this[precedence$4] = query_builder.Precedence.comparisonEq;
    this[_inner$] = _inner;
    this[_isNull$] = _isNull;
    query_builder._NullCheck.__proto__.new.call(this);
    ;
  }).prototype = query_builder._NullCheck.prototype;
  dart$.addTypeTests(query_builder._NullCheck);
  dart$.addTypeCaches(query_builder._NullCheck);
  dart$.setMethodSignature(query_builder._NullCheck, () => ({
    __proto__: dart$.getMethods(query_builder._NullCheck.__proto__),
    writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext])
  }));
  dart$.setLibraryUri(query_builder._NullCheck, I[4]);
  dart$.setFieldSignature(query_builder._NullCheck, () => ({
    __proto__: dart$.getFields(query_builder._NullCheck.__proto__),
    [_inner$]: dart$.finalFieldType(query_builder.Expression),
    [_isNull$]: dart$.finalFieldType(core.bool),
    precedence: dart$.finalFieldType(query_builder.Precedence)
  }));
  dart$.defineExtensionMethods(query_builder._NullCheck, ['_equals']);
  dart$.defineExtensionAccessors(query_builder._NullCheck, ['hashCode']);
  var precedence$5 = dart$.privateName(query_builder, "_LikeOperator.precedence");
  query_builder._LikeOperator = class _LikeOperator extends query_builder.Expression$(dart$.nullable(core.bool)) {
    get precedence() {
      return this[precedence$5];
    }
    set precedence(value) {
      super.precedence = value;
    }
    static ['_#new#tearOff'](target, regex, opts) {
      let operator = opts && 'operator' in opts ? opts.operator : "LIKE";
      return new query_builder._LikeOperator.new(target, regex, {operator: operator});
    }
    writeInto(context) {
      this.writeInner(context, this.target);
      context.writeWhitespace();
      context.buffer.write(this.operator);
      context.writeWhitespace();
      this.writeInner(context, this.regex);
    }
    get hashCode() {
      return core.Object.hash(this.target, this.regex, this.operator);
    }
    _equals(other) {
      if (other == null) return false;
      return query_builder._LikeOperator.is(other) && other.target[$_equals](this.target) && other.regex[$_equals](this.regex) && other.operator === this.operator;
    }
  };
  (query_builder._LikeOperator.new = function(target, regex, opts) {
    let operator = opts && 'operator' in opts ? opts.operator : "LIKE";
    this[precedence$5] = query_builder.Precedence.comparisonEq;
    this.target = target;
    this.regex = regex;
    this.operator = operator;
    query_builder._LikeOperator.__proto__.new.call(this);
    ;
  }).prototype = query_builder._LikeOperator.prototype;
  dart$.addTypeTests(query_builder._LikeOperator);
  dart$.addTypeCaches(query_builder._LikeOperator);
  dart$.setMethodSignature(query_builder._LikeOperator, () => ({
    __proto__: dart$.getMethods(query_builder._LikeOperator.__proto__),
    writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext])
  }));
  dart$.setLibraryUri(query_builder._LikeOperator, I[4]);
  dart$.setFieldSignature(query_builder._LikeOperator, () => ({
    __proto__: dart$.getFields(query_builder._LikeOperator.__proto__),
    target: dart$.finalFieldType(query_builder.Expression$(dart$.nullable(core.String))),
    regex: dart$.finalFieldType(query_builder.Expression$(dart$.nullable(core.String))),
    operator: dart$.finalFieldType(core.String),
    precedence: dart$.finalFieldType(query_builder.Precedence)
  }));
  dart$.defineExtensionMethods(query_builder._LikeOperator, ['_equals']);
  dart$.defineExtensionAccessors(query_builder._LikeOperator, ['hashCode']);
  query_builder.Collate = class Collate extends core._Enum {
    toString() {
      return "Collate." + this[_name];
    }
  };
  (query_builder.Collate.new = function(index, name) {
    query_builder.Collate.__proto__.new.call(this, index, name);
    ;
  }).prototype = query_builder.Collate.prototype;
  dart$.addTypeTests(query_builder.Collate);
  dart$.addTypeCaches(query_builder.Collate);
  dart$.setLibraryUri(query_builder.Collate, I[4]);
  dart$.setStaticFieldSignature(query_builder.Collate, () => ['values', 'binary', 'noCase', 'rTrim']);
  dart$.defineExtensionMethods(query_builder.Collate, ['toString']);
  dart$.defineLazy(query_builder.Collate, {
    /*query_builder.Collate.values*/get values() {
      return C[41] || CT.C41;
    },
    /*query_builder.Collate.binary*/get binary() {
      return C[42] || CT.C42;
    },
    /*query_builder.Collate.noCase*/get noCase() {
      return C[43] || CT.C43;
    },
    /*query_builder.Collate.rTrim*/get rTrim() {
      return C[44] || CT.C44;
    }
  }, false);
  var precedence$6 = dart$.privateName(query_builder, "_CollateOperator.precedence");
  query_builder._CollateOperator = class _CollateOperator extends query_builder.Expression$(core.String) {
    get precedence() {
      return this[precedence$6];
    }
    set precedence(value) {
      super.precedence = value;
    }
    static ['_#new#tearOff'](inner, collate) {
      return new query_builder._CollateOperator.new(inner, collate);
    }
    writeInto(context) {
      let t10;
      this.writeInner(context, this.inner);
      t10 = context.buffer;
      (() => {
        t10.write(" COLLATE ");
        t10.write(query_builder._CollateOperator._operatorNames[$_get](this.collate));
        return t10;
      })();
    }
    get hashCode() {
      return core.Object.hash(this.inner, this.collate);
    }
    _equals(other) {
      if (other == null) return false;
      return query_builder._CollateOperator.is(other) && other.inner[$_equals](this.inner) && other.collate === this.collate;
    }
  };
  (query_builder._CollateOperator.new = function(inner, collate) {
    this[precedence$6] = query_builder.Precedence.postfix;
    this.inner = inner;
    this.collate = collate;
    query_builder._CollateOperator.__proto__.new.call(this);
    ;
  }).prototype = query_builder._CollateOperator.prototype;
  dart$.addTypeTests(query_builder._CollateOperator);
  dart$.addTypeCaches(query_builder._CollateOperator);
  dart$.setMethodSignature(query_builder._CollateOperator, () => ({
    __proto__: dart$.getMethods(query_builder._CollateOperator.__proto__),
    writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext])
  }));
  dart$.setLibraryUri(query_builder._CollateOperator, I[4]);
  dart$.setFieldSignature(query_builder._CollateOperator, () => ({
    __proto__: dart$.getFields(query_builder._CollateOperator.__proto__),
    inner: dart$.finalFieldType(query_builder.Expression),
    collate: dart$.finalFieldType(query_builder.Collate),
    precedence: dart$.finalFieldType(query_builder.Precedence)
  }));
  dart$.setStaticFieldSignature(query_builder._CollateOperator, () => ['_operatorNames']);
  dart$.defineExtensionMethods(query_builder._CollateOperator, ['_equals']);
  dart$.defineExtensionAccessors(query_builder._CollateOperator, ['hashCode']);
  dart$.defineLazy(query_builder._CollateOperator, {
    /*query_builder._CollateOperator._operatorNames*/get _operatorNames() {
      return C[45] || CT.C45;
    }
  }, false);
  var value$ = dart$.privateName(query_builder, "Variable.value");
  const _is_Variable_default = Symbol('_is_Variable_default');
  query_builder.Variable$ = dart$.generic(T => {
    class Variable extends query_builder.Expression$(T) {
      get value() {
        return this[value$];
      }
      set value(value) {
        super.value = value;
      }
      get precedence() {
        return query_builder.Precedence.primary;
      }
      get hashCode() {
        return dart$.hashCode(this.value);
      }
      static ['_#new#tearOff'](T, value) {
        return new (query_builder.Variable$(T)).new(value);
      }
      static withBool(value) {
        return new (T$.VariableOfbool()).new(value);
      }
      static withInt(value) {
        return new (T$.VariableOfint()).new(value);
      }
      static withString(value) {
        return new (T$.VariableOfString()).new(value);
      }
      static withDateTime(value) {
        return new (T$.VariableOfDateTime()).new(value);
      }
      static withBlob(value) {
        return new (T$.VariableOfUint8List()).new(value);
      }
      static withReal(value) {
        return new (T$.VariableOfdouble()).new(value);
      }
      mapToSimpleValue(context) {
        return context.typeSystem.mapToVariable(this.value);
      }
      writeInto(context) {
        let t10;
        let explicitStart = context.explicitVariableIndex;
        let mark = "?";
        if (context.dialect === query_builder.SqlDialect.postgres) {
          explicitStart = 1;
          mark = "@";
        }
        if (explicitStart != null) {
          t10 = context.buffer;
          (() => {
            t10.write(mark);
            t10.write(dart$.notNull(explicitStart) + context.amountOfVariables);
            return t10;
          })();
          context.introduceVariable(this, this.mapToSimpleValue(context));
        } else if (this.value != null) {
          context.buffer.write(mark);
          context.introduceVariable(this, this.mapToSimpleValue(context));
        } else {
          context.buffer.write("NULL");
        }
      }
      toString() {
        return "Variable(" + dart$.str(this.value) + ")";
      }
      _equals(other) {
        if (other == null) return false;
        return query_builder.Variable.is(other) && dart$.equals(other.value, this.value);
      }
    }
    (Variable.new = function(value) {
      this[value$] = value;
      Variable.__proto__.new.call(this);
      ;
    }).prototype = Variable.prototype;
    dart$.addTypeTests(Variable);
    Variable.prototype[_is_Variable_default] = true;
    dart$.addTypeCaches(Variable);
    dart$.setMethodSignature(Variable, () => ({
      __proto__: dart$.getMethods(Variable.__proto__),
      mapToSimpleValue: dart$.fnType(dart$.dynamic, [query_builder.GenerationContext]),
      writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext])
    }));
    dart$.setStaticMethodSignature(Variable, () => ['withBool', 'withInt', 'withString', 'withDateTime', 'withBlob', 'withReal']);
    dart$.setLibraryUri(Variable, I[4]);
    dart$.setFieldSignature(Variable, () => ({
      __proto__: dart$.getFields(Variable.__proto__),
      value: dart$.finalFieldType(T)
    }));
    dart$.defineExtensionMethods(Variable, ['toString', '_equals']);
    dart$.defineExtensionAccessors(Variable, ['hashCode']);
    return Variable;
  });
  query_builder.Variable = query_builder.Variable$();
  dart$.addTypeTests(query_builder.Variable, _is_Variable_default);
  var value$0 = dart$.privateName(query_builder, "Constant.value");
  const _is_Constant_default = Symbol('_is_Constant_default');
  query_builder.Constant$ = dart$.generic(T => {
    var __t$ConstantOfT = () => (__t$ConstantOfT = dart$.constFn(query_builder.Constant$(T)))();
    class Constant extends query_builder.Expression$(T) {
      get value() {
        return this[value$0];
      }
      set value(value) {
        super.value = value;
      }
      static ['_#new#tearOff'](T, value) {
        return new (query_builder.Constant$(T)).new(value);
      }
      get precedence() {
        return query_builder.Precedence.primary;
      }
      get isLiteral() {
        return true;
      }
      writeInto(context) {
        context.buffer.write(sql_types.SqlTypeSystem.mapToSqlConstant(this.value));
      }
      get hashCode() {
        return dart$.hashCode(this.value);
      }
      _equals(other) {
        if (other == null) return false;
        return other[$runtimeType]._equals(this[$runtimeType]) && dart$.equals(__t$ConstantOfT().as(other).value, this.value);
      }
      toString() {
        return "Constant(" + dart$.str(this.value) + ")";
      }
    }
    (Constant.new = function(value) {
      this[value$0] = value;
      Constant.__proto__.new.call(this);
      ;
    }).prototype = Constant.prototype;
    dart$.addTypeTests(Constant);
    Constant.prototype[_is_Constant_default] = true;
    dart$.addTypeCaches(Constant);
    dart$.setMethodSignature(Constant, () => ({
      __proto__: dart$.getMethods(Constant.__proto__),
      writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext])
    }));
    dart$.setLibraryUri(Constant, I[4]);
    dart$.setFieldSignature(Constant, () => ({
      __proto__: dart$.getFields(Constant.__proto__),
      value: dart$.finalFieldType(T)
    }));
    dart$.defineExtensionMethods(Constant, ['_equals', 'toString']);
    dart$.defineExtensionAccessors(Constant, ['hashCode']);
    return Constant;
  });
  query_builder.Constant = query_builder.Constant$();
  dart$.addTypeTests(query_builder.Constant, _is_Constant_default);
  var $36name$ = dart$.privateName(query_builder, "GeneratedColumn.$name");
  var tableName$ = dart$.privateName(query_builder, "GeneratedColumn.tableName");
  var $36nullable$ = dart$.privateName(query_builder, "GeneratedColumn.$nullable");
  var $36customConstraints$ = dart$.privateName(query_builder, "GeneratedColumn.$customConstraints");
  var defaultValue$ = dart$.privateName(query_builder, "GeneratedColumn.defaultValue");
  var clientDefault$ = dart$.privateName(query_builder, "GeneratedColumn.clientDefault");
  var additionalChecks$ = dart$.privateName(query_builder, "GeneratedColumn.additionalChecks");
  var type$0 = dart$.privateName(query_builder, "GeneratedColumn.type");
  var generatedAs$ = dart$.privateName(query_builder, "GeneratedColumn.generatedAs");
  var requiredDuringInsert$ = dart$.privateName(query_builder, "GeneratedColumn.requiredDuringInsert");
  var _defaultConstraints = dart$.privateName(query_builder, "_defaultConstraints");
  var VerificationResult_message = dart$.privateName(data_verification, "VerificationResult.message");
  var VerificationResult_success = dart$.privateName(data_verification, "VerificationResult.success");
  var _evaluateClientDefault = dart$.privateName(query_builder, "_evaluateClientDefault");
  var precedence$7 = dart$.privateName(dsl, "Column.precedence");
  const _is_Column_default = Symbol('_is_Column_default');
  dsl.Column$ = dart$.generic(T => {
    class Column extends query_builder.Expression$(T) {
      get precedence() {
        return this[precedence$7];
      }
      set precedence(value) {
        super.precedence = value;
      }
      get escapedName() {
        return sqlite_keywords.escapeIfNeeded(this.name);
      }
    }
    (Column.new = function() {
      this[precedence$7] = query_builder.Precedence.primary;
      Column.__proto__.new.call(this);
      ;
    }).prototype = Column.prototype;
    dart$.addTypeTests(Column);
    Column.prototype[_is_Column_default] = true;
    dart$.addTypeCaches(Column);
    dart$.setGetterSignature(Column, () => ({
      __proto__: dart$.getGetters(Column.__proto__),
      escapedName: core.String
    }));
    dart$.setLibraryUri(Column, I[6]);
    dart$.setFieldSignature(Column, () => ({
      __proto__: dart$.getFields(Column.__proto__),
      precedence: dart$.finalFieldType(query_builder.Precedence)
    }));
    return Column;
  });
  dsl.Column = dsl.Column$();
  dart$.addTypeTests(dsl.Column, _is_Column_default);
  const _is_GeneratedColumn_default = Symbol('_is_GeneratedColumn_default');
  query_builder.GeneratedColumn$ = dart$.generic(T => {
    var __t$VariableOfT = () => (__t$VariableOfT = dart$.constFn(query_builder.Variable$(T)))();
    class GeneratedColumn extends dsl.Column$(T) {
      get $name() {
        return this[$36name$];
      }
      set $name(value) {
        super.$name = value;
      }
      get tableName() {
        return this[tableName$];
      }
      set tableName(value) {
        super.tableName = value;
      }
      get $nullable() {
        return this[$36nullable$];
      }
      set $nullable(value) {
        super.$nullable = value;
      }
      get $customConstraints() {
        return this[$36customConstraints$];
      }
      set $customConstraints(value) {
        super.$customConstraints = value;
      }
      get defaultValue() {
        return this[defaultValue$];
      }
      set defaultValue(value) {
        super.defaultValue = value;
      }
      get clientDefault() {
        return this[clientDefault$];
      }
      set clientDefault(value) {
        super.clientDefault = value;
      }
      get additionalChecks() {
        return this[additionalChecks$];
      }
      set additionalChecks(value) {
        super.additionalChecks = value;
      }
      get type() {
        return this[type$0];
      }
      set type(value) {
        super.type = value;
      }
      get generatedAs() {
        return this[generatedAs$];
      }
      set generatedAs(value) {
        super.generatedAs = value;
      }
      get requiredDuringInsert() {
        return this[requiredDuringInsert$];
      }
      set requiredDuringInsert(value) {
        super.requiredDuringInsert = value;
      }
      get typeName() {
        return this.type.sqlName(query_builder.SqlDialect.sqlite);
      }
      get hasAutoIncrement() {
        let t10;
        return (t10 = this[_defaultConstraints], t10 == null ? null : t10[$contains]("AUTOINCREMENT")) === true;
      }
      get name() {
        return this.$name;
      }
      static ['_#new#tearOff'](T, $36name, tableName, $36nullable, opts) {
        let clientDefault = opts && 'clientDefault' in opts ? opts.clientDefault : null;
        let type = opts && 'type' in opts ? opts.type : null;
        let defaultConstraints = opts && 'defaultConstraints' in opts ? opts.defaultConstraints : null;
        let $36customConstraints = opts && '$customConstraints' in opts ? opts.$customConstraints : null;
        let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
        let additionalChecks = opts && 'additionalChecks' in opts ? opts.additionalChecks : null;
        let requiredDuringInsert = opts && 'requiredDuringInsert' in opts ? opts.requiredDuringInsert : false;
        let generatedAs = opts && 'generatedAs' in opts ? opts.generatedAs : null;
        return new (query_builder.GeneratedColumn$(T)).new($36name, tableName, $36nullable, {clientDefault: clientDefault, type: type, defaultConstraints: defaultConstraints, $customConstraints: $36customConstraints, defaultValue: defaultValue, additionalChecks: additionalChecks, requiredDuringInsert: requiredDuringInsert, generatedAs: generatedAs});
      }
      withConverter(D, converter) {
        sql_types.TypeConverter$(D, T).as(converter);
        return new (query_builder.GeneratedColumnWithTypeConverter$(D, T)).__(converter, this.$name, this.tableName, this.$nullable, this.clientDefault, this.type, this[_defaultConstraints], this.$customConstraints, this.defaultValue, this.additionalChecks, this.requiredDuringInsert, this.generatedAs);
      }
      writeColumnDefinition(into) {
        let t10, t10$, t10$0, t10$1;
        let isSerial = into.dialect === query_builder.SqlDialect.postgres && this.hasAutoIncrement;
        if (isSerial) {
          into.buffer.write(this.escapedName + " bigserial PRIMARY KEY NOT NULL");
        } else {
          into.buffer.write(this.escapedName + " " + this.type.sqlName(into.dialect));
        }
        if (this.$customConstraints == null) {
          if (!isSerial) {
            into.buffer.write(this.$nullable ? " NULL" : " NOT NULL");
          }
          let defaultValue = this.defaultValue;
          if (defaultValue != null) {
            into.buffer.write(" DEFAULT ");
            let writeBrackets = !defaultValue.isLiteral;
            if (writeBrackets) into.buffer.write("(");
            defaultValue.writeInto(into);
            if (writeBrackets) into.buffer.write(")");
          }
          let generated = this.generatedAs;
          if (generated != null) {
            into.buffer.write(" GENERATED ALWAYS AS (");
            generated.generatedAs.writeInto(into);
            t10 = into.buffer;
            (() => {
              t10.write(") ");
              t10.write(generated.stored ? "STORED" : "VIRTUAL");
              return t10;
            })();
          }
          if (!isSerial && this[_defaultConstraints] != null) {
            t10$ = into.buffer;
            (() => {
              t10$.write(" ");
              t10$.write(this[_defaultConstraints]);
              return t10$;
            })();
          }
        } else if ((t10$0 = this.$customConstraints, t10$0 == null ? null : t10$0[$isNotEmpty]) === true) {
          t10$1 = into.buffer;
          (() => {
            t10$1.write(" ");
            t10$1.write(this.$customConstraints);
            return t10$1;
          })();
        }
      }
      writeInto(context, opts) {
        let t10;
        let ignoreEscape = opts && 'ignoreEscape' in opts ? opts.ignoreEscape : false;
        if (this.generatedAs != null && context.generatingForView === this.tableName) {
          dart$.nullCheck(this.generatedAs).generatedAs.writeInto(context);
        } else {
          if (context.hasMultipleTables) {
            t10 = context.buffer;
            (() => {
              t10.write(this.tableName);
              t10.write(".");
              return t10;
            })();
          }
          context.buffer.write(ignoreEscape ? this.$name : this.escapedName);
        }
      }
      isAcceptableValue(value, meta) {
        let t10, t10$;
        T.as(value);
        let nullOk = this.$nullable;
        if (!nullOk && value == null) {
          return query_builder._invalidNull;
        } else {
          t10$ = (t10 = this.additionalChecks, t10 == null ? null : t10(value, meta));
          return t10$ == null ? C[46] || CT.C46 : t10$;
        }
      }
      isAcceptableOrUnknown(value, meta) {
        if (query_builder.Variable.is(value)) {
          return this.isAcceptableValue(T.as(value.value), meta);
        } else {
          return C[46] || CT.C46;
        }
      }
      get hashCode() {
        return core.Object.hash(this.tableName, this.$name);
      }
      _equals(other) {
        if (other == null) return false;
        if (!other[$runtimeType]._equals(this[$runtimeType])) return false;
        let typedOther = query_builder.GeneratedColumn.as(other);
        return typedOther.tableName === this.tableName && typedOther.$name === this.$name;
      }
      [_evaluateClientDefault]() {
        return new (__t$VariableOfT()).new(dart$.nullCheck(this.clientDefault)());
      }
      static checkTextLength(opts) {
        let minTextLength = opts && 'minTextLength' in opts ? opts.minTextLength : null;
        let maxTextLength = opts && 'maxTextLength' in opts ? opts.maxTextLength : null;
        return dart$.fn((value, meta) => {
          if (value == null) return C[46] || CT.C46;
          let length = value.length;
          if (minTextLength != null && dart$.notNull(minTextLength) > length) {
            return new data_verification.VerificationResult.failure("Must at least be " + dart$.str(minTextLength) + " characters long.");
          }
          if (maxTextLength != null && dart$.notNull(maxTextLength) < length) {
            return new data_verification.VerificationResult.failure("Must at most be " + dart$.str(maxTextLength) + " characters long.");
          }
          return C[46] || CT.C46;
        }, T$.StringNAndVerificationMetaToVerificationResult());
      }
    }
    (GeneratedColumn.new = function($36name, tableName, $36nullable, opts) {
      let clientDefault = opts && 'clientDefault' in opts ? opts.clientDefault : null;
      let type = opts && 'type' in opts ? opts.type : null;
      let defaultConstraints = opts && 'defaultConstraints' in opts ? opts.defaultConstraints : null;
      let $36customConstraints = opts && '$customConstraints' in opts ? opts.$customConstraints : null;
      let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
      let additionalChecks = opts && 'additionalChecks' in opts ? opts.additionalChecks : null;
      let requiredDuringInsert = opts && 'requiredDuringInsert' in opts ? opts.requiredDuringInsert : false;
      let generatedAs = opts && 'generatedAs' in opts ? opts.generatedAs : null;
      this[$36name$] = $36name;
      this[tableName$] = tableName;
      this[$36nullable$] = $36nullable;
      this[clientDefault$] = clientDefault;
      this[type$0] = type;
      this[$36customConstraints$] = $36customConstraints;
      this[defaultValue$] = defaultValue;
      this[additionalChecks$] = additionalChecks;
      this[requiredDuringInsert$] = requiredDuringInsert;
      this[generatedAs$] = generatedAs;
      this[_defaultConstraints] = defaultConstraints;
      GeneratedColumn.__proto__.new.call(this);
      ;
    }).prototype = GeneratedColumn.prototype;
    dart$.addTypeTests(GeneratedColumn);
    GeneratedColumn.prototype[_is_GeneratedColumn_default] = true;
    dart$.addTypeCaches(GeneratedColumn);
    dart$.setMethodSignature(GeneratedColumn, () => ({
      __proto__: dart$.getMethods(GeneratedColumn.__proto__),
      withConverter: dart$.gFnType(D => [query_builder.GeneratedColumnWithTypeConverter$(D, T), [dart$.nullable(core.Object)]], D => [dart$.nullable(core.Object)]),
      writeColumnDefinition: dart$.fnType(dart$.void, [query_builder.GenerationContext]),
      writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext], {ignoreEscape: core.bool}, {}),
      isAcceptableValue: dart$.fnType(data_verification.VerificationResult, [dart$.nullable(core.Object), data_verification.VerificationMeta]),
      isAcceptableOrUnknown: dart$.fnType(data_verification.VerificationResult, [query_builder.Expression, data_verification.VerificationMeta]),
      [_evaluateClientDefault]: dart$.fnType(query_builder.Variable, [])
    }));
    dart$.setStaticMethodSignature(GeneratedColumn, () => ['checkTextLength']);
    dart$.setGetterSignature(GeneratedColumn, () => ({
      __proto__: dart$.getGetters(GeneratedColumn.__proto__),
      typeName: core.String,
      hasAutoIncrement: core.bool,
      name: core.String
    }));
    dart$.setLibraryUri(GeneratedColumn, I[4]);
    dart$.setFieldSignature(GeneratedColumn, () => ({
      __proto__: dart$.getFields(GeneratedColumn.__proto__),
      $name: dart$.finalFieldType(core.String),
      tableName: dart$.finalFieldType(core.String),
      $nullable: dart$.finalFieldType(core.bool),
      [_defaultConstraints]: dart$.finalFieldType(dart$.nullable(core.String)),
      $customConstraints: dart$.finalFieldType(dart$.nullable(core.String)),
      defaultValue: dart$.finalFieldType(dart$.nullable(query_builder.Expression$(T))),
      clientDefault: dart$.finalFieldType(dart$.nullable(dart$.fnType(T, []))),
      additionalChecks: dart$.finalFieldType(dart$.nullable(dart$.fnType(data_verification.VerificationResult, [T, data_verification.VerificationMeta]))),
      type: dart$.finalFieldType(sql_types.SqlType),
      generatedAs: dart$.finalFieldType(dart$.nullable(query_builder.GeneratedAs)),
      requiredDuringInsert: dart$.finalFieldType(core.bool)
    }));
    dart$.defineExtensionMethods(GeneratedColumn, ['_equals']);
    dart$.defineExtensionAccessors(GeneratedColumn, ['hashCode']);
    return GeneratedColumn;
  });
  query_builder.GeneratedColumn = query_builder.GeneratedColumn$();
  dart$.addTypeTests(query_builder.GeneratedColumn, _is_GeneratedColumn_default);
  var converter$ = dart$.privateName(query_builder, "GeneratedColumnWithTypeConverter.converter");
  const _is_GeneratedColumnWithTypeConverter_default = Symbol('_is_GeneratedColumnWithTypeConverter_default');
  query_builder.GeneratedColumnWithTypeConverter$ = dart$.generic((D, S) => {
    var __t$DN = () => (__t$DN = dart$.constFn(dart$.nullable(D)))();
    class GeneratedColumnWithTypeConverter extends query_builder.GeneratedColumn$(S) {
      get converter() {
        return this[converter$];
      }
      set converter(value) {
        super.converter = value;
      }
      static ['_#_#tearOff'](D, S, converter, name, tableName, nullable, clientDefault, type, defaultConstraints, customConstraints, defaultValue, additionalChecks, requiredDuringInsert, generatedAs) {
        return new (query_builder.GeneratedColumnWithTypeConverter$(D, S)).__(converter, name, tableName, nullable, clientDefault, type, defaultConstraints, customConstraints, defaultValue, additionalChecks, requiredDuringInsert, generatedAs);
      }
      equalsValue(dartValue) {
        __t$DN().as(dartValue);
        return this.equals(S.as(this.converter.mapToSql(dartValue)));
      }
    }
    (GeneratedColumnWithTypeConverter.__ = function(converter, name, tableName, nullable, clientDefault, type, defaultConstraints, customConstraints, defaultValue, additionalChecks, requiredDuringInsert, generatedAs) {
      this[converter$] = converter;
      GeneratedColumnWithTypeConverter.__proto__.new.call(this, name, tableName, nullable, {clientDefault: clientDefault, type: type, defaultConstraints: defaultConstraints, $customConstraints: customConstraints, defaultValue: defaultValue, additionalChecks: additionalChecks, requiredDuringInsert: requiredDuringInsert, generatedAs: generatedAs});
      ;
    }).prototype = GeneratedColumnWithTypeConverter.prototype;
    dart$.addTypeTests(GeneratedColumnWithTypeConverter);
    GeneratedColumnWithTypeConverter.prototype[_is_GeneratedColumnWithTypeConverter_default] = true;
    dart$.addTypeCaches(GeneratedColumnWithTypeConverter);
    dart$.setMethodSignature(GeneratedColumnWithTypeConverter, () => ({
      __proto__: dart$.getMethods(GeneratedColumnWithTypeConverter.__proto__),
      equalsValue: dart$.fnType(query_builder.Expression$(core.bool), [dart$.nullable(core.Object)])
    }));
    dart$.setLibraryUri(GeneratedColumnWithTypeConverter, I[4]);
    dart$.setFieldSignature(GeneratedColumnWithTypeConverter, () => ({
      __proto__: dart$.getFields(GeneratedColumnWithTypeConverter.__proto__),
      converter: dart$.finalFieldType(sql_types.TypeConverter$(D, S))
    }));
    return GeneratedColumnWithTypeConverter;
  });
  query_builder.GeneratedColumnWithTypeConverter = query_builder.GeneratedColumnWithTypeConverter$();
  dart$.addTypeTests(query_builder.GeneratedColumnWithTypeConverter, _is_GeneratedColumnWithTypeConverter_default);
  var generatedAs$0 = dart$.privateName(query_builder, "GeneratedAs.generatedAs");
  var stored$ = dart$.privateName(query_builder, "GeneratedAs.stored");
  query_builder.GeneratedAs = class GeneratedAs extends core.Object {
    get generatedAs() {
      return this[generatedAs$0];
    }
    set generatedAs(value) {
      super.generatedAs = value;
    }
    get stored() {
      return this[stored$];
    }
    set stored(value) {
      super.stored = value;
    }
    static ['_#new#tearOff'](generatedAs, stored) {
      return new query_builder.GeneratedAs.new(generatedAs, stored);
    }
  };
  (query_builder.GeneratedAs.new = function(generatedAs, stored) {
    this[generatedAs$0] = generatedAs;
    this[stored$] = stored;
    ;
  }).prototype = query_builder.GeneratedAs.prototype;
  dart$.addTypeTests(query_builder.GeneratedAs);
  dart$.addTypeCaches(query_builder.GeneratedAs);
  dart$.setLibraryUri(query_builder.GeneratedAs, I[4]);
  dart$.setFieldSignature(query_builder.GeneratedAs, () => ({
    __proto__: dart$.getFields(query_builder.GeneratedAs.__proto__),
    generatedAs: dart$.finalFieldType(query_builder.Expression),
    stored: dart$.finalFieldType(core.bool)
  }));
  query_builder.DatabaseSchemaEntity = class DatabaseSchemaEntity extends core.Object {};
  (query_builder.DatabaseSchemaEntity.new = function() {
    ;
  }).prototype = query_builder.DatabaseSchemaEntity.prototype;
  dart$.addTypeTests(query_builder.DatabaseSchemaEntity);
  dart$.addTypeCaches(query_builder.DatabaseSchemaEntity);
  dart$.setLibraryUri(query_builder.DatabaseSchemaEntity, I[4]);
  var createTriggerStmt$ = dart$.privateName(query_builder, "Trigger.createTriggerStmt");
  var entityName$ = dart$.privateName(query_builder, "Trigger.entityName");
  query_builder.Trigger = class Trigger extends query_builder.DatabaseSchemaEntity {
    get createTriggerStmt() {
      return this[createTriggerStmt$];
    }
    set createTriggerStmt(value) {
      super.createTriggerStmt = value;
    }
    get entityName() {
      return this[entityName$];
    }
    set entityName(value) {
      super.entityName = value;
    }
    static ['_#new#tearOff'](createTriggerStmt, entityName) {
      return new query_builder.Trigger.new(createTriggerStmt, entityName);
    }
  };
  (query_builder.Trigger.new = function(createTriggerStmt, entityName) {
    this[createTriggerStmt$] = createTriggerStmt;
    this[entityName$] = entityName;
    ;
  }).prototype = query_builder.Trigger.prototype;
  dart$.addTypeTests(query_builder.Trigger);
  dart$.addTypeCaches(query_builder.Trigger);
  dart$.setLibraryUri(query_builder.Trigger, I[4]);
  dart$.setFieldSignature(query_builder.Trigger, () => ({
    __proto__: dart$.getFields(query_builder.Trigger.__proto__),
    createTriggerStmt: dart$.finalFieldType(core.String),
    entityName: dart$.finalFieldType(core.String)
  }));
  var entityName$0 = dart$.privateName(query_builder, "Index.entityName");
  var createIndexStmt$ = dart$.privateName(query_builder, "Index.createIndexStmt");
  query_builder.Index = class Index extends query_builder.DatabaseSchemaEntity {
    get entityName() {
      return this[entityName$0];
    }
    set entityName(value) {
      super.entityName = value;
    }
    get createIndexStmt() {
      return this[createIndexStmt$];
    }
    set createIndexStmt(value) {
      super.createIndexStmt = value;
    }
    static ['_#new#tearOff'](entityName, createIndexStmt) {
      return new query_builder.Index.new(entityName, createIndexStmt);
    }
  };
  (query_builder.Index.new = function(entityName, createIndexStmt) {
    this[entityName$0] = entityName;
    this[createIndexStmt$] = createIndexStmt;
    ;
  }).prototype = query_builder.Index.prototype;
  dart$.addTypeTests(query_builder.Index);
  dart$.addTypeCaches(query_builder.Index);
  dart$.setLibraryUri(query_builder.Index, I[4]);
  dart$.setFieldSignature(query_builder.Index, () => ({
    __proto__: dart$.getFields(query_builder.Index.__proto__),
    entityName: dart$.finalFieldType(core.String),
    createIndexStmt: dart$.finalFieldType(core.String)
  }));
  var sql$ = dart$.privateName(query_builder, "OnCreateQuery.sql");
  query_builder.OnCreateQuery = class OnCreateQuery extends query_builder.DatabaseSchemaEntity {
    get sql() {
      return this[sql$];
    }
    set sql(value) {
      super.sql = value;
    }
    static ['_#new#tearOff'](sql) {
      return new query_builder.OnCreateQuery.new(sql);
    }
    get entityName() {
      return "$internal$";
    }
  };
  (query_builder.OnCreateQuery.new = function(sql) {
    this[sql$] = sql;
    ;
  }).prototype = query_builder.OnCreateQuery.prototype;
  dart$.addTypeTests(query_builder.OnCreateQuery);
  dart$.addTypeCaches(query_builder.OnCreateQuery);
  dart$.setGetterSignature(query_builder.OnCreateQuery, () => ({
    __proto__: dart$.getGetters(query_builder.OnCreateQuery.__proto__),
    entityName: core.String
  }));
  dart$.setLibraryUri(query_builder.OnCreateQuery, I[4]);
  dart$.setFieldSignature(query_builder.OnCreateQuery, () => ({
    __proto__: dart$.getFields(query_builder.OnCreateQuery.__proto__),
    sql: dart$.finalFieldType(core.String)
  }));
  const _is_ResultSetImplementation_default = Symbol('_is_ResultSetImplementation_default');
  query_builder.ResultSetImplementation$ = dart$.generic((Tbl, Row) => {
    var __t$_AliasResultSetOfTbl$Row = () => (__t$_AliasResultSetOfTbl$Row = dart$.constFn(query_builder._AliasResultSet$(Tbl, Row)))();
    class ResultSetImplementation extends query_builder.DatabaseSchemaEntity {
      get aliasedName() {
        return this.entityName;
      }
      createAlias(alias) {
        return new (__t$_AliasResultSetOfTbl$Row()).new(alias, this);
      }
    }
    (ResultSetImplementation.new = function() {
      ;
    }).prototype = ResultSetImplementation.prototype;
    dart$.addTypeTests(ResultSetImplementation);
    ResultSetImplementation.prototype[_is_ResultSetImplementation_default] = true;
    dart$.addTypeCaches(ResultSetImplementation);
    dart$.setMethodSignature(ResultSetImplementation, () => ({
      __proto__: dart$.getMethods(ResultSetImplementation.__proto__),
      createAlias: dart$.fnType(query_builder.ResultSetImplementation$(Tbl, Row), [core.String])
    }));
    dart$.setGetterSignature(ResultSetImplementation, () => ({
      __proto__: dart$.getGetters(ResultSetImplementation.__proto__),
      aliasedName: core.String
    }));
    dart$.setLibraryUri(ResultSetImplementation, I[4]);
    return ResultSetImplementation;
  });
  query_builder.ResultSetImplementation = query_builder.ResultSetImplementation$();
  dart$.addTypeTests(query_builder.ResultSetImplementation, _is_ResultSetImplementation_default);
  var _alias$ = dart$.privateName(query_builder, "_alias");
  const _is__AliasResultSet_default = Symbol('_is__AliasResultSet_default');
  query_builder._AliasResultSet$ = dart$.generic((Tbl, Row) => {
    var __t$_AliasResultSetOfTbl$Row = () => (__t$_AliasResultSetOfTbl$Row = dart$.constFn(query_builder._AliasResultSet$(Tbl, Row)))();
    class _AliasResultSet extends query_builder.ResultSetImplementation$(Tbl, Row) {
      static ['_#new#tearOff'](Tbl, Row, _alias, _inner) {
        return new (query_builder._AliasResultSet$(Tbl, Row)).new(_alias, _inner);
      }
      get $columns() {
        return this[_inner$].$columns;
      }
      get aliasedName() {
        return this[_alias$];
      }
      createAlias(alias) {
        return new (__t$_AliasResultSetOfTbl$Row()).new(alias, this[_inner$]);
      }
      get entityName() {
        return this[_inner$].entityName;
      }
      map(data, opts) {
        let tablePrefix = opts && 'tablePrefix' in opts ? opts.tablePrefix : null;
        return this[_inner$].map(data, {tablePrefix: tablePrefix});
      }
      get asDslTable() {
        return this[_inner$].asDslTable;
      }
    }
    (_AliasResultSet.new = function(_alias, _inner) {
      this[_alias$] = _alias;
      this[_inner$] = _inner;
      ;
    }).prototype = _AliasResultSet.prototype;
    dart$.addTypeTests(_AliasResultSet);
    _AliasResultSet.prototype[_is__AliasResultSet_default] = true;
    dart$.addTypeCaches(_AliasResultSet);
    dart$.setMethodSignature(_AliasResultSet, () => ({
      __proto__: dart$.getMethods(_AliasResultSet.__proto__),
      map: dart$.fnType(Row, [core.Map$(core.String, dart$.dynamic)], {tablePrefix: dart$.nullable(core.String)}, {})
    }));
    dart$.setGetterSignature(_AliasResultSet, () => ({
      __proto__: dart$.getGetters(_AliasResultSet.__proto__),
      $columns: core.List$(query_builder.GeneratedColumn),
      entityName: core.String,
      asDslTable: Tbl
    }));
    dart$.setLibraryUri(_AliasResultSet, I[4]);
    dart$.setFieldSignature(_AliasResultSet, () => ({
      __proto__: dart$.getFields(_AliasResultSet.__proto__),
      [_alias$]: dart$.finalFieldType(core.String),
      [_inner$]: dart$.finalFieldType(query_builder.ResultSetImplementation$(Tbl, Row))
    }));
    return _AliasResultSet;
  });
  query_builder._AliasResultSet = query_builder._AliasResultSet$();
  dart$.addTypeTests(query_builder._AliasResultSet, _is__AliasResultSet_default);
  var _columnsByName = dart$.privateName(query_builder, "_columnsByName");
  var VerificationContext__errors = dart$.privateName(data_verification, "VerificationContext._errors");
  dsl.HasResultSet = class HasResultSet extends core.Object {};
  (dsl.HasResultSet.new = function() {
    ;
  }).prototype = dsl.HasResultSet.prototype;
  dart$.addTypeTests(dsl.HasResultSet);
  dart$.addTypeCaches(dsl.HasResultSet);
  dart$.setLibraryUri(dsl.HasResultSet, I[6]);
  dsl.Table = class Table extends dsl.HasResultSet {
    get tableName() {
      return null;
    }
    get withoutRowId() {
      return false;
    }
    get dontWriteConstraints() {
      return false;
    }
    get isStrict() {
      return false;
    }
    get primaryKey() {
      return null;
    }
    get customConstraints() {
      return T$.JSArrayOfString().of([]);
    }
    integer() {
      return dsl._isGenerated();
    }
    intEnum(T) {
      return dsl._isGenerated();
    }
    text() {
      return dsl._isGenerated();
    }
    boolean() {
      return dsl._isGenerated();
    }
    dateTime() {
      return dsl._isGenerated();
    }
    blob() {
      return dsl._isGenerated();
    }
    real() {
      return dsl._isGenerated();
    }
  };
  (dsl.Table.new = function() {
    dsl.Table.__proto__.new.call(this);
    ;
  }).prototype = dsl.Table.prototype;
  dart$.addTypeTests(dsl.Table);
  dart$.addTypeCaches(dsl.Table);
  dart$.setMethodSignature(dsl.Table, () => ({
    __proto__: dart$.getMethods(dsl.Table.__proto__),
    integer: dart$.fnType(dsl.ColumnBuilder$(core.int), []),
    intEnum: dart$.gFnType(T => [dsl.ColumnBuilder$(core.int), []], T => [dart$.nullable(core.Object)]),
    text: dart$.fnType(dsl.ColumnBuilder$(core.String), []),
    boolean: dart$.fnType(dsl.ColumnBuilder$(core.bool), []),
    dateTime: dart$.fnType(dsl.ColumnBuilder$(core.DateTime), []),
    blob: dart$.fnType(dsl.ColumnBuilder$(typed_data.Uint8List), []),
    real: dart$.fnType(dsl.ColumnBuilder$(core.double), [])
  }));
  dart$.setGetterSignature(dsl.Table, () => ({
    __proto__: dart$.getGetters(dsl.Table.__proto__),
    tableName: dart$.nullable(core.String),
    withoutRowId: core.bool,
    dontWriteConstraints: core.bool,
    isStrict: core.bool,
    primaryKey: dart$.nullable(core.Set$(dsl.Column)),
    customConstraints: core.List$(core.String)
  }));
  dart$.setLibraryUri(dsl.Table, I[6]);
  const _is_TableInfo_default = Symbol('_is_TableInfo_default');
  query_builder.TableInfo$ = dart$.generic((TableDsl, D) => {
    var __t$InsertableOfD = () => (__t$InsertableOfD = dart$.constFn(data_class.Insertable$(D)))();
    class TableInfo extends dsl.Table {}
    TableInfo[dart$.mixinOn] = Table => {
      class TableInfo extends Table {
        get asDslTable() {
          return TableDsl.as(this);
        }
        get $primaryKey() {
          return C[47] || CT.C47;
        }
        get primaryKey() {
          return this.$primaryKey;
        }
        get $tableName() {
          return this.aliasedName;
        }
        get aliasedName() {
          return this.entityName;
        }
        get entityName() {
          return this.actualTableName;
        }
        get columnsByName() {
          let t10;
          t10 = this[_columnsByName];
          return t10 == null ? this[_columnsByName] = (() => {
            let t11 = new (T$.IdentityMapOfString$GeneratedColumn()).new();
            for (let column of this.$columns)
              t11[$_set](column.$name, column);
            return t11;
          })() : t10;
        }
        validateIntegrity(instance, opts) {
          __t$InsertableOfD().as(instance);
          let isInserting = opts && 'isInserting' in opts ? opts.isInserting : false;
          return C[48] || CT.C48;
        }
        mapFromCompanion(companion) {
          __t$InsertableOfD().as(companion);
          let asColumnMap = companion.toColumns(false);
          if (asColumnMap[$values][$any](dart$.fn(e => !query_builder.Variable.is(e), T$.ExpressionTobool()))) {
            dart$.throw(new core.ArgumentError.new("The companion " + dart$.str(companion) + " cannot be transformed " + "into a dataclass as it contains expressions that need to be " + "evaluated by a database engine."));
          }
          let context = new query_builder.GenerationContext.new(sql_types.SqlTypeSystem.defaultInstance, null);
          let rawValues = asColumnMap[$cast](core.String, query_builder.Variable)[$map](core.String, dart$.dynamic, dart$.fn((key, value) => new (T$.MapEntryOfString$dynamic()).__(key, value.mapToSimpleValue(context)), T$.StringAndVariableToMapEntryOfString$dynamic()));
          return this.map(rawValues);
        }
        _equals(other) {
          if (other == null) return false;
          if (T$.TableInfoOfTable$dynamic().is(other)) {
            return other[$runtimeType]._equals(this[$runtimeType]) && other.$tableName === this.$tableName;
          }
          return false;
        }
        get hashCode() {
          return core.Object.hash(this.aliasedName, this.actualTableName);
        }
      }
      dart$.defineExtensionMethods(TableInfo, ['_equals']);
      dart$.defineExtensionAccessors(TableInfo, ['hashCode']);
      return TableInfo;
    };
    (TableInfo[dart$.mixinNew] = function() {
      this[_columnsByName] = null;
    }).prototype = TableInfo.prototype;
    dart$.addTypeTests(TableInfo);
    TableInfo.prototype[_is_TableInfo_default] = true;
    dart$.addTypeCaches(TableInfo);
    TableInfo[dart$.implements] = () => [query_builder.DatabaseSchemaEntity, query_builder.ResultSetImplementation$(TableDsl, D), dsl.Table];
    dart$.setMethodSignature(TableInfo, () => ({
      __proto__: dart$.getMethods(TableInfo.__proto__),
      validateIntegrity: dart$.fnType(data_verification.VerificationContext, [dart$.nullable(core.Object)], {isInserting: core.bool}, {}),
      mapFromCompanion: dart$.fnType(D, [dart$.nullable(core.Object)])
    }));
    dart$.setGetterSignature(TableInfo, () => ({
      __proto__: dart$.getGetters(TableInfo.__proto__),
      asDslTable: TableDsl,
      $primaryKey: core.Set$(query_builder.GeneratedColumn),
      primaryKey: core.Set$(dsl.Column),
      $tableName: core.String,
      aliasedName: core.String,
      entityName: core.String,
      columnsByName: core.Map$(core.String, query_builder.GeneratedColumn)
    }));
    dart$.setLibraryUri(TableInfo, I[4]);
    dart$.setFieldSignature(TableInfo, () => ({
      __proto__: dart$.getFields(TableInfo.__proto__),
      [_columnsByName]: dart$.fieldType(dart$.nullable(core.Map$(core.String, query_builder.GeneratedColumn)))
    }));
    return TableInfo;
  });
  query_builder.TableInfo = query_builder.TableInfo$();
  dart$.addTypeTests(query_builder.TableInfo, _is_TableInfo_default);
  const _is_VirtualTableInfo_default = Symbol('_is_VirtualTableInfo_default');
  query_builder.VirtualTableInfo$ = dart$.generic((TableDsl, D) => {
    class VirtualTableInfo extends query_builder.TableInfo$(TableDsl, D) {}
    VirtualTableInfo[dart$.mixinOn] = TableInfo => class VirtualTableInfo extends TableInfo {};
    dart$.addTypeTests(VirtualTableInfo);
    VirtualTableInfo.prototype[_is_VirtualTableInfo_default] = true;
    dart$.addTypeCaches(VirtualTableInfo);
    VirtualTableInfo[dart$.implements] = () => [query_builder.TableInfo$(TableDsl, D)];
    dart$.setLibraryUri(VirtualTableInfo, I[4]);
    return VirtualTableInfo;
  });
  query_builder.VirtualTableInfo = query_builder.VirtualTableInfo$();
  dart$.addTypeTests(query_builder.VirtualTableInfo, _is_VirtualTableInfo_default);
  const _is_ViewInfo_default = Symbol('_is_ViewInfo_default');
  query_builder.ViewInfo$ = dart$.generic((Self, Row) => {
    class ViewInfo extends core.Object {}
    (ViewInfo.new = function() {
      ;
    }).prototype = ViewInfo.prototype;
    dart$.addTypeTests(ViewInfo);
    ViewInfo.prototype[_is_ViewInfo_default] = true;
    dart$.addTypeCaches(ViewInfo);
    ViewInfo[dart$.implements] = () => [query_builder.ResultSetImplementation$(Self, Row)];
    dart$.setLibraryUri(ViewInfo, I[4]);
    return ViewInfo;
  });
  query_builder.ViewInfo = query_builder.ViewInfo$();
  dart$.addTypeTests(query_builder.ViewInfo, _is_ViewInfo_default);
  var tables$ = dart$.privateName(query_builder, "CustomSelectStatement.tables");
  var query$ = dart$.privateName(query_builder, "CustomSelectStatement.query");
  var variables$ = dart$.privateName(query_builder, "CustomSelectStatement.variables");
  var _db$ = dart$.privateName(query_builder, "_db");
  var _mapArgs = dart$.privateName(query_builder, "_mapArgs");
  var _executeRaw = dart$.privateName(query_builder, "_executeRaw");
  var _constructFetcher = dart$.privateName(query_builder, "_constructFetcher");
  var _mapDbResponse = dart$.privateName(query_builder, "_mapDbResponse");
  const _is_Selectable_default = Symbol('_is_Selectable_default');
  query_builder.Selectable$ = dart$.generic(T => {
    var __t$TN = () => (__t$TN = dart$.constFn(dart$.nullable(T)))();
    class Selectable extends core.Object {
      getSingle() {
        return async.async(T, (function* getSingle() {
          return (yield this.get())[$single];
        }).bind(this));
      }
      watchSingle() {
        return this.watch().transform(T, single_transformer.singleElements(T));
      }
      getSingleOrNull() {
        return async.async(__t$TN(), (function* getSingleOrNull() {
          let list = (yield this.get());
          let iterator = list[$iterator];
          if (!iterator.moveNext()) {
            return null;
          }
          let element = iterator.current;
          if (iterator.moveNext()) {
            dart$.throw(new core.StateError.new("Expected exactly one result, but found more than one!"));
          }
          return element;
        }).bind(this));
      }
      watchSingleOrNull() {
        return this.watch().transform(__t$TN(), single_transformer.singleElementsOrNull(T));
      }
      map(N, mapper) {
        return new (query_builder._MappedSelectable$(T, N)).new(this, mapper);
      }
    }
    (Selectable.new = function() {
      ;
    }).prototype = Selectable.prototype;
    dart$.addTypeTests(Selectable);
    Selectable.prototype[_is_Selectable_default] = true;
    dart$.addTypeCaches(Selectable);
    Selectable[dart$.implements] = () => [query_builder.MultiSelectable$(T), query_builder.SingleSelectable$(T), query_builder.SingleOrNullSelectable$(T)];
    dart$.setMethodSignature(Selectable, () => ({
      __proto__: dart$.getMethods(Selectable.__proto__),
      getSingle: dart$.fnType(async.Future$(T), []),
      watchSingle: dart$.fnType(async.Stream$(T), []),
      getSingleOrNull: dart$.fnType(async.Future$(dart$.nullable(T)), []),
      watchSingleOrNull: dart$.fnType(async.Stream$(dart$.nullable(T)), []),
      map: dart$.gFnType(N => [query_builder.Selectable$(N), [dart$.fnType(N, [T])]], N => [dart$.nullable(core.Object)])
    }));
    dart$.setLibraryUri(Selectable, I[4]);
    return Selectable;
  });
  query_builder.Selectable = query_builder.Selectable$();
  dart$.addTypeTests(query_builder.Selectable, _is_Selectable_default);
  var data$ = dart$.privateName(query_builder, "QueryRow.data");
  query_builder.QueryRow = class QueryRow extends core.Object {
    get data() {
      return this[data$];
    }
    set data(value) {
      super.data = value;
    }
    static ['_#new#tearOff'](data, _db) {
      return new query_builder.QueryRow.new(data, _db);
    }
    read(T, key) {
      let type = this[_db$].typeSystem.forDartType(T);
      return T.as(type.mapFromDatabaseResponse(this.data[$_get](key)));
    }
    readBool(key) {
      return this.read(core.bool, key);
    }
    readString(key) {
      return this.read(core.String, key);
    }
    readInt(key) {
      return this.read(core.int, key);
    }
    readDouble(key) {
      return this.read(core.double, key);
    }
    readDateTime(key) {
      return this.read(core.DateTime, key);
    }
    readBlob(key) {
      return this.read(typed_data.Uint8List, key);
    }
  };
  (query_builder.QueryRow.new = function(data, _db) {
    this[data$] = data;
    this[_db$] = _db;
    ;
  }).prototype = query_builder.QueryRow.prototype;
  dart$.addTypeTests(query_builder.QueryRow);
  dart$.addTypeCaches(query_builder.QueryRow);
  dart$.setMethodSignature(query_builder.QueryRow, () => ({
    __proto__: dart$.getMethods(query_builder.QueryRow.__proto__),
    read: dart$.gFnType(T => [T, [core.String]], T => [dart$.nullable(core.Object)]),
    readBool: dart$.fnType(core.bool, [core.String]),
    readString: dart$.fnType(core.String, [core.String]),
    readInt: dart$.fnType(core.int, [core.String]),
    readDouble: dart$.fnType(core.double, [core.String]),
    readDateTime: dart$.fnType(core.DateTime, [core.String]),
    readBlob: dart$.fnType(typed_data.Uint8List, [core.String])
  }));
  dart$.setLibraryUri(query_builder.QueryRow, I[4]);
  dart$.setFieldSignature(query_builder.QueryRow, () => ({
    __proto__: dart$.getFields(query_builder.QueryRow.__proto__),
    data: dart$.finalFieldType(core.Map$(core.String, dart$.dynamic)),
    [_db$]: dart$.finalFieldType(runtime_api.DatabaseConnectionUser)
  }));
  const Object_Selectable$36 = class Object_Selectable extends core.Object {};
  (Object_Selectable$36.new = function() {
  }).prototype = Object_Selectable$36.prototype;
  dart$.applyMixin(Object_Selectable$36, query_builder.Selectable$(query_builder.QueryRow));
  query_builder.CustomSelectStatement = class CustomSelectStatement extends Object_Selectable$36 {
    get tables() {
      return this[tables$];
    }
    set tables(value) {
      super.tables = value;
    }
    get query() {
      return this[query$];
    }
    set query(value) {
      super.query = value;
    }
    get variables() {
      return this[variables$];
    }
    set variables(value) {
      super.variables = value;
    }
    static ['_#new#tearOff'](query, variables, tables, _db) {
      return new query_builder.CustomSelectStatement.new(query, variables, tables, _db);
    }
    [_constructFetcher]() {
      let args = this[_mapArgs]();
      return new stream_queries.QueryStreamFetcher.new({readsFrom: runtime_api.TableUpdateQuery.onAllTables(this.tables), fetchData: dart$.fn(() => this[_executeRaw](args), T$.VoidToFutureOfListOfMapOfString$ObjectN()), key: new stream_queries.StreamKey.new(this.query, args)});
    }
    get() {
      return this[_executeRaw](this[_mapArgs]()).then(T$.ListOfQueryRow(), dart$.bind(this, _mapDbResponse));
    }
    watch() {
      return this[_db$].createStream(this[_constructFetcher]()).map(T$.ListOfQueryRow(), dart$.bind(this, _mapDbResponse));
    }
    [_mapArgs]() {
      let ctx = new query_builder.GenerationContext.fromDb(this[_db$]);
      return this.variables[$map](dart$.dynamic, dart$.fn(v => v.mapToSimpleValue(ctx), T$.VariableTodynamic()))[$toList]();
    }
    [_executeRaw](mappedArgs) {
      return this[_db$].doWhenOpened(T$.ListOfMapOfString$ObjectN(), dart$.fn(e => e.runSelect(this.query, mappedArgs), T$.QueryExecutorToFutureOfListOfMapOfString$ObjectN()));
    }
    [_mapDbResponse](rows) {
      return rows[$map](query_builder.QueryRow, dart$.fn(row => new query_builder.QueryRow.new(row, this[_db$]), T$.MapOfString$ObjectNToQueryRow()))[$toList]();
    }
  };
  (query_builder.CustomSelectStatement.new = function(query, variables, tables, _db) {
    this[query$] = query;
    this[variables$] = variables;
    this[tables$] = tables;
    this[_db$] = _db;
    ;
  }).prototype = query_builder.CustomSelectStatement.prototype;
  dart$.addTypeTests(query_builder.CustomSelectStatement);
  dart$.addTypeCaches(query_builder.CustomSelectStatement);
  dart$.setMethodSignature(query_builder.CustomSelectStatement, () => ({
    __proto__: dart$.getMethods(query_builder.CustomSelectStatement.__proto__),
    [_constructFetcher]: dart$.fnType(stream_queries.QueryStreamFetcher, []),
    get: dart$.fnType(async.Future$(core.List$(query_builder.QueryRow)), []),
    watch: dart$.fnType(async.Stream$(core.List$(query_builder.QueryRow)), []),
    [_mapArgs]: dart$.fnType(core.List, []),
    [_executeRaw]: dart$.fnType(async.Future$(core.List$(core.Map$(core.String, dart$.nullable(core.Object)))), [core.List$(dart$.nullable(core.Object))]),
    [_mapDbResponse]: dart$.fnType(core.List$(query_builder.QueryRow), [core.List$(core.Map$(core.String, dart$.nullable(core.Object)))])
  }));
  dart$.setLibraryUri(query_builder.CustomSelectStatement, I[4]);
  dart$.setFieldSignature(query_builder.CustomSelectStatement, () => ({
    __proto__: dart$.getFields(query_builder.CustomSelectStatement.__proto__),
    tables: dart$.finalFieldType(core.Set$(query_builder.ResultSetImplementation)),
    query: dart$.finalFieldType(core.String),
    variables: dart$.finalFieldType(core.List$(query_builder.Variable)),
    [_db$]: dart$.finalFieldType(runtime_api.DatabaseConnectionUser)
  }));
  query_builder.BaseSelectStatement = class BaseSelectStatement extends query_builder.Component {};
  (query_builder.BaseSelectStatement.new = function() {
    query_builder.BaseSelectStatement.__proto__.new.call(this);
    ;
  }).prototype = query_builder.BaseSelectStatement.prototype;
  dart$.addTypeTests(query_builder.BaseSelectStatement);
  dart$.addTypeCaches(query_builder.BaseSelectStatement);
  dart$.setLibraryUri(query_builder.BaseSelectStatement, I[4]);
  var distinct$ = dart$.privateName(query_builder, "SimpleSelectStatement.distinct");
  var _returnedColumnCount = dart$.privateName(query_builder, "_returnedColumnCount");
  var _getRaw = dart$.privateName(query_builder, "_getRaw");
  var _mapResponse = dart$.privateName(query_builder, "_mapResponse");
  var database$ = dart$.privateName(query_builder, "Query.database");
  var table$0 = dart$.privateName(query_builder, "Query.table");
  var whereExpr = dart$.privateName(query_builder, "Query.whereExpr");
  var orderByExpr = dart$.privateName(query_builder, "Query.orderByExpr");
  var limitExpr = dart$.privateName(query_builder, "Query.limitExpr");
  var _groupBy = dart$.privateName(query_builder, "_groupBy");
  const _is_Query_default = Symbol('_is_Query_default');
  query_builder.Query$ = dart$.generic((T, D) => {
    var __t$ResultSetImplementationOfT$D = () => (__t$ResultSetImplementationOfT$D = dart$.constFn(query_builder.ResultSetImplementation$(T, D)))();
    class Query extends query_builder.Component {
      get database() {
        return this[database$];
      }
      set database(value) {
        this[database$] = value;
      }
      get table() {
        return this[table$0];
      }
      set table(value) {
        this[table$0] = __t$ResultSetImplementationOfT$D().as(value);
      }
      get whereExpr() {
        return this[whereExpr];
      }
      set whereExpr(value) {
        this[whereExpr] = value;
      }
      get orderByExpr() {
        return this[orderByExpr];
      }
      set orderByExpr(value) {
        this[orderByExpr] = value;
      }
      get limitExpr() {
        return this[limitExpr];
      }
      set limitExpr(value) {
        this[limitExpr] = value;
      }
      writeInto(context) {
        let needsWhitespace = false;
        function writeWithSpace(component) {
          if (component == null) return;
          if (needsWhitespace) context.writeWhitespace();
          component.writeInto(context);
          needsWhitespace = true;
        }
        dart$.fn(writeWithSpace, T$.ComponentNTovoid());
        this.writeStartPart(context);
        needsWhitespace = true;
        writeWithSpace(this.whereExpr);
        writeWithSpace(this[_groupBy]);
        writeWithSpace(this.orderByExpr);
        writeWithSpace(this.limitExpr);
      }
      constructQuery() {
        let ctx = new query_builder.GenerationContext.fromDb(this.database);
        this.writeInto(ctx);
        ctx.buffer.write(";");
        return ctx;
      }
    }
    (Query.new = function(database, table) {
      this[whereExpr] = null;
      this[orderByExpr] = null;
      this[limitExpr] = null;
      this[_groupBy] = null;
      this[database$] = database;
      this[table$0] = table;
      Query.__proto__.new.call(this);
      ;
    }).prototype = Query.prototype;
    dart$.addTypeTests(Query);
    Query.prototype[_is_Query_default] = true;
    dart$.addTypeCaches(Query);
    dart$.setMethodSignature(Query, () => ({
      __proto__: dart$.getMethods(Query.__proto__),
      writeInto: dart$.fnType(dart$.void, [query_builder.GenerationContext]),
      constructQuery: dart$.fnType(query_builder.GenerationContext, [])
    }));
    dart$.setLibraryUri(Query, I[4]);
    dart$.setFieldSignature(Query, () => ({
      __proto__: dart$.getFields(Query.__proto__),
      database: dart$.fieldType(runtime_api.DatabaseConnectionUser),
      table: dart$.fieldType(query_builder.ResultSetImplementation$(T, D)),
      whereExpr: dart$.fieldType(dart$.nullable(query_builder.Where)),
      orderByExpr: dart$.fieldType(dart$.nullable(query_builder.OrderBy)),
      limitExpr: dart$.fieldType(dart$.nullable(query_builder.Limit)),
      [_groupBy]: dart$.fieldType(dart$.nullable(query_builder.GroupBy))
    }));
    return Query;
  });
  query_builder.Query = query_builder.Query$();
  dart$.addTypeTests(query_builder.Query, _is_Query_default);
  const _is_SingleTableQueryMixin_default = Symbol('_is_SingleTableQueryMixin_default');
  query_builder.SingleTableQueryMixin$ = dart$.generic((T, D) => {
    class SingleTableQueryMixin extends query_builder.Query$(T, D) {}
    SingleTableQueryMixin[dart$.mixinOn] = Query => class SingleTableQueryMixin extends Query {
      where(filter) {
        let predicate = filter(this.table.asDslTable);
        if (this.whereExpr == null) {
          this.whereExpr = new query_builder.Where.new(predicate);
        } else {
          this.whereExpr = new query_builder.Where.new(query_builder['BooleanExpressionOperators|&'](dart$.nullCheck(this.whereExpr).predicate, predicate));
        }
      }
    };
    dart$.addTypeTests(SingleTableQueryMixin);
    SingleTableQueryMixin.prototype[_is_SingleTableQueryMixin_default] = true;
    dart$.addTypeCaches(SingleTableQueryMixin);
    SingleTableQueryMixin[dart$.implements] = () => [query_builder.Query$(T, D)];
    dart$.setMethodSignature(SingleTableQueryMixin, () => ({
      __proto__: dart$.getMethods(SingleTableQueryMixin.__proto__),
      where: dart$.fnType(dart$.void, [dart$.fnType(query_builder.Expression$(dart$.nullable(core.bool)), [T])])
    }));
    dart$.setLibraryUri(SingleTableQueryMixin, I[4]);
    return SingleTableQueryMixin;
  });
  query_builder.SingleTableQueryMixin = query_builder.SingleTableQueryMixin$();
  dart$.addTypeTests(query_builder.SingleTableQueryMixin, _is_SingleTableQueryMixin_default);
  const _is_LimitContainerMixin_default = Symbol('_is_LimitContainerMixin_default');
  query_builder.LimitContainerMixin$ = dart$.generic((T, D) => {
    class LimitContainerMixin extends query_builder.Query$(T, D) {}
    LimitContainerMixin[dart$.mixinOn] = Query => class LimitContainerMixin extends Query {
      limit(limit, opts) {
        let offset = opts && 'offset' in opts ? opts.offset : null;
        this.limitExpr = new query_builder.Limit.new(limit, offset);
      }
    };
    dart$.addTypeTests(LimitContainerMixin);
    LimitContainerMixin.prototype[_is_LimitContainerMixin_default] = true;
    dart$.addTypeCaches(LimitContainerMixin);
    LimitContainerMixin[dart$.implements] = () => [query_builder.Query$(T, D)];
    dart$.setMethodSignature(LimitContainerMixin, () => ({
      __proto__: dart$.getMethods(LimitContainerMixin.__proto__),
      limit: dart$.fnType(dart$.void, [core.int], {offset: dart$.nullable(core.int)}, {})
    }));
    dart$.setLibraryUri(LimitContainerMixin, I[4]);
    return LimitContainerMixin;
  });
  query_builder.LimitContainerMixin = query_builder.LimitContainerMixin$();
  dart$.addTypeTests(query_builder.LimitContainerMixin, _is_LimitContainerMixin_default);
  const _is_SimpleSelectStatement_default = Symbol('_is_SimpleSelectStatement_default');
  query_builder.SimpleSelectStatement$ = dart$.generic((T, D) => {
    var __t$JoinedSelectStatementOfT$D = () => (__t$JoinedSelectStatementOfT$D = dart$.constFn(query_builder.JoinedSelectStatement$(T, D)))();
    var __t$TToOrderingTerm = () => (__t$TToOrderingTerm = dart$.constFn(dart$.fnType(query_builder.OrderingTerm, [T])))();
    var __t$FnToOrderingTerm = () => (__t$FnToOrderingTerm = dart$.constFn(dart$.fnType(query_builder.OrderingTerm, [__t$TToOrderingTerm()])))();
    var __t$ListOfD = () => (__t$ListOfD = dart$.constFn(core.List$(D)))();
    const Query_SingleTableQueryMixin$36 = class Query_SingleTableQueryMixin extends query_builder.Query$(T, D) {};
    (Query_SingleTableQueryMixin$36.new = function(database, table) {
      Query_SingleTableQueryMixin$36.__proto__.new.call(this, database, table);
    }).prototype = Query_SingleTableQueryMixin$36.prototype;
    dart$.applyMixin(Query_SingleTableQueryMixin$36, query_builder.SingleTableQueryMixin$(T, D));
    const Query_LimitContainerMixin$36 = class Query_LimitContainerMixin extends Query_SingleTableQueryMixin$36 {};
    (Query_LimitContainerMixin$36.new = function(database, table) {
      Query_LimitContainerMixin$36.__proto__.new.call(this, database, table);
    }).prototype = Query_LimitContainerMixin$36.prototype;
    dart$.applyMixin(Query_LimitContainerMixin$36, query_builder.LimitContainerMixin$(T, D));
    const Query_Selectable$36 = class Query_Selectable extends Query_LimitContainerMixin$36 {};
    (Query_Selectable$36.new = function(database, table) {
      Query_Selectable$36.__proto__.new.call(this, database, table);
    }).prototype = Query_Selectable$36.prototype;
    dart$.applyMixin(Query_Selectable$36, query_builder.Selectable$(D));
    class SimpleSelectStatement extends Query_Selectable$36 {
      get distinct() {
        return this[distinct$];
      }
      set distinct(value) {
        super.distinct = value;
      }
      static ['_#new#tearOff'](T, D, database, table, opts) {
        let distinct = opts && 'distinct' in opts ? opts.distinct : false;
        return new (query_builder.SimpleSelectStatement$(T, D)).new(database, table, {distinct: distinct});
      }
      get watchedTables() {
        return T$.LinkedHashSetOfResultSetImplementation().from([this.table]);
      }
      get [_returnedColumnCount]() {
        return this.table.$columns[$length];
      }
      writeStartPart(ctx) {
        let t11;
        t11 = ctx.buffer;
        (() => {
          t11.write(query_builder._beginOfSelect(this.distinct));
          t11.write(" * FROM " + query_builder['NameWithAlias|get#tableWithAlias'](this.table));
          return t11;
        })();
        ctx.watchedTables[$add](this.table);
      }
      get() {
        let ctx = this.constructQuery();
        return this[_getRaw](ctx).then(__t$ListOfD(), dart$.bind(this, _mapResponse));
      }
      watch() {
        let query = this.constructQuery();
        let fetcher = new stream_queries.QueryStreamFetcher.new({readsFrom: runtime_api.TableUpdateQuery.onAllTables(query.watchedTables), fetchData: dart$.fn(() => this[_getRaw](query), T$.VoidToFutureOfListOfMapOfString$ObjectN()), key: new stream_queries.StreamKey.new(query.sql, query.boundVariables)});
        return this.database.createStream(fetcher).map(__t$ListOfD(), dart$.bind(this, _mapResponse));
      }
      [_getRaw](ctx) {
        return this.database.doWhenOpened(T$.ListOfMapOfString$ObjectN(), dart$.fn(e => e.runSelect(ctx.sql, ctx.boundVariables), T$.QueryExecutorToFutureOfListOfMapOfString$ObjectN()));
      }
      [_mapResponse](rows) {
        return rows[$map](D, dart$.bind(this.table, 'map'))[$toList]();
      }
      join(joins) {
        let statement = new (__t$JoinedSelectStatementOfT$D()).new(this.database, this.table, joins, this.distinct);
        if (this.whereExpr != null) {
          statement.where(dart$.nullCheck(this.whereExpr).predicate);
        }
        if (this.orderByExpr != null) {
          statement.orderBy(dart$.nullCheck(this.orderByExpr).terms);
        }
        if (this.limitExpr != null) {
          statement.limitExpr = this.limitExpr;
        }
        return statement;
      }
      addColumns(expressions) {
        let t11;
        t11 = this.join(T$.JSArrayOfJoinOfHasResultSet$dynamic().of([]));
        return (() => {
          t11.addColumns(expressions);
          return t11;
        })();
      }
      orderBy(clauses) {
        this.orderByExpr = new query_builder.OrderBy.new(clauses[$map](query_builder.OrderingTerm, dart$.fn(t => t(this.table.asDslTable), __t$FnToOrderingTerm()))[$toList]());
      }
    }
    (SimpleSelectStatement.new = function(database, table, opts) {
      let distinct = opts && 'distinct' in opts ? opts.distinct : false;
      this[distinct$] = distinct;
      SimpleSelectStatement.__proto__.new.call(this, database, table);
      ;
    }).prototype = SimpleSelectStatement.prototype;
    dart$.addTypeTests(SimpleSelectStatement);
    SimpleSelectStatement.prototype[_is_SimpleSelectStatement_default] = true;
    dart$.addTypeCaches(SimpleSelectStatement);
    SimpleSelectStatement[dart$.implements] = () => [query_builder.BaseSelectStatement];
    dart$.setMethodSignature(SimpleSelectStatement, () => ({
      __proto__: dart$.getMethods(SimpleSelectStatement.__proto__),
      writeStartPart: dart$.fnType(dart$.void, [query_builder.GenerationContext]),
      get: dart$.fnType(async.Future$(core.List$(D)), []),
      watch: dart$.fnType(async.Stream$(core.List$(D)), []),
      [_getRaw]: dart$.fnType(async.Future$(core.List$(core.Map$(core.String, dart$.nullable(core.Object)))), [query_builder.GenerationContext]),
      [_mapResponse]: dart$.fnType(core.List$(D), [core.List$(core.Map$(core.String, dart$.nullable(core.Object)))]),
      join: dart$.fnType(query_builder.JoinedSelectStatement$(dsl.HasResultSet, dart$.dynamic), [core.List$(query_builder.Join$(dsl.HasResultSet, dart$.dynamic))]),
      addColumns: dart$.fnType(query_builder.JoinedSelectStatement$(dsl.HasResultSet, dart$.dynamic), [core.List$(query_builder.Expression)]),
      orderBy: dart$.fnType(dart$.void, [core.List$(dart$.fnType(query_builder.OrderingTerm, [T]))])
    }));
    dart$.setGetterSignature(SimpleSelectStatement, () => ({
      __proto__: dart$.getGetters(SimpleSelectStatement.__proto__),
      watchedTables: core.Set$(query_builder.ResultSetImplementation),
      [_returnedColumnCount]: core.int
    }));
    dart$.setLibraryUri(SimpleSelectStatement, I[4]);
    dart$.setFieldSignature(SimpleSelectStatement, () => ({
      __proto__: dart$.getFields(SimpleSelectStatement.__proto__),
      distinct: dart$.finalFieldType(core.bool)
    }));
    return SimpleSelectStatement;
  });
  query_builder.SimpleSelectStatement = query_builder.SimpleSelectStatement$();
  dart$.addTypeTests(query_builder.SimpleSelectStatement, _is_SimpleSelectStatement_default);
  var rawData$ = dart$.privateName(query_builder, "TypedResult.rawData");
  var _parsedData$ = dart$.privateName(query_builder, "_parsedData");
  var _parsedExpressions$ = dart$.privateName(query_builder, "_parsedExpressions");
  query_builder.TypedResult = class TypedResult extends core.Object {
    get rawData() {
      return this[rawData$];
    }
    set rawData(value) {
      super.rawData = value;
    }
    static ['_#new#tearOff'](_parsedData, rawData, _parsedExpressions = C[50] || CT.C50) {
      return new query_builder.TypedResult.new(_parsedData, rawData, _parsedExpressions);
    }
    readTable(T, D, table) {
      if (!this[_parsedData$][$containsKey](table)) {
        dart$.throw(new core.ArgumentError.new("Invalid table passed to readTable: " + table.aliasedName + ". This row " + "does not contain values for that table. \n" + "Please use readTableOrNull for outer joins."));
      }
      return D.as(this[_parsedData$][$_get](table));
    }
    readTableOrNull(T, D, table) {
      return dart$.nullable(D).as(this[_parsedData$][$_get](table));
    }
    read(D, expr) {
      if (this[_parsedExpressions$][$containsKey](expr)) {
        return D.as(this[_parsedExpressions$][$_get](expr));
      }
      dart$.throw(new core.ArgumentError.new("Invalid call to read(): " + dart$.str(expr) + ". This result set does not have a column " + "for that expression."));
    }
  };
  (query_builder.TypedResult.new = function(_parsedData, rawData, _parsedExpressions = C[50] || CT.C50) {
    this[_parsedData$] = _parsedData;
    this[rawData$] = rawData;
    this[_parsedExpressions$] = _parsedExpressions;
    ;
  }).prototype = query_builder.TypedResult.prototype;
  dart$.addTypeTests(query_builder.TypedResult);
  dart$.addTypeCaches(query_builder.TypedResult);
  dart$.setMethodSignature(query_builder.TypedResult, () => ({
    __proto__: dart$.getMethods(query_builder.TypedResult.__proto__),
    readTable: dart$.gFnType((T, D) => [D, [query_builder.ResultSetImplementation$(T, D)]], (T, D) => [dsl.HasResultSet, dart$.nullable(core.Object)]),
    readTableOrNull: dart$.gFnType((T, D) => [dart$.nullable(D), [query_builder.TableInfo$(T, D)]], (T, D) => [dsl.Table, dart$.nullable(core.Object)]),
    read: dart$.gFnType(D => [D, [query_builder.Expression$(D)]], D => [dart$.nullable(core.Object)])
  }));
  dart$.setLibraryUri(query_builder.TypedResult, I[4]);
  dart$.setFieldSignature(query_builder.TypedResult, () => ({
    __proto__: dart$.getFields(query_builder.TypedResult.__proto__),
    [_parsedData$]: dart$.finalFieldType(core.Map$(query_builder.ResultSetImplementation, dart$.dynamic)),
    [_parsedExpressions$]: dart$.finalFieldType(core.Map$(query_builder.Expression, dart$.dynamic)),
    rawData: dart$.finalFieldType(query_builder.QueryRow)
  }));
  var distinct$0 = dart$.privateName(query_builder, "JoinedSelectStatement.distinct");
  var _selectedColumns = dart$.privateName(query_builder, "_selectedColumns");
  var _columnAliases = dart$.privateName(query_builder, "_columnAliases");
  var _joins$ = dart$.privateName(query_builder, "_joins");
  var _includeMainTableInResult$ = dart$.privateName(query_builder, "_includeMainTableInResult");
  var _includeJoinedTablesInResult$ = dart$.privateName(query_builder, "_includeJoinedTablesInResult");
  var _queriedTables = dart$.privateName(query_builder, "_queriedTables");
  var _warnAboutDuplicate = dart$.privateName(query_builder, "_warnAboutDuplicate");
  const _is_JoinedSelectStatement_default = Symbol('_is_JoinedSelectStatement_default');
  query_builder.JoinedSelectStatement$ = dart$.generic((FirstT, FirstD) => {
    const Query_LimitContainerMixin$36 = class Query_LimitContainerMixin extends query_builder.Query$(FirstT, FirstD) {};
    (Query_LimitContainerMixin$36.new = function(database, table) {
      Query_LimitContainerMixin$36.__proto__.new.call(this, database, table);
    }).prototype = Query_LimitContainerMixin$36.prototype;
    dart$.applyMixin(Query_LimitContainerMixin$36, query_builder.LimitContainerMixin$(FirstT, FirstD));
    const Query_Selectable$36 = class Query_Selectable extends Query_LimitContainerMixin$36 {};
    (Query_Selectable$36.new = function(database, table) {
      Query_Selectable$36.__proto__.new.call(this, database, table);
    }).prototype = Query_Selectable$36.prototype;
    dart$.applyMixin(Query_Selectable$36, query_builder.Selectable$(query_builder.TypedResult));
    class JoinedSelectStatement extends Query_Selectable$36 {
      get distinct() {
        return this[distinct$0];
      }
      set distinct(value) {
        super.distinct = value;
      }
      static ['_#new#tearOff'](FirstT, FirstD, database, table, _joins, distinct = false, _includeMainTableInResult = true, _includeJoinedTablesInResult = true) {
        return new (query_builder.JoinedSelectStatement$(FirstT, FirstD)).new(database, table, _joins, distinct, _includeMainTableInResult, _includeJoinedTablesInResult);
      }
      get watchedTables() {
        return this[_queriedTables]()[$toSet]();
      }
      get [_returnedColumnCount]() {
        return this[_joins$][$fold](core.int, this[_selectedColumns][$length], dart$.fn((prev, join) => {
          let t11;
          if (dart$.test((t11 = join.includeInResult, t11 == null ? this[_includeJoinedTablesInResult$] : t11))) {
            return prev + query_builder.ResultSetImplementation.as(join.table).$columns[$length];
          }
          return prev;
        }, T$.intAndJoinOfHasResultSet$dynamicToint()));
      }
      [_queriedTables](onlyResults = false) {
        return new (T$.SyncIterableOfResultSetImplementation()).new((function* _queriedTables() {
          let t11;
          if (!onlyResults || this[_includeMainTableInResult$]) {
            yield this.table;
          }
          for (let join of this[_joins$]) {
            if (onlyResults && !dart$.test((t11 = join.includeInResult, t11 == null ? this[_includeJoinedTablesInResult$] : t11))) continue;
            yield query_builder.ResultSetImplementation.as(join.table);
          }
        }).bind(this));
      }
      writeStartPart(ctx) {
        let t11, t11$;
        this[_selectedColumns][$insertAll](0, this[_queriedTables](true)[$expand](query_builder.GeneratedColumn, dart$.fn(t => t.$columns, T$.ResultSetImplementationToListOfGeneratedColumn()))[$cast](query_builder.Expression));
        ctx.hasMultipleTables = true;
        t11 = ctx.buffer;
        (() => {
          t11.write(query_builder._beginOfSelect(this.distinct));
          t11.write(" ");
          return t11;
        })();
        for (let i = 0; i < this[_selectedColumns][$length]; i = i + 1) {
          if (i !== 0) {
            ctx.buffer.write(", ");
          }
          let column = this[_selectedColumns][$_get](i);
          let chosenAlias = null;
          if (query_builder.GeneratedColumn.is(column)) {
            if (ctx.generatingForView === column.tableName) {
              chosenAlias = column.$name;
            } else {
              chosenAlias = column.tableName + "." + column.$name;
            }
          } else {
            chosenAlias = "c" + dart$.str(i);
          }
          this[_columnAliases][$_set](column, chosenAlias);
          column.writeInto(ctx);
          t11$ = ctx.buffer;
          (() => {
            t11$.write(" AS \"");
            t11$.write(chosenAlias);
            t11$.write("\"");
            return t11$;
          })();
        }
        ctx.buffer.write(" FROM " + query_builder['NameWithAlias|get#tableWithAlias'](this.table));
        ctx.watchedTables[$add](this.table);
        if (this[_joins$][$isNotEmpty]) {
          ctx.writeWhitespace();
          for (let i = 0; i < this[_joins$][$length]; i = i + 1) {
            if (i !== 0) ctx.writeWhitespace();
            this[_joins$][$_get](i).writeInto(ctx);
          }
        }
      }
      where(predicate) {
        if (this.whereExpr == null) {
          this.whereExpr = new query_builder.Where.new(predicate);
        } else {
          this.whereExpr = new query_builder.Where.new(query_builder['BooleanExpressionOperators|&'](dart$.nullCheck(this.whereExpr).predicate, predicate));
        }
      }
      orderBy(terms) {
        this.orderByExpr = new query_builder.OrderBy.new(terms);
      }
      addColumns(expressions) {
        this[_selectedColumns][$addAll](expressions);
      }
      join(joins) {
        this[_joins$][$addAll](joins);
        return this;
      }
      groupBy(expressions, opts) {
        let having = opts && 'having' in opts ? opts.having : null;
        this[_groupBy] = new query_builder.GroupBy.__(expressions[$toList](), having);
      }
      watch() {
        let ctx = this.constructQuery();
        let fetcher = new stream_queries.QueryStreamFetcher.new({readsFrom: runtime_api.TableUpdateQuery.onAllTables(ctx.watchedTables), fetchData: dart$.fn(() => this[_getRaw](ctx), T$.VoidToFutureOfListOfMapOfString$ObjectN()), key: new stream_queries.StreamKey.new(ctx.sql, ctx.boundVariables)});
        return this.database.createStream(fetcher).map(T$.ListOfTypedResult(), dart$.fn(rows => this[_mapResponse](ctx, rows), T$.ListOfMapOfString$ObjectNToListOfTypedResult()));
      }
      get() {
        return async.async(T$.ListOfTypedResult(), (function* get() {
          let ctx = this.constructQuery();
          let raw = (yield this[_getRaw](ctx));
          return this[_mapResponse](ctx, raw);
        }).bind(this));
      }
      [_getRaw](ctx) {
        return dart$.nullCheck(ctx.executor).doWhenOpened(T$.ListOfMapOfString$ObjectN(), dart$.fn(e => async.async(T$.ListOfMapOfString$ObjectN(), (function*() {
          try {
            return yield e.runSelect(ctx.sql, ctx.boundVariables);
          } catch (e$) {
            let e = dart$.getThrown(e$);
            let s = dart$.stackTrace(e$);
            if (core.Object.is(e)) {
              let foundTables = T$.LinkedHashSetOfString().new();
              for (let table of this[_queriedTables]()) {
                if (!foundTables.add(table.entityName)) {
                  this[_warnAboutDuplicate](e, s, table);
                }
              }
              dart$.rethrow(e$);
            } else
              throw e$;
          }
        }).bind(this)), T$.QueryExecutorToFutureOfListOfMapOfString$ObjectN()));
      }
      [_mapResponse](ctx, rows) {
        return rows[$map](query_builder.TypedResult, dart$.fn(row => {
          let readTables = new (T$.LinkedMapOfResultSetImplementation$dynamic()).new();
          let readColumns = new (T$.LinkedMapOfExpression$dynamic()).new();
          for (let table of this[_queriedTables](true)) {
            let prefix = table.aliasedName + ".";
            if (table.$columns[$any](dart$.fn(c => row[$_get](prefix + c.$name) != null, T$.GeneratedColumnTobool()))) {
              readTables[$_set](table, table.map(row, {tablePrefix: table.aliasedName}));
            }
          }
          for (let aliasedColumn of this[_columnAliases][$entries]) {
            let expr = aliasedColumn.key;
            let value = row[$_get](aliasedColumn.value);
            let type = expr.findType(ctx.typeSystem);
            readColumns[$_set](expr, type.mapFromDatabaseResponse(value));
          }
          return new query_builder.TypedResult.new(readTables, new query_builder.QueryRow.new(row, this.database), readColumns);
        }, T$.MapOfString$ObjectNToTypedResult()))[$toList]();
      }
      [_warnAboutDuplicate](cause, trace, table) {
        dart$.throw(new exceptions.DriftWrappedException.new({message: "This query contained the table " + table.entityName + " more than " + "once. Is this a typo? \n" + "If you need a join that includes the same table more than once, you " + "need to alias() at least one table. See https://drift.simonbinder.eu/queries/joins#aliases " + "for an example.", cause: cause, trace: trace}));
      }
    }
    (JoinedSelectStatement.new = function(database, table, _joins, distinct = false, _includeMainTableInResult = true, _includeJoinedTablesInResult = true) {
      this[_selectedColumns] = T$.JSArrayOfExpression().of([]);
      this[_columnAliases] = new (T$.LinkedMapOfExpression$String()).new();
      this[_joins$] = _joins;
      this[distinct$0] = distinct;
      this[_includeMainTableInResult$] = _includeMainTableInResult;
      this[_includeJoinedTablesInResult$] = _includeJoinedTablesInResult;
      JoinedSelectStatement.__proto__.new.call(this, database, table);
      ;
    }).prototype = JoinedSelectStatement.prototype;
    dart$.addTypeTests(JoinedSelectStatement);
    JoinedSelectStatement.prototype[_is_JoinedSelectStatement_default] = true;
    dart$.addTypeCaches(JoinedSelectStatement);
    JoinedSelectStatement[dart$.implements] = () => [query_builder.BaseSelectStatement];
    dart$.setMethodSignature(JoinedSelectStatement, () => ({
      __proto__: dart$.getMethods(JoinedSelectStatement.__proto__),
      [_queriedTables]: dart$.fnType(core.Iterable$(query_builder.ResultSetImplementation), [], [core.bool]),
      writeStartPart: dart$.fnType(dart$.void, [query_builder.GenerationContext]),
      where: dart$.fnType(dart$.void, [query_builder.Expression$(dart$.nullable(core.bool))]),
      orderBy: dart$.fnType(dart$.void, [core.List$(query_builder.OrderingTerm)]),
      addColumns: dart$.fnType(dart$.void, [core.Iterable$(query_builder.Expression)]),
      join: dart$.fnType(query_builder.JoinedSelectStatement$(dsl.HasResultSet, dart$.dynamic), [core.List$(query_builder.Join$(dsl.HasResultSet, dart$.dynamic))]),
      groupBy: dart$.fnType(dart$.void, [core.Iterable$(query_builder.Expression)], {having: dart$.nullable(query_builder.Expression$(dart$.nullable(core.bool)))}, {}),
      watch: dart$.fnType(async.Stream$(core.List$(query_builder.TypedResult)), []),
      get: dart$.fnType(async.Future$(core.List$(query_builder.TypedResult)), []),
      [_getRaw]: dart$.fnType(async.Future$(core.List$(core.Map$(core.String, dart$.nullable(core.Object)))), [query_builder.GenerationContext]),
      [_mapResponse]: dart$.fnType(core.List$(query_builder.TypedResult), [query_builder.GenerationContext, core.List$(core.Map$(core.String, dart$.nullable(core.Object)))]),
      [_warnAboutDuplicate]: dart$.fnType(dart$.void, [dart$.dynamic, core.StackTrace, query_builder.ResultSetImplementation])
    }));
    dart$.setGetterSignature(JoinedSelectStatement, () => ({
      __proto__: dart$.getGetters(JoinedSelectStatement.__proto__),
      watchedTables: core.Set$(query_builder.ResultSetImplementation),
      [_returnedColumnCount]: core.int
    }));
    dart$.setLibraryUri(JoinedSelectStatement, I[4]);
    dart$.setFieldSignature(JoinedSelectStatement, () => ({
      __proto__: dart$.getFields(JoinedSelectStatement.__proto__),
      distinct: dart$.finalFieldType(core.bool),
      [_includeMainTableInResult$]: dart$.finalFieldType(core.bool),
      [_includeJoinedTablesInResult$]: dart$.finalFieldType(core.bool),
      [_joins$]: dart$.finalFieldType(core.List$(query_builder.Join$(dsl.HasResultSet, dart$.dynamic))),
      [_selectedColumns]: dart$.finalFieldType(core.List$(query_builder.Expression)),
      [_columnAliases]: dart$.finalFieldType(core.Map$(query_builder.Expression, core.String))
    }));
    return JoinedSelectStatement;
  });
  query_builder.JoinedSelectStatement = query_builder.JoinedSelectStatement$();
  dart$.addTypeTests(query_builder.JoinedSelectStatement, _is_JoinedSelectStatement_default);
  const _is_DeleteStatement_default = Symbol('_is_DeleteStatement_default');
  query_builder.DeleteStatement$ = dart$.generic((T, D) => {
    var __t$InsertableOfD = () => (__t$InsertableOfD = dart$.constFn(data_class.Insertable$(D)))();
    const Query_SingleTableQueryMixin$36 = class Query_SingleTableQueryMixin extends query_builder.Query$(T, D) {};
    (Query_SingleTableQueryMixin$36.new = function(database, table) {
      Query_SingleTableQueryMixin$36.__proto__.new.call(this, database, table);
    }).prototype = Query_SingleTableQueryMixin$36.prototype;
    dart$.applyMixin(Query_SingleTableQueryMixin$36, query_builder.SingleTableQueryMixin$(T, D));
    class DeleteStatement extends Query_SingleTableQueryMixin$36 {
      static ['_#new#tearOff'](T, D, database, table) {
        return new (query_builder.DeleteStatement$(T, D)).new(database, table);
      }
      writeStartPart(ctx) {
        ctx.buffer.write("DELETE FROM " + query_builder['NameWithAlias|get#tableWithAlias'](this.table));
      }
      delete(entity) {
        __t$InsertableOfD().as(entity);
        if (!(this.whereExpr == null)) dart$.assertFailed("When deleting an entity, you may not use where(...)" + "as well. The where clause will be determined automatically", I[7], 23, 9, "whereExpr == null");
        query_builder['QueryTableExtensions|whereSamePrimaryKey'](T, D, this, entity);
        return this.go();
      }
      go() {
        return async.async(core.int, (function* go() {
          let ctx = this.constructQuery();
          return dart$.nullCheck(ctx.executor).doWhenOpened(core.int, dart$.fn(e => async.async(core.int, (function*() {
            let rows = (yield e.runDelete(ctx.sql, ctx.boundVariables));
            if (rows > 0) {
              this.database.notifyUpdates(T$.LinkedHashSetOfTableUpdate().from([runtime_api.TableUpdate.onTable(query_builder['QueryTableExtensions|get#_sourceTable'](T, D, this), {kind: runtime_api.UpdateKind.delete})]));
            }
            return rows;
          }).bind(this)), T$.QueryExecutorToFutureOfint()));
        }).bind(this));
      }
    }
    (DeleteStatement.new = function(database, table) {
      DeleteStatement.__proto__.new.call(this, database, table);
      ;
    }).prototype = DeleteStatement.prototype;
    dart$.addTypeTests(DeleteStatement);
    DeleteStatement.prototype[_is_DeleteStatement_default] = true;
    dart$.addTypeCaches(DeleteStatement);
    dart$.setMethodSignature(DeleteStatement, () => ({
      __proto__: dart$.getMethods(DeleteStatement.__proto__),
      writeStartPart: dart$.fnType(dart$.void, [query_builder.GenerationContext]),
      delete: dart$.fnType(async.Future$(core.int), [dart$.nullable(core.Object)]),
      go: dart$.fnType(async.Future$(core.int), [])
    }));
    dart$.setLibraryUri(DeleteStatement, I[4]);
    return DeleteStatement;
  });
  query_builder.DeleteStatement = query_builder.DeleteStatement$();
  dart$.addTypeTests(query_builder.DeleteStatement, _is_DeleteStatement_default);
  var database$0 = dart$.privateName(query_builder, "InsertStatement.database");
  var table$1 = dart$.privateName(query_builder, "InsertStatement.table");
  var _validateIntegrity = dart$.privateName(query_builder, "_validateIntegrity");
  var _usesExcludedTable = dart$.privateName(query_builder, "_usesExcludedTable");
  var _createInsertable = dart$.privateName(query_builder, "_createInsertable");
  var _where = dart$.privateName(query_builder, "_where");
  const _is_InsertStatement_default = Symbol('_is_InsertStatement_default');
  query_builder.InsertStatement$ = dart$.generic((T, D) => {
    var __t$UpsertClauseOfT$D = () => (__t$UpsertClauseOfT$D = dart$.constFn(query_builder.UpsertClause$(T, D)))();
    var __t$UpsertClauseNOfT$D = () => (__t$UpsertClauseNOfT$D = dart$.constFn(dart$.nullable(__t$UpsertClauseOfT$D())))();
    var __t$DoUpdateOfT$D = () => (__t$DoUpdateOfT$D = dart$.constFn(query_builder.DoUpdate$(T, D)))();
    var __t$TToInsertableOfD = () => (__t$TToInsertableOfD = dart$.constFn(dart$.fnType(__t$InsertableOfD(), [T])))();
    var __t$TAndTToWhere = () => (__t$TAndTToWhere = dart$.constFn(dart$.fnType(query_builder.Where, [T, T])))();
    var __t$TAndTToNWhere = () => (__t$TAndTToNWhere = dart$.constFn(dart$.nullable(__t$TAndTToWhere())))();
    var __t$DoUpdateOfT$DTovoid = () => (__t$DoUpdateOfT$DTovoid = dart$.constFn(dart$.fnType(dart$.void, [__t$DoUpdateOfT$D()])))();
    var __t$UpsertMultipleOfT$D = () => (__t$UpsertMultipleOfT$D = dart$.constFn(query_builder.UpsertMultiple$(T, D)))();
    var __t$InsertableOfD = () => (__t$InsertableOfD = dart$.constFn(data_class.Insertable$(D)))();
    var __t$FutureOfD = () => (__t$FutureOfD = dart$.constFn(async.Future$(D)))();
    var __t$QueryExecutorToFutureOfD = () => (__t$QueryExecutorToFutureOfD = dart$.constFn(dart$.fnType(__t$FutureOfD(), [executor$.QueryExecutor])))();
    class InsertStatement extends core.Object {
      get database() {
        return this[database$0];
      }
      set database(value) {
        super.database = value;
      }
      get table() {
        return this[table$1];
      }
      set table(value) {
        super.table = value;
      }
      static ['_#new#tearOff'](T, D, database, table) {
        return new (query_builder.InsertStatement$(T, D)).new(database, table);
      }
      insert(entity, opts) {
        __t$InsertableOfD().as(entity);
        let mode = opts && 'mode' in opts ? opts.mode : null;
        let onConflict = opts && 'onConflict' in opts ? opts.onConflict : null;
        __t$UpsertClauseNOfT$D().as(onConflict);
        return async.async(core.int, (function* insert() {
          let t12;
          let ctx = this.createContext(entity, (t12 = mode, t12 == null ? query_builder.InsertMode.insert : t12), {onConflict: onConflict});
          return yield this.database.doWhenOpened(core.int, dart$.fn(e => async.async(core.int, (function*() {
            let id = (yield e.runInsert(ctx.sql, ctx.boundVariables));
            this.database.notifyUpdates(T$.LinkedHashSetOfTableUpdate().from([runtime_api.TableUpdate.onTable(this.table, {kind: runtime_api.UpdateKind.insert})]));
            return id;
          }).bind(this)), T$.QueryExecutorToFutureOfint()));
        }).bind(this));
      }
      insertReturning(entity, opts) {
        __t$InsertableOfD().as(entity);
        let mode = opts && 'mode' in opts ? opts.mode : null;
        let onConflict = opts && 'onConflict' in opts ? opts.onConflict : null;
        __t$UpsertClauseNOfT$D().as(onConflict);
        return async.async(D, (function* insertReturning() {
          let t12;
          let ctx = this.createContext(entity, (t12 = mode, t12 == null ? query_builder.InsertMode.insert : t12), {onConflict: onConflict, returning: true});
          return this.database.doWhenOpened(D, dart$.fn(e => async.async(D, (function*() {
            let result = (yield e.runSelect(ctx.sql, ctx.boundVariables));
            this.database.notifyUpdates(T$.LinkedHashSetOfTableUpdate().from([runtime_api.TableUpdate.onTable(this.table, {kind: runtime_api.UpdateKind.insert})]));
            return this.table.map(result[$single]);
          }).bind(this)), __t$QueryExecutorToFutureOfD()));
        }).bind(this));
      }
      insertOnConflictUpdate(entity) {
        __t$InsertableOfD().as(entity);
        return this.insert(entity, {onConflict: new (__t$DoUpdateOfT$D()).new(dart$.fn(_ => entity, __t$TToInsertableOfD()))});
      }
      createContext(entry, mode, opts) {
        let t12;
        __t$InsertableOfD().as(entry);
        let onConflict = opts && 'onConflict' in opts ? opts.onConflict : null;
        __t$UpsertClauseNOfT$D().as(onConflict);
        let returning = opts && 'returning' in opts ? opts.returning : false;
        this[_validateIntegrity](entry);
        let rawValues = entry.toColumns(true);
        let map = new (T$.IdentityMapOfString$Expression()).new();
        for (let column of this.table.$columns) {
          let columnName = column.$name;
          if (rawValues[$containsKey](columnName)) {
            let value = dart$.nullCheck(rawValues[$_get](columnName));
            map[$_set](columnName, value);
          } else {
            if (column.clientDefault != null) {
              map[$_set](columnName, column[_evaluateClientDefault]());
            }
          }
        }
        let ctx = new query_builder.GenerationContext.fromDb(this.database);
        if (ctx.dialect === query_builder.SqlDialect.postgres && mode !== query_builder.InsertMode.insert && mode !== query_builder.InsertMode.insertOrIgnore) {
          dart$.throw(new core.ArgumentError.new(dart$.str(mode) + " not supported on postgres"));
        }
        t12 = ctx.buffer;
        (() => {
          t12.write(query_builder._insertKeywords[$_get](ctx.dialect === query_builder.SqlDialect.postgres ? query_builder.InsertMode.insert : mode));
          t12.write(" INTO ");
          t12.write(this.table.$tableName);
          t12.write(" ");
          return t12;
        })();
        if (map[$isEmpty]) {
          ctx.buffer.write("DEFAULT VALUES");
        } else {
          this.writeInsertable(ctx, map);
        }
        const writeDoUpdate = onConflict => {
          let t12;
          if (onConflict[_usesExcludedTable]) {
            ctx.hasMultipleTables = true;
          }
          let upsertInsertable = onConflict[_createInsertable](this.table);
          if (entry !== upsertInsertable) {
            this.table.validateIntegrity(upsertInsertable, {isInserting: false}).throwIfInvalid(upsertInsertable);
          }
          let updateSet = upsertInsertable.toColumns(true);
          ctx.buffer.write(" ON CONFLICT(");
          let conflictTarget = (t12 = onConflict.target, t12 == null ? this.table.$primaryKey[$toList]() : t12);
          if (conflictTarget[$isEmpty]) {
            dart$.throw(new core.ArgumentError.new("Table has no primary key, so a conflict target is needed."));
          }
          let first = true;
          for (let target of conflictTarget) {
            if (!first) ctx.buffer.write(", ");
            ctx.buffer.write(target.escapedName);
            first = false;
          }
          if (ctx.dialect === query_builder.SqlDialect.postgres && mode === query_builder.InsertMode.insertOrIgnore) {
            ctx.buffer.write(") DO NOTHING ");
          } else {
            ctx.buffer.write(") DO UPDATE SET ");
            first = true;
            for (let update of updateSet[$entries]) {
              let column = sqlite_keywords.escapeIfNeeded(update.key);
              if (!first) ctx.buffer.write(", ");
              ctx.buffer.write(column + " = ");
              update.value.writeInto(ctx);
              first = false;
            }
            if (__t$TAndTToNWhere().as(onConflict[_where]) != null) {
              ctx.writeWhitespace();
              let where = dart$.nullCheck(__t$TAndTToNWhere().as(onConflict[_where]))(this.table.asDslTable, this.table.createAlias("excluded").asDslTable);
              where.writeInto(ctx);
            }
          }
        };
        dart$.fn(writeDoUpdate, __t$DoUpdateOfT$DTovoid());
        if (__t$DoUpdateOfT$D().is(onConflict)) {
          writeDoUpdate(onConflict);
        } else if (__t$UpsertMultipleOfT$D().is(onConflict)) {
          onConflict.clauses[$forEach](writeDoUpdate);
        }
        if (returning) {
          ctx.buffer.write(" RETURNING *");
        } else if (ctx.dialect === query_builder.SqlDialect.postgres) {
          if (this.table.$primaryKey[$length] === 1) {
            let id = iterable_extensions['IterableExtension|get#firstOrNull'](query_builder.GeneratedColumn, this.table.$primaryKey);
            if (id != null && sql_types.IntType.is(id.type)) {
              ctx.buffer.write(" RETURNING " + id.name);
            }
          }
        }
        return ctx;
      }
      [_validateIntegrity](d) {
        if (d == null) {
          dart$.throw(new exceptions.InvalidDataException.new("Cannot write null row into " + this.table.$tableName));
        }
        this.table.validateIntegrity(d, {isInserting: true}).throwIfInvalid(d);
      }
      writeInsertable(ctx, map) {
        let t12;
        let columns = map[$keys][$map](core.String, C[51] || CT.C51);
        t12 = ctx.buffer;
        (() => {
          t12.write("(");
          t12.write(columns[$join](", "));
          t12.write(") ");
          t12.write("VALUES (");
          return t12;
        })();
        let first = true;
        for (let variable of map[$values]) {
          if (!first) {
            ctx.buffer.write(", ");
          }
          first = false;
          variable.writeInto(ctx);
        }
        ctx.buffer.write(")");
      }
    }
    (InsertStatement.new = function(database, table) {
      this[database$0] = database;
      this[table$1] = table;
      ;
    }).prototype = InsertStatement.prototype;
    dart$.addTypeTests(InsertStatement);
    InsertStatement.prototype[_is_InsertStatement_default] = true;
    dart$.addTypeCaches(InsertStatement);
    dart$.setMethodSignature(InsertStatement, () => ({
      __proto__: dart$.getMethods(InsertStatement.__proto__),
      insert: dart$.fnType(async.Future$(core.int), [dart$.nullable(core.Object)], {mode: dart$.nullable(query_builder.InsertMode), onConflict: dart$.nullable(core.Object)}, {}),
      insertReturning: dart$.fnType(async.Future$(D), [dart$.nullable(core.Object)], {mode: dart$.nullable(query_builder.InsertMode), onConflict: dart$.nullable(core.Object)}, {}),
      insertOnConflictUpdate: dart$.fnType(async.Future$(core.int), [dart$.nullable(core.Object)]),
      createContext: dart$.fnType(query_builder.GenerationContext, [dart$.nullable(core.Object), query_builder.InsertMode], {onConflict: dart$.nullable(core.Object), returning: core.bool}, {}),
      [_validateIntegrity]: dart$.fnType(dart$.void, [dart$.nullable(data_class.Insertable$(D))]),
      writeInsertable: dart$.fnType(dart$.void, [query_builder.GenerationContext, core.Map$(core.String, query_builder.Expression)])
    }));
    dart$.setLibraryUri(InsertStatement, I[4]);
    dart$.setFieldSignature(InsertStatement, () => ({
      __proto__: dart$.getFields(InsertStatement.__proto__),
      database: dart$.finalFieldType(runtime_api.DatabaseConnectionUser),
      table: dart$.finalFieldType(query_builder.TableInfo$(T, D))
    }));
    return InsertStatement;
  });
  query_builder.InsertStatement = query_builder.InsertStatement$();
  dart$.addTypeTests(query_builder.InsertStatement, _is_InsertStatement_default);
  query_builder.InsertMode = class InsertMode extends core._Enum {
    toString() {
      return "InsertMode." + this[_name];
    }
  };
  (query_builder.InsertMode.new = function(index, name) {
    query_builder.InsertMode.__proto__.new.call(this, index, name);
    ;
  }).prototype = query_builder.InsertMode.prototype;
  dart$.addTypeTests(query_builder.InsertMode);
  dart$.addTypeCaches(query_builder.InsertMode);
  dart$.setLibraryUri(query_builder.InsertMode, I[4]);
  dart$.setStaticFieldSignature(query_builder.InsertMode, () => ['values', 'insert', 'replace', 'insertOrReplace', 'insertOrRollback', 'insertOrAbort', 'insertOrFail', 'insertOrIgnore']);
  dart$.defineExtensionMethods(query_builder.InsertMode, ['toString']);
  dart$.defineLazy(query_builder.InsertMode, {
    /*query_builder.InsertMode.values*/get values() {
      return C[52] || CT.C52;
    },
    /*query_builder.InsertMode.insert*/get insert() {
      return C[53] || CT.C53;
    },
    /*query_builder.InsertMode.replace*/get replace() {
      return C[54] || CT.C54;
    },
    /*query_builder.InsertMode.insertOrReplace*/get insertOrReplace() {
      return C[55] || CT.C55;
    },
    /*query_builder.InsertMode.insertOrRollback*/get insertOrRollback() {
      return C[56] || CT.C56;
    },
    /*query_builder.InsertMode.insertOrAbort*/get insertOrAbort() {
      return C[57] || CT.C57;
    },
    /*query_builder.InsertMode.insertOrFail*/get insertOrFail() {
      return C[58] || CT.C58;
    },
    /*query_builder.InsertMode.insertOrIgnore*/get insertOrIgnore() {
      return C[59] || CT.C59;
    }
  }, false);
  const _is_UpsertClause_default = Symbol('_is_UpsertClause_default');
  query_builder.UpsertClause$ = dart$.generic((T, D) => {
    class UpsertClause extends core.Object {}
    (UpsertClause.new = function() {
      ;
    }).prototype = UpsertClause.prototype;
    dart$.addTypeTests(UpsertClause);
    UpsertClause.prototype[_is_UpsertClause_default] = true;
    dart$.addTypeCaches(UpsertClause);
    dart$.setLibraryUri(UpsertClause, I[4]);
    return UpsertClause;
  });
  query_builder.UpsertClause = query_builder.UpsertClause$();
  dart$.addTypeTests(query_builder.UpsertClause, _is_UpsertClause_default);
  var target$ = dart$.privateName(query_builder, "DoUpdate.target");
  var _creator = dart$.privateName(query_builder, "_creator");
  const _is_DoUpdate_default = Symbol('_is_DoUpdate_default');
  query_builder.DoUpdate$ = dart$.generic((T, D) => {
    var __t$TAndTToInsertableOfD = () => (__t$TAndTToInsertableOfD = dart$.constFn(dart$.fnType(__t$InsertableOfD(), [T, T])))();
    var __t$TAndTToWhere = () => (__t$TAndTToWhere = dart$.constFn(dart$.fnType(query_builder.Where, [T, T])))();
    var __t$TableInfoOfT$D = () => (__t$TableInfoOfT$D = dart$.constFn(query_builder.TableInfo$(T, D)))();
    var __t$InsertableOfD = () => (__t$InsertableOfD = dart$.constFn(data_class.Insertable$(D)))();
    class DoUpdate extends query_builder.UpsertClause$(T, D) {
      get target() {
        return this[target$];
      }
      set target(value) {
        super.target = value;
      }
      static ['_#new#tearOff'](T, D, update, opts) {
        let target = opts && 'target' in opts ? opts.target : null;
        let where = opts && 'where' in opts ? opts.where : null;
        return new (query_builder.DoUpdate$(T, D)).new(update, {target: target, where: where});
      }
      static ['_#withExcluded#tearOff'](T, D, update, opts) {
        let target = opts && 'target' in opts ? opts.target : null;
        let where = opts && 'where' in opts ? opts.where : null;
        return new (query_builder.DoUpdate$(T, D)).withExcluded(update, {target: target, where: where});
      }
      [_createInsertable](table) {
        let t15, t14;
        __t$TableInfoOfT$D().as(table);
        t14 = table.asDslTable;
        t15 = table.createAlias("excluded").asDslTable;
        return this[_creator](t14, t15);
      }
    }
    (DoUpdate.new = function(update, opts) {
      let target = opts && 'target' in opts ? opts.target : null;
      let where = opts && 'where' in opts ? opts.where : null;
      this[target$] = target;
      this[_creator] = dart$.fn((old, _) => update(old), __t$TAndTToInsertableOfD());
      this[_where] = where == null ? null : dart$.fn((old, _) => new query_builder.Where.new(where(old)), __t$TAndTToWhere());
      this[_usesExcludedTable] = false;
      ;
    }).prototype = DoUpdate.prototype;
    (DoUpdate.withExcluded = function(update, opts) {
      let target = opts && 'target' in opts ? opts.target : null;
      let where = opts && 'where' in opts ? opts.where : null;
      this[target$] = target;
      this[_creator] = update;
      this[_usesExcludedTable] = true;
      this[_where] = where == null ? null : dart$.fn((old, excluded) => new query_builder.Where.new(where(old, excluded)), __t$TAndTToWhere());
      ;
    }).prototype = DoUpdate.prototype;
    dart$.addTypeTests(DoUpdate);
    DoUpdate.prototype[_is_DoUpdate_default] = true;
    dart$.addTypeCaches(DoUpdate);
    dart$.setMethodSignature(DoUpdate, () => ({
      __proto__: dart$.getMethods(DoUpdate.__proto__),
      [_createInsertable]: dart$.fnType(data_class.Insertable$(D), [dart$.nullable(core.Object)])
    }));
    dart$.setLibraryUri(DoUpdate, I[4]);
    dart$.setFieldSignature(DoUpdate, () => ({
      __proto__: dart$.getFields(DoUpdate.__proto__),
      [_creator]: dart$.finalFieldType(dart$.fnType(data_class.Insertable$(D), [T, T])),
      [_where]: dart$.finalFieldType(dart$.nullable(dart$.fnType(query_builder.Where, [T, T]))),
      [_usesExcludedTable]: dart$.finalFieldType(core.bool),
      target: dart$.finalFieldType(dart$.nullable(core.List$(dsl.Column)))
    }));
    return DoUpdate;
  });
  query_builder.DoUpdate = query_builder.DoUpdate$();
  dart$.addTypeTests(query_builder.DoUpdate, _is_DoUpdate_default);
  var clauses$ = dart$.privateName(query_builder, "UpsertMultiple.clauses");
  const _is_UpsertMultiple_default = Symbol('_is_UpsertMultiple_default');
  query_builder.UpsertMultiple$ = dart$.generic((T, D) => {
    class UpsertMultiple extends query_builder.UpsertClause$(T, D) {
      get clauses() {
        return this[clauses$];
      }
      set clauses(value) {
        super.clauses = value;
      }
      static ['_#new#tearOff'](T, D, clauses) {
        return new (query_builder.UpsertMultiple$(T, D)).new(clauses);
      }
    }
    (UpsertMultiple.new = function(clauses) {
      this[clauses$] = clauses;
      ;
    }).prototype = UpsertMultiple.prototype;
    dart$.addTypeTests(UpsertMultiple);
    UpsertMultiple.prototype[_is_UpsertMultiple_default] = true;
    dart$.addTypeCaches(UpsertMultiple);
    dart$.setLibraryUri(UpsertMultiple, I[4]);
    dart$.setFieldSignature(UpsertMultiple, () => ({
      __proto__: dart$.getFields(UpsertMultiple.__proto__),
      clauses: dart$.finalFieldType(core.List$(query_builder.DoUpdate$(T, D)))
    }));
    return UpsertMultiple;
  });
  query_builder.UpsertMultiple = query_builder.UpsertMultiple$();
  dart$.addTypeTests(query_builder.UpsertMultiple, _is_UpsertMultiple_default);
  const _is_MultiSelectable_default = Symbol('_is_MultiSelectable_default');
  query_builder.MultiSelectable$ = dart$.generic(T => {
    class MultiSelectable extends core.Object {}
    (MultiSelectable.new = function() {
      ;
    }).prototype = MultiSelectable.prototype;
    dart$.addTypeTests(MultiSelectable);
    MultiSelectable.prototype[_is_MultiSelectable_default] = true;
    dart$.addTypeCaches(MultiSelectable);
    dart$.setLibraryUri(MultiSelectable, I[4]);
    return MultiSelectable;
  });
  query_builder.MultiSelectable = query_builder.MultiSelectable$();
  dart$.addTypeTests(query_builder.MultiSelectable, _is_MultiSelectable_default);
  const _is_SingleSelectable_default = Symbol('_is_SingleSelectable_default');
  query_builder.SingleSelectable$ = dart$.generic(T => {
    class SingleSelectable extends core.Object {}
    (SingleSelectable.new = function() {
      ;
    }).prototype = SingleSelectable.prototype;
    dart$.addTypeTests(SingleSelectable);
    SingleSelectable.prototype[_is_SingleSelectable_default] = true;
    dart$.addTypeCaches(SingleSelectable);
    dart$.setLibraryUri(SingleSelectable, I[4]);
    return SingleSelectable;
  });
  query_builder.SingleSelectable = query_builder.SingleSelectable$();
  dart$.addTypeTests(query_builder.SingleSelectable, _is_SingleSelectable_default);
  const _is_SingleOrNullSelectable_default = Symbol('_is_SingleOrNullSelectable_default');
  query_builder.SingleOrNullSelectable$ = dart$.generic(T => {
    class SingleOrNullSelectable extends core.Object {}
    (SingleOrNullSelectable.new = function() {
      ;
    }).prototype = SingleOrNullSelectable.prototype;
    dart$.addTypeTests(SingleOrNullSelectable);
    SingleOrNullSelectable.prototype[_is_SingleOrNullSelectable_default] = true;
    dart$.addTypeCaches(SingleOrNullSelectable);
    dart$.setLibraryUri(SingleOrNullSelectable, I[4]);
    return SingleOrNullSelectable;
  });
  query_builder.SingleOrNullSelectable = query_builder.SingleOrNullSelectable$();
  dart$.addTypeTests(query_builder.SingleOrNullSelectable, _is_SingleOrNullSelectable_default);
  var _source$ = dart$.privateName(query_builder, "_source");
  var _mapper$ = dart$.privateName(query_builder, "_mapper");
  var _mapResults = dart$.privateName(query_builder, "_mapResults");
  const _is__MappedSelectable_default = Symbol('_is__MappedSelectable_default');
  query_builder._MappedSelectable$ = dart$.generic((S, T) => {
    var __t$ListOfS = () => (__t$ListOfS = dart$.constFn(core.List$(S)))();
    var __t$ListOfT = () => (__t$ListOfT = dart$.constFn(core.List$(T)))();
    class _MappedSelectable extends query_builder.Selectable$(T) {
      static ['_#new#tearOff'](S, T, _source, _mapper) {
        return new (query_builder._MappedSelectable$(S, T)).new(_source, _mapper);
      }
      get() {
        return this[_source$].get().then(__t$ListOfT(), dart$.bind(this, _mapResults));
      }
      watch() {
        return this[_source$].watch().map(__t$ListOfT(), dart$.bind(this, _mapResults));
      }
      [_mapResults](results) {
        __t$ListOfS().as(results);
        return results[$map](T, this[_mapper$])[$toList]();
      }
    }
    (_MappedSelectable.new = function(_source, _mapper) {
      this[_source$] = _source;
      this[_mapper$] = _mapper;
      ;
    }).prototype = _MappedSelectable.prototype;
    dart$.addTypeTests(_MappedSelectable);
    _MappedSelectable.prototype[_is__MappedSelectable_default] = true;
    dart$.addTypeCaches(_MappedSelectable);
    dart$.setMethodSignature(_MappedSelectable, () => ({
      __proto__: dart$.getMethods(_MappedSelectable.__proto__),
      get: dart$.fnType(async.Future$(core.List$(T)), []),
      watch: dart$.fnType(async.Stream$(core.List$(T)), []),
      [_mapResults]: dart$.fnType(core.List$(T), [dart$.nullable(core.Object)])
    }));
    dart$.setLibraryUri(_MappedSelectable, I[4]);
    dart$.setFieldSignature(_MappedSelectable, () => ({
      __proto__: dart$.getFields(_MappedSelectable.__proto__),
      [_source$]: dart$.finalFieldType(query_builder.Selectable$(S)),
      [_mapper$]: dart$.finalFieldType(dart$.fnType(T, [S]))
    }));
    return _MappedSelectable;
  });
  query_builder._MappedSelectable = query_builder._MappedSelectable$();
  dart$.addTypeTests(query_builder._MappedSelectable, _is__MappedSelectable_default);
  var __UpdateStatement__updatedFields = dart$.privateName(query_builder, "_#UpdateStatement#_updatedFields");
  var _updatedFields = dart$.privateName(query_builder, "_updatedFields");
  var _performQuery = dart$.privateName(query_builder, "_performQuery");
  const _is_UpdateStatement_default = Symbol('_is_UpdateStatement_default');
  query_builder.UpdateStatement$ = dart$.generic((T, D) => {
    var __t$InsertableOfD = () => (__t$InsertableOfD = dart$.constFn(data_class.Insertable$(D)))();
    const Query_SingleTableQueryMixin$36 = class Query_SingleTableQueryMixin extends query_builder.Query$(T, D) {};
    (Query_SingleTableQueryMixin$36.new = function(database, table) {
      Query_SingleTableQueryMixin$36.__proto__.new.call(this, database, table);
    }).prototype = Query_SingleTableQueryMixin$36.prototype;
    dart$.applyMixin(Query_SingleTableQueryMixin$36, query_builder.SingleTableQueryMixin$(T, D));
    class UpdateStatement extends Query_SingleTableQueryMixin$36 {
      static ['_#new#tearOff'](T, D, database, table) {
        return new (query_builder.UpdateStatement$(T, D)).new(database, table);
      }
      get [_updatedFields]() {
        let t14;
        t14 = this[__UpdateStatement__updatedFields];
        return t14 == null ? dart$.throw(new _internal.LateError.fieldNI("_updatedFields")) : t14;
      }
      set [_updatedFields](library$32package$58drift$47src$47runtime$47query_builder$47statements$47update$46dart$58$58_updatedFields$35param) {
        this[__UpdateStatement__updatedFields] = library$32package$58drift$47src$47runtime$47query_builder$47statements$47update$46dart$58$58_updatedFields$35param;
      }
      writeStartPart(ctx) {
        ctx.buffer.write("UPDATE " + query_builder['NameWithAlias|get#tableWithAlias'](this.table) + " SET ");
        let first = true;
        this[_updatedFields][$forEach](dart$.fn((columnName, variable) => {
          let t14;
          if (!first) {
            ctx.buffer.write(", ");
          } else {
            first = false;
          }
          t14 = ctx.buffer;
          (() => {
            t14.write(sqlite_keywords.escapeIfNeeded(columnName));
            t14.write(" = ");
            return t14;
          })();
          variable.writeInto(ctx);
        }, T$.StringAndExpressionTovoid()));
      }
      [_performQuery]() {
        return async.async(core.int, (function* _performQuery() {
          let ctx = this.constructQuery();
          let rows = (yield dart$.nullCheck(ctx.executor).doWhenOpened(core.int, dart$.fn(e => async.async(core.int, function*() {
            return yield e.runUpdate(ctx.sql, ctx.boundVariables);
          }), T$.QueryExecutorToFutureOfint())));
          if (rows > 0) {
            this.database.notifyUpdates(T$.LinkedHashSetOfTableUpdate().from([runtime_api.TableUpdate.onTable(query_builder['QueryTableExtensions|get#_sourceTable'](T, D, this), {kind: runtime_api.UpdateKind.update})]));
          }
          return rows;
        }).bind(this));
      }
      write(entity, opts) {
        __t$InsertableOfD().as(entity);
        let dontExecute = opts && 'dontExecute' in opts ? opts.dontExecute : false;
        return async.async(core.int, (function* write() {
          let t14;
          query_builder['QueryTableExtensions|get#_sourceTable'](T, D, this).validateIntegrity(entity).throwIfInvalid(entity);
          this[_updatedFields] = (t14 = entity.toColumns(true), (() => {
            t14[$remove](dart$.fn((_, value) => value == null, T$.dynamicAnddynamicTobool()));
            return t14;
          })());
          if (this[_updatedFields][$isEmpty]) {
            return T$.FutureOfint().value(0);
          }
          if (dontExecute) return -1;
          return yield this[_performQuery]();
        }).bind(this));
      }
      replace(entity, opts) {
        __t$InsertableOfD().as(entity);
        let dontExecute = opts && 'dontExecute' in opts ? opts.dontExecute : false;
        return async.async(core.bool, (function* replace() {
          let columns = entity.toColumns(false);
          query_builder['QueryTableExtensions|get#_sourceTable'](T, D, this).validateIntegrity(entity, {isInserting: true}).throwIfInvalid(entity);
          if (!(this.whereExpr == null)) dart$.assertFailed("When using replace on an update statement, you may not use where(...)" + "as well. The where clause will be determined automatically", I[8], 109, 9, "whereExpr == null");
          query_builder['QueryTableExtensions|whereSamePrimaryKey'](T, D, this, entity);
          this[_updatedFields] = T$.MapOfString$Variable().is(columns) ? T$.LinkedHashMapOfString$Expression().of(columns) : columns;
          let primaryKeys = query_builder['QueryTableExtensions|get#_sourceTable'](T, D, this).$primaryKey[$map](core.String, dart$.fn(c => c.$name, T$.GeneratedColumnToString()));
          for (let column of this.table.$columns) {
            if (column.defaultValue != null && !this[_updatedFields][$containsKey](column.$name)) {
              this[_updatedFields][$_set](column.$name, dart$.nullCheck(column.defaultValue));
            }
          }
          this[_updatedFields][$removeWhere](dart$.fn((key, _) => primaryKeys[$contains](key), T$.StringAndExpressionTobool()));
          if (dontExecute) return false;
          let updatedRows = (yield this[_performQuery]());
          return updatedRows !== 0;
        }).bind(this));
      }
    }
    (UpdateStatement.new = function(database, table) {
      this[__UpdateStatement__updatedFields] = null;
      UpdateStatement.__proto__.new.call(this, database, table);
      ;
    }).prototype = UpdateStatement.prototype;
    dart$.addTypeTests(UpdateStatement);
    UpdateStatement.prototype[_is_UpdateStatement_default] = true;
    dart$.addTypeCaches(UpdateStatement);
    dart$.setMethodSignature(UpdateStatement, () => ({
      __proto__: dart$.getMethods(UpdateStatement.__proto__),
      writeStartPart: dart$.fnType(dart$.void, [query_builder.GenerationContext]),
      [_performQuery]: dart$.fnType(async.Future$(core.int), []),
      write: dart$.fnType(async.Future$(core.int), [dart$.nullable(core.Object)], {dontExecute: core.bool}, {}),
      replace: dart$.fnType(async.Future$(core.bool), [dart$.nullable(core.Object)], {dontExecute: core.bool}, {})
    }));
    dart$.setGetterSignature(UpdateStatement, () => ({
      __proto__: dart$.getGetters(UpdateStatement.__proto__),
      [_updatedFields]: core.Map$(core.String, query_builder.Expression)
    }));
    dart$.setSetterSignature(UpdateStatement, () => ({
      __proto__: dart$.getSetters(UpdateStatement.__proto__),
      [_updatedFields]: core.Map$(core.String, query_builder.Expression)
    }));
    dart$.setLibraryUri(UpdateStatement, I[4]);
    dart$.setFieldSignature(UpdateStatement, () => ({
      __proto__: dart$.getFields(UpdateStatement.__proto__),
      [__UpdateStatement__updatedFields]: dart$.fieldType(dart$.nullable(core.Map$(core.String, query_builder.Expression)))
    }));
    return UpdateStatement;
  });
  query_builder.UpdateStatement = query_builder.UpdateStatement$();
  dart$.addTypeTests(query_builder.UpdateStatement, _is_UpdateStatement_default);
  var hasMultipleTables = dart$.privateName(query_builder, "GenerationContext.hasMultipleTables");
  var explicitVariableIndex = dart$.privateName(query_builder, "GenerationContext.explicitVariableIndex");
  var generatingForView = dart$.privateName(query_builder, "GenerationContext.generatingForView");
  var watchedTables = dart$.privateName(query_builder, "GenerationContext.watchedTables");
  var typeSystem$ = dart$.privateName(query_builder, "GenerationContext.typeSystem");
  var dialect$ = dart$.privateName(query_builder, "GenerationContext.dialect");
  var executor$0 = dart$.privateName(query_builder, "GenerationContext.executor");
  var introducedVariables = dart$.privateName(query_builder, "GenerationContext.introducedVariables");
  var buffer = dart$.privateName(query_builder, "GenerationContext.buffer");
  var _boundVariables = dart$.privateName(query_builder, "_boundVariables");
  query_builder.GenerationContext = class GenerationContext extends core.Object {
    get hasMultipleTables() {
      return this[hasMultipleTables];
    }
    set hasMultipleTables(value) {
      this[hasMultipleTables] = value;
    }
    get explicitVariableIndex() {
      return this[explicitVariableIndex];
    }
    set explicitVariableIndex(value) {
      this[explicitVariableIndex] = value;
    }
    get generatingForView() {
      return this[generatingForView];
    }
    set generatingForView(value) {
      this[generatingForView] = value;
    }
    get watchedTables() {
      return this[watchedTables];
    }
    set watchedTables(value) {
      super.watchedTables = value;
    }
    get typeSystem() {
      return this[typeSystem$];
    }
    set typeSystem(value) {
      super.typeSystem = value;
    }
    get dialect() {
      return this[dialect$];
    }
    set dialect(value) {
      super.dialect = value;
    }
    get executor() {
      return this[executor$0];
    }
    set executor(value) {
      super.executor = value;
    }
    get introducedVariables() {
      return this[introducedVariables];
    }
    set introducedVariables(value) {
      super.introducedVariables = value;
    }
    get buffer() {
      return this[buffer];
    }
    set buffer(value) {
      super.buffer = value;
    }
    get boundVariables() {
      return this[_boundVariables];
    }
    get amountOfVariables() {
      return this.boundVariables[$length];
    }
    get sql() {
      return this.buffer.toString();
    }
    static ['_#fromDb#tearOff'](executor) {
      return new query_builder.GenerationContext.fromDb(executor);
    }
    static ['_#new#tearOff'](typeSystem, executor, opts) {
      let dialect = opts && 'dialect' in opts ? opts.dialect : C[10] || CT.C10;
      return new query_builder.GenerationContext.new(typeSystem, executor, {dialect: dialect});
    }
    introduceVariable(v, value) {
      this.introducedVariables[$add](v);
      this[_boundVariables][$add](value);
    }
    writeWhitespace() {
      return this.buffer.write(" ");
    }
  };
  (query_builder.GenerationContext.fromDb = function(executor) {
    let t14, t14$, t15, t14$0, t14$1;
    this[hasMultipleTables] = false;
    this[explicitVariableIndex] = null;
    this[generatingForView] = null;
    this[watchedTables] = T$.JSArrayOfResultSetImplementation().of([]);
    this[_boundVariables] = [];
    this[introducedVariables] = T$.JSArrayOfVariable().of([]);
    this[buffer] = new core.StringBuffer.new();
    this[executor$0] = executor;
    this[typeSystem$] = (t14$ = (t14 = executor, t14 == null ? null : t14.typeSystem), t14$ == null ? sql_types.SqlTypeSystem.defaultInstance : t14$);
    this[dialect$] = (t14$1 = (t14$0 = executor, t14$0 == null ? null : (t15 = t14$0.executor, t15 == null ? null : t15.dialect)), t14$1 == null ? query_builder.SqlDialect.sqlite : t14$1);
    ;
  }).prototype = query_builder.GenerationContext.prototype;
  (query_builder.GenerationContext.new = function(typeSystem, executor, opts) {
    let dialect = opts && 'dialect' in opts ? opts.dialect : C[10] || CT.C10;
    this[hasMultipleTables] = false;
    this[explicitVariableIndex] = null;
    this[generatingForView] = null;
    this[watchedTables] = T$.JSArrayOfResultSetImplementation().of([]);
    this[_boundVariables] = [];
    this[introducedVariables] = T$.JSArrayOfVariable().of([]);
    this[buffer] = new core.StringBuffer.new();
    this[typeSystem$] = typeSystem;
    this[executor$0] = executor;
    this[dialect$] = dialect;
    ;
  }).prototype = query_builder.GenerationContext.prototype;
  dart$.addTypeTests(query_builder.GenerationContext);
  dart$.addTypeCaches(query_builder.GenerationContext);
  dart$.setMethodSignature(query_builder.GenerationContext, () => ({
    __proto__: dart$.getMethods(query_builder.GenerationContext.__proto__),
    introduceVariable: dart$.fnType(dart$.void, [query_builder.Variable, dart$.dynamic]),
    writeWhitespace: dart$.fnType(dart$.void, [])
  }));
  dart$.setGetterSignature(query_builder.GenerationContext, () => ({
    __proto__: dart$.getGetters(query_builder.GenerationContext.__proto__),
    boundVariables: core.List,
    amountOfVariables: core.int,
    sql: core.String
  }));
  dart$.setLibraryUri(query_builder.GenerationContext, I[4]);
  dart$.setFieldSignature(query_builder.GenerationContext, () => ({
    __proto__: dart$.getFields(query_builder.GenerationContext.__proto__),
    hasMultipleTables: dart$.fieldType(core.bool),
    explicitVariableIndex: dart$.fieldType(dart$.nullable(core.int)),
    generatingForView: dart$.fieldType(dart$.nullable(core.String)),
    watchedTables: dart$.finalFieldType(core.List$(query_builder.ResultSetImplementation)),
    typeSystem: dart$.finalFieldType(sql_types.SqlTypeSystem),
    dialect: dart$.finalFieldType(query_builder.SqlDialect),
    executor: dart$.finalFieldType(dart$.nullable(runtime_api.DatabaseConnectionUser)),
    [_boundVariables]: dart$.finalFieldType(core.List),
    introducedVariables: dart$.finalFieldType(core.List$(query_builder.Variable)),
    buffer: dart$.finalFieldType(core.StringBuffer)
  }));
  var onCreate$ = dart$.privateName(query_builder, "MigrationStrategy.onCreate");
  var onUpgrade$ = dart$.privateName(query_builder, "MigrationStrategy.onUpgrade");
  var beforeOpen$ = dart$.privateName(query_builder, "MigrationStrategy.beforeOpen");
  query_builder.MigrationStrategy = class MigrationStrategy extends core.Object {
    get onCreate() {
      return this[onCreate$];
    }
    set onCreate(value) {
      super.onCreate = value;
    }
    get onUpgrade() {
      return this[onUpgrade$];
    }
    set onUpgrade(value) {
      super.onUpgrade = value;
    }
    get beforeOpen() {
      return this[beforeOpen$];
    }
    set beforeOpen(value) {
      super.beforeOpen = value;
    }
    static ['_#new#tearOff'](opts) {
      let onCreate = opts && 'onCreate' in opts ? opts.onCreate : C[60] || CT.C60;
      let onUpgrade = opts && 'onUpgrade' in opts ? opts.onUpgrade : C[61] || CT.C61;
      let beforeOpen = opts && 'beforeOpen' in opts ? opts.beforeOpen : null;
      return new query_builder.MigrationStrategy.new({onCreate: onCreate, onUpgrade: onUpgrade, beforeOpen: beforeOpen});
    }
  };
  (query_builder.MigrationStrategy.new = function(opts) {
    let onCreate = opts && 'onCreate' in opts ? opts.onCreate : C[60] || CT.C60;
    let onUpgrade = opts && 'onUpgrade' in opts ? opts.onUpgrade : C[61] || CT.C61;
    let beforeOpen = opts && 'beforeOpen' in opts ? opts.beforeOpen : null;
    this[onCreate$] = onCreate;
    this[onUpgrade$] = onUpgrade;
    this[beforeOpen$] = beforeOpen;
    ;
  }).prototype = query_builder.MigrationStrategy.prototype;
  dart$.addTypeTests(query_builder.MigrationStrategy);
  dart$.addTypeCaches(query_builder.MigrationStrategy);
  dart$.setLibraryUri(query_builder.MigrationStrategy, I[4]);
  dart$.setFieldSignature(query_builder.MigrationStrategy, () => ({
    __proto__: dart$.getFields(query_builder.MigrationStrategy.__proto__),
    onCreate: dart$.finalFieldType(dart$.fnType(async.Future$(dart$.void), [query_builder.Migrator])),
    onUpgrade: dart$.finalFieldType(dart$.fnType(async.Future$(dart$.void), [query_builder.Migrator, core.int, core.int])),
    beforeOpen: dart$.finalFieldType(dart$.nullable(dart$.fnType(async.Future$(dart$.void), [query_builder.OpeningDetails])))
  }));
  var _issueCustomQuery = dart$.privateName(query_builder, "_issueCustomQuery");
  var _createContext = dart$.privateName(query_builder, "_createContext");
  var _writeCreateVirtual = dart$.privateName(query_builder, "_writeCreateVirtual");
  var _writeCreateTable = dart$.privateName(query_builder, "_writeCreateTable");
  query_builder.Migrator = class Migrator extends core.Object {
    static ['_#new#tearOff'](_db) {
      return new query_builder.Migrator.new(_db);
    }
    createAllTables() {
      return async.async(dart$.void, (function* createAllTables() {
        for (let table of this[_db$].allTables) {
          yield this.createTable(table);
        }
      }).bind(this));
    }
    createAll() {
      return async.async(dart$.void, (function* createAll() {
        for (let entity of this[_db$].allSchemaEntities) {
          if (T$.TableInfoOfTable$dynamic().is(entity)) {
            yield this.createTable(entity);
          } else if (query_builder.Trigger.is(entity)) {
            yield this.createTrigger(entity);
          } else if (query_builder.Index.is(entity)) {
            yield this.createIndex(entity);
          } else if (query_builder.OnCreateQuery.is(entity)) {
            yield this[_issueCustomQuery](entity.sql, C[62] || CT.C62);
          } else if (T$.ViewInfoOfHasResultSet$dynamic().is(entity)) {
            yield this.createView(entity);
          } else {
            dart$.throw(new core.AssertionError.new("Unknown entity: " + dart$.str(entity)));
          }
        }
      }).bind(this));
    }
    recreateAllViews() {
      return async.async(dart$.void, (function* recreateAllViews() {
        for (let entity of this[_db$].allSchemaEntities) {
          if (T$.ViewInfoOfHasResultSet$dynamic().is(entity)) {
            yield this[_issueCustomQuery]("DROP VIEW IF EXISTS " + entity.entityName, C[62] || CT.C62);
            yield this.createView(entity);
          }
        }
      }).bind(this));
    }
    [_createContext]() {
      return new query_builder.GenerationContext.fromDb(this[_db$]);
    }
    createTable(table) {
      return async.async(dart$.void, (function* createTable() {
        let context = this[_createContext]();
        if (T$.VirtualTableInfoOfTable$dynamic().is(table)) {
          this[_writeCreateVirtual](table, context);
        } else {
          this[_writeCreateTable](table, context);
        }
        return this[_issueCustomQuery](context.sql, context.boundVariables);
      }).bind(this));
    }
    alterTable(migration) {
      return async.async(dart$.void, (function* alterTable() {
        let foreignKeysEnabled = (yield this[_db$].customSelect("PRAGMA foreign_keys").getSingle()).readBool("foreign_keys");
        if (foreignKeysEnabled) {
          yield this[_db$].customStatement("PRAGMA foreign_keys = OFF;");
        }
        let table = migration.affectedTable;
        let tableName = table.actualTableName;
        yield this[_db$].transaction(core.Null, dart$.fn(() => async.async(core.Null, (function*() {
          let t14;
          let schemaQuery = (yield this[_db$].customSelect("SELECT type, name, sql FROM sqlite_master WHERE tbl_name = ?;", {variables: T$.JSArrayOfVariable().of([new (T$.VariableOfString()).new(tableName)])}).get());
          let createAffected = T$.JSArrayOfString().of([]);
          for (let row of schemaQuery) {
            let type = row.readString("type");
            let sql = row.read(T$.StringN(), "sql");
            let name = row.readString("name");
            if (sql == null) {
              if (!name[$startsWith]("sqlite_autoindex")) dart$.assertFailed(null, I[9], 171, 18, "name.startsWith('sqlite_autoindex')");
              continue;
            }
            switch (type) {
              case "trigger":
              case "view":
              case "index":
                {
                  createAffected[$add](sql);
                  break;
                }
            }
          }
          let temporaryName = "tmp_for_copy_" + tableName;
          let temporaryTable = table.createAlias(temporaryName);
          yield this.createTable(temporaryTable);
          let context = this[_createContext]();
          let expressionsForSelect = T$.JSArrayOfExpression().of([]);
          context.buffer.write("INSERT INTO " + temporaryName + " (");
          let first = true;
          for (let column of table.$columns) {
            let transformer = migration.columnTransformer[$_get](column);
            if (transformer != null || !migration.newColumns[$contains](column)) {
              let expression = (t14 = migration.columnTransformer[$_get](column), t14 == null ? column : t14);
              expressionsForSelect[$add](expression);
              if (!first) context.buffer.write(", ");
              context.buffer.write(column.escapedName);
              first = false;
            }
          }
          context.buffer.write(") SELECT ");
          first = true;
          for (let expr of expressionsForSelect) {
            if (!first) context.buffer.write(", ");
            expr.writeInto(context);
            first = false;
          }
          context.buffer.write(" FROM " + sqlite_keywords.escapeIfNeeded(tableName) + ";");
          yield this[_issueCustomQuery](context.sql, context.introducedVariables);
          yield this[_issueCustomQuery]("DROP TABLE " + sqlite_keywords.escapeIfNeeded(tableName));
          yield this[_issueCustomQuery]("ALTER TABLE " + sqlite_keywords.escapeIfNeeded(temporaryName) + " " + "RENAME TO " + sqlite_keywords.escapeIfNeeded(tableName));
          for (let stmt of createAffected) {
            yield this[_issueCustomQuery](stmt);
          }
        }).bind(this)), T$.VoidToFutureOfNull()));
        if (foreignKeysEnabled) {
          yield this[_db$].customStatement("PRAGMA foreign_keys = ON;");
        }
      }).bind(this));
    }
    [_writeCreateTable](table, context) {
      let t14;
      context.buffer.write("CREATE TABLE IF NOT EXISTS " + sqlite_keywords.escapeIfNeeded(table.$tableName, context.dialect) + " (");
      let hasAutoIncrement = false;
      for (let i = 0; i < table.$columns[$length]; i = i + 1) {
        let column = table.$columns[$_get](i);
        if (column.hasAutoIncrement) {
          hasAutoIncrement = true;
        }
        column.writeColumnDefinition(context);
        if (i < table.$columns[$length] - 1) context.buffer.write(", ");
      }
      let dslTable = table.asDslTable;
      let hasPrimaryKey = table.$primaryKey[$isNotEmpty];
      let dontWritePk = dslTable.dontWriteConstraints || hasAutoIncrement;
      if (hasPrimaryKey && !dontWritePk) {
        context.buffer.write(", PRIMARY KEY (");
        let pkList = table.$primaryKey[$toList]({growable: false});
        for (let i = 0; i < pkList[$length]; i = i + 1) {
          let column = pkList[$_get](i);
          context.buffer.write(sqlite_keywords.escapeIfNeeded(column.$name));
          if (i !== pkList[$length] - 1) context.buffer.write(", ");
        }
        context.buffer.write(")");
      }
      let constraints = dslTable.customConstraints;
      for (let i = 0; i < constraints[$length]; i = i + 1) {
        t14 = context.buffer;
        (() => {
          t14.write(", ");
          t14.write(constraints[$_get](i));
          return t14;
        })();
      }
      context.buffer.write(")");
      if (dslTable.withoutRowId) {
        context.buffer.write(" WITHOUT ROWID");
      }
      if (dslTable.isStrict) {
        context.buffer.write(" STRICT");
      }
      context.buffer.write(";");
    }
    [_writeCreateVirtual](table, context) {
      let t14;
      t14 = context.buffer;
      (() => {
        t14.write("CREATE VIRTUAL TABLE IF NOT EXISTS ");
        t14.write(sqlite_keywords.escapeIfNeeded(table.$tableName));
        t14.write(" USING ");
        t14.write(table.moduleAndArgs);
        t14.write(";");
        return t14;
      })();
    }
    createTrigger(trigger) {
      return this[_issueCustomQuery](trigger.createTriggerStmt, C[62] || CT.C62);
    }
    createIndex(index) {
      return this[_issueCustomQuery](index.createIndexStmt, C[62] || CT.C62);
    }
    createView(view) {
      return async.async(dart$.void, (function* createView() {
        let stmt = view.createViewStmt;
        if (stmt != null) {
          yield this[_issueCustomQuery](stmt, C[62] || CT.C62);
        } else if (view.query != null) {
          let context = new query_builder.GenerationContext.fromDb(this[_db$]);
          context.generatingForView = view.entityName;
          context.buffer.write("CREATE VIEW " + view.entityName + " AS ");
          dart$.nullCheck(view.query).writeInto(context);
          yield this[_issueCustomQuery](context.sql, C[62] || CT.C62);
        }
      }).bind(this));
    }
    drop(entity) {
      return async.async(dart$.void, (function* drop() {
        let escapedName = sqlite_keywords.escapeIfNeeded(entity.entityName);
        let kind = null;
        if (T$.TableInfoOfTable$dynamic().is(entity)) {
          kind = "TABLE";
        } else if (query_builder.Trigger.is(entity)) {
          kind = "TRIGGER";
        } else if (query_builder.Index.is(entity)) {
          kind = "INDEX";
        } else {
          return;
        }
        yield this[_issueCustomQuery]("DROP " + kind + " IF EXISTS " + escapedName + ";");
      }).bind(this));
    }
    deleteTable(name) {
      return async.async(dart$.void, (function* deleteTable() {
        return this[_issueCustomQuery]("DROP TABLE IF EXISTS " + name + ";");
      }).bind(this));
    }
    addColumn(table, column) {
      return async.async(dart$.void, (function* addColumn() {
        let context = this[_createContext]();
        context.buffer.write("ALTER TABLE " + sqlite_keywords.escapeIfNeeded(table.$tableName) + " ADD COLUMN ");
        column.writeColumnDefinition(context);
        context.buffer.write(";");
        return this[_issueCustomQuery](context.sql);
      }).bind(this));
    }
    renameColumn(table, oldName, column) {
      return async.async(dart$.void, (function* renameColumn() {
        let t14;
        let context = this[_createContext]();
        t14 = context.buffer;
        (() => {
          t14.write("ALTER TABLE " + sqlite_keywords.escapeIfNeeded(table.$tableName) + " ");
          t14.write("RENAME COLUMN " + sqlite_keywords.escapeIfNeeded(oldName) + " ");
          t14.write("TO " + column.escapedName + ";");
          return t14;
        })();
        return this[_issueCustomQuery](context.sql);
      }).bind(this));
    }
    renameTable(table, oldName) {
      return async.async(dart$.void, (function* renameTable() {
        let context = this[_createContext]();
        context.buffer.write("ALTER TABLE " + sqlite_keywords.escapeIfNeeded(oldName) + " " + "RENAME TO " + sqlite_keywords.escapeIfNeeded(table.actualTableName) + ";");
        return this[_issueCustomQuery](context.sql);
      }).bind(this));
    }
    issueCustomQuery(sql, args = null) {
      return this[_issueCustomQuery](sql, args);
    }
    [_issueCustomQuery](sql, args = null) {
      return this[_db$].customStatement(sql, args);
    }
  };
  (query_builder.Migrator.new = function(_db) {
    this[_db$] = _db;
    ;
  }).prototype = query_builder.Migrator.prototype;
  dart$.addTypeTests(query_builder.Migrator);
  dart$.addTypeCaches(query_builder.Migrator);
  dart$.setMethodSignature(query_builder.Migrator, () => ({
    __proto__: dart$.getMethods(query_builder.Migrator.__proto__),
    createAllTables: dart$.fnType(async.Future$(dart$.void), []),
    createAll: dart$.fnType(async.Future$(dart$.void), []),
    recreateAllViews: dart$.fnType(async.Future$(dart$.void), []),
    [_createContext]: dart$.fnType(query_builder.GenerationContext, []),
    createTable: dart$.fnType(async.Future$(dart$.void), [query_builder.TableInfo$(dsl.Table, dart$.dynamic)]),
    alterTable: dart$.fnType(async.Future$(dart$.void), [query_builder.TableMigration]),
    [_writeCreateTable]: dart$.fnType(dart$.void, [query_builder.TableInfo$(dsl.Table, dart$.dynamic), query_builder.GenerationContext]),
    [_writeCreateVirtual]: dart$.fnType(dart$.void, [query_builder.VirtualTableInfo$(dsl.Table, dart$.dynamic), query_builder.GenerationContext]),
    createTrigger: dart$.fnType(async.Future$(dart$.void), [query_builder.Trigger]),
    createIndex: dart$.fnType(async.Future$(dart$.void), [query_builder.Index]),
    createView: dart$.fnType(async.Future$(dart$.void), [query_builder.ViewInfo$(dsl.HasResultSet, dart$.dynamic)]),
    drop: dart$.fnType(async.Future$(dart$.void), [query_builder.DatabaseSchemaEntity]),
    deleteTable: dart$.fnType(async.Future$(dart$.void), [core.String]),
    addColumn: dart$.fnType(async.Future$(dart$.void), [query_builder.TableInfo$(dsl.Table, dart$.dynamic), query_builder.GeneratedColumn]),
    renameColumn: dart$.fnType(async.Future$(dart$.void), [query_builder.TableInfo$(dsl.Table, dart$.dynamic), core.String, query_builder.GeneratedColumn]),
    renameTable: dart$.fnType(async.Future$(dart$.void), [query_builder.TableInfo$(dsl.Table, dart$.dynamic), core.String]),
    issueCustomQuery: dart$.fnType(async.Future$(dart$.void), [core.String], [dart$.nullable(core.List)]),
    [_issueCustomQuery]: dart$.fnType(async.Future$(dart$.void), [core.String], [dart$.nullable(core.List)])
  }));
  dart$.setLibraryUri(query_builder.Migrator, I[4]);
  dart$.setFieldSignature(query_builder.Migrator, () => ({
    __proto__: dart$.getFields(query_builder.Migrator.__proto__),
    [_db$]: dart$.finalFieldType(runtime_api.GeneratedDatabase)
  }));
  var versionBefore$ = dart$.privateName(query_builder, "OpeningDetails.versionBefore");
  var versionNow$ = dart$.privateName(query_builder, "OpeningDetails.versionNow");
  query_builder.OpeningDetails = class OpeningDetails extends core.Object {
    get versionBefore() {
      return this[versionBefore$];
    }
    set versionBefore(value) {
      super.versionBefore = value;
    }
    get versionNow() {
      return this[versionNow$];
    }
    set versionNow(value) {
      super.versionNow = value;
    }
    get wasCreated() {
      return this.versionBefore == null;
    }
    get hadUpgrade() {
      return !this.wasCreated && this.versionBefore !== this.versionNow;
    }
    static ['_#new#tearOff'](versionBefore, versionNow) {
      return new query_builder.OpeningDetails.new(versionBefore, versionNow);
    }
  };
  (query_builder.OpeningDetails.new = function(versionBefore, versionNow) {
    this[versionBefore$] = versionBefore;
    this[versionNow$] = versionNow;
    if (!(versionBefore !== 0)) dart$.assertFailed(null, I[9], 444, 16, "versionBefore != 0");
    ;
  }).prototype = query_builder.OpeningDetails.prototype;
  dart$.addTypeTests(query_builder.OpeningDetails);
  dart$.addTypeCaches(query_builder.OpeningDetails);
  dart$.setGetterSignature(query_builder.OpeningDetails, () => ({
    __proto__: dart$.getGetters(query_builder.OpeningDetails.__proto__),
    wasCreated: core.bool,
    hadUpgrade: core.bool
  }));
  dart$.setLibraryUri(query_builder.OpeningDetails, I[4]);
  dart$.setFieldSignature(query_builder.OpeningDetails, () => ({
    __proto__: dart$.getFields(query_builder.OpeningDetails.__proto__),
    versionBefore: dart$.finalFieldType(dart$.nullable(core.int)),
    versionNow: dart$.finalFieldType(core.int)
  }));
  var affectedTable$ = dart$.privateName(query_builder, "TableMigration.affectedTable");
  var newColumns$ = dart$.privateName(query_builder, "TableMigration.newColumns");
  var columnTransformer$ = dart$.privateName(query_builder, "TableMigration.columnTransformer");
  query_builder.TableMigration = class TableMigration extends core.Object {
    get affectedTable() {
      return this[affectedTable$];
    }
    set affectedTable(value) {
      super.affectedTable = value;
    }
    get newColumns() {
      return this[newColumns$];
    }
    set newColumns(value) {
      super.newColumns = value;
    }
    get columnTransformer() {
      return this[columnTransformer$];
    }
    set columnTransformer(value) {
      super.columnTransformer = value;
    }
    static ['_#new#tearOff'](affectedTable, opts) {
      let columnTransformer = opts && 'columnTransformer' in opts ? opts.columnTransformer : C[63] || CT.C63;
      let newColumns = opts && 'newColumns' in opts ? opts.newColumns : C[64] || CT.C64;
      return new query_builder.TableMigration.new(affectedTable, {columnTransformer: columnTransformer, newColumns: newColumns});
    }
  };
  (query_builder.TableMigration.new = function(affectedTable, opts) {
    let columnTransformer = opts && 'columnTransformer' in opts ? opts.columnTransformer : C[63] || CT.C63;
    let newColumns = opts && 'newColumns' in opts ? opts.newColumns : C[64] || CT.C64;
    this[affectedTable$] = affectedTable;
    this[columnTransformer$] = columnTransformer;
    this[newColumns$] = newColumns;
    let problematicNewColumns = T$.JSArrayOfString().of([]);
    for (let column of this.newColumns) {
      let isRequired = column.requiredDuringInsert || column.clientDefault != null;
      if (isRequired && !this.columnTransformer[$containsKey](column)) {
        problematicNewColumns[$add](column.$name);
      }
    }
    if (problematicNewColumns[$isNotEmpty]) {
      dart$.throw(new core.ArgumentError.new("Some of the newColumns don't have a default value and aren't included " + "in columnTransformer: " + problematicNewColumns[$join](", ") + ". \n" + "To add columns, make sure that they have a default value or write an " + "expression to use in the columnTransformer map."));
    }
  }).prototype = query_builder.TableMigration.prototype;
  dart$.addTypeTests(query_builder.TableMigration);
  dart$.addTypeCaches(query_builder.TableMigration);
  dart$.setLibraryUri(query_builder.TableMigration, I[4]);
  dart$.setFieldSignature(query_builder.TableMigration, () => ({
    __proto__: dart$.getFields(query_builder.TableMigration.__proto__),
    affectedTable: dart$.finalFieldType(query_builder.TableInfo$(dsl.Table, dart$.dynamic)),
    newColumns: dart$.finalFieldType(core.List$(query_builder.GeneratedColumn)),
    columnTransformer: dart$.finalFieldType(core.Map$(query_builder.GeneratedColumn, query_builder.Expression))
  }));
  query_builder.innerJoin = function innerJoin(other, on, opts) {
    let useColumns = opts && 'useColumns' in opts ? opts.useColumns : null;
    return new (T$.JoinOfHasResultSet$dynamic()).__(query_builder._JoinType.inner, other, on, {includeInResult: useColumns});
  };
  query_builder.leftOuterJoin = function leftOuterJoin(other, on, opts) {
    let useColumns = opts && 'useColumns' in opts ? opts.useColumns : null;
    return new (T$.JoinOfHasResultSet$dynamic()).__(query_builder._JoinType.leftOuter, other, on, {includeInResult: useColumns});
  };
  query_builder.crossJoin = function crossJoin(other, opts) {
    let useColumns = opts && 'useColumns' in opts ? opts.useColumns : null;
    return new (T$.JoinOfHasResultSet$dynamic()).__(query_builder._JoinType.cross, other, null, {includeInResult: useColumns});
  };
  query_builder.countAll = function countAll(opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    return new (T$._AggregateExpressionOfint()).new("COUNT", C[65] || CT.C65, {filter: filter});
  };
  query_builder['BaseAggregate|count'] = function BaseAggregate$124count(DT, $this, opts) {
    let distinct = opts && 'distinct' in opts ? opts.distinct : null;
    let filter = opts && 'filter' in opts ? opts.filter : null;
    return new (T$._AggregateExpressionOfint()).new("COUNT", $this, {filter: filter, distinct: distinct});
  };
  query_builder['BaseAggregate|get#count'] = function BaseAggregate$124get$35count(DT, $this) {
    return dart$.fn(opts => {
      let distinct = opts && 'distinct' in opts ? opts.distinct : null;
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return query_builder['BaseAggregate|count'](DT, $this, {distinct: distinct, filter: filter});
    }, T$.__ToExpressionOfint());
  };
  query_builder['BaseAggregate|groupConcat'] = function BaseAggregate$124groupConcat(DT, $this, opts) {
    let separator = opts && 'separator' in opts ? opts.separator : ",";
    if (separator === ",") {
      return new (T$._AggregateExpressionOfString()).new("GROUP_CONCAT", $this);
    } else {
      return new (T$.FunctionCallExpressionOfString()).new("GROUP_CONCAT", T$.JSArrayOfExpression().of([$this, query_builder.Variable.withString(separator)]));
    }
  };
  query_builder['BaseAggregate|get#groupConcat'] = function BaseAggregate$124get$35groupConcat(DT, $this) {
    return dart$.fn(opts => {
      let separator = opts && 'separator' in opts ? opts.separator : ",";
      return query_builder['BaseAggregate|groupConcat'](DT, $this, {separator: separator});
    }, T$.__ToExpressionOfString());
  };
  query_builder['ArithmeticAggregates|get#avg'] = function ArithmeticAggregates$124get$35avg(DT, $this) {
    return dart$.fn(opts => {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return query_builder['ArithmeticAggregates|avg'](DT, $this, {filter: filter});
    }, T$.__ToExpressionOfdoubleN());
  };
  query_builder['ArithmeticAggregates|avg'] = function ArithmeticAggregates$124avg(DT, $this, opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    return new (T$._AggregateExpressionOfdoubleN()).new("AVG", $this, {filter: filter});
  };
  query_builder['ArithmeticAggregates|max'] = function ArithmeticAggregates$124max(DT, $this, opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    return new (query_builder._AggregateExpression$(dart$.nullable(DT))).new("MAX", $this, {filter: filter});
  };
  query_builder['ArithmeticAggregates|get#max'] = function ArithmeticAggregates$124get$35max(DT, $this) {
    return dart$.fn(opts => {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return query_builder['ArithmeticAggregates|max'](DT, $this, {filter: filter});
    }, dart$.fnType(query_builder.Expression$(dart$.nullable(DT)), [], {filter: T$.ExpressionNOfboolN()}, {}));
  };
  query_builder['ArithmeticAggregates|min'] = function ArithmeticAggregates$124min(DT, $this, opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    return new (query_builder._AggregateExpression$(dart$.nullable(DT))).new("MIN", $this, {filter: filter});
  };
  query_builder['ArithmeticAggregates|get#min'] = function ArithmeticAggregates$124get$35min(DT, $this) {
    return dart$.fn(opts => {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return query_builder['ArithmeticAggregates|min'](DT, $this, {filter: filter});
    }, dart$.fnType(query_builder.Expression$(dart$.nullable(DT)), [], {filter: T$.ExpressionNOfboolN()}, {}));
  };
  query_builder['ArithmeticAggregates|sum'] = function ArithmeticAggregates$124sum(DT, $this, opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    return new (query_builder._AggregateExpression$(dart$.nullable(DT))).new("SUM", $this, {filter: filter});
  };
  query_builder['ArithmeticAggregates|get#sum'] = function ArithmeticAggregates$124get$35sum(DT, $this) {
    return dart$.fn(opts => {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return query_builder['ArithmeticAggregates|sum'](DT, $this, {filter: filter});
    }, dart$.fnType(query_builder.Expression$(dart$.nullable(DT)), [], {filter: T$.ExpressionNOfboolN()}, {}));
  };
  query_builder['ArithmeticAggregates|total'] = function ArithmeticAggregates$124total(DT, $this, opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    return new (T$._AggregateExpressionOfdoubleN()).new("TOTAL", $this, {filter: filter});
  };
  query_builder['ArithmeticAggregates|get#total'] = function ArithmeticAggregates$124get$35total(DT, $this) {
    return dart$.fn(opts => {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return query_builder['ArithmeticAggregates|total'](DT, $this, {filter: filter});
    }, T$.__ToExpressionOfdoubleN());
  };
  query_builder['DateTimeAggregate|avg'] = function DateTimeAggregate$124avg($this, opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    return query_builder['ArithmeticExpr|roundToInt'](T$.doubleN(), query_builder['ArithmeticAggregates|avg'](core.int, query_builder['DateTimeExpressions|get#secondsSinceEpoch']($this), {filter: filter})).dartCast(core.DateTime);
  };
  query_builder['DateTimeAggregate|get#avg'] = function DateTimeAggregate$124get$35avg($this) {
    return dart$.fn(opts => {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return query_builder['DateTimeAggregate|avg']($this, {filter: filter});
    }, T$.__ToExpressionOfDateTime());
  };
  query_builder['DateTimeAggregate|max'] = function DateTimeAggregate$124max($this, opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    return new (T$._AggregateExpressionOfDateTime()).new("MAX", $this, {filter: filter});
  };
  query_builder['DateTimeAggregate|get#max'] = function DateTimeAggregate$124get$35max($this) {
    return dart$.fn(opts => {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return query_builder['DateTimeAggregate|max']($this, {filter: filter});
    }, T$.__ToExpressionOfDateTime());
  };
  query_builder['DateTimeAggregate|get#min'] = function DateTimeAggregate$124get$35min($this) {
    return dart$.fn(opts => {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return query_builder['DateTimeAggregate|min']($this, {filter: filter});
    }, T$.__ToExpressionOfDateTime());
  };
  query_builder['DateTimeAggregate|min'] = function DateTimeAggregate$124min($this, opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    return new (T$._AggregateExpressionOfDateTime()).new("MIN", $this, {filter: filter});
  };
  query_builder['ArithmeticExpr|+'] = function ArithmeticExpr$124$43(DT, $this, other) {
    return new (query_builder._BaseInfixOperator$(DT)).new($this, "+", other, {precedence: query_builder.Precedence.plusMinus});
  };
  query_builder['ArithmeticExpr|-'] = function ArithmeticExpr$124$45(DT, $this, other) {
    return new (query_builder._BaseInfixOperator$(DT)).new($this, "-", other, {precedence: query_builder.Precedence.plusMinus});
  };
  query_builder['ArithmeticExpr|unary-'] = function ArithmeticExpr$124unary$45(DT, $this) {
    return new (query_builder._UnaryMinus$(DT)).new($this);
  };
  query_builder['ArithmeticExpr|*'] = function ArithmeticExpr$124$42(DT, $this, other) {
    return new (query_builder._BaseInfixOperator$(DT)).new($this, "*", other, {precedence: query_builder.Precedence.mulDivide});
  };
  query_builder['ArithmeticExpr|/'] = function ArithmeticExpr$124$47(DT, $this, other) {
    return new (query_builder._BaseInfixOperator$(DT)).new($this, "/", other, {precedence: query_builder.Precedence.mulDivide});
  };
  query_builder['ArithmeticExpr|abs'] = function ArithmeticExpr$124abs(DT, $this) {
    return new (query_builder.FunctionCallExpression$(DT)).new("abs", T$.JSArrayOfExpression().of([$this]));
  };
  query_builder['ArithmeticExpr|get#abs'] = function ArithmeticExpr$124get$35abs(DT, $this) {
    return dart$.fn(() => query_builder['ArithmeticExpr|abs'](DT, $this), dart$.fnType(query_builder.Expression$(DT), []));
  };
  query_builder['ArithmeticExpr|roundToInt'] = function ArithmeticExpr$124roundToInt(DT, $this) {
    return new query_builder.FunctionCallExpression.new("round", T$.JSArrayOfExpression().of([$this])).cast(core.int);
  };
  query_builder['ArithmeticExpr|get#roundToInt'] = function ArithmeticExpr$124get$35roundToInt(DT, $this) {
    return dart$.fn(() => query_builder['ArithmeticExpr|roundToInt'](DT, $this), T$.VoidToExpressionOfintN());
  };
  query_builder['BooleanExpressionOperators|not'] = function BooleanExpressionOperators$124not($this) {
    return new query_builder._NotExpression.new($this);
  };
  query_builder['BooleanExpressionOperators|get#not'] = function BooleanExpressionOperators$124get$35not($this) {
    return dart$.fn(() => query_builder['BooleanExpressionOperators|not']($this), T$.VoidToExpressionOfboolN());
  };
  query_builder['BooleanExpressionOperators|&'] = function BooleanExpressionOperators$124$38($this, other) {
    return new (T$._BaseInfixOperatorOfboolN()).new($this, "AND", other, {precedence: query_builder.Precedence.and});
  };
  query_builder['BooleanExpressionOperators||'] = function BooleanExpressionOperators$124$124($this, other) {
    return new (T$._BaseInfixOperatorOfboolN()).new($this, "OR", other, {precedence: query_builder.Precedence.or});
  };
  query_builder['ComparableExpr|isBiggerThan'] = function ComparableExpr$124isBiggerThan(DT, $this, other) {
    return new query_builder._Comparison.new($this, query_builder._ComparisonOperator.more, other);
  };
  query_builder['ComparableExpr|get#isBiggerThan'] = function ComparableExpr$124get$35isBiggerThan(DT, $this) {
    return dart$.fn(other => query_builder['ComparableExpr|isBiggerThan'](DT, $this, other), dart$.fnType(T$.ExpressionOfboolN(), [query_builder.Expression$(DT)]));
  };
  query_builder['ComparableExpr|isBiggerThanValue'] = function ComparableExpr$124isBiggerThanValue(DT, $this, other) {
    return query_builder['ComparableExpr|isBiggerThan'](DT, $this, new (query_builder.Variable$(DT)).new(other));
  };
  query_builder['ComparableExpr|get#isBiggerThanValue'] = function ComparableExpr$124get$35isBiggerThanValue(DT, $this) {
    return dart$.fn(other => query_builder['ComparableExpr|isBiggerThanValue'](DT, $this, other), dart$.fnType(T$.ExpressionOfboolN(), [DT]));
  };
  query_builder['ComparableExpr|isBiggerOrEqual'] = function ComparableExpr$124isBiggerOrEqual(DT, $this, other) {
    return new query_builder._Comparison.new($this, query_builder._ComparisonOperator.moreOrEqual, other);
  };
  query_builder['ComparableExpr|get#isBiggerOrEqual'] = function ComparableExpr$124get$35isBiggerOrEqual(DT, $this) {
    return dart$.fn(other => query_builder['ComparableExpr|isBiggerOrEqual'](DT, $this, other), dart$.fnType(T$.ExpressionOfboolN(), [query_builder.Expression$(DT)]));
  };
  query_builder['ComparableExpr|isBiggerOrEqualValue'] = function ComparableExpr$124isBiggerOrEqualValue(DT, $this, other) {
    return query_builder['ComparableExpr|isBiggerOrEqual'](DT, $this, new (query_builder.Variable$(DT)).new(other));
  };
  query_builder['ComparableExpr|get#isBiggerOrEqualValue'] = function ComparableExpr$124get$35isBiggerOrEqualValue(DT, $this) {
    return dart$.fn(other => query_builder['ComparableExpr|isBiggerOrEqualValue'](DT, $this, other), dart$.fnType(T$.ExpressionOfboolN(), [DT]));
  };
  query_builder['ComparableExpr|get#isSmallerThan'] = function ComparableExpr$124get$35isSmallerThan(DT, $this) {
    return dart$.fn(other => query_builder['ComparableExpr|isSmallerThan'](DT, $this, other), dart$.fnType(T$.ExpressionOfboolN(), [query_builder.Expression$(DT)]));
  };
  query_builder['ComparableExpr|isSmallerThan'] = function ComparableExpr$124isSmallerThan(DT, $this, other) {
    return new query_builder._Comparison.new($this, query_builder._ComparisonOperator.less, other);
  };
  query_builder['ComparableExpr|get#isSmallerThanValue'] = function ComparableExpr$124get$35isSmallerThanValue(DT, $this) {
    return dart$.fn(other => query_builder['ComparableExpr|isSmallerThanValue'](DT, $this, other), dart$.fnType(T$.ExpressionOfboolN(), [DT]));
  };
  query_builder['ComparableExpr|isSmallerThanValue'] = function ComparableExpr$124isSmallerThanValue(DT, $this, other) {
    return query_builder['ComparableExpr|isSmallerThan'](DT, $this, new (query_builder.Variable$(DT)).new(other));
  };
  query_builder['ComparableExpr|isSmallerOrEqual'] = function ComparableExpr$124isSmallerOrEqual(DT, $this, other) {
    return new query_builder._Comparison.new($this, query_builder._ComparisonOperator.lessOrEqual, other);
  };
  query_builder['ComparableExpr|get#isSmallerOrEqual'] = function ComparableExpr$124get$35isSmallerOrEqual(DT, $this) {
    return dart$.fn(other => query_builder['ComparableExpr|isSmallerOrEqual'](DT, $this, other), dart$.fnType(T$.ExpressionOfboolN(), [query_builder.Expression$(DT)]));
  };
  query_builder['ComparableExpr|isSmallerOrEqualValue'] = function ComparableExpr$124isSmallerOrEqualValue(DT, $this, other) {
    return query_builder['ComparableExpr|isSmallerOrEqual'](DT, $this, new (query_builder.Variable$(DT)).new(other));
  };
  query_builder['ComparableExpr|get#isSmallerOrEqualValue'] = function ComparableExpr$124get$35isSmallerOrEqualValue(DT, $this) {
    return dart$.fn(other => query_builder['ComparableExpr|isSmallerOrEqualValue'](DT, $this, other), dart$.fnType(T$.ExpressionOfboolN(), [DT]));
  };
  query_builder['ComparableExpr|isBetween'] = function ComparableExpr$124isBetween(DT, $this, lower, higher, opts) {
    let not = opts && 'not' in opts ? opts.not : false;
    return new query_builder._BetweenExpression.new({target: $this, lower: lower, higher: higher, not: not});
  };
  query_builder['ComparableExpr|get#isBetween'] = function ComparableExpr$124get$35isBetween(DT, $this) {
    return dart$.fn((lower, higher, opts) => {
      let not = opts && 'not' in opts ? opts.not : false;
      return query_builder['ComparableExpr|isBetween'](DT, $this, lower, higher, {not: not});
    }, dart$.fnType(T$.ExpressionOfboolN(), [query_builder.Expression$(DT), query_builder.Expression$(DT)], {not: core.bool}, {}));
  };
  query_builder['ComparableExpr|isBetweenValues'] = function ComparableExpr$124isBetweenValues(DT, $this, lower, higher, opts) {
    let not = opts && 'not' in opts ? opts.not : false;
    return new query_builder._BetweenExpression.new({target: $this, lower: new (query_builder.Variable$(DT)).new(lower), higher: new (query_builder.Variable$(DT)).new(higher), not: not});
  };
  query_builder['ComparableExpr|get#isBetweenValues'] = function ComparableExpr$124get$35isBetweenValues(DT, $this) {
    return dart$.fn((lower, higher, opts) => {
      let not = opts && 'not' in opts ? opts.not : false;
      return query_builder['ComparableExpr|isBetweenValues'](DT, $this, lower, higher, {not: not});
    }, dart$.fnType(T$.ExpressionOfboolN(), [DT, DT], {not: core.bool}, {}));
  };
  query_builder['DateTimeExpressions|get#year'] = function DateTimeExpressions$124get$35year($this) {
    return new query_builder._StrftimeSingleFieldExpression.new("%Y", $this);
  };
  query_builder['DateTimeExpressions|get#month'] = function DateTimeExpressions$124get$35month($this) {
    return new query_builder._StrftimeSingleFieldExpression.new("%m", $this);
  };
  query_builder['DateTimeExpressions|get#day'] = function DateTimeExpressions$124get$35day($this) {
    return new query_builder._StrftimeSingleFieldExpression.new("%d", $this);
  };
  query_builder['DateTimeExpressions|get#hour'] = function DateTimeExpressions$124get$35hour($this) {
    return new query_builder._StrftimeSingleFieldExpression.new("%H", $this);
  };
  query_builder['DateTimeExpressions|get#minute'] = function DateTimeExpressions$124get$35minute($this) {
    return new query_builder._StrftimeSingleFieldExpression.new("%M", $this);
  };
  query_builder['DateTimeExpressions|get#second'] = function DateTimeExpressions$124get$35second($this) {
    return new query_builder._StrftimeSingleFieldExpression.new("%S", $this);
  };
  query_builder['DateTimeExpressions|get#date'] = function DateTimeExpressions$124get$35date($this) {
    return new (T$.FunctionCallExpressionOfStringN()).new("DATE", T$.JSArrayOfExpression().of([$this, C[66] || CT.C66]));
  };
  query_builder['DateTimeExpressions|get#secondsSinceEpoch'] = function DateTimeExpressions$124get$35secondsSinceEpoch($this) {
    return $this.dartCast(core.int);
  };
  query_builder['DateTimeExpressions|+'] = function DateTimeExpressions$124$43($this, duration) {
    return new (T$._BaseInfixOperatorOfDateTime()).new($this, "+", new (T$.VariableOfint()).new(duration.inSeconds), {precedence: query_builder.Precedence.plusMinus});
  };
  query_builder['DateTimeExpressions|-'] = function DateTimeExpressions$124$45($this, duration) {
    return new (T$._BaseInfixOperatorOfDateTime()).new($this, "-", new (T$.VariableOfint()).new(duration.inSeconds), {precedence: query_builder.Precedence.plusMinus});
  };
  query_builder.existsQuery = function existsQuery(select) {
    return new query_builder._ExistsExpression.new(select, false);
  };
  query_builder.notExistsQuery = function notExistsQuery(select) {
    return new query_builder._ExistsExpression.new(select, true);
  };
  query_builder._checkSubquery = function _checkSubquery(statement) {
    let columns = statement[_returnedColumnCount];
    if (columns !== 1) {
      dart$.throw(new core.ArgumentError.value(statement, "statement", "Must return exactly one column (actually returns " + dart$.str(columns) + ")"));
    }
  };
  query_builder.subqueryExpression = function subqueryExpression(R, statement) {
    query_builder._checkSubquery(statement);
    return new (query_builder._SubqueryExpression$(R)).new(statement);
  };
  query_builder.isNull = function isNull(inner) {
    return new query_builder._NullCheck.new(inner, true);
  };
  query_builder.isNotNull = function isNotNull(inner) {
    return new query_builder._NullCheck.new(inner, false);
  };
  query_builder['SqlIsNull|isNull'] = function SqlIsNull$124isNull($this) {
    return new query_builder._NullCheck.new($this, true);
  };
  query_builder['SqlIsNull|get#isNull'] = function SqlIsNull$124get$35isNull($this) {
    return dart$.fn(() => query_builder['SqlIsNull|isNull']($this), T$.VoidToExpressionOfbool());
  };
  query_builder['SqlIsNull|isNotNull'] = function SqlIsNull$124isNotNull($this) {
    return new query_builder._NullCheck.new($this, false);
  };
  query_builder['SqlIsNull|get#isNotNull'] = function SqlIsNull$124get$35isNotNull($this) {
    return dart$.fn(() => query_builder['SqlIsNull|isNotNull']($this), T$.VoidToExpressionOfbool());
  };
  query_builder.coalesce = function coalesce(T, expressions) {
    if (!(expressions[$length] >= 2)) dart$.assertFailed("coalesce must have at least 2 arguments, got " + dart$.str(expressions[$length]), I[10], 26, 10, "expressions.length >= 2");
    return new (query_builder.FunctionCallExpression$(T)).new("COALESCE", expressions);
  };
  query_builder['StringExpressionOperators|like'] = function StringExpressionOperators$124like($this, regex) {
    return new query_builder._LikeOperator.new($this, query_builder.Variable.withString(regex));
  };
  query_builder['StringExpressionOperators|get#like'] = function StringExpressionOperators$124get$35like($this) {
    return dart$.fn(regex => query_builder['StringExpressionOperators|like']($this, regex), T$.StringToExpressionOfboolN());
  };
  query_builder['StringExpressionOperators|regexp'] = function StringExpressionOperators$124regexp($this, regex, opts) {
    let multiLine = opts && 'multiLine' in opts ? opts.multiLine : false;
    let caseSensitive = opts && 'caseSensitive' in opts ? opts.caseSensitive : true;
    let unicode = opts && 'unicode' in opts ? opts.unicode : false;
    let dotAll = opts && 'dotAll' in opts ? opts.dotAll : false;
    let flags = 0;
    if (multiLine) {
      flags = (flags | 1) >>> 0;
    }
    if (!caseSensitive) {
      flags = (flags | 2) >>> 0;
    }
    if (unicode) {
      flags = (flags | 4) >>> 0;
    }
    if (dotAll) {
      flags = (flags | 8) >>> 0;
    }
    if (flags !== 0) {
      return new (T$.FunctionCallExpressionOfbool()).new("regexp_moor_ffi", T$.JSArrayOfExpression().of([query_builder.Variable.withString(regex), $this, query_builder.Variable.withInt(flags)]));
    }
    return new query_builder._LikeOperator.new($this, query_builder.Variable.withString(regex), {operator: "REGEXP"});
  };
  query_builder['StringExpressionOperators|get#regexp'] = function StringExpressionOperators$124get$35regexp($this) {
    return dart$.fn((regex, opts) => {
      let multiLine = opts && 'multiLine' in opts ? opts.multiLine : false;
      let caseSensitive = opts && 'caseSensitive' in opts ? opts.caseSensitive : true;
      let unicode = opts && 'unicode' in opts ? opts.unicode : false;
      let dotAll = opts && 'dotAll' in opts ? opts.dotAll : false;
      return query_builder['StringExpressionOperators|regexp']($this, regex, {multiLine: multiLine, caseSensitive: caseSensitive, unicode: unicode, dotAll: dotAll});
    }, T$.String__ToExpressionOfboolN());
  };
  query_builder['StringExpressionOperators|contains'] = function StringExpressionOperators$124contains($this, substring) {
    return query_builder['StringExpressionOperators|like']($this, "%" + substring + "%");
  };
  query_builder['StringExpressionOperators|get#contains'] = function StringExpressionOperators$124get$35contains($this) {
    return dart$.fn(substring => query_builder['StringExpressionOperators|contains']($this, substring), T$.StringToExpressionOfboolN());
  };
  query_builder['StringExpressionOperators|collate'] = function StringExpressionOperators$124collate($this, collate) {
    return new query_builder._CollateOperator.new($this, collate);
  };
  query_builder['StringExpressionOperators|get#collate'] = function StringExpressionOperators$124get$35collate($this) {
    return dart$.fn(collate => query_builder['StringExpressionOperators|collate']($this, collate), T$.CollateToExpressionOfString());
  };
  query_builder['StringExpressionOperators|+'] = function StringExpressionOperators$124$43($this, other) {
    return new (T$._BaseInfixOperatorOfString()).new($this, "||", other, {precedence: query_builder.Precedence.stringConcatenation});
  };
  query_builder['StringExpressionOperators|upper'] = function StringExpressionOperators$124upper($this) {
    return new (T$.FunctionCallExpressionOfString()).new("UPPER", T$.JSArrayOfExpression().of([$this]));
  };
  query_builder['StringExpressionOperators|get#upper'] = function StringExpressionOperators$124get$35upper($this) {
    return dart$.fn(() => query_builder['StringExpressionOperators|upper']($this), T$.VoidToExpressionOfString());
  };
  query_builder['StringExpressionOperators|lower'] = function StringExpressionOperators$124lower($this) {
    return new (T$.FunctionCallExpressionOfString()).new("LOWER", T$.JSArrayOfExpression().of([$this]));
  };
  query_builder['StringExpressionOperators|get#lower'] = function StringExpressionOperators$124get$35lower($this) {
    return dart$.fn(() => query_builder['StringExpressionOperators|lower']($this), T$.VoidToExpressionOfString());
  };
  query_builder['StringExpressionOperators|get#length'] = function StringExpressionOperators$124get$35length($this) {
    return new (T$.FunctionCallExpressionOfintN()).new("LENGTH", T$.JSArrayOfExpression().of([$this]));
  };
  query_builder['StringExpressionOperators|trim'] = function StringExpressionOperators$124trim($this) {
    return new (T$.FunctionCallExpressionOfStringN()).new("TRIM", T$.JSArrayOfExpression().of([$this]));
  };
  query_builder['StringExpressionOperators|get#trim'] = function StringExpressionOperators$124get$35trim($this) {
    return dart$.fn(() => query_builder['StringExpressionOperators|trim']($this), T$.VoidToExpressionOfStringN());
  };
  query_builder['StringExpressionOperators|trimLeft'] = function StringExpressionOperators$124trimLeft($this) {
    return new (T$.FunctionCallExpressionOfStringN()).new("LTRIM", T$.JSArrayOfExpression().of([$this]));
  };
  query_builder['StringExpressionOperators|get#trimLeft'] = function StringExpressionOperators$124get$35trimLeft($this) {
    return dart$.fn(() => query_builder['StringExpressionOperators|trimLeft']($this), T$.VoidToExpressionOfStringN());
  };
  query_builder['StringExpressionOperators|trimRight'] = function StringExpressionOperators$124trimRight($this) {
    return new (T$.FunctionCallExpressionOfStringN()).new("RTRIM", T$.JSArrayOfExpression().of([$this]));
  };
  query_builder['StringExpressionOperators|get#trimRight'] = function StringExpressionOperators$124get$35trimRight($this) {
    return dart$.fn(() => query_builder['StringExpressionOperators|trimRight']($this), T$.VoidToExpressionOfStringN());
  };
  query_builder._defaultOnCreate = function _defaultOnCreate(m) {
    return m.createAll();
  };
  query_builder._defaultOnUpdate = function _defaultOnUpdate(m, from, to) {
    return async.async(dart$.void, function* _defaultOnUpdate() {
      return dart$.throw(core.Exception.new("You've bumped the schema version for your drift database " + "but didn't provide a strategy for schema updates. Please do that by " + "adapting the migrations getter in your database class."));
    });
  };
  query_builder['DestructiveMigrationExtension|get#destructiveFallback'] = function DestructiveMigrationExtension$124get$35destructiveFallback($this) {
    return new query_builder.MigrationStrategy.new({onCreate: C[60] || CT.C60, onUpgrade: dart$.fn((m, from, to) => async.async(dart$.void, function*() {
        let reversedEntities = m[_db$].allSchemaEntities[$toList]()[$reversed];
        for (let entity of reversedEntities) {
          yield m.drop(entity);
        }
        yield m.createAll();
      }), T$.MigratorAndintAndintToFutureOfvoid())});
  };
  query_builder._writeCommaSeparated = function _writeCommaSeparated(context, components) {
    let first = true;
    for (let element of components) {
      if (!first) {
        context.buffer.write(", ");
      }
      element.writeInto(context);
      first = false;
    }
  };
  query_builder['NameWithAlias|get#tableWithAlias'] = function NameWithAlias$124get$35tableWithAlias($this) {
    if ($this.aliasedName === $this.entityName) {
      return $this.entityName;
    } else {
      return $this.entityName + " " + $this.aliasedName;
    }
  };
  query_builder['TableInfoUtils|get#mapFromRow'] = function TableInfoUtils$124get$35mapFromRow(TableDsl, D, $this) {
    return dart$.fn((row, opts) => {
      let tablePrefix = opts && 'tablePrefix' in opts ? opts.tablePrefix : null;
      return query_builder['TableInfoUtils|mapFromRow'](TableDsl, D, $this, row, {tablePrefix: tablePrefix});
    }, dart$.fnType(D, [query_builder.QueryRow], {tablePrefix: T$.StringN()}, {}));
  };
  query_builder['TableInfoUtils|mapFromRow'] = function TableInfoUtils$124mapFromRow(TableDsl, D, $this, row, opts) {
    let tablePrefix = opts && 'tablePrefix' in opts ? opts.tablePrefix : null;
    return $this.map(row.data, {tablePrefix: tablePrefix});
  };
  query_builder['TableInfoUtils|get#mapFromRowOrNull'] = function TableInfoUtils$124get$35mapFromRowOrNull(TableDsl, D, $this) {
    return dart$.fn((row, opts) => {
      let tablePrefix = opts && 'tablePrefix' in opts ? opts.tablePrefix : null;
      return query_builder['TableInfoUtils|mapFromRowOrNull'](TableDsl, D, $this, row, {tablePrefix: tablePrefix});
    }, dart$.fnType(dart$.nullable(D), [query_builder.QueryRow], {tablePrefix: T$.StringN()}, {}));
  };
  query_builder['TableInfoUtils|mapFromRowOrNull'] = function TableInfoUtils$124mapFromRowOrNull(TableDsl, D, $this, row, opts) {
    let tablePrefix = opts && 'tablePrefix' in opts ? opts.tablePrefix : null;
    let resolvedPrefix = tablePrefix == null ? "" : dart$.str(tablePrefix) + ".";
    let notInRow = $this.$columns[$where](dart$.fn(c => !c.$nullable, T$.GeneratedColumnTobool()))[$any](dart$.fn(e => row.data[$_get](resolvedPrefix + e.$name) == null, T$.GeneratedColumnTobool()));
    if (notInRow) return null;
    return query_builder['TableInfoUtils|mapFromRow'](TableDsl, D, $this, row, {tablePrefix: tablePrefix});
  };
  query_builder['TableInfoUtils|get#mapFromRowWithAlias'] = function TableInfoUtils$124get$35mapFromRowWithAlias(TableDsl, D, $this) {
    return dart$.fn((row, alias) => query_builder['TableInfoUtils|mapFromRowWithAlias'](TableDsl, D, $this, row, alias), dart$.fnType(D, [query_builder.QueryRow, T$.MapOfString$String()]));
  };
  query_builder['TableInfoUtils|mapFromRowWithAlias'] = function TableInfoUtils$124mapFromRowWithAlias(TableDsl, D, $this, row, alias) {
    return $this.map((() => {
      let t109 = new (T$.IdentityMapOfString$dynamic()).new();
      for (let entry of row.data[$entries])
        t109[$_set](dart$.nullCheck(alias[$_get](entry.key)), entry.value);
      return t109;
    })());
  };
  query_builder['RowIdExtension|get#rowId'] = function RowIdExtension$124get$35rowId($this) {
    if ($this.withoutRowId || T$.VirtualTableInfoOfTable$dynamic().is($this)) {
      dart$.throw(new core.ArgumentError.new("Cannot use rowId on a table without a rowid!"));
    }
    return new (T$.GeneratedColumnOfintN()).new("_rowid_", $this.aliasedName, false, {type: C[3] || CT.C3});
  };
  query_builder['QueryTableExtensions|get#_sourceTable'] = function QueryTableExtensions$124get$35_sourceTable(T, D, $this) {
    return query_builder.TableInfo$(T, D).as($this.table);
  };
  query_builder['QueryTableExtensions|whereSamePrimaryKey'] = function QueryTableExtensions$124whereSamePrimaryKey(T, D, $this, d) {
    let source = query_builder['QueryTableExtensions|get#_sourceTable'](T, D, $this);
    if (!source.$primaryKey[$isNotEmpty]) dart$.assertFailed("When using Query.whereSamePrimaryKey, which is also called from " + "DeleteStatement.delete and UpdateStatement.replace, the affected table" + "must have a primary key. You can either specify a primary implicitly " + "by making an integer() column autoIncrement(), or by explictly " + "overriding the primaryKey getter in your table class. You'll also " + "have to re-run the code generation step.\n" + "Alternatively, if you're using DeleteStatement.delete or " + "UpdateStatement.replace, consider using DeleteStatement.go or " + "UpdateStatement.write respectively. In that case, you need to use a " + "custom where statement.", I[11], 325, 9, "source.$primaryKey.isNotEmpty");
    let primaryKeyColumns = T$.MapOfString$GeneratedColumn().fromEntries(source.$primaryKey[$map](T$.MapEntryOfString$GeneratedColumn(), dart$.fn(column => new (T$.MapEntryOfString$GeneratedColumn()).__(column.$name, column), T$.GeneratedColumnToMapEntryOfString$GeneratedColumn())));
    let updatedFields = d.toColumns(false);
    let primaryKeyValues = T$.MapOfString$Expression().fromEntries(updatedFields[$entries][$where](dart$.fn(entry => primaryKeyColumns[$containsKey](entry.key), T$.MapEntryOfString$ExpressionTobool())))[$map](query_builder.GeneratedColumn, query_builder.Expression, dart$.fn((columnName, value) => new (T$.MapEntryOfGeneratedColumn$Expression()).__(dart$.nullCheck(primaryKeyColumns[$_get](columnName)), value), T$.StringAndExpressionToMapEntryOfGeneratedColumn$Expression()));
    let predicate = null;
    for (let entry of primaryKeyValues[$entries]) {
      let comparison = new query_builder._Comparison.new(entry.key, query_builder._ComparisonOperator.equal, entry.value);
      if (predicate == null) {
        predicate = comparison;
      } else {
        predicate = query_builder['BooleanExpressionOperators|&'](predicate, comparison);
      }
    }
    $this.whereExpr = new query_builder.Where.new(dart$.nullCheck(predicate));
  };
  query_builder['QueryTableExtensions|get#whereSamePrimaryKey'] = function QueryTableExtensions$124get$35whereSamePrimaryKey(T, D, $this) {
    return dart$.fn(d => query_builder['QueryTableExtensions|whereSamePrimaryKey'](T, D, $this, d), dart$.fnType(dart$.void, [data_class.Insertable$(D)]));
  };
  query_builder._beginOfSelect = function _beginOfSelect(distinct) {
    return distinct ? "SELECT DISTINCT" : "SELECT";
  };
  var ListEquality__elementEquality = dart$.privateName(equality, "ListEquality._elementEquality");
  dart$.defineLazy(query_builder, {
    /*query_builder._joinKeywords*/get _joinKeywords() {
      return C[67] || CT.C67;
    },
    /*query_builder._modeToString*/get _modeToString() {
      return C[68] || CT.C68;
    },
    /*query_builder.currentDate*/get currentDate() {
      return C[69] || CT.C69;
    },
    /*query_builder.currentDateAndTime*/get currentDateAndTime() {
      return C[70] || CT.C70;
    },
    /*query_builder._equality*/get _equality() {
      return C[71] || CT.C71;
    },
    /*query_builder._invalidNull*/get _invalidNull() {
      return C[73] || CT.C73;
    },
    /*query_builder._insertKeywords*/get _insertKeywords() {
      return C[74] || CT.C74;
    }
  }, false);
  var _lock = dart$.privateName(engines, "_lock");
  var _ensureOpenCalled = dart$.privateName(engines, "_ensureOpenCalled");
  var _closed = dart$.privateName(engines, "_closed");
  var _debugCheckIsOpen = dart$.privateName(engines, "_debugCheckIsOpen");
  var _synchronized = dart$.privateName(engines, "_synchronized");
  var _log = dart$.privateName(engines, "_log");
  engines._BaseExecutor = class _BaseExecutor extends executor$.QueryExecutor {
    get isSequential() {
      return false;
    }
    get logStatements() {
      return false;
    }
    [_debugCheckIsOpen]() {
      if (!this[_ensureOpenCalled]) {
        dart$.throw(new core.StateError.new("Tried to run an operation without first calling QueryExecutor.ensureOpen()!\n\nIf you're seeing this exception from a drift database, it may indicate a bug in\ndrift itself. Please consider opening an issue with the stack trace and details\non how to reproduce this."));
      }
      if (this[_closed]) {
        dart$.throw(new core.StateError.new("This database or transaction runner has already been closed and may not be used\nanymore.\n\nIf this is happening in a transaction, you might be using the transaction \nwithout awaiting every statement in it."));
      }
      return true;
    }
    [_synchronized](T, action) {
      if (this.isSequential) {
        return this[_lock].synchronized(T, dart$.fn(() => {
          cancellation_zone.checkIfCancelled();
          return action();
        }, dart$.fnType(async.Future$(T), [])));
      } else {
        return action();
      }
    }
    [_log](sql, args) {
      let t115, t114;
      if (this.logStatements) {
        t114 = runtime_api.driftRuntimeOptions;
        t115 = "Drift: Sent " + sql + " with args " + dart$.str(args);
        t114.debugPrint(t115);
      }
    }
    runSelect(statement, args) {
      return async.async(T$.ListOfMapOfString$ObjectN(), (function* runSelect() {
        let result = (yield this[_synchronized](results.QueryResult, dart$.fn(() => {
          if (!this[_debugCheckIsOpen]()) dart$.assertFailed(null, I[12], 69, 14, "_debugCheckIsOpen()");
          this[_log](statement, args);
          return this.impl.runSelect(statement, args);
        }, T$.VoidToFutureOfQueryResult())));
        return result.asMap[$toList]();
      }).bind(this));
    }
    runUpdate(statement, args) {
      return this[_synchronized](core.int, dart$.fn(() => {
        if (!this[_debugCheckIsOpen]()) dart$.assertFailed(null, I[12], 79, 14, "_debugCheckIsOpen()");
        this[_log](statement, args);
        return this.impl.runUpdate(statement, args);
      }, T$.VoidToFutureOfint()));
    }
    runDelete(statement, args) {
      return this[_synchronized](core.int, dart$.fn(() => {
        if (!this[_debugCheckIsOpen]()) dart$.assertFailed(null, I[12], 88, 14, "_debugCheckIsOpen()");
        this[_log](statement, args);
        return this.impl.runUpdate(statement, args);
      }, T$.VoidToFutureOfint()));
    }
    runInsert(statement, args) {
      return this[_synchronized](core.int, dart$.fn(() => {
        if (!this[_debugCheckIsOpen]()) dart$.assertFailed(null, I[12], 97, 14, "_debugCheckIsOpen()");
        this[_log](statement, args);
        return this.impl.runInsert(statement, args);
      }, T$.VoidToFutureOfint()));
    }
    runCustom(statement, args = null) {
      return this[_synchronized](dart$.void, dart$.fn(() => {
        let t114;
        if (!this[_debugCheckIsOpen]()) dart$.assertFailed(null, I[12], 106, 14, "_debugCheckIsOpen()");
        let resolvedArgs = (t114 = args, t114 == null ? C[75] || CT.C75 : t114);
        this[_log](statement, resolvedArgs);
        return this.impl.runCustom(statement, resolvedArgs);
      }, T$.VoidToFutureOfvoid()));
    }
    runBatched(statements) {
      return this[_synchronized](dart$.void, dart$.fn(() => {
        let t115, t114;
        if (!this[_debugCheckIsOpen]()) dart$.assertFailed(null, I[12], 116, 14, "_debugCheckIsOpen()");
        if (this.logStatements) {
          t114 = runtime_api.driftRuntimeOptions;
          t115 = "Drift: Executing " + dart$.str(statements) + " in a batch";
          t114.debugPrint(t115);
        }
        return this.impl.runBatched(statements);
      }, T$.VoidToFutureOfvoid()));
    }
  };
  (engines._BaseExecutor.new = function() {
    this[_lock] = new synchronized.Lock.new();
    this[_ensureOpenCalled] = false;
    this[_closed] = false;
    ;
  }).prototype = engines._BaseExecutor.prototype;
  dart$.addTypeTests(engines._BaseExecutor);
  dart$.addTypeCaches(engines._BaseExecutor);
  dart$.setMethodSignature(engines._BaseExecutor, () => ({
    __proto__: dart$.getMethods(engines._BaseExecutor.__proto__),
    [_debugCheckIsOpen]: dart$.fnType(core.bool, []),
    [_synchronized]: dart$.gFnType(T => [async.Future$(T), [dart$.fnType(async.Future$(T), [])]], T => [dart$.nullable(core.Object)]),
    [_log]: dart$.fnType(dart$.void, [core.String, core.List$(dart$.nullable(core.Object))]),
    runSelect: dart$.fnType(async.Future$(core.List$(core.Map$(core.String, dart$.nullable(core.Object)))), [core.String, core.List$(dart$.nullable(core.Object))]),
    runUpdate: dart$.fnType(async.Future$(core.int), [core.String, core.List$(dart$.nullable(core.Object))]),
    runDelete: dart$.fnType(async.Future$(core.int), [core.String, core.List$(dart$.nullable(core.Object))]),
    runInsert: dart$.fnType(async.Future$(core.int), [core.String, core.List$(dart$.nullable(core.Object))]),
    runCustom: dart$.fnType(async.Future$(dart$.void), [core.String], [dart$.nullable(core.List$(dart$.nullable(core.Object)))]),
    runBatched: dart$.fnType(async.Future$(dart$.void), [executor$.BatchedStatements])
  }));
  dart$.setGetterSignature(engines._BaseExecutor, () => ({
    __proto__: dart$.getGetters(engines._BaseExecutor.__proto__),
    isSequential: core.bool,
    logStatements: core.bool
  }));
  dart$.setLibraryUri(engines._BaseExecutor, I[13]);
  dart$.setFieldSignature(engines._BaseExecutor, () => ({
    __proto__: dart$.getFields(engines._BaseExecutor.__proto__),
    [_lock]: dart$.finalFieldType(synchronized.Lock),
    [_ensureOpenCalled]: dart$.fieldType(core.bool),
    [_closed]: dart$.fieldType(core.bool)
  }));
  var ___TransactionExecutor_impl = dart$.privateName(engines, "_#_TransactionExecutor#impl");
  var _sendCalled = dart$.privateName(engines, "_sendCalled");
  var _openingCompleter = dart$.privateName(engines, "_openingCompleter");
  var _sendOnCommit = dart$.privateName(engines, "_sendOnCommit");
  var _sendOnRollback = dart$.privateName(engines, "_sendOnRollback");
  var _sendFakeErrorOnRollback = dart$.privateName(engines, "_sendFakeErrorOnRollback");
  var _db$0 = dart$.privateName(engines, "_db");
  engines._TransactionExecutor = class _TransactionExecutor extends engines._BaseExecutor {
    get impl() {
      let t114;
      t114 = this[___TransactionExecutor_impl];
      return t114 == null ? dart$.throw(new _internal.LateError.fieldNI("impl")) : t114;
    }
    set impl(impl$35param) {
      this[___TransactionExecutor_impl] = impl$35param;
    }
    get isSequential() {
      return this[_db$0].isSequential;
    }
    get logStatements() {
      return this[_db$0].logStatements;
    }
    get dialect() {
      return this[_db$0].dialect;
    }
    get completed() {
      return this[_sendCalled].future;
    }
    static ['_#new#tearOff'](_db) {
      return new engines._TransactionExecutor.new(_db);
    }
    beginTransaction() {
      dart$.throw(core.Exception.new("Nested transactions aren't supported"));
    }
    ensureOpen(_) {
      return async.async(core.bool, (function* ensureOpen() {
        if (!!this[_closed]) dart$.assertFailed("Transaction was used after it completed. Are you missing an await " + "somewhere?", I[12], 161, 7, "!_closed");
        this[_ensureOpenCalled] = true;
        if (this[_openingCompleter] != null) {
          return yield dart$.nullCheck(this[_openingCompleter]).future;
        }
        this[_openingCompleter] = T$.CompleterOfbool().new();
        let transactionManager = this[_db$0].delegate.transactionDelegate;
        let transactionStarted = async.Completer.new();
        if (delegates.NoTransactionDelegate.is(transactionManager)) {
          if (!this[_db$0].isSequential) dart$.assertFailed("When using the default NoTransactionDelegate, the database must be " + "sequential.", I[12], 178, 11, "_db.isSequential");
          async.unawaited(this[_db$0][_synchronized](dart$.void, dart$.fn(() => async.async(dart$.void, (function*() {
            this.impl = this[_db$0].delegate;
            yield this.runCustom(transactionManager.start, C[75] || CT.C75);
            this[_db$0].delegate.isInTransaction = true;
            this[_sendOnCommit] = transactionManager.commit;
            this[_sendOnRollback] = transactionManager.rollback;
            transactionStarted.complete();
            yield this[_sendCalled].future;
          }).bind(this)), T$.VoidToFutureOfvoid())));
        } else if (delegates.SupportedTransactionDelegate.is(transactionManager)) {
          transactionManager.startTransaction(dart$.fn(transaction => async.async(core.Null, (function*() {
            this.impl = transaction;
            this[_sendFakeErrorOnRollback] = true;
            transactionStarted.complete();
            yield this[_sendCalled].future;
          }).bind(this)), T$.QueryDelegateToFutureOfNull()));
        } else if (delegates.WrappedTransactionDelegate.is(transactionManager)) {
          async.unawaited(this[_db$0][_synchronized](dart$.void, dart$.fn(() => async.async(dart$.void, (function*() {
            try {
              yield transactionManager.runInTransaction(dart$.fn(transaction => async.async(core.Null, (function*() {
                this.impl = transaction;
                this[_sendFakeErrorOnRollback] = true;
                transactionStarted.complete();
                yield this[_sendCalled].future;
              }).bind(this)), T$.QueryDelegateToFutureOfNull()));
            } catch (e) {
              let _ = dart$.getThrown(e);
              if (core.Object.is(_)) {
              } else
                throw e;
            }
          }).bind(this)), T$.VoidToFutureOfvoid())));
        } else {
          dart$.throw(core.Exception.new("Invalid delegate: Has unknown transaction delegate"));
        }
        yield transactionStarted.future;
        dart$.nullCheck(this[_openingCompleter]).complete(true);
        return true;
      }).bind(this));
    }
    send() {
      return async.async(dart$.void, (function* send() {
        if (this[_openingCompleter] == null) return;
        if (this[_sendOnCommit] != null) {
          yield this.runCustom(dart$.nullCheck(this[_sendOnCommit]), C[75] || CT.C75);
          this[_db$0].delegate.isInTransaction = false;
        }
        this[_sendCalled].complete();
        this[_closed] = true;
      }).bind(this));
    }
    rollback() {
      return async.async(dart$.void, (function* rollback() {
        if (this[_openingCompleter] == null) return;
        if (this[_sendOnRollback] != null) {
          yield this.runCustom(dart$.nullCheck(this[_sendOnRollback]), C[75] || CT.C75);
          this[_db$0].delegate.isInTransaction = false;
        }
        if (this[_sendFakeErrorOnRollback]) {
          this[_sendCalled].completeError(core.Exception.new("artificial exception to rollback the transaction"));
        } else {
          this[_sendCalled].complete();
        }
        this[_closed] = true;
      }).bind(this));
    }
  };
  (engines._TransactionExecutor.new = function(_db) {
    this[___TransactionExecutor_impl] = null;
    this[_sendCalled] = T$.CompleterOfvoid().new();
    this[_openingCompleter] = null;
    this[_sendOnCommit] = null;
    this[_sendOnRollback] = null;
    this[_sendFakeErrorOnRollback] = false;
    this[_db$0] = _db;
    engines._TransactionExecutor.__proto__.new.call(this);
    ;
  }).prototype = engines._TransactionExecutor.prototype;
  dart$.addTypeTests(engines._TransactionExecutor);
  dart$.addTypeCaches(engines._TransactionExecutor);
  engines._TransactionExecutor[dart$.implements] = () => [executor$.TransactionExecutor];
  dart$.setMethodSignature(engines._TransactionExecutor, () => ({
    __proto__: dart$.getMethods(engines._TransactionExecutor.__proto__),
    beginTransaction: dart$.fnType(executor$.TransactionExecutor, []),
    ensureOpen: dart$.fnType(async.Future$(core.bool), [executor$.QueryExecutorUser]),
    send: dart$.fnType(async.Future$(dart$.void), []),
    rollback: dart$.fnType(async.Future$(dart$.void), [])
  }));
  dart$.setGetterSignature(engines._TransactionExecutor, () => ({
    __proto__: dart$.getGetters(engines._TransactionExecutor.__proto__),
    impl: delegates.QueryDelegate,
    completed: async.Future
  }));
  dart$.setSetterSignature(engines._TransactionExecutor, () => ({
    __proto__: dart$.getSetters(engines._TransactionExecutor.__proto__),
    impl: delegates.QueryDelegate
  }));
  dart$.setLibraryUri(engines._TransactionExecutor, I[13]);
  dart$.setFieldSignature(engines._TransactionExecutor, () => ({
    __proto__: dart$.getFields(engines._TransactionExecutor.__proto__),
    [_db$0]: dart$.finalFieldType(engines.DelegatedDatabase),
    [___TransactionExecutor_impl]: dart$.fieldType(dart$.nullable(delegates.QueryDelegate)),
    [_sendCalled]: dart$.finalFieldType(async.Completer$(dart$.void)),
    [_openingCompleter]: dart$.fieldType(dart$.nullable(async.Completer$(core.bool))),
    [_sendOnCommit]: dart$.fieldType(dart$.nullable(core.String)),
    [_sendOnRollback]: dart$.fieldType(dart$.nullable(core.String)),
    [_sendFakeErrorOnRollback]: dart$.fieldType(core.bool)
  }));
  var delegate$ = dart$.privateName(engines, "DelegatedDatabase.delegate");
  var logStatements$ = dart$.privateName(engines, "DelegatedDatabase.logStatements");
  var isSequential$ = dart$.privateName(engines, "DelegatedDatabase.isSequential");
  var _openingLock = dart$.privateName(engines, "_openingLock");
  var _runMigrations = dart$.privateName(engines, "_runMigrations");
  engines.DelegatedDatabase = class DelegatedDatabase extends engines._BaseExecutor {
    get delegate() {
      return this[delegate$];
    }
    set delegate(value) {
      super.delegate = value;
    }
    get logStatements() {
      return this[logStatements$];
    }
    set logStatements(value) {
      this[logStatements$] = value;
    }
    get isSequential() {
      return this[isSequential$];
    }
    set isSequential(value) {
      super.isSequential = value;
    }
    get impl() {
      return this.delegate;
    }
    get dialect() {
      return this.delegate.dialect;
    }
    static ['_#new#tearOff'](delegate, opts) {
      let logStatements = opts && 'logStatements' in opts ? opts.logStatements : null;
      let isSequential = opts && 'isSequential' in opts ? opts.isSequential : false;
      return new engines.DelegatedDatabase.new(delegate, {logStatements: logStatements, isSequential: isSequential});
    }
    ensureOpen(user) {
      return this[_openingLock].synchronized(core.bool, dart$.fn(() => async.async(core.bool, (function*() {
        if (this[_closed]) {
          return T$.FutureOfbool().error(new core.StateError.new("Can't re-open a database after closing it. Please create a new " + "database connection and open that instead."));
        }
        let alreadyOpen = (yield this.delegate.isOpen);
        if (alreadyOpen) {
          this[_ensureOpenCalled] = true;
          return true;
        }
        yield this.delegate.open(user);
        this[_ensureOpenCalled] = true;
        yield this[_runMigrations](user);
        return true;
      }).bind(this)), T$.VoidToFutureOfbool()));
    }
    [_runMigrations](user) {
      return async.async(dart$.void, (function* _runMigrations() {
        let versionDelegate = this.delegate.versionDelegate;
        let oldVersion = null;
        let currentVersion = user.schemaVersion;
        if (delegates.NoVersionDelegate.is(versionDelegate)) {
          oldVersion = user.schemaVersion;
        } else if (delegates.OnOpenVersionDelegate.is(versionDelegate)) {
          oldVersion = (yield versionDelegate.loadSchemaVersion());
        } else if (delegates.DynamicVersionDelegate.is(versionDelegate)) {
          oldVersion = (yield versionDelegate.schemaVersion);
        } else {
          dart$.throw(core.Exception.new("Invalid delegate: " + dart$.str(this.delegate) + ". The versionDelegate getter " + "must not subclass DBVersionDelegate directly"));
        }
        if (oldVersion === 0) {
          oldVersion = null;
        }
        let openingDetails = new query_builder.OpeningDetails.new(oldVersion, currentVersion);
        yield user.beforeOpen(new engines._BeforeOpeningExecutor.new(this), openingDetails);
        if (delegates.DynamicVersionDelegate.is(versionDelegate)) {
          yield versionDelegate.setSchemaVersion(currentVersion);
        }
        this.delegate.notifyDatabaseOpened(openingDetails);
      }).bind(this));
    }
    beginTransaction() {
      return new engines._TransactionExecutor.new(this);
    }
    close() {
      return this[_openingLock].synchronized(dart$.void, dart$.fn(() => {
        if (this[_ensureOpenCalled] && !this[_closed]) {
          this[_closed] = true;
          this[_ensureOpenCalled] = false;
          return this.delegate.close();
        } else {
          return T$.FutureOfvoid().value();
        }
      }, T$.VoidToFutureOfvoid()));
    }
  };
  (engines.DelegatedDatabase.new = function(delegate, opts) {
    let t115;
    let logStatements = opts && 'logStatements' in opts ? opts.logStatements : null;
    let isSequential = opts && 'isSequential' in opts ? opts.isSequential : false;
    this[_openingLock] = new synchronized.Lock.new();
    this[delegate$] = delegate;
    this[isSequential$] = isSequential;
    this[logStatements$] = (t115 = logStatements, t115 == null ? false : t115);
    engines.DelegatedDatabase.__proto__.new.call(this);
    ;
  }).prototype = engines.DelegatedDatabase.prototype;
  dart$.addTypeTests(engines.DelegatedDatabase);
  dart$.addTypeCaches(engines.DelegatedDatabase);
  dart$.setMethodSignature(engines.DelegatedDatabase, () => ({
    __proto__: dart$.getMethods(engines.DelegatedDatabase.__proto__),
    ensureOpen: dart$.fnType(async.Future$(core.bool), [executor$.QueryExecutorUser]),
    [_runMigrations]: dart$.fnType(async.Future$(dart$.void), [executor$.QueryExecutorUser]),
    beginTransaction: dart$.fnType(executor$.TransactionExecutor, [])
  }));
  dart$.setGetterSignature(engines.DelegatedDatabase, () => ({
    __proto__: dart$.getGetters(engines.DelegatedDatabase.__proto__),
    impl: delegates.QueryDelegate
  }));
  dart$.setLibraryUri(engines.DelegatedDatabase, I[13]);
  dart$.setFieldSignature(engines.DelegatedDatabase, () => ({
    __proto__: dart$.getFields(engines.DelegatedDatabase.__proto__),
    delegate: dart$.finalFieldType(delegates.DatabaseDelegate),
    logStatements: dart$.fieldType(core.bool),
    isSequential: dart$.finalFieldType(core.bool),
    [_openingLock]: dart$.finalFieldType(synchronized.Lock)
  }));
  var _base$ = dart$.privateName(engines, "_base");
  engines._BeforeOpeningExecutor = class _BeforeOpeningExecutor extends engines._BaseExecutor {
    static ['_#new#tearOff'](_base) {
      return new engines._BeforeOpeningExecutor.new(_base);
    }
    beginTransaction() {
      return this[_base$].beginTransaction();
    }
    ensureOpen(_) {
      this[_ensureOpenCalled] = true;
      return T$.FutureOfbool().value(true);
    }
    get impl() {
      return this[_base$].impl;
    }
    get logStatements() {
      return this[_base$].logStatements;
    }
  };
  (engines._BeforeOpeningExecutor.new = function(_base) {
    this[_base$] = _base;
    engines._BeforeOpeningExecutor.__proto__.new.call(this);
    ;
  }).prototype = engines._BeforeOpeningExecutor.prototype;
  dart$.addTypeTests(engines._BeforeOpeningExecutor);
  dart$.addTypeCaches(engines._BeforeOpeningExecutor);
  dart$.setMethodSignature(engines._BeforeOpeningExecutor, () => ({
    __proto__: dart$.getMethods(engines._BeforeOpeningExecutor.__proto__),
    beginTransaction: dart$.fnType(executor$.TransactionExecutor, []),
    ensureOpen: dart$.fnType(async.Future$(core.bool), [executor$.QueryExecutorUser])
  }));
  dart$.setGetterSignature(engines._BeforeOpeningExecutor, () => ({
    __proto__: dart$.getGetters(engines._BeforeOpeningExecutor.__proto__),
    impl: delegates.QueryDelegate
  }));
  dart$.setLibraryUri(engines._BeforeOpeningExecutor, I[13]);
  dart$.setFieldSignature(engines._BeforeOpeningExecutor, () => ({
    __proto__: dart$.getFields(engines._BeforeOpeningExecutor.__proto__),
    [_base$]: dart$.finalFieldType(engines.DelegatedDatabase)
  }));
  var isInTransaction = dart$.privateName(delegates, "DatabaseDelegate.isInTransaction");
  delegates.QueryDelegate = class QueryDelegate extends core.Object {
    runBatched(statements) {
      return async.async(dart$.void, (function* runBatched() {
        for (let application of statements.arguments) {
          let sql = statements.statements[$_get](application.statementIndex);
          yield this.runCustom(sql, application.arguments);
        }
      }).bind(this));
    }
  };
  (delegates.QueryDelegate.new = function() {
    ;
  }).prototype = delegates.QueryDelegate.prototype;
  dart$.addTypeTests(delegates.QueryDelegate);
  dart$.addTypeCaches(delegates.QueryDelegate);
  dart$.setMethodSignature(delegates.QueryDelegate, () => ({
    __proto__: dart$.getMethods(delegates.QueryDelegate.__proto__),
    runBatched: dart$.fnType(async.Future$(dart$.void), [executor$.BatchedStatements])
  }));
  dart$.setLibraryUri(delegates.QueryDelegate, I[14]);
  delegates.DatabaseDelegate = class DatabaseDelegate extends delegates.QueryDelegate {
    get isInTransaction() {
      return this[isInTransaction];
    }
    set isInTransaction(value) {
      this[isInTransaction] = value;
    }
    close() {
      return async.async(dart$.void, function* close() {
      });
    }
    notifyDatabaseOpened(details) {
    }
    get dialect() {
      return query_builder.SqlDialect.sqlite;
    }
  };
  (delegates.DatabaseDelegate.new = function() {
    this[isInTransaction] = false;
    ;
  }).prototype = delegates.DatabaseDelegate.prototype;
  dart$.addTypeTests(delegates.DatabaseDelegate);
  dart$.addTypeCaches(delegates.DatabaseDelegate);
  dart$.setMethodSignature(delegates.DatabaseDelegate, () => ({
    __proto__: dart$.getMethods(delegates.DatabaseDelegate.__proto__),
    close: dart$.fnType(async.Future$(dart$.void), []),
    notifyDatabaseOpened: dart$.fnType(dart$.void, [query_builder.OpeningDetails])
  }));
  dart$.setGetterSignature(delegates.DatabaseDelegate, () => ({
    __proto__: dart$.getGetters(delegates.DatabaseDelegate.__proto__),
    dialect: query_builder.SqlDialect
  }));
  dart$.setLibraryUri(delegates.DatabaseDelegate, I[14]);
  dart$.setFieldSignature(delegates.DatabaseDelegate, () => ({
    __proto__: dart$.getFields(delegates.DatabaseDelegate.__proto__),
    isInTransaction: dart$.fieldType(core.bool)
  }));
  delegates.TransactionDelegate = class TransactionDelegate extends core.Object {};
  (delegates.TransactionDelegate.new = function() {
    ;
  }).prototype = delegates.TransactionDelegate.prototype;
  dart$.addTypeTests(delegates.TransactionDelegate);
  dart$.addTypeCaches(delegates.TransactionDelegate);
  dart$.setLibraryUri(delegates.TransactionDelegate, I[14]);
  var start$ = dart$.privateName(delegates, "NoTransactionDelegate.start");
  var commit$ = dart$.privateName(delegates, "NoTransactionDelegate.commit");
  var rollback$ = dart$.privateName(delegates, "NoTransactionDelegate.rollback");
  delegates.NoTransactionDelegate = class NoTransactionDelegate extends delegates.TransactionDelegate {
    get start() {
      return this[start$];
    }
    set start(value) {
      super.start = value;
    }
    get commit() {
      return this[commit$];
    }
    set commit(value) {
      super.commit = value;
    }
    get rollback() {
      return this[rollback$];
    }
    set rollback(value) {
      super.rollback = value;
    }
    static ['_#new#tearOff'](opts) {
      let start = opts && 'start' in opts ? opts.start : "BEGIN TRANSACTION";
      let commit = opts && 'commit' in opts ? opts.commit : "COMMIT TRANSACTION";
      let rollback = opts && 'rollback' in opts ? opts.rollback : "ROLLBACK TRANSACTION";
      return new delegates.NoTransactionDelegate.new({start: start, commit: commit, rollback: rollback});
    }
  };
  (delegates.NoTransactionDelegate.new = function(opts) {
    let start = opts && 'start' in opts ? opts.start : "BEGIN TRANSACTION";
    let commit = opts && 'commit' in opts ? opts.commit : "COMMIT TRANSACTION";
    let rollback = opts && 'rollback' in opts ? opts.rollback : "ROLLBACK TRANSACTION";
    this[start$] = start;
    this[commit$] = commit;
    this[rollback$] = rollback;
    delegates.NoTransactionDelegate.__proto__.new.call(this);
    ;
  }).prototype = delegates.NoTransactionDelegate.prototype;
  dart$.addTypeTests(delegates.NoTransactionDelegate);
  dart$.addTypeCaches(delegates.NoTransactionDelegate);
  dart$.setLibraryUri(delegates.NoTransactionDelegate, I[14]);
  dart$.setFieldSignature(delegates.NoTransactionDelegate, () => ({
    __proto__: dart$.getFields(delegates.NoTransactionDelegate.__proto__),
    start: dart$.finalFieldType(core.String),
    commit: dart$.finalFieldType(core.String),
    rollback: dart$.finalFieldType(core.String)
  }));
  delegates.SupportedTransactionDelegate = class SupportedTransactionDelegate extends delegates.TransactionDelegate {};
  (delegates.SupportedTransactionDelegate.new = function() {
    delegates.SupportedTransactionDelegate.__proto__.new.call(this);
    ;
  }).prototype = delegates.SupportedTransactionDelegate.prototype;
  dart$.addTypeTests(delegates.SupportedTransactionDelegate);
  dart$.addTypeCaches(delegates.SupportedTransactionDelegate);
  dart$.setLibraryUri(delegates.SupportedTransactionDelegate, I[14]);
  delegates.WrappedTransactionDelegate = class WrappedTransactionDelegate extends delegates.TransactionDelegate {};
  (delegates.WrappedTransactionDelegate.new = function() {
    delegates.WrappedTransactionDelegate.__proto__.new.call(this);
    ;
  }).prototype = delegates.WrappedTransactionDelegate.prototype;
  dart$.addTypeTests(delegates.WrappedTransactionDelegate);
  dart$.addTypeCaches(delegates.WrappedTransactionDelegate);
  dart$.setLibraryUri(delegates.WrappedTransactionDelegate, I[14]);
  delegates.DbVersionDelegate = class DbVersionDelegate extends core.Object {};
  (delegates.DbVersionDelegate.new = function() {
    ;
  }).prototype = delegates.DbVersionDelegate.prototype;
  dart$.addTypeTests(delegates.DbVersionDelegate);
  dart$.addTypeCaches(delegates.DbVersionDelegate);
  dart$.setLibraryUri(delegates.DbVersionDelegate, I[14]);
  delegates.NoVersionDelegate = class NoVersionDelegate extends delegates.DbVersionDelegate {
    static ['_#new#tearOff']() {
      return new delegates.NoVersionDelegate.new();
    }
  };
  (delegates.NoVersionDelegate.new = function() {
    delegates.NoVersionDelegate.__proto__.new.call(this);
    ;
  }).prototype = delegates.NoVersionDelegate.prototype;
  dart$.addTypeTests(delegates.NoVersionDelegate);
  dart$.addTypeCaches(delegates.NoVersionDelegate);
  dart$.setLibraryUri(delegates.NoVersionDelegate, I[14]);
  var loadSchemaVersion$ = dart$.privateName(delegates, "OnOpenVersionDelegate.loadSchemaVersion");
  delegates.OnOpenVersionDelegate = class OnOpenVersionDelegate extends delegates.DbVersionDelegate {
    get loadSchemaVersion() {
      return this[loadSchemaVersion$];
    }
    set loadSchemaVersion(value) {
      super.loadSchemaVersion = value;
    }
    static ['_#new#tearOff'](loadSchemaVersion) {
      return new delegates.OnOpenVersionDelegate.new(loadSchemaVersion);
    }
  };
  (delegates.OnOpenVersionDelegate.new = function(loadSchemaVersion) {
    this[loadSchemaVersion$] = loadSchemaVersion;
    delegates.OnOpenVersionDelegate.__proto__.new.call(this);
    ;
  }).prototype = delegates.OnOpenVersionDelegate.prototype;
  dart$.addTypeTests(delegates.OnOpenVersionDelegate);
  dart$.addTypeCaches(delegates.OnOpenVersionDelegate);
  dart$.setLibraryUri(delegates.OnOpenVersionDelegate, I[14]);
  dart$.setFieldSignature(delegates.OnOpenVersionDelegate, () => ({
    __proto__: dart$.getFields(delegates.OnOpenVersionDelegate.__proto__),
    loadSchemaVersion: dart$.finalFieldType(dart$.fnType(async.Future$(core.int), []))
  }));
  delegates.DynamicVersionDelegate = class DynamicVersionDelegate extends delegates.DbVersionDelegate {};
  (delegates.DynamicVersionDelegate.new = function() {
    delegates.DynamicVersionDelegate.__proto__.new.call(this);
    ;
  }).prototype = delegates.DynamicVersionDelegate.prototype;
  dart$.addTypeTests(delegates.DynamicVersionDelegate);
  dart$.addTypeCaches(delegates.DynamicVersionDelegate);
  dart$.setLibraryUri(delegates.DynamicVersionDelegate, I[14]);
  executor$.QueryExecutorUser = class QueryExecutorUser extends core.Object {};
  (executor$.QueryExecutorUser.new = function() {
    ;
  }).prototype = executor$.QueryExecutorUser.prototype;
  dart$.addTypeTests(executor$.QueryExecutorUser);
  dart$.addTypeCaches(executor$.QueryExecutorUser);
  dart$.setLibraryUri(executor$.QueryExecutorUser, I[0]);
  var statements$ = dart$.privateName(executor$, "BatchedStatements.statements");
  var $arguments$0 = dart$.privateName(executor$, "BatchedStatements.arguments");
  executor$.BatchedStatements = class BatchedStatements extends core.Object {
    get statements() {
      return this[statements$];
    }
    set statements(value) {
      super.statements = value;
    }
    get arguments() {
      return this[$arguments$0];
    }
    set arguments(value) {
      super.arguments = value;
    }
    static ['_#new#tearOff'](statements, $arguments) {
      return new executor$.BatchedStatements.new(statements, $arguments);
    }
    get hashCode() {
      return core.Object.hash(executor$._equality.hash(this.statements), executor$._equality.hash(this.arguments));
    }
    _equals(other) {
      if (other == null) return false;
      return executor$.BatchedStatements.is(other) && executor$._equality.equals(other.statements, this.statements) && executor$._equality.equals(other.arguments, this.arguments);
    }
    toString() {
      return "BatchedStatements(" + dart$.str(this.statements) + ", " + dart$.str(this.arguments) + ")";
    }
  };
  (executor$.BatchedStatements.new = function(statements, $arguments) {
    this[statements$] = statements;
    this[$arguments$0] = $arguments;
    ;
  }).prototype = executor$.BatchedStatements.prototype;
  dart$.addTypeTests(executor$.BatchedStatements);
  dart$.addTypeCaches(executor$.BatchedStatements);
  dart$.setLibraryUri(executor$.BatchedStatements, I[0]);
  dart$.setFieldSignature(executor$.BatchedStatements, () => ({
    __proto__: dart$.getFields(executor$.BatchedStatements.__proto__),
    statements: dart$.finalFieldType(core.List$(core.String)),
    arguments: dart$.finalFieldType(core.List$(executor$.ArgumentsForBatchedStatement))
  }));
  dart$.defineExtensionMethods(executor$.BatchedStatements, ['_equals', 'toString']);
  dart$.defineExtensionAccessors(executor$.BatchedStatements, ['hashCode']);
  var statementIndex$ = dart$.privateName(executor$, "ArgumentsForBatchedStatement.statementIndex");
  var $arguments$1 = dart$.privateName(executor$, "ArgumentsForBatchedStatement.arguments");
  executor$.ArgumentsForBatchedStatement = class ArgumentsForBatchedStatement extends core.Object {
    get statementIndex() {
      return this[statementIndex$];
    }
    set statementIndex(value) {
      super.statementIndex = value;
    }
    get arguments() {
      return this[$arguments$1];
    }
    set arguments(value) {
      super.arguments = value;
    }
    static ['_#new#tearOff'](statementIndex, $arguments) {
      return new executor$.ArgumentsForBatchedStatement.new(statementIndex, $arguments);
    }
    get hashCode() {
      return core.Object.hash(this.statementIndex, executor$._equality);
    }
    _equals(other) {
      if (other == null) return false;
      return executor$.ArgumentsForBatchedStatement.is(other) && other.statementIndex === this.statementIndex && executor$._equality.equals(other.arguments, this.arguments);
    }
    toString() {
      return "ArgumentsForBatchedStatement(" + dart$.str(this.statementIndex) + ", " + dart$.str(this.arguments) + ")";
    }
  };
  (executor$.ArgumentsForBatchedStatement.new = function(statementIndex, $arguments) {
    this[statementIndex$] = statementIndex;
    this[$arguments$1] = $arguments;
    ;
  }).prototype = executor$.ArgumentsForBatchedStatement.prototype;
  dart$.addTypeTests(executor$.ArgumentsForBatchedStatement);
  dart$.addTypeCaches(executor$.ArgumentsForBatchedStatement);
  dart$.setLibraryUri(executor$.ArgumentsForBatchedStatement, I[0]);
  dart$.setFieldSignature(executor$.ArgumentsForBatchedStatement, () => ({
    __proto__: dart$.getFields(executor$.ArgumentsForBatchedStatement.__proto__),
    statementIndex: dart$.finalFieldType(core.int),
    arguments: dart$.finalFieldType(core.List$(dart$.nullable(core.Object)))
  }));
  dart$.defineExtensionMethods(executor$.ArgumentsForBatchedStatement, ['_equals', 'toString']);
  dart$.defineExtensionAccessors(executor$.ArgumentsForBatchedStatement, ['hashCode']);
  executor$.TransactionExecutor = class TransactionExecutor extends executor$.QueryExecutor {};
  (executor$.TransactionExecutor.new = function() {
    ;
  }).prototype = executor$.TransactionExecutor.prototype;
  dart$.addTypeTests(executor$.TransactionExecutor);
  dart$.addTypeCaches(executor$.TransactionExecutor);
  dart$.setLibraryUri(executor$.TransactionExecutor, I[0]);
  dart$.defineLazy(executor$, {
    /*executor$._equality*/get _equality() {
      return C[71] || CT.C71;
    }
  }, false);
  connection_pool.MultiExecutor = class MultiExecutor extends executor$.QueryExecutor {
    static new(opts) {
      let read = opts && 'read' in opts ? opts.read : null;
      let write = opts && 'write' in opts ? opts.write : null;
      return new connection_pool._MultiExecutorImpl.new(read, write);
    }
    static ['_#new#tearOff'](opts) {
      let read = opts && 'read' in opts ? opts.read : null;
      let write = opts && 'write' in opts ? opts.write : null;
      return connection_pool.MultiExecutor.new({read: read, write: write});
    }
  };
  (connection_pool.MultiExecutor.__ = function() {
    ;
  }).prototype = connection_pool.MultiExecutor.prototype;
  dart$.addTypeTests(connection_pool.MultiExecutor);
  dart$.addTypeCaches(connection_pool.MultiExecutor);
  dart$.setStaticMethodSignature(connection_pool.MultiExecutor, () => ['new']);
  dart$.setLibraryUri(connection_pool.MultiExecutor, I[15]);
  var _reads$ = dart$.privateName(connection_pool, "_reads");
  var _writes$ = dart$.privateName(connection_pool, "_writes");
  connection_pool._MultiExecutorImpl = class _MultiExecutorImpl extends connection_pool.MultiExecutor {
    static ['_#new#tearOff'](_reads, _writes) {
      return new connection_pool._MultiExecutorImpl.new(_reads, _writes);
    }
    ensureOpen(user) {
      return async.async(core.bool, (function* ensureOpen() {
        yield this[_writes$].ensureOpen(user);
        yield this[_reads$].ensureOpen(new connection_pool._NoMigrationsWrapper.new(user));
        return true;
      }).bind(this));
    }
    beginTransaction() {
      return this[_writes$].beginTransaction();
    }
    runBatched(statements) {
      return async.async(dart$.void, (function* runBatched() {
        yield this[_writes$].runBatched(statements);
      }).bind(this));
    }
    runCustom(statement, args = null) {
      return async.async(dart$.void, (function* runCustom() {
        yield this[_writes$].runCustom(statement, args);
      }).bind(this));
    }
    runDelete(statement, args) {
      return async.async(core.int, (function* runDelete() {
        return yield this[_writes$].runDelete(statement, args);
      }).bind(this));
    }
    runInsert(statement, args) {
      return async.async(core.int, (function* runInsert() {
        return yield this[_writes$].runInsert(statement, args);
      }).bind(this));
    }
    runSelect(statement, args) {
      return async.async(T$.ListOfMapOfString$ObjectN(), (function* runSelect() {
        return yield this[_reads$].runSelect(statement, args);
      }).bind(this));
    }
    runUpdate(statement, args) {
      return async.async(core.int, (function* runUpdate() {
        return yield this[_writes$].runUpdate(statement, args);
      }).bind(this));
    }
    close() {
      return async.async(dart$.void, (function* close() {
        yield this[_writes$].close();
        yield this[_reads$].close();
      }).bind(this));
    }
  };
  (connection_pool._MultiExecutorImpl.new = function(_reads, _writes) {
    this[_reads$] = _reads;
    this[_writes$] = _writes;
    connection_pool._MultiExecutorImpl.__proto__.__.call(this);
    ;
  }).prototype = connection_pool._MultiExecutorImpl.prototype;
  dart$.addTypeTests(connection_pool._MultiExecutorImpl);
  dart$.addTypeCaches(connection_pool._MultiExecutorImpl);
  dart$.setMethodSignature(connection_pool._MultiExecutorImpl, () => ({
    __proto__: dart$.getMethods(connection_pool._MultiExecutorImpl.__proto__),
    ensureOpen: dart$.fnType(async.Future$(core.bool), [executor$.QueryExecutorUser]),
    beginTransaction: dart$.fnType(executor$.TransactionExecutor, []),
    runBatched: dart$.fnType(async.Future$(dart$.void), [executor$.BatchedStatements]),
    runCustom: dart$.fnType(async.Future$(dart$.void), [core.String], [dart$.nullable(core.List$(dart$.nullable(core.Object)))]),
    runDelete: dart$.fnType(async.Future$(core.int), [core.String, core.List$(dart$.nullable(core.Object))]),
    runInsert: dart$.fnType(async.Future$(core.int), [core.String, core.List$(dart$.nullable(core.Object))]),
    runSelect: dart$.fnType(async.Future$(core.List$(core.Map$(core.String, dart$.nullable(core.Object)))), [core.String, core.List$(dart$.nullable(core.Object))]),
    runUpdate: dart$.fnType(async.Future$(core.int), [core.String, core.List$(dart$.nullable(core.Object))])
  }));
  dart$.setLibraryUri(connection_pool._MultiExecutorImpl, I[15]);
  dart$.setFieldSignature(connection_pool._MultiExecutorImpl, () => ({
    __proto__: dart$.getFields(connection_pool._MultiExecutorImpl.__proto__),
    [_reads$]: dart$.finalFieldType(executor$.QueryExecutor),
    [_writes$]: dart$.finalFieldType(executor$.QueryExecutor)
  }));
  connection_pool._NoMigrationsWrapper = class _NoMigrationsWrapper extends executor$.QueryExecutorUser {
    static ['_#new#tearOff'](inner) {
      return new connection_pool._NoMigrationsWrapper.new(inner);
    }
    get schemaVersion() {
      return this.inner.schemaVersion;
    }
    beforeOpen(executor, details) {
      return async.async(dart$.void, function* beforeOpen() {
      });
    }
  };
  (connection_pool._NoMigrationsWrapper.new = function(inner) {
    this.inner = inner;
    ;
  }).prototype = connection_pool._NoMigrationsWrapper.prototype;
  dart$.addTypeTests(connection_pool._NoMigrationsWrapper);
  dart$.addTypeCaches(connection_pool._NoMigrationsWrapper);
  dart$.setMethodSignature(connection_pool._NoMigrationsWrapper, () => ({
    __proto__: dart$.getMethods(connection_pool._NoMigrationsWrapper.__proto__),
    beforeOpen: dart$.fnType(async.Future$(dart$.void), [executor$.QueryExecutor, query_builder.OpeningDetails])
  }));
  dart$.setGetterSignature(connection_pool._NoMigrationsWrapper, () => ({
    __proto__: dart$.getGetters(connection_pool._NoMigrationsWrapper.__proto__),
    schemaVersion: core.int
  }));
  dart$.setLibraryUri(connection_pool._NoMigrationsWrapper, I[15]);
  dart$.setFieldSignature(connection_pool._NoMigrationsWrapper, () => ({
    __proto__: dart$.getFields(connection_pool._NoMigrationsWrapper.__proto__),
    inner: dart$.finalFieldType(executor$.QueryExecutorUser)
  }));
  var message$ = dart$.privateName(exceptions, "InvalidDataException.message");
  var errors$ = dart$.privateName(exceptions, "InvalidDataException.errors");
  exceptions.InvalidDataException = class InvalidDataException extends core.Object {
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    get errors() {
      return this[errors$];
    }
    set errors(value) {
      super.errors = value;
    }
    static ['_#new#tearOff'](message, errors = C[49] || CT.C49) {
      return new exceptions.InvalidDataException.new(message, errors);
    }
    toString() {
      return "InvalidDataException: " + this.message;
    }
  };
  (exceptions.InvalidDataException.new = function(message, errors = C[49] || CT.C49) {
    this[message$] = message;
    this[errors$] = errors;
    ;
  }).prototype = exceptions.InvalidDataException.prototype;
  dart$.addTypeTests(exceptions.InvalidDataException);
  dart$.addTypeCaches(exceptions.InvalidDataException);
  exceptions.InvalidDataException[dart$.implements] = () => [core.Exception];
  dart$.setLibraryUri(exceptions.InvalidDataException, I[16]);
  dart$.setFieldSignature(exceptions.InvalidDataException, () => ({
    __proto__: dart$.getFields(exceptions.InvalidDataException.__proto__),
    message: dart$.finalFieldType(core.String),
    errors: dart$.finalFieldType(core.Map$(data_verification.VerificationMeta, data_verification.VerificationResult))
  }));
  dart$.defineExtensionMethods(exceptions.InvalidDataException, ['toString']);
  var message$0 = dart$.privateName(exceptions, "DriftWrappedException.message");
  var cause$ = dart$.privateName(exceptions, "DriftWrappedException.cause");
  var trace$ = dart$.privateName(exceptions, "DriftWrappedException.trace");
  exceptions.DriftWrappedException = class DriftWrappedException extends core.Object {
    get message() {
      return this[message$0];
    }
    set message(value) {
      super.message = value;
    }
    get cause() {
      return this[cause$];
    }
    set cause(value) {
      super.cause = value;
    }
    get trace() {
      return this[trace$];
    }
    set trace(value) {
      super.trace = value;
    }
    static ['_#new#tearOff'](opts) {
      let message = opts && 'message' in opts ? opts.message : null;
      let cause = opts && 'cause' in opts ? opts.cause : null;
      let trace = opts && 'trace' in opts ? opts.trace : null;
      return new exceptions.DriftWrappedException.new({message: message, cause: cause, trace: trace});
    }
    toString() {
      return dart$.str(this.cause) + " at \n" + dart$.str(this.trace) + "\n" + "Drift detected a possible cause for this: " + this.message;
    }
  };
  (exceptions.DriftWrappedException.new = function(opts) {
    let message = opts && 'message' in opts ? opts.message : null;
    let cause = opts && 'cause' in opts ? opts.cause : null;
    let trace = opts && 'trace' in opts ? opts.trace : null;
    this[message$0] = message;
    this[cause$] = cause;
    this[trace$] = trace;
    ;
  }).prototype = exceptions.DriftWrappedException.prototype;
  dart$.addTypeTests(exceptions.DriftWrappedException);
  dart$.addTypeCaches(exceptions.DriftWrappedException);
  exceptions.DriftWrappedException[dart$.implements] = () => [core.Exception];
  dart$.setLibraryUri(exceptions.DriftWrappedException, I[16]);
  dart$.setFieldSignature(exceptions.DriftWrappedException, () => ({
    __proto__: dart$.getFields(exceptions.DriftWrappedException.__proto__),
    message: dart$.finalFieldType(core.String),
    cause: dart$.finalFieldType(dart$.nullable(core.Object)),
    trace: dart$.finalFieldType(dart$.nullable(core.StackTrace))
  }));
  dart$.defineExtensionMethods(exceptions.DriftWrappedException, ['toString']);
  var cause$0 = dart$.privateName(exceptions, "CouldNotRollBackException.cause");
  var originalStackTrace$ = dart$.privateName(exceptions, "CouldNotRollBackException.originalStackTrace");
  var exception$ = dart$.privateName(exceptions, "CouldNotRollBackException.exception");
  exceptions.CouldNotRollBackException = class CouldNotRollBackException extends core.Object {
    get cause() {
      return this[cause$0];
    }
    set cause(value) {
      super.cause = value;
    }
    get originalStackTrace() {
      return this[originalStackTrace$];
    }
    set originalStackTrace(value) {
      super.originalStackTrace = value;
    }
    get exception() {
      return this[exception$];
    }
    set exception(value) {
      super.exception = value;
    }
    static ['_#new#tearOff'](cause, originalStackTrace, exception) {
      return new exceptions.CouldNotRollBackException.new(cause, originalStackTrace, exception);
    }
    toString() {
      return "CouldNotRollBackException: " + dart$.str(this.exception) + ". \n" + "For context: The transaction was rolled back because of " + dart$.str(this.cause) + ", which " + "was thrown here: \n" + dart$.str(this.originalStackTrace);
    }
  };
  (exceptions.CouldNotRollBackException.new = function(cause, originalStackTrace, exception) {
    this[cause$0] = cause;
    this[originalStackTrace$] = originalStackTrace;
    this[exception$] = exception;
    ;
  }).prototype = exceptions.CouldNotRollBackException.prototype;
  dart$.addTypeTests(exceptions.CouldNotRollBackException);
  dart$.addTypeCaches(exceptions.CouldNotRollBackException);
  exceptions.CouldNotRollBackException[dart$.implements] = () => [core.Exception];
  dart$.setLibraryUri(exceptions.CouldNotRollBackException, I[16]);
  dart$.setFieldSignature(exceptions.CouldNotRollBackException, () => ({
    __proto__: dart$.getFields(exceptions.CouldNotRollBackException.__proto__),
    cause: dart$.finalFieldType(core.Object),
    originalStackTrace: dart$.finalFieldType(core.StackTrace),
    exception: dart$.finalFieldType(core.Object)
  }));
  dart$.defineExtensionMethods(exceptions.CouldNotRollBackException, ['toString']);
  var dartGetterName$ = dart$.privateName(data_verification, "VerificationMeta.dartGetterName");
  data_verification.VerificationMeta = class VerificationMeta extends core.Object {
    get dartGetterName() {
      return this[dartGetterName$];
    }
    set dartGetterName(value) {
      super.dartGetterName = value;
    }
    static ['_#new#tearOff'](dartGetterName) {
      return new data_verification.VerificationMeta.new(dartGetterName);
    }
  };
  (data_verification.VerificationMeta.new = function(dartGetterName) {
    this[dartGetterName$] = dartGetterName;
    ;
  }).prototype = data_verification.VerificationMeta.prototype;
  dart$.addTypeTests(data_verification.VerificationMeta);
  dart$.addTypeCaches(data_verification.VerificationMeta);
  dart$.setLibraryUri(data_verification.VerificationMeta, I[17]);
  dart$.setFieldSignature(data_verification.VerificationMeta, () => ({
    __proto__: dart$.getFields(data_verification.VerificationMeta.__proto__),
    dartGetterName: dart$.finalFieldType(core.String)
  }));
  const success$ = VerificationResult_success;
  const message$1 = VerificationResult_message;
  data_verification.VerificationResult = class VerificationResult extends core.Object {
    get success() {
      return this[success$];
    }
    set success(value) {
      super.success = value;
    }
    get message() {
      return this[message$1];
    }
    set message(value) {
      super.message = value;
    }
    static ['_#new#tearOff'](success, message) {
      return new data_verification.VerificationResult.new(success, message);
    }
    static ['_#success#tearOff']() {
      return new data_verification.VerificationResult.success();
    }
    static ['_#failure#tearOff'](message) {
      return new data_verification.VerificationResult.failure(message);
    }
  };
  (data_verification.VerificationResult.new = function(success, message) {
    this[success$] = success;
    this[message$1] = message;
    ;
  }).prototype = data_verification.VerificationResult.prototype;
  (data_verification.VerificationResult.success = function() {
    this[success$] = true;
    this[message$1] = null;
    ;
  }).prototype = data_verification.VerificationResult.prototype;
  (data_verification.VerificationResult.failure = function(message) {
    this[message$1] = message;
    this[success$] = false;
    ;
  }).prototype = data_verification.VerificationResult.prototype;
  dart$.addTypeTests(data_verification.VerificationResult);
  dart$.addTypeCaches(data_verification.VerificationResult);
  dart$.setLibraryUri(data_verification.VerificationResult, I[17]);
  dart$.setFieldSignature(data_verification.VerificationResult, () => ({
    __proto__: dart$.getFields(data_verification.VerificationResult.__proto__),
    success: dart$.finalFieldType(core.bool),
    message: dart$.finalFieldType(dart$.nullable(core.String))
  }));
  var _errors = dart$.privateName(data_verification, "_errors");
  const _errors$ = VerificationContext__errors;
  data_verification.VerificationContext = class VerificationContext extends core.Object {
    get [_errors]() {
      return this[_errors$];
    }
    set [_errors](value) {
      super[_errors] = value;
    }
    get dataValid() {
      return this[_errors][$isEmpty];
    }
    static ['_#new#tearOff']() {
      return new data_verification.VerificationContext.new();
    }
    static ['_#notEnabled#tearOff']() {
      return new data_verification.VerificationContext.notEnabled();
    }
    handle(meta, result) {
      if (!result.success) {
        this[_errors][$_set](meta, result);
      }
    }
    missing(meta) {
      this[_errors][$_set](meta, C[76] || CT.C76);
    }
    throwIfInvalid(dataObject) {
      if (this.dataValid) return;
      let messageBuilder = new core.StringBuffer.new("Sorry, " + dart$.str(dataObject) + " cannot be used for that because: \n");
      this[_errors][$forEach](dart$.fn((meta, result) => {
        messageBuilder.write("• " + meta.dartGetterName + ": " + dart$.str(result.message) + "\n");
      }, T$.VerificationMetaAndVerificationResultTovoid()));
      dart$.throw(new exceptions.InvalidDataException.new(messageBuilder.toString(), this[_errors]));
    }
  };
  (data_verification.VerificationContext.new = function() {
    this[_errors$] = new (T$.LinkedMapOfVerificationMeta$VerificationResult()).new();
    ;
  }).prototype = data_verification.VerificationContext.prototype;
  (data_verification.VerificationContext.notEnabled = function() {
    this[_errors$] = C[49] || CT.C49;
    ;
  }).prototype = data_verification.VerificationContext.prototype;
  dart$.addTypeTests(data_verification.VerificationContext);
  dart$.addTypeCaches(data_verification.VerificationContext);
  dart$.setMethodSignature(data_verification.VerificationContext, () => ({
    __proto__: dart$.getMethods(data_verification.VerificationContext.__proto__),
    handle: dart$.fnType(dart$.void, [data_verification.VerificationMeta, data_verification.VerificationResult]),
    missing: dart$.fnType(dart$.void, [data_verification.VerificationMeta]),
    throwIfInvalid: dart$.fnType(dart$.void, [dart$.dynamic])
  }));
  dart$.setGetterSignature(data_verification.VerificationContext, () => ({
    __proto__: dart$.getGetters(data_verification.VerificationContext.__proto__),
    dataValid: core.bool
  }));
  dart$.setLibraryUri(data_verification.VerificationContext, I[17]);
  dart$.setFieldSignature(data_verification.VerificationContext, () => ({
    __proto__: dart$.getFields(data_verification.VerificationContext.__proto__),
    [_errors]: dart$.finalFieldType(core.Map$(data_verification.VerificationMeta, data_verification.VerificationResult))
  }));
  const _is_Insertable_default = Symbol('_is_Insertable_default');
  data_class.Insertable$ = dart$.generic(D => {
    class Insertable extends core.Object {}
    (Insertable.new = function() {
      ;
    }).prototype = Insertable.prototype;
    dart$.addTypeTests(Insertable);
    Insertable.prototype[_is_Insertable_default] = true;
    dart$.addTypeCaches(Insertable);
    dart$.setLibraryUri(Insertable, I[18]);
    return Insertable;
  });
  data_class.Insertable = data_class.Insertable$();
  dart$.addTypeTests(data_class.Insertable, _is_Insertable_default);
  data_class.DataClass = class DataClass extends core.Object {
    toJsonString(opts) {
      let serializer = opts && 'serializer' in opts ? opts.serializer : null;
      return convert.json.encode(this.toJson({serializer: serializer}));
    }
    static parseJson(jsonString) {
      return convert.json.decode(jsonString);
    }
  };
  (data_class.DataClass.new = function() {
    ;
  }).prototype = data_class.DataClass.prototype;
  dart$.addTypeTests(data_class.DataClass);
  dart$.addTypeCaches(data_class.DataClass);
  dart$.setMethodSignature(data_class.DataClass, () => ({
    __proto__: dart$.getMethods(data_class.DataClass.__proto__),
    toJsonString: dart$.fnType(core.String, [], {serializer: dart$.nullable(data_class.ValueSerializer)}, {})
  }));
  dart$.setStaticMethodSignature(data_class.DataClass, () => ['parseJson']);
  dart$.setLibraryUri(data_class.DataClass, I[18]);
  const _is_UpdateCompanion_default = Symbol('_is_UpdateCompanion_default');
  var MapEquality__valueEquality = dart$.privateName(equality, "MapEquality._valueEquality");
  var MapEquality__keyEquality = dart$.privateName(equality, "MapEquality._keyEquality");
  data_class.UpdateCompanion$ = dart$.generic(D => {
    var __t$UpdateCompanionOfD = () => (__t$UpdateCompanionOfD = dart$.constFn(data_class.UpdateCompanion$(D)))();
    class UpdateCompanion extends core.Object {
      get hashCode() {
        return data_class.UpdateCompanion._mapEquality.hash(this.toColumns(false));
      }
      _equals(other) {
        if (other == null) return false;
        if (this === other) return true;
        if (!__t$UpdateCompanionOfD().is(other)) return false;
        return data_class.UpdateCompanion._mapEquality.equals(other.toColumns(false), this.toColumns(false));
      }
    }
    (UpdateCompanion.new = function() {
      ;
    }).prototype = UpdateCompanion.prototype;
    dart$.addTypeTests(UpdateCompanion);
    UpdateCompanion.prototype[_is_UpdateCompanion_default] = true;
    dart$.addTypeCaches(UpdateCompanion);
    UpdateCompanion[dart$.implements] = () => [data_class.Insertable$(D)];
    dart$.setLibraryUri(UpdateCompanion, I[18]);
    dart$.setStaticFieldSignature(UpdateCompanion, () => ['_mapEquality']);
    dart$.defineExtensionMethods(UpdateCompanion, ['_equals']);
    dart$.defineExtensionAccessors(UpdateCompanion, ['hashCode']);
    return UpdateCompanion;
  });
  data_class.UpdateCompanion = data_class.UpdateCompanion$();
  dart$.defineLazy(data_class.UpdateCompanion, {
    /*data_class.UpdateCompanion._mapEquality*/get _mapEquality() {
      return C[77] || CT.C77;
    }
  }, false);
  dart$.addTypeTests(data_class.UpdateCompanion, _is_UpdateCompanion_default);
  var data$0 = dart$.privateName(data_class, "RawValuesInsertable.data");
  const _is_RawValuesInsertable_default = Symbol('_is_RawValuesInsertable_default');
  data_class.RawValuesInsertable$ = dart$.generic(D => {
    class RawValuesInsertable extends core.Object {
      get data() {
        return this[data$0];
      }
      set data(value) {
        super.data = value;
      }
      static ['_#new#tearOff'](D, data) {
        return new (data_class.RawValuesInsertable$(D)).new(data);
      }
      toColumns(nullToAbsent) {
        return this.data;
      }
      toString() {
        return "RawValuesInsertable(" + dart$.str(this.data) + ")";
      }
    }
    (RawValuesInsertable.new = function(data) {
      this[data$0] = data;
      ;
    }).prototype = RawValuesInsertable.prototype;
    dart$.addTypeTests(RawValuesInsertable);
    RawValuesInsertable.prototype[_is_RawValuesInsertable_default] = true;
    dart$.addTypeCaches(RawValuesInsertable);
    RawValuesInsertable[dart$.implements] = () => [data_class.Insertable$(D)];
    dart$.setMethodSignature(RawValuesInsertable, () => ({
      __proto__: dart$.getMethods(RawValuesInsertable.__proto__),
      toColumns: dart$.fnType(core.Map$(core.String, query_builder.Expression), [core.bool])
    }));
    dart$.setLibraryUri(RawValuesInsertable, I[18]);
    dart$.setFieldSignature(RawValuesInsertable, () => ({
      __proto__: dart$.getFields(RawValuesInsertable.__proto__),
      data: dart$.finalFieldType(core.Map$(core.String, query_builder.Expression))
    }));
    dart$.defineExtensionMethods(RawValuesInsertable, ['toString']);
    return RawValuesInsertable;
  });
  data_class.RawValuesInsertable = data_class.RawValuesInsertable$();
  dart$.addTypeTests(data_class.RawValuesInsertable, _is_RawValuesInsertable_default);
  var present = dart$.privateName(data_class, "Value.present");
  var _value$0 = dart$.privateName(data_class, "Value._value");
  var _value$1 = dart$.privateName(data_class, "_value");
  const _is_Value_default = Symbol('_is_Value_default');
  data_class.Value$ = dart$.generic(T => {
    class Value extends core.Object {
      get present() {
        return this[present];
      }
      set present(value) {
        super.present = value;
      }
      get [_value$1]() {
        return this[_value$0];
      }
      set [_value$1](value) {
        super[_value$1] = value;
      }
      get value() {
        return T.as(this[_value$1]);
      }
      static ['_#new#tearOff'](T, value) {
        return new (data_class.Value$(T)).new(value);
      }
      static ['_#absent#tearOff'](T) {
        return new (data_class.Value$(T)).absent();
      }
      static ['_#ofNullable#tearOff'](T, value) {
        return new (data_class.Value$(T)).ofNullable(value);
      }
      toString() {
        return this.present ? "Value(" + dart$.str(this.value) + ")" : "Value.absent()";
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || data_class.Value.is(other) && this.present === other.present && dart$.equals(this[_value$1], other[_value$1]);
      }
      get hashCode() {
        return (this.present[$hashCode] ^ dart$.hashCode(this[_value$1])) >>> 0;
      }
    }
    (Value.new = function(value) {
      this[_value$0] = value;
      this[present] = true;
      ;
    }).prototype = Value.prototype;
    (Value.absent = function() {
      this[_value$0] = null;
      this[present] = false;
      ;
    }).prototype = Value.prototype;
    (Value.ofNullable = function(value) {
      if (!(value != null || !T.is(null))) dart$.assertFailed("Value.ofNullable(null) can't be used for a nullable T, since the " + "null value could be both absent and present.", I[19], 160, 11, "value != null || null is! T");
      this[_value$0] = value;
      this[present] = value != null;
      ;
    }).prototype = Value.prototype;
    dart$.addTypeTests(Value);
    Value.prototype[_is_Value_default] = true;
    dart$.addTypeCaches(Value);
    dart$.setGetterSignature(Value, () => ({
      __proto__: dart$.getGetters(Value.__proto__),
      value: T
    }));
    dart$.setLibraryUri(Value, I[18]);
    dart$.setFieldSignature(Value, () => ({
      __proto__: dart$.getFields(Value.__proto__),
      present: dart$.finalFieldType(core.bool),
      [_value$1]: dart$.finalFieldType(dart$.nullable(T))
    }));
    dart$.defineExtensionMethods(Value, ['toString', '_equals']);
    dart$.defineExtensionAccessors(Value, ['hashCode']);
    return Value;
  });
  data_class.Value = data_class.Value$();
  dart$.addTypeTests(data_class.Value, _is_Value_default);
  data_class.ValueSerializer = class ValueSerializer extends core.Object {
    static ['_#defaults#tearOff']() {
      return new data_class._DefaultValueSerializer.new();
    }
  };
  (data_class.ValueSerializer.new = function() {
    ;
  }).prototype = data_class.ValueSerializer.prototype;
  dart$.addTypeTests(data_class.ValueSerializer);
  dart$.addTypeCaches(data_class.ValueSerializer);
  dart$.setStaticMethodSignature(data_class.ValueSerializer, () => ['defaults']);
  dart$.setLibraryUri(data_class.ValueSerializer, I[18]);
  dart$.setStaticFieldSignature(data_class.ValueSerializer, () => ['_redirecting#']);
  data_class._DefaultValueSerializer = class _DefaultValueSerializer extends data_class.ValueSerializer {
    static ['_#new#tearOff']() {
      return new data_class._DefaultValueSerializer.new();
    }
    fromJson(T, json) {
      if (json == null) {
        return T.as(null);
      }
      let _typeList = _interceptors.JSArray$(T).of([]);
      if (T$.ListOfDateTimeN().is(_typeList)) {
        return T.as(new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(json)));
      }
      if (T$.ListOfdoubleN().is(_typeList) && core.int.is(json)) {
        return T.as(json[$toDouble]());
      }
      if (T$.ListOfUint8ListN().is(_typeList) && !typed_data.Uint8List.is(json)) {
        let asList = core.List.as(json)[$cast](core.int);
        return T.as(_native_typed_data.NativeUint8List.fromList(asList));
      }
      return T.as(json);
    }
    toJson(T, value) {
      if (core.DateTime.is(value)) {
        return value.millisecondsSinceEpoch;
      }
      return value;
    }
  };
  (data_class._DefaultValueSerializer.new = function() {
    data_class._DefaultValueSerializer.__proto__.new.call(this);
    ;
  }).prototype = data_class._DefaultValueSerializer.prototype;
  dart$.addTypeTests(data_class._DefaultValueSerializer);
  dart$.addTypeCaches(data_class._DefaultValueSerializer);
  dart$.setMethodSignature(data_class._DefaultValueSerializer, () => ({
    __proto__: dart$.getMethods(data_class._DefaultValueSerializer.__proto__),
    fromJson: dart$.gFnType(T => [T, [dart$.dynamic]], T => [dart$.nullable(core.Object)]),
    toJson: dart$.gFnType(T => [dart$.dynamic, [T]], T => [dart$.nullable(core.Object)])
  }));
  dart$.setLibraryUri(data_class._DefaultValueSerializer, I[18]);
  var row$ = dart$.privateName(custom_result_set, "CustomResultSet.row");
  custom_result_set.CustomResultSet = class CustomResultSet extends core.Object {
    get row() {
      return this[row$];
    }
    set row(value) {
      super.row = value;
    }
  };
  (custom_result_set.CustomResultSet.new = function(row) {
    this[row$] = row;
    ;
  }).prototype = custom_result_set.CustomResultSet.prototype;
  dart$.addTypeTests(custom_result_set.CustomResultSet);
  dart$.addTypeCaches(custom_result_set.CustomResultSet);
  dart$.setLibraryUri(custom_result_set.CustomResultSet, I[20]);
  dart$.setFieldSignature(custom_result_set.CustomResultSet, () => ({
    __proto__: dart$.getFields(custom_result_set.CustomResultSet.__proto__),
    row: dart$.finalFieldType(query_builder.QueryRow)
  }));
  var _parent$ = dart$.privateName(transactions, "_parent");
  var _dispatchAndClose = dart$.privateName(transactions, "_dispatchAndClose");
  var connection$ = dart$.privateName(runtime_api, "DatabaseConnectionUser.connection");
  var _customWrite = dart$.privateName(runtime_api, "_customWrite");
  var _runConnectionZoned = dart$.privateName(runtime_api, "_runConnectionZoned");
  var _commit = dart$.privateName(runtime_api, "_commit");
  runtime_api.DatabaseConnectionUser = class DatabaseConnectionUser extends core.Object {
    get connection() {
      return this[connection$];
    }
    set connection(value) {
      super.connection = value;
    }
    get typeSystem() {
      return this.connection.typeSystem;
    }
    get executor() {
      return this.connection.executor;
    }
    get streamQueries() {
      return this.connection.streamQueries;
    }
    createStream(stmt) {
      return this.streamQueries.registerStream(stmt);
    }
    alias(T, D, table, alias) {
      return table.createAlias(alias).asDslTable;
    }
    get resolvedEngine() {
      let t115;
      t115 = T$.DatabaseConnectionUserN().as(async.Zone.current._get(runtime_api._zoneRootUserKey));
      return t115 == null ? this : t115;
    }
    markTablesUpdated(tables) {
      this.notifyUpdates((() => {
        let t115 = T$.LinkedHashSetOfTableUpdate().new();
        for (let table of tables)
          t115.add(new runtime_api.TableUpdate.new(table.actualTableName));
        return t115;
      })());
    }
    notifyUpdates(updates) {
      let withRulesApplied = this.attachedDatabase.streamUpdateRules.apply(updates);
      this.resolvedEngine.streamQueries.handleTableUpdates(withRulesApplied);
    }
    tableUpdates(query = C[78] || CT.C78) {
      let engine = this.resolvedEngine;
      return T$.StreamOfSetOfTableUpdate().multi(dart$.fn(controller => {
        let source = engine.streamQueries.updatesForSync(query);
        source.pipe(controller);
      }, T$.MultiStreamControllerOfSetOfTableUpdateTovoid()), {isBroadcast: true});
    }
    doWhenOpened(T, fn) {
      return this.executor.ensureOpen(this.attachedDatabase).then(T, dart$.fn(_ => fn(this.executor), dart$.fnType(async.FutureOr$(T), [core.bool])));
    }
    into(T, D, table) {
      return new (query_builder.InsertStatement$(T, D)).new(this.resolvedEngine, table);
    }
    update(Tbl, R, table) {
      return new (query_builder.UpdateStatement$(Tbl, R)).new(this.resolvedEngine, table);
    }
    select(T, R, table, opts) {
      let distinct = opts && 'distinct' in opts ? opts.distinct : false;
      return new (query_builder.SimpleSelectStatement$(T, R)).new(this.resolvedEngine, table, {distinct: distinct});
    }
    selectOnly(T, R, table, opts) {
      let distinct = opts && 'distinct' in opts ? opts.distinct : false;
      let includeJoinedTableColumns = opts && 'includeJoinedTableColumns' in opts ? opts.includeJoinedTableColumns : true;
      return new (query_builder.JoinedSelectStatement$(T, R)).new(this.resolvedEngine, table, T$.JSArrayOfJoinOfHasResultSet$dynamic().of([]), distinct, false, includeJoinedTableColumns);
    }
    delete(T, D, table) {
      return new (query_builder.DeleteStatement$(T, D)).new(this.resolvedEngine, table);
    }
    customUpdate(query, opts) {
      let variables = opts && 'variables' in opts ? opts.variables : C[79] || CT.C79;
      let updates = opts && 'updates' in opts ? opts.updates : null;
      let updateKind = opts && 'updateKind' in opts ? opts.updateKind : null;
      return async.async(core.int, (function* customUpdate() {
        return this[_customWrite](core.int, query, variables, updates, updateKind, dart$.fn((executor, sql, vars) => executor.runUpdate(sql, vars), T$.QueryExecutorAndStringAndListToFutureOfint()));
      }).bind(this));
    }
    customInsert(query, opts) {
      let variables = opts && 'variables' in opts ? opts.variables : C[79] || CT.C79;
      let updates = opts && 'updates' in opts ? opts.updates : null;
      return this[_customWrite](core.int, query, variables, updates, runtime_api.UpdateKind.insert, dart$.fn((executor, sql, vars) => executor.runInsert(sql, vars), T$.QueryExecutorAndStringAndListToFutureOfint()));
    }
    customWriteReturning(query, opts) {
      let variables = opts && 'variables' in opts ? opts.variables : C[79] || CT.C79;
      let updates = opts && 'updates' in opts ? opts.updates : null;
      let updateKind = opts && 'updateKind' in opts ? opts.updateKind : null;
      return this[_customWrite](T$.ListOfQueryRow(), query, variables, updates, updateKind, dart$.fn((executor, sql, vars) => async.async(T$.ListOfQueryRow(), (function*() {
        let rows = (yield executor.runSelect(sql, vars));
        return (() => {
          let t116 = T$.JSArrayOfQueryRow().of([]);
          for (let row of rows)
            t116.push(new query_builder.QueryRow.new(row, this.attachedDatabase));
          return t116;
        })();
      }).bind(this)), T$.QueryExecutorAndStringAndListToFutureOfListOfQueryRow()));
    }
    [_customWrite](T, query, variables, updates, updateKind, writer) {
      return async.async(T, (function* _customWrite() {
        let engine = this.resolvedEngine;
        let ctx = new query_builder.GenerationContext.fromDb(engine);
        let mappedArgs = variables[$map](dart$.dynamic, dart$.fn(v => v.mapToSimpleValue(ctx), T$.VariableTodynamic()))[$toList]();
        let result = (yield engine.doWhenOpened(T, dart$.fn(e => writer(e, query, mappedArgs), dart$.fnType(async.Future$(T), [executor$.QueryExecutor]))));
        if (updates != null) {
          engine.notifyUpdates((() => {
            let t117 = T$.LinkedHashSetOfTableUpdate().new();
            for (let table of updates)
              t117.add(new runtime_api.TableUpdate.new(table.actualTableName, {kind: updateKind}));
            return t117;
          })());
        }
        return result;
      }).bind(this));
    }
    customSelect(query, opts) {
      let variables = opts && 'variables' in opts ? opts.variables : C[79] || CT.C79;
      let readsFrom = opts && 'readsFrom' in opts ? opts.readsFrom : C[80] || CT.C80;
      return new query_builder.CustomSelectStatement.new(query, variables, readsFrom, this.resolvedEngine);
    }
    customSelectQuery(query, opts) {
      let variables = opts && 'variables' in opts ? opts.variables : C[79] || CT.C79;
      let readsFrom = opts && 'readsFrom' in opts ? opts.readsFrom : C[80] || CT.C80;
      return this.customSelect(query, {variables: variables, readsFrom: readsFrom});
    }
    customStatement(statement, args = null) {
      let engine = this.resolvedEngine;
      return engine.doWhenOpened(dart$.void, dart$.fn(executor => executor.runCustom(statement, args), T$.QueryExecutorToFutureOfvoid()));
    }
    transaction(T, action) {
      return async.async(T, (function* transaction() {
        let resolved = this.resolvedEngine;
        if (transactions.Transaction.is(resolved)) {
          return action();
        }
        return yield resolved.doWhenOpened(T, dart$.fn(executor => {
          let transactionExecutor = executor.beginTransaction();
          let transaction = new transactions.Transaction.new(this, transactionExecutor);
          return this[_runConnectionZoned](T, transaction, dart$.fn(() => async.async(T, function*() {
            let success = false;
            try {
              let result = (yield action());
              success = true;
              return result;
            } catch (e$) {
              let e = dart$.getThrown(e$);
              let s = dart$.stackTrace(e$);
              if (core.Object.is(e)) {
                try {
                  yield transactionExecutor.rollback();
                } catch (e$0) {
                  let rollBackException = dart$.getThrown(e$0);
                  if (core.Object.is(rollBackException)) {
                    dart$.throw(new exceptions.CouldNotRollBackException.new(e, s, rollBackException));
                  } else
                    throw e$0;
                }
                dart$.rethrow(e$);
              } else
                throw e$;
            } finally {
              if (success) {
                try {
                  yield transaction.complete();
                } catch (e$1) {
                  let e = dart$.getThrown(e$1);
                  if (core.Object.is(e)) {
                    yield transactionExecutor.rollback();
                    dart$.rethrow(e$1);
                  } else
                    throw e$1;
                }
              }
              yield transaction.disposeChildStreams();
            }
          }), dart$.fnType(async.Future$(T), [])));
        }, dart$.fnType(async.Future$(T), [executor$.QueryExecutor])));
      }).bind(this));
    }
    batch(runInBatch) {
      let engine = this.resolvedEngine;
      let batch = new runtime_api.Batch.__(engine, !transactions.Transaction.is(engine));
      let result = runInBatch(batch);
      if (async.Future.is(result)) {
        return result.then(dart$.void, dart$.fn(_ => batch[_commit](), T$.dynamicToFutureOfvoid()));
      } else {
        return batch[_commit]();
      }
    }
    [_runConnectionZoned](T, user, calculation) {
      return async.runZoned(async.Future$(T), calculation, {zoneValues: new (T$.LinkedMapOfObjectN$ObjectN()).from([runtime_api._zoneRootUserKey, user])});
    }
    $write(component, opts) {
      let t121;
      let hasMultipleTables = opts && 'hasMultipleTables' in opts ? opts.hasMultipleTables : null;
      let startIndex = opts && 'startIndex' in opts ? opts.startIndex : null;
      let context = (t121 = new query_builder.GenerationContext.fromDb(this), (() => {
        t121.explicitVariableIndex = startIndex;
        return t121;
      })());
      if (hasMultipleTables != null) {
        context.hasMultipleTables = hasMultipleTables;
      }
      component.writeInto(context);
      return context;
    }
    $writeInsertable(table, insertable, opts) {
      let t121;
      let startIndex = opts && 'startIndex' in opts ? opts.startIndex : null;
      let context = (t121 = new query_builder.GenerationContext.fromDb(this), (() => {
        t121.explicitVariableIndex = startIndex;
        return t121;
      })());
      table.validateIntegrity(insertable, {isInserting: true});
      new (T$.InsertStatementOfTable$dynamic()).new(this, table).writeInsertable(context, insertable.toColumns(true));
      return context;
    }
    $expandVar(start, amount) {
      let buffer = new core.StringBuffer.new();
      let mark = this.executor.dialect === query_builder.SqlDialect.postgres ? "@" : "?";
      for (let x = 0; x < amount; x = x + 1) {
        buffer.write(mark + dart$.str(start + x));
        if (x !== amount - 1) {
          buffer.write(", ");
        }
      }
      return buffer.toString();
    }
  };
  (runtime_api.DatabaseConnectionUser.new = function(typeSystem, executor, opts) {
    let t115;
    let streamQueries = opts && 'streamQueries' in opts ? opts.streamQueries : null;
    this[connection$] = new runtime_api.DatabaseConnection.new(typeSystem, executor, (t115 = streamQueries, t115 == null ? new stream_queries.StreamQueryStore.new() : t115));
    ;
  }).prototype = runtime_api.DatabaseConnectionUser.prototype;
  (runtime_api.DatabaseConnectionUser.delegate = function(other, opts) {
    let t115, t115$, t115$0;
    let typeSystem = opts && 'typeSystem' in opts ? opts.typeSystem : null;
    let executor = opts && 'executor' in opts ? opts.executor : null;
    let streamQueries = opts && 'streamQueries' in opts ? opts.streamQueries : null;
    this[connection$] = new runtime_api.DatabaseConnection.new((t115 = typeSystem, t115 == null ? other.connection.typeSystem : t115), (t115$ = executor, t115$ == null ? other.connection.executor : t115$), (t115$0 = streamQueries, t115$0 == null ? other.connection.streamQueries : t115$0));
    ;
  }).prototype = runtime_api.DatabaseConnectionUser.prototype;
  (runtime_api.DatabaseConnectionUser.fromConnection = function(connection) {
    this[connection$] = connection;
    ;
  }).prototype = runtime_api.DatabaseConnectionUser.prototype;
  dart$.addTypeTests(runtime_api.DatabaseConnectionUser);
  dart$.addTypeCaches(runtime_api.DatabaseConnectionUser);
  dart$.setMethodSignature(runtime_api.DatabaseConnectionUser, () => ({
    __proto__: dart$.getMethods(runtime_api.DatabaseConnectionUser.__proto__),
    createStream: dart$.fnType(async.Stream$(core.List$(core.Map$(core.String, dart$.nullable(core.Object)))), [stream_queries.QueryStreamFetcher]),
    alias: dart$.gFnType((T, D) => [T, [query_builder.TableInfo$(T, D), core.String]], (T, D) => [dsl.Table, dart$.nullable(core.Object)]),
    markTablesUpdated: dart$.fnType(dart$.void, [core.Iterable$(query_builder.TableInfo$(dsl.Table, dart$.dynamic))]),
    notifyUpdates: dart$.fnType(dart$.void, [core.Set$(runtime_api.TableUpdate)]),
    tableUpdates: dart$.fnType(async.Stream$(core.Set$(runtime_api.TableUpdate)), [], [runtime_api.TableUpdateQuery]),
    doWhenOpened: dart$.gFnType(T => [async.Future$(T), [dart$.fnType(async.FutureOr$(T), [executor$.QueryExecutor])]], T => [dart$.nullable(core.Object)]),
    into: dart$.gFnType((T, D) => [query_builder.InsertStatement$(T, D), [query_builder.TableInfo$(T, D)]], (T, D) => [dsl.Table, dart$.nullable(core.Object)]),
    update: dart$.gFnType((Tbl, R) => [query_builder.UpdateStatement$(Tbl, R), [query_builder.TableInfo$(Tbl, R)]], (Tbl, R) => [dsl.Table, dart$.nullable(core.Object)]),
    select: dart$.gFnType((T, R) => [query_builder.SimpleSelectStatement$(T, R), [query_builder.ResultSetImplementation$(T, R)], {distinct: core.bool}, {}], (T, R) => [dsl.HasResultSet, dart$.nullable(core.Object)]),
    selectOnly: dart$.gFnType((T, R) => [query_builder.JoinedSelectStatement$(T, R), [query_builder.ResultSetImplementation$(T, R)], {distinct: core.bool, includeJoinedTableColumns: core.bool}, {}], (T, R) => [dsl.HasResultSet, dart$.nullable(core.Object)]),
    delete: dart$.gFnType((T, D) => [query_builder.DeleteStatement$(T, D), [query_builder.TableInfo$(T, D)]], (T, D) => [dsl.Table, dart$.nullable(core.Object)]),
    customUpdate: dart$.fnType(async.Future$(core.int), [core.String], {updateKind: dart$.nullable(runtime_api.UpdateKind), updates: dart$.nullable(core.Set$(query_builder.TableInfo$(dsl.Table, dart$.dynamic))), variables: core.List$(query_builder.Variable)}, {}),
    customInsert: dart$.fnType(async.Future$(core.int), [core.String], {updates: dart$.nullable(core.Set$(query_builder.TableInfo$(dsl.Table, dart$.dynamic))), variables: core.List$(query_builder.Variable)}, {}),
    customWriteReturning: dart$.fnType(async.Future$(core.List$(query_builder.QueryRow)), [core.String], {updateKind: dart$.nullable(runtime_api.UpdateKind), updates: dart$.nullable(core.Set$(query_builder.TableInfo$(dsl.Table, dart$.dynamic))), variables: core.List$(query_builder.Variable)}, {}),
    [_customWrite]: dart$.gFnType(T => [async.Future$(T), [core.String, core.List$(query_builder.Variable), dart$.nullable(core.Set$(query_builder.TableInfo$(dsl.Table, dart$.dynamic))), dart$.nullable(runtime_api.UpdateKind), dart$.fnType(async.Future$(T), [executor$.QueryExecutor, core.String, core.List])]], T => [dart$.nullable(core.Object)]),
    customSelect: dart$.fnType(query_builder.Selectable$(query_builder.QueryRow), [core.String], {readsFrom: core.Set$(query_builder.ResultSetImplementation), variables: core.List$(query_builder.Variable)}, {}),
    customSelectQuery: dart$.fnType(query_builder.Selectable$(query_builder.QueryRow), [core.String], {readsFrom: core.Set$(query_builder.ResultSetImplementation), variables: core.List$(query_builder.Variable)}, {}),
    customStatement: dart$.fnType(async.Future$(dart$.void), [core.String], [dart$.nullable(core.List)]),
    transaction: dart$.gFnType(T => [async.Future$(T), [dart$.fnType(async.Future$(T), [])]], T => [dart$.nullable(core.Object)]),
    batch: dart$.fnType(async.Future$(dart$.void), [dart$.fnType(dart$.void, [runtime_api.Batch])]),
    [_runConnectionZoned]: dart$.gFnType(T => [async.Future$(T), [runtime_api.DatabaseConnectionUser, dart$.fnType(async.Future$(T), [])]], T => [dart$.nullable(core.Object)]),
    $write: dart$.fnType(query_builder.GenerationContext, [query_builder.Component], {hasMultipleTables: dart$.nullable(core.bool), startIndex: dart$.nullable(core.int)}, {}),
    $writeInsertable: dart$.fnType(query_builder.GenerationContext, [query_builder.TableInfo$(dsl.Table, dart$.dynamic), data_class.Insertable], {startIndex: dart$.nullable(core.int)}, {}),
    $expandVar: dart$.fnType(core.String, [core.int, core.int])
  }));
  dart$.setGetterSignature(runtime_api.DatabaseConnectionUser, () => ({
    __proto__: dart$.getGetters(runtime_api.DatabaseConnectionUser.__proto__),
    typeSystem: sql_types.SqlTypeSystem,
    executor: executor$.QueryExecutor,
    streamQueries: stream_queries.StreamQueryStore,
    resolvedEngine: runtime_api.DatabaseConnectionUser
  }));
  dart$.setLibraryUri(runtime_api.DatabaseConnectionUser, I[21]);
  dart$.setFieldSignature(runtime_api.DatabaseConnectionUser, () => ({
    __proto__: dart$.getFields(runtime_api.DatabaseConnectionUser.__proto__),
    connection: dart$.finalFieldType(runtime_api.DatabaseConnection)
  }));
  transactions.Transaction = class Transaction extends runtime_api.DatabaseConnectionUser {
    get attachedDatabase() {
      return this[_parent$].attachedDatabase;
    }
    static ['_#new#tearOff'](_parent, executor) {
      return new transactions.Transaction.new(_parent, executor);
    }
    complete() {
      return async.async(dart$.void, (function* complete() {
        yield executor$.TransactionExecutor.as(this.executor).send();
      }).bind(this));
    }
    disposeChildStreams() {
      return async.async(dart$.void, (function* disposeChildStreams() {
        let streams = transactions._TransactionStreamStore.as(this.streamQueries);
        yield streams[_dispatchAndClose]();
      }).bind(this));
    }
  };
  (transactions.Transaction.new = function(_parent, executor) {
    this[_parent$] = _parent;
    transactions.Transaction.__proto__.delegate.call(this, _parent, {executor: executor, streamQueries: new transactions._TransactionStreamStore.new(_parent.streamQueries)});
    ;
  }).prototype = transactions.Transaction.prototype;
  dart$.addTypeTests(transactions.Transaction);
  dart$.addTypeCaches(transactions.Transaction);
  dart$.setMethodSignature(transactions.Transaction, () => ({
    __proto__: dart$.getMethods(transactions.Transaction.__proto__),
    complete: dart$.fnType(async.Future$(dart$.void), []),
    disposeChildStreams: dart$.fnType(async.Future$(dart$.void), [])
  }));
  dart$.setGetterSignature(transactions.Transaction, () => ({
    __proto__: dart$.getGetters(transactions.Transaction.__proto__),
    attachedDatabase: runtime_api.GeneratedDatabase
  }));
  dart$.setLibraryUri(transactions.Transaction, I[22]);
  dart$.setFieldSignature(transactions.Transaction, () => ({
    __proto__: dart$.getFields(transactions.Transaction.__proto__),
    [_parent$]: dart$.finalFieldType(runtime_api.DatabaseConnectionUser)
  }));
  var _queriesWithoutKey = dart$.privateName(transactions, "_queriesWithoutKey");
  var _activeKeyStreams = dart$.privateName(stream_queries, "_activeKeyStreams");
  var _keysPendingRemoval = dart$.privateName(stream_queries, "_keysPendingRemoval");
  var _isShuttingDown = dart$.privateName(stream_queries, "_isShuttingDown");
  var _pendingTimers = dart$.privateName(stream_queries, "_pendingTimers");
  var _tableUpdates = dart$.privateName(stream_queries, "_tableUpdates");
  var _fetcher$ = dart$.privateName(stream_queries, "_fetcher");
  stream_queries.StreamQueryStore = class StreamQueryStore extends core.Object {
    static ['_#new#tearOff']() {
      return new stream_queries.StreamQueryStore.new();
    }
    registerStream(fetcher) {
      let key = fetcher.key;
      if (key != null) {
        let cached = this[_activeKeyStreams][$_get](key);
        if (cached != null) {
          return cached.stream;
        }
      }
      let stream = new stream_queries.QueryStream.new(fetcher, this);
      this.markAsOpened(stream);
      return stream.stream;
    }
    updatesForSync(query) {
      return this[_tableUpdates].stream.map(T$.SetOfTableUpdate(), dart$.fn(e => e[$where](dart$.bind(query, 'matches'))[$toSet](), T$.SetOfTableUpdateToSetOfTableUpdate())).where(dart$.fn(e => e[$isNotEmpty], T$.SetOfTableUpdateTobool()));
    }
    handleTableUpdates(updates) {
      if (this[_isShuttingDown]) return;
      this[_tableUpdates].add(updates);
    }
    markAsClosed(stream, whenRemoved) {
      if (this[_isShuttingDown]) return;
      let key = stream[_fetcher$].key;
      this[_keysPendingRemoval].add(key);
      let completer = T$.CompleterOfvoid().sync();
      this[_pendingTimers].add(completer);
      async.Timer.run(dart$.fn(() => {
        completer.complete();
        this[_pendingTimers].remove(completer);
        if (this[_keysPendingRemoval].contains(key)) {
          this[_keysPendingRemoval].remove(key);
          this[_activeKeyStreams][$remove](key);
          whenRemoved();
        }
      }, T$.VoidTovoid()));
    }
    markAsOpened(stream) {
      let key = stream[_fetcher$].key;
      if (key != null) {
        this[_keysPendingRemoval].remove(key);
        this[_activeKeyStreams][$_set](key, stream);
      }
    }
    close() {
      return async.async(dart$.void, (function* close() {
        this[_isShuttingDown] = true;
        for (let stream of this[_activeKeyStreams][$values]) {
          stream.close();
        }
        yield this[_tableUpdates].close();
        while (this[_pendingTimers][$isNotEmpty]) {
          yield this[_pendingTimers][$first].future;
        }
        this[_activeKeyStreams][$clear]();
      }).bind(this));
    }
  };
  (stream_queries.StreamQueryStore.new = function() {
    this[_activeKeyStreams] = new (T$.LinkedMapOfStreamKey$QueryStream()).new();
    this[_keysPendingRemoval] = new (T$._HashSetOfStreamKeyN()).new();
    this[_isShuttingDown] = false;
    this[_pendingTimers] = T$.LinkedHashSetOfCompleter().new();
    this[_tableUpdates] = T$.StreamControllerOfSetOfTableUpdate().broadcast({sync: true});
    ;
  }).prototype = stream_queries.StreamQueryStore.prototype;
  dart$.addTypeTests(stream_queries.StreamQueryStore);
  dart$.addTypeCaches(stream_queries.StreamQueryStore);
  dart$.setMethodSignature(stream_queries.StreamQueryStore, () => ({
    __proto__: dart$.getMethods(stream_queries.StreamQueryStore.__proto__),
    registerStream: dart$.fnType(async.Stream$(core.List$(core.Map$(core.String, dart$.nullable(core.Object)))), [stream_queries.QueryStreamFetcher]),
    updatesForSync: dart$.fnType(async.Stream$(core.Set$(runtime_api.TableUpdate)), [runtime_api.TableUpdateQuery]),
    handleTableUpdates: dart$.fnType(dart$.void, [core.Set$(runtime_api.TableUpdate)]),
    markAsClosed: dart$.fnType(dart$.void, [stream_queries.QueryStream, dart$.fnType(dart$.dynamic, [])]),
    markAsOpened: dart$.fnType(dart$.void, [stream_queries.QueryStream]),
    close: dart$.fnType(async.Future$(dart$.void), [])
  }));
  dart$.setLibraryUri(stream_queries.StreamQueryStore, I[23]);
  dart$.setFieldSignature(stream_queries.StreamQueryStore, () => ({
    __proto__: dart$.getFields(stream_queries.StreamQueryStore.__proto__),
    [_activeKeyStreams]: dart$.finalFieldType(core.Map$(stream_queries.StreamKey, stream_queries.QueryStream)),
    [_keysPendingRemoval]: dart$.finalFieldType(collection.HashSet$(dart$.nullable(stream_queries.StreamKey))),
    [_isShuttingDown]: dart$.fieldType(core.bool),
    [_pendingTimers]: dart$.finalFieldType(core.Set$(async.Completer)),
    [_tableUpdates]: dart$.finalFieldType(async.StreamController$(core.Set$(runtime_api.TableUpdate)))
  }));
  const close = Symbol("close");
  transactions._TransactionStreamStore = class _TransactionStreamStore extends stream_queries.StreamQueryStore {
    static ['_#new#tearOff'](parent) {
      return new transactions._TransactionStreamStore.new(parent);
    }
    handleTableUpdates(updates) {
      super.handleTableUpdates(updates);
      this.affectedTables.addAll(updates);
    }
    markAsOpened(stream) {
      super.markAsOpened(stream);
      if (!stream.hasKey) {
        this[_queriesWithoutKey].add(stream);
      }
    }
    markAsClosed(stream, whenRemoved) {
      super.markAsClosed(stream, whenRemoved);
      this[_queriesWithoutKey].add(stream);
    }
    [_dispatchAndClose]() {
      return async.async(dart$.dynamic, (function* _dispatchAndClose() {
        this.parent.handleTableUpdates(this.affectedTables);
        yield this[close]();
        for (let query of this[_queriesWithoutKey]) {
          query.close();
        }
      }).bind(this));
    }
    [close]() {
      return super.close();
    }
  };
  (transactions._TransactionStreamStore.new = function(parent) {
    this.affectedTables = T$.LinkedHashSetOfTableUpdate().new();
    this[_queriesWithoutKey] = T$.LinkedHashSetOfQueryStream().new();
    this.parent = parent;
    transactions._TransactionStreamStore.__proto__.new.call(this);
    ;
  }).prototype = transactions._TransactionStreamStore.prototype;
  dart$.addTypeTests(transactions._TransactionStreamStore);
  dart$.addTypeCaches(transactions._TransactionStreamStore);
  dart$.setMethodSignature(transactions._TransactionStreamStore, () => ({
    __proto__: dart$.getMethods(transactions._TransactionStreamStore.__proto__),
    [_dispatchAndClose]: dart$.fnType(async.Future, [])
  }));
  dart$.setLibraryUri(transactions._TransactionStreamStore, I[22]);
  dart$.setFieldSignature(transactions._TransactionStreamStore, () => ({
    __proto__: dart$.getFields(transactions._TransactionStreamStore.__proto__),
    parent: dart$.finalFieldType(stream_queries.StreamQueryStore),
    affectedTables: dart$.finalFieldType(core.Set$(runtime_api.TableUpdate)),
    [_queriesWithoutKey]: dart$.finalFieldType(core.Set$(stream_queries.QueryStream))
  }));
  transactions.BeforeOpenRunner = class BeforeOpenRunner extends runtime_api.DatabaseConnectionUser {
    get attachedDatabase() {
      return this[_parent$].attachedDatabase;
    }
    static ['_#new#tearOff'](_parent, executor) {
      return new transactions.BeforeOpenRunner.new(_parent, executor);
    }
  };
  (transactions.BeforeOpenRunner.new = function(_parent, executor) {
    this[_parent$] = _parent;
    transactions.BeforeOpenRunner.__proto__.delegate.call(this, _parent, {executor: executor});
    ;
  }).prototype = transactions.BeforeOpenRunner.prototype;
  dart$.addTypeTests(transactions.BeforeOpenRunner);
  dart$.addTypeCaches(transactions.BeforeOpenRunner);
  dart$.setGetterSignature(transactions.BeforeOpenRunner, () => ({
    __proto__: dart$.getGetters(transactions.BeforeOpenRunner.__proto__),
    attachedDatabase: runtime_api.GeneratedDatabase
  }));
  dart$.setLibraryUri(transactions.BeforeOpenRunner, I[22]);
  dart$.setFieldSignature(transactions.BeforeOpenRunner, () => ({
    __proto__: dart$.getFields(transactions.BeforeOpenRunner.__proto__),
    [_parent$]: dart$.finalFieldType(runtime_api.DatabaseConnectionUser)
  }));
  var readsFrom$ = dart$.privateName(stream_queries, "QueryStreamFetcher.readsFrom");
  var key$ = dart$.privateName(stream_queries, "QueryStreamFetcher.key");
  var fetchData$ = dart$.privateName(stream_queries, "QueryStreamFetcher.fetchData");
  stream_queries.QueryStreamFetcher = class QueryStreamFetcher extends core.Object {
    get readsFrom() {
      return this[readsFrom$];
    }
    set readsFrom(value) {
      super.readsFrom = value;
    }
    get key() {
      return this[key$];
    }
    set key(value) {
      super.key = value;
    }
    get fetchData() {
      return this[fetchData$];
    }
    set fetchData(value) {
      super.fetchData = value;
    }
    static ['_#new#tearOff'](opts) {
      let readsFrom = opts && 'readsFrom' in opts ? opts.readsFrom : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let fetchData = opts && 'fetchData' in opts ? opts.fetchData : null;
      return new stream_queries.QueryStreamFetcher.new({readsFrom: readsFrom, key: key, fetchData: fetchData});
    }
  };
  (stream_queries.QueryStreamFetcher.new = function(opts) {
    let readsFrom = opts && 'readsFrom' in opts ? opts.readsFrom : null;
    let key = opts && 'key' in opts ? opts.key : null;
    let fetchData = opts && 'fetchData' in opts ? opts.fetchData : null;
    this[readsFrom$] = readsFrom;
    this[key$] = key;
    this[fetchData$] = fetchData;
    ;
  }).prototype = stream_queries.QueryStreamFetcher.prototype;
  dart$.addTypeTests(stream_queries.QueryStreamFetcher);
  dart$.addTypeCaches(stream_queries.QueryStreamFetcher);
  dart$.setLibraryUri(stream_queries.QueryStreamFetcher, I[23]);
  dart$.setFieldSignature(stream_queries.QueryStreamFetcher, () => ({
    __proto__: dart$.getFields(stream_queries.QueryStreamFetcher.__proto__),
    readsFrom: dart$.finalFieldType(runtime_api.TableUpdateQuery),
    key: dart$.finalFieldType(dart$.nullable(stream_queries.StreamKey)),
    fetchData: dart$.finalFieldType(dart$.fnType(async.Future$(core.List$(core.Map$(core.String, dart$.nullable(core.Object)))), []))
  }));
  var sql$0 = dart$.privateName(stream_queries, "StreamKey.sql");
  var variables$0 = dart$.privateName(stream_queries, "StreamKey.variables");
  stream_queries.StreamKey = class StreamKey extends core.Object {
    get sql() {
      return this[sql$0];
    }
    set sql(value) {
      super.sql = value;
    }
    get variables() {
      return this[variables$0];
    }
    set variables(value) {
      super.variables = value;
    }
    static ['_#new#tearOff'](sql, variables) {
      return new stream_queries.StreamKey.new(sql, variables);
    }
    get hashCode() {
      return core.Object.hash(this.sql, stream_queries._listEquality.hash(this.variables));
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || stream_queries.StreamKey.is(other) && other.sql === this.sql && stream_queries._listEquality.equals(other.variables, this.variables);
    }
  };
  (stream_queries.StreamKey.new = function(sql, variables) {
    this[sql$0] = sql;
    this[variables$0] = variables;
    ;
  }).prototype = stream_queries.StreamKey.prototype;
  dart$.addTypeTests(stream_queries.StreamKey);
  dart$.addTypeCaches(stream_queries.StreamKey);
  dart$.setLibraryUri(stream_queries.StreamKey, I[23]);
  dart$.setFieldSignature(stream_queries.StreamKey, () => ({
    __proto__: dart$.getFields(stream_queries.StreamKey.__proto__),
    sql: dart$.finalFieldType(core.String),
    variables: dart$.finalFieldType(core.List)
  }));
  dart$.defineExtensionMethods(stream_queries.StreamKey, ['_equals']);
  dart$.defineExtensionAccessors(stream_queries.StreamKey, ['hashCode']);
  var _listeners = dart$.privateName(stream_queries, "_listeners");
  var _pausedListeners = dart$.privateName(stream_queries, "_pausedListeners");
  var __QueryStream_stream = dart$.privateName(stream_queries, "_#QueryStream#stream");
  var _tablesChangedSubscription = dart$.privateName(stream_queries, "_tablesChangedSubscription");
  var _lastData = dart$.privateName(stream_queries, "_lastData");
  var _runningOperations = dart$.privateName(stream_queries, "_runningOperations");
  var _isClosed = dart$.privateName(stream_queries, "_isClosed");
  var _store$ = dart$.privateName(stream_queries, "_store");
  var _activeListeners = dart$.privateName(stream_queries, "_activeListeners");
  var _onListenOrResume = dart$.privateName(stream_queries, "_onListenOrResume");
  var _onCancelOrPause = dart$.privateName(stream_queries, "_onCancelOrPause");
  stream_queries.QueryStream = class QueryStream extends core.Object {
    get [_activeListeners]() {
      return this[_listeners][$length] - this[_pausedListeners];
    }
    get stream() {
      let t122, t121;
      t121 = this[__QueryStream_stream];
      return t121 == null ? (t122 = T$.StreamOfListOfMapOfString$ObjectN().multi(dart$.fn(listener => {
        let t122;
        let queryListener = new stream_queries._QueryStreamListener.new(listener);
        if (this[_isClosed]) {
          listener.closeSync();
          return;
        }
        this[_listeners][$add](queryListener);
        this[_onListenOrResume](queryListener);
        t122 = listener;
        (() => {
          t122.onPause = dart$.fn(() => {
            if (!!queryListener.isPaused) dart$.assertFailed(null, I[24], 208, 18, "!queryListener.isPaused");
            queryListener.isPaused = true;
            this[_pausedListeners] = this[_pausedListeners] + 1;
            this[_onCancelOrPause]();
          }, T$.VoidTovoid());
          t122.onCancel = dart$.fn(() => {
            if (queryListener.isPaused) {
              this[_pausedListeners] = this[_pausedListeners] - 1;
            }
            this[_listeners][$remove](queryListener);
            this[_onCancelOrPause]();
          }, T$.VoidToNull());
          t122.onResume = dart$.fn(() => {
            if (!queryListener.isPaused) dart$.assertFailed(null, I[24], 223, 18, "queryListener.isPaused");
            queryListener.isPaused = false;
            this[_pausedListeners] = this[_pausedListeners] - 1;
            this[_onListenOrResume](queryListener);
          }, T$.VoidTovoid());
          return t122;
        })();
      }, T$.MultiStreamControllerOfListOfMapOfString$ObjectNTovoid()), {isBroadcast: true}), this[__QueryStream_stream] == null ? this[__QueryStream_stream] = t122 : dart$.throw(new _internal.LateError.fieldADI("stream"))) : t121;
    }
    get hasKey() {
      return this[_fetcher$].key != null;
    }
    static ['_#new#tearOff'](_fetcher, _store) {
      return new stream_queries.QueryStream.new(_fetcher, _store);
    }
    [_onListenOrResume](newListener) {
      this[_store$].markAsOpened(this);
      if (this[_tablesChangedSubscription] == null) {
        this.fetchAndEmitData();
        this[_tablesChangedSubscription] = this[_store$].updatesForSync(this[_fetcher$].readsFrom).listen(dart$.fn(_ => {
          this[_lastData] = null;
          if (this[_activeListeners] > 0) {
            this.fetchAndEmitData();
          }
        }, T$.SetOfTableUpdateTovoid()));
      } else if (this[_lastData] == null) {
        if (this[_runningOperations][$isEmpty]) {
          this.fetchAndEmitData();
        }
      } else {
        newListener.add(dart$.nullCheck(this[_lastData]));
      }
    }
    [_onCancelOrPause]() {
      if (this[_listeners][$isEmpty]) {
        this[_store$].markAsClosed(this, dart$.fn(() => {
          let t121;
          t121 = this[_tablesChangedSubscription];
          t121 == null ? null : t121.cancel();
          this[_lastData] = null;
          this[_tablesChangedSubscription] = null;
          for (let op of this[_runningOperations]) {
            op.cancel();
          }
        }, T$.VoidToNull()));
      }
    }
    fetchAndEmitData() {
      return async.async(dart$.void, (function* fetchAndEmitData() {
        let operation = cancellation_zone.runCancellable(T$.ListOfMapOfString$ObjectN(), this[_fetcher$].fetchData);
        this[_runningOperations][$add](operation);
        try {
          let data = (yield cancellation_zone['NonNullableCancellationExtension|get#resultOrNullIfCancelled'](T$.ListOfMapOfString$ObjectN(), operation));
          if (data == null) return;
          this[_lastData] = data;
          for (let listener of this[_listeners]) {
            if (!listener.isPaused) {
              listener.add(data);
            }
          }
        } catch (e$) {
          let e = dart$.getThrown(e$);
          let s = dart$.stackTrace(e$);
          if (core.Object.is(e)) {
            for (let listener of this[_listeners]) {
              if (!listener.isPaused) {
                listener.controller.addError(e, s);
              }
            }
          } else
            throw e$;
        } finally {
          this[_runningOperations][$remove](operation);
        }
      }).bind(this));
    }
    close() {
      this[_isClosed] = true;
      for (let listener of this[_listeners]) {
        listener.controller.close();
      }
      this[_listeners][$clear]();
    }
  };
  (stream_queries.QueryStream.new = function(_fetcher, _store) {
    this[_listeners] = T$.JSArrayOf_QueryStreamListener().of([]);
    this[_pausedListeners] = 0;
    this[__QueryStream_stream] = null;
    this[_tablesChangedSubscription] = null;
    this[_lastData] = null;
    this[_runningOperations] = T$.JSArrayOfCancellationToken().of([]);
    this[_isClosed] = false;
    this[_fetcher$] = _fetcher;
    this[_store$] = _store;
    ;
  }).prototype = stream_queries.QueryStream.prototype;
  dart$.addTypeTests(stream_queries.QueryStream);
  dart$.addTypeCaches(stream_queries.QueryStream);
  dart$.setMethodSignature(stream_queries.QueryStream, () => ({
    __proto__: dart$.getMethods(stream_queries.QueryStream.__proto__),
    [_onListenOrResume]: dart$.fnType(dart$.void, [stream_queries._QueryStreamListener]),
    [_onCancelOrPause]: dart$.fnType(dart$.void, []),
    fetchAndEmitData: dart$.fnType(async.Future$(dart$.void), []),
    close: dart$.fnType(dart$.void, [])
  }));
  dart$.setGetterSignature(stream_queries.QueryStream, () => ({
    __proto__: dart$.getGetters(stream_queries.QueryStream.__proto__),
    [_activeListeners]: core.int,
    stream: async.Stream$(core.List$(core.Map$(core.String, dart$.nullable(core.Object)))),
    hasKey: core.bool
  }));
  dart$.setLibraryUri(stream_queries.QueryStream, I[23]);
  dart$.setFieldSignature(stream_queries.QueryStream, () => ({
    __proto__: dart$.getFields(stream_queries.QueryStream.__proto__),
    [_fetcher$]: dart$.finalFieldType(stream_queries.QueryStreamFetcher),
    [_store$]: dart$.finalFieldType(stream_queries.StreamQueryStore),
    [_listeners]: dart$.finalFieldType(core.List$(stream_queries._QueryStreamListener)),
    [_pausedListeners]: dart$.fieldType(core.int),
    [__QueryStream_stream]: dart$.fieldType(dart$.nullable(async.Stream$(core.List$(core.Map$(core.String, dart$.nullable(core.Object)))))),
    [_tablesChangedSubscription]: dart$.fieldType(dart$.nullable(async.StreamSubscription)),
    [_lastData]: dart$.fieldType(dart$.nullable(core.List$(core.Map$(core.String, dart$.nullable(core.Object))))),
    [_runningOperations]: dart$.finalFieldType(core.List$(cancellation_zone.CancellationToken)),
    [_isClosed]: dart$.fieldType(core.bool)
  }));
  stream_queries._QueryStreamListener = class _QueryStreamListener extends core.Object {
    static ['_#new#tearOff'](controller) {
      return new stream_queries._QueryStreamListener.new(controller);
    }
    add(row) {
      if (row !== this.lastEvent) {
        this.lastEvent = row;
        this.controller.add(row);
      }
    }
  };
  (stream_queries._QueryStreamListener.new = function(controller) {
    this.lastEvent = null;
    this.isPaused = false;
    this.controller = controller;
    ;
  }).prototype = stream_queries._QueryStreamListener.prototype;
  dart$.addTypeTests(stream_queries._QueryStreamListener);
  dart$.addTypeCaches(stream_queries._QueryStreamListener);
  dart$.setMethodSignature(stream_queries._QueryStreamListener, () => ({
    __proto__: dart$.getMethods(stream_queries._QueryStreamListener.__proto__),
    add: dart$.fnType(dart$.void, [core.List$(core.Map$(core.String, dart$.nullable(core.Object)))])
  }));
  dart$.setLibraryUri(stream_queries._QueryStreamListener, I[23]);
  dart$.setFieldSignature(stream_queries._QueryStreamListener, () => ({
    __proto__: dart$.getFields(stream_queries._QueryStreamListener.__proto__),
    controller: dart$.finalFieldType(async.MultiStreamController$(core.List$(core.Map$(core.String, dart$.nullable(core.Object))))),
    lastEvent: dart$.fieldType(dart$.nullable(core.List$(core.Map$(core.String, dart$.nullable(core.Object))))),
    isPaused: dart$.fieldType(core.bool)
  }));
  runtime_api.TableUpdateQuery = class TableUpdateQuery extends core.Object {
    static ['_#any#tearOff']() {
      return new stream_queries.AnyUpdateQuery.new();
    }
    static ['_#allOf#tearOff'](queries) {
      return new stream_queries.MultipleUpdateQuery.new(queries);
    }
    static ['_#onTableName#tearOff'](table, opts) {
      let limitUpdateKind = opts && 'limitUpdateKind' in opts ? opts.limitUpdateKind : null;
      return new stream_queries.SpecificUpdateQuery.new(table, {limitUpdateKind: limitUpdateKind});
    }
    static onTable(table, opts) {
      let limitUpdateKind = opts && 'limitUpdateKind' in opts ? opts.limitUpdateKind : null;
      if (T$.ViewInfoOfHasResultSet$dynamic().is(table)) {
        return new stream_queries.MultipleUpdateQuery.new((() => {
          let t122 = T$.JSArrayOfTableUpdateQuery().of([]);
          let iter = table.readTables;
          for (let table of iter)
            t122.push(new stream_queries.SpecificUpdateQuery.new(table));
          return t122;
        })());
      }
      return new stream_queries.SpecificUpdateQuery.new(table.entityName, {limitUpdateKind: limitUpdateKind});
    }
    static ['_#onTable#tearOff'](table, opts) {
      let limitUpdateKind = opts && 'limitUpdateKind' in opts ? opts.limitUpdateKind : null;
      return runtime_api.TableUpdateQuery.onTable(table, {limitUpdateKind: limitUpdateKind});
    }
    static onAllTables(tables) {
      return new stream_queries.MultipleUpdateQuery.new((() => {
        let t123 = T$.JSArrayOfTableUpdateQuery().of([]);
        for (let table of tables)
          if (T$.ViewInfoOfHasResultSet$dynamic().is(table)) {
            let iter = table.readTables;
            for (let table of iter)
              t123.push(new stream_queries.SpecificUpdateQuery.new(table));
          } else
            t123.push(runtime_api.TableUpdateQuery.onTable(table));
        return t123;
      })());
    }
    static ['_#onAllTables#tearOff'](tables) {
      return runtime_api.TableUpdateQuery.onAllTables(tables);
    }
  };
  (runtime_api.TableUpdateQuery.new = function() {
    ;
  }).prototype = runtime_api.TableUpdateQuery.prototype;
  dart$.addTypeTests(runtime_api.TableUpdateQuery);
  dart$.addTypeCaches(runtime_api.TableUpdateQuery);
  dart$.setStaticMethodSignature(runtime_api.TableUpdateQuery, () => ['any', 'allOf', 'onTableName', 'onTable', 'onAllTables']);
  dart$.setLibraryUri(runtime_api.TableUpdateQuery, I[21]);
  dart$.setStaticFieldSignature(runtime_api.TableUpdateQuery, () => ['_redirecting#']);
  stream_queries.AnyUpdateQuery = class AnyUpdateQuery extends runtime_api.TableUpdateQuery {
    static ['_#new#tearOff']() {
      return new stream_queries.AnyUpdateQuery.new();
    }
    matches(update) {
      return true;
    }
  };
  (stream_queries.AnyUpdateQuery.new = function() {
    stream_queries.AnyUpdateQuery.__proto__.new.call(this);
    ;
  }).prototype = stream_queries.AnyUpdateQuery.prototype;
  dart$.addTypeTests(stream_queries.AnyUpdateQuery);
  dart$.addTypeCaches(stream_queries.AnyUpdateQuery);
  dart$.setMethodSignature(stream_queries.AnyUpdateQuery, () => ({
    __proto__: dart$.getMethods(stream_queries.AnyUpdateQuery.__proto__),
    matches: dart$.fnType(core.bool, [runtime_api.TableUpdate])
  }));
  dart$.setLibraryUri(stream_queries.AnyUpdateQuery, I[23]);
  var queries$ = dart$.privateName(stream_queries, "MultipleUpdateQuery.queries");
  stream_queries.MultipleUpdateQuery = class MultipleUpdateQuery extends runtime_api.TableUpdateQuery {
    get queries() {
      return this[queries$];
    }
    set queries(value) {
      super.queries = value;
    }
    static ['_#new#tearOff'](queries) {
      return new stream_queries.MultipleUpdateQuery.new(queries);
    }
    matches(update) {
      return this.queries[$any](dart$.fn(q => q.matches(update), T$.TableUpdateQueryTobool()));
    }
  };
  (stream_queries.MultipleUpdateQuery.new = function(queries) {
    this[queries$] = queries;
    stream_queries.MultipleUpdateQuery.__proto__.new.call(this);
    ;
  }).prototype = stream_queries.MultipleUpdateQuery.prototype;
  dart$.addTypeTests(stream_queries.MultipleUpdateQuery);
  dart$.addTypeCaches(stream_queries.MultipleUpdateQuery);
  dart$.setMethodSignature(stream_queries.MultipleUpdateQuery, () => ({
    __proto__: dart$.getMethods(stream_queries.MultipleUpdateQuery.__proto__),
    matches: dart$.fnType(core.bool, [runtime_api.TableUpdate])
  }));
  dart$.setLibraryUri(stream_queries.MultipleUpdateQuery, I[23]);
  dart$.setFieldSignature(stream_queries.MultipleUpdateQuery, () => ({
    __proto__: dart$.getFields(stream_queries.MultipleUpdateQuery.__proto__),
    queries: dart$.finalFieldType(core.List$(runtime_api.TableUpdateQuery))
  }));
  var limitUpdateKind$ = dart$.privateName(stream_queries, "SpecificUpdateQuery.limitUpdateKind");
  var table$2 = dart$.privateName(stream_queries, "SpecificUpdateQuery.table");
  stream_queries.SpecificUpdateQuery = class SpecificUpdateQuery extends runtime_api.TableUpdateQuery {
    get limitUpdateKind() {
      return this[limitUpdateKind$];
    }
    set limitUpdateKind(value) {
      super.limitUpdateKind = value;
    }
    get table() {
      return this[table$2];
    }
    set table(value) {
      super.table = value;
    }
    static ['_#new#tearOff'](table, opts) {
      let limitUpdateKind = opts && 'limitUpdateKind' in opts ? opts.limitUpdateKind : null;
      return new stream_queries.SpecificUpdateQuery.new(table, {limitUpdateKind: limitUpdateKind});
    }
    matches(update) {
      if (update.table !== this.table) return false;
      return update.kind == null || this.limitUpdateKind == null || update.kind == this.limitUpdateKind;
    }
    get hashCode() {
      return core.Object.hash(this.limitUpdateKind, this.table);
    }
    _equals(other) {
      if (other == null) return false;
      return stream_queries.SpecificUpdateQuery.is(other) && other.limitUpdateKind == this.limitUpdateKind && other.table === this.table;
    }
  };
  (stream_queries.SpecificUpdateQuery.new = function(table, opts) {
    let limitUpdateKind = opts && 'limitUpdateKind' in opts ? opts.limitUpdateKind : null;
    this[table$2] = table;
    this[limitUpdateKind$] = limitUpdateKind;
    stream_queries.SpecificUpdateQuery.__proto__.new.call(this);
    ;
  }).prototype = stream_queries.SpecificUpdateQuery.prototype;
  dart$.addTypeTests(stream_queries.SpecificUpdateQuery);
  dart$.addTypeCaches(stream_queries.SpecificUpdateQuery);
  dart$.setMethodSignature(stream_queries.SpecificUpdateQuery, () => ({
    __proto__: dart$.getMethods(stream_queries.SpecificUpdateQuery.__proto__),
    matches: dart$.fnType(core.bool, [runtime_api.TableUpdate])
  }));
  dart$.setLibraryUri(stream_queries.SpecificUpdateQuery, I[23]);
  dart$.setFieldSignature(stream_queries.SpecificUpdateQuery, () => ({
    __proto__: dart$.getFields(stream_queries.SpecificUpdateQuery.__proto__),
    limitUpdateKind: dart$.finalFieldType(dart$.nullable(runtime_api.UpdateKind)),
    table: dart$.finalFieldType(core.String)
  }));
  dart$.defineExtensionMethods(stream_queries.SpecificUpdateQuery, ['_equals']);
  dart$.defineExtensionAccessors(stream_queries.SpecificUpdateQuery, ['hashCode']);
  dart$.defineLazy(stream_queries, {
    /*stream_queries._listEquality*/get _listEquality() {
      return C[81] || CT.C81;
    }
  }, false);
  var __DelayedStreamQueryStore__delegate = dart$.privateName(delayed_stream_queries, "_#DelayedStreamQueryStore#_delegate");
  var _resolved = dart$.privateName(delayed_stream_queries, "_resolved");
  var _delegate$ = dart$.privateName(delayed_stream_queries, "_delegate");
  var _pendingTimers$ = dart$.privateName(delayed_stream_queries, "_pendingTimers");
  var _tableUpdates$ = dart$.privateName(delayed_stream_queries, "_tableUpdates");
  var _isShuttingDown$ = dart$.privateName(delayed_stream_queries, "_isShuttingDown");
  var _keysPendingRemoval$ = dart$.privateName(delayed_stream_queries, "_keysPendingRemoval");
  var _activeKeyStreams$ = dart$.privateName(delayed_stream_queries, "_activeKeyStreams");
  var _isShuttingDown_ = dart$.privateName(delayed_stream_queries, "_isShuttingDown=");
  delayed_stream_queries.DelayedStreamQueryStore = class DelayedStreamQueryStore extends core.Object {
    get [_delegate$]() {
      let t124;
      t124 = this[__DelayedStreamQueryStore__delegate];
      return t124 == null ? dart$.throw(new _internal.LateError.fieldNI("_delegate")) : t124;
    }
    set [_delegate$](library$32package$58drift$47src$47runtime$47executor$47delayed_stream_queries$46dart$58$58_delegate$35param) {
      this[__DelayedStreamQueryStore__delegate] = library$32package$58drift$47src$47runtime$47executor$47delayed_stream_queries$46dart$58$58_delegate$35param;
    }
    static ['_#new#tearOff'](delegate) {
      return new delayed_stream_queries.DelayedStreamQueryStore.new(delegate);
    }
    close() {
      return async.async(dart$.void, (function* close() {
        return (yield this[_delegate$]).close();
      }).bind(this));
    }
    handleTableUpdates(updates) {
      let t124;
      t124 = this[_resolved];
      t124 == null ? null : t124.handleTableUpdates(updates);
    }
    markAsClosed(stream, whenRemoved) {
      dart$.throw(new core.UnimplementedError.new("The stream will call this on the delegate"));
    }
    markAsOpened(stream) {
      dart$.throw(new core.UnimplementedError.new("The stream will call this on the delegate"));
    }
    registerStream(fetcher) {
      return T$.StreamOfStreamQueryStore().fromFuture(this[_delegate$]).asyncExpand(T$.ListOfMapOfString$ObjectN(), dart$.fn(resolved => resolved.registerStream(fetcher), T$.StreamQueryStoreToStreamOfListOfMapOfString$ObjectN())).asBroadcastStream();
    }
    updatesForSync(query) {
      return T$.StreamOfStreamQueryStore().fromFuture(this[_delegate$]).asyncExpand(T$.SetOfTableUpdate(), dart$.fn(resolved => resolved.updatesForSync(query), T$.StreamQueryStoreToStreamOfSetOfTableUpdate())).asBroadcastStream();
    }
    get [_pendingTimers]() {
      return T$.SetOfCompleter().as(this[$noSuchMethod](new core._Invocation.getter(C[82] || CT.C82)));
    }
    get [_tableUpdates]() {
      return T$.StreamControllerOfSetOfTableUpdate().as(this[$noSuchMethod](new core._Invocation.getter(C[83] || CT.C83)));
    }
    get [_isShuttingDown]() {
      return core.bool.as(this[$noSuchMethod](new core._Invocation.getter(C[84] || CT.C84)));
    }
    get [_keysPendingRemoval]() {
      return T$.HashSetOfStreamKeyN().as(this[$noSuchMethod](new core._Invocation.getter(C[85] || CT.C85)));
    }
    get [_activeKeyStreams]() {
      return T$.MapOfStreamKey$QueryStream().as(this[$noSuchMethod](new core._Invocation.getter(C[86] || CT.C86)));
    }
    set [_isShuttingDown](value) {
      return this[$noSuchMethod](new core._Invocation.setter(C[87] || CT.C87, value));
    }
  };
  (delayed_stream_queries.DelayedStreamQueryStore.new = function(delegate) {
    this[__DelayedStreamQueryStore__delegate] = null;
    this[_resolved] = null;
    this[_delegate$] = delegate.then(stream_queries.StreamQueryStore, dart$.fn(value => this[_resolved] = value, T$.StreamQueryStoreToStreamQueryStore()));
  }).prototype = delayed_stream_queries.DelayedStreamQueryStore.prototype;
  dart$.addTypeTests(delayed_stream_queries.DelayedStreamQueryStore);
  dart$.addTypeCaches(delayed_stream_queries.DelayedStreamQueryStore);
  delayed_stream_queries.DelayedStreamQueryStore[dart$.implements] = () => [stream_queries.StreamQueryStore];
  dart$.setMethodSignature(delayed_stream_queries.DelayedStreamQueryStore, () => ({
    __proto__: dart$.getMethods(delayed_stream_queries.DelayedStreamQueryStore.__proto__),
    close: dart$.fnType(async.Future$(dart$.void), []),
    handleTableUpdates: dart$.fnType(dart$.void, [core.Set$(runtime_api.TableUpdate)]),
    markAsClosed: dart$.fnType(dart$.void, [stream_queries.QueryStream, dart$.fnType(dart$.dynamic, [])]),
    markAsOpened: dart$.fnType(dart$.void, [stream_queries.QueryStream]),
    registerStream: dart$.fnType(async.Stream$(core.List$(core.Map$(core.String, dart$.nullable(core.Object)))), [stream_queries.QueryStreamFetcher]),
    updatesForSync: dart$.fnType(async.Stream$(core.Set$(runtime_api.TableUpdate)), [runtime_api.TableUpdateQuery])
  }));
  dart$.setGetterSignature(delayed_stream_queries.DelayedStreamQueryStore, () => ({
    __proto__: dart$.getGetters(delayed_stream_queries.DelayedStreamQueryStore.__proto__),
    [_delegate$]: async.Future$(stream_queries.StreamQueryStore),
    [_pendingTimers]: core.Set$(async.Completer),
    [_tableUpdates]: async.StreamController$(core.Set$(runtime_api.TableUpdate)),
    [_isShuttingDown]: core.bool,
    [_keysPendingRemoval]: collection.HashSet$(dart$.nullable(stream_queries.StreamKey)),
    [_activeKeyStreams]: core.Map$(stream_queries.StreamKey, stream_queries.QueryStream)
  }));
  dart$.setSetterSignature(delayed_stream_queries.DelayedStreamQueryStore, () => ({
    __proto__: dart$.getSetters(delayed_stream_queries.DelayedStreamQueryStore.__proto__),
    [_delegate$]: async.Future$(stream_queries.StreamQueryStore),
    [_isShuttingDown]: core.bool
  }));
  dart$.setLibraryUri(delayed_stream_queries.DelayedStreamQueryStore, I[25]);
  dart$.setFieldSignature(delayed_stream_queries.DelayedStreamQueryStore, () => ({
    __proto__: dart$.getFields(delayed_stream_queries.DelayedStreamQueryStore.__proto__),
    [__DelayedStreamQueryStore__delegate]: dart$.fieldType(dart$.nullable(async.Future$(stream_queries.StreamQueryStore))),
    [_resolved]: dart$.fieldType(dart$.nullable(stream_queries.StreamQueryStore))
  }));
  var dontWarnAboutMultipleDatabases = dart$.privateName(runtime_api, "DriftRuntimeOptions.dontWarnAboutMultipleDatabases");
  var defaultSerializer = dart$.privateName(runtime_api, "DriftRuntimeOptions.defaultSerializer");
  var debugPrint = dart$.privateName(runtime_api, "DriftRuntimeOptions.debugPrint");
  runtime_api.DriftRuntimeOptions = class DriftRuntimeOptions extends core.Object {
    get dontWarnAboutMultipleDatabases() {
      return this[dontWarnAboutMultipleDatabases];
    }
    set dontWarnAboutMultipleDatabases(value) {
      this[dontWarnAboutMultipleDatabases] = value;
    }
    get defaultSerializer() {
      return this[defaultSerializer];
    }
    set defaultSerializer(value) {
      this[defaultSerializer] = value;
    }
    get debugPrint() {
      return this[debugPrint];
    }
    set debugPrint(value) {
      this[debugPrint] = value;
    }
    static ['_#new#tearOff']() {
      return new runtime_api.DriftRuntimeOptions.new();
    }
  };
  (runtime_api.DriftRuntimeOptions.new = function() {
    this[dontWarnAboutMultipleDatabases] = false;
    this[defaultSerializer] = C[88] || CT.C88;
    this[debugPrint] = C[89] || CT.C89;
    ;
  }).prototype = runtime_api.DriftRuntimeOptions.prototype;
  dart$.addTypeTests(runtime_api.DriftRuntimeOptions);
  dart$.addTypeCaches(runtime_api.DriftRuntimeOptions);
  dart$.setLibraryUri(runtime_api.DriftRuntimeOptions, I[21]);
  dart$.setFieldSignature(runtime_api.DriftRuntimeOptions, () => ({
    __proto__: dart$.getFields(runtime_api.DriftRuntimeOptions.__proto__),
    dontWarnAboutMultipleDatabases: dart$.fieldType(core.bool),
    defaultSerializer: dart$.fieldType(data_class.ValueSerializer),
    debugPrint: dart$.fieldType(dart$.fnType(dart$.void, [core.String]))
  }));
  var _createdSql = dart$.privateName(runtime_api, "_createdSql");
  var _sqlToIndex = dart$.privateName(runtime_api, "_sqlToIndex");
  var _createdArguments = dart$.privateName(runtime_api, "_createdArguments");
  var _createdUpdates = dart$.privateName(runtime_api, "_createdUpdates");
  var _user$ = dart$.privateName(runtime_api, "_user");
  var _startTransaction$ = dart$.privateName(runtime_api, "_startTransaction");
  var _addUpdate = dart$.privateName(runtime_api, "_addUpdate");
  var _addContext = dart$.privateName(runtime_api, "_addContext");
  var _addSqlAndArguments = dart$.privateName(runtime_api, "_addSqlAndArguments");
  var _runWith = dart$.privateName(runtime_api, "_runWith");
  runtime_api.Batch = class Batch extends core.Object {
    static ['_#_#tearOff'](_user, _startTransaction) {
      return new runtime_api.Batch.__(_user, _startTransaction);
    }
    [_addUpdate](table, kind) {
      this[_createdUpdates].add(runtime_api.TableUpdate.onTable(table, {kind: kind}));
    }
    insert(T, D, table, row, opts) {
      let t124;
      let mode = opts && 'mode' in opts ? opts.mode : null;
      let onConflict = opts && 'onConflict' in opts ? opts.onConflict : null;
      this[_addUpdate](table, runtime_api.UpdateKind.insert);
      let actualMode = (t124 = mode, t124 == null ? query_builder.InsertMode.insert : t124);
      let context = new (query_builder.InsertStatement$(dsl.Table, D)).new(this[_user$], table).createContext(row, actualMode, {onConflict: onConflict});
      this[_addContext](context);
    }
    insertAll(T, D, table, rows, opts) {
      let mode = opts && 'mode' in opts ? opts.mode : null;
      let onConflict = opts && 'onConflict' in opts ? opts.onConflict : null;
      for (let row of rows) {
        this.insert(T, D, table, row, {mode: mode, onConflict: onConflict});
      }
    }
    insertAllOnConflictUpdate(T, D, table, rows) {
      for (let row of rows) {
        this.insert(T, D, table, row, {onConflict: new (query_builder.DoUpdate$(T, D)).new(dart$.fn(_ => row, dart$.fnType(data_class.Insertable$(D), [T])))});
      }
    }
    update(T, D, table, row, opts) {
      let where = opts && 'where' in opts ? opts.where : null;
      this[_addUpdate](table, runtime_api.UpdateKind.update);
      let stmt = new (query_builder.UpdateStatement$(T, D)).new(this[_user$], table);
      if (where != null) stmt.where(where);
      stmt.write(row, {dontExecute: true});
      let context = stmt.constructQuery();
      this[_addContext](context);
    }
    replace(T, D, table, row) {
      let t124;
      this[_addUpdate](table, runtime_api.UpdateKind.update);
      let stmt = (t124 = new (query_builder.UpdateStatement$(T, D)).new(this[_user$], table), (() => {
        t124.replace(row, {dontExecute: true});
        return t124;
      })());
      this[_addContext](stmt.constructQuery());
    }
    replaceAll(T, D, table, rows) {
      for (let row of rows) {
        this.replace(T, D, table, row);
      }
    }
    delete(T, D, table, row) {
      let t124;
      this[_addUpdate](table, runtime_api.UpdateKind.delete);
      let stmt = (t124 = new (query_builder.DeleteStatement$(T, D)).new(this[_user$], table), (() => {
        query_builder['QueryTableExtensions|whereSamePrimaryKey'](T, D, t124, row);
        return t124;
      })());
      this[_addContext](stmt.constructQuery());
    }
    deleteWhere(T, D, table, filter) {
      let t124;
      this[_addUpdate](table, runtime_api.UpdateKind.delete);
      let stmt = (t124 = new (query_builder.DeleteStatement$(T, D)).new(this[_user$], table), (() => {
        t124.where(filter);
        return t124;
      })());
      this[_addContext](stmt.constructQuery());
    }
    customStatement(sql, args = null) {
      let t124;
      this[_addSqlAndArguments](sql, (t124 = args, t124 == null ? C[62] || CT.C62 : t124));
    }
    [_addContext](ctx) {
      this[_addSqlAndArguments](ctx.sql, ctx.boundVariables);
    }
    [_addSqlAndArguments](sql, $arguments) {
      let stmtIndex = this[_sqlToIndex][$putIfAbsent](sql, dart$.fn(() => {
        let newIndex = this[_createdSql][$length];
        this[_createdSql][$add](sql);
        return newIndex;
      }, T$.VoidToint()));
      this[_createdArguments][$add](new executor$.ArgumentsForBatchedStatement.new(stmtIndex, $arguments));
    }
    [_commit]() {
      return async.async(dart$.void, (function* _commit() {
        let t125;
        yield this[_user$].executor.ensureOpen(this[_user$].attachedDatabase);
        if (this[_startTransaction$]) {
          let transaction = null;
          try {
            transaction = this[_user$].executor.beginTransaction();
            yield transaction.ensureOpen(this[_user$].attachedDatabase);
            yield this[_runWith](transaction);
            yield transaction.send();
          } catch (e$) {
            let e = dart$.getThrown(e$);
            if (core.Object.is(e)) {
              yield (t125 = transaction, t125 == null ? null : t125.rollback());
              dart$.rethrow(e$);
            } else
              throw e$;
          }
        } else {
          yield this[_runWith](this[_user$].executor);
        }
        this[_user$].notifyUpdates(this[_createdUpdates]);
      }).bind(this));
    }
    [_runWith](executor) {
      return executor.runBatched(new executor$.BatchedStatements.new(this[_createdSql], this[_createdArguments]));
    }
  };
  (runtime_api.Batch.__ = function(_user, _startTransaction) {
    this[_createdSql] = T$.JSArrayOfString().of([]);
    this[_sqlToIndex] = new (T$.IdentityMapOfString$int()).new();
    this[_createdArguments] = T$.JSArrayOfArgumentsForBatchedStatement().of([]);
    this[_createdUpdates] = T$.LinkedHashSetOfTableUpdate().new();
    this[_user$] = _user;
    this[_startTransaction$] = _startTransaction;
    ;
  }).prototype = runtime_api.Batch.prototype;
  dart$.addTypeTests(runtime_api.Batch);
  dart$.addTypeCaches(runtime_api.Batch);
  dart$.setMethodSignature(runtime_api.Batch, () => ({
    __proto__: dart$.getMethods(runtime_api.Batch.__proto__),
    [_addUpdate]: dart$.fnType(dart$.void, [query_builder.TableInfo$(dsl.Table, dart$.dynamic), runtime_api.UpdateKind]),
    insert: dart$.gFnType((T, D) => [dart$.void, [query_builder.TableInfo$(T, D), data_class.Insertable$(D)], {mode: dart$.nullable(query_builder.InsertMode), onConflict: dart$.nullable(query_builder.UpsertClause$(T, D))}, {}], (T, D) => [dsl.Table, dart$.nullable(core.Object)]),
    insertAll: dart$.gFnType((T, D) => [dart$.void, [query_builder.TableInfo$(T, D), core.Iterable$(data_class.Insertable$(D))], {mode: dart$.nullable(query_builder.InsertMode), onConflict: dart$.nullable(query_builder.UpsertClause$(T, D))}, {}], (T, D) => [dsl.Table, dart$.nullable(core.Object)]),
    insertAllOnConflictUpdate: dart$.gFnType((T, D) => [dart$.void, [query_builder.TableInfo$(T, D), core.Iterable$(data_class.Insertable$(D))]], (T, D) => [dsl.Table, dart$.nullable(core.Object)]),
    update: dart$.gFnType((T, D) => [dart$.void, [query_builder.TableInfo$(T, D), data_class.Insertable$(D)], {where: dart$.nullable(dart$.fnType(query_builder.Expression$(dart$.nullable(core.bool)), [T]))}, {}], (T, D) => [dsl.Table, dart$.nullable(core.Object)]),
    replace: dart$.gFnType((T, D) => [dart$.void, [query_builder.TableInfo$(T, D), data_class.Insertable$(D)]], (T, D) => [dsl.Table, dart$.nullable(core.Object)]),
    replaceAll: dart$.gFnType((T, D) => [dart$.void, [query_builder.TableInfo$(T, D), core.Iterable$(data_class.Insertable$(D))]], (T, D) => [dsl.Table, dart$.nullable(core.Object)]),
    delete: dart$.gFnType((T, D) => [dart$.void, [query_builder.TableInfo$(T, D), data_class.Insertable$(D)]], (T, D) => [dsl.Table, dart$.nullable(core.Object)]),
    deleteWhere: dart$.gFnType((T, D) => [dart$.void, [query_builder.TableInfo$(T, D), dart$.fnType(query_builder.Expression$(dart$.nullable(core.bool)), [T])]], (T, D) => [dsl.Table, dart$.nullable(core.Object)]),
    customStatement: dart$.fnType(dart$.void, [core.String], [dart$.nullable(core.List)]),
    [_addContext]: dart$.fnType(dart$.void, [query_builder.GenerationContext]),
    [_addSqlAndArguments]: dart$.fnType(dart$.void, [core.String, core.List]),
    [_commit]: dart$.fnType(async.Future$(dart$.void), []),
    [_runWith]: dart$.fnType(async.Future$(dart$.void), [executor$.QueryExecutor])
  }));
  dart$.setLibraryUri(runtime_api.Batch, I[21]);
  dart$.setFieldSignature(runtime_api.Batch, () => ({
    __proto__: dart$.getFields(runtime_api.Batch.__proto__),
    [_createdSql]: dart$.finalFieldType(core.List$(core.String)),
    [_sqlToIndex]: dart$.finalFieldType(core.Map$(core.String, core.int)),
    [_createdArguments]: dart$.finalFieldType(core.List$(executor$.ArgumentsForBatchedStatement)),
    [_user$]: dart$.finalFieldType(runtime_api.DatabaseConnectionUser),
    [_startTransaction$]: dart$.finalFieldType(core.bool),
    [_createdUpdates]: dart$.finalFieldType(core.Set$(runtime_api.TableUpdate))
  }));
  var typeSystem$0 = dart$.privateName(runtime_api, "DatabaseConnection.typeSystem");
  var executor$1 = dart$.privateName(runtime_api, "DatabaseConnection.executor");
  var streamQueries$ = dart$.privateName(runtime_api, "DatabaseConnection.streamQueries");
  runtime_api.DatabaseConnection = class DatabaseConnection extends core.Object {
    get typeSystem() {
      return this[typeSystem$0];
    }
    set typeSystem(value) {
      super.typeSystem = value;
    }
    get executor() {
      return this[executor$1];
    }
    set executor(value) {
      super.executor = value;
    }
    get streamQueries() {
      return this[streamQueries$];
    }
    set streamQueries(value) {
      super.streamQueries = value;
    }
    static ['_#new#tearOff'](typeSystem, executor, streamQueries) {
      return new runtime_api.DatabaseConnection.new(typeSystem, executor, streamQueries);
    }
    static ['_#fromExecutor#tearOff'](executor) {
      return new runtime_api.DatabaseConnection.fromExecutor(executor);
    }
    static delayed(connection) {
      if (runtime_api.DatabaseConnection.is(connection)) {
        return connection;
      }
      return new runtime_api.DatabaseConnection.new(sql_types.SqlTypeSystem.defaultInstance, new lazy_database.LazyDatabase.new(dart$.fn(() => async.async(executor$.QueryExecutor, function*() {
        return (yield connection).executor;
      }), T$.VoidToFutureOfQueryExecutor())), new delayed_stream_queries.DelayedStreamQueryStore.new(connection.then(stream_queries.StreamQueryStore, dart$.fn(conn => conn.streamQueries, T$.DatabaseConnectionToStreamQueryStore()))));
    }
    static ['_#delayed#tearOff'](connection) {
      return runtime_api.DatabaseConnection.delayed(connection);
    }
    withExecutor(executor) {
      return new runtime_api.DatabaseConnection.new(this.typeSystem, executor, this.streamQueries);
    }
  };
  (runtime_api.DatabaseConnection.new = function(typeSystem, executor, streamQueries) {
    this[typeSystem$0] = typeSystem;
    this[executor$1] = executor;
    this[streamQueries$] = streamQueries;
    ;
  }).prototype = runtime_api.DatabaseConnection.prototype;
  (runtime_api.DatabaseConnection.fromExecutor = function(executor) {
    this[executor$1] = executor;
    this[typeSystem$0] = sql_types.SqlTypeSystem.defaultInstance;
    this[streamQueries$] = new stream_queries.StreamQueryStore.new();
    ;
  }).prototype = runtime_api.DatabaseConnection.prototype;
  dart$.addTypeTests(runtime_api.DatabaseConnection);
  dart$.addTypeCaches(runtime_api.DatabaseConnection);
  dart$.setMethodSignature(runtime_api.DatabaseConnection, () => ({
    __proto__: dart$.getMethods(runtime_api.DatabaseConnection.__proto__),
    withExecutor: dart$.fnType(runtime_api.DatabaseConnection, [executor$.QueryExecutor])
  }));
  dart$.setStaticMethodSignature(runtime_api.DatabaseConnection, () => ['delayed']);
  dart$.setLibraryUri(runtime_api.DatabaseConnection, I[21]);
  dart$.setFieldSignature(runtime_api.DatabaseConnection, () => ({
    __proto__: dart$.getFields(runtime_api.DatabaseConnection.__proto__),
    typeSystem: dart$.finalFieldType(sql_types.SqlTypeSystem),
    executor: dart$.finalFieldType(executor$.QueryExecutor),
    streamQueries: dart$.finalFieldType(stream_queries.StreamQueryStore)
  }));
  var attachedDatabase$ = dart$.privateName(runtime_api, "DatabaseAccessor.attachedDatabase");
  const _is_DatabaseAccessor_default = Symbol('_is_DatabaseAccessor_default');
  runtime_api.DatabaseAccessor$ = dart$.generic(T => {
    class DatabaseAccessor extends runtime_api.DatabaseConnectionUser {
      get attachedDatabase() {
        return this[attachedDatabase$];
      }
      set attachedDatabase(value) {
        super.attachedDatabase = value;
      }
    }
    (DatabaseAccessor.new = function(attachedDatabase) {
      this[attachedDatabase$] = attachedDatabase;
      DatabaseAccessor.__proto__.delegate.call(this, attachedDatabase);
      ;
    }).prototype = DatabaseAccessor.prototype;
    dart$.addTypeTests(DatabaseAccessor);
    DatabaseAccessor.prototype[_is_DatabaseAccessor_default] = true;
    dart$.addTypeCaches(DatabaseAccessor);
    dart$.setLibraryUri(DatabaseAccessor, I[21]);
    dart$.setFieldSignature(DatabaseAccessor, () => ({
      __proto__: dart$.getFields(DatabaseAccessor.__proto__),
      attachedDatabase: dart$.finalFieldType(T)
    }));
    return DatabaseAccessor;
  });
  runtime_api.DatabaseAccessor = runtime_api.DatabaseAccessor$();
  dart$.addTypeTests(runtime_api.DatabaseAccessor, _is_DatabaseAccessor_default);
  var _cachedMigration = dart$.privateName(runtime_api, "_cachedMigration");
  var _$dontSendThisOverIsolates = dart$.privateName(runtime_api, "_$dontSendThisOverIsolates");
  var _handleInstantiated = dart$.privateName(runtime_api, "_handleInstantiated");
  var _resolvedMigration = dart$.privateName(runtime_api, "_resolvedMigration");
  var StreamQueryUpdateRules_rules = dart$.privateName(runtime_api, "StreamQueryUpdateRules.rules");
  runtime_api.GeneratedDatabase = class GeneratedDatabase extends runtime_api.DatabaseConnectionUser {
    get attachedDatabase() {
      return this;
    }
    get migration() {
      return new query_builder.MigrationStrategy.new();
    }
    get [_resolvedMigration]() {
      let t125;
      t125 = this[_cachedMigration];
      return t125 == null ? this[_cachedMigration] = this.migration : t125;
    }
    get streamUpdateRules() {
      return C[90] || CT.C90;
    }
    get allSchemaEntities() {
      return this.allTables;
    }
    [_handleInstantiated]() {
      let t127, t126, t125, t126$, t125$;
      if (!runtime_api._openedDbCount[$containsKey](this[$runtimeType]) || runtime_api.driftRuntimeOptions.dontWarnAboutMultipleDatabases) {
        runtime_api._openedDbCount[$_set](this[$runtimeType], 1);
        return true;
      }
      let count = (t125 = runtime_api._openedDbCount, t126 = this[$runtimeType], t127 = dart$.nullCheck(runtime_api._openedDbCount[$_get](this[$runtimeType])) + 1, t125[$_set](t126, t127), t127);
      if (count > 1) {
        t125$ = runtime_api.driftRuntimeOptions;
        t126$ = "WARNING (drift): It looks like you've created the database class " + dart$.str(this[$runtimeType]) + " multiple times. When these two databases use the same " + "QueryExecutor, race conditions will occur and might corrupt the " + "database. \n" + "Try to follow the advice at https://drift.simonbinder.eu/faq/#using-the-database " + "or, if you know what you're doing, set " + "driftRuntimeOptions.dontWarnAboutMultipleDatabases = true\n" + "Here is the stacktrace from when the database was opened a second " + "time:\n" + dart$.str(core.StackTrace.current) + "\n" + "This warning will only appear on debug builds.";
        t125$.debugPrint(t126$);
      }
      return true;
    }
    createMigrator() {
      return new query_builder.Migrator.new(this);
    }
    beforeOpen(executor, details) {
      return this[_runConnectionZoned](dart$.void, new transactions.BeforeOpenRunner.new(this, executor), dart$.fn(() => async.async(dart$.void, (function*() {
        let t126, t125, t128, t127, t126$, t125$, t125$0;
        if (details.wasCreated) {
          let migrator = this.createMigrator();
          yield (t125 = this[_resolvedMigration], t126 = migrator, t125.onCreate(t126));
        } else if (details.hadUpgrade) {
          let migrator = this.createMigrator();
          yield (t125$ = this[_resolvedMigration], t126$ = migrator, t127 = dart$.nullCheck(details.versionBefore), t128 = details.versionNow, t125$.onUpgrade(t126$, t127, t128));
        }
        yield (t125$0 = this[_resolvedMigration].beforeOpen, t125$0 == null ? null : t125$0(details));
      }).bind(this)), T$.VoidToFutureOfvoid()));
    }
    close() {
      return async.async(dart$.void, (function* close() {
        yield this.streamQueries.close();
        yield this.executor.close();
        if (!dart$.fn(() => {
          if (runtime_api._openedDbCount[$_get](this[$runtimeType]) != null) {
            runtime_api._openedDbCount[$_set](this[$runtimeType], dart$.nullCheck(runtime_api._openedDbCount[$_get](this[$runtimeType])) - 1);
          }
          return true;
        }, T$.VoidTobool())()) dart$.assertFailed(null, I[26], 129, 12, "() {\n      if (_openedDbCount[runtimeType] != null) {\n        _openedDbCount[runtimeType] = _openedDbCount[runtimeType]! - 1;\n      }\n      return true;\n    }()");
      }).bind(this));
    }
  };
  (runtime_api.GeneratedDatabase.new = function(types, executor, opts) {
    let streamStore = opts && 'streamStore' in opts ? opts.streamStore : null;
    this[_cachedMigration] = null;
    this[_$dontSendThisOverIsolates] = dart$.wrapType(core.Null);
    runtime_api.GeneratedDatabase.__proto__.new.call(this, types, executor, {streamQueries: streamStore});
    if (!this[_handleInstantiated]()) dart$.assertFailed(null, I[26], 59, 12, "_handleInstantiated()");
  }).prototype = runtime_api.GeneratedDatabase.prototype;
  (runtime_api.GeneratedDatabase.connect = function(connection) {
    this[_cachedMigration] = null;
    this[_$dontSendThisOverIsolates] = dart$.wrapType(core.Null);
    runtime_api.GeneratedDatabase.__proto__.fromConnection.call(this, connection);
    if (!this[_handleInstantiated]()) dart$.assertFailed(null, I[26], 65, 12, "_handleInstantiated()");
  }).prototype = runtime_api.GeneratedDatabase.prototype;
  dart$.addTypeTests(runtime_api.GeneratedDatabase);
  dart$.addTypeCaches(runtime_api.GeneratedDatabase);
  runtime_api.GeneratedDatabase[dart$.implements] = () => [executor$.QueryExecutorUser];
  dart$.setMethodSignature(runtime_api.GeneratedDatabase, () => ({
    __proto__: dart$.getMethods(runtime_api.GeneratedDatabase.__proto__),
    [_handleInstantiated]: dart$.fnType(core.bool, []),
    createMigrator: dart$.fnType(query_builder.Migrator, []),
    beforeOpen: dart$.fnType(async.Future$(dart$.void), [executor$.QueryExecutor, query_builder.OpeningDetails]),
    close: dart$.fnType(async.Future$(dart$.void), [])
  }));
  dart$.setGetterSignature(runtime_api.GeneratedDatabase, () => ({
    __proto__: dart$.getGetters(runtime_api.GeneratedDatabase.__proto__),
    attachedDatabase: runtime_api.GeneratedDatabase,
    migration: query_builder.MigrationStrategy,
    [_resolvedMigration]: query_builder.MigrationStrategy,
    streamUpdateRules: runtime_api.StreamQueryUpdateRules,
    allSchemaEntities: core.Iterable$(query_builder.DatabaseSchemaEntity)
  }));
  dart$.setLibraryUri(runtime_api.GeneratedDatabase, I[21]);
  dart$.setFieldSignature(runtime_api.GeneratedDatabase, () => ({
    __proto__: dart$.getFields(runtime_api.GeneratedDatabase.__proto__),
    [_cachedMigration]: dart$.fieldType(dart$.nullable(query_builder.MigrationStrategy)),
    [_$dontSendThisOverIsolates]: dart$.finalFieldType(core.Type)
  }));
  const rules$ = StreamQueryUpdateRules_rules;
  runtime_api.StreamQueryUpdateRules = class StreamQueryUpdateRules extends core.Object {
    get rules() {
      return this[rules$];
    }
    set rules(value) {
      super.rules = value;
    }
    static ['_#new#tearOff'](rules) {
      return new runtime_api.StreamQueryUpdateRules.new(rules);
    }
    static ['_#none#tearOff']() {
      return new runtime_api.StreamQueryUpdateRules.none();
    }
    apply(input) {
      if (this.rules[$isEmpty]) return input[$toSet]();
      let pending = T$.ListOfTableUpdate().of(input);
      let seen = T$.LinkedHashSetOfTableUpdate().new();
      while (pending[$isNotEmpty]) {
        let update = pending[$removeLast]();
        seen.add(update);
        for (let rule of this.rules) {
          if (runtime_api.WritePropagation.is(rule) && rule.on.matches(update)) {
            pending[$addAll](rule.result[$where](dart$.fn(u => !seen.contains(u), T$.TableUpdateTobool())));
          }
        }
      }
      return seen;
    }
  };
  (runtime_api.StreamQueryUpdateRules.new = function(rules) {
    this[rules$] = rules;
    ;
  }).prototype = runtime_api.StreamQueryUpdateRules.prototype;
  (runtime_api.StreamQueryUpdateRules.none = function() {
    runtime_api.StreamQueryUpdateRules.new.call(this, C[91] || CT.C91);
  }).prototype = runtime_api.StreamQueryUpdateRules.prototype;
  dart$.addTypeTests(runtime_api.StreamQueryUpdateRules);
  dart$.addTypeCaches(runtime_api.StreamQueryUpdateRules);
  dart$.setMethodSignature(runtime_api.StreamQueryUpdateRules, () => ({
    __proto__: dart$.getMethods(runtime_api.StreamQueryUpdateRules.__proto__),
    apply: dart$.fnType(core.Set$(runtime_api.TableUpdate), [core.Iterable$(runtime_api.TableUpdate)])
  }));
  dart$.setLibraryUri(runtime_api.StreamQueryUpdateRules, I[21]);
  dart$.setFieldSignature(runtime_api.StreamQueryUpdateRules, () => ({
    __proto__: dart$.getFields(runtime_api.StreamQueryUpdateRules.__proto__),
    rules: dart$.finalFieldType(core.List$(runtime_api.UpdateRule))
  }));
  runtime_api.UpdateRule = class UpdateRule extends core.Object {};
  (runtime_api.UpdateRule.__ = function() {
    ;
  }).prototype = runtime_api.UpdateRule.prototype;
  dart$.addTypeTests(runtime_api.UpdateRule);
  dart$.addTypeCaches(runtime_api.UpdateRule);
  dart$.setLibraryUri(runtime_api.UpdateRule, I[21]);
  var on$0 = dart$.privateName(runtime_api, "WritePropagation.on");
  var result$ = dart$.privateName(runtime_api, "WritePropagation.result");
  runtime_api.WritePropagation = class WritePropagation extends runtime_api.UpdateRule {
    get on() {
      return this[on$0];
    }
    set on(value) {
      super.on = value;
    }
    get result() {
      return this[result$];
    }
    set result(value) {
      super.result = value;
    }
    static ['_#new#tearOff'](opts) {
      let on = opts && 'on' in opts ? opts.on : null;
      let result = opts && 'result' in opts ? opts.result : null;
      return new runtime_api.WritePropagation.new({on: on, result: result});
    }
  };
  (runtime_api.WritePropagation.new = function(opts) {
    let on = opts && 'on' in opts ? opts.on : null;
    let result = opts && 'result' in opts ? opts.result : null;
    this[on$0] = on;
    this[result$] = result;
    runtime_api.WritePropagation.__proto__.__.call(this);
    ;
  }).prototype = runtime_api.WritePropagation.prototype;
  dart$.addTypeTests(runtime_api.WritePropagation);
  dart$.addTypeCaches(runtime_api.WritePropagation);
  dart$.setLibraryUri(runtime_api.WritePropagation, I[21]);
  dart$.setFieldSignature(runtime_api.WritePropagation, () => ({
    __proto__: dart$.getFields(runtime_api.WritePropagation.__proto__),
    on: dart$.finalFieldType(runtime_api.TableUpdateQuery),
    result: dart$.finalFieldType(core.List$(runtime_api.TableUpdate))
  }));
  runtime_api.UpdateKind = class UpdateKind extends core._Enum {
    toString() {
      return "UpdateKind." + this[_name];
    }
  };
  (runtime_api.UpdateKind.new = function(index, name) {
    runtime_api.UpdateKind.__proto__.new.call(this, index, name);
    ;
  }).prototype = runtime_api.UpdateKind.prototype;
  dart$.addTypeTests(runtime_api.UpdateKind);
  dart$.addTypeCaches(runtime_api.UpdateKind);
  dart$.setLibraryUri(runtime_api.UpdateKind, I[21]);
  dart$.setStaticFieldSignature(runtime_api.UpdateKind, () => ['values', 'insert', 'update', 'delete']);
  dart$.defineExtensionMethods(runtime_api.UpdateKind, ['toString']);
  dart$.defineLazy(runtime_api.UpdateKind, {
    /*runtime_api.UpdateKind.values*/get values() {
      return C[92] || CT.C92;
    },
    /*runtime_api.UpdateKind.insert*/get insert() {
      return C[93] || CT.C93;
    },
    /*runtime_api.UpdateKind.update*/get update() {
      return C[94] || CT.C94;
    },
    /*runtime_api.UpdateKind.delete*/get delete() {
      return C[95] || CT.C95;
    }
  }, false);
  var kind$ = dart$.privateName(runtime_api, "TableUpdate.kind");
  var table$3 = dart$.privateName(runtime_api, "TableUpdate.table");
  runtime_api.TableUpdate = class TableUpdate extends core.Object {
    get kind() {
      return this[kind$];
    }
    set kind(value) {
      super.kind = value;
    }
    get table() {
      return this[table$3];
    }
    set table(value) {
      super.table = value;
    }
    static ['_#new#tearOff'](table, opts) {
      let kind = opts && 'kind' in opts ? opts.kind : null;
      return new runtime_api.TableUpdate.new(table, {kind: kind});
    }
    static onTable(table, opts) {
      let kind = opts && 'kind' in opts ? opts.kind : null;
      return new runtime_api.TableUpdate.new(table.actualTableName, {kind: kind});
    }
    static ['_#onTable#tearOff'](table, opts) {
      let kind = opts && 'kind' in opts ? opts.kind : null;
      return runtime_api.TableUpdate.onTable(table, {kind: kind});
    }
    get hashCode() {
      return core.Object.hash(this.kind, this.table);
    }
    _equals(other) {
      if (other == null) return false;
      return runtime_api.TableUpdate.is(other) && other.kind == this.kind && other.table === this.table;
    }
    toString() {
      return "TableUpdate(" + this.table + ", kind: " + dart$.str(this.kind) + ")";
    }
  };
  (runtime_api.TableUpdate.new = function(table, opts) {
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[table$3] = table;
    this[kind$] = kind;
    ;
  }).prototype = runtime_api.TableUpdate.prototype;
  dart$.addTypeTests(runtime_api.TableUpdate);
  dart$.addTypeCaches(runtime_api.TableUpdate);
  dart$.setStaticMethodSignature(runtime_api.TableUpdate, () => ['onTable']);
  dart$.setLibraryUri(runtime_api.TableUpdate, I[21]);
  dart$.setFieldSignature(runtime_api.TableUpdate, () => ({
    __proto__: dart$.getFields(runtime_api.TableUpdate.__proto__),
    kind: dart$.finalFieldType(dart$.nullable(runtime_api.UpdateKind)),
    table: dart$.finalFieldType(core.String)
  }));
  dart$.defineExtensionMethods(runtime_api.TableUpdate, ['_equals', 'toString']);
  dart$.defineExtensionAccessors(runtime_api.TableUpdate, ['hashCode']);
  runtime_api['OldDbFieldInDatabaseAccessor|get#db'] = function OldDbFieldInDatabaseAccessor$124get$35db(T, $this) {
    return $this.attachedDatabase;
  };
  dart$.defineLazy(runtime_api, {
    /*runtime_api.driftRuntimeOptions*/get driftRuntimeOptions() {
      return new runtime_api.DriftRuntimeOptions.new();
    },
    set driftRuntimeOptions(_) {},
    /*runtime_api._zoneRootUserKey*/get _zoneRootUserKey() {
      return C[96] || CT.C96;
    },
    /*runtime_api._openedDbCount*/get _openedDbCount() {
      return new (T$.LinkedMapOfType$int()).new();
    },
    set _openedDbCount(_) {}
  }, false);
  sqlite_keywords.isSqliteKeyword = function isSqliteKeyword(s) {
    return sqlite_keywords.sqliteKeywords.contains(s[$toUpperCase]());
  };
  sqlite_keywords.escapeIfNeeded = function escapeIfNeeded(s, dialect = C[10] || CT.C10) {
    let inUpperCase = s[$toUpperCase]();
    let isKeyword = sqlite_keywords.baseKeywords.contains(inUpperCase);
    if (dialect === query_builder.SqlDialect.postgres) {
      isKeyword = !!(isKeyword | sqlite_keywords.additionalPostgresKeywords.contains(inUpperCase));
    }
    if (isKeyword || s[$contains](sqlite_keywords._whitespace)) return "\"" + s + "\"";
    return s;
  };
  dart$.defineLazy(sqlite_keywords, {
    /*sqlite_keywords.baseKeywords*/get baseKeywords() {
      return C[97] || CT.C97;
    },
    /*sqlite_keywords.sqliteKeywords*/get sqliteKeywords() {
      return C[97] || CT.C97;
    },
    /*sqlite_keywords.additionalSqliteKeywords*/get additionalSqliteKeywords() {
      return C[98] || CT.C98;
    },
    /*sqlite_keywords.additionalPostgresKeywords*/get additionalPostgresKeywords() {
      return C[99] || CT.C99;
    },
    /*sqlite_keywords._whitespace*/get _whitespace() {
      return core.RegExp.new("\\s");
    }
  }, false);
  dsl.KeyAction = class KeyAction extends core._Enum {
    toString() {
      return "KeyAction." + this[_name];
    }
  };
  (dsl.KeyAction.new = function(index, name) {
    dsl.KeyAction.__proto__.new.call(this, index, name);
    ;
  }).prototype = dsl.KeyAction.prototype;
  dart$.addTypeTests(dsl.KeyAction);
  dart$.addTypeCaches(dsl.KeyAction);
  dart$.setLibraryUri(dsl.KeyAction, I[6]);
  dart$.setStaticFieldSignature(dsl.KeyAction, () => ['values', 'setNull', 'setDefault', 'cascade', 'restrict', 'noAction']);
  dart$.defineExtensionMethods(dsl.KeyAction, ['toString']);
  dart$.defineLazy(dsl.KeyAction, {
    /*dsl.KeyAction.values*/get values() {
      return C[100] || CT.C100;
    },
    /*dsl.KeyAction.setNull*/get setNull() {
      return C[101] || CT.C101;
    },
    /*dsl.KeyAction.setDefault*/get setDefault() {
      return C[102] || CT.C102;
    },
    /*dsl.KeyAction.cascade*/get cascade() {
      return C[103] || CT.C103;
    },
    /*dsl.KeyAction.restrict*/get restrict() {
      return C[104] || CT.C104;
    },
    /*dsl.KeyAction.noAction*/get noAction() {
      return C[105] || CT.C105;
    }
  }, false);
  const _is__BaseColumnBuilder_default = Symbol('_is__BaseColumnBuilder_default');
  dsl._BaseColumnBuilder$ = dart$.generic(T => {
    class _BaseColumnBuilder extends core.Object {
      static ['_#new#tearOff'](T) {
        return new (dsl._BaseColumnBuilder$(T)).new();
      }
    }
    (_BaseColumnBuilder.new = function() {
      ;
    }).prototype = _BaseColumnBuilder.prototype;
    dart$.addTypeTests(_BaseColumnBuilder);
    _BaseColumnBuilder.prototype[_is__BaseColumnBuilder_default] = true;
    dart$.addTypeCaches(_BaseColumnBuilder);
    dart$.setLibraryUri(_BaseColumnBuilder, I[6]);
    return _BaseColumnBuilder;
  });
  dsl._BaseColumnBuilder = dsl._BaseColumnBuilder$();
  dart$.addTypeTests(dsl._BaseColumnBuilder, _is__BaseColumnBuilder_default);
  const _is_ColumnBuilder_default = Symbol('_is_ColumnBuilder_default');
  dsl.ColumnBuilder$ = dart$.generic(T => {
    class ColumnBuilder extends dsl._BaseColumnBuilder$(T) {
      static ['_#new#tearOff'](T) {
        return new (dsl.ColumnBuilder$(T)).new();
      }
    }
    (ColumnBuilder.new = function() {
      ;
    }).prototype = ColumnBuilder.prototype;
    dart$.addTypeTests(ColumnBuilder);
    ColumnBuilder.prototype[_is_ColumnBuilder_default] = true;
    dart$.addTypeCaches(ColumnBuilder);
    dart$.setLibraryUri(ColumnBuilder, I[6]);
    return ColumnBuilder;
  });
  dsl.ColumnBuilder = dsl.ColumnBuilder$();
  dart$.addTypeTests(dsl.ColumnBuilder, _is_ColumnBuilder_default);
  const _is_VirtualColumnBuilder_default = Symbol('_is_VirtualColumnBuilder_default');
  dsl.VirtualColumnBuilder$ = dart$.generic(T => {
    class VirtualColumnBuilder extends dsl._BaseColumnBuilder$(T) {
      static ['_#new#tearOff'](T) {
        return new (dsl.VirtualColumnBuilder$(T)).new();
      }
    }
    (VirtualColumnBuilder.new = function() {
      ;
    }).prototype = VirtualColumnBuilder.prototype;
    dart$.addTypeTests(VirtualColumnBuilder);
    VirtualColumnBuilder.prototype[_is_VirtualColumnBuilder_default] = true;
    dart$.addTypeCaches(VirtualColumnBuilder);
    dart$.setLibraryUri(VirtualColumnBuilder, I[6]);
    return VirtualColumnBuilder;
  });
  dsl.VirtualColumnBuilder = dsl.VirtualColumnBuilder$();
  dart$.addTypeTests(dsl.VirtualColumnBuilder, _is_VirtualColumnBuilder_default);
  var key$0 = dart$.privateName(dsl, "JsonKey.key");
  dsl.JsonKey = class JsonKey extends core.Object {
    get key() {
      return this[key$0];
    }
    set key(value) {
      super.key = value;
    }
    static ['_#new#tearOff'](key) {
      return new dsl.JsonKey.new(key);
    }
  };
  (dsl.JsonKey.new = function(key) {
    this[key$0] = key;
    ;
  }).prototype = dsl.JsonKey.prototype;
  dart$.addTypeTests(dsl.JsonKey);
  dart$.addTypeCaches(dsl.JsonKey);
  dart$.setLibraryUri(dsl.JsonKey, I[6]);
  dart$.setFieldSignature(dsl.JsonKey, () => ({
    __proto__: dart$.getFields(dsl.JsonKey.__proto__),
    key: dart$.finalFieldType(core.String)
  }));
  var tables$0 = dart$.privateName(dsl, "DriftDatabase.tables");
  var views$ = dart$.privateName(dsl, "DriftDatabase.views");
  var daos$ = dart$.privateName(dsl, "DriftDatabase.daos");
  var queries$0 = dart$.privateName(dsl, "DriftDatabase.queries");
  var include$ = dart$.privateName(dsl, "DriftDatabase.include");
  dsl.DriftDatabase = class DriftDatabase extends core.Object {
    get tables() {
      return this[tables$0];
    }
    set tables(value) {
      super.tables = value;
    }
    get views() {
      return this[views$];
    }
    set views(value) {
      super.views = value;
    }
    get daos() {
      return this[daos$];
    }
    set daos(value) {
      super.daos = value;
    }
    get queries() {
      return this[queries$0];
    }
    set queries(value) {
      super.queries = value;
    }
    get include() {
      return this[include$];
    }
    set include(value) {
      super.include = value;
    }
    static ['_#new#tearOff'](opts) {
      let tables = opts && 'tables' in opts ? opts.tables : C[106] || CT.C106;
      let views = opts && 'views' in opts ? opts.views : C[106] || CT.C106;
      let daos = opts && 'daos' in opts ? opts.daos : C[106] || CT.C106;
      let queries = opts && 'queries' in opts ? opts.queries : C[107] || CT.C107;
      let include = opts && 'include' in opts ? opts.include : C[98] || CT.C98;
      return new dsl.DriftDatabase.new({tables: tables, views: views, daos: daos, queries: queries, include: include});
    }
  };
  (dsl.DriftDatabase.new = function(opts) {
    let tables = opts && 'tables' in opts ? opts.tables : C[106] || CT.C106;
    let views = opts && 'views' in opts ? opts.views : C[106] || CT.C106;
    let daos = opts && 'daos' in opts ? opts.daos : C[106] || CT.C106;
    let queries = opts && 'queries' in opts ? opts.queries : C[107] || CT.C107;
    let include = opts && 'include' in opts ? opts.include : C[98] || CT.C98;
    this[tables$0] = tables;
    this[views$] = views;
    this[daos$] = daos;
    this[queries$0] = queries;
    this[include$] = include;
    ;
  }).prototype = dsl.DriftDatabase.prototype;
  dart$.addTypeTests(dsl.DriftDatabase);
  dart$.addTypeCaches(dsl.DriftDatabase);
  dart$.setLibraryUri(dsl.DriftDatabase, I[6]);
  dart$.setFieldSignature(dsl.DriftDatabase, () => ({
    __proto__: dart$.getFields(dsl.DriftDatabase.__proto__),
    tables: dart$.finalFieldType(core.List$(core.Type)),
    views: dart$.finalFieldType(core.List$(core.Type)),
    daos: dart$.finalFieldType(core.List$(core.Type)),
    queries: dart$.finalFieldType(core.Map$(core.String, core.String)),
    include: dart$.finalFieldType(core.Set$(core.String))
  }));
  var tables$1 = dart$.privateName(dsl, "DriftAccessor.tables");
  var views$0 = dart$.privateName(dsl, "DriftAccessor.views");
  var queries$1 = dart$.privateName(dsl, "DriftAccessor.queries");
  var include$0 = dart$.privateName(dsl, "DriftAccessor.include");
  dsl.DriftAccessor = class DriftAccessor extends core.Object {
    get tables() {
      return this[tables$1];
    }
    set tables(value) {
      super.tables = value;
    }
    get views() {
      return this[views$0];
    }
    set views(value) {
      super.views = value;
    }
    get queries() {
      return this[queries$1];
    }
    set queries(value) {
      super.queries = value;
    }
    get include() {
      return this[include$0];
    }
    set include(value) {
      super.include = value;
    }
    static ['_#new#tearOff'](opts) {
      let tables = opts && 'tables' in opts ? opts.tables : C[106] || CT.C106;
      let views = opts && 'views' in opts ? opts.views : C[106] || CT.C106;
      let queries = opts && 'queries' in opts ? opts.queries : C[107] || CT.C107;
      let include = opts && 'include' in opts ? opts.include : C[98] || CT.C98;
      return new dsl.DriftAccessor.new({tables: tables, views: views, queries: queries, include: include});
    }
  };
  (dsl.DriftAccessor.new = function(opts) {
    let tables = opts && 'tables' in opts ? opts.tables : C[106] || CT.C106;
    let views = opts && 'views' in opts ? opts.views : C[106] || CT.C106;
    let queries = opts && 'queries' in opts ? opts.queries : C[107] || CT.C107;
    let include = opts && 'include' in opts ? opts.include : C[98] || CT.C98;
    this[tables$1] = tables;
    this[views$0] = views;
    this[queries$1] = queries;
    this[include$0] = include;
    ;
  }).prototype = dsl.DriftAccessor.prototype;
  dart$.addTypeTests(dsl.DriftAccessor);
  dart$.addTypeCaches(dsl.DriftAccessor);
  dart$.setLibraryUri(dsl.DriftAccessor, I[6]);
  dart$.setFieldSignature(dsl.DriftAccessor, () => ({
    __proto__: dart$.getFields(dsl.DriftAccessor.__proto__),
    tables: dart$.finalFieldType(core.List$(core.Type)),
    views: dart$.finalFieldType(core.List$(core.Type)),
    queries: dart$.finalFieldType(core.Map$(core.String, core.String)),
    include: dart$.finalFieldType(core.Set$(core.String))
  }));
  dsl.View = class View extends dsl.HasResultSet {
    select(columns) {
      return dsl._isGenerated();
    }
    from(table) {
      return dsl._isGenerated();
    }
  };
  (dsl.View.new = function() {
    dsl.View.__proto__.new.call(this);
    ;
  }).prototype = dsl.View.prototype;
  dart$.addTypeTests(dsl.View);
  dart$.addTypeCaches(dsl.View);
  dart$.setMethodSignature(dsl.View, () => ({
    __proto__: dart$.getMethods(dsl.View.__proto__),
    select: dart$.fnType(dsl.View, [core.List$(query_builder.Expression)]),
    from: dart$.fnType(query_builder.SimpleSelectStatement$(dsl.HasResultSet, dart$.dynamic), [dsl.Table])
  }));
  dart$.setLibraryUri(dsl.View, I[6]);
  var name$ = dart$.privateName(dsl, "DataClassName.name");
  dsl.DataClassName = class DataClassName extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    static ['_#new#tearOff'](name) {
      return new dsl.DataClassName.new(name);
    }
  };
  (dsl.DataClassName.new = function(name) {
    this[name$] = name;
    ;
  }).prototype = dsl.DataClassName.prototype;
  dart$.addTypeTests(dsl.DataClassName);
  dart$.addTypeCaches(dsl.DataClassName);
  dart$.setLibraryUri(dsl.DataClassName, I[6]);
  dart$.setFieldSignature(dsl.DataClassName, () => ({
    __proto__: dart$.getFields(dsl.DataClassName.__proto__),
    name: dart$.finalFieldType(core.String)
  }));
  var type$1 = dart$.privateName(dsl, "UseRowClass.type");
  var constructor$ = dart$.privateName(dsl, "UseRowClass.constructor");
  var generateInsertable$ = dart$.privateName(dsl, "UseRowClass.generateInsertable");
  dsl.UseRowClass = class UseRowClass extends core.Object {
    get type() {
      return this[type$1];
    }
    set type(value) {
      super.type = value;
    }
    get _constructor() {
      return this[constructor$];
    }
    set _constructor(value) {
      super._constructor = value;
    }
    get generateInsertable() {
      return this[generateInsertable$];
    }
    set generateInsertable(value) {
      super.generateInsertable = value;
    }
    static ['_#new#tearOff'](type, opts) {
      let constructor = opts && 'constructor' in opts ? opts.constructor : "";
      let generateInsertable = opts && 'generateInsertable' in opts ? opts.generateInsertable : false;
      return new dsl.UseRowClass.new(type, {constructor: constructor, generateInsertable: generateInsertable});
    }
  };
  (dsl.UseRowClass.new = function(type, opts) {
    let constructor = opts && 'constructor' in opts ? opts.constructor : "";
    let generateInsertable = opts && 'generateInsertable' in opts ? opts.generateInsertable : false;
    this[type$1] = type;
    this[constructor$] = constructor;
    this[generateInsertable$] = generateInsertable;
    ;
  }).prototype = dsl.UseRowClass.prototype;
  dart$.addTypeTests(dsl.UseRowClass);
  dart$.addTypeCaches(dsl.UseRowClass);
  dart$.setLibraryUri(dsl.UseRowClass, I[6]);
  dart$.setFieldSignature(dsl.UseRowClass, () => ({
    __proto__: dart$.getFields(dsl.UseRowClass.__proto__),
    type: dart$.finalFieldType(core.Type),
    _constructor: dart$.finalFieldType(core.String),
    generateInsertable: dart$.finalFieldType(core.bool)
  }));
  var name$0 = dart$.privateName(dsl, "DriftView.name");
  var dataClassName$ = dart$.privateName(dsl, "DriftView.dataClassName");
  dsl.DriftView = class DriftView extends core.Object {
    get name() {
      return this[name$0];
    }
    set name(value) {
      super.name = value;
    }
    get dataClassName() {
      return this[dataClassName$];
    }
    set dataClassName(value) {
      super.dataClassName = value;
    }
    static ['_#new#tearOff'](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let dataClassName = opts && 'dataClassName' in opts ? opts.dataClassName : null;
      return new dsl.DriftView.new({name: name, dataClassName: dataClassName});
    }
  };
  (dsl.DriftView.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let dataClassName = opts && 'dataClassName' in opts ? opts.dataClassName : null;
    this[name$0] = name;
    this[dataClassName$] = dataClassName;
    ;
  }).prototype = dsl.DriftView.prototype;
  dart$.addTypeTests(dsl.DriftView);
  dart$.addTypeCaches(dsl.DriftView);
  dart$.setLibraryUri(dsl.DriftView, I[6]);
  dart$.setFieldSignature(dsl.DriftView, () => ({
    __proto__: dart$.getFields(dsl.DriftView.__proto__),
    name: dart$.finalFieldType(dart$.nullable(core.String)),
    dataClassName: dart$.finalFieldType(dart$.nullable(core.String))
  }));
  dsl['BuildColumn|customConstraint'] = function BuildColumn$124customConstraint(T, $this, constraint) {
    return dsl._isGenerated();
  };
  dsl['BuildColumn|get#customConstraint'] = function BuildColumn$124get$35customConstraint(T, $this) {
    return dart$.fn(constraint => dsl['BuildColumn|customConstraint'](T, $this, constraint), dart$.fnType(dsl.ColumnBuilder$(T), [core.String]));
  };
  dsl['BuildColumn|withDefault'] = function BuildColumn$124withDefault(T, $this, e) {
    return dsl._isGenerated();
  };
  dsl['BuildColumn|get#withDefault'] = function BuildColumn$124get$35withDefault(T, $this) {
    return dart$.fn(e => dsl['BuildColumn|withDefault'](T, $this, e), dart$.fnType(dsl.ColumnBuilder$(T), [query_builder.Expression$(T)]));
  };
  dsl['BuildColumn|clientDefault'] = function BuildColumn$124clientDefault(T, $this, onInsert) {
    return dsl._isGenerated();
  };
  dsl['BuildColumn|get#clientDefault'] = function BuildColumn$124get$35clientDefault(T, $this) {
    return dart$.fn(onInsert => dsl['BuildColumn|clientDefault'](T, $this, onInsert), dart$.fnType(dsl.ColumnBuilder$(T), [dart$.fnType(T, [])]));
  };
  dsl['BuildColumn|references'] = function BuildColumn$124references(T, $this, table, column, opts) {
    let onUpdate = opts && 'onUpdate' in opts ? opts.onUpdate : null;
    let onDelete = opts && 'onDelete' in opts ? opts.onDelete : null;
    dsl._isGenerated();
  };
  dsl['BuildColumn|get#references'] = function BuildColumn$124get$35references(T, $this) {
    return dart$.fn((table, column, opts) => {
      let onUpdate = opts && 'onUpdate' in opts ? opts.onUpdate : null;
      let onDelete = opts && 'onDelete' in opts ? opts.onDelete : null;
      return dsl['BuildColumn|references'](T, $this, table, column, {onUpdate: onUpdate, onDelete: onDelete});
    }, dart$.fnType(dsl.ColumnBuilder$(T), [core.Type, core.Symbol], {onDelete: T$.KeyActionN(), onUpdate: T$.KeyActionN()}, {}));
  };
  dsl['BuildColumn|generatedAs'] = function BuildColumn$124generatedAs(T, $this, generatedAs, opts) {
    let stored = opts && 'stored' in opts ? opts.stored : false;
    return dsl._isGenerated();
  };
  dsl['BuildColumn|get#generatedAs'] = function BuildColumn$124get$35generatedAs(T, $this) {
    return dart$.fn((generatedAs, opts) => {
      let stored = opts && 'stored' in opts ? opts.stored : false;
      return dsl['BuildColumn|generatedAs'](T, $this, generatedAs, {stored: stored});
    }, dart$.fnType(dsl.VirtualColumnBuilder$(T), [query_builder.Expression$(dart$.nullable(T))], {stored: core.bool}, {}));
  };
  dsl['BuildGeneralColumn|named'] = function BuildGeneralColumn$124named(T, $this, name) {
    return dsl._isGenerated();
  };
  dsl['BuildGeneralColumn|get#named'] = function BuildGeneralColumn$124get$35named(T, $this) {
    return dart$.fn(name => dsl['BuildGeneralColumn|named'](T, $this, name), dart$.fnType(dsl.ColumnBuilder$(T), [core.String]));
  };
  dsl['BuildGeneralColumn|nullable'] = function BuildGeneralColumn$124nullable(T, $this) {
    return dsl._isGenerated();
  };
  dsl['BuildGeneralColumn|get#nullable'] = function BuildGeneralColumn$124get$35nullable(T, $this) {
    return dart$.fn(() => dsl['BuildGeneralColumn|nullable'](T, $this), dart$.fnType(dsl.ColumnBuilder$(dart$.nullable(T)), []));
  };
  dsl['BuildGeneralColumn|map'] = function BuildGeneralColumn$124map(T, Dart, $this, converter) {
    return dsl._isGenerated();
  };
  dsl['BuildGeneralColumn|get#map'] = function BuildGeneralColumn$124get$35map(T, $this) {
    return dart$.fn((Dart, converter) => dsl['BuildGeneralColumn|map'](T, Dart, $this, converter), dart$.gFnType(Dart => [dsl.ColumnBuilder$(T), [sql_types.TypeConverter$(Dart, T)]], Dart => [T$.ObjectN()]));
  };
  dsl['BuildGeneralColumn|call'] = function BuildGeneralColumn$124call(T, $this) {
    return dsl._isGenerated();
  };
  dsl['BuildGeneralColumn|get#call'] = function BuildGeneralColumn$124get$35call(T, $this) {
    return dart$.fn(() => dsl['BuildGeneralColumn|call'](T, $this), dart$.fnType(dsl.Column$(T), []));
  };
  dsl['BuildIntColumn|autoIncrement'] = function BuildIntColumn$124autoIncrement(T, $this) {
    return dsl._isGenerated();
  };
  dsl['BuildIntColumn|get#autoIncrement'] = function BuildIntColumn$124get$35autoIncrement(T, $this) {
    return dart$.fn(() => dsl['BuildIntColumn|autoIncrement'](T, $this), dart$.fnType(dsl.ColumnBuilder$(T), []));
  };
  dsl['BuildTextColumn|withLength'] = function BuildTextColumn$124withLength(T, $this, opts) {
    let min = opts && 'min' in opts ? opts.min : null;
    let max = opts && 'max' in opts ? opts.max : null;
    return dsl._isGenerated();
  };
  dsl['BuildTextColumn|get#withLength'] = function BuildTextColumn$124get$35withLength(T, $this) {
    return dart$.fn(opts => {
      let min = opts && 'min' in opts ? opts.min : null;
      let max = opts && 'max' in opts ? opts.max : null;
      return dsl['BuildTextColumn|withLength'](T, $this, {min: min, max: max});
    }, dart$.fnType(dsl.ColumnBuilder$(T), [], {max: T$.intN(), min: T$.intN()}, {}));
  };
  dsl._isGenerated = function _isGenerated() {
    dart$.throw(new core.UnsupportedError.new("This method should not be called at runtime. Are you sure you re-ran the " + "builder after changing your tables or databases?"));
  };
  dart$.trackLibraries("packages/drift/src/utils/lazy_database.dart", {
    "package:drift/src/utils/lazy_database.dart": lazy_database,
    "package:drift/src/runtime/types/sql_types.dart": sql_types,
    "package:drift/src/runtime/query_builder/expressions/case_when.dart": case_when,
    "package:drift/src/runtime/query_builder/query_builder.dart": query_builder,
    "package:drift/src/runtime/executor/helpers/engines.dart": engines,
    "package:drift/src/runtime/executor/helpers/delegates.dart": delegates,
    "package:drift/backends.dart": backends,
    "package:drift/src/runtime/executor/executor.dart": executor$,
    "package:drift/src/runtime/executor/connection_pool.dart": connection_pool,
    "package:drift/src/runtime/exceptions.dart": exceptions,
    "package:drift/src/runtime/data_verification.dart": data_verification,
    "package:drift/src/runtime/data_class.dart": data_class,
    "package:drift/src/runtime/custom_result_set.dart": custom_result_set,
    "package:drift/src/runtime/executor/transactions.dart": transactions,
    "package:drift/src/runtime/executor/stream_queries.dart": stream_queries,
    "package:drift/src/runtime/executor/delayed_stream_queries.dart": delayed_stream_queries,
    "package:drift/src/runtime/api/runtime_api.dart": runtime_api,
    "package:drift/sqlite_keywords.dart": sqlite_keywords,
    "package:drift/src/dsl/dsl.dart": dsl,
    "package:drift/drift.dart": drift
  }, {
    "package:drift/src/runtime/types/sql_types.dart": ["custom_type.dart", "type_system.dart"],
    "package:drift/src/runtime/query_builder/query_builder.dart": ["components/group_by.dart", "components/join.dart", "components/limit.dart", "components/order_by.dart", "components/where.dart", "expressions/aggregate.dart", "expressions/algebra.dart", "expressions/bools.dart", "expressions/comparable.dart", "expressions/custom.dart", "expressions/datetimes.dart", "expressions/exists.dart", "expressions/expression.dart", "expressions/in.dart", "expressions/null_check.dart", "expressions/text.dart", "expressions/variables.dart", "schema/column_impl.dart", "schema/entities.dart", "schema/table_info.dart", "schema/view_info.dart", "statements/select/custom_select.dart", "statements/select/select.dart", "statements/select/select_with_join.dart", "statements/delete.dart", "statements/insert.dart", "statements/query.dart", "statements/update.dart", "generation_context.dart", "migration.dart"],
    "package:drift/src/runtime/api/runtime_api.dart": ["batch.dart", "connection.dart", "connection_user.dart", "dao_base.dart", "db_base.dart", "stream_updates.dart"],
    "package:drift/src/dsl/dsl.dart": ["columns.dart", "database.dart", "table.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["../runtime/executor/executor.dart","lazy_database.dart","../runtime/types/sql_types.dart","../runtime/types/custom_type.dart","../runtime/types/type_system.dart","../runtime/query_builder/expressions/expression.dart","../runtime/query_builder/expressions/case_when.dart","../runtime/query_builder/query_builder.dart","../runtime/query_builder/components/group_by.dart","../runtime/query_builder/components/join.dart","../runtime/query_builder/components/limit.dart","../runtime/query_builder/components/order_by.dart","../runtime/query_builder/components/where.dart","../runtime/query_builder/expressions/aggregate.dart","../runtime/query_builder/expressions/bools.dart","../runtime/query_builder/expressions/comparable.dart","../runtime/query_builder/expressions/custom.dart","../runtime/query_builder/expressions/datetimes.dart","../runtime/query_builder/expressions/exists.dart","../runtime/query_builder/expressions/in.dart","../runtime/query_builder/expressions/null_check.dart","../runtime/query_builder/expressions/text.dart","../runtime/query_builder/expressions/variables.dart","../dsl/columns.dart","../runtime/query_builder/schema/column_impl.dart","../runtime/query_builder/schema/entities.dart","../dsl/table.dart","../runtime/query_builder/schema/table_info.dart","../runtime/query_builder/schema/view_info.dart","../runtime/query_builder/statements/query.dart","../runtime/query_builder/statements/select/custom_select.dart","../runtime/query_builder/statements/select/select.dart","../runtime/query_builder/statements/select/select_with_join.dart","../runtime/query_builder/statements/delete.dart","../runtime/query_builder/statements/insert.dart","../runtime/query_builder/statements/update.dart","../runtime/query_builder/generation_context.dart","../runtime/query_builder/migration.dart","../runtime/query_builder/expressions/algebra.dart","../runtime/executor/helpers/engines.dart","../runtime/executor/helpers/delegates.dart","../runtime/executor/connection_pool.dart","../runtime/exceptions.dart","../runtime/data_verification.dart","../runtime/data_class.dart","../runtime/custom_result_set.dart","../runtime/api/connection_user.dart","../runtime/executor/transactions.dart","../runtime/executor/stream_queries.dart","../runtime/api/stream_updates.dart","../runtime/executor/delayed_stream_queries.dart","../runtime/api/runtime_api.dart","../runtime/api/batch.dart","../runtime/api/connection.dart","../runtime/api/dao_base.dart","../runtime/api/db_base.dart","../../sqlite_keywords.dart","../dsl/database.dart","../dsl/dsl.dart"],"names":[],"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","file":"../../../../../../../../../../../../packages/drift/src/utils/lazy_database.dart.lib.js"}');
  // Exports:
  return {
    src__utils__lazy_database: lazy_database,
    src__runtime__types__sql_types: sql_types,
    src__runtime__query_builder__expressions__case_when: case_when,
    src__runtime__query_builder__query_builder: query_builder,
    src__runtime__executor__helpers__engines: engines,
    src__runtime__executor__helpers__delegates: delegates,
    backends: backends,
    src__runtime__executor__executor: executor$,
    src__runtime__executor__connection_pool: connection_pool,
    src__runtime__exceptions: exceptions,
    src__runtime__data_verification: data_verification,
    src__runtime__data_class: data_class,
    src__runtime__custom_result_set: custom_result_set,
    src__runtime__executor__transactions: transactions,
    src__runtime__executor__stream_queries: stream_queries,
    src__runtime__executor__delayed_stream_queries: delayed_stream_queries,
    src__runtime__api__runtime_api: runtime_api,
    sqlite_keywords: sqlite_keywords,
    src__dsl__dsl: dsl,
    drift: drift
  };
}));

//# sourceMappingURL=lazy_database.dart.lib.js.map
