define(['dart_sdk'], (function load__packages__flutter_blurhash__src__blurhash_dart(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _native_typed_data = dart_sdk._native_typed_data;
  const math = dart_sdk.math;
  const async = dart_sdk.async;
  const typed_data = dart_sdk.typed_data;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var blurhash = Object.create(dart.library);
  var $_get = dartx._get;
  var $floor = dartx.floor;
  var $modulo = dartx['%'];
  var $length = dartx.length;
  var $substring = dartx.substring;
  var $_set = dartx._set;
  var $buffer = dartx.buffer;
  var $asByteData = dartx.asByteData;
  var $setUint8 = dartx.setUint8;
  var $setInt32 = dartx.setInt32;
  var $setUint32 = dartx.setUint32;
  var $setUint16 = dartx.setUint16;
  var $setRange = dartx.setRange;
  var $round = dartx.round;
  var $abs = dartx.abs;
  var $codeUnits = dartx.codeUnits;
  var $elementAt = dartx.elementAt;
  var $indexOf = dartx.indexOf;
  var $rightShift = dartx['>>'];
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    FutureOfUint8List: () => (T.FutureOfUint8List = dart.constFn(async.Future$(typed_data.Uint8List)))(),
    CompleterOfImage: () => (T.CompleterOfImage = dart.constFn(async.Completer$(ui.Image)))(),
    JSArrayOfdouble: () => (T.JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(core.double)))(),
    ListOfStyle: () => (T.ListOfStyle = dart.constFn(core.List$(blurhash.Style)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C3() {
      return C[3] = dart.constList([], ui.Color);
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: blurhash.Style.prototype,
        [background$]: null,
        [stroke$]: null,
        [colors$]: C[3] || CT.C3,
        [name$]: "one"
      });
    },
    get C1() {
      return C[1] = dart.constList([C[2] || CT.C2], blurhash.Style);
    },
    get C0() {
      return C[0] = dart.constMap(core.String, T.ListOfStyle(), ["flourish", C[1] || CT.C1]);
    }
  }, false);
  var C = Array(4).fill(void 0);
  var I = ["package:flutter_blurhash/src/blurhash.dart"];
  var name$ = dart.privateName(blurhash, "Style.name");
  var colors$ = dart.privateName(blurhash, "Style.colors");
  var stroke$ = dart.privateName(blurhash, "Style.stroke");
  var background$ = dart.privateName(blurhash, "Style.background");
  blurhash.Style = class Style extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get colors() {
      return this[colors$];
    }
    set colors(value) {
      super.colors = value;
    }
    get stroke() {
      return this[stroke$];
    }
    set stroke(value) {
      super.stroke = value;
    }
    get background() {
      return this[background$];
    }
    set background(value) {
      super.background = value;
    }
    static ['_#new#tearOff'](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let colors = opts && 'colors' in opts ? opts.colors : null;
      let stroke = opts && 'stroke' in opts ? opts.stroke : null;
      let background = opts && 'background' in opts ? opts.background : null;
      return new blurhash.Style.new({name: name, colors: colors, stroke: stroke, background: background});
    }
  };
  (blurhash.Style.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stroke = opts && 'stroke' in opts ? opts.stroke : null;
    let background = opts && 'background' in opts ? opts.background : null;
    this[name$] = name;
    this[colors$] = colors;
    this[stroke$] = stroke;
    this[background$] = background;
    ;
  }).prototype = blurhash.Style.prototype;
  dart.addTypeTests(blurhash.Style);
  dart.addTypeCaches(blurhash.Style);
  dart.setLibraryUri(blurhash.Style, I[0]);
  dart.setFieldSignature(blurhash.Style, () => ({
    __proto__: dart.getFields(blurhash.Style.__proto__),
    name: dart.finalFieldType(core.String),
    colors: dart.finalFieldType(core.List$(ui.Color)),
    stroke: dart.finalFieldType(dart.nullable(ui.Color)),
    background: dart.finalFieldType(dart.nullable(ui.Color))
  }));
  blurhash.blurHashDecode = function blurHashDecode(opts) {
    let t0, t0$, t0$0, t0$1, t0$2;
    let blurHash = opts && 'blurHash' in opts ? opts.blurHash : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let punch = opts && 'punch' in opts ? opts.punch : 1;
    blurhash._validateBlurHash(blurHash);
    let sizeFlag = blurhash._decode83(blurHash[$_get](0));
    let numY = (sizeFlag / 9)[$floor]() + 1;
    let numX = sizeFlag[$modulo](9) + 1;
    let quantisedMaximumValue = blurhash._decode83(blurHash[$_get](1));
    let maximumValue = (quantisedMaximumValue + 1) / 166;
    let colors = (t0 = [], (() => {
      t0[$length] = numX * numY;
      return t0;
    })());
    for (let i = 0; i < colors[$length]; i = i + 1) {
      if (i === 0) {
        let value = blurhash._decode83(blurHash[$substring](2, 6));
        colors[$_set](i, blurhash._decodeDC(value));
      } else {
        let value = blurhash._decode83(blurHash[$substring](4 + i * 2, 6 + i * 2));
        colors[$_set](i, blurhash._decodeAC(value, maximumValue * punch));
      }
    }
    let bytesPerRow = width * 4;
    let pixels = _native_typed_data.NativeUint8List.new(bytesPerRow * height);
    let p = 0;
    for (let y = 0; y < height; y = y + 1) {
      for (let x = 0; x < width; x = x + 1) {
        let r = 0.0;
        let g = 0.0;
        let b = 0.0;
        for (let j = 0; j < numY; j = j + 1) {
          for (let i = 0; i < numX; i = i + 1) {
            let basis = math.cos(3.141592653589793 * x * i / width) * math.cos(3.141592653589793 * y * j / height);
            let color = colors[$_get](i + j * numX);
            r = r + core.num.as(dart.dsend(dart.dsend(color, '_get', [0]), '*', [basis]));
            g = g + core.num.as(dart.dsend(dart.dsend(color, '_get', [1]), '*', [basis]));
            b = b + core.num.as(dart.dsend(dart.dsend(color, '_get', [2]), '*', [basis]));
          }
        }
        let intR = blurhash._linearTosRGB(r);
        let intG = blurhash._linearTosRGB(g);
        let intB = blurhash._linearTosRGB(b);
        pixels[$_set]((t0$ = p, p = t0$ + 1, t0$), intR);
        pixels[$_set]((t0$0 = p, p = t0$0 + 1, t0$0), intG);
        pixels[$_set]((t0$1 = p, p = t0$1 + 1, t0$1), intB);
        pixels[$_set]((t0$2 = p, p = t0$2 + 1, t0$2), 255);
      }
    }
    return T.FutureOfUint8List().value(pixels);
  };
  blurhash.blurHashDecodeImage = function blurHashDecodeImage(opts) {
    let blurHash = opts && 'blurHash' in opts ? opts.blurHash : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let punch = opts && 'punch' in opts ? opts.punch : 1;
    return async.async(ui.Image, function* blurHashDecodeImage() {
      blurhash._validateBlurHash(blurHash);
      let completer = T.CompleterOfImage().new();
      {
        let pixels = (yield blurhash.blurHashDecode({blurHash: blurHash, width: width, height: height, punch: punch}));
        completer.complete(blurhash._createBmp(pixels, width, height));
      }
      return completer.future;
    });
  };
  blurhash._createBmp = function _createBmp(pixels, width, height) {
    return async.async(ui.Image, function* _createBmp() {
      let size = width * height * 4 + 122;
      let bmp = _native_typed_data.NativeUint8List.new(size);
      let header = bmp[$buffer][$asByteData]();
      header[$setUint8](0, 66);
      header[$setUint8](1, 77);
      header[$setInt32](2, size, typed_data.Endian.little);
      header[$setInt32](10, 122, typed_data.Endian.little);
      header[$setUint32](14, 108, typed_data.Endian.little);
      header[$setUint32](18, width, typed_data.Endian.little);
      header[$setUint32](22, -height, typed_data.Endian.little);
      header[$setUint16](26, 1, typed_data.Endian.little);
      header[$setUint32](28, 32, typed_data.Endian.little);
      header[$setUint32](30, 3, typed_data.Endian.little);
      header[$setUint32](34, width * height * 4, typed_data.Endian.little);
      header[$setUint32](54, 255, typed_data.Endian.little);
      header[$setUint32](58, 65280, typed_data.Endian.little);
      header[$setUint32](62, 16711680, typed_data.Endian.little);
      header[$setUint32](66, 4278190080, typed_data.Endian.little);
      bmp[$setRange](122, size, pixels);
      let codec = (yield ui.instantiateImageCodec(bmp));
      let frame = (yield codec.getNextFrame());
      return frame.image;
    });
  };
  blurhash._sRGBToLinear = function _sRGBToLinear(value) {
    let v = value / 255;
    if (v <= 0.04045) {
      return v / 12.92;
    } else {
      return math.pow((v + 0.055) / 1.055, 2.4);
    }
  };
  blurhash._linearTosRGB = function _linearTosRGB(value) {
    let v = math.max(core.num, 0, math.min(core.num, 1, value));
    if (v <= 0.0031308) {
      return (v * 12.92 * 255 + 0.5)[$round]();
    } else {
      return ((1.055 * math.pow(v, 1 / 2.4) - 0.055) * 255 + 0.5)[$round]();
    }
  };
  blurhash._validateBlurHash = function _validateBlurHash(blurHash) {
    if (blurHash.length < 6) {
      dart.throw(core.Exception.new("The blurhash string must be at least 6 characters"));
    }
    let sizeFlag = blurhash._decode83(blurHash[$_get](0));
    let numY = (sizeFlag / 9)[$floor]() + 1;
    let numX = sizeFlag[$modulo](9) + 1;
    if (blurHash.length !== 4 + 2 * numX * numY) {
      dart.throw(core.Exception.new("blurhash length mismatch: length is " + dart.str(blurHash.length) + " but " + "it should be " + dart.str(4 + 2 * numX * numY)));
    }
  };
  blurhash._sign = function _sign(n) {
    return n < 0 ? -1 : 1;
  };
  blurhash._signPow = function _signPow(val, exp) {
    return blurhash._sign(val) * math.pow(val[$abs](), exp);
  };
  blurhash._decode83 = function _decode83(str) {
    let value = 0;
    let units = str[$codeUnits];
    let digits = blurhash._digitCharacters[$codeUnits];
    for (let i = 0; i < units[$length]; i = i + 1) {
      let code = units[$elementAt](i);
      let digit = digits[$indexOf](code);
      if (digit === -1) {
        dart.throw(new core.ArgumentError.value(str, "str"));
      }
      value = value * 83 + digit;
    }
    return value;
  };
  blurhash._decodeDC = function _decodeDC(value) {
    let intR = value[$rightShift](16);
    let intG = value >> 8 & 255;
    let intB = value & 255;
    return T.JSArrayOfdouble().of([blurhash._sRGBToLinear(intR), blurhash._sRGBToLinear(intG), blurhash._sRGBToLinear(intB)]);
  };
  blurhash._decodeAC = function _decodeAC(value, maximumValue) {
    let quantR = (value / (19 * 19))[$floor]();
    let quantG = (value / 19)[$floor]()[$modulo](19);
    let quantB = value[$modulo](19);
    let rgb = T.JSArrayOfdouble().of([blurhash._signPow((quantR - 9) / 9, 2.0) * maximumValue, blurhash._signPow((quantG - 9) / 9, 2.0) * maximumValue, blurhash._signPow((quantB - 9) / 9, 2.0) * maximumValue]);
    return rgb;
  };
  dart.defineLazy(blurhash, {
    /*blurhash._digitCharacters*/get _digitCharacters() {
      return "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz#$%*+,-.:;=?@[]^_{|}~";
    },
    /*blurhash.styles*/get styles() {
      return C[0] || CT.C0;
    }
  }, false);
  dart.trackLibraries("packages/flutter_blurhash/src/blurhash.dart", {
    "package:flutter_blurhash/src/blurhash.dart": blurhash
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["blurhash.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../packages/flutter_blurhash/src/blurhash.dart.lib.js"}');
  // Exports:
  return {
    src__blurhash: blurhash
  };
}));

//# sourceMappingURL=blurhash.dart.lib.js.map
