define(['dart_sdk', 'packages/flutter/src/widgets/title.dart', 'packages/cc_library/widget/dynamic_form/enum/enum_dynamic_form.dart', 'packages/flutter/src/services/text_editing_delta.dart', 'packages/intl/src/intl/date_format.dart', 'packages/flutter/src/material/date.dart', 'packages/cc_library/src/extension/logger.dart', 'packages/cc_library/widget/dynamic_form/model/select_box_model.dart'], (function load__packages__cc_library__widget__dynamic_form__model__input_date_picker_model_dart(dart_sdk, packages__flutter__src__widgets__title$46dart, packages__cc_library__widget__dynamic_form__enum__enum_dynamic_form$46dart, packages__flutter__src__services__text_editing_delta$46dart, packages__intl__src__intl__date_format$46dart, packages__flutter__src__material__date$46dart, packages__cc_library__src__extension__logger$46dart, packages__cc_library__widget__dynamic_form__model__select_box_model$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const editable_text = packages__flutter__src__widgets__title$46dart.src__widgets__editable_text;
  const enum_dynamic_form = packages__cc_library__widget__dynamic_form__enum__enum_dynamic_form$46dart.widget__dynamic_form__enum__enum_dynamic_form;
  const text_input = packages__flutter__src__services__text_editing_delta$46dart.src__services__text_input;
  const date_format = packages__intl__src__intl__date_format$46dart.src__intl__date_format;
  const date = packages__flutter__src__material__date$46dart.src__material__date;
  const logger = packages__cc_library__src__extension__logger$46dart.src__extension__logger;
  const input_base = packages__cc_library__widget__dynamic_form__model__select_box_model$46dart.widget__dynamic_form__model__input_base;
  var input_date_picker_model = Object.create(dart.library);
  var $isEmpty = dartx.isEmpty;
  var $toString = dartx.toString;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = ["package:cc_library/widget/dynamic_form/model/input_date_picker_model.dart"];
  const controller = Symbol("controller");
  const type = Symbol("type");
  const id$ = Symbol("id");
  const label$ = Symbol("label");
  const hint$ = Symbol("hint");
  const color$ = Symbol("color");
  const border$ = Symbol("border");
  const textInputAction$ = Symbol("textInputAction");
  const enable$ = Symbol("enable");
  const readOnly$ = Symbol("readOnly");
  const suffixType$ = Symbol("suffixType");
  const requiredValidate$ = Symbol("requiredValidate");
  const dateFormat$ = Symbol("dateFormat");
  const alignment$ = Symbol("alignment");
  const onChange$ = Symbol("onChange");
  const onDelete$ = Symbol("onDelete");
  const isSelectOnFirstFocus$ = Symbol("isSelectOnFirstFocus");
  const padding$ = Symbol("padding");
  const maxLine$ = Symbol("maxLine");
  const isVisible$ = Symbol("isVisible");
  const dateTimeRange$ = Symbol("dateTimeRange");
  const colorBorder$ = Symbol("colorBorder");
  const colorFocusedBorder$ = Symbol("colorFocusedBorder");
  const colorErrorBorder$ = Symbol("colorErrorBorder");
  const colorDisableBorder$ = Symbol("colorDisableBorder");
  const widthBorder$ = Symbol("widthBorder");
  const backgroundColor$ = Symbol("backgroundColor");
  const margin$ = Symbol("margin");
  const heightInput$ = Symbol("heightInput");
  const textStyleInput$ = Symbol("textStyleInput");
  const textStyleHint$ = Symbol("textStyleHint");
  const textStyleLabel = Symbol("textStyleLabel");
  input_date_picker_model.InputDateObject = class InputDateObject extends input_base.InputObject$(core.DateTime) {
    static ['_#new#tearOff'](opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      let label = opts && 'label' in opts ? opts.label : null;
      let hint = opts && 'hint' in opts ? opts.hint : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let border = opts && 'border' in opts ? opts.border : null;
      let maxLength = opts && 'maxLength' in opts ? opts.maxLength : null;
      let textInputAction = opts && 'textInputAction' in opts ? opts.textInputAction : null;
      let enable = opts && 'enable' in opts ? opts.enable : null;
      let suffixType = opts && 'suffixType' in opts ? opts.suffixType : null;
      let requiredValidate = opts && 'requiredValidate' in opts ? opts.requiredValidate : null;
      let readOnly = opts && 'readOnly' in opts ? opts.readOnly : null;
      let dateFormat = opts && 'dateFormat' in opts ? opts.dateFormat : null;
      let alignment = opts && 'alignment' in opts ? opts.alignment : null;
      let onChange = opts && 'onChange' in opts ? opts.onChange : null;
      let onDelete = opts && 'onDelete' in opts ? opts.onDelete : null;
      let marginTop = opts && 'marginTop' in opts ? opts.marginTop : null;
      let isSelectOnFirstFocus = opts && 'isSelectOnFirstFocus' in opts ? opts.isSelectOnFirstFocus : null;
      let padding = opts && 'padding' in opts ? opts.padding : null;
      let dateTimeRange = opts && 'dateTimeRange' in opts ? opts.dateTimeRange : null;
      let margin = opts && 'margin' in opts ? opts.margin : null;
      let maxLine = opts && 'maxLine' in opts ? opts.maxLine : null;
      let isVisible = opts && 'isVisible' in opts ? opts.isVisible : null;
      let colorBorder = opts && 'colorBorder' in opts ? opts.colorBorder : null;
      let colorFocusedBorder = opts && 'colorFocusedBorder' in opts ? opts.colorFocusedBorder : null;
      let colorErrorBorder = opts && 'colorErrorBorder' in opts ? opts.colorErrorBorder : null;
      let colorDisableBorder = opts && 'colorDisableBorder' in opts ? opts.colorDisableBorder : null;
      let widthBorder = opts && 'widthBorder' in opts ? opts.widthBorder : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let heightInput = opts && 'heightInput' in opts ? opts.heightInput : null;
      let textStyleInput = opts && 'textStyleInput' in opts ? opts.textStyleInput : null;
      let textStyleHint = opts && 'textStyleHint' in opts ? opts.textStyleHint : null;
      let responsiveScreens = opts && 'responsiveScreens' in opts ? opts.responsiveScreens : null;
      return new input_date_picker_model.InputDateObject.new({id: id, label: label, hint: hint, color: color, border: border, maxLength: maxLength, textInputAction: textInputAction, enable: enable, suffixType: suffixType, requiredValidate: requiredValidate, readOnly: readOnly, dateFormat: dateFormat, alignment: alignment, onChange: onChange, onDelete: onDelete, marginTop: marginTop, isSelectOnFirstFocus: isSelectOnFirstFocus, padding: padding, dateTimeRange: dateTimeRange, margin: margin, maxLine: maxLine, isVisible: isVisible, colorBorder: colorBorder, colorFocusedBorder: colorFocusedBorder, colorErrorBorder: colorErrorBorder, colorDisableBorder: colorDisableBorder, widthBorder: widthBorder, backgroundColor: backgroundColor, heightInput: heightInput, textStyleInput: textStyleInput, textStyleHint: textStyleHint, responsiveScreens: responsiveScreens});
    }
    get value() {
      return this.valueResult;
    }
    set value(v) {
      if (core.DateTime.is(v)) {
        this.valueResult = v;
      } else {
        this.valueResult = null;
      }
      this.syncController(v);
    }
    syncController(v) {
      try {
        if (core.DateTime.is(v)) {
          let date = v;
          let text = dart.nullCheck(this.dateFormat).format(date);
          if (dart.nullCheck(this.controller).text !== text) {
            dart.nullCheck(this.controller).text = text;
          }
        } else {
          if (dart.toString(v)[$isEmpty]) {
            dart.nullCheck(this.controller).text = "";
          }
        }
      } catch (e$) {
        let e = dart.getThrown(e$);
        let t = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          logger['TypeExtension|Log'](core.String, dart.str(e));
        } else
          throw e$;
      }
      this.refreshUI();
    }
    set [controller](x) {
      super.controller = x;
    }
    set [type](x) {
      super.type = x;
    }
    set [id$](x) {
      super.id = x;
    }
    set [label$](x) {
      super.label = x;
    }
    set [hint$](x) {
      super.hint = x;
    }
    set [color$](x) {
      super.color = x;
    }
    set [border$](x) {
      super.border = x;
    }
    set [textInputAction$](x) {
      super.textInputAction = x;
    }
    set [enable$](x) {
      super.enable = x;
    }
    set [readOnly$](x) {
      super.readOnly = x;
    }
    set [suffixType$](x) {
      super.suffixType = x;
    }
    set [requiredValidate$](x) {
      super.requiredValidate = x;
    }
    set [dateFormat$](x) {
      super.dateFormat = x;
    }
    set [alignment$](x) {
      super.alignment = x;
    }
    set [onChange$](x) {
      super.onChange = x;
    }
    set [onDelete$](x) {
      super.onDelete = x;
    }
    set [isSelectOnFirstFocus$](x) {
      super.isSelectOnFirstFocus = x;
    }
    set [padding$](x) {
      super.padding = x;
    }
    set [maxLine$](x) {
      super.maxLine = x;
    }
    set [isVisible$](x) {
      super.isVisible = x;
    }
    set [dateTimeRange$](x) {
      super.dateTimeRange = x;
    }
    set [colorBorder$](x) {
      super.colorBorder = x;
    }
    set [colorFocusedBorder$](x) {
      super.colorFocusedBorder = x;
    }
    set [colorErrorBorder$](x) {
      super.colorErrorBorder = x;
    }
    set [colorDisableBorder$](x) {
      super.colorDisableBorder = x;
    }
    set [widthBorder$](x) {
      super.widthBorder = x;
    }
    set [backgroundColor$](x) {
      super.backgroundColor = x;
    }
    set [margin$](x) {
      super.margin = x;
    }
    set [heightInput$](x) {
      super.heightInput = x;
    }
    set [textStyleInput$](x) {
      super.textStyleInput = x;
    }
    set [textStyleHint$](x) {
      super.textStyleHint = x;
    }
    set [textStyleLabel](x) {
      super.textStyleLabel = x;
    }
  };
  (input_date_picker_model.InputDateObject.new = function(opts) {
    let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6;
    let id = opts && 'id' in opts ? opts.id : null;
    let label = opts && 'label' in opts ? opts.label : null;
    let hint = opts && 'hint' in opts ? opts.hint : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let maxLength = opts && 'maxLength' in opts ? opts.maxLength : null;
    let textInputAction = opts && 'textInputAction' in opts ? opts.textInputAction : null;
    let enable = opts && 'enable' in opts ? opts.enable : null;
    let suffixType = opts && 'suffixType' in opts ? opts.suffixType : null;
    let requiredValidate = opts && 'requiredValidate' in opts ? opts.requiredValidate : null;
    let readOnly = opts && 'readOnly' in opts ? opts.readOnly : null;
    let dateFormat = opts && 'dateFormat' in opts ? opts.dateFormat : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : null;
    let onChange = opts && 'onChange' in opts ? opts.onChange : null;
    let onDelete = opts && 'onDelete' in opts ? opts.onDelete : null;
    let marginTop = opts && 'marginTop' in opts ? opts.marginTop : null;
    let isSelectOnFirstFocus = opts && 'isSelectOnFirstFocus' in opts ? opts.isSelectOnFirstFocus : null;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let dateTimeRange = opts && 'dateTimeRange' in opts ? opts.dateTimeRange : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    let maxLine = opts && 'maxLine' in opts ? opts.maxLine : null;
    let isVisible = opts && 'isVisible' in opts ? opts.isVisible : null;
    let colorBorder = opts && 'colorBorder' in opts ? opts.colorBorder : null;
    let colorFocusedBorder = opts && 'colorFocusedBorder' in opts ? opts.colorFocusedBorder : null;
    let colorErrorBorder = opts && 'colorErrorBorder' in opts ? opts.colorErrorBorder : null;
    let colorDisableBorder = opts && 'colorDisableBorder' in opts ? opts.colorDisableBorder : null;
    let widthBorder = opts && 'widthBorder' in opts ? opts.widthBorder : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let heightInput = opts && 'heightInput' in opts ? opts.heightInput : null;
    let textStyleInput = opts && 'textStyleInput' in opts ? opts.textStyleInput : null;
    let textStyleHint = opts && 'textStyleHint' in opts ? opts.textStyleHint : null;
    let responsiveScreens = opts && 'responsiveScreens' in opts ? opts.responsiveScreens : null;
    input_date_picker_model.InputDateObject.__proto__.new.call(this);
    this[controller] = new editable_text.TextEditingController.new();
    this[type] = enum_dynamic_form.InputObjectType.DATE;
    this[id$] = id;
    this[label$] = label;
    this[hint$] = hint;
    this[color$] = color;
    this[border$] = (t0 = border, t0 == null ? enum_dynamic_form.BorderType.OUTLINE : t0);
    this[textInputAction$] = (t0$ = textInputAction, t0$ == null ? text_input.TextInputAction.next : t0$);
    this[enable$] = (t0$0 = enable, t0$0 == null ? true : t0$0);
    this[readOnly$] = (t0$1 = readOnly, t0$1 == null ? false : t0$1);
    this[suffixType$] = (t0$2 = suffixType, t0$2 == null ? enum_dynamic_form.SuffixType.DELETE : t0$2);
    this[requiredValidate$] = (t0$3 = requiredValidate, t0$3 == null ? true : t0$3);
    this[dateFormat$] = (t0$4 = dateFormat, t0$4 == null ? new date_format.DateFormat.new("dd-MM-yyy") : t0$4);
    this[alignment$] = alignment;
    this[onChange$] = onChange;
    this[onDelete$] = onDelete;
    this[isSelectOnFirstFocus$] = (t0$5 = isSelectOnFirstFocus, t0$5 == null ? false : t0$5);
    this[padding$] = padding;
    this[maxLine$] = maxLine;
    this[isVisible$] = isVisible;
    this[dateTimeRange$] = (t0$6 = dateTimeRange, t0$6 == null ? new date.DateTimeRange.new({start: new core.DateTime.new(1900), end: new core.DateTime.new(new core.DateTime.now().year + 100)}) : t0$6);
    this[colorBorder$] = colorBorder;
    this[colorFocusedBorder$] = colorFocusedBorder;
    this[colorErrorBorder$] = colorErrorBorder;
    this[colorDisableBorder$] = colorDisableBorder;
    this[widthBorder$] = widthBorder;
    this[backgroundColor$] = backgroundColor;
    this[margin$] = margin;
    this[heightInput$] = heightInput;
    this[textStyleInput$] = textStyleInput;
    this[textStyleHint$] = textStyleHint;
    this[textStyleLabel] = this.textStyleLabel;
    this.initResponsive({responsiveScreens: responsiveScreens});
  }).prototype = input_date_picker_model.InputDateObject.prototype;
  dart.addTypeTests(input_date_picker_model.InputDateObject);
  dart.addTypeCaches(input_date_picker_model.InputDateObject);
  dart.setLibraryUri(input_date_picker_model.InputDateObject, I[0]);
  dart.trackLibraries("packages/cc_library/widget/dynamic_form/model/input_date_picker_model.dart", {
    "package:cc_library/widget/dynamic_form/model/input_date_picker_model.dart": input_date_picker_model
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["input_date_picker_model.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuFI,YAAO;IACT;cAGU;AAER,UAAM,iBAAF,CAAC;AACY,QAAf,mBAAc,CAAC;;AAEG,QAAlB,mBAAc;;AAKC,MAAjB,oBAAe,CAAC;IAClB;mBAGoB;AAElB;AACE,YAAM,iBAAF,CAAC;AACM,qBAAO,CAAC;AACb,qBAAiB,AAAE,eAAZ,wBAAmB,IAAI;AAClC,cAAc,AAAE,eAAZ,0BAAoB,IAAI;AACH,YAAb,AAAE,eAAZ,wBAAmB,IAAI;;;AAGzB,cAAM,AAAW,cAAb,CAAC;AACkB,YAAX,AAAE,eAAZ,wBAAmB;;;;YAGhB;YAAG;AAAV;AACU,UAAL,yCAAD,SAAF,CAAC;;;;AAIM,MAAX;IACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QA7GkB;QACR;QACA;QACD;QACK;QACP;QACY;QACX;QACM;QACN;QACA;QACM;QACD;QACD;QACA;QACF;QACF;QACc;QACL;QACK;QACf;QACG;QACD;QACA;QACA;QACA;QACC;QACD;QACC;QACY;QACA;QACI;AAhC1B;AAkC4C,IAApC,mBAAa;AACc,IAA3B,aAAuB;AAChB,IAAP,YAAK,EAAE;AACM,IAAb,eAAQ,KAAK;AACF,IAAX,cAAO,IAAI;AACE,IAAb,eAAQ,KAAK;AACwB,IAArC,iBAAgB,KAAP,MAAM,EAAN,aAAqB;AAC2B,IAAzD,0BAAkC,MAAhB,eAAe,EAAf,cAAmC;AAC9B,IAAvB,iBAAgB,OAAP,MAAM,EAAN,eAAU;AACS,IAA5B,mBAAoB,OAAT,QAAQ,EAAR,eAAY;AACqB,IAA5C,qBAAwB,OAAX,UAAU,EAAV,eAAyB;AACK,IAA3C,2BAAoC,OAAjB,gBAAgB,EAAhB,eAAoB;AACW,IAAlD,qBAAwB,OAAX,UAAU,EAAV,eAAc,+BAAW;AACjB,IAArB,mBAAY,SAAS;AACF,IAAnB,kBAAW,QAAQ;AACA,IAAnB,kBAAW,QAAQ;AACiC,IAApD,+BAA4C,OAArB,oBAAoB,EAApB,eAAwB;AAC9B,IAAjB,iBAAU,OAAO;AACA,IAAjB,iBAAU,OAAO;AACI,IAArB,mBAAY,SAAS;AAEwE,IAD7F,wBACY,OAAd,aAAa,EAAb,eAAiB,mCAAqB,sBAAS,YAAY,sBAAkB,AAAM,AAAK,+BAAE;AAC/D,IAAzB,qBAAc,WAAW;AACc,IAAvC,4BAAqB,kBAAkB;AACJ,IAAnC,0BAAmB,gBAAgB;AACI,IAAvC,4BAAqB,kBAAkB;AACd,IAAzB,qBAAc,WAAW;AACQ,IAAjC,yBAAkB,eAAe;AAClB,IAAf,gBAAS,MAAM;AACU,IAAzB,qBAAc,WAAW;AACM,IAA/B,wBAAiB,cAAc;AACF,IAA7B,uBAAgB,aAAa;AACE,IAA/B,uBAAiB;AAC6B,IAApD,wCAAkC,iBAAiB;EACrD","file":"../../../../../../../../../../../../../../packages/cc_library/widget/dynamic_form/model/input_date_picker_model.dart.lib.js"}');
  // Exports:
  return {
    widget__dynamic_form__model__input_date_picker_model: input_date_picker_model
  };
}));

//# sourceMappingURL=input_date_picker_model.dart.lib.js.map
