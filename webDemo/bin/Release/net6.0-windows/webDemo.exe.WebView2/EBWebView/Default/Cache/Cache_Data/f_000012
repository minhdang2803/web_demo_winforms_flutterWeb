define(['dart_sdk', 'packages/hive/src/util/extensions.dart', 'packages/hive/src/crypto/crc32.dart', 'packages/hive/src/util/delegating_list_view_mixin.dart', 'packages/hive/src/util/indexable_skip_list.dart', 'packages/hive/src/box/default_key_comparator.dart', 'packages/hive/src/box/default_compaction_strategy.dart', 'packages/hive/src/crypto/aes_cbc_pkcs7.dart', 'packages/crypto/src/sha256.dart'], (function load__packages__hive__src__box_collection__box_collection_stub_dart(dart_sdk, packages__hive__src__util__extensions$46dart, packages__hive__src__crypto__crc32$46dart, packages__hive__src__util__delegating_list_view_mixin$46dart, packages__hive__src__util__indexable_skip_list$46dart, packages__hive__src__box__default_key_comparator$46dart, packages__hive__src__box__default_compaction_strategy$46dart, packages__hive__src__crypto__aes_cbc_pkcs7$46dart, packages__crypto__src__sha256$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const html = dart_sdk.html;
  const indexed_db = dart_sdk.indexed_db;
  const _js_helper = dart_sdk._js_helper;
  const _internal = dart_sdk._internal;
  const typed_data = dart_sdk.typed_data;
  const _native_typed_data = dart_sdk._native_typed_data;
  const convert = dart_sdk.convert;
  const js_util = dart_sdk.js_util;
  const js = dart_sdk.js;
  const collection = dart_sdk.collection;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const extensions = packages__hive__src__util__extensions$46dart.src__util__extensions;
  const crc32 = packages__hive__src__crypto__crc32$46dart.src__crypto__crc32;
  const delegating_list_view_mixin = packages__hive__src__util__delegating_list_view_mixin$46dart.src__util__delegating_list_view_mixin;
  const indexable_skip_list = packages__hive__src__util__indexable_skip_list$46dart.src__util__indexable_skip_list;
  const default_key_comparator = packages__hive__src__box__default_key_comparator$46dart.src__box__default_key_comparator;
  const default_compaction_strategy = packages__hive__src__box__default_compaction_strategy$46dart.src__box__default_compaction_strategy;
  const aes_cbc_pkcs7 = packages__hive__src__crypto__aes_cbc_pkcs7$46dart.src__crypto__aes_cbc_pkcs7;
  const sha256 = packages__crypto__src__sha256$46dart.src__sha256;
  var box_collection_stub = Object.create(dart.library);
  var box_collection_indexed_db = Object.create(dart.library);
  var lazy_box_impl = Object.create(dart.library);
  var box_impl = Object.create(dart.library);
  var frame_helper = Object.create(dart.library);
  var binary_writer_impl = Object.create(dart.library);
  var ignored_type_adapter = Object.create(dart.library);
  var type_registry_impl = Object.create(dart.library);
  var binary_reader_impl = Object.create(dart.library);
  var storage_backend_js = Object.create(dart.library);
  var backend_manager = Object.create(dart.library);
  var backend_manager$ = Object.create(dart.library);
  var box_base_impl = Object.create(dart.library);
  var hive_collection_mixin = Object.create(dart.library);
  var hive_list_impl = Object.create(dart.library);
  var hive_object = Object.create(dart.library);
  var change_notifier = Object.create(dart.library);
  var keystore$ = Object.create(dart.library);
  var frame$ = Object.create(dart.library);
  var storage_backend = Object.create(dart.library);
  var storage_backend_memory = Object.create(dart.library);
  var date_time_adapter = Object.create(dart.library);
  var big_int_adapter = Object.create(dart.library);
  var hive_impl = Object.create(dart.library);
  var hive = Object.create(dart.library);
  var $indexedDB = dartx.indexedDB;
  var $result = dartx.result;
  var $target = dartx.target;
  var $open = dartx.open;
  var $indexWhere = dartx.indexWhere;
  var $_get = dartx._get;
  var $addAll = dartx.addAll;
  var $add = dartx.add;
  var $toList = dartx.toList;
  var $isEmpty = dartx.isEmpty;
  var $transaction = dartx.transaction;
  var $completed = dartx.completed;
  var $clear = dartx.clear;
  var $deleteDatabase = dartx.deleteDatabase;
  var $runtimeType = dartx.runtimeType;
  var $objectStore = dartx.objectStore;
  var $getAllKeys = dartx.getAllKeys;
  var $onSuccess = dartx.onSuccess;
  var $toSet = dartx.toSet;
  var $openCursor = dartx.openCursor;
  var $value = dartx.value;
  var $_set = dartx._set;
  var $containsKey = dartx.containsKey;
  var $getObject = dartx.getObject;
  var $any = dartx.any;
  var $map = dartx.map;
  var $length = dartx.length;
  var $cast = dartx.cast;
  var $put = dartx.put;
  var $delete = dartx.delete;
  var $keys = dartx.keys;
  var $buffer = dartx.buffer;
  var $setRange = dartx.setRange;
  var $rightShift = dartx['>>'];
  var $setInt32 = dartx.setInt32;
  var $toDouble = dartx.toDouble;
  var $setFloat64 = dartx.setFloat64;
  var $codeUnits = dartx.codeUnits;
  var $contains = dartx.contains;
  var $values = dartx.values;
  var $offsetInBytes = dartx.offsetInBytes;
  var $getInt32 = dartx.getInt32;
  var $toInt = dartx.toInt;
  var $getFloat64 = dartx.getFloat64;
  var $sublist = dartx.sublist;
  var $onError = dartx.onError;
  var $getAll = dartx.getAll;
  var $createObjectStore = dartx.createObjectStore;
  var $first = dartx.first;
  var $last = dartx.last;
  var $iterator = dartx.iterator;
  var $remove = dartx.remove;
  var $isNotEmpty = dartx.isNotEmpty;
  var $hashCode = dartx.hashCode;
  var $_equals = dartx._equals;
  var $toLowerCase = dartx.toLowerCase;
  var $setAll = dartx.setAll;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    JSArrayOfCollectionBox: () => (T.JSArrayOfCollectionBox = dart.constFn(_interceptors.JSArray$(box_collection_indexed_db.CollectionBox)))(),
    VersionChangeEventTovoid: () => (T.VersionChangeEventTovoid = dart.constFn(dart.fnType(dart.void, [indexed_db.VersionChangeEvent])))(),
    CollectionBoxTobool: () => (T.CollectionBoxTobool = dart.constFn(dart.fnType(core.bool, [box_collection_indexed_db.CollectionBox])))(),
    FutureOfvoid: () => (T.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    TransactionToFutureOfvoid: () => (T.TransactionToFutureOfvoid = dart.constFn(dart.fnType(T.FutureOfvoid(), [indexed_db.Transaction])))(),
    JSArrayOfTransactionToFutureOfvoid: () => (T.JSArrayOfTransactionToFutureOfvoid = dart.constFn(_interceptors.JSArray$(T.TransactionToFutureOfvoid())))(),
    ListOfTransactionToFutureOfvoid: () => (T.ListOfTransactionToFutureOfvoid = dart.constFn(core.List$(T.TransactionToFutureOfvoid())))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    ListOfObjectN: () => (T.ListOfObjectN = dart.constFn(core.List$(T.ObjectN())))(),
    MapOfString$ObjectN: () => (T.MapOfString$ObjectN = dart.constFn(core.Map$(core.String, T.ObjectN())))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    StringTobool: () => (T.StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))(),
    JSArrayOfFrame: () => (T.JSArrayOfFrame = dart.constFn(_interceptors.JSArray$(frame$.Frame)))(),
    IterableOfint: () => (T.IterableOfint = dart.constFn(core.Iterable$(core.int)))(),
    ListOfint: () => (T.ListOfint = dart.constFn(core.List$(core.int)))(),
    ListOfdouble: () => (T.ListOfdouble = dart.constFn(core.List$(core.double)))(),
    ListOfbool: () => (T.ListOfbool = dart.constFn(core.List$(core.bool)))(),
    HiveListOfHiveObjectMixin: () => (T.HiveListOfHiveObjectMixin = dart.constFn(hive.HiveList$(hive_object.HiveObjectMixin)))(),
    HiveListImplOfHiveObjectMixin: () => (T.HiveListImplOfHiveObjectMixin = dart.constFn(hive_list_impl.HiveListImpl$(hive_object.HiveObjectMixin)))(),
    IdentityMapOfint$ResolvedAdapter: () => (T.IdentityMapOfint$ResolvedAdapter = dart.constFn(_js_helper.IdentityMap$(core.int, type_registry_impl.ResolvedAdapter)))(),
    ListOfnum: () => (T.ListOfnum = dart.constFn(core.List$(core.num)))(),
    CompleterOfList: () => (T.CompleterOfList = dart.constFn(async.Completer$(core.List)))(),
    ListN: () => (T.ListN = dart.constFn(dart.nullable(core.List)))(),
    EventTovoid: () => (T.EventTovoid = dart.constFn(dart.fnType(dart.void, [html.Event])))(),
    CursorWithValueToObjectN: () => (T.CursorWithValueToObjectN = dart.constFn(dart.fnType(T.ObjectN(), [indexed_db.CursorWithValue])))(),
    CompleterOfIterable: () => (T.CompleterOfIterable = dart.constFn(async.Completer$(core.Iterable)))(),
    CursorWithValueTodynamic: () => (T.CursorWithValueTodynamic = dart.constFn(dart.fnType(dart.dynamic, [indexed_db.CursorWithValue])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    LinkedMapOfHiveListOfHiveObjectMixin$int: () => (T.LinkedMapOfHiveListOfHiveObjectMixin$int = dart.constFn(_js_helper.LinkedMap$(T.HiveListOfHiveObjectMixin(), core.int)))(),
    dynamicAndBoxBaseTovoid: () => (T.dynamicAndBoxBaseTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, hive.BoxBase])))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    HiveListOfHiveObjectMixinTovoid: () => (T.HiveListOfHiveObjectMixinTovoid = dart.constFn(dart.fnType(dart.void, [T.HiveListOfHiveObjectMixin()])))(),
    HiveListOfHiveObjectMixinTobool: () => (T.HiveListOfHiveObjectMixinTobool = dart.constFn(dart.fnType(core.bool, [T.HiveListOfHiveObjectMixin()])))(),
    StreamControllerOfBoxEvent: () => (T.StreamControllerOfBoxEvent = dart.constFn(async.StreamController$(hive.BoxEvent)))(),
    BoxEventTobool: () => (T.BoxEventTobool = dart.constFn(dart.fnType(core.bool, [hive.BoxEvent])))(),
    LinkedMapOfdynamic$Frame: () => (T.LinkedMapOfdynamic$Frame = dart.constFn(_js_helper.LinkedMap$(dart.dynamic, frame$.Frame)))(),
    IndexableSkipListOfdynamic$Frame: () => (T.IndexableSkipListOfdynamic$Frame = dart.constFn(indexable_skip_list.IndexableSkipList$(dart.dynamic, frame$.Frame)))(),
    dynamicAnddynamicToint: () => (T.dynamicAnddynamicToint = dart.constFn(dart.fnType(core.int, [dart.dynamic, dart.dynamic])))(),
    IdentityMapOfString$BoxBaseImpl: () => (T.IdentityMapOfString$BoxBaseImpl = dart.constFn(_js_helper.IdentityMap$(core.String, box_base_impl.BoxBaseImpl)))(),
    IdentityMapOfString$Future: () => (T.IdentityMapOfString$Future = dart.constFn(_js_helper.IdentityMap$(core.String, async.Future)))(),
    DateTimeAdapterOfDateTimeWithoutTZ: () => (T.DateTimeAdapterOfDateTimeWithoutTZ = dart.constFn(date_time_adapter.DateTimeAdapter$(date_time_adapter.DateTimeWithoutTZ)))(),
    intAndintTobool: () => (T.intAndintTobool = dart.constFn(dart.fnType(core.bool, [core.int, core.int])))(),
    BoxBaseImplToFutureOfvoid: () => (T.BoxBaseImplToFutureOfvoid = dart.constFn(dart.fnType(T.FutureOfvoid(), [box_base_impl.BoxBaseImpl])))(),
    intTobool: () => (T.intTobool = dart.constFn(dart.fnType(core.bool, [core.int])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: convert.Utf8Encoder.prototype
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: type_registry_impl._NullTypeRegistry.prototype
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: convert.Utf8Decoder.prototype,
        [Utf8Decoder__allowMalformed]: false
      });
    },
    get C3() {
      return C[3] = dart.constList([144, 169], core.int);
    },
    get C4() {
      return C[4] = dart.fn(default_key_comparator.defaultKeyComparator, T.dynamicAnddynamicToint());
    },
    get C5() {
      return C[5] = dart.constList([], frame$.Frame);
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: hive.HiveStorageBackendPreference.prototype,
        [_Enum__name]: "native",
        [_Enum_index]: 0
      });
    },
    get C7() {
      return C[7] = dart.fn(default_compaction_strategy.defaultCompactionStrategy, T.intAndintTobool());
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: hive.HiveStorageBackendPreference.prototype,
        [_Enum__name]: "webWorker",
        [_Enum_index]: 1
      });
    },
    get C8() {
      return C[8] = dart.constList([C[6] || CT.C6, C[9] || CT.C9], hive.HiveStorageBackendPreference);
    }
  }, false);
  var C = Array(10).fill(void 0);
  var I = [
    "package:hive/src/box_collection/box_collection_stub.dart",
    "package:hive/src/box_collection/box_collection_indexed_db.dart",
    "package:hive/src/box/box_base_impl.dart",
    "package:hive/src/box/lazy_box_impl.dart",
    "package:hive/src/box/box_impl.dart",
    "package:hive/src/binary/frame_helper.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/hive-2.2.3/lib/src/binary/binary_writer_impl.dart",
    "package:hive/hive.dart",
    "package:hive/src/binary/binary_writer_impl.dart",
    "package:hive/src/adapters/ignored_type_adapter.dart",
    "package:hive/src/registry/type_registry_impl.dart",
    "package:hive/src/binary/binary_reader_impl.dart",
    "package:hive/src/backend/storage_backend.dart",
    "package:hive/src/backend/js/native/storage_backend_js.dart",
    "package:hive/src/backend/js/native/backend_manager.dart",
    "package:hive/src/backend/js/backend_manager.dart",
    "package:hive/src/object/hive_collection_mixin.dart",
    "package:hive/src/object/hive_list_impl.dart",
    "package:hive/src/object/hive_object.dart",
    "package:hive/src/box/change_notifier.dart",
    "package:hive/src/box/keystore.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/hive-2.2.3/lib/src/binary/frame.dart",
    "package:hive/src/binary/frame.dart",
    "package:hive/src/backend/storage_backend_memory.dart",
    "package:hive/src/adapters/date_time_adapter.dart",
    "package:hive/src/adapters/big_int_adapter.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/hive-2.2.3/lib/src/hive_impl.dart",
    "package:hive/src/hive_impl.dart"
  ];
  box_collection_stub.BoxCollection = class BoxCollection extends core.Object {
    static open(name, boxNames, opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      let key = opts && 'key' in opts ? opts.key : null;
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (box_collection_stub.BoxCollection.new = function() {
    ;
  }).prototype = box_collection_stub.BoxCollection.prototype;
  dart.addTypeTests(box_collection_stub.BoxCollection);
  dart.addTypeCaches(box_collection_stub.BoxCollection);
  dart.setStaticMethodSignature(box_collection_stub.BoxCollection, () => ['open']);
  dart.setLibraryUri(box_collection_stub.BoxCollection, I[0]);
  const _is_CollectionBox_default = Symbol('_is_CollectionBox_default');
  box_collection_stub.CollectionBox$ = dart.generic(V => {
    class CollectionBox extends core.Object {}
    (CollectionBox.new = function() {
      ;
    }).prototype = CollectionBox.prototype;
    dart.addTypeTests(CollectionBox);
    CollectionBox.prototype[_is_CollectionBox_default] = true;
    dart.addTypeCaches(CollectionBox);
    dart.setLibraryUri(CollectionBox, I[0]);
    return CollectionBox;
  });
  box_collection_stub.CollectionBox = box_collection_stub.CollectionBox$();
  dart.addTypeTests(box_collection_stub.CollectionBox, _is_CollectionBox_default);
  var boxNames$ = dart.privateName(box_collection_indexed_db, "BoxCollection.boxNames");
  var _openBoxes = dart.privateName(box_collection_indexed_db, "_openBoxes");
  var _txnCache = dart.privateName(box_collection_indexed_db, "_txnCache");
  var _db$ = dart.privateName(box_collection_indexed_db, "_db");
  var _cache = dart.privateName(box_collection_indexed_db, "_cache");
  var _cachedKeys = dart.privateName(box_collection_indexed_db, "_cachedKeys");
  box_collection_indexed_db.BoxCollection = class BoxCollection extends core.Object {
    get boxNames() {
      return this[boxNames$];
    }
    set boxNames(value) {
      super.boxNames = value;
    }
    static ['_#new#tearOff'](_db, boxNames) {
      return new box_collection_indexed_db.BoxCollection.new(_db, boxNames);
    }
    static open(name, boxNames, opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      let key = opts && 'key' in opts ? opts.key : null;
      return async.async(box_collection_indexed_db.BoxCollection, function* open() {
        let factory = html.window[$indexedDB];
        if (factory == null) {
          dart.throw(core.Exception.new("Unable to open FluffyBox collection - IndexedDB not supported in this browser!"));
        }
        let _db = (yield factory[$open](name, {version: 1, onUpgradeNeeded: dart.fn(event => {
            let _db = event[$target][$result];
            for (let name of boxNames) {
              dart.dsend(_db, 'createObjectStore', [name], {autoIncrement: true});
            }
          }, T.VersionChangeEventTovoid())}));
        return new box_collection_indexed_db.BoxCollection.new(_db, boxNames);
      });
    }
    get name() {
      return dart.nullCheck(this[_db$].name);
    }
    openBox(V, name, opts) {
      let preload = opts && 'preload' in opts ? opts.preload : false;
      let boxCreator = opts && 'boxCreator' in opts ? opts.boxCreator : null;
      return async.async(box_collection_indexed_db.CollectionBox$(V), (function* openBox() {
        let t0, t0$;
        if (!this.boxNames.contains(name)) {
          dart.throw(core.Exception.new("Box with name " + name + " is not in the known box names of this collection."));
        }
        let i = this[_openBoxes][$indexWhere](dart.fn(box => box.name === name, T.CollectionBoxTobool()));
        if (i !== -1) {
          return box_collection_indexed_db.CollectionBox$(V).as(this[_openBoxes][$_get](i));
        }
        let box = (t0$ = dart.nullable(box_collection_indexed_db.CollectionBox$(V)).as((t0 = boxCreator, t0 == null ? null : t0(name, this))), t0$ == null ? new (box_collection_indexed_db.CollectionBox$(V)).new(name, this) : t0$);
        if (preload) {
          box[_cache][$addAll](yield box.getAllValues());
        }
        this[_openBoxes][$add](box);
        return box;
      }).bind(this));
    }
    transaction(action, opts) {
      let boxNames = opts && 'boxNames' in opts ? opts.boxNames : null;
      let readOnly = opts && 'readOnly' in opts ? opts.readOnly : false;
      return async.async(dart.void, (function* transaction() {
        let t0;
        boxNames == null ? boxNames = this.boxNames[$toList]() : null;
        if (this[_txnCache] != null) {
          yield action();
          return;
        }
        this[_txnCache] = T.JSArrayOfTransactionToFutureOfvoid().of([]);
        yield action();
        let cache = T.ListOfTransactionToFutureOfvoid().from((t0 = this[_txnCache], t0 == null ? [] : t0));
        this[_txnCache] = null;
        if (cache[$isEmpty]) return;
        let txn = this[_db$][$transaction](boxNames, readOnly ? "readonly" : "readwrite");
        for (let fun of cache) {
          fun(txn);
        }
        yield txn[$completed];
        return;
      }).bind(this));
    }
    close() {
      return this[_db$].close();
    }
    deleteFromDisk() {
      return async.async(dart.void, (function* deleteFromDisk() {
        let factory = html.window[$indexedDB];
        for (let box of this[_openBoxes]) {
          box[_cache][$clear]();
          box[_cachedKeys] = null;
        }
        this[_openBoxes][$clear]();
        this[_db$].close();
        if (factory == null || this[_db$].name == null) {
          dart.throw(core.Exception.new("Unable to delete fluffybox collection"));
        }
        factory[$deleteDatabase](dart.nullCheck(this[_db$].name));
      }).bind(this));
    }
  };
  (box_collection_indexed_db.BoxCollection.new = function(_db, boxNames) {
    this[_openBoxes] = T.JSArrayOfCollectionBox().of([]);
    this[_txnCache] = null;
    this[_db$] = _db;
    this[boxNames$] = boxNames;
    ;
  }).prototype = box_collection_indexed_db.BoxCollection.prototype;
  dart.addTypeTests(box_collection_indexed_db.BoxCollection);
  dart.addTypeCaches(box_collection_indexed_db.BoxCollection);
  box_collection_indexed_db.BoxCollection[dart.implements] = () => [box_collection_stub.BoxCollection];
  dart.setMethodSignature(box_collection_indexed_db.BoxCollection, () => ({
    __proto__: dart.getMethods(box_collection_indexed_db.BoxCollection.__proto__),
    openBox: dart.gFnType(V => [async.Future$(box_collection_indexed_db.CollectionBox$(V)), [core.String], {boxCreator: dart.nullable(dart.fnType(box_collection_stub.CollectionBox$(V), [core.String, box_collection_indexed_db.BoxCollection])), preload: core.bool}, {}], V => [dart.nullable(core.Object)]),
    transaction: dart.fnType(async.Future$(dart.void), [dart.fnType(async.Future$(dart.void), [])], {boxNames: dart.nullable(core.List$(core.String)), readOnly: core.bool}, {}),
    close: dart.fnType(dart.void, []),
    deleteFromDisk: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setStaticMethodSignature(box_collection_indexed_db.BoxCollection, () => ['open']);
  dart.setGetterSignature(box_collection_indexed_db.BoxCollection, () => ({
    __proto__: dart.getGetters(box_collection_indexed_db.BoxCollection.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(box_collection_indexed_db.BoxCollection, I[1]);
  dart.setFieldSignature(box_collection_indexed_db.BoxCollection, () => ({
    __proto__: dart.getFields(box_collection_indexed_db.BoxCollection.__proto__),
    [_db$]: dart.finalFieldType(indexed_db.Database),
    boxNames: dart.finalFieldType(core.Set$(core.String)),
    [_openBoxes]: dart.finalFieldType(core.List$(box_collection_indexed_db.CollectionBox)),
    [_txnCache]: dart.fieldType(dart.nullable(core.List$(dart.fnType(async.Future$(dart.void), [indexed_db.Transaction]))))
  }));
  var name$ = dart.privateName(box_collection_indexed_db, "CollectionBox.name");
  var boxCollection$ = dart.privateName(box_collection_indexed_db, "CollectionBox.boxCollection");
  const _is_CollectionBox_default$ = Symbol('_is_CollectionBox_default');
  box_collection_indexed_db.CollectionBox$ = dart.generic(V => {
    var __t$VN = () => (__t$VN = dart.constFn(dart.nullable(V)))();
    var __t$IdentityMapOfString$VN = () => (__t$IdentityMapOfString$VN = dart.constFn(_js_helper.IdentityMap$(core.String, __t$VN())))();
    var __t$IdentityMapOfString$V = () => (__t$IdentityMapOfString$V = dart.constFn(_js_helper.IdentityMap$(core.String, V)))();
    var __t$MapOfString$V = () => (__t$MapOfString$V = dart.constFn(core.Map$(core.String, V)))();
    var __t$StringToVN = () => (__t$StringToVN = dart.constFn(dart.fnType(__t$VN(), [core.String])))();
    var __t$ListOfVN = () => (__t$ListOfVN = dart.constFn(core.List$(__t$VN())))();
    class CollectionBox extends core.Object {
      get name() {
        return this[name$];
      }
      set name(value) {
        super.name = value;
      }
      get boxCollection() {
        return this[boxCollection$];
      }
      set boxCollection(value) {
        super.boxCollection = value;
      }
      static ['_#new#tearOff'](V, name, boxCollection) {
        return new (box_collection_indexed_db.CollectionBox$(V)).new(name, boxCollection);
      }
      getAllKeys(txn = null) {
        return async.async(T.ListOfString(), (function* getAllKeys() {
          let cachedKey = this[_cachedKeys];
          if (cachedKey != null) return cachedKey[$toList]();
          txn == null ? txn = this.boxCollection[_db$][$transaction](this.name, "readonly") : null;
          let store = txn[$objectStore](this.name);
          let request = store[$getAllKeys](null);
          yield request[$onSuccess].first;
          let keys = T.ListOfString().from(core.Iterable.as(dart.dgsend(request[$result], [core.String], 'cast', [])));
          this[_cachedKeys] = keys[$toSet]();
          return keys;
        }).bind(this));
      }
      getAllValues(txn = null) {
        return async.async(__t$MapOfString$V(), (function* getAllValues() {
          txn == null ? txn = this.boxCollection[_db$][$transaction](this.name, "readonly") : null;
          let store = txn[$objectStore](this.name);
          let map = new (__t$IdentityMapOfString$V()).new();
          let cursorStream = store[$openCursor]({autoAdvance: true});
          let iter = async.StreamIterator.new(cursorStream);
          try {
            while (yield iter.moveNext()) {
              let cursor = iter.current;
              {
                map[$_set](core.String.as(cursor.key), V.as(cursor[$value]));
              }
            }
          } finally {
            yield iter.cancel();
          }
          return map;
        }).bind(this));
      }
      get(key, txn = null) {
        return async.async(__t$VN(), (function* get() {
          if (this[_cache][$containsKey](key)) return this[_cache][$_get](key);
          txn == null ? txn = this.boxCollection[_db$][$transaction](this.name, "readonly") : null;
          let store = txn[$objectStore](this.name);
          this[_cache][$_set](key, __t$VN().as(yield store[$getObject](key)));
          return this[_cache][$_get](key);
        }).bind(this));
      }
      getAll(keys, txn = null) {
        return async.async(__t$ListOfVN(), (function* getAll() {
          if (!keys[$any](dart.fn(key => !this[_cache][$containsKey](key), T.StringTobool()))) {
            return keys[$map](__t$VN(), dart.fn(key => this[_cache][$_get](key), __t$StringToVN()))[$toList]();
          }
          txn == null ? txn = this.boxCollection[_db$][$transaction](this.name, "readonly") : null;
          let store = txn[$objectStore](this.name);
          let list = (yield async.Future.wait(dart.dynamic, keys[$map](async.Future, dart.bind(store, $getObject))));
          for (let i = 0; i < keys[$length]; i = i + 1) {
            this[_cache][$_set](keys[$_get](i), __t$VN().as(list[$_get](i)));
          }
          return list[$cast](__t$VN());
        }).bind(this));
      }
      put(key, val, transaction = null) {
        V.as(val);
        return async.async(dart.void, (function* put() {
          let t0, t0$;
          let txn = null;
          if (indexed_db.Transaction.is(transaction)) {
            txn = transaction;
          }
          if (val == null) {
            return this.delete(key, txn);
          }
          let txnCache = this.boxCollection[_txnCache];
          if (txnCache != null) {
            txnCache[$add](dart.fn(txn => this.put(key, val, txn), T.TransactionToFutureOfvoid()));
            this[_cache][$_set](key, val);
            t0 = this[_cachedKeys];
            t0 == null ? null : t0.add(key);
            return;
          }
          txn == null ? txn = this.boxCollection[_db$][$transaction](this.name, "readwrite") : null;
          let store = txn[$objectStore](this.name);
          yield store[$put](val, key);
          this[_cache][$_set](key, val);
          t0$ = this[_cachedKeys];
          t0$ == null ? null : t0$.add(key);
          return;
        }).bind(this));
      }
      delete(key, txn = null) {
        return async.async(dart.void, (function* $delete$() {
          let t0, t0$;
          let txnCache = this.boxCollection[_txnCache];
          if (txnCache != null) {
            txnCache[$add](dart.fn(txn => this.delete(key, txn), T.TransactionToFutureOfvoid()));
            this[_cache][$_set](key, null);
            t0 = this[_cachedKeys];
            t0 == null ? null : t0.remove(key);
            return;
          }
          txn == null ? txn = this.boxCollection[_db$][$transaction](this.name, "readwrite") : null;
          let store = txn[$objectStore](this.name);
          yield store[$delete](key);
          this[_cache][$_set](key, null);
          t0$ = this[_cachedKeys];
          t0$ == null ? null : t0$.remove(key);
          return;
        }).bind(this));
      }
      deleteAll(keys, txn = null) {
        return async.async(dart.void, (function* deleteAll() {
          let t0, t0$;
          let txnCache = this.boxCollection[_txnCache];
          if (txnCache != null) {
            txnCache[$add](dart.fn(txn => this.deleteAll(keys, txn), T.TransactionToFutureOfvoid()));
            for (let key of keys) {
              this[_cache][$_set](key, null);
            }
            t0 = this[_cachedKeys];
            t0 == null ? null : t0.removeAll(keys);
            return;
          }
          txn == null ? txn = this.boxCollection[_db$][$transaction](this.name, "readwrite") : null;
          let store = txn[$objectStore](this.name);
          for (let key of keys) {
            yield store[$delete](key);
            this[_cache][$_set](key, null);
            t0$ = this[_cachedKeys];
            t0$ == null ? null : t0$.removeAll(keys);
          }
          return;
        }).bind(this));
      }
      clear(txn = null) {
        return async.async(dart.void, (function* clear() {
          let txnCache = this.boxCollection[_txnCache];
          if (txnCache != null) {
            txnCache[$add](dart.bind(this, 'clear'));
            this[_cache][$clear]();
            this[_cachedKeys] = null;
            return;
          }
          txn == null ? txn = this.boxCollection[_db$][$transaction](this.name, "readwrite") : null;
          let store = txn[$objectStore](this.name);
          yield store[$clear]();
          this[_cache][$clear]();
          this[_cachedKeys] = null;
          return;
        }).bind(this));
      }
      flush() {
        return T.FutureOfvoid().value();
      }
    }
    (CollectionBox.new = function(name, boxCollection) {
      this[_cache] = new (__t$IdentityMapOfString$VN()).new();
      this[_cachedKeys] = null;
      this[name$] = name;
      this[boxCollection$] = boxCollection;
      if (!(typeof dart.wrapType(V) == 'string' || core.int.is(dart.wrapType(V)) || core.Object.is(dart.wrapType(V)) || T.ListOfObjectN().is(dart.wrapType(V)) || T.MapOfString$ObjectN().is(dart.wrapType(V)) || typeof dart.wrapType(V) == 'number')) {
        dart.throw(core.Exception.new("Value type " + dart.str(dart.wrapType(V)[$runtimeType]) + " is not one of the allowed value types {String, int, double, List<Object?>, Map<String, Object?>}."));
      }
    }).prototype = CollectionBox.prototype;
    dart.addTypeTests(CollectionBox);
    CollectionBox.prototype[_is_CollectionBox_default$] = true;
    dart.addTypeCaches(CollectionBox);
    CollectionBox[dart.implements] = () => [box_collection_stub.CollectionBox$(V)];
    dart.setMethodSignature(CollectionBox, () => ({
      __proto__: dart.getMethods(CollectionBox.__proto__),
      getAllKeys: dart.fnType(async.Future$(core.List$(core.String)), [], [dart.nullable(indexed_db.Transaction)]),
      getAllValues: dart.fnType(async.Future$(core.Map$(core.String, V)), [], [dart.nullable(indexed_db.Transaction)]),
      get: dart.fnType(async.Future$(dart.nullable(V)), [core.String], [dart.nullable(indexed_db.Transaction)]),
      getAll: dart.fnType(async.Future$(core.List$(dart.nullable(V))), [core.List$(core.String)], [dart.nullable(indexed_db.Transaction)]),
      put: dart.fnType(async.Future$(dart.void), [core.String, dart.nullable(core.Object)], [dart.nullable(core.Object)]),
      delete: dart.fnType(async.Future$(dart.void), [core.String], [dart.nullable(indexed_db.Transaction)]),
      deleteAll: dart.fnType(async.Future$(dart.void), [core.List$(core.String)], [dart.nullable(indexed_db.Transaction)]),
      clear: dart.fnType(async.Future$(dart.void), [], [dart.nullable(indexed_db.Transaction)]),
      flush: dart.fnType(async.Future$(dart.void), [])
    }));
    dart.setLibraryUri(CollectionBox, I[1]);
    dart.setFieldSignature(CollectionBox, () => ({
      __proto__: dart.getFields(CollectionBox.__proto__),
      name: dart.finalFieldType(core.String),
      boxCollection: dart.finalFieldType(box_collection_indexed_db.BoxCollection),
      [_cache]: dart.finalFieldType(core.Map$(core.String, dart.nullable(V))),
      [_cachedKeys]: dart.fieldType(dart.nullable(core.Set$(core.String)))
    }));
    return CollectionBox;
  });
  box_collection_indexed_db.CollectionBox = box_collection_indexed_db.CollectionBox$();
  dart.addTypeTests(box_collection_indexed_db.CollectionBox, _is_CollectionBox_default$);
  var lazy = dart.privateName(lazy_box_impl, "LazyBoxImpl.lazy");
  var name$0 = dart.privateName(box_base_impl, "BoxBaseImpl.name");
  var hive$ = dart.privateName(box_base_impl, "BoxBaseImpl.hive");
  var backend$ = dart.privateName(box_base_impl, "BoxBaseImpl.backend");
  var __BoxBaseImpl_keystore = dart.privateName(box_base_impl, "_#BoxBaseImpl#keystore");
  var _open = dart.privateName(box_base_impl, "_open");
  var _compactionStrategy$ = dart.privateName(box_base_impl, "_compactionStrategy");
  const _is_BoxBaseImpl_default = Symbol('_is_BoxBaseImpl_default');
  box_base_impl.BoxBaseImpl$ = dart.generic(E => {
    var __t$KeystoreOfE = () => (__t$KeystoreOfE = dart.constFn(keystore$.Keystore$(E)))();
    var __t$LinkedMapOfdynamic$E = () => (__t$LinkedMapOfdynamic$E = dart.constFn(_js_helper.LinkedMap$(dart.dynamic, E)))();
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    var __t$IdentityMapOfint$E = () => (__t$IdentityMapOfint$E = dart.constFn(_js_helper.IdentityMap$(core.int, E)))();
    class BoxBaseImpl extends core.Object {
      get name() {
        return this[name$0];
      }
      set name(value) {
        super.name = value;
      }
      get hive() {
        return this[hive$];
      }
      set hive(value) {
        super.hive = value;
      }
      get backend() {
        return this[backend$];
      }
      set backend(value) {
        super.backend = value;
      }
      static nullImpl(E) {
        return new (box_base_impl._NullBoxBase$(E)).new();
      }
      get keystore() {
        let t0;
        t0 = this[__BoxBaseImpl_keystore];
        return t0 == null ? dart.throw(new _internal.LateError.fieldNI("keystore")) : t0;
      }
      set keystore(keystore$35param) {
        __t$KeystoreOfE().as(keystore$35param);
        this[__BoxBaseImpl_keystore] = keystore$35param;
      }
      get valueType() {
        return dart.wrapType(E);
      }
      get isOpen() {
        return this[_open];
      }
      get path() {
        return this.backend.path;
      }
      get keys() {
        this.checkOpen();
        return this.keystore.getKeys();
      }
      get length() {
        this.checkOpen();
        return this.keystore.length;
      }
      get isEmpty() {
        return this.length === 0;
      }
      get isNotEmpty() {
        return this.length > 0;
      }
      checkOpen() {
        if (!this[_open]) {
          dart.throw(new hive.HiveError.new("Box has already been closed."));
        }
      }
      watch(opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        this.checkOpen();
        return this.keystore.watch({key: key});
      }
      keyAt(index) {
        this.checkOpen();
        return dart.nullCheck(this.keystore.getAt(index)).key;
      }
      initialize() {
        return this.backend.initialize(this.hive, this.keystore, this.lazy);
      }
      containsKey(key) {
        this.checkOpen();
        return this.keystore.containsKey(key);
      }
      put(key, value) {
        E.as(value);
        return this.putAll(new (__t$LinkedMapOfdynamic$E()).from([key, value]));
      }
      delete(key) {
        return this.deleteAll([key]);
      }
      add(value) {
        E.as(value);
        return async.async(core.int, (function* add() {
          let key = this.keystore.autoIncrement();
          yield this.put(key, value);
          return key;
        }).bind(this));
      }
      addAll(values) {
        __t$IterableOfE().as(values);
        return async.async(T.IterableOfint(), (function* addAll() {
          let entries = new (__t$IdentityMapOfint$E()).new();
          for (let value of values) {
            entries[$_set](this.keystore.autoIncrement(), value);
          }
          yield this.putAll(entries);
          return entries[$keys];
        }).bind(this));
      }
      putAt(index, value) {
        E.as(value);
        return this.putAll(new (__t$LinkedMapOfdynamic$E()).from([dart.nullCheck(this.keystore.getAt(index)).key, value]));
      }
      deleteAt(index) {
        return this.delete(dart.nullCheck(this.keystore.getAt(index)).key);
      }
      clear() {
        return async.async(core.int, (function* clear() {
          this.checkOpen();
          yield this.backend.clear();
          return this.keystore.clear();
        }).bind(this));
      }
      compact() {
        return async.async(dart.void, (function* compact() {
          this.checkOpen();
          if (!this.backend.supportsCompaction) return;
          if (this.keystore.deletedEntries === 0) return;
          yield this.backend.compact(this.keystore.frames);
          this.keystore.resetDeletedEntries();
        }).bind(this));
      }
      performCompactionIfNeeded() {
        let t1, t0;
        if (t0 = this.keystore.length, t1 = this.keystore.deletedEntries, this[_compactionStrategy$](t0, t1)) {
          return this.compact();
        }
        return T.FutureOfvoid().value();
      }
      close() {
        return async.async(dart.void, (function* close() {
          if (!this[_open]) return;
          this[_open] = false;
          yield this.keystore.close();
          this.hive.unregisterBox(this.name);
          yield this.backend.close();
        }).bind(this));
      }
      deleteFromDisk() {
        return async.async(dart.void, (function* deleteFromDisk() {
          if (this[_open]) {
            this[_open] = false;
            yield this.keystore.close();
            this.hive.unregisterBox(this.name);
          }
          yield this.backend.deleteFromDisk();
        }).bind(this));
      }
    }
    (BoxBaseImpl.new = function(hive, name, keyComparator, _compactionStrategy, backend) {
      this[__BoxBaseImpl_keystore] = null;
      this[_open] = true;
      this[hive$] = hive;
      this[name$0] = name;
      this[_compactionStrategy$] = _compactionStrategy;
      this[backend$] = backend;
      this.keystore = new (__t$KeystoreOfE()).new(this, new change_notifier.ChangeNotifier.new(), keyComparator);
    }).prototype = BoxBaseImpl.prototype;
    dart.addTypeTests(BoxBaseImpl);
    BoxBaseImpl.prototype[_is_BoxBaseImpl_default] = true;
    dart.addTypeCaches(BoxBaseImpl);
    BoxBaseImpl[dart.implements] = () => [hive.BoxBase$(E)];
    dart.setMethodSignature(BoxBaseImpl, () => ({
      __proto__: dart.getMethods(BoxBaseImpl.__proto__),
      checkOpen: dart.fnType(dart.void, []),
      watch: dart.fnType(async.Stream$(hive.BoxEvent), [], {key: dart.dynamic}, {}),
      keyAt: dart.fnType(dart.dynamic, [core.int]),
      initialize: dart.fnType(async.Future$(dart.void), []),
      containsKey: dart.fnType(core.bool, [dart.dynamic]),
      put: dart.fnType(async.Future$(dart.void), [dart.dynamic, dart.nullable(core.Object)]),
      delete: dart.fnType(async.Future$(dart.void), [dart.dynamic]),
      add: dart.fnType(async.Future$(core.int), [dart.nullable(core.Object)]),
      addAll: dart.fnType(async.Future$(core.Iterable$(core.int)), [dart.nullable(core.Object)]),
      putAt: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.Object)]),
      deleteAt: dart.fnType(async.Future$(dart.void), [core.int]),
      clear: dart.fnType(async.Future$(core.int), []),
      compact: dart.fnType(async.Future$(dart.void), []),
      performCompactionIfNeeded: dart.fnType(async.Future$(dart.void), []),
      close: dart.fnType(async.Future$(dart.void), []),
      deleteFromDisk: dart.fnType(async.Future$(dart.void), [])
    }));
    dart.setStaticMethodSignature(BoxBaseImpl, () => ['nullImpl']);
    dart.setGetterSignature(BoxBaseImpl, () => ({
      __proto__: dart.getGetters(BoxBaseImpl.__proto__),
      keystore: keystore$.Keystore$(E),
      valueType: core.Type,
      isOpen: core.bool,
      path: dart.nullable(core.String),
      keys: core.Iterable,
      length: core.int,
      isEmpty: core.bool,
      isNotEmpty: core.bool
    }));
    dart.setSetterSignature(BoxBaseImpl, () => ({
      __proto__: dart.getSetters(BoxBaseImpl.__proto__),
      keystore: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(BoxBaseImpl, I[2]);
    dart.setFieldSignature(BoxBaseImpl, () => ({
      __proto__: dart.getFields(BoxBaseImpl.__proto__),
      name: dart.finalFieldType(core.String),
      hive: dart.finalFieldType(hive_impl.HiveImpl),
      [_compactionStrategy$]: dart.finalFieldType(dart.fnType(core.bool, [core.int, core.int])),
      backend: dart.finalFieldType(storage_backend.StorageBackend),
      [__BoxBaseImpl_keystore]: dart.fieldType(dart.nullable(keystore$.Keystore$(E))),
      [_open]: dart.fieldType(core.bool)
    }));
    return BoxBaseImpl;
  });
  box_base_impl.BoxBaseImpl = box_base_impl.BoxBaseImpl$();
  dart.addTypeTests(box_base_impl.BoxBaseImpl, _is_BoxBaseImpl_default);
  const _is_LazyBoxImpl_default = Symbol('_is_LazyBoxImpl_default');
  lazy_box_impl.LazyBoxImpl$ = dart.generic(E => {
    var __t$EN = () => (__t$EN = dart.constFn(dart.nullable(E)))();
    class LazyBoxImpl extends box_base_impl.BoxBaseImpl$(E) {
      get lazy() {
        return this[lazy];
      }
      set lazy(value) {
        super.lazy = value;
      }
      static ['_#new#tearOff'](E, hive, name, keyComparator, compactionStrategy, backend) {
        return new (lazy_box_impl.LazyBoxImpl$(E)).new(hive, name, keyComparator, compactionStrategy, backend);
      }
      get(key, opts) {
        let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
        __t$EN().as(defaultValue);
        return async.async(__t$EN(), (function* get() {
          this.checkOpen();
          let frame = this.keystore.get(key);
          if (frame != null) {
            let value = (yield this.backend.readValue(frame));
            if (hive_object.HiveObjectMixin.is(value)) {
              hive_object['HiveObjectInternal|init'](value, key, this);
            }
            return __t$EN().as(value);
          } else {
            if (defaultValue != null && hive_object.HiveObjectMixin.is(defaultValue)) {
              hive_object['HiveObjectInternal|init'](defaultValue, key, this);
            }
            return defaultValue;
          }
        }).bind(this));
      }
      getAt(index) {
        return this.get(this.keystore.keyAt(index));
      }
      putAll(kvPairs) {
        core.Map.as(kvPairs);
        return async.async(dart.void, (function* putAll() {
          this.checkOpen();
          let frames = T.JSArrayOfFrame().of([]);
          for (let key of kvPairs[$keys]) {
            frames[$add](new frame$.Frame.new(key, kvPairs[$_get](key)));
            if (core.int.is(key)) {
              this.keystore.updateAutoIncrement(key);
            }
          }
          if (frames[$isEmpty]) return;
          yield this.backend.writeFrames(frames);
          for (let frame of frames) {
            if (hive_object.HiveObjectMixin.is(frame.value)) {
              hive_object['HiveObjectInternal|init'](hive_object.HiveObjectMixin.as(frame.value), frame.key, this);
            }
            this.keystore.insert(frame, {lazy: true});
          }
          yield this.performCompactionIfNeeded();
        }).bind(this));
      }
      deleteAll(keys) {
        return async.async(dart.void, (function* deleteAll() {
          this.checkOpen();
          let frames = T.JSArrayOfFrame().of([]);
          for (let key of keys) {
            if (this.keystore.containsKey(key)) {
              frames[$add](new frame$.Frame.deleted(key));
            }
          }
          if (frames[$isEmpty]) return;
          yield this.backend.writeFrames(frames);
          for (let frame of frames) {
            this.keystore.insert(frame);
          }
          yield this.performCompactionIfNeeded();
        }).bind(this));
      }
      flush() {
        return async.async(dart.void, (function* flush() {
          yield this.backend.flush();
        }).bind(this));
      }
    }
    (LazyBoxImpl.new = function(hive, name, keyComparator, compactionStrategy, backend) {
      this[lazy] = true;
      LazyBoxImpl.__proto__.new.call(this, hive, name, keyComparator, compactionStrategy, backend);
      ;
    }).prototype = LazyBoxImpl.prototype;
    dart.addTypeTests(LazyBoxImpl);
    LazyBoxImpl.prototype[_is_LazyBoxImpl_default] = true;
    dart.addTypeCaches(LazyBoxImpl);
    LazyBoxImpl[dart.implements] = () => [hive.LazyBox$(E)];
    dart.setMethodSignature(LazyBoxImpl, () => ({
      __proto__: dart.getMethods(LazyBoxImpl.__proto__),
      get: dart.fnType(async.Future$(dart.nullable(E)), [dart.dynamic], {defaultValue: dart.nullable(core.Object)}, {}),
      getAt: dart.fnType(async.Future$(dart.nullable(E)), [core.int]),
      putAll: dart.fnType(async.Future$(dart.void), [dart.nullable(core.Object)]),
      deleteAll: dart.fnType(async.Future$(dart.void), [core.Iterable]),
      flush: dart.fnType(async.Future$(dart.void), [])
    }));
    dart.setLibraryUri(LazyBoxImpl, I[3]);
    dart.setFieldSignature(LazyBoxImpl, () => ({
      __proto__: dart.getFields(LazyBoxImpl.__proto__),
      lazy: dart.finalFieldType(core.bool)
    }));
    return LazyBoxImpl;
  });
  lazy_box_impl.LazyBoxImpl = lazy_box_impl.LazyBoxImpl$();
  dart.addTypeTests(lazy_box_impl.LazyBoxImpl, _is_LazyBoxImpl_default);
  var lazy$ = dart.privateName(box_impl, "BoxImpl.lazy");
  var _writeFrames = dart.privateName(box_impl, "_writeFrames");
  const _is_BoxImpl_default = Symbol('_is_BoxImpl_default');
  box_impl.BoxImpl$ = dart.generic(E => {
    var __t$EN = () => (__t$EN = dart.constFn(dart.nullable(E)))();
    var __t$MapOfdynamic$E = () => (__t$MapOfdynamic$E = dart.constFn(core.Map$(dart.dynamic, E)))();
    var __t$LinkedMapOfdynamic$E = () => (__t$LinkedMapOfdynamic$E = dart.constFn(_js_helper.LinkedMap$(dart.dynamic, E)))();
    class BoxImpl extends box_base_impl.BoxBaseImpl$(E) {
      get lazy() {
        return this[lazy$];
      }
      set lazy(value) {
        super.lazy = value;
      }
      static ['_#new#tearOff'](E, hive, name, keyComparator, compactionStrategy, backend) {
        return new (box_impl.BoxImpl$(E)).new(hive, name, keyComparator, compactionStrategy, backend);
      }
      get values() {
        this.checkOpen();
        return this.keystore.getValues();
      }
      valuesBetween(opts) {
        let startKey = opts && 'startKey' in opts ? opts.startKey : null;
        let endKey = opts && 'endKey' in opts ? opts.endKey : null;
        this.checkOpen();
        return this.keystore.getValuesBetween(startKey, endKey);
      }
      get(key, opts) {
        let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
        __t$EN().as(defaultValue);
        this.checkOpen();
        let frame = this.keystore.get(key);
        if (frame != null) {
          return __t$EN().as(frame.value);
        } else {
          if (defaultValue != null && hive_object.HiveObjectMixin.is(defaultValue)) {
            hive_object['HiveObjectInternal|init'](defaultValue, key, this);
          }
          return defaultValue;
        }
      }
      getAt(index) {
        let t0;
        this.checkOpen();
        return __t$EN().as((t0 = this.keystore.getAt(index), t0 == null ? null : t0.value));
      }
      putAll(kvPairs) {
        __t$MapOfdynamic$E().as(kvPairs);
        let frames = T.JSArrayOfFrame().of([]);
        for (let key of kvPairs[$keys]) {
          frames[$add](new frame$.Frame.new(key, kvPairs[$_get](key)));
        }
        return this[_writeFrames](frames);
      }
      deleteAll(keys) {
        let frames = T.JSArrayOfFrame().of([]);
        for (let key of keys) {
          if (this.keystore.containsKey(key)) {
            frames[$add](new frame$.Frame.deleted(key));
          }
        }
        return this[_writeFrames](frames);
      }
      [_writeFrames](frames) {
        return async.async(dart.void, (function* _writeFrames() {
          this.checkOpen();
          if (!this.keystore.beginTransaction(frames)) return;
          try {
            yield this.backend.writeFrames(frames);
            this.keystore.commitTransaction();
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
              this.keystore.cancelTransaction();
              dart.rethrow(e$);
            } else
              throw e$;
          }
          yield this.performCompactionIfNeeded();
        }).bind(this));
      }
      toMap() {
        let map = new (__t$LinkedMapOfdynamic$E()).new();
        for (let frame of this.keystore.frames) {
          map[$_set](frame.key, E.as(frame.value));
        }
        return map;
      }
      flush() {
        return async.async(dart.void, (function* flush() {
          yield this.backend.flush();
        }).bind(this));
      }
    }
    (BoxImpl.new = function(hive, name, keyComparator, compactionStrategy, backend) {
      this[lazy$] = false;
      BoxImpl.__proto__.new.call(this, hive, name, keyComparator, compactionStrategy, backend);
      ;
    }).prototype = BoxImpl.prototype;
    dart.addTypeTests(BoxImpl);
    BoxImpl.prototype[_is_BoxImpl_default] = true;
    dart.addTypeCaches(BoxImpl);
    BoxImpl[dart.implements] = () => [hive.Box$(E)];
    dart.setMethodSignature(BoxImpl, () => ({
      __proto__: dart.getMethods(BoxImpl.__proto__),
      valuesBetween: dart.fnType(core.Iterable$(E), [], {endKey: dart.dynamic, startKey: dart.dynamic}, {}),
      get: dart.fnType(dart.nullable(E), [dart.dynamic], {defaultValue: dart.nullable(core.Object)}, {}),
      getAt: dart.fnType(dart.nullable(E), [core.int]),
      putAll: dart.fnType(async.Future$(dart.void), [dart.nullable(core.Object)]),
      deleteAll: dart.fnType(async.Future$(dart.void), [core.Iterable]),
      [_writeFrames]: dart.fnType(async.Future$(dart.void), [core.List$(frame$.Frame)]),
      toMap: dart.fnType(core.Map$(dart.dynamic, E), []),
      flush: dart.fnType(async.Future$(dart.void), [])
    }));
    dart.setGetterSignature(BoxImpl, () => ({
      __proto__: dart.getGetters(BoxImpl.__proto__),
      values: core.Iterable$(E)
    }));
    dart.setLibraryUri(BoxImpl, I[4]);
    dart.setFieldSignature(BoxImpl, () => ({
      __proto__: dart.getFields(BoxImpl.__proto__),
      lazy: dart.finalFieldType(core.bool)
    }));
    return BoxImpl;
  });
  box_impl.BoxImpl = box_impl.BoxImpl$();
  dart.addTypeTests(box_impl.BoxImpl, _is_BoxImpl_default);
  frame_helper.FrameHelper = class FrameHelper extends core.Object {
    framesFromBytes(bytes, keystore, registry, cipher) {
      let reader = new binary_reader_impl.BinaryReaderImpl.new(bytes, registry);
      while (reader.availableBytes !== 0) {
        let frameOffset = reader.usedBytes;
        let frame = reader.readFrame({cipher: cipher, lazy: false, frameOffset: frameOffset});
        if (frame == null) return frameOffset;
        dart.nullCheck(keystore).insert(frame, {notify: false});
      }
      return -1;
    }
    static ['_#new#tearOff']() {
      return new frame_helper.FrameHelper.new();
    }
  };
  (frame_helper.FrameHelper.new = function() {
    ;
  }).prototype = frame_helper.FrameHelper.prototype;
  dart.addTypeTests(frame_helper.FrameHelper);
  dart.addTypeCaches(frame_helper.FrameHelper);
  dart.setMethodSignature(frame_helper.FrameHelper, () => ({
    __proto__: dart.getMethods(frame_helper.FrameHelper.__proto__),
    framesFromBytes: dart.fnType(core.int, [typed_data.Uint8List, dart.nullable(keystore$.Keystore), hive.TypeRegistry, dart.nullable(hive.HiveCipher)])
  }));
  dart.setLibraryUri(frame_helper.FrameHelper, I[5]);
  var _buffer$ = dart.privateName(binary_writer_impl, "_buffer");
  var _byteDataInstance = dart.privateName(binary_writer_impl, "_byteDataInstance");
  var _offset = dart.privateName(binary_writer_impl, "_offset");
  var _typeRegistry$ = dart.privateName(binary_writer_impl, "_typeRegistry");
  var _byteData = dart.privateName(binary_writer_impl, "_byteData");
  var _increaseBufferSize = dart.privateName(binary_writer_impl, "_increaseBufferSize");
  var _reserveBytes = dart.privateName(binary_writer_impl, "_reserveBytes");
  var _addBytes = dart.privateName(binary_writer_impl, "_addBytes");
  var _writeList = dart.privateName(binary_writer_impl, "_writeList");
  hive.BinaryWriter = class BinaryWriter extends core.Object {};
  (hive.BinaryWriter.new = function() {
    ;
  }).prototype = hive.BinaryWriter.prototype;
  dart.addTypeTests(hive.BinaryWriter);
  dart.addTypeCaches(hive.BinaryWriter);
  dart.setLibraryUri(hive.BinaryWriter, I[7]);
  dart.setStaticFieldSignature(hive.BinaryWriter, () => ['utf8Encoder']);
  dart.defineLazy(hive.BinaryWriter, {
    /*hive.BinaryWriter.utf8Encoder*/get utf8Encoder() {
      return C[0] || CT.C0;
    }
  }, false);
  binary_writer_impl.BinaryWriterImpl = class BinaryWriterImpl extends hive.BinaryWriter {
    get [_byteData]() {
      this[_byteDataInstance] == null ? this[_byteDataInstance] = typed_data.ByteData.view(this[_buffer$][$buffer]) : null;
      return dart.nullCheck(this[_byteDataInstance]);
    }
    static ['_#new#tearOff'](typeRegistry) {
      return new binary_writer_impl.BinaryWriterImpl.new(typeRegistry);
    }
    static ['_#withBuffer#tearOff'](_buffer, _typeRegistry) {
      return new binary_writer_impl.BinaryWriterImpl.withBuffer(_buffer, _typeRegistry);
    }
    [_reserveBytes](count) {
      if (this[_buffer$][$length] - this[_offset] < count) {
        this[_increaseBufferSize](count);
      }
    }
    [_increaseBufferSize](count) {
      let newSize = binary_writer_impl.BinaryWriterImpl._pow2roundup((this[_offset] + count) * 2);
      let newBuffer = _native_typed_data.NativeUint8List.new(newSize);
      newBuffer[$setRange](0, this[_offset], this[_buffer$]);
      this[_buffer$] = newBuffer;
      this[_byteDataInstance] = null;
    }
    [_addBytes](bytes) {
      core.ArgumentError.checkNotNull(T.ListOfint(), bytes);
      let length = bytes[$length];
      this[_reserveBytes](length);
      this[_buffer$][$setRange](this[_offset], this[_offset] + length, bytes);
      this[_offset] = this[_offset] + length;
    }
    writeByte(byte) {
      let t1;
      core.ArgumentError.checkNotNull(core.int, byte);
      this[_reserveBytes](1);
      this[_buffer$][$_set]((t1 = this[_offset], this[_offset] = t1 + 1, t1), byte);
    }
    writeWord(value) {
      let t1, t1$;
      core.ArgumentError.checkNotNull(core.int, value);
      this[_reserveBytes](2);
      this[_buffer$][$_set]((t1 = this[_offset], this[_offset] = t1 + 1, t1), value);
      this[_buffer$][$_set]((t1$ = this[_offset], this[_offset] = t1$ + 1, t1$), value[$rightShift](8));
    }
    writeInt32(value) {
      core.ArgumentError.checkNotNull(core.int, value);
      this[_reserveBytes](4);
      this[_byteData][$setInt32](this[_offset], value, typed_data.Endian.little);
      this[_offset] = this[_offset] + 4;
    }
    writeUint32(value) {
      core.ArgumentError.checkNotNull(core.int, value);
      this[_reserveBytes](4);
      extensions['ListIntX|writeUint32'](this[_buffer$], this[_offset], value);
      this[_offset] = this[_offset] + 4;
    }
    writeInt(value) {
      this.writeDouble(value[$toDouble]());
    }
    writeDouble(value) {
      core.ArgumentError.checkNotNull(core.double, value);
      this[_reserveBytes](8);
      this[_byteData][$setFloat64](this[_offset], value, typed_data.Endian.little);
      this[_offset] = this[_offset] + 8;
    }
    writeBool(value) {
      core.ArgumentError.checkNotNull(core.bool, value);
      this.writeByte(value ? 1 : 0);
    }
    writeString(value, opts) {
      let writeByteCount = opts && 'writeByteCount' in opts ? opts.writeByteCount : true;
      let encoder = opts && 'encoder' in opts ? opts.encoder : C[0] || CT.C0;
      core.ArgumentError.checkNotNull(core.String, value);
      let bytes = encoder.convert(value);
      if (writeByteCount) {
        this.writeUint32(bytes[$length]);
      }
      this[_addBytes](bytes);
    }
    writeByteList(bytes, opts) {
      let writeLength = opts && 'writeLength' in opts ? opts.writeLength : true;
      core.ArgumentError.checkNotNull(T.ListOfint(), bytes);
      if (writeLength) {
        this.writeUint32(bytes[$length]);
      }
      this[_addBytes](bytes);
    }
    writeIntList(list, opts) {
      let writeLength = opts && 'writeLength' in opts ? opts.writeLength : true;
      core.ArgumentError.checkNotNull(T.ListOfint(), list);
      let length = list[$length];
      if (writeLength) {
        this.writeUint32(length);
      }
      this[_reserveBytes](length * 8);
      let byteData = this[_byteData];
      for (let i = 0; i < length; i = i + 1) {
        byteData[$setFloat64](this[_offset], list[$_get](i)[$toDouble](), typed_data.Endian.little);
        this[_offset] = this[_offset] + 8;
      }
    }
    writeDoubleList(list, opts) {
      let writeLength = opts && 'writeLength' in opts ? opts.writeLength : true;
      core.ArgumentError.checkNotNull(T.ListOfdouble(), list);
      let length = list[$length];
      if (writeLength) {
        this.writeUint32(length);
      }
      this[_reserveBytes](length * 8);
      let byteData = this[_byteData];
      for (let i = 0; i < length; i = i + 1) {
        byteData[$setFloat64](this[_offset], list[$_get](i), typed_data.Endian.little);
        this[_offset] = this[_offset] + 8;
      }
    }
    writeBoolList(list, opts) {
      let t1;
      let writeLength = opts && 'writeLength' in opts ? opts.writeLength : true;
      core.ArgumentError.checkNotNull(T.ListOfbool(), list);
      let length = list[$length];
      if (writeLength) {
        this.writeUint32(length);
      }
      this[_reserveBytes](length);
      for (let i = 0; i < length; i = i + 1) {
        this[_buffer$][$_set]((t1 = this[_offset], this[_offset] = t1 + 1, t1), list[$_get](i) ? 1 : 0);
      }
    }
    writeStringList(list, opts) {
      let writeLength = opts && 'writeLength' in opts ? opts.writeLength : true;
      let encoder = opts && 'encoder' in opts ? opts.encoder : C[0] || CT.C0;
      core.ArgumentError.checkNotNull(T.ListOfString(), list);
      if (writeLength) {
        this.writeUint32(list[$length]);
      }
      for (let str of list) {
        let strBytes = encoder.convert(str);
        this.writeUint32(strBytes[$length]);
        this[_addBytes](strBytes);
      }
    }
    writeList(list, opts) {
      let writeLength = opts && 'writeLength' in opts ? opts.writeLength : true;
      core.ArgumentError.checkNotNull(core.List, list);
      if (writeLength) {
        this.writeUint32(list[$length]);
      }
      for (let i = 0; i < list[$length]; i = i + 1) {
        this.write(dart.dynamic, list[$_get](i));
      }
    }
    writeMap(map, opts) {
      let writeLength = opts && 'writeLength' in opts ? opts.writeLength : true;
      core.ArgumentError.checkNotNull(core.Map, map);
      if (writeLength) {
        this.writeUint32(map[$length]);
      }
      for (let key of map[$keys]) {
        this.write(dart.dynamic, key);
        this.write(dart.dynamic, map[$_get](key));
      }
    }
    writeKey(key) {
      core.ArgumentError.checkNotNull(core.Object, key);
      if (typeof key == 'string') {
        this.writeByte(1);
        let bytes = hive.BinaryWriter.utf8Encoder.convert(key);
        this.writeByte(bytes[$length]);
        this[_addBytes](bytes);
      } else {
        this.writeByte(0);
        this.writeUint32(core.int.as(key));
      }
    }
    writeHiveList(list, opts) {
      let writeLength = opts && 'writeLength' in opts ? opts.writeLength : true;
      core.ArgumentError.checkNotNull(T.HiveListOfHiveObjectMixin(), list);
      if (writeLength) {
        this.writeUint32(list[$length]);
      }
      let boxName = T.HiveListImplOfHiveObjectMixin().as(list).boxName;
      this.writeByte(boxName.length);
      this[_addBytes](boxName[$codeUnits]);
      for (let obj of list) {
        this.writeKey(obj.key);
      }
    }
    writeFrame(frame, opts) {
      let t1, t1$;
      let cipher = opts && 'cipher' in opts ? opts.cipher : null;
      core.ArgumentError.checkNotNull(frame$.Frame, frame);
      let startOffset = this[_offset];
      this[_reserveBytes](4);
      this[_offset] = this[_offset] + 4;
      this.writeKey(frame.key);
      if (!frame.deleted) {
        if (cipher == null) {
          this.write(dart.dynamic, frame.value);
        } else {
          this.writeEncrypted(frame.value, cipher);
        }
      }
      let frameLength = this[_offset] - startOffset + 4;
      extensions['ListIntX|writeUint32'](this[_buffer$], startOffset, frameLength);
      let crc = crc32.Crc32.compute(this[_buffer$], {offset: startOffset, length: frameLength - 4, crc: (t1$ = (t1 = cipher, t1 == null ? null : t1.calculateKeyCrc()), t1$ == null ? 0 : t1$)});
      this.writeUint32(crc);
      return frameLength;
    }
    write(T, value, opts) {
      let writeTypeId = opts && 'writeTypeId' in opts ? opts.writeTypeId : true;
      if (value == null) {
        if (writeTypeId) {
          this.writeByte(0);
        }
      } else if (core.int.is(value)) {
        if (writeTypeId) {
          this.writeByte(1);
        }
        this.writeInt(value);
      } else if (typeof value == 'number') {
        if (writeTypeId) {
          this.writeByte(2);
        }
        this.writeDouble(value);
      } else if (typeof value == 'boolean') {
        if (writeTypeId) {
          this.writeByte(3);
        }
        this.writeBool(value);
      } else if (typeof value == 'string') {
        if (writeTypeId) {
          this.writeByte(4);
        }
        this.writeString(value);
      } else if (core.List.is(value)) {
        this[_writeList](value, {writeTypeId: writeTypeId});
      } else if (core.Map.is(value)) {
        if (writeTypeId) {
          this.writeByte(11);
        }
        this.writeMap(value);
      } else {
        let resolved = this[_typeRegistry$].findAdapterForValue(value);
        if (resolved == null) {
          dart.throw(new hive.HiveError.new("Cannot write, unknown type: " + dart.str(dart.runtimeType(value)) + ". " + "Did you forget to register an adapter?"));
        }
        if (writeTypeId) {
          this.writeByte(resolved.typeId);
        }
        resolved.adapter.write(this, value);
      }
    }
    [_writeList](value, opts) {
      let writeTypeId = opts && 'writeTypeId' in opts ? opts.writeTypeId : true;
      if (T.HiveListOfHiveObjectMixin().is(value)) {
        if (writeTypeId) {
          this.writeByte(12);
        }
        this.writeHiveList(value);
      } else if (value[$contains](null)) {
        if (writeTypeId) {
          this.writeByte(10);
        }
        this.writeList(value);
      } else if (typed_data.Uint8List.is(value)) {
        if (writeTypeId) {
          this.writeByte(5);
        }
        this.writeByteList(value);
      } else if (T.ListOfint().is(value)) {
        if (writeTypeId) {
          this.writeByte(6);
        }
        this.writeIntList(value);
      } else if (T.ListOfdouble().is(value)) {
        if (writeTypeId) {
          this.writeByte(7);
        }
        this.writeDoubleList(value);
      } else if (T.ListOfbool().is(value)) {
        if (writeTypeId) {
          this.writeByte(8);
        }
        this.writeBoolList(value);
      } else if (T.ListOfString().is(value)) {
        if (writeTypeId) {
          this.writeByte(9);
        }
        this.writeStringList(value);
      } else {
        if (writeTypeId) {
          this.writeByte(10);
        }
        this.writeList(value);
      }
    }
    writeEncrypted(value, cipher, opts) {
      let t1;
      let writeTypeId = opts && 'writeTypeId' in opts ? opts.writeTypeId : true;
      let valueWriter = (t1 = new binary_writer_impl.BinaryWriterImpl.new(this[_typeRegistry$]), (() => {
        t1.write(dart.dynamic, value, {writeTypeId: writeTypeId});
        return t1;
      })());
      let inp = valueWriter[_buffer$];
      let inpLength = valueWriter[_offset];
      this[_reserveBytes](cipher.maxEncryptedSize(inp));
      let len = cipher.encrypt(inp, 0, inpLength, this[_buffer$], this[_offset]);
      this[_offset] = this[_offset] + len;
    }
    toBytes() {
      return typed_data.Uint8List.view(this[_buffer$][$buffer], 0, this[_offset]);
    }
    static _pow2roundup(x) {
      if (!(x > 0)) dart.assertFailed(null, I[6], 419, 12, "x > 0");
      x = x - 1;
      x = (x | x[$rightShift](1)) >>> 0;
      x = (x | x[$rightShift](2)) >>> 0;
      x = (x | x[$rightShift](4)) >>> 0;
      x = (x | x[$rightShift](8)) >>> 0;
      x = (x | x[$rightShift](16)) >>> 0;
      return x + 1;
    }
  };
  (binary_writer_impl.BinaryWriterImpl.new = function(typeRegistry) {
    this[_buffer$] = _native_typed_data.NativeUint8List.new(4096);
    this[_byteDataInstance] = null;
    this[_offset] = 0;
    this[_typeRegistry$] = type_registry_impl.TypeRegistryImpl.as(typeRegistry);
    ;
  }).prototype = binary_writer_impl.BinaryWriterImpl.prototype;
  (binary_writer_impl.BinaryWriterImpl.withBuffer = function(_buffer, _typeRegistry) {
    this[_buffer$] = _native_typed_data.NativeUint8List.new(4096);
    this[_byteDataInstance] = null;
    this[_offset] = 0;
    this[_buffer$] = _buffer;
    this[_typeRegistry$] = _typeRegistry;
    ;
  }).prototype = binary_writer_impl.BinaryWriterImpl.prototype;
  dart.addTypeTests(binary_writer_impl.BinaryWriterImpl);
  dart.addTypeCaches(binary_writer_impl.BinaryWriterImpl);
  dart.setMethodSignature(binary_writer_impl.BinaryWriterImpl, () => ({
    __proto__: dart.getMethods(binary_writer_impl.BinaryWriterImpl.__proto__),
    [_reserveBytes]: dart.fnType(dart.void, [core.int]),
    [_increaseBufferSize]: dart.fnType(dart.void, [core.int]),
    [_addBytes]: dart.fnType(dart.void, [core.List$(core.int)]),
    writeByte: dart.fnType(dart.void, [core.int]),
    writeWord: dart.fnType(dart.void, [core.int]),
    writeInt32: dart.fnType(dart.void, [core.int]),
    writeUint32: dart.fnType(dart.void, [core.int]),
    writeInt: dart.fnType(dart.void, [core.int]),
    writeDouble: dart.fnType(dart.void, [core.double]),
    writeBool: dart.fnType(dart.void, [core.bool]),
    writeString: dart.fnType(dart.void, [core.String], {encoder: convert.Converter$(core.String, core.List$(core.int)), writeByteCount: core.bool}, {}),
    writeByteList: dart.fnType(dart.void, [core.List$(core.int)], {writeLength: core.bool}, {}),
    writeIntList: dart.fnType(dart.void, [core.List$(core.int)], {writeLength: core.bool}, {}),
    writeDoubleList: dart.fnType(dart.void, [core.List$(core.double)], {writeLength: core.bool}, {}),
    writeBoolList: dart.fnType(dart.void, [core.List$(core.bool)], {writeLength: core.bool}, {}),
    writeStringList: dart.fnType(dart.void, [core.List$(core.String)], {encoder: convert.Converter$(core.String, core.List$(core.int)), writeLength: core.bool}, {}),
    writeList: dart.fnType(dart.void, [core.List], {writeLength: core.bool}, {}),
    writeMap: dart.fnType(dart.void, [core.Map], {writeLength: core.bool}, {}),
    writeKey: dart.fnType(dart.void, [dart.dynamic]),
    writeHiveList: dart.fnType(dart.void, [hive.HiveList$(hive_object.HiveObjectMixin)], {writeLength: core.bool}, {}),
    writeFrame: dart.fnType(core.int, [frame$.Frame], {cipher: dart.nullable(hive.HiveCipher)}, {}),
    write: dart.gFnType(T => [dart.void, [T], {writeTypeId: core.bool}, {}], T => [dart.nullable(core.Object)]),
    [_writeList]: dart.fnType(dart.void, [core.List], {writeTypeId: core.bool}, {}),
    writeEncrypted: dart.fnType(dart.void, [dart.dynamic, hive.HiveCipher], {writeTypeId: core.bool}, {}),
    toBytes: dart.fnType(typed_data.Uint8List, [])
  }));
  dart.setStaticMethodSignature(binary_writer_impl.BinaryWriterImpl, () => ['_pow2roundup']);
  dart.setGetterSignature(binary_writer_impl.BinaryWriterImpl, () => ({
    __proto__: dart.getGetters(binary_writer_impl.BinaryWriterImpl.__proto__),
    [_byteData]: typed_data.ByteData
  }));
  dart.setLibraryUri(binary_writer_impl.BinaryWriterImpl, I[8]);
  dart.setFieldSignature(binary_writer_impl.BinaryWriterImpl, () => ({
    __proto__: dart.getFields(binary_writer_impl.BinaryWriterImpl.__proto__),
    [_typeRegistry$]: dart.finalFieldType(type_registry_impl.TypeRegistryImpl),
    [_buffer$]: dart.fieldType(typed_data.Uint8List),
    [_byteDataInstance]: dart.fieldType(dart.nullable(typed_data.ByteData)),
    [_offset]: dart.fieldType(core.int)
  }));
  dart.setStaticFieldSignature(binary_writer_impl.BinaryWriterImpl, () => ['_initBufferSize']);
  dart.defineLazy(binary_writer_impl.BinaryWriterImpl, {
    /*binary_writer_impl.BinaryWriterImpl._initBufferSize*/get _initBufferSize() {
      return 4096;
    }
  }, false);
  var typeId$ = dart.privateName(ignored_type_adapter, "IgnoredTypeAdapter.typeId");
  const _is_IgnoredTypeAdapter_default = Symbol('_is_IgnoredTypeAdapter_default');
  ignored_type_adapter.IgnoredTypeAdapter$ = dart.generic(T => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    class IgnoredTypeAdapter extends core.Object {
      get typeId() {
        return this[typeId$];
      }
      set typeId(value) {
        super.typeId = value;
      }
      static ['_#new#tearOff'](T, typeId = 0) {
        return new (ignored_type_adapter.IgnoredTypeAdapter$(T)).new(typeId);
      }
      read(reader) {
        return null;
      }
      write(writer, obj) {
        __t$TN().as(obj);
      }
    }
    (IgnoredTypeAdapter.new = function(typeId = 0) {
      this[typeId$] = typeId;
      ;
    }).prototype = IgnoredTypeAdapter.prototype;
    dart.addTypeTests(IgnoredTypeAdapter);
    IgnoredTypeAdapter.prototype[_is_IgnoredTypeAdapter_default] = true;
    dart.addTypeCaches(IgnoredTypeAdapter);
    IgnoredTypeAdapter[dart.implements] = () => [hive.TypeAdapter$(dart.nullable(T))];
    dart.setMethodSignature(IgnoredTypeAdapter, () => ({
      __proto__: dart.getMethods(IgnoredTypeAdapter.__proto__),
      read: dart.fnType(dart.nullable(T), [hive.BinaryReader]),
      write: dart.fnType(dart.void, [hive.BinaryWriter, dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(IgnoredTypeAdapter, I[9]);
    dart.setFieldSignature(IgnoredTypeAdapter, () => ({
      __proto__: dart.getFields(IgnoredTypeAdapter.__proto__),
      typeId: dart.finalFieldType(core.int)
    }));
    return IgnoredTypeAdapter;
  });
  ignored_type_adapter.IgnoredTypeAdapter = ignored_type_adapter.IgnoredTypeAdapter$();
  dart.addTypeTests(ignored_type_adapter.IgnoredTypeAdapter, _is_IgnoredTypeAdapter_default);
  var adapter$ = dart.privateName(type_registry_impl, "ResolvedAdapter.adapter");
  var typeId$0 = dart.privateName(type_registry_impl, "ResolvedAdapter.typeId");
  const _is_ResolvedAdapter_default = Symbol('_is_ResolvedAdapter_default');
  type_registry_impl.ResolvedAdapter$ = dart.generic(T => {
    class ResolvedAdapter extends core.Object {
      get adapter() {
        return this[adapter$];
      }
      set adapter(value) {
        super.adapter = value;
      }
      get typeId() {
        return this[typeId$0];
      }
      set typeId(value) {
        super.typeId = value;
      }
      static ['_#new#tearOff'](T, adapter, typeId) {
        return new (type_registry_impl.ResolvedAdapter$(T)).new(adapter, typeId);
      }
      matchesRuntimeType(value) {
        return dart.runtimeType(value)._equals(dart.wrapType(T));
      }
      matchesType(value) {
        return T.is(value);
      }
    }
    (ResolvedAdapter.new = function(adapter, typeId) {
      this[adapter$] = adapter;
      this[typeId$0] = typeId;
      ;
    }).prototype = ResolvedAdapter.prototype;
    dart.addTypeTests(ResolvedAdapter);
    ResolvedAdapter.prototype[_is_ResolvedAdapter_default] = true;
    dart.addTypeCaches(ResolvedAdapter);
    dart.setMethodSignature(ResolvedAdapter, () => ({
      __proto__: dart.getMethods(ResolvedAdapter.__proto__),
      matchesRuntimeType: dart.fnType(core.bool, [dart.dynamic]),
      matchesType: dart.fnType(core.bool, [dart.dynamic])
    }));
    dart.setLibraryUri(ResolvedAdapter, I[10]);
    dart.setFieldSignature(ResolvedAdapter, () => ({
      __proto__: dart.getFields(ResolvedAdapter.__proto__),
      adapter: dart.finalFieldType(hive.TypeAdapter),
      typeId: dart.finalFieldType(core.int)
    }));
    return ResolvedAdapter;
  });
  type_registry_impl.ResolvedAdapter = type_registry_impl.ResolvedAdapter$();
  dart.addTypeTests(type_registry_impl.ResolvedAdapter, _is_ResolvedAdapter_default);
  var _typeAdapters = dart.privateName(type_registry_impl, "_typeAdapters");
  type_registry_impl._NullTypeRegistry = class _NullTypeRegistry extends core.Object {
    static ['_#new#tearOff']() {
      return new type_registry_impl._NullTypeRegistry.new();
    }
    get [_typeAdapters]() {
      return dart.throw(new core.UnimplementedError.new());
    }
    findAdapterForTypeId(typeId) {
      return dart.throw(new core.UnimplementedError.new());
    }
    findAdapterForValue(value) {
      return dart.throw(new core.UnimplementedError.new());
    }
    ignoreTypeId(T, typeId) {
      return dart.throw(new core.UnimplementedError.new());
    }
    isAdapterRegistered(typeId, opts) {
      let internal = opts && 'internal' in opts ? opts.internal : false;
      return dart.throw(new core.UnimplementedError.new());
    }
    registerAdapter(T, adapter, opts) {
      let internal = opts && 'internal' in opts ? opts.internal : false;
      let override = opts && 'override' in opts ? opts.override : false;
      return dart.throw(new core.UnimplementedError.new());
    }
    resetAdapters() {
      return dart.throw(new core.UnimplementedError.new());
    }
  };
  (type_registry_impl._NullTypeRegistry.new = function() {
    ;
  }).prototype = type_registry_impl._NullTypeRegistry.prototype;
  dart.addTypeTests(type_registry_impl._NullTypeRegistry);
  dart.addTypeCaches(type_registry_impl._NullTypeRegistry);
  type_registry_impl._NullTypeRegistry[dart.implements] = () => [type_registry_impl.TypeRegistryImpl];
  dart.setMethodSignature(type_registry_impl._NullTypeRegistry, () => ({
    __proto__: dart.getMethods(type_registry_impl._NullTypeRegistry.__proto__),
    findAdapterForTypeId: dart.fnType(dart.Never, [core.int]),
    findAdapterForValue: dart.fnType(dart.Never, [dart.dynamic]),
    ignoreTypeId: dart.gFnType(T => [dart.Never, [core.int]], T => [dart.nullable(core.Object)]),
    isAdapterRegistered: dart.fnType(dart.Never, [core.int], {internal: core.bool}, {}),
    registerAdapter: dart.gFnType(T => [dart.Never, [hive.TypeAdapter$(T)], {internal: core.bool, override: core.bool}, {}], T => [dart.nullable(core.Object)]),
    resetAdapters: dart.fnType(dart.Never, [])
  }));
  dart.setGetterSignature(type_registry_impl._NullTypeRegistry, () => ({
    __proto__: dart.getGetters(type_registry_impl._NullTypeRegistry.__proto__),
    [_typeAdapters]: dart.Never
  }));
  dart.setLibraryUri(type_registry_impl._NullTypeRegistry, I[10]);
  type_registry_impl.TypeRegistryImpl = class TypeRegistryImpl extends core.Object {
    findAdapterForValue(value) {
      let match = null;
      for (let adapter of this[_typeAdapters][$values]) {
        if (adapter.matchesRuntimeType(value)) {
          return adapter;
        }
        if (adapter.matchesType(value) && match == null) {
          match = adapter;
        }
      }
      return match;
    }
    findAdapterForTypeId(typeId) {
      return this[_typeAdapters][$_get](typeId);
    }
    registerAdapter(T, adapter, opts) {
      let internal = opts && 'internal' in opts ? opts.internal : false;
      let override = opts && 'override' in opts ? opts.override : false;
      if (dart.wrapType(T)._equals(dart.wrapType(dart.dynamic)) || dart.wrapType(T)._equals(dart.wrapType(core.Object))) {
        core.print("Registering type adapters for dynamic type is must be avoided, " + "otherwise all the write requests to Hive will be handled by given " + "adapter. Please explicitly provide adapter type on registerAdapter " + "method to avoid this kind of issues. For example if you want to " + "register MyTypeAdapter for MyType class you can call like this: " + "registerAdapter<MyType>(MyTypeAdapter())");
      }
      let typeId = adapter.typeId;
      if (!internal) {
        if (typeId < 0 || typeId > 223) {
          dart.throw(new hive.HiveError.new("TypeId " + dart.str(typeId) + " not allowed."));
        }
        typeId = typeId + 32;
        let oldAdapter = this.findAdapterForTypeId(typeId);
        if (oldAdapter != null) {
          if (override) {
            core.print("You are trying to override " + dart.runtimeType(oldAdapter).toString() + "with " + adapter[$runtimeType].toString() + " for typeId: " + dart.str(adapter.typeId) + ". Please note that overriding adapters might " + "cause weird errors. Try to avoid overriding adapters unless not " + "required.");
          } else {
            dart.throw(new hive.HiveError.new("There is already a TypeAdapter for " + "typeId " + dart.str(typeId - 32) + "."));
          }
        }
      }
      let resolved = new (type_registry_impl.ResolvedAdapter$(T)).new(adapter, typeId);
      this[_typeAdapters][$_set](typeId, resolved);
    }
    isAdapterRegistered(typeId, opts) {
      let internal = opts && 'internal' in opts ? opts.internal : false;
      if (!internal) {
        if (typeId < 0 || typeId > 223) {
          dart.throw(new hive.HiveError.new("TypeId " + dart.str(typeId) + " not allowed."));
        }
        typeId = typeId + 32;
      }
      return this.findAdapterForTypeId(typeId) != null;
    }
    resetAdapters() {
      this[_typeAdapters][$clear]();
    }
    ignoreTypeId(T, typeId) {
      this.registerAdapter(dart.nullable(T), new (ignored_type_adapter.IgnoredTypeAdapter$(T)).new(typeId));
    }
    static ['_#new#tearOff']() {
      return new type_registry_impl.TypeRegistryImpl.new();
    }
  };
  (type_registry_impl.TypeRegistryImpl.new = function() {
    this[_typeAdapters] = new (T.IdentityMapOfint$ResolvedAdapter()).new();
    ;
  }).prototype = type_registry_impl.TypeRegistryImpl.prototype;
  dart.addTypeTests(type_registry_impl.TypeRegistryImpl);
  dart.addTypeCaches(type_registry_impl.TypeRegistryImpl);
  type_registry_impl.TypeRegistryImpl[dart.implements] = () => [hive.TypeRegistry];
  dart.setMethodSignature(type_registry_impl.TypeRegistryImpl, () => ({
    __proto__: dart.getMethods(type_registry_impl.TypeRegistryImpl.__proto__),
    findAdapterForValue: dart.fnType(dart.nullable(type_registry_impl.ResolvedAdapter), [dart.dynamic]),
    findAdapterForTypeId: dart.fnType(dart.nullable(type_registry_impl.ResolvedAdapter), [core.int]),
    registerAdapter: dart.gFnType(T => [dart.void, [hive.TypeAdapter$(T)], {internal: core.bool, override: core.bool}, {}], T => [dart.nullable(core.Object)]),
    isAdapterRegistered: dart.fnType(core.bool, [core.int], {internal: core.bool}, {}),
    resetAdapters: dart.fnType(dart.void, []),
    ignoreTypeId: dart.gFnType(T => [dart.void, [core.int]], T => [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(type_registry_impl.TypeRegistryImpl, I[10]);
  dart.setFieldSignature(type_registry_impl.TypeRegistryImpl, () => ({
    __proto__: dart.getFields(type_registry_impl.TypeRegistryImpl.__proto__),
    [_typeAdapters]: dart.finalFieldType(core.Map$(core.int, type_registry_impl.ResolvedAdapter))
  }));
  dart.setStaticFieldSignature(type_registry_impl.TypeRegistryImpl, () => ['nullImpl', 'reservedTypeIds']);
  dart.defineLazy(type_registry_impl.TypeRegistryImpl, {
    /*type_registry_impl.TypeRegistryImpl.nullImpl*/get nullImpl() {
      return C[1] || CT.C1;
    },
    /*type_registry_impl.TypeRegistryImpl.reservedTypeIds*/get reservedTypeIds() {
      return 32;
    }
  }, false);
  var _offset$ = dart.privateName(binary_reader_impl, "_offset");
  var _buffer$0 = dart.privateName(binary_reader_impl, "_buffer");
  var _byteData$ = dart.privateName(binary_reader_impl, "_byteData");
  var _bufferLength = dart.privateName(binary_reader_impl, "_bufferLength");
  var _bufferLimit = dart.privateName(binary_reader_impl, "_bufferLimit");
  var _typeRegistry = dart.privateName(binary_reader_impl, "_typeRegistry");
  var _requireBytes = dart.privateName(binary_reader_impl, "_requireBytes");
  var _limitAvailableBytes = dart.privateName(binary_reader_impl, "_limitAvailableBytes");
  var _resetLimit = dart.privateName(binary_reader_impl, "_resetLimit");
  var Utf8Decoder__allowMalformed = dart.privateName(convert, "Utf8Decoder._allowMalformed");
  hive.BinaryReader = class BinaryReader extends core.Object {};
  (hive.BinaryReader.new = function() {
    ;
  }).prototype = hive.BinaryReader.prototype;
  dart.addTypeTests(hive.BinaryReader);
  dart.addTypeCaches(hive.BinaryReader);
  dart.setLibraryUri(hive.BinaryReader, I[7]);
  dart.setStaticFieldSignature(hive.BinaryReader, () => ['utf8Decoder']);
  dart.defineLazy(hive.BinaryReader, {
    /*hive.BinaryReader.utf8Decoder*/get utf8Decoder() {
      return C[2] || CT.C2;
    }
  }, false);
  binary_reader_impl.BinaryReaderImpl = class BinaryReaderImpl extends hive.BinaryReader {
    static ['_#new#tearOff'](_buffer, typeRegistry, bufferLength = null) {
      return new binary_reader_impl.BinaryReaderImpl.new(_buffer, typeRegistry, bufferLength);
    }
    get availableBytes() {
      return this[_bufferLimit] - this[_offset$];
    }
    get usedBytes() {
      return this[_offset$];
    }
    [_limitAvailableBytes](bytes) {
      this[_requireBytes](bytes);
      this[_bufferLimit] = this[_offset$] + bytes;
    }
    [_resetLimit]() {
      this[_bufferLimit] = this[_bufferLength];
    }
    [_requireBytes](bytes) {
      if (this[_offset$] + bytes > this[_bufferLimit]) {
        dart.throw(new core.RangeError.new("Not enough bytes available."));
      }
    }
    skip(bytes) {
      this[_requireBytes](bytes);
      this[_offset$] = this[_offset$] + bytes;
    }
    readByte() {
      let t1;
      this[_requireBytes](1);
      return this[_buffer$0][$_get]((t1 = this[_offset$], this[_offset$] = t1 + 1, t1));
    }
    viewBytes(bytes) {
      this[_requireBytes](bytes);
      this[_offset$] = this[_offset$] + bytes;
      return extensions['Uint8ListX|view'](this[_buffer$0], this[_offset$] - bytes, bytes);
    }
    peekBytes(bytes) {
      this[_requireBytes](bytes);
      return extensions['Uint8ListX|view'](this[_buffer$0], this[_offset$], bytes);
    }
    readWord() {
      let t1, t1$;
      this[_requireBytes](2);
      return (this[_buffer$0][$_get]((t1 = this[_offset$], this[_offset$] = t1 + 1, t1)) | this[_buffer$0][$_get]((t1$ = this[_offset$], this[_offset$] = t1$ + 1, t1$)) << 8 >>> 0) >>> 0;
    }
    readInt32() {
      this[_requireBytes](4);
      this[_offset$] = this[_offset$] + 4;
      return this[_byteData$][$getInt32](this[_offset$] - 4, typed_data.Endian.little);
    }
    readUint32() {
      this[_requireBytes](4);
      this[_offset$] = this[_offset$] + 4;
      return extensions['ListIntX|readUint32'](this[_buffer$0], this[_offset$] - 4);
    }
    peekUint32() {
      this[_requireBytes](4);
      return extensions['ListIntX|readUint32'](this[_buffer$0], this[_offset$]);
    }
    readInt() {
      return this.readDouble()[$toInt]();
    }
    readDouble() {
      this[_requireBytes](8);
      let value = this[_byteData$][$getFloat64](this[_offset$], typed_data.Endian.little);
      this[_offset$] = this[_offset$] + 8;
      return value;
    }
    readBool() {
      return this.readByte() > 0;
    }
    readString(byteCount = null, decoder = C[2] || CT.C2) {
      byteCount == null ? byteCount = this.readUint32() : null;
      let view = this.viewBytes(byteCount);
      return decoder.convert(view);
    }
    readByteList(length = null) {
      length == null ? length = this.readUint32() : null;
      this[_requireBytes](length);
      let byteList = this[_buffer$0][$sublist](this[_offset$], this[_offset$] + dart.notNull(length));
      this[_offset$] = this[_offset$] + dart.notNull(length);
      return byteList;
    }
    readIntList(length = null) {
      length == null ? length = this.readUint32() : null;
      this[_requireBytes](dart.notNull(length) * 8);
      let byteData = this[_byteData$];
      let list = T.ListOfint().filled(length, 0, {growable: true});
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        list[$_set](i, byteData[$getFloat64](this[_offset$], typed_data.Endian.little)[$toInt]());
        this[_offset$] = this[_offset$] + 8;
      }
      return list;
    }
    readDoubleList(length = null) {
      length == null ? length = this.readUint32() : null;
      this[_requireBytes](dart.notNull(length) * 8);
      let byteData = this[_byteData$];
      let list = T.ListOfdouble().filled(length, 0.0, {growable: true});
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        list[$_set](i, byteData[$getFloat64](this[_offset$], typed_data.Endian.little));
        this[_offset$] = this[_offset$] + 8;
      }
      return list;
    }
    readBoolList(length = null) {
      let t1;
      length == null ? length = this.readUint32() : null;
      this[_requireBytes](length);
      let list = T.ListOfbool().filled(length, false, {growable: true});
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        list[$_set](i, this[_buffer$0][$_get]((t1 = this[_offset$], this[_offset$] = t1 + 1, t1)) > 0);
      }
      return list;
    }
    readStringList(length = null, decoder = C[2] || CT.C2) {
      length == null ? length = this.readUint32() : null;
      let list = T.ListOfString().filled(length, "", {growable: true});
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        list[$_set](i, this.readString(null, decoder));
      }
      return list;
    }
    readList(length = null) {
      length == null ? length = this.readUint32() : null;
      let list = core.List.filled(length, null, {growable: true});
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        list[$_set](i, this.read());
      }
      return list;
    }
    readMap(length = null) {
      length == null ? length = this.readUint32() : null;
      let map = new _js_helper.LinkedMap.new();
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        map[$_set](this.read(), this.read());
      }
      return map;
    }
    readKey() {
      let keyType = this.readByte();
      if (keyType === 0) {
        return this.readUint32();
      } else if (keyType === 1) {
        let byteCount = this.readByte();
        return hive.BinaryReader.utf8Decoder.convert(this.viewBytes(byteCount));
      } else {
        dart.throw(new hive.HiveError.new("Unsupported key type. Frame might be corrupted."));
      }
    }
    readHiveList(length = null) {
      length == null ? length = this.readUint32() : null;
      let boxNameLength = this.readByte();
      let boxName = core.String.fromCharCodes(this.viewBytes(boxNameLength));
      let keys = core.List.filled(length, null, {growable: true});
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        keys[$_set](i, this.readKey());
      }
      return new (T.HiveListImplOfHiveObjectMixin()).lazy(boxName, keys);
    }
    readFrame(opts) {
      let t1, t1$, t1$0;
      let cipher = opts && 'cipher' in opts ? opts.cipher : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : false;
      let frameOffset = opts && 'frameOffset' in opts ? opts.frameOffset : 0;
      if (this.availableBytes < 4) return null;
      let frameLength = this.readUint32();
      if (frameLength < 8) return null;
      if (this.availableBytes < frameLength - 4) return null;
      let crc = extensions['ListIntX|readUint32'](this[_buffer$0], this[_offset$] + frameLength - 8);
      let computedCrc = crc32.Crc32.compute(this[_buffer$0], {offset: this[_offset$] - 4, length: frameLength - 4, crc: (t1$ = (t1 = cipher, t1 == null ? null : t1.calculateKeyCrc()), t1$ == null ? 0 : t1$)});
      if (computedCrc !== crc) return null;
      this[_limitAvailableBytes](frameLength - 8);
      let frame = null;
      let key = this.readKey();
      if (this.availableBytes === 0) {
        frame = new frame$.Frame.deleted(key);
      } else if (lazy) {
        frame = new frame$.Frame.lazy(key);
      } else if (cipher == null) {
        frame = new frame$.Frame.new(key, this.read());
      } else {
        frame = new frame$.Frame.new(key, this.readEncrypted(cipher));
      }
      t1$0 = frame;
      (() => {
        t1$0.length = frameLength;
        t1$0.offset = frameOffset;
        return t1$0;
      })();
      this.skip(this.availableBytes);
      this[_resetLimit]();
      this.skip(4);
      return frame;
    }
    read(typeId = null) {
      typeId == null ? typeId = this.readByte() : null;
      switch (typeId) {
        case 0:
          {
            return null;
          }
        case 1:
          {
            return this.readInt();
          }
        case 2:
          {
            return this.readDouble();
          }
        case 3:
          {
            return this.readBool();
          }
        case 4:
          {
            return this.readString();
          }
        case 5:
          {
            return this.readByteList();
          }
        case 6:
          {
            return this.readIntList();
          }
        case 7:
          {
            return this.readDoubleList();
          }
        case 8:
          {
            return this.readBoolList();
          }
        case 9:
          {
            return this.readStringList();
          }
        case 10:
          {
            return this.readList();
          }
        case 11:
          {
            return this.readMap();
          }
        case 12:
          {
            return this.readHiveList();
          }
        default:
          {
            let resolved = this[_typeRegistry].findAdapterForTypeId(typeId);
            if (resolved == null) {
              dart.throw(new hive.HiveError.new("Cannot read, unknown typeId: " + dart.str(typeId) + ". " + "Did you forget to register an adapter?"));
            }
            return resolved.adapter.read(this);
          }
      }
    }
    readEncrypted(cipher) {
      let inpLength = this.availableBytes;
      let out = _native_typed_data.NativeUint8List.new(inpLength);
      let outLength = cipher.decrypt(this[_buffer$0], this[_offset$], inpLength, out, 0);
      this[_offset$] = this[_offset$] + inpLength;
      let valueReader = new binary_reader_impl.BinaryReaderImpl.new(out, this[_typeRegistry], outLength);
      return valueReader.read();
    }
  };
  (binary_reader_impl.BinaryReaderImpl.new = function(_buffer, typeRegistry, bufferLength = null) {
    let t1, t1$;
    this[_offset$] = 0;
    this[_buffer$0] = _buffer;
    this[_byteData$] = typed_data.ByteData.view(_buffer[$buffer], _buffer[$offsetInBytes]);
    this[_bufferLength] = (t1 = bufferLength, t1 == null ? _buffer[$length] : t1);
    this[_bufferLimit] = (t1$ = bufferLength, t1$ == null ? _buffer[$length] : t1$);
    this[_typeRegistry] = type_registry_impl.TypeRegistryImpl.as(typeRegistry);
    ;
  }).prototype = binary_reader_impl.BinaryReaderImpl.prototype;
  dart.addTypeTests(binary_reader_impl.BinaryReaderImpl);
  dart.addTypeCaches(binary_reader_impl.BinaryReaderImpl);
  dart.setMethodSignature(binary_reader_impl.BinaryReaderImpl, () => ({
    __proto__: dart.getMethods(binary_reader_impl.BinaryReaderImpl.__proto__),
    [_limitAvailableBytes]: dart.fnType(dart.void, [core.int]),
    [_resetLimit]: dart.fnType(dart.void, []),
    [_requireBytes]: dart.fnType(dart.void, [core.int]),
    skip: dart.fnType(dart.void, [core.int]),
    readByte: dart.fnType(core.int, []),
    viewBytes: dart.fnType(typed_data.Uint8List, [core.int]),
    peekBytes: dart.fnType(typed_data.Uint8List, [core.int]),
    readWord: dart.fnType(core.int, []),
    readInt32: dart.fnType(core.int, []),
    readUint32: dart.fnType(core.int, []),
    peekUint32: dart.fnType(core.int, []),
    readInt: dart.fnType(core.int, []),
    readDouble: dart.fnType(core.double, []),
    readBool: dart.fnType(core.bool, []),
    readString: dart.fnType(core.String, [], [dart.nullable(core.int), convert.Converter$(core.List$(core.int), core.String)]),
    readByteList: dart.fnType(typed_data.Uint8List, [], [dart.nullable(core.int)]),
    readIntList: dart.fnType(core.List$(core.int), [], [dart.nullable(core.int)]),
    readDoubleList: dart.fnType(core.List$(core.double), [], [dart.nullable(core.int)]),
    readBoolList: dart.fnType(core.List$(core.bool), [], [dart.nullable(core.int)]),
    readStringList: dart.fnType(core.List$(core.String), [], [dart.nullable(core.int), convert.Converter$(core.List$(core.int), core.String)]),
    readList: dart.fnType(core.List, [], [dart.nullable(core.int)]),
    readMap: dart.fnType(core.Map, [], [dart.nullable(core.int)]),
    readKey: dart.fnType(dart.dynamic, []),
    readHiveList: dart.fnType(hive.HiveList$(hive_object.HiveObjectMixin), [], [dart.nullable(core.int)]),
    readFrame: dart.fnType(dart.nullable(frame$.Frame), [], {cipher: dart.nullable(hive.HiveCipher), frameOffset: core.int, lazy: core.bool}, {}),
    read: dart.fnType(dart.dynamic, [], [dart.nullable(core.int)]),
    readEncrypted: dart.fnType(dart.dynamic, [hive.HiveCipher])
  }));
  dart.setGetterSignature(binary_reader_impl.BinaryReaderImpl, () => ({
    __proto__: dart.getGetters(binary_reader_impl.BinaryReaderImpl.__proto__),
    availableBytes: core.int,
    usedBytes: core.int
  }));
  dart.setLibraryUri(binary_reader_impl.BinaryReaderImpl, I[11]);
  dart.setFieldSignature(binary_reader_impl.BinaryReaderImpl, () => ({
    __proto__: dart.getFields(binary_reader_impl.BinaryReaderImpl.__proto__),
    [_buffer$0]: dart.finalFieldType(typed_data.Uint8List),
    [_byteData$]: dart.finalFieldType(typed_data.ByteData),
    [_bufferLength]: dart.finalFieldType(core.int),
    [_typeRegistry]: dart.finalFieldType(type_registry_impl.TypeRegistryImpl),
    [_bufferLimit]: dart.fieldType(core.int),
    [_offset$]: dart.fieldType(core.int)
  }));
  var objectStoreName$ = dart.privateName(storage_backend_js, "StorageBackendJs.objectStoreName");
  var supportsCompaction = dart.privateName(storage_backend_js, "StorageBackendJs.supportsCompaction");
  var _db$0 = dart.privateName(storage_backend_js, "_db");
  var _cipher$ = dart.privateName(storage_backend_js, "_cipher");
  var _registry$ = dart.privateName(storage_backend_js, "_registry");
  var _isEncoded = dart.privateName(storage_backend_js, "_isEncoded");
  storage_backend.StorageBackend = class StorageBackend extends core.Object {};
  (storage_backend.StorageBackend.new = function() {
    ;
  }).prototype = storage_backend.StorageBackend.prototype;
  dart.addTypeTests(storage_backend.StorageBackend);
  dart.addTypeCaches(storage_backend.StorageBackend);
  dart.setLibraryUri(storage_backend.StorageBackend, I[12]);
  storage_backend_js.StorageBackendJs = class StorageBackendJs extends storage_backend.StorageBackend {
    get objectStoreName() {
      return this[objectStoreName$];
    }
    set objectStoreName(value) {
      super.objectStoreName = value;
    }
    get supportsCompaction() {
      return this[supportsCompaction];
    }
    set supportsCompaction(value) {
      this[supportsCompaction] = value;
    }
    static ['_#new#tearOff'](_db, _cipher, objectStoreName, _registry = C[1] || CT.C1) {
      return new storage_backend_js.StorageBackendJs.new(_db, _cipher, objectStoreName, _registry);
    }
    get path() {
      return null;
    }
    [_isEncoded](bytes) {
      return bytes[$length] >= storage_backend_js.StorageBackendJs._bytePrefix[$length] && bytes[$_get](0) === storage_backend_js.StorageBackendJs._bytePrefix[$_get](0) && bytes[$_get](1) === storage_backend_js.StorageBackendJs._bytePrefix[$_get](1);
    }
    encodeValue(frame) {
      let value = frame.value;
      if (this[_cipher$] == null) {
        if (value == null) {
          return value;
        } else if (typed_data.Uint8List.is(value)) {
          if (!this[_isEncoded](value)) {
            return value[$buffer];
          }
        } else if (typeof value == 'number' || typeof value == 'boolean' || typeof value == 'string' || T.ListOfnum().is(value) || T.ListOfbool().is(value) || T.ListOfString().is(value)) {
          return value;
        }
      }
      let frameWriter = new binary_writer_impl.BinaryWriterImpl.new(this[_registry$]);
      frameWriter.writeByteList(storage_backend_js.StorageBackendJs._bytePrefix, {writeLength: false});
      if (this[_cipher$] == null) {
        frameWriter.write(dart.dynamic, value);
      } else {
        frameWriter.writeEncrypted(value, dart.nullCheck(this[_cipher$]));
      }
      let bytes = frameWriter.toBytes();
      let sublist = bytes[$sublist](0, bytes[$length]);
      return sublist[$buffer];
    }
    decodeValue(value) {
      if (typed_data.ByteBuffer.is(value)) {
        let bytes = typed_data.Uint8List.view(value);
        if (this[_isEncoded](bytes)) {
          let reader = new binary_reader_impl.BinaryReaderImpl.new(bytes, this[_registry$]);
          reader.skip(2);
          if (this[_cipher$] == null) {
            return reader.read();
          } else {
            return reader.readEncrypted(dart.nullCheck(this[_cipher$]));
          }
        } else {
          return bytes;
        }
      } else {
        return value;
      }
    }
    getStore(write) {
      return this[_db$0][$transaction](this.objectStoreName, write ? "readwrite" : "readonly")[$objectStore](this.objectStoreName);
    }
    getKeys(opts) {
      let cursor = opts && 'cursor' in opts ? opts.cursor : false;
      let store = this.getStore(false);
      if (js_util.hasProperty(store, "getAllKeys") && !cursor) {
        let completer = T.CompleterOfList().new();
        let request = this.getStore(false)[$getAllKeys](null);
        request[$onSuccess].listen(dart.fn(_ => {
          completer.complete(T.ListN().as(request[$result]));
        }, T.EventTovoid()));
        request[$onError].listen(dart.fn(_ => {
          completer.completeError(dart.nullCheck(request.error));
        }, T.EventTovoid()));
        return completer.future;
      } else {
        return store[$openCursor]({autoAdvance: true}).map(T.ObjectN(), dart.fn(e => e.key, T.CursorWithValueToObjectN())).toList();
      }
    }
    getValues(opts) {
      let cursor = opts && 'cursor' in opts ? opts.cursor : false;
      let store = this.getStore(false);
      if (js_util.hasProperty(store, "getAll") && !cursor) {
        let completer = T.CompleterOfIterable().new();
        let request = store[$getAll](null);
        request[$onSuccess].listen(dart.fn(_ => {
          let values = core.List.as(request[$result])[$map](dart.dynamic, dart.bind(this, 'decodeValue'));
          completer.complete(values);
        }, T.EventTovoid()));
        request[$onError].listen(dart.fn(_ => {
          completer.completeError(dart.nullCheck(request.error));
        }, T.EventTovoid()));
        return completer.future;
      } else {
        return store[$openCursor]({autoAdvance: true}).map(dart.dynamic, dart.fn(e => e[$value], T.CursorWithValueTodynamic())).toList();
      }
    }
    initialize(registry, keystore, lazy) {
      return async.async(core.int, (function* initialize() {
        let t1;
        this[_registry$] = registry;
        let keys = (yield this.getKeys());
        if (!lazy) {
          let i = 0;
          let values = (yield this.getValues());
          for (let value of values) {
            let key = keys[$_get]((t1 = i, i = t1 + 1, t1));
            keystore.insert(new frame$.Frame.new(key, value), {notify: false});
          }
        } else {
          for (let key of keys) {
            keystore.insert(new frame$.Frame.lazy(key), {notify: false});
          }
        }
        return 0;
      }).bind(this));
    }
    readValue(frame) {
      return async.async(dart.dynamic, (function* readValue() {
        let value = (yield this.getStore(false)[$getObject](frame.key));
        return this.decodeValue(value);
      }).bind(this));
    }
    writeFrames(frames) {
      return async.async(dart.void, (function* writeFrames() {
        let store = this.getStore(true);
        for (let frame of frames) {
          if (frame.deleted) {
            yield store[$delete](frame.key);
          } else {
            yield store[$put](this.encodeValue(frame), frame.key);
          }
        }
      }).bind(this));
    }
    compact(frames) {
      dart.throw(new core.UnsupportedError.new("Not supported"));
    }
    clear() {
      return this.getStore(true)[$clear]();
    }
    close() {
      this[_db$0].close();
      return T.FutureOfvoid().value();
    }
    deleteFromDisk() {
      return async.async(dart.void, (function* deleteFromDisk() {
        let t1, t1$;
        let indexDB = js.context.hasProperty("window") ? html.window[$indexedDB] : html.WorkerGlobalScope.instance.indexedDB;
        core.print("Delete " + dart.str(this[_db$0].name) + " // " + this.objectStoreName + " from disk");
        if ((t1 = this[_db$0].objectStoreNames, t1 == null ? null : t1[$length]) === 1) {
          yield dart.nullCheck(indexDB)[$deleteDatabase](dart.nullCheck(this[_db$0].name));
        } else {
          let db = (yield dart.nullCheck(indexDB)[$open](dart.nullCheck(this[_db$0].name), {version: 1, onUpgradeNeeded: dart.fn(e => {
              let t1;
              let db = indexed_db.Database.as(e[$target][$result]);
              if ((t1 = db.objectStoreNames, t1 == null ? T.JSArrayOfString().of([]) : t1)[$contains](this.objectStoreName)) {
                db.deleteObjectStore(this.objectStoreName);
              }
            }, T.VersionChangeEventTovoid())}));
          if ((t1$ = db.objectStoreNames, t1$ == null ? T.JSArrayOfString().of([]) : t1$)[$isEmpty]) {
            yield indexDB[$deleteDatabase](dart.nullCheck(this[_db$0].name));
          }
        }
      }).bind(this));
    }
    flush() {
      return T.FutureOfvoid().value();
    }
  };
  (storage_backend_js.StorageBackendJs.new = function(_db, _cipher, objectStoreName, _registry = C[1] || CT.C1) {
    this[supportsCompaction] = false;
    this[_db$0] = _db;
    this[_cipher$] = _cipher;
    this[objectStoreName$] = objectStoreName;
    this[_registry$] = _registry;
    ;
  }).prototype = storage_backend_js.StorageBackendJs.prototype;
  dart.addTypeTests(storage_backend_js.StorageBackendJs);
  dart.addTypeCaches(storage_backend_js.StorageBackendJs);
  dart.setMethodSignature(storage_backend_js.StorageBackendJs, () => ({
    __proto__: dart.getMethods(storage_backend_js.StorageBackendJs.__proto__),
    [_isEncoded]: dart.fnType(core.bool, [typed_data.Uint8List]),
    encodeValue: dart.fnType(dart.dynamic, [frame$.Frame]),
    decodeValue: dart.fnType(dart.dynamic, [dart.dynamic]),
    getStore: dart.fnType(indexed_db.ObjectStore, [core.bool]),
    getKeys: dart.fnType(async.Future$(core.List), [], {cursor: core.bool}, {}),
    getValues: dart.fnType(async.Future$(core.Iterable), [], {cursor: core.bool}, {}),
    initialize: dart.fnType(async.Future$(core.int), [hive.TypeRegistry, keystore$.Keystore, core.bool]),
    readValue: dart.fnType(async.Future, [frame$.Frame]),
    writeFrames: dart.fnType(async.Future$(dart.void), [core.List$(frame$.Frame)]),
    compact: dart.fnType(async.Future$(core.List$(frame$.Frame)), [core.Iterable$(frame$.Frame)]),
    clear: dart.fnType(async.Future$(dart.void), []),
    close: dart.fnType(async.Future$(dart.void), []),
    deleteFromDisk: dart.fnType(async.Future$(dart.void), []),
    flush: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setGetterSignature(storage_backend_js.StorageBackendJs, () => ({
    __proto__: dart.getGetters(storage_backend_js.StorageBackendJs.__proto__),
    path: dart.nullable(core.String)
  }));
  dart.setLibraryUri(storage_backend_js.StorageBackendJs, I[13]);
  dart.setFieldSignature(storage_backend_js.StorageBackendJs, () => ({
    __proto__: dart.getFields(storage_backend_js.StorageBackendJs.__proto__),
    [_db$0]: dart.finalFieldType(indexed_db.Database),
    [_cipher$]: dart.finalFieldType(dart.nullable(hive.HiveCipher)),
    objectStoreName: dart.finalFieldType(core.String),
    [_registry$]: dart.fieldType(hive.TypeRegistry),
    supportsCompaction: dart.fieldType(core.bool)
  }));
  dart.setStaticFieldSignature(storage_backend_js.StorageBackendJs, () => ['_bytePrefix']);
  dart.defineLazy(storage_backend_js.StorageBackendJs, {
    /*storage_backend_js.StorageBackendJs._bytePrefix*/get _bytePrefix() {
      return C[3] || CT.C3;
    }
  }, false);
  backend_manager.BackendManager = class BackendManager extends core.Object {
    get indexedDB() {
      return js.context.hasProperty("window") ? html.window[$indexedDB] : html.WorkerGlobalScope.instance.indexedDB;
    }
    open(name, path, crashRecovery, cipher, collection) {
      return async.async(storage_backend.StorageBackend, (function* open() {
        let t1, t1$, t1$0;
        let databaseName = (t1 = collection, t1 == null ? name : t1);
        let objectStoreName = collection == null ? "box" : name;
        let db = (yield dart.nullCheck(this.indexedDB)[$open](databaseName, {version: 1, onUpgradeNeeded: dart.fn(e => {
            let t1;
            let db = indexed_db.Database.as(e[$target][$result]);
            if (!(t1 = db.objectStoreNames, t1 == null ? T.JSArrayOfString().of([]) : t1)[$contains](objectStoreName)) {
              db[$createObjectStore](objectStoreName);
            }
          }, T.VersionChangeEventTovoid())}));
        if (!(t1$ = db.objectStoreNames, t1$ == null ? T.JSArrayOfString().of([]) : t1$)[$contains](objectStoreName)) {
          core.print("Creating objectStore " + objectStoreName + " in database " + databaseName + "...");
          db = (yield dart.nullCheck(this.indexedDB)[$open](databaseName, {version: dart.notNull((t1$0 = db.version, t1$0 == null ? 1 : t1$0)) + 1, onUpgradeNeeded: dart.fn(e => {
              let t1;
              let db = indexed_db.Database.as(e[$target][$result]);
              if (!(t1 = db.objectStoreNames, t1 == null ? T.JSArrayOfString().of([]) : t1)[$contains](objectStoreName)) {
                db[$createObjectStore](objectStoreName);
              }
            }, T.VersionChangeEventTovoid())}));
        }
        core.print("Got object store " + objectStoreName + " in database " + databaseName + ".");
        return new storage_backend_js.StorageBackendJs.new(db, cipher, objectStoreName);
      }).bind(this));
    }
    deleteBox(name, path, collection) {
      return async.async(dart.void, (function* deleteBox() {
        let t1, t1$;
        core.print("Delete " + name + " // " + dart.str(collection) + " from disk");
        let databaseName = (t1 = collection, t1 == null ? name : t1);
        let objectStoreName = collection == null ? "box" : name;
        if (collection == null) {
          yield dart.nullCheck(this.indexedDB)[$deleteDatabase](databaseName);
        } else {
          let db = (yield dart.nullCheck(this.indexedDB)[$open](databaseName, {version: 1, onUpgradeNeeded: dart.fn(e => {
              let t1;
              let db = indexed_db.Database.as(e[$target][$result]);
              if ((t1 = db.objectStoreNames, t1 == null ? T.JSArrayOfString().of([]) : t1)[$contains](objectStoreName)) {
                db.deleteObjectStore(objectStoreName);
              }
            }, T.VersionChangeEventTovoid())}));
          if ((t1$ = db.objectStoreNames, t1$ == null ? T.JSArrayOfString().of([]) : t1$)[$isEmpty]) {
            dart.nullCheck(this.indexedDB)[$deleteDatabase](databaseName);
          }
        }
      }).bind(this));
    }
    boxExists(name, path, collection) {
      return async.async(core.bool, (function* boxExists() {
        let t1, t1$;
        let databaseName = (t1 = collection, t1 == null ? name : t1);
        let objectStoreName = collection == null ? "box" : name;
        try {
          let _exists = true;
          if (collection == null) {
            yield dart.nullCheck(this.indexedDB)[$open](databaseName, {version: 1, onUpgradeNeeded: dart.fn(e => {
                dart.nullCheck(e[$target].transaction).abort();
                _exists = false;
              }, T.VersionChangeEventTovoid())});
          } else {
            let db = (yield dart.nullCheck(this.indexedDB)[$open](collection, {version: 1, onUpgradeNeeded: dart.fn(e => {
                let t1;
                let db = indexed_db.Database.as(e[$target][$result]);
                _exists = (t1 = db.objectStoreNames, t1 == null ? T.JSArrayOfString().of([]) : t1)[$contains](objectStoreName);
              }, T.VersionChangeEventTovoid())}));
            _exists = (t1$ = db.objectStoreNames, t1$ == null ? T.JSArrayOfString().of([]) : t1$)[$contains](objectStoreName);
          }
          return _exists;
        } catch (e) {
          let error = dart.getThrown(e);
          if (core.Object.is(error)) {
            return false;
          } else
            throw e;
        }
      }).bind(this));
    }
    static ['_#new#tearOff']() {
      return new backend_manager.BackendManager.new();
    }
  };
  (backend_manager.BackendManager.new = function() {
    ;
  }).prototype = backend_manager.BackendManager.prototype;
  dart.addTypeTests(backend_manager.BackendManager);
  dart.addTypeCaches(backend_manager.BackendManager);
  backend_manager.BackendManager[dart.implements] = () => [storage_backend.BackendManagerInterface];
  dart.setMethodSignature(backend_manager.BackendManager, () => ({
    __proto__: dart.getMethods(backend_manager.BackendManager.__proto__),
    open: dart.fnType(async.Future$(storage_backend.StorageBackend), [core.String, dart.nullable(core.String), core.bool, dart.nullable(hive.HiveCipher), dart.nullable(core.String)]),
    deleteBox: dart.fnType(async.Future$(dart.void), [core.String, dart.nullable(core.String), dart.nullable(core.String)]),
    boxExists: dart.fnType(async.Future$(core.bool), [core.String, dart.nullable(core.String), dart.nullable(core.String)])
  }));
  dart.setGetterSignature(backend_manager.BackendManager, () => ({
    __proto__: dart.getGetters(backend_manager.BackendManager.__proto__),
    indexedDB: dart.nullable(indexed_db.IdbFactory)
  }));
  dart.setLibraryUri(backend_manager.BackendManager, I[14]);
  backend_manager$.BackendManager = class BackendManager extends core.Object {
    static select(backendPreference = null) {
      switch (backendPreference) {
        default:
          {
            return new backend_manager.BackendManager.new();
          }
      }
    }
  };
  (backend_manager$.BackendManager.__ = function() {
    ;
  }).prototype = backend_manager$.BackendManager.prototype;
  dart.addTypeTests(backend_manager$.BackendManager);
  dart.addTypeCaches(backend_manager$.BackendManager);
  dart.setStaticMethodSignature(backend_manager$.BackendManager, () => ['select']);
  dart.setLibraryUri(backend_manager$.BackendManager, I[15]);
  const _is__NullBoxBase_default = Symbol('_is__NullBoxBase_default');
  box_base_impl._NullBoxBase$ = dart.generic(E => {
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    var __t$MapOfdynamic$E = () => (__t$MapOfdynamic$E = dart.constFn(core.Map$(dart.dynamic, E)))();
    class _NullBoxBase extends core.Object {
      add(value) {
        E.as(value);
        return dart.throw(new core.UnimplementedError.new());
      }
      addAll(values) {
        __t$IterableOfE().as(values);
        return dart.throw(new core.UnimplementedError.new());
      }
      clear() {
        return dart.throw(new core.UnimplementedError.new());
      }
      close() {
        return dart.throw(new core.UnimplementedError.new());
      }
      compact() {
        return dart.throw(new core.UnimplementedError.new());
      }
      containsKey(key) {
        return dart.throw(new core.UnimplementedError.new());
      }
      delete(key) {
        return dart.throw(new core.UnimplementedError.new());
      }
      deleteAll(keys) {
        return dart.throw(new core.UnimplementedError.new());
      }
      deleteAt(index) {
        return dart.throw(new core.UnimplementedError.new());
      }
      deleteFromDisk() {
        return dart.throw(new core.UnimplementedError.new());
      }
      get isEmpty() {
        return dart.throw(new core.UnimplementedError.new());
      }
      get isNotEmpty() {
        return dart.throw(new core.UnimplementedError.new());
      }
      get isOpen() {
        return dart.throw(new core.UnimplementedError.new());
      }
      keyAt(index) {
        return dart.throw(new core.UnimplementedError.new());
      }
      get keys() {
        return dart.throw(new core.UnimplementedError.new());
      }
      get lazy() {
        return dart.throw(new core.UnimplementedError.new());
      }
      get length() {
        return dart.throw(new core.UnimplementedError.new());
      }
      get name() {
        return dart.throw(new core.UnimplementedError.new());
      }
      get path() {
        return dart.throw(new core.UnimplementedError.new());
      }
      put(key, value) {
        E.as(value);
        return dart.throw(new core.UnimplementedError.new());
      }
      putAll(entries) {
        __t$MapOfdynamic$E().as(entries);
        return dart.throw(new core.UnimplementedError.new());
      }
      putAt(index, value) {
        E.as(value);
        return dart.throw(new core.UnimplementedError.new());
      }
      watch(opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        return dart.throw(new core.UnimplementedError.new());
      }
      flush() {
        return dart.throw(new core.UnimplementedError.new());
      }
      static ['_#new#tearOff'](E) {
        return new (box_base_impl._NullBoxBase$(E)).new();
      }
    }
    (_NullBoxBase.new = function() {
      ;
    }).prototype = _NullBoxBase.prototype;
    dart.addTypeTests(_NullBoxBase);
    _NullBoxBase.prototype[_is__NullBoxBase_default] = true;
    dart.addTypeCaches(_NullBoxBase);
    _NullBoxBase[dart.implements] = () => [hive.BoxBase$(E)];
    dart.setMethodSignature(_NullBoxBase, () => ({
      __proto__: dart.getMethods(_NullBoxBase.__proto__),
      add: dart.fnType(dart.Never, [dart.nullable(core.Object)]),
      addAll: dart.fnType(dart.Never, [dart.nullable(core.Object)]),
      clear: dart.fnType(dart.Never, []),
      close: dart.fnType(dart.Never, []),
      compact: dart.fnType(dart.Never, []),
      containsKey: dart.fnType(dart.Never, [dart.dynamic]),
      delete: dart.fnType(dart.Never, [dart.dynamic]),
      deleteAll: dart.fnType(dart.Never, [core.Iterable]),
      deleteAt: dart.fnType(dart.Never, [core.int]),
      deleteFromDisk: dart.fnType(dart.Never, []),
      keyAt: dart.fnType(dart.Never, [core.int]),
      put: dart.fnType(dart.Never, [dart.dynamic, dart.nullable(core.Object)]),
      putAll: dart.fnType(dart.Never, [dart.nullable(core.Object)]),
      putAt: dart.fnType(dart.Never, [core.int, dart.nullable(core.Object)]),
      watch: dart.fnType(dart.Never, [], {key: dart.dynamic}, {}),
      flush: dart.fnType(dart.Never, [])
    }));
    dart.setGetterSignature(_NullBoxBase, () => ({
      __proto__: dart.getGetters(_NullBoxBase.__proto__),
      isEmpty: dart.Never,
      isNotEmpty: dart.Never,
      isOpen: dart.Never,
      keys: dart.Never,
      lazy: dart.Never,
      length: dart.Never,
      name: dart.Never,
      path: dart.Never
    }));
    dart.setLibraryUri(_NullBoxBase, I[2]);
    return _NullBoxBase;
  });
  box_base_impl._NullBoxBase = box_base_impl._NullBoxBase$();
  dart.addTypeTests(box_base_impl._NullBoxBase, _is__NullBoxBase_default);
  const _is_HiveCollectionMixin_default = Symbol('_is_HiveCollectionMixin_default');
  hive_collection_mixin.HiveCollectionMixin$ = dart.generic(E => {
    var __t$LinkedMapOfdynamic$E = () => (__t$LinkedMapOfdynamic$E = dart.constFn(_js_helper.LinkedMap$(dart.dynamic, E)))();
    class HiveCollectionMixin extends core.Object {
      get keys() {
        return new _js_helper.SyncIterable.new((function* keys() {
          for (let value of this) {
            yield value.key;
          }
        }).bind(this));
      }
      deleteAllFromHive() {
        return this.box.deleteAll(this.keys);
      }
      deleteFirstFromHive() {
        return this[$first].delete();
      }
      deleteLastFromHive() {
        return this[$last].delete();
      }
      deleteFromHive(index) {
        return this[$_get](index).delete();
      }
      toMap() {
        let map = new (__t$LinkedMapOfdynamic$E()).new();
        for (let item of this) {
          map[$_set](item.key, item);
        }
        return map;
      }
      [Symbol.iterator]() {
        return new dart.JsIterator(this[$iterator]);
      }
    }
    (HiveCollectionMixin.new = function() {
      ;
    }).prototype = HiveCollectionMixin.prototype;
    dart.addTypeTests(HiveCollectionMixin);
    HiveCollectionMixin.prototype[_is_HiveCollectionMixin_default] = true;
    dart.addTypeCaches(HiveCollectionMixin);
    HiveCollectionMixin[dart.implements] = () => [hive.HiveCollection$(E)];
    dart.setMethodSignature(HiveCollectionMixin, () => ({
      __proto__: dart.getMethods(HiveCollectionMixin.__proto__),
      deleteAllFromHive: dart.fnType(async.Future$(dart.void), []),
      deleteFirstFromHive: dart.fnType(async.Future$(dart.void), []),
      deleteLastFromHive: dart.fnType(async.Future$(dart.void), []),
      deleteFromHive: dart.fnType(async.Future$(dart.void), [core.int]),
      toMap: dart.fnType(core.Map$(dart.dynamic, E), [])
    }));
    dart.setGetterSignature(HiveCollectionMixin, () => ({
      __proto__: dart.getGetters(HiveCollectionMixin.__proto__),
      keys: core.Iterable
    }));
    dart.setLibraryUri(HiveCollectionMixin, I[16]);
    return HiveCollectionMixin;
  });
  hive_collection_mixin.HiveCollectionMixin = hive_collection_mixin.HiveCollectionMixin$();
  dart.addTypeTests(hive_collection_mixin.HiveCollectionMixin, _is_HiveCollectionMixin_default);
  var boxName$ = dart.privateName(hive_list_impl, "HiveListImpl.boxName");
  var _hive = dart.privateName(hive_list_impl, "_hive");
  var _invalidated = dart.privateName(hive_list_impl, "_invalidated");
  var _disposed = dart.privateName(hive_list_impl, "_disposed");
  var _keys = dart.privateName(hive_list_impl, "_keys");
  var _delegate = dart.privateName(hive_list_impl, "_delegate");
  var _box = dart.privateName(hive_list_impl, "_box");
  var _checkElementIsValid = dart.privateName(hive_list_impl, "_checkElementIsValid");
  const _is_HiveListImpl_default = Symbol('_is_HiveListImpl_default');
  hive_list_impl.HiveListImpl$ = dart.generic(E => {
    var __t$JSArrayOfE = () => (__t$JSArrayOfE = dart.constFn(_interceptors.JSArray$(E)))();
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    const Object_HiveCollectionMixin$36 = class Object_HiveCollectionMixin extends core.Object {};
    (Object_HiveCollectionMixin$36.new = function() {
    }).prototype = Object_HiveCollectionMixin$36.prototype;
    dart.applyMixin(Object_HiveCollectionMixin$36, hive_collection_mixin.HiveCollectionMixin$(E));
    const Object_ListMixin$36 = class Object_ListMixin extends Object_HiveCollectionMixin$36 {};
    (Object_ListMixin$36.new = function() {
    }).prototype = Object_ListMixin$36.prototype;
    dart.applyMixin(Object_ListMixin$36, collection.ListMixin$(E));
    const Object_DelegatingListViewMixin$36 = class Object_DelegatingListViewMixin extends Object_ListMixin$36 {};
    (Object_DelegatingListViewMixin$36.new = function() {
    }).prototype = Object_DelegatingListViewMixin$36.prototype;
    dart.applyMixin(Object_DelegatingListViewMixin$36, delegating_list_view_mixin.DelegatingListViewMixin$(E));
    class HiveListImpl extends Object_DelegatingListViewMixin$36 {
      get boxName() {
        return this[boxName$];
      }
      set boxName(value) {
        super.boxName = value;
      }
      static ['_#new#tearOff'](E, box, opts) {
        let objects = opts && 'objects' in opts ? opts.objects : null;
        return new (hive_list_impl.HiveListImpl$(E)).new(box, {objects: objects});
      }
      static ['_#lazy#tearOff'](E, boxName, keys) {
        return new (hive_list_impl.HiveListImpl$(E)).lazy(boxName, keys);
      }
      get keys() {
        if (this[_delegate] == null) {
          return dart.nullCheck(this[_keys]);
        } else {
          return super.keys;
        }
      }
      get box() {
        if (this[_box] == null) {
          let box = hive_impl.HiveImpl.as(this[_hive]).getBoxWithoutCheckInternal(this.boxName);
          if (box == null) {
            dart.throw(new hive.HiveError.new("To use this list, you have to open the box \"" + this.boxName + "\" first."));
          } else if (!hive.Box.is(box)) {
            dart.throw(new hive.HiveError.new("The box \"" + this.boxName + "\" is a lazy box. " + "You can only use HiveLists with normal boxes."));
          } else {
            this[_box] = box;
          }
        }
        return dart.nullCheck(this[_box]);
      }
      get delegate() {
        if (this[_disposed]) {
          dart.throw(new hive.HiveError.new("HiveList has already been disposed."));
        }
        if (this[_invalidated]) {
          let retained = __t$JSArrayOfE().of([]);
          for (let obj of dart.nullCheck(this[_delegate])) {
            if (hive_object['HiveObjectInternal|isInHiveList'](obj, this)) {
              retained[$add](obj);
            }
          }
          this[_delegate] = retained;
          this[_invalidated] = false;
        } else if (this[_delegate] == null) {
          let list = __t$JSArrayOfE().of([]);
          for (let key of dart.nullCheck(this[_keys])) {
            if (this.box.containsKey(key)) {
              let obj = E.as(this.box.get(key));
              hive_object['HiveObjectInternal|linkHiveList'](obj, this);
              list[$add](obj);
            }
          }
          this[_delegate] = list;
        }
        return dart.nullCheck(this[_delegate]);
      }
      dispose() {
        if (this[_delegate] != null) {
          for (let element of dart.nullCheck(this[_delegate])) {
            hive_object['HiveObjectInternal|unlinkHiveList'](element, this);
          }
          this[_delegate] = null;
        }
        this[_disposed] = true;
      }
      invalidate() {
        if (this[_delegate] != null) {
          this[_invalidated] = true;
        }
      }
      [_checkElementIsValid](obj) {
        if (!dart.equals(obj.box, this.box)) {
          dart.throw(new hive.HiveError.new("HiveObjects needs to be in the box \"" + this.boxName + "\"."));
        }
      }
      set length(newLength) {
        if (newLength < this.delegate[$length]) {
          for (let i = newLength; i < this.delegate[$length]; i = i + 1) {
            hive_object['HiveObjectInternal|unlinkHiveList'](this.delegate[$_get](i), this);
          }
        }
        this.delegate[$length] = newLength;
      }
      get length() {
        return super.length;
      }
      _set(index, value$) {
        let value = value$;
        E.as(value);
        this[_checkElementIsValid](value);
        hive_object['HiveObjectInternal|linkHiveList'](value, this);
        let oldValue = this.delegate[$_get](index);
        this.delegate[$_set](index, value);
        hive_object['HiveObjectInternal|unlinkHiveList'](oldValue, this);
        return value$;
      }
      add(element) {
        E.as(element);
        this[_checkElementIsValid](element);
        hive_object['HiveObjectInternal|linkHiveList'](element, this);
        this.delegate[$add](element);
      }
      addAll(iterable) {
        __t$IterableOfE().as(iterable);
        for (let element of iterable) {
          this[_checkElementIsValid](element);
          hive_object['HiveObjectInternal|linkHiveList'](element, this);
        }
        this.delegate[$addAll](iterable);
      }
      castHiveList(T) {
        if (this[_delegate] != null) {
          return new (hive_list_impl.HiveListImpl$(T)).new(this.box, {objects: dart.nullCheck(this[_delegate])[$cast](T)});
        } else {
          return new (hive_list_impl.HiveListImpl$(T)).lazy(this.boxName, this[_keys]);
        }
      }
      set debugHive(hive) {
        return this[_hive] = hive;
      }
    }
    (HiveListImpl.new = function(box, opts) {
      let objects = opts && 'objects' in opts ? opts.objects : null;
      this[_hive] = hive.Hive;
      this[_invalidated] = false;
      this[_disposed] = false;
      this[boxName$] = box.name;
      this[_keys] = null;
      this[_delegate] = __t$JSArrayOfE().of([]);
      this[_box] = box;
      if (objects != null) {
        this.addAll(objects);
      }
    }).prototype = HiveListImpl.prototype;
    (HiveListImpl.lazy = function(boxName, keys) {
      this[_hive] = hive.Hive;
      this[_invalidated] = false;
      this[_disposed] = false;
      this[_box] = null;
      this[_delegate] = null;
      this[boxName$] = boxName;
      this[_keys] = keys;
      ;
    }).prototype = HiveListImpl.prototype;
    dart.addTypeTests(HiveListImpl);
    HiveListImpl.prototype[_is_HiveListImpl_default] = true;
    dart.addTypeCaches(HiveListImpl);
    HiveListImpl[dart.implements] = () => [hive.HiveList$(E)];
    dart.setMethodSignature(HiveListImpl, () => ({
      __proto__: dart.getMethods(HiveListImpl.__proto__),
      dispose: dart.fnType(dart.void, []),
      invalidate: dart.fnType(dart.void, []),
      [_checkElementIsValid]: dart.fnType(dart.void, [E]),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      castHiveList: dart.gFnType(T => [hive.HiveList$(T), []], T => [hive_object.HiveObjectMixin])
    }));
    dart.setGetterSignature(HiveListImpl, () => ({
      __proto__: dart.getGetters(HiveListImpl.__proto__),
      box: hive.Box,
      delegate: core.List$(E)
    }));
    dart.setSetterSignature(HiveListImpl, () => ({
      __proto__: dart.getSetters(HiveListImpl.__proto__),
      length: core.int,
      [$length]: core.int,
      debugHive: hive.HiveInterface
    }));
    dart.setLibraryUri(HiveListImpl, I[17]);
    dart.setFieldSignature(HiveListImpl, () => ({
      __proto__: dart.getFields(HiveListImpl.__proto__),
      boxName: dart.finalFieldType(core.String),
      [_keys]: dart.finalFieldType(dart.nullable(core.List)),
      [_hive]: dart.fieldType(hive.HiveInterface),
      [_delegate]: dart.fieldType(dart.nullable(core.List$(E))),
      [_box]: dart.fieldType(dart.nullable(hive.Box)),
      [_invalidated]: dart.fieldType(core.bool),
      [_disposed]: dart.fieldType(core.bool)
    }));
    dart.defineExtensionMethods(HiveListImpl, ['_set', 'add', 'addAll']);
    dart.defineExtensionAccessors(HiveListImpl, ['length']);
    return HiveListImpl;
  });
  hive_list_impl.HiveListImpl = hive_list_impl.HiveListImpl$();
  dart.addTypeTests(hive_list_impl.HiveListImpl, _is_HiveListImpl_default);
  var _box$ = dart.privateName(hive_object, "HiveObjectMixin._box");
  var _key = dart.privateName(hive_object, "HiveObjectMixin._key");
  var _hiveLists = dart.privateName(hive_object, "HiveObjectMixin._hiveLists");
  var _box$0 = dart.privateName(hive_object, "_box");
  var _key$ = dart.privateName(hive_object, "_key");
  var _hiveLists$ = dart.privateName(hive_object, "_hiveLists");
  var _requireInitialized = dart.privateName(hive_object, "_requireInitialized");
  hive_object.HiveObjectMixin = class HiveObjectMixin extends core.Object {};
  hive_object.HiveObjectMixin[dart.mixinOn] = Object => class HiveObjectMixin extends Object {
    get [_box$0]() {
      return this[_box$];
    }
    set [_box$0](value) {
      this[_box$] = value;
    }
    get [_key$]() {
      return this[_key];
    }
    set [_key$](value) {
      this[_key] = value;
    }
    get [_hiveLists$]() {
      return this[_hiveLists];
    }
    set [_hiveLists$](value) {
      super[_hiveLists$] = value;
    }
    get box() {
      return this[_box$0];
    }
    get key() {
      return this[_key$];
    }
    [_requireInitialized]() {
      if (this[_box$0] == null) {
        dart.throw(new hive.HiveError.new("This object is currently not in a box."));
      }
    }
    save() {
      this[_requireInitialized]();
      return dart.nullCheck(this[_box$0]).put(this[_key$], this);
    }
    delete() {
      this[_requireInitialized]();
      return dart.nullCheck(this[_box$0]).delete(this[_key$]);
    }
    get isInBox() {
      if (this[_box$0] != null) {
        if (dart.nullCheck(this[_box$0]).lazy) {
          return dart.nullCheck(this[_box$0]).containsKey(this[_key$]);
        } else {
          return true;
        }
      }
      return false;
    }
  };
  (hive_object.HiveObjectMixin[dart.mixinNew] = function() {
    this[_box$] = null;
    this[_key] = null;
    this[_hiveLists] = new (T.LinkedMapOfHiveListOfHiveObjectMixin$int()).new();
  }).prototype = hive_object.HiveObjectMixin.prototype;
  dart.addTypeTests(hive_object.HiveObjectMixin);
  dart.addTypeCaches(hive_object.HiveObjectMixin);
  hive_object.HiveObjectMixin[dart.implements] = () => [core.Object];
  dart.setMethodSignature(hive_object.HiveObjectMixin, () => ({
    __proto__: dart.getMethods(hive_object.HiveObjectMixin.__proto__),
    [_requireInitialized]: dart.fnType(dart.void, []),
    save: dart.fnType(async.Future$(dart.void), []),
    delete: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setGetterSignature(hive_object.HiveObjectMixin, () => ({
    __proto__: dart.getGetters(hive_object.HiveObjectMixin.__proto__),
    box: dart.nullable(hive.BoxBase),
    key: dart.dynamic,
    isInBox: core.bool
  }));
  dart.setLibraryUri(hive_object.HiveObjectMixin, I[18]);
  dart.setFieldSignature(hive_object.HiveObjectMixin, () => ({
    __proto__: dart.getFields(hive_object.HiveObjectMixin.__proto__),
    [_box$0]: dart.fieldType(dart.nullable(hive.BoxBase)),
    [_key$]: dart.fieldType(dart.dynamic),
    [_hiveLists$]: dart.finalFieldType(core.Map$(hive.HiveList$(hive_object.HiveObjectMixin), core.int))
  }));
  const Object_HiveObjectMixin$36 = class Object_HiveObjectMixin extends core.Object {};
  (Object_HiveObjectMixin$36.new = function() {
    hive_object.HiveObjectMixin[dart.mixinNew].call(this);
  }).prototype = Object_HiveObjectMixin$36.prototype;
  dart.applyMixin(Object_HiveObjectMixin$36, hive_object.HiveObjectMixin);
  hive_object.HiveObject = class HiveObject extends Object_HiveObjectMixin$36 {};
  (hive_object.HiveObject.new = function() {
    hive_object.HiveObject.__proto__.new.call(this);
    ;
  }).prototype = hive_object.HiveObject.prototype;
  dart.addTypeTests(hive_object.HiveObject);
  dart.addTypeCaches(hive_object.HiveObject);
  dart.setLibraryUri(hive_object.HiveObject, I[18]);
  hive_object['HiveObjectInternal|init'] = function HiveObjectInternal$124init($this, key, box) {
    if ($this[_box$0] != null) {
      if (!dart.equals($this[_box$0], box)) {
        dart.throw(new hive.HiveError.new("The same instance of an HiveObject cannot " + "be stored in two different boxes."));
      } else if (!dart.equals($this[_key$], key)) {
        dart.throw(new hive.HiveError.new("The same instance of an HiveObject cannot " + "be stored with two different keys (\"" + dart.str($this[_key$]) + "\" and \"" + dart.str(key) + "\")."));
      }
    }
    $this[_box$0] = box;
    $this[_key$] = key;
  };
  hive_object['HiveObjectInternal|get#init'] = function HiveObjectInternal$124get$35init($this) {
    return dart.fn((key, box) => hive_object['HiveObjectInternal|init']($this, key, box), T.dynamicAndBoxBaseTovoid());
  };
  hive_object['HiveObjectInternal|dispose'] = function HiveObjectInternal$124dispose($this) {
    for (let list of $this[_hiveLists$][$keys]) {
      T.HiveListImplOfHiveObjectMixin().as(list).invalidate();
    }
    $this[_hiveLists$][$clear]();
    $this[_box$0] = null;
    $this[_key$] = null;
  };
  hive_object['HiveObjectInternal|get#dispose'] = function HiveObjectInternal$124get$35dispose($this) {
    return dart.fn(() => hive_object['HiveObjectInternal|dispose']($this), T.VoidTovoid());
  };
  hive_object['HiveObjectInternal|linkHiveList'] = function HiveObjectInternal$124linkHiveList($this, list) {
    let t7;
    $this[_requireInitialized]();
    $this[_hiveLists$][$_set](list, dart.notNull((t7 = $this[_hiveLists$][$_get](list), t7 == null ? 0 : t7)) + 1);
  };
  hive_object['HiveObjectInternal|get#linkHiveList'] = function HiveObjectInternal$124get$35linkHiveList($this) {
    return dart.fn(list => hive_object['HiveObjectInternal|linkHiveList']($this, list), T.HiveListOfHiveObjectMixinTovoid());
  };
  hive_object['HiveObjectInternal|unlinkHiveList'] = function HiveObjectInternal$124unlinkHiveList($this, list) {
    let t11, t10, t9;
    let currentIndex = dart.nullCheck($this[_hiveLists$][$_get](list));
    let newIndex = (t9 = $this[_hiveLists$], t10 = list, t11 = currentIndex - 1, t9[$_set](t10, t11), t11);
    if (newIndex <= 0) {
      $this[_hiveLists$][$remove](list);
    }
  };
  hive_object['HiveObjectInternal|get#unlinkHiveList'] = function HiveObjectInternal$124get$35unlinkHiveList($this) {
    return dart.fn(list => hive_object['HiveObjectInternal|unlinkHiveList']($this, list), T.HiveListOfHiveObjectMixinTovoid());
  };
  hive_object['HiveObjectInternal|isInHiveList'] = function HiveObjectInternal$124isInHiveList($this, list) {
    return $this[_hiveLists$][$containsKey](list);
  };
  hive_object['HiveObjectInternal|get#isInHiveList'] = function HiveObjectInternal$124get$35isInHiveList($this) {
    return dart.fn(list => hive_object['HiveObjectInternal|isInHiveList']($this, list), T.HiveListOfHiveObjectMixinTobool());
  };
  hive_object['HiveObjectInternal|get#debugHiveLists'] = function HiveObjectInternal$124get$35debugHiveLists($this) {
    return $this[_hiveLists$];
  };
  var _streamController$ = dart.privateName(change_notifier, "_streamController");
  change_notifier.ChangeNotifier = class ChangeNotifier extends core.Object {
    static ['_#new#tearOff']() {
      return new change_notifier.ChangeNotifier.new();
    }
    static ['_#debug#tearOff'](_streamController) {
      return new change_notifier.ChangeNotifier.debug(_streamController);
    }
    notify(frame) {
      this[_streamController$].add(new hive.BoxEvent.new(frame.key, frame.value, frame.deleted));
    }
    watch(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      if (key != null) {
        return this[_streamController$].stream.where(dart.fn(it => dart.equals(it.key, key), T.BoxEventTobool()));
      } else {
        return this[_streamController$].stream;
      }
    }
    close() {
      return this[_streamController$].close();
    }
  };
  (change_notifier.ChangeNotifier.new = function() {
    this[_streamController$] = T.StreamControllerOfBoxEvent().broadcast();
    ;
  }).prototype = change_notifier.ChangeNotifier.prototype;
  (change_notifier.ChangeNotifier.debug = function(_streamController) {
    this[_streamController$] = _streamController;
    ;
  }).prototype = change_notifier.ChangeNotifier.prototype;
  dart.addTypeTests(change_notifier.ChangeNotifier);
  dart.addTypeCaches(change_notifier.ChangeNotifier);
  dart.setMethodSignature(change_notifier.ChangeNotifier, () => ({
    __proto__: dart.getMethods(change_notifier.ChangeNotifier.__proto__),
    notify: dart.fnType(dart.void, [frame$.Frame]),
    watch: dart.fnType(async.Stream$(hive.BoxEvent), [], {key: dart.dynamic}, {}),
    close: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setLibraryUri(change_notifier.ChangeNotifier, I[19]);
  dart.setFieldSignature(change_notifier.ChangeNotifier, () => ({
    __proto__: dart.getFields(change_notifier.ChangeNotifier.__proto__),
    [_streamController$]: dart.finalFieldType(async.StreamController$(hive.BoxEvent))
  }));
  var added = dart.privateName(keystore$, "KeyTransaction.added");
  var deleted = dart.privateName(keystore$, "KeyTransaction.deleted");
  const _is_KeyTransaction_default = Symbol('_is_KeyTransaction_default');
  keystore$.KeyTransaction$ = dart.generic(E => {
    class KeyTransaction extends core.Object {
      get added() {
        return this[added];
      }
      set added(value) {
        super.added = value;
      }
      get deleted() {
        return this[deleted];
      }
      set deleted(value) {
        super.deleted = value;
      }
      static ['_#new#tearOff'](E) {
        return new (keystore$.KeyTransaction$(E)).new();
      }
    }
    (KeyTransaction.new = function() {
      this[added] = [];
      this[deleted] = new (T.LinkedMapOfdynamic$Frame()).new();
      ;
    }).prototype = KeyTransaction.prototype;
    dart.addTypeTests(KeyTransaction);
    KeyTransaction.prototype[_is_KeyTransaction_default] = true;
    dart.addTypeCaches(KeyTransaction);
    dart.setLibraryUri(KeyTransaction, I[20]);
    dart.setFieldSignature(KeyTransaction, () => ({
      __proto__: dart.getFields(KeyTransaction.__proto__),
      added: dart.finalFieldType(core.List),
      deleted: dart.finalFieldType(core.Map$(dart.dynamic, frame$.Frame))
    }));
    return KeyTransaction;
  });
  keystore$.KeyTransaction = keystore$.KeyTransaction$();
  dart.addTypeTests(keystore$.KeyTransaction, _is_KeyTransaction_default);
  var transactions = dart.privateName(keystore$, "Keystore.transactions");
  var _deletedEntries = dart.privateName(keystore$, "_deletedEntries");
  var _autoIncrement = dart.privateName(keystore$, "_autoIncrement");
  var _box$1 = dart.privateName(keystore$, "_box");
  var _notifier$ = dart.privateName(keystore$, "_notifier");
  var _store = dart.privateName(keystore$, "_store");
  const _is_Keystore_default = Symbol('_is_Keystore_default');
  keystore$.Keystore$ = dart.generic(E => {
    var __t$KeyTransactionOfE = () => (__t$KeyTransactionOfE = dart.constFn(keystore$.KeyTransaction$(E)))();
    var __t$ListQueueOfKeyTransactionOfE = () => (__t$ListQueueOfKeyTransactionOfE = dart.constFn(collection.ListQueue$(__t$KeyTransactionOfE())))();
    var __t$FrameToE = () => (__t$FrameToE = dart.constFn(dart.fnType(E, [frame$.Frame])))();
    var __t$SyncIterableOfE = () => (__t$SyncIterableOfE = dart.constFn(_js_helper.SyncIterable$(E)))();
    class Keystore extends core.Object {
      get transactions() {
        return this[transactions];
      }
      set transactions(value) {
        super.transactions = value;
      }
      static ['_#new#tearOff'](E, _box, _notifier, keyComparator) {
        return new (keystore$.Keystore$(E)).new(_box, _notifier, keyComparator);
      }
      static debug(opts) {
        let t13, t13$;
        let frames = opts && 'frames' in opts ? opts.frames : C[5] || CT.C5;
        let box = opts && 'box' in opts ? opts.box : null;
        let notifier = opts && 'notifier' in opts ? opts.notifier : null;
        let keyComparator = opts && 'keyComparator' in opts ? opts.keyComparator : C[4] || CT.C4;
        let keystore = new (keystore$.Keystore$(E)).new((t13 = box, t13 == null ? box_base_impl.BoxBaseImpl.nullImpl(E) : t13), (t13$ = notifier, t13$ == null ? new change_notifier.ChangeNotifier.new() : t13$), keyComparator);
        for (let frame of frames) {
          keystore.insert(frame);
        }
        return keystore;
      }
      static ['_#debug#tearOff'](E, opts) {
        let frames = opts && 'frames' in opts ? opts.frames : C[5] || CT.C5;
        let box = opts && 'box' in opts ? opts.box : null;
        let notifier = opts && 'notifier' in opts ? opts.notifier : null;
        let keyComparator = opts && 'keyComparator' in opts ? opts.keyComparator : C[4] || CT.C4;
        return keystore$.Keystore$(E).debug({frames: frames, box: box, notifier: notifier, keyComparator: keyComparator});
      }
      get deletedEntries() {
        return this[_deletedEntries];
      }
      get length() {
        return this[_store].length;
      }
      get frames() {
        return this[_store].values;
      }
      resetDeletedEntries() {
        this[_deletedEntries] = 0;
      }
      autoIncrement() {
        return this[_autoIncrement] = this[_autoIncrement] + 1;
      }
      updateAutoIncrement(key) {
        if (key > this[_autoIncrement]) {
          this[_autoIncrement] = key;
        }
      }
      containsKey(key) {
        return this[_store].get(key) != null;
      }
      keyAt(index) {
        return this[_store].getKeyAt(index);
      }
      get(key) {
        return this[_store].get(key);
      }
      getAt(index) {
        return this[_store].getAt(index);
      }
      getKeys() {
        return this[_store].keys;
      }
      getValues() {
        return this[_store].values[$map](E, dart.fn(e => E.as(e.value), __t$FrameToE()));
      }
      getValuesBetween(startKey = null, endKey = null) {
        return new (__t$SyncIterableOfE()).new((function* getValuesBetween() {
          let iterable = null;
          if (startKey != null) {
            iterable = this[_store].valuesFromKey(startKey);
          } else {
            iterable = this[_store].values;
          }
          for (let frame of iterable) {
            yield E.as(frame.value);
            if (dart.equals(frame.key, endKey)) break;
          }
        }).bind(this));
      }
      watch(opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        return this[_notifier$].watch({key: key});
      }
      insert(frame, opts) {
        let notify = opts && 'notify' in opts ? opts.notify : true;
        let lazy = opts && 'lazy' in opts ? opts.lazy : false;
        let value = frame.value;
        let deletedFrame = null;
        if (!frame.deleted) {
          let key = frame.key;
          if (core.int.is(key) && dart.notNull(key) > this[_autoIncrement]) {
            this[_autoIncrement] = key;
          }
          if (hive_object.HiveObjectMixin.is(value)) {
            hive_object['HiveObjectInternal|init'](value, key, this[_box$1]);
          }
          deletedFrame = this[_store].insert(key, lazy ? frame.toLazy() : frame);
        } else {
          deletedFrame = this[_store].delete(frame.key);
        }
        if (deletedFrame != null) {
          this[_deletedEntries] = this[_deletedEntries] + 1;
          if (hive_object.HiveObjectMixin.is(deletedFrame.value) && !core.identical(deletedFrame.value, value)) {
            hive_object['HiveObjectInternal|dispose'](hive_object.HiveObjectMixin.as(deletedFrame.value));
          }
        }
        if (notify && (!frame.deleted || deletedFrame != null)) {
          this[_notifier$].notify(frame);
        }
        return deletedFrame;
      }
      beginTransaction(newFrames) {
        let transaction = new (__t$KeyTransactionOfE()).new();
        for (let frame of newFrames) {
          if (!frame.deleted) {
            transaction.added[$add](frame.key);
          }
          let deletedFrame = this.insert(frame);
          if (deletedFrame != null) {
            transaction.deleted[$_set](frame.key, deletedFrame);
          }
        }
        if (transaction.added[$isNotEmpty] || transaction.deleted[$isNotEmpty]) {
          this.transactions.add(transaction);
          return true;
        } else {
          return false;
        }
      }
      commitTransaction() {
        this.transactions.removeFirst();
      }
      cancelTransaction() {
        let canceled = this.transactions.removeFirst();
        L0:
          for (let key of canceled.deleted[$keys]) {
            let deletedFrame = canceled.deleted[$_get](key);
            for (let t of this.transactions) {
              if (t.deleted[$containsKey](key)) {
                t.deleted[$_set](key, dart.nullCheck(deletedFrame));
                continue L0;
              }
              if (t.added[$contains](key)) {
                t.deleted[$_set](key, dart.nullCheck(deletedFrame));
                continue L0;
              }
            }
            this[_store].insert(key, deletedFrame);
            this[_notifier$].notify(dart.nullCheck(deletedFrame));
          }
        L1:
          for (let key of canceled.added) {
            let isOverride = canceled.deleted[$containsKey](key);
            for (let t of this.transactions) {
              if (t.deleted[$containsKey](key)) {
                if (!isOverride) {
                  t.deleted[$remove](key);
                }
                continue L1;
              }
              if (t.added[$contains](key)) {
                continue L1;
              }
            }
            if (!isOverride) {
              this[_store].delete(key);
              this[_notifier$].notify(new frame$.Frame.deleted(key));
            }
          }
      }
      clear() {
        let frameList = this.frames[$toList]();
        this[_store].clear();
        for (let frame of frameList) {
          if (hive_object.HiveObjectMixin.is(frame.value)) {
            hive_object['HiveObjectInternal|dispose'](hive_object.HiveObjectMixin.as(frame.value));
          }
          this[_notifier$].notify(new frame$.Frame.deleted(frame.key));
        }
        this[_deletedEntries] = 0;
        this[_autoIncrement] = -1;
        return frameList[$length];
      }
      close() {
        return this[_notifier$].close();
      }
    }
    (Keystore.new = function(_box, _notifier, keyComparator) {
      let t13;
      this[transactions] = new (__t$ListQueueOfKeyTransactionOfE()).new();
      this[_deletedEntries] = 0;
      this[_autoIncrement] = -1;
      this[_box$1] = _box;
      this[_notifier$] = _notifier;
      this[_store] = new (T.IndexableSkipListOfdynamic$Frame()).new((t13 = keyComparator, t13 == null ? C[4] || CT.C4 : t13));
      ;
    }).prototype = Keystore.prototype;
    dart.addTypeTests(Keystore);
    Keystore.prototype[_is_Keystore_default] = true;
    dart.addTypeCaches(Keystore);
    dart.setMethodSignature(Keystore, () => ({
      __proto__: dart.getMethods(Keystore.__proto__),
      resetDeletedEntries: dart.fnType(dart.void, []),
      autoIncrement: dart.fnType(core.int, []),
      updateAutoIncrement: dart.fnType(dart.void, [core.int]),
      containsKey: dart.fnType(core.bool, [dart.dynamic]),
      keyAt: dart.fnType(dart.dynamic, [core.int]),
      get: dart.fnType(dart.nullable(frame$.Frame), [dart.dynamic]),
      getAt: dart.fnType(dart.nullable(frame$.Frame), [core.int]),
      getKeys: dart.fnType(core.Iterable, []),
      getValues: dart.fnType(core.Iterable$(E), []),
      getValuesBetween: dart.fnType(core.Iterable$(E), [], [dart.dynamic, dart.dynamic]),
      watch: dart.fnType(async.Stream$(hive.BoxEvent), [], {key: dart.dynamic}, {}),
      insert: dart.fnType(dart.nullable(frame$.Frame), [frame$.Frame], {lazy: core.bool, notify: core.bool}, {}),
      beginTransaction: dart.fnType(core.bool, [core.List$(frame$.Frame)]),
      commitTransaction: dart.fnType(dart.void, []),
      cancelTransaction: dart.fnType(dart.void, []),
      clear: dart.fnType(core.int, []),
      close: dart.fnType(async.Future, [])
    }));
    dart.setStaticMethodSignature(Keystore, () => ['debug']);
    dart.setGetterSignature(Keystore, () => ({
      __proto__: dart.getGetters(Keystore.__proto__),
      deletedEntries: core.int,
      length: core.int,
      frames: core.Iterable$(frame$.Frame)
    }));
    dart.setLibraryUri(Keystore, I[20]);
    dart.setFieldSignature(Keystore, () => ({
      __proto__: dart.getFields(Keystore.__proto__),
      [_box$1]: dart.finalFieldType(hive.BoxBase$(E)),
      [_notifier$]: dart.finalFieldType(change_notifier.ChangeNotifier),
      [_store]: dart.finalFieldType(indexable_skip_list.IndexableSkipList$(dart.dynamic, frame$.Frame)),
      transactions: dart.finalFieldType(collection.ListQueue$(keystore$.KeyTransaction$(E))),
      [_deletedEntries]: dart.fieldType(core.int),
      [_autoIncrement]: dart.fieldType(core.int)
    }));
    return Keystore;
  });
  keystore$.Keystore = keystore$.Keystore$();
  dart.addTypeTests(keystore$.Keystore, _is_Keystore_default);
  var key$ = dart.privateName(frame$, "Frame.key");
  var value$ = dart.privateName(frame$, "Frame.value");
  var deleted$ = dart.privateName(frame$, "Frame.deleted");
  var lazy$0 = dart.privateName(frame$, "Frame.lazy");
  var length$ = dart.privateName(frame$, "Frame.length");
  var offset$ = dart.privateName(frame$, "Frame.offset");
  frame$.Frame = class Frame extends core.Object {
    get key() {
      return this[key$];
    }
    set key(value) {
      super.key = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    get deleted() {
      return this[deleted$];
    }
    set deleted(value) {
      super.deleted = value;
    }
    get lazy() {
      return this[lazy$0];
    }
    set lazy(value) {
      super.lazy = value;
    }
    get length() {
      return this[length$];
    }
    set length(value) {
      this[length$] = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      this[offset$] = value;
    }
    static ['_#new#tearOff'](key, value, opts) {
      let length = opts && 'length' in opts ? opts.length : null;
      let offset = opts && 'offset' in opts ? opts.offset : -1;
      return new frame$.Frame.new(key, value, {length: length, offset: offset});
    }
    static ['_#deleted#tearOff'](key, opts) {
      let length = opts && 'length' in opts ? opts.length : null;
      return new frame$.Frame.deleted(key, {length: length});
    }
    static ['_#lazy#tearOff'](key, opts) {
      let length = opts && 'length' in opts ? opts.length : null;
      let offset = opts && 'offset' in opts ? opts.offset : -1;
      return new frame$.Frame.lazy(key, {length: length, offset: offset});
    }
    static assertKey(key) {
      if (core.int.is(key)) {
        if (dart.notNull(key) < 0 || dart.notNull(key) > 4294967295) {
          dart.throw(new hive.HiveError.new("Integer keys need to be in the range 0 - 0xFFFFFFFF"));
        }
      } else if (typeof key == 'string') {
        if (key.length > 255) {
          dart.throw(new hive.HiveError.new("String keys need to be a max length of 255"));
        }
      } else {
        dart.throw(new hive.HiveError.new("Keys need to be Strings or integers"));
      }
      return true;
    }
    toLazy() {
      if (this.deleted) return this;
      return new frame$.Frame.lazy(this.key, {length: this.length, offset: this.offset});
    }
    _equals(other) {
      if (other == null) return false;
      if (frame$.Frame.is(other)) {
        return dart.equals(this.key, other.key) && dart.equals(this.value, other.value) && this.length == other.length && this.deleted === other.deleted;
      } else {
        return false;
      }
    }
    toString() {
      if (this.deleted) {
        return "Frame.deleted(key: " + dart.str(this.key) + ", length: " + dart.str(this.length) + ")";
      } else if (this.lazy) {
        return "Frame.lazy(key: " + dart.str(this.key) + ", length: " + dart.str(this.length) + ", offset: " + dart.str(this.offset) + ")";
      } else {
        return "Frame(key: " + dart.str(this.key) + ", value: " + dart.str(this.value) + ", " + "length: " + dart.str(this.length) + ", offset: " + dart.str(this.offset) + ")";
      }
    }
    get hashCode() {
      return (this[$runtimeType].hashCode ^ dart.hashCode(this.key) ^ dart.hashCode(this.value) ^ dart.hashCode(this.length) ^ this.deleted[$hashCode]) >>> 0;
    }
  };
  (frame$.Frame.new = function(key, value, opts) {
    let length = opts && 'length' in opts ? opts.length : null;
    let offset = opts && 'offset' in opts ? opts.offset : -1;
    this[offset$] = -1;
    this[key$] = key;
    this[value$] = value;
    this[length$] = length;
    this[offset$] = offset;
    this[lazy$0] = false;
    this[deleted$] = false;
    if (!frame$.Frame.assertKey(this.key)) dart.assertFailed(null, I[21], 27, 12, "assertKey(key)");
  }).prototype = frame$.Frame.prototype;
  (frame$.Frame.deleted = function(key, opts) {
    let length = opts && 'length' in opts ? opts.length : null;
    this[offset$] = -1;
    this[key$] = key;
    this[length$] = length;
    this[value$] = null;
    this[lazy$0] = false;
    this[deleted$] = true;
    this[offset$] = -1;
    if (!frame$.Frame.assertKey(this.key)) dart.assertFailed(null, I[21], 36, 12, "assertKey(key)");
  }).prototype = frame$.Frame.prototype;
  (frame$.Frame.lazy = function(key, opts) {
    let length = opts && 'length' in opts ? opts.length : null;
    let offset = opts && 'offset' in opts ? opts.offset : -1;
    this[offset$] = -1;
    this[key$] = key;
    this[length$] = length;
    this[offset$] = offset;
    this[value$] = null;
    this[lazy$0] = true;
    this[deleted$] = false;
    if (!frame$.Frame.assertKey(this.key)) dart.assertFailed(null, I[21], 44, 12, "assertKey(key)");
  }).prototype = frame$.Frame.prototype;
  dart.addTypeTests(frame$.Frame);
  dart.addTypeCaches(frame$.Frame);
  dart.setMethodSignature(frame$.Frame, () => ({
    __proto__: dart.getMethods(frame$.Frame.__proto__),
    toLazy: dart.fnType(frame$.Frame, []),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setStaticMethodSignature(frame$.Frame, () => ['assertKey']);
  dart.setLibraryUri(frame$.Frame, I[22]);
  dart.setFieldSignature(frame$.Frame, () => ({
    __proto__: dart.getFields(frame$.Frame.__proto__),
    key: dart.finalFieldType(dart.dynamic),
    value: dart.finalFieldType(dart.dynamic),
    deleted: dart.finalFieldType(core.bool),
    lazy: dart.finalFieldType(core.bool),
    length: dart.fieldType(dart.nullable(core.int)),
    offset: dart.fieldType(core.int)
  }));
  dart.defineExtensionMethods(frame$.Frame, ['_equals', 'toString']);
  dart.defineExtensionAccessors(frame$.Frame, ['hashCode']);
  frame$.FrameKeyType = class FrameKeyType extends core.Object {
    static ['_#new#tearOff']() {
      return new frame$.FrameKeyType.new();
    }
  };
  (frame$.FrameKeyType.new = function() {
    ;
  }).prototype = frame$.FrameKeyType.prototype;
  dart.addTypeTests(frame$.FrameKeyType);
  dart.addTypeCaches(frame$.FrameKeyType);
  dart.setLibraryUri(frame$.FrameKeyType, I[22]);
  dart.setStaticFieldSignature(frame$.FrameKeyType, () => ['uintT', 'utf8StringT']);
  dart.defineLazy(frame$.FrameKeyType, {
    /*frame$.FrameKeyType.uintT*/get uintT() {
      return 0;
    },
    /*frame$.FrameKeyType.utf8StringT*/get utf8StringT() {
      return 1;
    }
  }, false);
  frame$.FrameValueType = class FrameValueType extends core.Object {
    static ['_#new#tearOff']() {
      return new frame$.FrameValueType.new();
    }
  };
  (frame$.FrameValueType.new = function() {
    ;
  }).prototype = frame$.FrameValueType.prototype;
  dart.addTypeTests(frame$.FrameValueType);
  dart.addTypeCaches(frame$.FrameValueType);
  dart.setLibraryUri(frame$.FrameValueType, I[22]);
  dart.setStaticFieldSignature(frame$.FrameValueType, () => ['nullT', 'intT', 'doubleT', 'boolT', 'stringT', 'byteListT', 'intListT', 'doubleListT', 'boolListT', 'stringListT', 'listT', 'mapT', 'hiveListT']);
  dart.defineLazy(frame$.FrameValueType, {
    /*frame$.FrameValueType.nullT*/get nullT() {
      return 0;
    },
    /*frame$.FrameValueType.intT*/get intT() {
      return 1;
    },
    /*frame$.FrameValueType.doubleT*/get doubleT() {
      return 2;
    },
    /*frame$.FrameValueType.boolT*/get boolT() {
      return 3;
    },
    /*frame$.FrameValueType.stringT*/get stringT() {
      return 4;
    },
    /*frame$.FrameValueType.byteListT*/get byteListT() {
      return 5;
    },
    /*frame$.FrameValueType.intListT*/get intListT() {
      return 6;
    },
    /*frame$.FrameValueType.doubleListT*/get doubleListT() {
      return 7;
    },
    /*frame$.FrameValueType.boolListT*/get boolListT() {
      return 8;
    },
    /*frame$.FrameValueType.stringListT*/get stringListT() {
      return 9;
    },
    /*frame$.FrameValueType.listT*/get listT() {
      return 10;
    },
    /*frame$.FrameValueType.mapT*/get mapT() {
      return 11;
    },
    /*frame$.FrameValueType.hiveListT*/get hiveListT() {
      return 12;
    }
  }, false);
  storage_backend.BackendManagerInterface = class BackendManagerInterface extends core.Object {};
  (storage_backend.BackendManagerInterface.new = function() {
    ;
  }).prototype = storage_backend.BackendManagerInterface.prototype;
  dart.addTypeTests(storage_backend.BackendManagerInterface);
  dart.addTypeCaches(storage_backend.BackendManagerInterface);
  dart.setLibraryUri(storage_backend.BackendManagerInterface, I[12]);
  var supportsCompaction$ = dart.privateName(storage_backend_memory, "StorageBackendMemory.supportsCompaction");
  var _cipher$0 = dart.privateName(storage_backend_memory, "_cipher");
  var _bytes = dart.privateName(storage_backend_memory, "_bytes");
  var _frameHelper = dart.privateName(storage_backend_memory, "_frameHelper");
  storage_backend_memory.StorageBackendMemory = class StorageBackendMemory extends storage_backend.StorageBackend {
    get supportsCompaction() {
      return this[supportsCompaction$];
    }
    set supportsCompaction(value) {
      this[supportsCompaction$] = value;
    }
    static ['_#new#tearOff'](bytes, _cipher) {
      return new storage_backend_memory.StorageBackendMemory.new(bytes, _cipher);
    }
    get path() {
      return null;
    }
    initialize(registry, keystore, lazy) {
      let recoveryOffset = this[_frameHelper].framesFromBytes(dart.nullCheck(this[_bytes]), keystore, registry, this[_cipher$0]);
      if (recoveryOffset !== -1) {
        dart.throw(new hive.HiveError.new("Wrong checksum in bytes. Box may be corrupted."));
      }
      this[_bytes] = null;
      return T.FutureOfvoid().value();
    }
    readValue(frame) {
      dart.throw(new core.UnsupportedError.new("This operation is unsupported for memory boxes."));
    }
    writeFrames(frames) {
      return T.FutureOfvoid().value();
    }
    compact(frames) {
      dart.throw(new core.UnsupportedError.new("This operation is unsupported for memory boxes."));
    }
    clear() {
      return T.FutureOfvoid().value();
    }
    close() {
      return T.FutureOfvoid().value();
    }
    deleteFromDisk() {
      dart.throw(new core.UnsupportedError.new("This operation is unsupported for memory boxes."));
    }
    flush() {
      return T.FutureOfvoid().value();
    }
  };
  (storage_backend_memory.StorageBackendMemory.new = function(bytes, _cipher) {
    this[supportsCompaction$] = false;
    this[_cipher$0] = _cipher;
    this[_bytes] = bytes;
    this[_frameHelper] = new frame_helper.FrameHelper.new();
    ;
  }).prototype = storage_backend_memory.StorageBackendMemory.prototype;
  dart.addTypeTests(storage_backend_memory.StorageBackendMemory);
  dart.addTypeCaches(storage_backend_memory.StorageBackendMemory);
  dart.setMethodSignature(storage_backend_memory.StorageBackendMemory, () => ({
    __proto__: dart.getMethods(storage_backend_memory.StorageBackendMemory.__proto__),
    initialize: dart.fnType(async.Future$(dart.void), [hive.TypeRegistry, dart.nullable(keystore$.Keystore), core.bool]),
    readValue: dart.fnType(async.Future, [frame$.Frame]),
    writeFrames: dart.fnType(async.Future$(dart.void), [core.List$(frame$.Frame)]),
    compact: dart.fnType(async.Future$(core.List$(frame$.Frame)), [core.Iterable$(frame$.Frame)]),
    clear: dart.fnType(async.Future$(dart.void), []),
    close: dart.fnType(async.Future$(dart.void), []),
    deleteFromDisk: dart.fnType(async.Future$(dart.void), []),
    flush: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setGetterSignature(storage_backend_memory.StorageBackendMemory, () => ({
    __proto__: dart.getGetters(storage_backend_memory.StorageBackendMemory.__proto__),
    path: dart.nullable(core.String)
  }));
  dart.setLibraryUri(storage_backend_memory.StorageBackendMemory, I[23]);
  dart.setFieldSignature(storage_backend_memory.StorageBackendMemory, () => ({
    __proto__: dart.getFields(storage_backend_memory.StorageBackendMemory.__proto__),
    [_cipher$0]: dart.finalFieldType(dart.nullable(hive.HiveCipher)),
    [_frameHelper]: dart.finalFieldType(frame_helper.FrameHelper),
    [_bytes]: dart.fieldType(dart.nullable(typed_data.Uint8List)),
    supportsCompaction: dart.fieldType(core.bool)
  }));
  var typeId = dart.privateName(date_time_adapter, "DateTimeAdapter.typeId");
  const _is_TypeAdapter_default = Symbol('_is_TypeAdapter_default');
  hive.TypeAdapter$ = dart.generic(T => {
    class TypeAdapter extends core.Object {}
    (TypeAdapter.new = function() {
      ;
    }).prototype = TypeAdapter.prototype;
    dart.addTypeTests(TypeAdapter);
    TypeAdapter.prototype[_is_TypeAdapter_default] = true;
    dart.addTypeCaches(TypeAdapter);
    dart.setLibraryUri(TypeAdapter, I[7]);
    return TypeAdapter;
  });
  hive.TypeAdapter = hive.TypeAdapter$();
  dart.addTypeTests(hive.TypeAdapter, _is_TypeAdapter_default);
  const _is_DateTimeAdapter_default = Symbol('_is_DateTimeAdapter_default');
  date_time_adapter.DateTimeAdapter$ = dart.generic(T => {
    class DateTimeAdapter extends hive.TypeAdapter$(T) {
      get typeId() {
        return this[typeId];
      }
      set typeId(value) {
        super.typeId = value;
      }
      read(reader) {
        let millis = reader.readInt();
        return T.as(new date_time_adapter.DateTimeWithoutTZ.fromMillisecondsSinceEpoch(millis));
      }
      write(writer, obj) {
        core.DateTime.as(obj);
        writer.writeInt(obj.millisecondsSinceEpoch);
      }
      static ['_#new#tearOff'](T) {
        return new (date_time_adapter.DateTimeAdapter$(T)).new();
      }
    }
    (DateTimeAdapter.new = function() {
      this[typeId] = 16;
      ;
    }).prototype = DateTimeAdapter.prototype;
    dart.addTypeTests(DateTimeAdapter);
    DateTimeAdapter.prototype[_is_DateTimeAdapter_default] = true;
    dart.addTypeCaches(DateTimeAdapter);
    dart.setMethodSignature(DateTimeAdapter, () => ({
      __proto__: dart.getMethods(DateTimeAdapter.__proto__),
      read: dart.fnType(T, [hive.BinaryReader]),
      write: dart.fnType(dart.void, [hive.BinaryWriter, dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(DateTimeAdapter, I[24]);
    dart.setFieldSignature(DateTimeAdapter, () => ({
      __proto__: dart.getFields(DateTimeAdapter.__proto__),
      typeId: dart.finalFieldType(core.int)
    }));
    return DateTimeAdapter;
  });
  date_time_adapter.DateTimeAdapter = date_time_adapter.DateTimeAdapter$();
  dart.addTypeTests(date_time_adapter.DateTimeAdapter, _is_DateTimeAdapter_default);
  date_time_adapter.DateTimeWithoutTZ = class DateTimeWithoutTZ extends core.DateTime {
    static ['_#fromMillisecondsSinceEpoch#tearOff'](millisecondsSinceEpoch) {
      return new date_time_adapter.DateTimeWithoutTZ.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);
    }
  };
  (date_time_adapter.DateTimeWithoutTZ.fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch) {
    date_time_adapter.DateTimeWithoutTZ.__proto__.fromMillisecondsSinceEpoch.call(this, millisecondsSinceEpoch);
    ;
  }).prototype = date_time_adapter.DateTimeWithoutTZ.prototype;
  dart.addTypeTests(date_time_adapter.DateTimeWithoutTZ);
  dart.addTypeCaches(date_time_adapter.DateTimeWithoutTZ);
  dart.setLibraryUri(date_time_adapter.DateTimeWithoutTZ, I[24]);
  var typeId$1 = dart.privateName(date_time_adapter, "DateTimeWithTimezoneAdapter.typeId");
  date_time_adapter.DateTimeWithTimezoneAdapter = class DateTimeWithTimezoneAdapter extends hive.TypeAdapter$(core.DateTime) {
    get typeId() {
      return this[typeId$1];
    }
    set typeId(value) {
      super.typeId = value;
    }
    read(reader) {
      let millis = reader.readInt();
      let isUtc = reader.readBool();
      return new core.DateTime.fromMillisecondsSinceEpoch(millis, {isUtc: isUtc});
    }
    write(writer, obj) {
      core.DateTime.as(obj);
      writer.writeInt(obj.millisecondsSinceEpoch);
      writer.writeBool(obj.isUtc);
    }
    static ['_#new#tearOff']() {
      return new date_time_adapter.DateTimeWithTimezoneAdapter.new();
    }
  };
  (date_time_adapter.DateTimeWithTimezoneAdapter.new = function() {
    this[typeId$1] = 18;
    ;
  }).prototype = date_time_adapter.DateTimeWithTimezoneAdapter.prototype;
  dart.addTypeTests(date_time_adapter.DateTimeWithTimezoneAdapter);
  dart.addTypeCaches(date_time_adapter.DateTimeWithTimezoneAdapter);
  dart.setMethodSignature(date_time_adapter.DateTimeWithTimezoneAdapter, () => ({
    __proto__: dart.getMethods(date_time_adapter.DateTimeWithTimezoneAdapter.__proto__),
    read: dart.fnType(core.DateTime, [hive.BinaryReader]),
    write: dart.fnType(dart.void, [hive.BinaryWriter, dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(date_time_adapter.DateTimeWithTimezoneAdapter, I[24]);
  dart.setFieldSignature(date_time_adapter.DateTimeWithTimezoneAdapter, () => ({
    __proto__: dart.getFields(date_time_adapter.DateTimeWithTimezoneAdapter.__proto__),
    typeId: dart.finalFieldType(core.int)
  }));
  var typeId$2 = dart.privateName(big_int_adapter, "BigIntAdapter.typeId");
  big_int_adapter.BigIntAdapter = class BigIntAdapter extends hive.TypeAdapter$(core.BigInt) {
    get typeId() {
      return this[typeId$2];
    }
    set typeId(value) {
      super.typeId = value;
    }
    read(reader) {
      let len = reader.readByte();
      let intStr = reader.readString(len);
      return core.BigInt.parse(intStr);
    }
    write(writer, obj) {
      core.BigInt.as(obj);
      let intStr = obj.toString();
      writer.writeByte(intStr.length);
      writer.writeString(intStr, {writeByteCount: false});
    }
    static ['_#new#tearOff']() {
      return new big_int_adapter.BigIntAdapter.new();
    }
  };
  (big_int_adapter.BigIntAdapter.new = function() {
    this[typeId$2] = 17;
    ;
  }).prototype = big_int_adapter.BigIntAdapter.prototype;
  dart.addTypeTests(big_int_adapter.BigIntAdapter);
  dart.addTypeCaches(big_int_adapter.BigIntAdapter);
  dart.setMethodSignature(big_int_adapter.BigIntAdapter, () => ({
    __proto__: dart.getMethods(big_int_adapter.BigIntAdapter.__proto__),
    read: dart.fnType(core.BigInt, [hive.BinaryReader]),
    write: dart.fnType(dart.void, [hive.BinaryWriter, dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(big_int_adapter.BigIntAdapter, I[25]);
  dart.setFieldSignature(big_int_adapter.BigIntAdapter, () => ({
    __proto__: dart.getFields(big_int_adapter.BigIntAdapter.__proto__),
    typeId: dart.finalFieldType(core.int)
  }));
  var homePath = dart.privateName(hive_impl, "HiveImpl.homePath");
  var _boxes = dart.privateName(hive_impl, "_boxes");
  var _openingBoxes = dart.privateName(hive_impl, "_openingBoxes");
  var _managerOverride = dart.privateName(hive_impl, "_managerOverride");
  var _secureRandom = dart.privateName(hive_impl, "_secureRandom");
  var _registerDefaultAdapters = dart.privateName(hive_impl, "_registerDefaultAdapters");
  var _manager = dart.privateName(hive_impl, "_manager");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  var _openBox = dart.privateName(hive_impl, "_openBox");
  var _getBoxInternal = dart.privateName(hive_impl, "_getBoxInternal");
  hive_impl.HiveImpl = class HiveImpl extends type_registry_impl.TypeRegistryImpl {
    get homePath() {
      return this[homePath];
    }
    set homePath(value) {
      this[homePath] = value;
    }
    static ['_#new#tearOff']() {
      return new hive_impl.HiveImpl.new();
    }
    get [_manager]() {
      let t13;
      t13 = this[_managerOverride];
      return t13 == null ? hive_impl.HiveImpl._defaultBackendManager : t13;
    }
    [_registerDefaultAdapters]() {
      this.registerAdapter(core.DateTime, new date_time_adapter.DateTimeWithTimezoneAdapter.new(), {internal: true});
      this.registerAdapter(date_time_adapter.DateTimeWithoutTZ, new (T.DateTimeAdapterOfDateTimeWithoutTZ()).new(), {internal: true});
      this.registerAdapter(core.BigInt, new big_int_adapter.BigIntAdapter.new(), {internal: true});
    }
    init(path, opts) {
      let backendPreference = opts && 'backendPreference' in opts ? opts.backendPreference : C[6] || CT.C6;
      this.homePath = path;
      this[_managerOverride] = backend_manager$.BackendManager.select(backendPreference);
    }
    [_openBox](E, name, lazy, cipher, comparator, compaction, recovery, path, bytes, collection) {
      return async.async(hive.BoxBase$(E), (function* _openBox() {
        let t13, t14;
        if (!(path == null || bytes == null)) dart.assertFailed(null, I[26], 72, 12, "path == null || bytes == null");
        if (!(name.length <= 255 && extensions['StringX|get#isAscii'](name))) dart.assertFailed("Box names need to be ASCII Strings with a max length of 255.", I[26], 73, 12, "name.length <= 255 && name.isAscii");
        name = name[$toLowerCase]();
        if (this.isBoxOpen(name)) {
          if (lazy) {
            return this.lazyBox(E, name);
          } else {
            return this.box(E, name);
          }
        } else {
          if (this[_openingBoxes][$containsKey](name)) {
            yield this[_openingBoxes][$_get](name);
            if (lazy) {
              return this.lazyBox(E, name);
            } else {
              return this.box(E, name);
            }
          }
          let completer = async.Completer.new();
          this[_openingBoxes][$_set](name, completer.future);
          let newBox = null;
          try {
            let backend = null;
            if (bytes != null) {
              backend = new storage_backend_memory.StorageBackendMemory.new(bytes, cipher);
            } else {
              backend = (yield this[_manager].open(name, (t13 = path, t13 == null ? this.homePath : t13), recovery, cipher, collection));
            }
            if (lazy) {
              newBox = new (lazy_box_impl.LazyBoxImpl$(E)).new(this, name, comparator, compaction, backend);
            } else {
              newBox = new (box_impl.BoxImpl$(E)).new(this, name, comparator, compaction, backend);
            }
            yield newBox.initialize();
            this[_boxes][$_set](name, newBox);
            completer.complete();
            return newBox;
          } catch (e) {
            let error = dart.getThrown(e);
            let stackTrace = dart.stackTrace(e);
            if (core.Object.is(error)) {
              t14 = newBox;
              t14 == null ? null : t14.close();
              completer.completeError(error, stackTrace);
              dart.rethrow(e);
            } else
              throw e;
          } finally {
            this[_openingBoxes][$remove](name);
          }
        }
      }).bind(this));
    }
    openBox(E, name, opts) {
      let encryptionCipher = opts && 'encryptionCipher' in opts ? opts.encryptionCipher : null;
      let keyComparator = opts && 'keyComparator' in opts ? opts.keyComparator : C[4] || CT.C4;
      let compactionStrategy = opts && 'compactionStrategy' in opts ? opts.compactionStrategy : C[7] || CT.C7;
      let crashRecovery = opts && 'crashRecovery' in opts ? opts.crashRecovery : true;
      let path = opts && 'path' in opts ? opts.path : null;
      let bytes = opts && 'bytes' in opts ? opts.bytes : null;
      let collection = opts && 'collection' in opts ? opts.collection : null;
      let encryptionKey = opts && 'encryptionKey' in opts ? opts.encryptionKey : null;
      return async.async(hive.Box$(E), (function* openBox() {
        if (encryptionKey != null) {
          encryptionCipher = new hive.HiveAesCipher.new(encryptionKey);
        }
        return hive.Box$(E).as(yield this[_openBox](E, name, false, encryptionCipher, keyComparator, compactionStrategy, crashRecovery, path, bytes, collection));
      }).bind(this));
    }
    openLazyBox(E, name, opts) {
      let encryptionCipher = opts && 'encryptionCipher' in opts ? opts.encryptionCipher : null;
      let keyComparator = opts && 'keyComparator' in opts ? opts.keyComparator : C[4] || CT.C4;
      let compactionStrategy = opts && 'compactionStrategy' in opts ? opts.compactionStrategy : C[7] || CT.C7;
      let crashRecovery = opts && 'crashRecovery' in opts ? opts.crashRecovery : true;
      let path = opts && 'path' in opts ? opts.path : null;
      let collection = opts && 'collection' in opts ? opts.collection : null;
      let encryptionKey = opts && 'encryptionKey' in opts ? opts.encryptionKey : null;
      return async.async(hive.LazyBox$(E), (function* openLazyBox() {
        if (encryptionKey != null) {
          encryptionCipher = new hive.HiveAesCipher.new(encryptionKey);
        }
        return hive.LazyBox$(E).as(yield this[_openBox](E, name, true, encryptionCipher, keyComparator, compactionStrategy, crashRecovery, path, null, collection));
      }).bind(this));
    }
    [_getBoxInternal](E, name, lazy = null) {
      let lowerCaseName = name[$toLowerCase]();
      let box = this[_boxes][$_get](lowerCaseName);
      if (box != null) {
        if ((lazy == null || box.lazy === lazy) && box.valueType._equals(dart.wrapType(E))) {
          return hive.BoxBase$(E).as(box);
        } else {
          let typeName = hive.LazyBox.is(box) ? "LazyBox<" + dart.str(box.valueType) + ">" : "Box<" + dart.str(box.valueType) + ">";
          dart.throw(new hive.HiveError.new("The box \"" + lowerCaseName + "\" is already open " + "and of type " + typeName + "."));
        }
      } else {
        dart.throw(new hive.HiveError.new("Box not found. Did you forget to call Hive.openBox()?"));
      }
    }
    getBoxWithoutCheckInternal(name) {
      let lowerCaseName = name[$toLowerCase]();
      return this[_boxes][$_get](lowerCaseName);
    }
    box(E, name) {
      return hive.Box$(E).as(this[_getBoxInternal](E, name, false));
    }
    lazyBox(E, name) {
      return hive.LazyBox$(E).as(this[_getBoxInternal](E, name, true));
    }
    isBoxOpen(name) {
      return this[_boxes][$containsKey](name[$toLowerCase]());
    }
    close() {
      let closeFutures = this[_boxes][$values][$map](T.FutureOfvoid(), dart.fn(box => box.close(), T.BoxBaseImplToFutureOfvoid()));
      return async.Future.wait(dart.void, closeFutures);
    }
    unregisterBox(name) {
      name = name[$toLowerCase]();
      this[_openingBoxes][$remove](name);
      this[_boxes][$remove](name);
    }
    deleteBoxFromDisk(name, opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      let collection = opts && 'collection' in opts ? opts.collection : null;
      return async.async(dart.void, (function* deleteBoxFromDisk() {
        let t14;
        let lowerCaseName = name[$toLowerCase]();
        let box = this[_boxes][$_get](lowerCaseName);
        if (box != null) {
          yield box.deleteFromDisk();
        } else {
          yield this[_manager].deleteBox(lowerCaseName, (t14 = path, t14 == null ? this.homePath : t14), collection);
        }
      }).bind(this));
    }
    deleteFromDisk() {
      let deleteFutures = this[_boxes][$values][$toList]()[$map](T.FutureOfvoid(), dart.fn(box => box.deleteFromDisk(), T.BoxBaseImplToFutureOfvoid()));
      return async.Future.wait(dart.void, deleteFutures);
    }
    generateSecureKey() {
      return extensions['RandomX|nextBytes'](this[_secureRandom], 32);
    }
    boxExists(name, opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      let collection = opts && 'collection' in opts ? opts.collection : null;
      return async.async(core.bool, (function* boxExists() {
        let t14;
        let lowerCaseName = name[$toLowerCase]();
        return yield this[_manager].boxExists(lowerCaseName, (t14 = path, t14 == null ? this.homePath : t14), collection);
      }).bind(this));
    }
  };
  (hive_impl.HiveImpl.new = function() {
    this[_boxes] = new (T.IdentityMapOfString$BoxBaseImpl()).new();
    this[_openingBoxes] = new (T.IdentityMapOfString$Future()).new();
    this[_managerOverride] = null;
    this[_secureRandom] = math.Random.secure();
    this[homePath] = null;
    hive_impl.HiveImpl.__proto__.new.call(this);
    this[_registerDefaultAdapters]();
  }).prototype = hive_impl.HiveImpl.prototype;
  dart.addTypeTests(hive_impl.HiveImpl);
  dart.addTypeCaches(hive_impl.HiveImpl);
  hive_impl.HiveImpl[dart.implements] = () => [hive.HiveInterface];
  dart.setMethodSignature(hive_impl.HiveImpl, () => ({
    __proto__: dart.getMethods(hive_impl.HiveImpl.__proto__),
    [_registerDefaultAdapters]: dart.fnType(dart.void, []),
    init: dart.fnType(dart.void, [dart.nullable(core.String)], {backendPreference: hive.HiveStorageBackendPreference}, {}),
    [_openBox]: dart.gFnType(E => [async.Future$(hive.BoxBase$(E)), [core.String, core.bool, dart.nullable(hive.HiveCipher), dart.fnType(core.int, [dart.dynamic, dart.dynamic]), dart.fnType(core.bool, [core.int, core.int]), core.bool, dart.nullable(core.String), dart.nullable(typed_data.Uint8List), dart.nullable(core.String)]], E => [dart.nullable(core.Object)]),
    openBox: dart.gFnType(E => [async.Future$(hive.Box$(E)), [core.String], {bytes: dart.nullable(typed_data.Uint8List), collection: dart.nullable(core.String), compactionStrategy: dart.fnType(core.bool, [core.int, core.int]), crashRecovery: core.bool, encryptionCipher: dart.nullable(hive.HiveCipher), encryptionKey: dart.nullable(core.List$(core.int)), keyComparator: dart.fnType(core.int, [dart.dynamic, dart.dynamic]), path: dart.nullable(core.String)}, {}], E => [dart.nullable(core.Object)]),
    openLazyBox: dart.gFnType(E => [async.Future$(hive.LazyBox$(E)), [core.String], {collection: dart.nullable(core.String), compactionStrategy: dart.fnType(core.bool, [core.int, core.int]), crashRecovery: core.bool, encryptionCipher: dart.nullable(hive.HiveCipher), encryptionKey: dart.nullable(core.List$(core.int)), keyComparator: dart.fnType(core.int, [dart.dynamic, dart.dynamic]), path: dart.nullable(core.String)}, {}], E => [dart.nullable(core.Object)]),
    [_getBoxInternal]: dart.gFnType(E => [hive.BoxBase$(E), [core.String], [dart.nullable(core.bool)]], E => [dart.nullable(core.Object)]),
    getBoxWithoutCheckInternal: dart.fnType(dart.nullable(hive.BoxBase), [core.String]),
    box: dart.gFnType(E => [hive.Box$(E), [core.String]], E => [dart.nullable(core.Object)]),
    lazyBox: dart.gFnType(E => [hive.LazyBox$(E), [core.String]], E => [dart.nullable(core.Object)]),
    isBoxOpen: dart.fnType(core.bool, [core.String]),
    close: dart.fnType(async.Future$(dart.void), []),
    unregisterBox: dart.fnType(dart.void, [core.String]),
    deleteBoxFromDisk: dart.fnType(async.Future$(dart.void), [core.String], {collection: dart.nullable(core.String), path: dart.nullable(core.String)}, {}),
    deleteFromDisk: dart.fnType(async.Future$(dart.void), []),
    generateSecureKey: dart.fnType(core.List$(core.int), []),
    boxExists: dart.fnType(async.Future$(core.bool), [core.String], {collection: dart.nullable(core.String), path: dart.nullable(core.String)}, {})
  }));
  dart.setGetterSignature(hive_impl.HiveImpl, () => ({
    __proto__: dart.getGetters(hive_impl.HiveImpl.__proto__),
    [_manager]: storage_backend.BackendManagerInterface
  }));
  dart.setLibraryUri(hive_impl.HiveImpl, I[27]);
  dart.setFieldSignature(hive_impl.HiveImpl, () => ({
    __proto__: dart.getFields(hive_impl.HiveImpl.__proto__),
    [_boxes]: dart.finalFieldType(collection.HashMap$(core.String, box_base_impl.BoxBaseImpl)),
    [_openingBoxes]: dart.finalFieldType(collection.HashMap$(core.String, async.Future)),
    [_managerOverride]: dart.fieldType(dart.nullable(storage_backend.BackendManagerInterface)),
    [_secureRandom]: dart.finalFieldType(math.Random),
    homePath: dart.fieldType(dart.nullable(core.String))
  }));
  dart.setStaticFieldSignature(hive_impl.HiveImpl, () => ['_defaultBackendManager']);
  dart.defineLazy(hive_impl.HiveImpl, {
    /*hive_impl.HiveImpl._defaultBackendManager*/get _defaultBackendManager() {
      return backend_manager$.BackendManager.select();
    }
  }, false);
  var index$ = dart.privateName(hive, "HiveField.index");
  var defaultValue$ = dart.privateName(hive, "HiveField.defaultValue");
  hive.HiveField = class HiveField extends core.Object {
    get index() {
      return this[index$];
    }
    set index(value) {
      super.index = value;
    }
    get defaultValue() {
      return this[defaultValue$];
    }
    set defaultValue(value) {
      super.defaultValue = value;
    }
    static ['_#new#tearOff'](index, opts) {
      let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
      return new hive.HiveField.new(index, {defaultValue: defaultValue});
    }
  };
  (hive.HiveField.new = function(index, opts) {
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
    this[index$] = index;
    this[defaultValue$] = defaultValue;
    ;
  }).prototype = hive.HiveField.prototype;
  dart.addTypeTests(hive.HiveField);
  dart.addTypeCaches(hive.HiveField);
  dart.setLibraryUri(hive.HiveField, I[7]);
  dart.setFieldSignature(hive.HiveField, () => ({
    __proto__: dart.getFields(hive.HiveField.__proto__),
    index: dart.finalFieldType(core.int),
    defaultValue: dart.finalFieldType(dart.dynamic)
  }));
  var typeId$3 = dart.privateName(hive, "HiveType.typeId");
  var adapterName$ = dart.privateName(hive, "HiveType.adapterName");
  hive.HiveType = class HiveType extends core.Object {
    get typeId() {
      return this[typeId$3];
    }
    set typeId(value) {
      super.typeId = value;
    }
    get adapterName() {
      return this[adapterName$];
    }
    set adapterName(value) {
      super.adapterName = value;
    }
    static ['_#new#tearOff'](opts) {
      let typeId = opts && 'typeId' in opts ? opts.typeId : null;
      let adapterName = opts && 'adapterName' in opts ? opts.adapterName : null;
      return new hive.HiveType.new({typeId: typeId, adapterName: adapterName});
    }
  };
  (hive.HiveType.new = function(opts) {
    let typeId = opts && 'typeId' in opts ? opts.typeId : null;
    let adapterName = opts && 'adapterName' in opts ? opts.adapterName : null;
    this[typeId$3] = typeId;
    this[adapterName$] = adapterName;
    ;
  }).prototype = hive.HiveType.prototype;
  dart.addTypeTests(hive.HiveType);
  dart.addTypeCaches(hive.HiveType);
  dart.setLibraryUri(hive.HiveType, I[7]);
  dart.setFieldSignature(hive.HiveType, () => ({
    __proto__: dart.getFields(hive.HiveType.__proto__),
    typeId: dart.finalFieldType(core.int),
    adapterName: dart.finalFieldType(dart.nullable(core.String))
  }));
  const _is_Box_default = Symbol('_is_Box_default');
  hive.Box$ = dart.generic(E => {
    class Box extends core.Object {}
    (Box.new = function() {
      ;
    }).prototype = Box.prototype;
    dart.addTypeTests(Box);
    Box.prototype[_is_Box_default] = true;
    dart.addTypeCaches(Box);
    Box[dart.implements] = () => [hive.BoxBase$(E)];
    dart.setLibraryUri(Box, I[7]);
    return Box;
  });
  hive.Box = hive.Box$();
  dart.addTypeTests(hive.Box, _is_Box_default);
  var key$0 = dart.privateName(hive, "BoxEvent.key");
  var value$0 = dart.privateName(hive, "BoxEvent.value");
  var deleted$0 = dart.privateName(hive, "BoxEvent.deleted");
  hive.BoxEvent = class BoxEvent extends core.Object {
    get key() {
      return this[key$0];
    }
    set key(value) {
      super.key = value;
    }
    get value() {
      return this[value$0];
    }
    set value(value) {
      super.value = value;
    }
    get deleted() {
      return this[deleted$0];
    }
    set deleted(value) {
      super.deleted = value;
    }
    static ['_#new#tearOff'](key, value, deleted) {
      return new hive.BoxEvent.new(key, value, deleted);
    }
    _equals(other) {
      if (other == null) return false;
      if (hive.BoxEvent.is(other)) {
        return dart.equals(other.key, this.key) && dart.equals(other.value, this.value);
      }
      return false;
    }
    get hashCode() {
      return (this[$runtimeType].hashCode ^ dart.hashCode(this.key) ^ dart.hashCode(this.value)) >>> 0;
    }
  };
  (hive.BoxEvent.new = function(key, value, deleted) {
    this[key$0] = key;
    this[value$0] = value;
    this[deleted$0] = deleted;
    ;
  }).prototype = hive.BoxEvent.prototype;
  dart.addTypeTests(hive.BoxEvent);
  dart.addTypeCaches(hive.BoxEvent);
  dart.setMethodSignature(hive.BoxEvent, () => ({
    __proto__: dart.getMethods(hive.BoxEvent.__proto__),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setLibraryUri(hive.BoxEvent, I[7]);
  dart.setFieldSignature(hive.BoxEvent, () => ({
    __proto__: dart.getFields(hive.BoxEvent.__proto__),
    key: dart.finalFieldType(dart.dynamic),
    value: dart.finalFieldType(dart.dynamic),
    deleted: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(hive.BoxEvent, ['_equals']);
  dart.defineExtensionAccessors(hive.BoxEvent, ['hashCode']);
  const _is_BoxBase_default = Symbol('_is_BoxBase_default');
  hive.BoxBase$ = dart.generic(E => {
    class BoxBase extends core.Object {}
    (BoxBase.new = function() {
      ;
    }).prototype = BoxBase.prototype;
    dart.addTypeTests(BoxBase);
    BoxBase.prototype[_is_BoxBase_default] = true;
    dart.addTypeCaches(BoxBase);
    dart.setLibraryUri(BoxBase, I[7]);
    return BoxBase;
  });
  hive.BoxBase = hive.BoxBase$();
  dart.addTypeTests(hive.BoxBase, _is_BoxBase_default);
  const _is_LazyBox_default = Symbol('_is_LazyBox_default');
  hive.LazyBox$ = dart.generic(E => {
    class LazyBox extends hive.BoxBase$(E) {}
    (LazyBox.new = function() {
      ;
    }).prototype = LazyBox.prototype;
    dart.addTypeTests(LazyBox);
    LazyBox.prototype[_is_LazyBox_default] = true;
    dart.addTypeCaches(LazyBox);
    dart.setLibraryUri(LazyBox, I[7]);
    return LazyBox;
  });
  hive.LazyBox = hive.LazyBox$();
  dart.addTypeTests(hive.LazyBox, _is_LazyBox_default);
  var __HiveAesCipher__cipher = dart.privateName(hive, "_#HiveAesCipher#_cipher");
  var __HiveAesCipher__keyCrc = dart.privateName(hive, "_#HiveAesCipher#_keyCrc");
  var _cipher = dart.privateName(hive, "_cipher");
  var _keyCrc = dart.privateName(hive, "_keyCrc");
  hive.HiveAesCipher = class HiveAesCipher extends core.Object {
    get [_cipher]() {
      let t14;
      t14 = this[__HiveAesCipher__cipher];
      return t14 == null ? dart.throw(new _internal.LateError.fieldNI("_cipher")) : t14;
    }
    set [_cipher](library$32package$58hive$47src$47crypto$47hive_aes_cipher$46dart$58$58_cipher$35param) {
      if (this[__HiveAesCipher__cipher] == null)
        this[__HiveAesCipher__cipher] = library$32package$58hive$47src$47crypto$47hive_aes_cipher$46dart$58$58_cipher$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_cipher"));
    }
    get [_keyCrc]() {
      let t14;
      t14 = this[__HiveAesCipher__keyCrc];
      return t14 == null ? dart.throw(new _internal.LateError.fieldNI("_keyCrc")) : t14;
    }
    set [_keyCrc](library$32package$58hive$47src$47crypto$47hive_aes_cipher$46dart$58$58_keyCrc$35param) {
      if (this[__HiveAesCipher__keyCrc] == null)
        this[__HiveAesCipher__keyCrc] = library$32package$58hive$47src$47crypto$47hive_aes_cipher$46dart$58$58_keyCrc$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_keyCrc"));
    }
    static ['_#new#tearOff'](key) {
      return new hive.HiveAesCipher.new(key);
    }
    calculateKeyCrc() {
      return this[_keyCrc];
    }
    decrypt(inp, inpOff, inpLength, out, outOff) {
      let iv = extensions['Uint8ListX|view'](inp, inpOff, 16);
      return this[_cipher].decrypt(iv, inp, inpOff + 16, inpLength - 16, out, 0);
    }
    generateIv() {
      return extensions['RandomX|nextBytes'](hive.HiveAesCipher._ivRandom, 16);
    }
    encrypt(inp, inpOff, inpLength, out, outOff) {
      let iv = this.generateIv();
      out[$setAll](outOff, iv);
      let len = this[_cipher].encrypt(iv, inp, 0, inpLength, out, outOff + 16);
      return len + 16;
    }
    maxEncryptedSize(inp) {
      return inp[$length] + 32;
    }
  };
  (hive.HiveAesCipher.new = function(key) {
    this[__HiveAesCipher__cipher] = null;
    this[__HiveAesCipher__keyCrc] = null;
    if (key[$length] !== 32 || key[$any](dart.fn(it => it < 0 || it > 255, T.intTobool()))) {
      dart.throw(new core.ArgumentError.new("The encryption key has to be a 32 byte (256 bit) array."));
    }
    let keyBytes = _native_typed_data.NativeUint8List.fromList(key);
    this[_cipher] = new aes_cbc_pkcs7.AesCbcPkcs7.new(keyBytes);
    this[_keyCrc] = crc32.Crc32.compute(typed_data.Uint8List.as(sha256.sha256.convert(keyBytes).bytes));
  }).prototype = hive.HiveAesCipher.prototype;
  dart.addTypeTests(hive.HiveAesCipher);
  dart.addTypeCaches(hive.HiveAesCipher);
  hive.HiveAesCipher[dart.implements] = () => [hive.HiveCipher];
  dart.setMethodSignature(hive.HiveAesCipher, () => ({
    __proto__: dart.getMethods(hive.HiveAesCipher.__proto__),
    calculateKeyCrc: dart.fnType(core.int, []),
    decrypt: dart.fnType(core.int, [typed_data.Uint8List, core.int, core.int, typed_data.Uint8List, core.int]),
    generateIv: dart.fnType(typed_data.Uint8List, []),
    encrypt: dart.fnType(core.int, [typed_data.Uint8List, core.int, core.int, typed_data.Uint8List, core.int]),
    maxEncryptedSize: dart.fnType(core.int, [typed_data.Uint8List])
  }));
  dart.setGetterSignature(hive.HiveAesCipher, () => ({
    __proto__: dart.getGetters(hive.HiveAesCipher.__proto__),
    [_cipher]: aes_cbc_pkcs7.AesCbcPkcs7,
    [_keyCrc]: core.int
  }));
  dart.setSetterSignature(hive.HiveAesCipher, () => ({
    __proto__: dart.getSetters(hive.HiveAesCipher.__proto__),
    [_cipher]: aes_cbc_pkcs7.AesCbcPkcs7,
    [_keyCrc]: core.int
  }));
  dart.setLibraryUri(hive.HiveAesCipher, I[7]);
  dart.setFieldSignature(hive.HiveAesCipher, () => ({
    __proto__: dart.getFields(hive.HiveAesCipher.__proto__),
    [__HiveAesCipher__cipher]: dart.fieldType(dart.nullable(aes_cbc_pkcs7.AesCbcPkcs7)),
    [__HiveAesCipher__keyCrc]: dart.fieldType(dart.nullable(core.int))
  }));
  dart.setStaticFieldSignature(hive.HiveAesCipher, () => ['_ivRandom']);
  dart.defineLazy(hive.HiveAesCipher, {
    /*hive.HiveAesCipher._ivRandom*/get _ivRandom() {
      return math.Random.secure();
    }
  }, false);
  hive.HiveCipher = class HiveCipher extends core.Object {};
  (hive.HiveCipher.new = function() {
    ;
  }).prototype = hive.HiveCipher.prototype;
  dart.addTypeTests(hive.HiveCipher);
  dart.addTypeCaches(hive.HiveCipher);
  dart.setLibraryUri(hive.HiveCipher, I[7]);
  hive.HiveInterface = class HiveInterface extends core.Object {};
  (hive.HiveInterface.new = function() {
    ;
  }).prototype = hive.HiveInterface.prototype;
  dart.addTypeTests(hive.HiveInterface);
  dart.addTypeCaches(hive.HiveInterface);
  hive.HiveInterface[dart.implements] = () => [hive.TypeRegistry];
  dart.setLibraryUri(hive.HiveInterface, I[7]);
  var message$ = dart.privateName(hive, "HiveError.message");
  hive.HiveError = class HiveError extends core.Error {
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    static ['_#new#tearOff'](message) {
      return new hive.HiveError.new(message);
    }
    toString() {
      return "HiveError: " + this.message;
    }
  };
  (hive.HiveError.new = function(message) {
    this[message$] = message;
    hive.HiveError.__proto__.new.call(this);
    ;
  }).prototype = hive.HiveError.prototype;
  dart.addTypeTests(hive.HiveError);
  dart.addTypeCaches(hive.HiveError);
  dart.setLibraryUri(hive.HiveError, I[7]);
  dart.setFieldSignature(hive.HiveError, () => ({
    __proto__: dart.getFields(hive.HiveError.__proto__),
    message: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(hive.HiveError, ['toString']);
  const _is_HiveCollection_default = Symbol('_is_HiveCollection_default');
  hive.HiveCollection$ = dart.generic(E => {
    class HiveCollection extends core.Object {
      [Symbol.iterator]() {
        return new dart.JsIterator(this[$iterator]);
      }
    }
    (HiveCollection.new = function() {
      ;
    }).prototype = HiveCollection.prototype;
    HiveCollection.prototype[dart.isList] = true;
    dart.addTypeTests(HiveCollection);
    HiveCollection.prototype[_is_HiveCollection_default] = true;
    dart.addTypeCaches(HiveCollection);
    HiveCollection[dart.implements] = () => [core.List$(E)];
    dart.setLibraryUri(HiveCollection, I[7]);
    return HiveCollection;
  });
  hive.HiveCollection = hive.HiveCollection$();
  dart.addTypeTests(hive.HiveCollection, _is_HiveCollection_default);
  const _is_HiveList_default = Symbol('_is_HiveList_default');
  hive.HiveList$ = dart.generic(E => {
    class HiveList extends hive.HiveCollection$(E) {
      static new(box, opts) {
        let objects = opts && 'objects' in opts ? opts.objects : null;
        return new (hive_list_impl.HiveListImpl$(E)).new(box, {objects: objects});
      }
      static ['_#new#tearOff'](E, box, opts) {
        let objects = opts && 'objects' in opts ? opts.objects : null;
        return hive.HiveList$(E).new(box, {objects: objects});
      }
    }
    HiveList.prototype[dart.isList] = true;
    dart.addTypeTests(HiveList);
    HiveList.prototype[_is_HiveList_default] = true;
    dart.addTypeCaches(HiveList);
    HiveList[dart.implements] = () => [core.List$(E)];
    dart.setStaticMethodSignature(HiveList, () => ['new']);
    dart.setLibraryUri(HiveList, I[7]);
    return HiveList;
  });
  hive.HiveList = hive.HiveList$();
  dart.addTypeTests(hive.HiveList, _is_HiveList_default);
  var _name = dart.privateName(core, "_name");
  hive.HiveStorageBackendPreference = class HiveStorageBackendPreference extends core._Enum {
    toString() {
      return "HiveStorageBackendPreference." + this[_name];
    }
  };
  (hive.HiveStorageBackendPreference.new = function(index, name) {
    hive.HiveStorageBackendPreference.__proto__.new.call(this, index, name);
    ;
  }).prototype = hive.HiveStorageBackendPreference.prototype;
  dart.addTypeTests(hive.HiveStorageBackendPreference);
  dart.addTypeCaches(hive.HiveStorageBackendPreference);
  dart.setLibraryUri(hive.HiveStorageBackendPreference, I[7]);
  dart.setStaticFieldSignature(hive.HiveStorageBackendPreference, () => ['values', 'native', 'webWorker']);
  dart.defineExtensionMethods(hive.HiveStorageBackendPreference, ['toString']);
  dart.defineLazy(hive.HiveStorageBackendPreference, {
    /*hive.HiveStorageBackendPreference.values*/get values() {
      return C[8] || CT.C8;
    },
    /*hive.HiveStorageBackendPreference.native*/get native() {
      return C[6] || CT.C6;
    },
    /*hive.HiveStorageBackendPreference.webWorker*/get webWorker() {
      return C[9] || CT.C9;
    }
  }, false);
  hive.TypeRegistry = class TypeRegistry extends core.Object {};
  (hive.TypeRegistry.new = function() {
    ;
  }).prototype = hive.TypeRegistry.prototype;
  dart.addTypeTests(hive.TypeRegistry);
  dart.addTypeCaches(hive.TypeRegistry);
  dart.setLibraryUri(hive.TypeRegistry, I[7]);
  dart.defineLazy(hive, {
    /*hive.Hive*/get Hive() {
      return new hive_impl.HiveImpl.new();
    }
  }, false);
  dart.trackLibraries("packages/hive/src/box_collection/box_collection_stub.dart", {
    "package:hive/src/box_collection/box_collection_stub.dart": box_collection_stub,
    "package:hive/src/box_collection/box_collection_indexed_db.dart": box_collection_indexed_db,
    "package:hive/src/box/lazy_box_impl.dart": lazy_box_impl,
    "package:hive/src/box/box_impl.dart": box_impl,
    "package:hive/src/binary/frame_helper.dart": frame_helper,
    "package:hive/src/binary/binary_writer_impl.dart": binary_writer_impl,
    "package:hive/src/adapters/ignored_type_adapter.dart": ignored_type_adapter,
    "package:hive/src/registry/type_registry_impl.dart": type_registry_impl,
    "package:hive/src/binary/binary_reader_impl.dart": binary_reader_impl,
    "package:hive/src/backend/js/native/storage_backend_js.dart": storage_backend_js,
    "package:hive/src/backend/js/native/backend_manager.dart": backend_manager,
    "package:hive/src/backend/js/backend_manager.dart": backend_manager$,
    "package:hive/src/box/box_base_impl.dart": box_base_impl,
    "package:hive/src/object/hive_collection_mixin.dart": hive_collection_mixin,
    "package:hive/src/object/hive_list_impl.dart": hive_list_impl,
    "package:hive/src/object/hive_object.dart": hive_object,
    "package:hive/src/box/change_notifier.dart": change_notifier,
    "package:hive/src/box/keystore.dart": keystore$,
    "package:hive/src/binary/frame.dart": frame$,
    "package:hive/src/backend/storage_backend.dart": storage_backend,
    "package:hive/src/backend/storage_backend_memory.dart": storage_backend_memory,
    "package:hive/src/adapters/date_time_adapter.dart": date_time_adapter,
    "package:hive/src/adapters/big_int_adapter.dart": big_int_adapter,
    "package:hive/src/hive_impl.dart": hive_impl,
    "package:hive/hive.dart": hive
  }, {
    "package:hive/src/object/hive_object.dart": ["hive_object_internal.dart"],
    "package:hive/hive.dart": ["src/annotations/hive_field.dart", "src/annotations/hive_type.dart", "src/binary/binary_reader.dart", "src/binary/binary_writer.dart", "src/box/box.dart", "src/box/box_base.dart", "src/box/lazy_box.dart", "src/crypto/hive_aes_cipher.dart", "src/crypto/hive_cipher.dart", "src/hive.dart", "src/hive_error.dart", "src/object/hive_collection.dart", "src/object/hive_list.dart", "src/object/hive_storage_backend_preference.dart", "src/registry/type_adapter.dart", "src/registry/type_registry.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["box_collection_stub.dart","box_collection_indexed_db.dart","../box/box_base_impl.dart","../box/lazy_box_impl.dart","../box/box_impl.dart","../binary/frame_helper.dart","../binary/binary_writer.dart","../binary/binary_writer_impl.dart","../adapters/ignored_type_adapter.dart","../registry/type_registry_impl.dart","../binary/binary_reader.dart","../binary/binary_reader_impl.dart","../backend/storage_backend.dart","../backend/js/native/storage_backend_js.dart","../backend/js/native/backend_manager.dart","../backend/js/backend_manager.dart","../object/hive_collection_mixin.dart","../object/hive_list_impl.dart","../object/hive_object.dart","../object/hive_object_internal.dart","../box/change_notifier.dart","../box/keystore.dart","../binary/frame.dart","../backend/storage_backend_memory.dart","../registry/type_adapter.dart","../adapters/date_time_adapter.dart","../adapters/big_int_adapter.dart","../hive_impl.dart","../annotations/hive_field.dart","../annotations/hive_type.dart","../box/box.dart","../box/box_base.dart","../box/lazy_box.dart","../crypto/hive_aes_cipher.dart","../crypto/hive_cipher.dart","../hive.dart","../hive_error.dart","../object/hive_collection.dart","../object/hive_list.dart","../object/hive_storage_backend_preference.dart","../registry/type_registry.dart","../../hive.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBAQW,MACK;UACJ;UACI;AAEc,MAA1B,WAAM;IACR;;;;EAeF;;;;;;;;;;IA0BA;;;;;;;;;;;;;;;;IC5CoB;;;;;;;;;gBAKT,MACK;UACJ;UACI;AAJmB;AAMzB,sBAAU,AAAO;AACvB,YAAI,AAAQ,OAAD;AAE4E,UADrF,WAAM,mBACF;;AAEA,mBAAM,MAAM,AAAQ,OAAD,QAAM,IAAI,YAAW,oBACzB,QAAoB;AACjC,sBAAM,AAAM,AAAO,KAAR;AACjB,qBAAW,OAAQ,SAAQ;AACuB,cAA5C,WAAJ,GAAG,wBAAmB,IAAI,mBAAiB;;;AAG/C,cAAO,iDAAc,GAAG,EAAE,QAAQ;MACpC;;;AAGmB,YAAQ,gBAAR,AAAI;IAAK;eAGe;UACjC;UAEF;AAH2B;;AAIjC,aAAK,AAAS,uBAAS,IAAI;AAEmD,UAD5E,WAAM,mBACF,AAAuE,mBAAvD,IAAI;;AAEpB,gBAAI,AAAW,8BAAW,QAAC,OAAQ,AAAI,AAAK,GAAN,UAAS,IAAI;AACzD,YAAI,CAAC,KAAI,CAAC;AACR,gBAAqB,gDAAd,AAAU,wBAAC,CAAC;;AAEf,mBAAwD,MAArB,oEAA7B,UAAU,eAAV,OAAY,GAAK,IAAI,EAAE,SAAM,cACrC,sDAAiB,IAAI,EAAE;AAC3B,YAAI,OAAO;AACkC,UAA3C,AAAI,AAAO,GAAR,kBAAe,MAAM,AAAI,GAAD;;AAEV,QAAnB,AAAW,uBAAI,GAAG;AAClB,cAAO,IAAG;MACZ;;gBAQ0B;UACV;UACT;AAHiB;;AAKa,QAAnC,AAAS,QAAD,WAAR,WAAkB,AAAS,2BAAlB;AACT,YAAI;AACY,UAAd,MAAM,AAAM,MAAA;AACZ;;AAEY,QAAd,kBAAY;AACE,QAAd,MAAM,AAAM,MAAA;AACN,oBACF,0CAA4D,sBAAV,aAAa;AACnD,QAAhB,kBAAY;AACZ,YAAI,AAAM,KAAD,YAAU;AACb,kBAAM,AAAI,yBAAY,QAAQ,EAAE,QAAQ,GAAG,aAAa,WAAhB;AAC9C,iBAAW,MAAO,MAAK;AACb,UAAR,AAAG,GAAA,CAAC,GAAG;;AAEU,QAAnB,MAAM,AAAI,GAAD;AACT;MACF;;;AAGgB,YAAA,AAAI;IAAO;;AAGA;AACnB,sBAAU,AAAO;AACvB,iBAAW,MAAO;AACE,UAAlB,AAAI,AAAO,GAAR;AACmB,UAAtB,AAAI,GAAD,gBAAe;;AAEF,QAAlB,AAAW;AACA,QAAX,AAAI;AACJ,YAAI,AAAQ,OAAD,YAAY,AAAI,AAAK;AAC0B,UAAxD,WAAM,mBAAU;;AAEe,QAAjC,AAAQ,OAAD,kBAAwB,eAAR,AAAI;MAC7B;;;0DA7FmB,KAAU;IAgDH,mBAAa;IAEO;IAlD3B;IAAU;;EAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAkGzB;;;;;;MAEO;;;;;;;;;iBAiB0B;AAAf;AACvB,0BAAY;AAClB,cAAI,SAAS,UAAU,MAAO,AAAU,UAAD;AACgB,UAAvD,AAAI,GAAD,WAAH,MAAQ,AAAc,AAAI,uCAAY,WAAM,cAAxC;AACE,sBAAQ,AAAI,GAAD,eAAa;AACxB,wBAAU,AAAM,KAAD,cAAY;AACJ,UAA7B,MAAM,AAAQ,AAAU,OAAX;AACM,qBACV,sBAAmC,iBAAf,YAAf,AAAQ,OAAD;AACK,UAA1B,oBAAc,AAAK,IAAD;AAClB,gBAAO,KAAI;QACb;;mBAGkD;AAAf;AACsB,UAAvD,AAAI,GAAD,WAAH,MAAQ,AAAc,AAAI,uCAAY,WAAM,cAAxC;AACE,sBAAQ,AAAI,GAAD,eAAa;AACxB,oBAAiB;AACjB,6BAAe,AAAM,KAAD,4BAAyB;AACnD,8CAA2B,YAAY;;;kBAAtB;;AAC8B,gBAA7C,AAAG,GAAA,QAAY,eAAX,AAAO,MAAD,OAA+B,KAAb,AAAO,MAAD;;;;YADnB;;AAGjB,gBAAO,IAAG;QACZ;;UAGsB,KAAmB;AAA3B;AACZ,cAAI,AAAO,2BAAY,GAAG,GAAG,MAAO,AAAM,qBAAC,GAAG;AACS,UAAvD,AAAI,GAAD,WAAH,MAAQ,AAAc,AAAI,uCAAY,WAAM,cAAxC;AACE,sBAAQ,AAAI,GAAD,eAAa;AACgB,UAA9C,AAAM,oBAAC,GAAG,EAA+B,YAA3B,MAAM,AAAM,KAAD,aAAW,GAAG;AACvC,gBAAO,AAAM,qBAAC,GAAG;QACnB;;aAGqC,MAAoB;AAAlC;AACrB,eAAK,AAAK,IAAD,OAAK,QAAC,QAAS,AAAO,2BAAY,GAAG;AAC5C,kBAAO,AAAK,AAA0B,KAA3B,iBAAK,QAAC,OAAQ,AAAM,oBAAC,GAAG;;AAEkB,UAAvD,AAAI,GAAD,WAAH,MAAQ,AAAc,AAAI,uCAAY,WAAM,cAAxC;AACE,sBAAQ,AAAI,GAAD,eAAa;AACxB,sBAAO,MAAa,gCAAK,AAAK,IAAD,qBAAW,UAAN,KAAK;AAC7C,mBAAS,IAAI,GAAG,AAAE,CAAD,GAAG,AAAK,IAAD,WAAS,IAAA,AAAC,CAAA;AACD,YAA/B,AAAM,oBAAC,AAAI,IAAA,QAAC,CAAC,GAAa,YAAR,AAAI,IAAA,QAAC,CAAC;;AAE1B,gBAAO,AAAK,KAAD;QACb;;UAGwB,KAAO,KAAc;;AAA7B;;AACD;AACb,cAAgB,0BAAZ,WAAW;AACI,YAAjB,MAAM,WAAW;;AAEnB,cAAI,AAAI,GAAD;AACL,kBAAO,aAAO,GAAG,EAAE,GAAG;;AAElB,yBAAW,AAAc;AAC/B,cAAI,QAAQ;AAC+B,YAAzC,AAAS,QAAD,OAAK,QAAC,OAAQ,SAAI,GAAG,EAAE,GAAG,EAAE,GAAG;AACtB,YAAjB,AAAM,oBAAC,GAAG,EAAI,GAAG;AACI,iBAArB;gCAAa,OAAI,GAAG;AACpB;;AAGsD,UAAxD,AAAI,GAAD,WAAH,MAAQ,AAAc,AAAI,uCAAY,WAAM,eAAxC;AACE,sBAAQ,AAAI,GAAD,eAAa;AACL,UAAzB,MAAM,AAAM,KAAD,OAAK,GAAG,EAAE,GAAG;AACP,UAAjB,AAAM,oBAAC,GAAG,EAAI,GAAG;AACI,gBAArB;+BAAa,QAAI,GAAG;AACpB;QACF;;aAG2B,KAAmB;AAA3B;;AACX,yBAAW,AAAc;AAC/B,cAAI,QAAQ;AAC6B,YAAvC,AAAS,QAAD,OAAK,QAAC,OAAQ,YAAO,GAAG,EAAE,GAAG;AACnB,YAAlB,AAAM,oBAAC,GAAG,EAAI;AACU,iBAAxB;gCAAa,UAAO,GAAG;AACvB;;AAGsD,UAAxD,AAAI,GAAD,WAAH,MAAQ,AAAc,AAAI,uCAAY,WAAM,eAAxC;AACE,sBAAQ,AAAI,GAAD,eAAa;AACP,UAAvB,MAAM,AAAM,KAAD,UAAQ,GAAG;AACJ,UAAlB,AAAM,oBAAC,GAAG,EAAI;AACU,gBAAxB;+BAAa,WAAO,GAAG;AACvB;QACF;;gBAGoC,MAAoB;AAAlC;;AACd,yBAAW,AAAc;AAC/B,cAAI,QAAQ;AACiC,YAA3C,AAAS,QAAD,OAAK,QAAC,OAAQ,eAAU,IAAI,EAAE,GAAG;AACzC,qBAAS,MAAO,KAAI;AACA,cAAlB,AAAM,oBAAC,GAAG,EAAI;;AAEY,iBAA5B;gCAAa,aAAU,IAAI;AAC3B;;AAGsD,UAAxD,AAAI,GAAD,WAAH,MAAQ,AAAc,AAAI,uCAAY,WAAM,eAAxC;AACE,sBAAQ,AAAI,GAAD,eAAa;AAC9B,mBAAW,MAAO,KAAI;AACG,YAAvB,MAAM,AAAM,KAAD,UAAQ,GAAG;AACJ,YAAlB,AAAM,oBAAC,GAAG,EAAI;AACc,kBAA5B;iCAAa,cAAU,IAAI;;AAE7B;QACF;;YAGiC;AAAf;AACV,yBAAW,AAAc;AAC/B,cAAI,QAAQ;AACS,YAAnB,AAAS,QAAD,iBAAK;AACC,YAAd,AAAO;AACW,YAAlB,oBAAc;AACd;;AAGsD,UAAxD,AAAI,GAAD,WAAH,MAAQ,AAAc,AAAI,uCAAY,WAAM,eAAxC;AACE,sBAAQ,AAAI,GAAD,eAAa;AACX,UAAnB,MAAM,AAAM,KAAD;AACG,UAAd,AAAO;AACW,UAAlB,oBAAc;AACd;QACF;;;AAGwB,cAAO;MAAO;;kCAjJnB,MAAW;MAHR,eAAS;MAClB;MAEM;MAAW;AAC5B,YAAQ,OAAF,gCACA,YAAF,qBACE,eAAF,qBACE,qBAAF,qBACE,2BAAF,qBACE,OAAF;AAEkI,QADpI,WAAM,mBACF,AAA+H,yBAAjH,AAAE,kCAAY;;IAEpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MCnHa;;;;;;MAIE;;;;;;MAMM;;;;;;;AAbc;MAAiB;;;AAoBnC;;MAAQ;mBAAR;;;MAAQ;;AAgBH;MAAC;;AAGJ;MAAK;;AAGJ,cAAA,AAAQ;MAAI;;AAInB,QAAX;AACA,cAAO,AAAS;MAClB;;AAIa,QAAX;AACA,cAAO,AAAS;MAClB;;AAGoB,cAAA,AAAO,iBAAG;MAAC;;AAGR,cAAA,AAAO,eAAE;MAAC;;AAK/B,aAAK;AAC4C,UAA/C,WAAM,uBAAU;;MAEpB;;YAGgC;AACnB,QAAX;AACA,cAAO,AAAS,2BAAW,GAAG;MAChC;YAGkB;AACL,QAAX;AACA,cAA4B,AAAE,gBAAvB,AAAS,oBAAM,KAAK;MAC7B;;AAIE,cAAO,AAAQ,yBAAW,WAAM,eAAU;MAC5C;kBAGyB;AACZ,QAAX;AACA,cAAO,AAAS,2BAAY,GAAG;MACjC;UAGyB,KAAO;;AAAU,2BAAO,uCAAC,GAAG,EAAE,KAAK;MAAE;aAGlC;AAAQ,8BAAU,CAAC,GAAG;MAAE;UAGlC;;AAAH;AACT,oBAAM,AAAS;AACE,UAArB,MAAM,SAAI,GAAG,EAAE,KAAK;AACpB,gBAAO,IAAG;QACZ;;aAGyC;;AAAb;AACtB,wBAAkB;AACtB,mBAAS,QAAS,OAAM;AACmB,YAAzC,AAAO,OAAA,QAAC,AAAS,+BAAmB,KAAK;;AAEtB,UAArB,MAAM,YAAO,OAAO;AACpB,gBAAO,AAAQ,QAAD;QAChB;;YAGuB,OAAS;;AAC9B,cAAO,aAAO,uCAAsB,AAAE,eAAvB,AAAS,oBAAM,KAAK,QAAQ,KAAK;MAClD;eAG0B;AACxB,cAAO,aAA4B,AAAE,eAAvB,AAAS,oBAAM,KAAK;MACpC;;AAGiB;AACJ,UAAX;AAEqB,UAArB,MAAM,AAAQ;AACd,gBAAO,AAAS;QAClB;;;AAGoB;AACP,UAAX;AAEA,eAAK,AAAQ,iCAAoB;AACjC,cAAI,AAAS,AAAe,iCAAG,GAAG;AAEI,UAAtC,MAAM,AAAQ,qBAAQ,AAAS;AACD,UAA9B,AAAS;QACX;;;;AAKE,iBAAwB,AAAS,2BAAQ,AAAS,8BAA9C,AAAmB;AACrB,gBAAO;;AAGT,cAAc;MAChB;;AAGkB;AAChB,eAAK,aAAO;AAEC,UAAb,cAAQ;AACc,UAAtB,MAAM,AAAS;AACS,UAAxB,AAAK,wBAAc;AAEE,UAArB,MAAM,AAAQ;QAChB;;;AAG2B;AACzB,cAAI;AACW,YAAb,cAAQ;AACc,YAAtB,MAAM,AAAS;AACS,YAAxB,AAAK,wBAAc;;AAGS,UAA9B,MAAM,AAAQ;QAChB;;;gCArJO,MACA,MACU,eACV,qBACA;qCAVU;MAEZ,cAAQ;MAIN;MACA;MAEA;MACA;AAEqD,MAA1D,gBAAW,4BAAS,MAAM,0CAAkB,aAAa;IAC3D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MCpBW;;;;;;;;;UAGY;YAAS;;AAAlB;AACD,UAAX;AAEI,sBAAQ,AAAS,kBAAI,GAAG;AAE5B,cAAI,KAAK;AACH,yBAAQ,MAAM,AAAQ,uBAAU,KAAK;AACzC,gBAAU,+BAAN,KAAK;AACc,cAAf,uCAAN,KAAK,EAAM,GAAG,EAAE;;AAElB,kBAAa,aAAN,KAAK;;AAEZ,gBAAI,YAAY,YAAyB,+BAAb,YAAY;AACV,cAAf,uCAAb,YAAY,EAAM,GAAG,EAAE;;AAEzB,kBAAO,aAAY;;QAEvB;;YAGqB;AACnB,cAAO,UAAI,AAAS,oBAAM,KAAK;MACjC;aAG0C;;AAAvB;AACN,UAAX;AAEI,uBAAgB;AACpB,mBAAS,MAAO,AAAQ,QAAD;AACe,YAApC,AAAO,MAAD,OAAK,qBAAM,GAAG,EAAE,AAAO,OAAA,QAAC,GAAG;AACjC,gBAAQ,YAAJ,GAAG;AAC4B,cAAjC,AAAS,kCAAoB,GAAG;;;AAIpC,cAAI,AAAO,MAAD,YAAU;AACa,UAAjC,MAAM,AAAQ,yBAAY,MAAM;AAEhC,mBAAS,QAAS,OAAM;AACtB,gBAAgB,+BAAZ,AAAM,KAAD;AAC+C,cAArB,uCAApB,+BAAZ,AAAM,KAAD,SAAgC,AAAM,KAAD,MAAM;;AAEjB,YAAlC,AAAS,qBAAO,KAAK,SAAQ;;AAGE,UAAjC,MAAM;QACR;;gBAGyC;AAAnB;AACT,UAAX;AAEI,uBAAgB;AACpB,mBAAS,MAAO,KAAI;AAClB,gBAAI,AAAS,0BAAY,GAAG;AACI,cAA9B,AAAO,MAAD,OAAW,yBAAQ,GAAG;;;AAIhC,cAAI,AAAO,MAAD,YAAU;AACa,UAAjC,MAAM,AAAQ,yBAAY,MAAM;AAEhC,mBAAS,QAAS,OAAM;AACA,YAAtB,AAAS,qBAAO,KAAK;;AAGU,UAAjC,MAAM;QACR;;;AAGkB;AACK,UAArB,MAAM,AAAQ;QAChB;;;gCApFW,MACF,MACQ,eACI,oBACJ;MAIN,aAAO;AAHd,2CAAM,IAAI,EAAE,IAAI,EAAE,aAAa,EAAE,kBAAkB,EAAE,OAAO;;IAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MCEtD;;;;;;;;;;AAIE,QAAX;AAEA,cAAO,AAAS;MAClB;;YAGmC;YAAkB;AACxC,QAAX;AAEA,cAAO,AAAS,gCAAiB,QAAQ,EAAE,MAAM;MACnD;UAGe;YAAS;;AACX,QAAX;AAEI,oBAAQ,AAAS,kBAAI,GAAG;AAC5B,YAAI,KAAK;AACP,gBAAmB,aAAZ,AAAM,KAAD;;AAEZ,cAAI,YAAY,YAAyB,+BAAb,YAAY;AACV,YAAf,uCAAb,YAAY,EAAM,GAAG,EAAE;;AAEzB,gBAAO,aAAY;;MAEvB;YAGa;;AACA,QAAX;AAEA,cAAoC,mBAA7B,AAAS,oBAAM,KAAK,gBAAX,OAAc;MAChC;aAGoC;;AAC9B,qBAAgB;AACpB,iBAAS,MAAO,AAAQ,QAAD;AACe,UAApC,AAAO,MAAD,OAAK,qBAAM,GAAG,EAAE,AAAO,OAAA,QAAC,GAAG;;AAGnC,cAAO,oBAAa,MAAM;MAC5B;gBAGyC;AACnC,qBAAgB;AACpB,iBAAS,MAAO,KAAI;AAClB,cAAI,AAAS,0BAAY,GAAG;AACI,YAA9B,AAAO,MAAD,OAAW,yBAAQ,GAAG;;;AAIhC,cAAO,oBAAa,MAAM;MAC5B;qBAEsC;AAAb;AACZ,UAAX;AAEA,eAAK,AAAS,+BAAiB,MAAM,GAAG;AAExC;AACmC,YAAjC,MAAM,AAAQ,yBAAY,MAAM;AACJ,YAA5B,AAAS;;gBACF;AAAP;AAC4B,cAA5B,AAAS;AACF,cAAP;;;;AAG+B,UAAjC,MAAM;QACR;;;AAIM,kBAAkB;AACtB,iBAAS,QAAS,AAAS;AACQ,UAAjC,AAAG,GAAA,QAAC,AAAM,KAAD,MAAoB,KAAZ,AAAM,KAAD;;AAExB,cAAO,IAAG;MACZ;;AAGkB;AACK,UAArB,MAAM,AAAQ;QAChB;;;4BAhGW,MACF,MACQ,eACI,oBACJ;MAIN,cAAO;AAHd,uCAAM,IAAI,EAAE,IAAI,EAAE,aAAa,EAAE,kBAAkB,EAAE,OAAO;;IAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBCRrD,OACA,UACG,UACD;AAER,mBAAS,4CAAiB,KAAK,EAAE,QAAQ;AAE7C,aAAO,AAAO,MAAD,oBAAmB;AAC1B,0BAAc,AAAO,MAAD;AAEpB,oBAAQ,AAAO,MAAD,oBACR,MAAM,QACR,oBACO,WAAW;AAE1B,YAAI,AAAM,KAAD,UAAU,MAAO,YAAW;AAEC,QAA9B,AAAE,eAAV,QAAQ,SAAS,KAAK,WAAU;;AAGlC,YAAO,EAAC;IACV;;;;;;;EACF;;;;;;;;;;;;;;;;;;;;ECiCA;;;;;;MA5De,6BAAW;;;;;;ACoB6B,MAAjC,kCAAlB,0BAA+B,yBAAK,AAAQ,2BAA1B;AAClB,YAAwB,gBAAjB;IACT;;;;;;;oBAYuB;AACrB,UAAI,AAAQ,AAAO,AAAU,0BAAR,gBAAU,KAAK;AACR,QAA1B,0BAAoB,KAAK;;IAE7B;0BAE6B;AAEvB,oBAAU,iDAA+B,CAAjB,AAAQ,gBAAE,KAAK,IAAI;AAC3C,sBAAY,uCAAU,OAAO;AACM,MAAvC,AAAU,SAAD,YAAU,GAAG,eAAS;AACZ,MAAnB,iBAAU,SAAS;AACK,MAAxB,0BAAoB;IACtB;gBAIyB;AACU,MAAnB,+CAAa,KAAK;AAE5B,mBAAS,AAAM,KAAD;AACG,MAArB,oBAAc,MAAM;AAC8B,MAAlD,AAAQ,0BAAS,eAAS,AAAQ,gBAAE,MAAM,EAAE,KAAK;AAChC,MAAjB,gBAAA,AAAQ,gBAAG,MAAM;IACnB;cAKmB;;AACe,MAAlB,0CAAa,IAAI;AAEf,MAAhB,oBAAc;AACW,MAAzB,AAAO,uBAAQ,oBAAP,qBAAO,QAAM,IAAI;IAC3B;cAGmB;;AACgB,MAAnB,0CAAa,KAAK;AAEhB,MAAhB,oBAAc;AACY,MAA1B,AAAO,uBAAQ,oBAAP,qBAAO,QAAM,KAAK;AACK,MAA/B,AAAO,uBAAQ,qBAAP,sBAAO,SAAM,AAAM,KAAD,cAAI;IAChC;eAGoB;AACe,MAAnB,0CAAa,KAAK;AAEhB,MAAhB,oBAAc;AACmC,MAAjD,AAAU,2BAAS,eAAS,KAAK,EAAS;AAC9B,MAAZ,gBAAA,AAAQ,gBAAG;IACb;gBAKqB;AACc,MAAnB,0CAAa,KAAK;AAEhB,MAAhB,oBAAc;AACqB,MAA3B,mCAAR,gBAAoB,eAAS,KAAK;AACtB,MAAZ,gBAAA,AAAQ,gBAAG;IACb;aAGkB;AACa,MAA7B,iBAAY,AAAM,KAAD;IACnB;gBAGwB;AACW,MAAnB,6CAAa,KAAK;AAEhB,MAAhB,oBAAc;AACqC,MAAnD,AAAU,6BAAW,eAAS,KAAK,EAAS;AAChC,MAAZ,gBAAA,AAAQ,gBAAG;IACb;cAGoB;AACe,MAAnB,2CAAa,KAAK;AAER,MAAxB,eAAU,KAAK,GAAG,IAAI,CAAP;IACjB;gBAIS;UACF;UACwB;AAEI,MAAnB,6CAAa,KAAK;AAE5B,kBAAQ,AAAQ,OAAD,SAAS,KAAK;AACjC,UAAI,cAAc;AACS,QAAzB,iBAAY,AAAM,KAAD;;AAEH,MAAhB,gBAAU,KAAK;IACjB;kBAG6B;UAAa;AACP,MAAnB,+CAAa,KAAK;AAEhC,UAAI,WAAW;AACY,QAAzB,iBAAY,AAAM,KAAD;;AAEH,MAAhB,gBAAU,KAAK;IACjB;iBAG4B;UAAY;AACN,MAAlB,+CAAa,IAAI;AAE3B,mBAAS,AAAK,IAAD;AACjB,UAAI,WAAW;AACM,QAAnB,iBAAY,MAAM;;AAEK,MAAzB,oBAAc,AAAO,MAAD,GAAG;AACnB,qBAAW;AACf,eAAS,IAAI,GAAG,AAAE,CAAD,GAAG,MAAM,EAAE,IAAA,AAAC,CAAA;AACoC,QAA/D,AAAS,QAAD,cAAY,eAAS,AAAI,AAAI,IAAJ,QAAC,CAAC,gBAAqB;AAC5C,QAAZ,gBAAA,AAAQ,gBAAG;;IAEf;oBAGkC;UAAY;AACZ,MAAlB,kDAAa,IAAI;AAE3B,mBAAS,AAAK,IAAD;AACjB,UAAI,WAAW;AACM,QAAnB,iBAAY,MAAM;;AAEK,MAAzB,oBAAc,AAAO,MAAD,GAAG;AACnB,qBAAW;AACf,eAAS,IAAI,GAAG,AAAE,CAAD,GAAG,MAAM,EAAE,IAAA,AAAC,CAAA;AACyB,QAApD,AAAS,QAAD,cAAY,eAAS,AAAI,IAAA,QAAC,CAAC,GAAU;AACjC,QAAZ,gBAAA,AAAQ,gBAAG;;IAEf;kBAG8B;;UAAY;AACR,MAAlB,gDAAa,IAAI;AAE3B,mBAAS,AAAK,IAAD;AACjB,UAAI,WAAW;AACM,QAAnB,iBAAY,MAAM;;AAEC,MAArB,oBAAc,MAAM;AACpB,eAAS,IAAI,GAAG,AAAE,CAAD,GAAG,MAAM,EAAE,IAAA,AAAC,CAAA;AACS,QAApC,AAAO,uBAAQ,oBAAP,qBAAO,QAAM,AAAI,IAAA,QAAC,CAAC,IAAI,IAAI;;IAEvC;oBAIe;UACR;UACwB;AAEG,MAAlB,kDAAa,IAAI;AAE/B,UAAI,WAAW;AACW,QAAxB,iBAAY,AAAK,IAAD;;AAElB,eAAS,MAAO,KAAI;AACd,uBAAW,AAAQ,OAAD,SAAS,GAAG;AACN,QAA5B,iBAAY,AAAS,QAAD;AACD,QAAnB,gBAAU,QAAQ;;IAEtB;cAGoB;UAAY;AACE,MAAlB,2CAAa,IAAI;AAE/B,UAAI,WAAW;AACW,QAAxB,iBAAY,AAAK,IAAD;;AAElB,eAAS,IAAI,GAAG,AAAE,CAAD,GAAG,AAAK,IAAD,WAAS,IAAA,AAAC,CAAA;AAClB,QAAd,yBAAM,AAAI,IAAA,QAAC,CAAC;;IAEhB;aAGoC;UAAW;AACd,MAAjB,0CAAa,GAAG;AAE9B,UAAI,WAAW;AACU,QAAvB,iBAAY,AAAI,GAAD;;AAEjB,eAAS,MAAO,AAAI,IAAD;AACP,QAAV,yBAAM,GAAG;AACM,QAAf,yBAAM,AAAG,GAAA,QAAC,GAAG;;IAEjB;aAGsB;AACW,MAAjB,6CAAa,GAAG;AAE9B,UAAQ,OAAJ,GAAG;AAC8B,QAAnC;AACI,oBAAqB,AAAY,sCAAQ,GAAG;AACzB,QAAvB,eAAU,AAAM,KAAD;AACC,QAAhB,gBAAU,KAAK;;AAEc,QAA7B;AACuB,QAAvB,iBAAgB,YAAJ,GAAG;;IAEnB;kBAG4B;UAAY;AACN,MAAlB,+DAAa,IAAI;AAE/B,UAAI,WAAW;AACW,QAAxB,iBAAY,AAAK,IAAD;;AAEd,oBAAgB,AAAiB,qCAAtB,IAAI;AACM,MAAzB,eAAU,AAAQ,OAAD;AACW,MAA5B,gBAAU,AAAQ,OAAD;AACjB,eAAS,MAAO,KAAI;AACD,QAAjB,cAAS,AAAI,GAAD;;IAEhB;eAGqB;;UAAoB;AACN,MAAnB,8CAAa,KAAK;AAE5B,wBAAc;AACF,MAAhB,oBAAc;AACF,MAAZ,gBAAA,AAAQ,gBAAG;AAEQ,MAAnB,cAAS,AAAM,KAAD;AAEd,WAAK,AAAM,KAAD;AACR,YAAI,AAAO,MAAD;AACU,UAAlB,yBAAM,AAAM,KAAD;;AAEwB,UAAnC,oBAAe,AAAM,KAAD,QAAQ,MAAM;;;AAIlC,wBAAc,AAAQ,AAAc,gBAAZ,WAAW,GAAG;AACG,MAArC,mCAAR,gBAAoB,WAAW,EAAE,WAAW;AAExC,gBAAY,oBACd,yBACQ,WAAW,UACX,AAAY,WAAD,GAAG,SACS,YAA1B,MAAM,eAAN,OAAQ,uBAAR,cAA6B;AAEpB,MAAhB,iBAAY,GAAG;AAEf,YAAO,YAAW;IACpB;aAGgB;UAAa;AAC3B,UAAI,AAAM,KAAD;AACP,YAAI,WAAW;AACkB,UAA/B;;YAEG,KAAU,YAAN,KAAK;AACd,YAAI,WAAW;AACiB,UAA9B;;AAEa,QAAf,cAAS,KAAK;YACT,KAAU,OAAN,KAAK;AACd,YAAI,WAAW;AACoB,UAAjC;;AAEgB,QAAlB,iBAAY,KAAK;YACZ,KAAU,OAAN,KAAK;AACd,YAAI,WAAW;AACkB,UAA/B;;AAEc,QAAhB,eAAU,KAAK;YACV,KAAU,OAAN,KAAK;AACd,YAAI,WAAW;AACoB,UAAjC;;AAEgB,QAAlB,iBAAY,KAAK;YACZ,KAAU,aAAN,KAAK;AAC6B,QAA3C,iBAAW,KAAK,gBAAe,WAAW;YACrC,KAAU,YAAN,KAAK;AACd,YAAI,WAAW;AACiB,UAA9B;;AAEa,QAAf,cAAS,KAAK;;AAEV,uBAAW,AAAc,yCAAoB,KAAK;AACtD,YAAI,AAAS,QAAD;AAEmC,UAD7C,WAAM,uBAAS,AAAC,0CAAqC,iBAAN,KAAK,KAAa,OAC7D;;AAEN,YAAI,WAAW;AACa,UAA1B,eAAU,AAAS,QAAD;;AAEe,QAAnC,AAAS,AAAQ,QAAT,eAAe,MAAM,KAAK;;IAEtC;iBAIqB;UAAa;AAChC,UAAU,iCAAN,KAAK;AACP,YAAI,WAAW;AACsB,UAAnC;;AAEkB,QAApB,mBAAc,KAAK;YACd,KAAI,AAAM,KAAD,YAAU;AACxB,YAAI,WAAW;AACkB,UAA/B;;AAEc,QAAhB,eAAU,KAAK;YACV,KAAU,wBAAN,KAAK;AACd,YAAI,WAAW;AACsB,UAAnC;;AAEkB,QAApB,mBAAc,KAAK;YACd,KAAU,iBAAN,KAAK;AACd,YAAI,WAAW;AACqB,UAAlC;;AAEiB,QAAnB,kBAAa,KAAK;YACb,KAAU,oBAAN,KAAK;AACd,YAAI,WAAW;AACwB,UAArC;;AAEoB,QAAtB,qBAAgB,KAAK;YAChB,KAAU,kBAAN,KAAK;AACd,YAAI,WAAW;AACsB,UAAnC;;AAEkB,QAApB,mBAAc,KAAK;YACd,KAAU,oBAAN,KAAK;AACd,YAAI,WAAW;AACwB,UAArC;;AAEoB,QAAtB,qBAAgB,KAAK;;AAErB,YAAI,WAAW;AACkB,UAA/B;;AAEc,QAAhB,eAAU,KAAK;;IAEnB;mBAK4B,OAAkB;;UACpC;AACJ,8BAAc,4CAAiB,uBAAjB;AACd,+BAAM,KAAK,gBAAe,WAAW;;;AACrC,gBAAM,AAAY,WAAD;AACjB,sBAAY,AAAY,WAAD;AAEgB,MAA3C,oBAAc,AAAO,MAAD,kBAAkB,GAAG;AAErC,gBAAM,AAAO,MAAD,SAAS,GAAG,EAAE,GAAG,SAAS,EAAE,gBAAS;AAEvC,MAAd,gBAAA,AAAQ,gBAAG,GAAG;IAChB;;AAIE,YAAiB,2BAAK,AAAQ,yBAAQ,GAAG;IAC3C;wBAI4B;AAC1B,YAAO,AAAE,CAAD,GAAG;AACR,MAAD,IAAF,AAAE,CAAC,GAAH;AACW,MAAX,IAAE,CAAF,CAAC,GAAI,AAAE,CAAD,cAAI;AACC,MAAX,IAAE,CAAF,CAAC,GAAI,AAAE,CAAD,cAAI;AACC,MAAX,IAAE,CAAF,CAAC,GAAI,AAAE,CAAD,cAAI;AACC,MAAX,IAAE,CAAF,CAAC,GAAI,AAAE,CAAD,cAAI;AACE,MAAZ,IAAE,CAAF,CAAC,GAAI,AAAE,CAAD,cAAI;AACV,YAAO,AAAE,EAAD,GAAG;IACb;;sDA5Y8B;IAdpB,iBAAU;IAEV;IAEN,gBAAU;IAWM,uBAAe,uCAAb,YAAY;;EAAoB;6DAIrB,SAAc;IAnBrC,iBAAU;IAEV;IAEN,gBAAU;IAemB;IAAc;;EAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAtBhD,mDAAe;;;;;;;;;MCNlB;;;;;;;;;WAGW;AAAW;MAAI;YAGZ,QAAQ;;MAAM;;;MATP;;IAAY;;;;;;;;;;;;;;;;;;;;;;;;MCKzB;;;;;;MACR;;;;;;;;;yBAIsB;AAAU,cAAM,AAAY,kBAAlB,KAAK,UAAgB;MAAC;kBAEvC;AAAU,cAAM,MAAN,KAAK;MAAK;;oCAJxB,SAAc;MAAd;MAAc;;IAAO;;;;;;;;;;;;;;;;;;;;;;;;;AAWf,wBAAM;IAAoB;yBAGtB;AAAW,wBAAM;IAAoB;wBAG1C;AAAU,wBAAM;IAAoB;oBAGpC;AAAW,wBAAM;IAAoB;wBAGjC;UAAc;AACxC,wBAAM;IAAoB;uBAGU;UAC1B;UAAuB;AACjC,wBAAM;IAAoB;;AAGL,wBAAM;IAAoB;;;;EAxB1B;;;;;;;;;;;;;;;;;;;wBAuCoB;AAC1B;AACjB,eAAS,UAAW,AAAc;AAChC,YAAI,AAAQ,OAAD,oBAAoB,KAAK;AAClC,gBAAO,QAAO;;AAEhB,YAAI,AAAQ,OAAD,aAAa,KAAK,KAAK,AAAM,KAAD;AACtB,UAAf,QAAQ,OAAO;;;AAGnB,YAAO,MAAK;IACd;yBAG0C;AACxC,YAAO,AAAa,4BAAC,MAAM;IAC7B;uBAIiB;UACV;UACA;AAEL,UAAI,AAAE,yDAAc,AAAE;AAQnB,QAPD,WAAK,AACH,oEACA,uEACA,wEACA,qEACA,qEACA;;AAGA,mBAAS,AAAQ,OAAD;AACpB,WAAK,QAAQ;AACX,YAAI,AAAO,MAAD,GAAG,KAAK,AAAO,MAAD,GAAG;AACqB,UAA9C,WAAM,uBAAU,AAA6B,qBAApB,MAAM;;AAEA,QAAjC,SAAS,AAAO,MAAD;AAEX,yBAAa,0BAAqB,MAAM;AAC5C,YAAI,UAAU;AACZ,cAAI,QAAQ;AAOT,YAND,WAAK,AACH,gCAAyC,AAAY,iBAAvB,UAAU,eACxC,UAAQ,AAAQ,AAAY,OAAb,4BAAwB,2BACpC,AAAQ,OAAD,WAAQ,kDAClB,qEACA;;AAIwC,YAD1C,WAAM,uBAAS,AAAC,wCACZ,qBAAU,AAAO,MAAD,SAAmB;;;;AAKzC,qBAAW,iDAAmB,OAAO,EAAE,MAAM;AACjB,MAAhC,AAAa,2BAAC,MAAM,EAAI,QAAQ;IAClC;wBAG6B;UAAc;AACzC,WAAK,QAAQ;AACX,YAAI,AAAO,MAAD,GAAG,KAAK,AAAO,MAAD,GAAG;AACqB,UAA9C,WAAM,uBAAU,AAA6B,qBAApB,MAAM;;AAGA,QAAjC,SAAS,AAAO,MAAD;;AAGjB,YAAO,AAA6B,2BAAR,MAAM;IACpC;;AAGuB,MAArB,AAAc;IAChB;oBAGyB;AACuB,MAA9C,uCAAgB,sDAAsB,MAAM;IAC9C;;;;;;IArFM,sBAAsC;;EAsF9C;;;;;;;;;;;;;;;;;;;;MA5FgC,4CAAQ;;;MAIzB,mDAAe;;;;;;;;;;;;;;;;;EC8C9B;;;;;;MA9Fe,6BAAW;;;;;;;;;ACwBE,YAAA,AAAa,sBAAE;IAAO;;AAG3B;IAAO;2BAEE;AACR,MAApB,oBAAc,KAAK;AACW,MAA9B,qBAAe,AAAQ,iBAAE,KAAK;IAChC;;AAG8B,MAA5B,qBAAe;IACjB;oBAIuB;AACrB,UAAI,AAAQ,AAAQ,iBAAN,KAAK,GAAG;AAC2B,QAA/C,WAAM,wBAAW;;IAErB;SAKc;AACQ,MAApB,oBAAc,KAAK;AACH,MAAhB,iBAAA,AAAQ,iBAAG,KAAK;IAClB;;;AAMkB,MAAhB,oBAAc;AACd,YAAO,AAAO,yBAAQ,qBAAP,sBAAO;IACxB;cAKwB;AACF,MAApB,oBAAc,KAAK;AACH,MAAhB,iBAAA,AAAQ,iBAAG,KAAK;AAChB,YAAe,+BAAR,iBAAa,AAAQ,iBAAE,KAAK,EAAE,KAAK;IAC5C;cAGwB;AACF,MAApB,oBAAc,KAAK;AACnB,YAAe,+BAAR,iBAAa,gBAAS,KAAK;IACpC;;;AAIkB,MAAhB,oBAAc;AACd,YAA0B,EAAnB,AAAO,wBAAQ,qBAAP,sBAAO,UAAM,AAAO,AAAY,wBAAJ,sBAAP,uBAAO,YAAO;IACpD;;AAIkB,MAAhB,oBAAc;AACF,MAAZ,iBAAA,AAAQ,iBAAG;AACX,YAAO,AAAU,6BAAS,AAAQ,iBAAE,GAAU;IAChD;;AAMkB,MAAhB,oBAAc;AACF,MAAZ,iBAAA,AAAQ,iBAAG;AACX,YAAe,mCAAR,iBAAmB,AAAQ,iBAAE;IACtC;;AAIkB,MAAhB,oBAAc;AACd,YAAe,mCAAR,iBAAmB;IAC5B;;AAIE,YAAO,AAAa;IACtB;;AAIkB,MAAhB,oBAAc;AACV,kBAAQ,AAAU,8BAAW,gBAAgB;AACrC,MAAZ,iBAAA,AAAQ,iBAAG;AACX,YAAO,MAAK;IACd;;AAIE,YAAO,AAAW,mBAAE;IACtB;eAIU,kBACuB;AACL,MAA1B,AAAU,SAAD,WAAT,YAAc,oBAAJ;AACN,iBAAO,eAAU,SAAS;AAC9B,YAAO,AAAQ,QAAD,SAAS,IAAI;IAC7B;iBAG6B;AACJ,MAAvB,AAAO,MAAD,WAAN,SAAW,oBAAJ;AACc,MAArB,oBAAc,MAAM;AAChB,qBAAW,AAAQ,0BAAQ,gBAAS,AAAQ,8BAAE,MAAM;AACvC,MAAjB,iBAAA,AAAQ,8BAAG,MAAM;AACjB,YAAO,SAAQ;IACjB;gBAG4B;AACH,MAAvB,AAAO,MAAD,WAAN,SAAW,oBAAJ;AACkB,MAAzB,oBAAqB,aAAP,MAAM,IAAG;AACnB,qBAAW;AACX,iBAAO,qBAAiB,MAAM,EAAE,cAAa;AACjD,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,MAAM,GAAE,IAAA,AAAC,CAAA;AACkC,QAA7D,AAAI,IAAA,QAAC,CAAC,EAAI,AAAS,AAAmC,QAApC,cAAY,gBAAgB;AAClC,QAAZ,iBAAA,AAAQ,iBAAG;;AAEb,YAAO,KAAI;IACb;mBAGkC;AACT,MAAvB,AAAO,MAAD,WAAN,SAAW,oBAAJ;AACkB,MAAzB,oBAAqB,aAAP,MAAM,IAAG;AACnB,qBAAW;AACX,iBAAO,wBAAoB,MAAM,EAAE,gBAAe;AACtD,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,MAAM,GAAE,IAAA,AAAC,CAAA;AAC0B,QAArD,AAAI,IAAA,QAAC,CAAC,EAAI,AAAS,QAAD,cAAY,gBAAgB;AAClC,QAAZ,iBAAA,AAAQ,iBAAG;;AAEb,YAAO,KAAI;IACb;iBAG8B;;AACL,MAAvB,AAAO,MAAD,WAAN,SAAW,oBAAJ;AACc,MAArB,oBAAc,MAAM;AAChB,iBAAO,sBAAkB,MAAM,EAAE,kBAAiB;AACtD,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,MAAM,GAAE,IAAA,AAAC,CAAA;AACK,QAAhC,AAAI,IAAA,QAAC,CAAC,EAAI,AAAO,AAAY,wBAAJ,qBAAP,sBAAO,UAAM;;AAEjC,YAAO,KAAI;IACb;mBAIU,eACuB;AACR,MAAvB,AAAO,MAAD,WAAN,SAAW,oBAAJ;AACH,iBAAO,wBAAoB,MAAM,EAAE,eAAc;AACrD,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,MAAM,GAAE,IAAA,AAAC,CAAA;AACQ,QAAnC,AAAI,IAAA,QAAC,CAAC,EAAI,gBAAW,MAAM,OAAO;;AAEpC,YAAO,KAAI;IACb;aAGoB;AACK,MAAvB,AAAO,MAAD,WAAN,SAAW,oBAAJ;AACH,iBAAO,iBAAqB,MAAM,EAAE,iBAAgB;AACxD,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,MAAM,GAAE,IAAA,AAAC,CAAA;AACX,QAAhB,AAAI,IAAA,QAAC,CAAC,EAAI;;AAEZ,YAAO,KAAI;IACb;YAGkB;AACO,MAAvB,AAAO,MAAD,WAAN,SAAW,oBAAJ;AACH,gBAAwB;AAC5B,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,MAAM,GAAE,IAAA,AAAC,CAAA;AACP,QAApB,AAAG,GAAA,QAAC,aAAU;;AAEhB,YAAO,IAAG;IACZ;;AAIM,oBAAU;AACd,UAAI,AAAQ,OAAD;AACT,cAAO;YACF,KAAI,AAAQ,OAAD;AACZ,wBAAY;AAChB,cAAoB,AAAY,uCAAQ,eAAU,SAAS;;AAEO,QAAlE,WAAM,uBAAU;;IAEpB;iBAG4B;AACH,MAAvB,AAAO,MAAD,WAAN,SAAW,oBAAJ;AACH,0BAAgB;AAChB,oBAAiB,0BAAc,eAAU,aAAa;AACtD,iBAAO,iBAAqB,MAAM,EAAE,iBAAgB;AACxD,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,MAAM,GAAE,IAAA,AAAC,CAAA;AACR,QAAnB,AAAI,IAAA,QAAC,CAAC,EAAI;;AAGZ,YAAoB,8CAAK,OAAO,EAAE,IAAI;IACxC;;;UAIiB;UAAa;UAAkB;AAE9C,UAAI,AAAe,sBAAE,GAAG,MAAO;AAG3B,wBAAc;AAClB,UAAI,AAAY,WAAD,GAAG,GAAG,MAAO;AAG5B,UAAI,AAAe,sBAAE,AAAY,WAAD,GAAG,GAAG,MAAO;AAEzC,gBAAc,kCAAR,iBAAmB,AAAQ,AAAc,iBAAZ,WAAW,GAAG;AACjD,wBAAoB,oBACtB,0BACQ,AAAQ,iBAAE,WACV,AAAY,WAAD,GAAG,SACS,YAA1B,MAAM,eAAN,OAAQ,uBAAR,cAA6B;AAIpC,UAAI,WAAW,KAAI,GAAG,EAAE,MAAO;AAEM,MAArC,2BAAqB,AAAY,WAAD,GAAG;AAC7B;AACE,gBAAM;AAEd,UAAI,AAAe,wBAAG;AACM,QAA1B,QAAc,yBAAQ,GAAG;YACpB,KAAI,IAAI;AACU,QAAvB,QAAc,sBAAK,GAAG;YACjB,KAAI,AAAO,MAAD;AACW,QAA1B,QAAQ,qBAAM,GAAG,EAAE;;AAEsB,QAAzC,QAAQ,qBAAM,GAAG,EAAE,mBAAc,MAAM;;AAKjB,aAFxB,KAAK;MAAL;AACI,sBAAS,WAAW;AACpB,sBAAS,WAAW;;;AAEJ,MAApB,UAAK;AACQ,MAAb;AACO,MAAP,UAAK;AAEL,YAAO,MAAK;IACd;SAGmB;AACI,MAArB,AAAO,MAAD,WAAN,SAAW,kBAAJ;AACP,cAAQ,MAAM;;;AAEV,kBAAO;;;;AAEP,kBAAO;;;;AAEP,kBAAO;;;;AAEP,kBAAO;;;;AAEP,kBAAO;;;;AAEP,kBAAO;;;;AAEP,kBAAO;;;;AAEP,kBAAO;;;;AAEP,kBAAO;;;;AAEP,kBAAO;;;;AAEP,kBAAO;;;;AAEP,kBAAO;;;;AAEP,kBAAO;;;;AAEH,2BAAW,AAAc,yCAAqB,MAAM;AACxD,gBAAI,AAAS,QAAD;AAEmC,cAD7C,WAAM,uBAAS,AAAC,2CAA+B,MAAM,WACjD;;AAEN,kBAAO,AAAS,AAAQ,SAAT,cAAc;;;IAEnC;kBAKiC;AAC3B,sBAAY;AACZ,gBAAM,uCAAU,SAAS;AACzB,sBAAY,AAAO,MAAD,SAAS,iBAAS,gBAAS,SAAS,EAAE,GAAG,EAAE;AAC7C,MAApB,iBAAA,AAAQ,iBAAG,SAAS;AAEhB,wBAAc,4CAAiB,GAAG,EAAE,qBAAe,SAAS;AAChE,YAAO,AAAY,YAAD;IACpB;;sDAjUsB,SAAsB,cAAoB;;IAH5D,iBAAU;IAGQ;IACN,mBAAW,yBAAK,AAAQ,OAAD,WAAS,AAAQ,OAAD;IACnC,uBAAe,KAAb,YAAY,EAAZ,aAAgB,AAAQ,OAAD;IAC1B,sBAAe,MAAb,YAAY,EAAZ,cAAgB,AAAQ,OAAD;IACxB,sBAAe,uCAAb,YAAY;;EAAoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECgBxD;;;;;ICpBe;;;;;;IAYR;;;;;;;;;;AAHe;IAAI;iBAKE;AACxB,YAAO,AAAM,AAAO,AACW,MADnB,aAAW,AAAY,4DAC/B,AAAK,AAAI,KAAJ,QAAC,OAAM,AAAW,uDAAC,MACxB,AAAK,AAAI,KAAJ,QAAC,OAAM,AAAW,uDAAC;IAC9B;gBAI0B;AACpB,kBAAQ,AAAM,KAAD;AACjB,UAAI,AAAQ;AACV,YAAI,AAAM,KAAD;AACP,gBAAO,MAAK;cACP,KAAU,wBAAN,KAAK;AACd,eAAK,iBAAW,KAAK;AACnB,kBAAO,AAAM,MAAD;;cAET,KAAU,OAAN,KAAK,gBACN,OAAN,KAAK,iBACC,OAAN,KAAK,gBACC,iBAAN,KAAK,KACC,kBAAN,KAAK,KACC,oBAAN,KAAK;AACP,gBAAO,MAAK;;;AAIZ,wBAAc,4CAAiB;AACuB,MAA1D,AAAY,WAAD,eAAe,+DAA0B;AAEpD,UAAI,AAAQ;AACc,QAAxB,AAAY,WAAD,qBAAO,KAAK;;AAEoB,QAA3C,AAAY,WAAD,gBAAgB,KAAK,EAAS,eAAP;;AAGhC,kBAAQ,AAAY,WAAD;AACnB,oBAAU,AAAM,KAAD,WAAS,GAAG,AAAM,KAAD;AACpC,YAAO,AAAQ,QAAD;IAChB;gBAI4B;AAC1B,UAAU,yBAAN,KAAK;AACH,oBAAkB,0BAAK,KAAK;AAChC,YAAI,iBAAW,KAAK;AACd,uBAAS,4CAAiB,KAAK,EAAE;AACvB,UAAd,AAAO,MAAD,MAAM;AACZ,cAAI,AAAQ;AACV,kBAAO,AAAO,OAAD;;AAEb,kBAAO,AAAO,OAAD,eAAsB,eAAP;;;AAG9B,gBAAO,MAAK;;;AAGd,cAAO,MAAK;;IAEhB;aAI0B;AACxB,YAAO,AACF,AACA,2BADY,sBAAiB,KAAK,GAAG,cAAc,UAAjB,gBACtB;IACnB;;UAIoC;AAC9B,kBAAQ,cAAS;AAErB,UAAI,oBAAY,KAAK,EAAE,kBAAkB,MAAM;AACzC,wBAAY;AACZ,sBAAU,AAAgB,cAAP,oBAAkB;AAGvC,QAFF,AAAQ,AAAU,OAAX,oBAAkB,QAAC;AAC4B,UAApD,AAAU,SAAD,UAAyB,aAAf,AAAQ,OAAD;;AAI1B,QAFF,AAAQ,AAAQ,OAAT,kBAAgB,QAAC;AACiB,UAAvC,AAAU,SAAD,eAA4B,eAAb,AAAQ,OAAD;;AAEjC,cAAO,AAAU,UAAD;;AAEhB,cAAO,AAAM,AAA8B,AAAkB,MAAjD,4BAAyB,wBAAU,QAAC,KAAM,AAAE,CAAD;;IAE3D;;UAI0C;AACpC,kBAAQ,cAAS;AAErB,UAAI,oBAAY,KAAK,EAAE,cAAc,MAAM;AACrC,wBAAY;AACZ,sBAAU,AAAM,KAAD,UAAQ;AAIzB,QAHF,AAAQ,AAAU,OAAX,oBAAkB,QAAC;AACpB,uBAAyB,AAAS,aAAxB,AAAQ,OAAD,yCAAqB;AAChB,UAA1B,AAAU,SAAD,UAAU,MAAM;;AAIzB,QAFF,AAAQ,AAAQ,OAAT,kBAAgB,QAAC;AACiB,UAAvC,AAAU,SAAD,eAA4B,eAAb,AAAQ,OAAD;;AAEjC,cAAO,AAAU,UAAD;;AAEhB,cAAO,AAAM,AAA8B,AAAoB,MAAnD,4BAAyB,yBAAU,QAAC,KAAM,AAAE,CAAD;;IAE3D;eAIiB,UAAmB,UAAe;AAD7B;;AAEA,QAApB,mBAAY,QAAQ;AAChB,oBAAO,MAAM;AACjB,aAAK,IAAI;AACH,kBAAI;AACJ,wBAAS,MAAM;AACnB,mBAAS,QAAS,OAAM;AAClB,sBAAM,AAAI,IAAA,SAAE,KAAD,CAAC;AACiC,YAAjD,AAAS,QAAD,QAAQ,qBAAM,GAAG,EAAE,KAAK,YAAW;;;AAG7C,mBAAS,MAAO,KAAI;AAC6B,YAA/C,AAAS,QAAD,QAAc,sBAAK,GAAG,YAAW;;;AAI7C,cAAO;MACT;;cAGgC;AAAP;AACnB,qBAAQ,MAAM,AAAgB,cAAP,mBAAiB,AAAM,KAAD;AACjD,cAAO,kBAAY,KAAK;MAC1B;;gBAGqC;AAAb;AAClB,oBAAQ,cAAS;AACrB,iBAAS,QAAS,OAAM;AACtB,cAAI,AAAM,KAAD;AACsB,YAA7B,MAAM,AAAM,KAAD,UAAQ,AAAM,KAAD;;AAEsB,YAA9C,MAAM,AAAM,KAAD,OAAK,iBAAY,KAAK,GAAG,AAAM,KAAD;;;MAG/C;;YAG4C;AACH,MAAvC,WAAM,8BAAiB;IACzB;;AAIE,YAAO,AAAe,eAAN;IAClB;;AAIa,MAAX,AAAI;AACJ,YAAc;IAChB;;AAG2B;;AACnB,sBAAa,AAAQ,uBAAY,YACjC,AAAO,0BACW,AAAS;AAEwB,QAAzD,WAAM,AAAkD,qBAAxC,AAAI,oBAAK,SAAK,uBAAe;AAG7C,YAAiC,MAA7B,AAAI,2CAAA,OAAkB,iBAAU;AACM,UAAxC,MAAa,AAAE,eAAT,OAAO,mBAAyB,eAAR,AAAI;;AAE5B,oBACF,MAAa,AAAE,eAAT,OAAO,SAAe,eAAR,AAAI,6BAAgB,oBAAoB,QAAC;;AAC3D,uBAAqB,uBAAhB,AAAE,AAAO,CAAR;AACV,kBAAgC,CAAP,KAApB,AAAG,EAAD,mBAAC,aAAoB,4CAAa;AACF,gBAArC,AAAG,EAAD,mBAAmB;;;AAGzB,cAAgC,CAAP,MAApB,AAAG,EAAD,mBAAC,cAAoB;AACa,YAAvC,MAAM,AAAQ,OAAD,kBAAwB,eAAR,AAAI;;;MAGvC;;;AAGwB,YAAO;IAAO;;sDAzMhB,KAAU,SAAc,iBACpC;IAML,2BAAqB;IAPJ;IAAU;IAAc;IACpC;;EAAuC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MATpC,+CAAW;;;;;;ACRK,YAAG,AAAQ,wBAAY,YAC9C,AAAO,0BACW,AAAS;IAAS;SAGP,MAAc,MAAW,eAC5C,QAAgB;AADL;;AAGnB,4BAA0B,KAAX,UAAU,EAAV,aAAc,IAAI;AACjC,8BAAkB,AAAW,UAAD,WAAW,QAAQ,IAAI;AAErD,kBACA,MAAe,AAAE,eAAX,uBAAgB,YAAY,YAAW,oBAAoB,QAAC;;AAChE,qBAAqB,uBAAhB,AAAE,AAAO,CAAR;AACV,iBAAiC,CAAP,KAApB,AAAG,EAAD,mBAAC,aAAoB,4CAAa,eAAe;AAClB,cAArC,AAAG,EAAD,qBAAmB,eAAe;;;AAMxC,aAAiC,CAAP,MAApB,AAAG,EAAD,mBAAC,cAAoB,6CAAa,eAAe;AAEkB,UADzE,WACI,AAAoE,0BAA7C,eAAe,qBAAc,YAAY;AAUnE,UATD,MAAK,MAAe,AAAE,eAAX,uBACT,YAAY,YACe,cAAN,OAAX,AAAG,EAAD,UAAC,eAAW,aAAK,oBACZ,QAAC;;AACZ,uBAAqB,uBAAhB,AAAE,AAAO,CAAR;AACV,mBAAiC,CAAP,KAApB,AAAG,EAAD,mBAAC,aAAoB,4CAAa,eAAe;AAClB,gBAArC,AAAG,EAAD,qBAAmB,eAAe;;;;AAMyB,QAArE,WAAM,AAA8D,sBAA3C,eAAe,qBAAc,YAAY;AAElE,cAAO,6CAAiB,EAAE,EAAE,MAAM,EAAE,eAAe;MACrD;;cAG8B,MAAc,MAAc;AAApC;;AAC0B,QAA9C,WAAM,AAAuC,YAA9B,IAAI,qBAAK,UAAU;AAG5B,4BAA0B,KAAX,UAAU,EAAV,aAAc,IAAI;AACjC,8BAAkB,AAAW,UAAD,WAAW,QAAQ,IAAI;AAGzD,YAAI,AAAW,UAAD;AACiC,UAA7C,MAAe,AAAE,eAAX,iCAA0B,YAAY;;AAEtC,oBACF,MAAe,AAAE,eAAX,uBAAgB,YAAY,YAAW,oBAAoB,QAAC;;AAChE,uBAAqB,uBAAhB,AAAE,AAAO,CAAR;AACV,kBAAgC,CAAP,KAApB,AAAG,EAAD,mBAAC,aAAoB,4CAAa,eAAe;AACjB,gBAArC,AAAG,EAAD,mBAAmB,eAAe;;;AAGxC,cAAgC,CAAP,MAApB,AAAG,EAAD,mBAAC,cAAoB;AACa,YAA9B,AAAE,eAAX,iCAA0B,YAAY;;;MAG5C;;cAG8B,MAAc,MAAc;AAApC;;AAEd,4BAA0B,KAAX,UAAU,EAAV,aAAc,IAAI;AACjC,8BAAkB,AAAW,UAAD,WAAW,QAAQ,IAAI;AAEzD;AACM,wBAAU;AACd,cAAI,AAAW,UAAD;AAIV,YAHF,MAAe,AAAE,eAAX,uBAAgB,YAAY,YAAW,oBAAoB,QAAC;AACnC,gBAAT,AAAE,eAAtB,AAAE,AAAO,CAAR;AACc,gBAAf,UAAU;;;AAGN,sBACF,MAAe,AAAE,eAAX,uBAAgB,UAAU,YAAW,oBAAoB,QAAC;;AAC9D,yBAAqB,uBAAhB,AAAE,AAAO,CAAR;AACqD,gBAA/D,UAAsC,CAAP,KAApB,AAAG,EAAD,mBAAC,aAAoB,4CAAa,eAAe;;AAED,YAA/D,UAAsC,CAAP,MAApB,AAAG,EAAD,mBAAC,cAAoB,6CAAa,eAAe;;AAEhE,gBAAO,QAAO;;cACP;AAAP;AACA,kBAAO;;;;MAEX;;;;;;;;EACF;;;;;;;;;;;;;;;;kBC3FqC;AACjC,cAAQ,iBAAiB;;;AAErB,kBAAc;;;IAEpB;;;;EATkB;;;;;;;;;;UbsLN;;AAAU,0BAAM;MAAoB;aAGvB;;AAAW,0BAAM;MAAoB;;AAG7C,0BAAM;MAAoB;;AAG1B,0BAAM;MAAoB;;AAGxB,0BAAM;MAAoB;kBAG3B;AAAQ,0BAAM;MAAoB;aAGvC;AAAQ,0BAAM;MAAoB;gBAGtB;AAAS,0BAAM;MAAoB;eAGzC;AAAU,0BAAM;MAAoB;;AAG7B,0BAAM;MAAoB;;AAG/B,0BAAM;MAAoB;;AAGvB,0BAAM;MAAoB;;AAG9B,0BAAM;MAAoB;YAG9B;AAAU,0BAAM;MAAoB;;AAGlC,0BAAM;MAAoB;;AAG1B,0BAAM;MAAoB;;AAGxB,0BAAM;MAAoB;;AAG5B,0BAAM;MAAoB;;AAG1B,0BAAM;MAAoB;UAGlC,KAAO;;AAAU,0BAAM;MAAoB;aAGxB;;AAAY,0BAAM;MAAoB;YAGnD,OAAS;;AAAU,0BAAM;MAAoB;;YAGhD;AAAS,0BAAM;MAAoB;;AAG/B,0BAAM;MAAoB;;;;;;;IAC7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Ac7P6B;AACzB,mBAAS,QAAS;AAChB,kBAAM,AAAM,KAAD;;QAEf;;;AAIE,cAAO,AAAI,oBAAU;MACvB;;AAIE,cAAO,AAAM;MACf;;AAIE,cAAO,AAAK;MACd;qBAGgC;AAC9B,cAAW,AAAQ,aAAP,KAAK;MACnB;;AAIM,kBAAkB;AACtB,iBAAS,OAAQ;AACK,UAApB,AAAG,GAAA,QAAC,AAAK,IAAD,MAAQ,IAAI;;AAEtB,cAAO,IAAG;MACZ;;;;;;;IACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MC1Be;;;;;;;;;;;;;;AA8BX,YAAI,AAAU;AACZ,gBAAY,gBAAL;;AAEP,gBAAa;;MAEjB;;AAIE,YAAI,AAAK;AACH,oBAAa,AAAa,sBAAnB,wCAA8C;AACzD,cAAI,AAAI,GAAD;AAE8D,YADnE,WAAM,uBACF,AAA8D,kDAAhB,eAAO;gBACpD,MAAQ,YAAJ,GAAG;AAEwC,YADpD,WAAM,uBAAS,AAAC,eAAW,eAAO,uBAC9B;;AAEM,YAAV,aAAO,GAAG;;;AAGd,cAAW,gBAAJ;MACT;;AAIE,YAAI;AACoD,UAAtD,WAAM,uBAAU;;AAGlB,YAAI;AACE,yBAAc;AAClB,mBAAS,MAAgB,gBAAT;AACd,gBAAQ,+CAAJ,GAAG,EAAc;AACF,cAAjB,AAAS,QAAD,OAAK,GAAG;;;AAGA,UAApB,kBAAY,QAAQ;AACA,UAApB,qBAAe;cACV,KAAI,AAAU;AACf,qBAAU;AACd,mBAAS,MAAY,gBAAL;AACd,gBAAI,AAAI,qBAAY,GAAG;AACjB,wBAAmB,KAAb,AAAI,aAAI,GAAG;AACC,cAAlB,+CAAJ,GAAG,EAAc;AACJ,cAAb,AAAK,IAAD,OAAK,GAAG;;;AAGA,UAAhB,kBAAY,IAAI;;AAGlB,cAAgB,gBAAT;MACT;;AAIE,YAAI;AACF,mBAAS,UAAoB,gBAAT;AACU,YAApB,iDAAR,OAAO,EAAgB;;AAET,UAAhB,kBAAY;;AAGE,QAAhB,kBAAY;MACd;;AAIE,YAAI;AACiB,UAAnB,qBAAe;;MAEnB;6BAE4B;AAC1B,yBAAI,AAAI,GAAD,MAAQ;AACoD,UAAjE,WAAM,uBAAU,AAAgD,0CAAV,eAAO;;MAEjE;iBAGe;AACb,YAAI,AAAU,SAAD,GAAG,AAAS;AACvB,mBAAS,IAAI,SAAS,EAAE,AAAE,CAAD,GAAG,AAAS,wBAAQ,IAAA,AAAC,CAAA;AACZ,YAApB,iDAAZ,AAAQ,qBAAC,CAAC,GAAiB;;;AAGJ,QAA3B,AAAS,yBAAS,SAAS;MAC7B;;;;WAGsB;YAAS;;AACF,QAA3B,2BAAqB,KAAK;AACF,QAAlB,+CAAN,KAAK,EAAc;AAEf,uBAAW,AAAQ,qBAAC,KAAK;AACN,QAAvB,AAAQ,qBAAC,KAAK,EAAI,KAAK;AAEM,QAApB,iDAAT,QAAQ,EAAgB;;MAC1B;UAGW;;AACoB,QAA7B,2BAAqB,OAAO;AACF,QAAlB,+CAAR,OAAO,EAAc;AACA,QAArB,AAAS,oBAAI,OAAO;MACtB;aAGwB;;AACtB,iBAAS,UAAW,SAAQ;AACG,UAA7B,2BAAqB,OAAO;AACF,UAAlB,+CAAR,OAAO,EAAc;;AAEE,QAAzB,AAAS,uBAAO,QAAQ;MAC1B;;AAIE,YAAI;AACF,gBAAO,2CAAa,oBAAuB,AAAE,eAAX;;AAElC,gBAAoB,4CAAK,cAAS;;MAEtC;oBAI4B;AAAS,6BAAQ,IAAI;;;iCA9IhC;UAAe;MAXlB,cAAQ;MAMjB,qBAAe;MAEf,kBAAY;MAIH,iBAAE,AAAI,GAAD;MACP,cAAE;MACE,kBAAE;MACP,aAAE,GAAG;AACd,UAAI,OAAO;AACM,QAAf,YAAO,OAAO;;IAElB;kCAGuB,SAAwB;MAtBjC,cAAQ;MAMjB,qBAAe;MAEf,kBAAY;;;MAcM;MAAsC,cAAE,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IC7B1D;;;;;;IAED;;;;;;IAGF;;;;;;;AAIc;IAAI;;AAIL;IAAI;;AAGrB,UAAI,AAAK;AACkD,QAAzD,WAAM,uBAAU;;IAEpB;;AAIuB,MAArB;AACA,YAAW,AAAE,gBAAN,kBAAU,aAAM;IACzB;;AAIuB,MAArB;AACA,YAAW,AAAE,gBAAN,qBAAa;IACtB;;AAOE,UAAI;AACF,YAAQ,AAAE,eAAN;AACF,gBAAW,AAAE,gBAAN,0BAAkB;;AAEzB,gBAAO;;;AAGX,YAAO;IACT;;;IA9CS;IAED;IAGF,mBAA4B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4CY;;;;sFCrD5B,KAAa;AAC7B,QAAI;AACF,uBAAI,eAAQ,GAAG;AAE2B,QADxC,WAAM,uBAAS,AAAC,+CACZ;YACC,kBAAI,cAAQ,GAAG;AAE0C,QAD9D,WAAM,uBAAS,AAAC,+CACZ,mDAAsC,gBAAI,uBAAQ,GAAG;;;AAGnD,IAAV,gBAAO,GAAG;AACA,IAAV,eAAO,GAAG;EACZ;;AAZK,oBAAa,KAAa,sDAA1B,GAAG,EAAH,GAAG;EAYR;;AAIE,aAAS,OAAQ,AAAW;AACS,MAA7B,AAAiB,qCAAtB,IAAI;;AAGW,IAAlB,AAAW;AAEA,IAAX,gBAAO;AACI,IAAX,eAAO;EACT;;AATK;EASL;sGAG2B;;AACJ,IAArB;AAC8C,IAA9C,AAAU,0BAAC,IAAI,EAA4B,cAAN,KAAjB,AAAU,0BAAC,IAAI,GAAL,aAAU,WAAK;EAC/C;;AAHK,mBAAsB,8DAAtB,IAAI;EAGT;0GAG6B;;AACrB,uBAA+B,eAAhB,AAAU,0BAAC,IAAI;AAC9B,oBAAqB,KAAV,0BAAW,IAAI,QAAI,AAAa,YAAD,GAAG,GAAxB;AAC3B,QAAI,AAAS,QAAD,IAAI;AACS,MAAvB,AAAW,4BAAO,IAAI;;EAE1B;;AANK,mBAAwB,gEAAxB,IAAI;EAMT;sGAG2B;AACzB,UAAO,AAAW,kCAAY,IAAI;EACpC;;AAFK,mBAAsB,8DAAtB,IAAI;EAET;;AAIyC;EAAU;;;;;;;;;WCrCjC;AACsD,MAAtE,AAAkB,6BAAI,sBAAS,AAAM,KAAD,MAAM,AAAM,KAAD,QAAQ,AAAM,KAAD;IAC9D;;UAGgC;AAC9B,UAAI,GAAG;AACL,cAAO,AAAkB,AAAO,uCAAM,QAAC,MAAc,YAAP,AAAG,EAAD,MAAQ,GAAG;;AAE3D,cAAO,AAAkB;;IAE7B;;AAIE,YAAO,AAAkB;IAC3B;;;IAvBqC,2BAAE;;EAAsC;;IAInD;;EAAkB;;;;;;;;;;;;;;;;;;;MCGxB;;;;;;MAGM;;;;;;;;;;;MAHN,cAAQ;MAGF,gBAAU;;IAIpB;;;;;;;;;;;;;;;;;;;;;;;;;;;MAamB;;;;;;;;;;;YAWjB;YACJ;YACI;YACF;AAEV,uBAAW,kCAAgB,MAAJ,GAAG,EAAH,cAAmB,+CACjC,OAAT,QAAQ,EAAR,eAAY,kDAAkB,aAAa;AAC/C,iBAAS,QAAS,OAAM;AACA,UAAtB,AAAS,QAAD,QAAQ,KAAK;;AAEvB,cAAO,SAAQ;MACjB;;;;;;;;;AAG0B;MAAe;;AAGvB,cAAA,AAAO;MAAM;;AAGD,cAAA,AAAO;MAAM;;AAItB,QAAnB,wBAAkB;MACpB;;AAIE,cAAS,wBAAF,AAAE,uBAAF;MACT;0BAG6B;AAC3B,YAAI,AAAI,GAAD,GAAG;AACY,UAApB,uBAAiB,GAAG;;MAExB;kBAKyB;AACvB,cAAO,AAAO,AAAS,kBAAL,GAAG;MACvB;YAKkB;AAChB,cAAO,AAAO,uBAAS,KAAK;MAC9B;UAKmB;AACjB,cAAO,AAAO,kBAAI,GAAG;MACvB;YAKiB;AACf,cAAO,AAAO,oBAAM,KAAK;MAC3B;;AAIE,cAAO,AAAO;MAChB;;AAIE,cAAO,AAAO,AAAO,8BAAI,QAAC,KAAc,KAAR,AAAE,CAAD;MACnC;uBAGsC,iBAAkB;AAA5B;AACV;AAChB,cAAI,QAAQ;AAC+B,YAAzC,WAAW,AAAO,2BAAc,QAAQ;;AAEhB,YAAxB,WAAW,AAAO;;AAGpB,mBAAS,QAAS,SAAQ;AACxB,kBAAkB,KAAZ,AAAM,KAAD;AAEX,gBAAc,YAAV,AAAM,KAAD,MAAQ,MAAM,GAAE;;QAE7B;;;YAGgC;AAC9B,cAAO,AAAU,8BAAW,GAAG;MACjC;aAGoB;YAAa;YAAoB;AAC/C,oBAAQ,AAAM,KAAD;AACV;AAEP,aAAK,AAAM,KAAD;AACJ,oBAAM,AAAM,KAAD;AACf,cAAQ,YAAJ,GAAG,KAAe,aAAJ,GAAG,IAAG;AACF,YAApB,uBAAiB,GAAG;;AAGtB,cAAU,+BAAN,KAAK;AACc,YAAf,uCAAN,KAAK,EAAM,GAAG,EAAE;;AAG8C,UAAhE,eAAe,AAAO,oBAAO,GAAG,EAAE,IAAI,GAAG,AAAM,KAAD,YAAY,KAApB,AAAyB;;AAExB,UAAvC,eAAe,AAAO,oBAAO,AAAM,KAAD;;AAGpC,YAAI,YAAY;AACG,UAAjB,wBAAA,AAAe,wBAAA;AACf,cAAuB,+BAAnB,AAAa,YAAD,2BACD,AAAa,YAAD,QAAQ,KAAK;AACW,YAAT,0CAApB,+BAAnB,AAAa,YAAD;;;AAIjB,YAAI,MAAM,MAAM,AAAM,KAAD,YAAY,YAAY;AACpB,UAAvB,AAAU,wBAAO,KAAK;;AAGxB,cAAO,aAAY;MACrB;uBAGkC;AAC5B,0BAAc;AAClB,iBAAS,QAAS,UAAS;AACzB,eAAK,AAAM,KAAD;AACwB,YAAhC,AAAY,AAAM,WAAP,aAAW,AAAM,KAAD;;AAGzB,6BAAe,YAAO,KAAK;AAC/B,cAAI,YAAY;AAC+B,YAA7C,AAAY,AAAO,WAAR,gBAAS,AAAM,KAAD,MAAQ,YAAY;;;AAIjD,YAAI,AAAY,AAAM,WAAP,uBAAqB,AAAY,AAAQ,WAAT;AAChB,UAA7B,AAAa,sBAAI,WAAW;AAC5B,gBAAO;;AAEP,gBAAO;;MAEX;;AAI4B,QAA1B,AAAa;MACf;;AAIM,uBAAW,AAAa;;AAG5B,mBAAS,MAAO,AAAS,AAAQ,SAAT;AAClB,+BAAe,AAAS,AAAO,QAAR,gBAAS,GAAG;AACvC,qBAAS,IAAK;AACZ,kBAAI,AAAE,AAAQ,CAAT,uBAAqB,GAAG;AACG,gBAA9B,AAAE,AAAO,CAAR,gBAAS,GAAG,EAAgB,eAAZ,YAAY;AAC7B;;AAEF,kBAAI,AAAE,AAAM,CAAP,kBAAgB,GAAG;AACQ,gBAA9B,AAAE,AAAO,CAAR,gBAAS,GAAG,EAAgB,eAAZ,YAAY;AAC7B;;;AAI4B,YAAhC,AAAO,oBAAO,GAAG,EAAE,YAAY;AACA,YAA/B,AAAU,wBAAmB,eAAZ,YAAY;;;AAI/B,mBAAS,MAAO,AAAS,SAAD;AAClB,6BAAa,AAAS,AAAQ,QAAT,uBAAqB,GAAG;AACjD,qBAAS,IAAK;AACZ,kBAAI,AAAE,AAAQ,CAAT,uBAAqB,GAAG;AAC3B,qBAAK,UAAU;AACQ,kBAArB,AAAE,AAAQ,CAAT,kBAAgB,GAAG;;AAEtB;;AAEF,kBAAI,AAAE,AAAM,CAAP,kBAAgB,GAAG;AACtB;;;AAGJ,iBAAK,UAAU;AACK,cAAlB,AAAO,oBAAO,GAAG;AACmB,cAApC,AAAU,wBAAa,yBAAQ,GAAG;;;MAGxC;;AAIM,wBAAY,AAAO;AAET,QAAd,AAAO;AAEP,iBAAS,QAAS,UAAS;AACzB,cAAgB,+BAAZ,AAAM,KAAD;AACmC,YAAT,0CAApB,+BAAZ,AAAM,KAAD;;AAEkC,UAA1C,AAAU,wBAAa,yBAAQ,AAAM,KAAD;;AAGnB,QAAnB,wBAAkB;AACC,QAAnB,uBAAiB,CAAC;AAClB,cAAO,AAAU,UAAD;MAClB;;AAIE,cAAO,AAAU;MACnB;;6BArOc,MAAW,WAA0B;;MANhB,qBAAe;MAE9C,wBAAkB;MAClB,uBAAiB,CAAC;MAGR;MAAW;MACZ,eAAE,gDAAgC,MAAd,aAAa,EAAb;;IAAsC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICxCzD;;;;;;IAGA;;;;;;IAGH;;;;;;IAGA;;;;;;IAGN;;;;;;IAGD;;;;;;;;;;;;;;;;;;;;qBA2B0B;AAC5B,UAAQ,YAAJ,GAAG;AACL,YAAQ,aAAJ,GAAG,IAAG,KAAS,aAAJ,GAAG,IAAG;AACmD,UAAtE,WAAM,uBAAU;;YAEb,KAAQ,OAAJ,GAAG;AACZ,YAAI,AAAI,AAAO,GAAR,UAAU;AAC8C,UAA7D,WAAM,uBAAU;;;AAGoC,QAAtD,WAAM,uBAAU;;AAGlB,YAAO;IACT;;AAIE,UAAI,cAAS,MAAO;AACpB,YAAa,uBACX,mBACQ,qBACA;IAEZ;YAGyB;;AACvB,UAAU,gBAAN,KAAK;AACP,cAAW,AAEgB,aAFpB,UAAO,AAAM,KAAD,SACT,YAAN,YAAS,AAAM,KAAD,WACd,AAAO,eAAG,AAAM,KAAD,WACf,AAAQ,iBAAG,AAAM,KAAD;;AAEpB,cAAO;;IAEX;;AAIE,UAAI;AACF,cAAO,AAA2C,kCAAtB,YAAG,wBAAW,eAAM;YAC3C,KAAI;AACT,cAAO,AAAyD,+BAAvC,YAAG,wBAAW,eAAM,wBAAW,eAAM;;AAE9D,cAAO,0BAAa,YAAG,uBAAU,cAAK,OAClC,sBAAU,eAAM,wBAAW,eAAM;;IAEzC;;AAII,YAGgB,EAHhB,AAAY,AAAS,AACR,AACE,8BADX,cAAJ,YACM,cAAN,cACO,cAAP,eACA,AAAQ;IAAQ;;+BAhFT,KAAU;QAAa;QAAa;IAH3C,gBAAS,CAAC;IAGH;IAAU;IAAa;IAAa;IACpC,eAAE;IACC,iBAAE;AACd,SAAO,uBAAU;EACnB;mCAGmB;QAAW;IAV1B,gBAAS,CAAC;IAUK;IAAW;IAClB,eAAE;IACH,eAAE;IACC,iBAAE;IACH,gBAAE,CAAC;AACd,SAAO,uBAAU;EACnB;gCAGgB;QAAW;QAAa;IAnBpC,gBAAS,CAAC;IAmBE;IAAW;IAAa;IAC5B,eAAE;IACH,eAAE;IACC,iBAAE;AACd,SAAO,uBAAU;EACnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAqEF;;;;;;MAJe,yBAAK;;;MAGL,+BAAW;;;;;;;;;;;EA2C1B;;;;;;MArCe,2BAAK;;;MAGL,0BAAI;;;MAGJ,6BAAO;;;MAGP,2BAAK;;;MAGL,6BAAO;;;MAGP,+BAAS;;;MAGT,8BAAQ;;;MAGR,iCAAW;;;MAGX,+BAAS;;;MAGT,iCAAW;;;MAGX,2BAAK;;;MAGL,0BAAI;;;MAGJ,+BAAS;;;;;;;EVpGxB;;;;;;;;;IW7BO;;;;;;;;;;AAHe;IAAI;eAOP,UAAoB,UAAe;AAC9C,2BAAiB,AAAa,mCAC1B,eAAN,eACA,QAAQ,EACR,QAAQ,EACR;AAGF,UAAI,cAAc,KAAI,CAAC;AAC4C,QAAjE,WAAM,uBAAU;;AAGL,MAAb,eAAS;AAET,YAAc;IAChB;cAGgC;AAC2C,MAAzE,WAAM,8BAAiB;IACzB;gBAGqC;AAAW,YAAO;IAAO;YAGlB;AAC+B,MAAzE,WAAM,8BAAiB;IACzB;;AAGwB,YAAO;IAAO;;AAGd,YAAO;IAAO;;AAIqC,MAAzE,WAAM,8BAAiB;IACzB;;AAGwB,YAAO;IAAO;;8DAtDN,OAAY;IAQvC,4BAAqB;IARkB;IAC/B,eAAE,KAAK;IACD,qBAAE;;EAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICNpC;;;;;;;;;;;;MCRQ;;;;;;WAGc;AACd,qBAAS,AAAO,MAAD;AACnB,cAA4D,MAAnC,mEAA2B,MAAM;MAC5D;YAGwB,QAAiB;;AACI,QAA3C,AAAO,MAAD,UAAU,AAAI,GAAD;MACrB;;;;;;MAXM,eAAS;;IAYjB;;;;;;;;;;;;;;;;;;;;;;;6EAGmD;AACrC,wFAA2B,sBAAsB;;EAAC;;;;;;IAMxD;;;;;;SAGqB;AACrB,mBAAS,AAAO,MAAD;AACf,kBAAQ,AAAO,MAAD;AAClB,YAAgB,8CAA2B,MAAM,UAAS,KAAK;IACjE;UAGwB,QAAiB;;AACI,MAA3C,AAAO,MAAD,UAAU,AAAI,GAAD;AACQ,MAA3B,AAAO,MAAD,WAAW,AAAI,GAAD;IACtB;;;;;;IAbM,iBAAS;;EAcjB;;;;;;;;;;;;;;;ICpCQ;;;;;;SAGmB;AACnB,gBAAM,AAAO,MAAD;AACZ,mBAAS,AAAO,MAAD,YAAY,GAAG;AAClC,YAAc,mBAAM,MAAM;IAC5B;UAGwB,QAAe;;AACjC,mBAAS,AAAI,GAAD;AACe,MAA/B,AAAO,MAAD,WAAW,AAAO,MAAD;AAC0B,MAAjD,AAAO,MAAD,aAAa,MAAM,mBAAkB;IAC7C;;;;;;IAdM,iBAAS;;EAejB;;;;;;;;;;;;;;;;;;;;;;;;;ICYU;;;;;;;;;;;AAUJ;2BAAoB;IAAsB;;AAGkB,MAA9D,oCAAgB,oEAAyC;AACY,MAArE,0DAAgB,+DAAgD;AAChB,MAAhD,kCAAgB,oDAA2B;IAC7C;SAIU;UACqB;AAGd,MAAf,gBAAW,IAAI;AAC4C,MAA3D,yBAAkC,uCAAO,iBAAiB;IAC5D;kBAGS,MACF,MACO,QACE,YACK,YACd,UACG,MACG,OACH;AAToB;;AAW5B,cAAO,AAAK,AAAQ,IAAT,YAAY,AAAM,KAAD;AAC5B,cAAO,AAAK,AAAO,AAAO,IAAf,WAAW,OAAY,kCAAL,IAAI,sBAC7B;AACqB,QAAzB,OAAO,AAAK,IAAD;AACX,YAAI,eAAU,IAAI;AAChB,cAAI,IAAI;AACN,kBAAO,iBAAQ,IAAI;;AAEnB,kBAAO,aAAI,IAAI;;;AAGjB,cAAI,AAAc,kCAAY,IAAI;AACP,YAAzB,MAAM,AAAa,2BAAC,IAAI;AACxB,gBAAI,IAAI;AACN,oBAAO,iBAAQ,IAAI;;AAEnB,oBAAO,aAAI,IAAI;;;AAIf,0BAAY;AACsB,UAAtC,AAAa,2BAAC,IAAI,EAAI,AAAU,SAAD;AAEf;AAChB;AACiB;AACf,gBAAI,KAAK;AACsC,cAA7C,UAAU,oDAAqB,KAAK,EAAE,MAAM;;AAGa,cADzD,WAAU,MAAM,AAAS,oBACrB,IAAI,GAAO,MAAL,IAAI,EAAJ,cAAQ,sBAAU,QAAQ,EAAE,MAAM,EAAE,UAAU;;AAG1D,gBAAI,IAAI;AAC8D,cAApE,SAAS,wCAAe,MAAM,IAAI,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO;;AAEH,cAAhE,SAAS,+BAAW,MAAM,IAAI,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO;;AAGxC,YAAzB,MAAM,AAAO,MAAD;AACS,YAArB,AAAM,oBAAC,IAAI,EAAI,MAAM;AAED,YAApB,AAAU,SAAD;AACT,kBAAO,OAAM;;gBACN;gBAAO;AAAd;AACe,oBAAf,MAAM;4BAAN,OAAQ;AACkC,cAA1C,AAAU,SAAD,eAAe,KAAK,EAAE,UAAU;AAClC,cAAP;;;;AAG0B,YAA1B,AAAc,6BAAO,IAAI;;;MAG/B;;eAIS;UACK;UACE;UACK;UACd;UACG;UACG;UACH;UAC+C;AAThC;AAWvB,YAAI,aAAa;AACgC,UAA/C,mBAAmB,2BAAc,aAAa;;AAEhD,cACgE,iBADzD,MAAM,kBAAY,IAAI,EAAE,OAAO,gBAAgB,EAAE,aAAa,EACjE,kBAAkB,EAAE,aAAa,EAAE,IAAI,EAAE,KAAK,EAAE,UAAU;MAChE;;mBAIS;UACK;UACE;UACK;UACd;UACG;UACA;UAC+C;AARxB;AAU/B,YAAI,aAAa;AACgC,UAA/C,mBAAmB,2BAAc,aAAa;;AAEhD,cASgB,qBATT,MAAM,kBACT,IAAI,EACJ,MACA,gBAAgB,EAChB,aAAa,EACb,kBAAkB,EAClB,aAAa,EACb,IAAI,EACJ,MACA,UAAU;MAChB;;yBAEqC,MAAa;AAC5C,0BAAgB,AAAK,IAAD;AACpB,gBAAM,AAAM,oBAAC,aAAa;AAC9B,UAAI,GAAG;AACL,aAAK,AAAK,IAAD,YAAY,AAAI,AAAK,GAAN,UAAS,IAAI,KAAK,AAAI,AAAU,GAAX,mBAAc;AACzD,gBAAW,qBAAJ,GAAG;;AAEN,yBAAe,gBAAJ,GAAG,IACZ,AACF,sBADa,AAAI,GAAD,cAAW,MACzB,AAAuB,kBAAhB,AAAI,GAAD,cAAW;AAEE,UAD7B,WAAM,uBAAS,AAAC,eAAW,aAAa,2BACpC,iBAAc,QAAQ;;;AAG4C,QAAxE,WAAM,uBAAU;;IAEpB;+BAG2C;AACrC,0BAAgB,AAAK,IAAD;AACxB,YAAO,AAAM,qBAAC,aAAa;IAC7B;WAGqB;AAAS,YAAgC,iBAAhC,yBAAmB,IAAI,EAAE;IAAgB;eAG1C;AACzB,YAA+B,qBAA/B,yBAAmB,IAAI,EAAE;IAAmB;cAG1B;AACpB,YAAO,AAAO,4BAAY,AAAK,IAAD;IAChC;;AAIM,yBAAe,AAAO,AAAO,8CAAI,QAAC,OAC7B,AAAI,GAAD;AAGZ,YAAc,8BAAK,YAAY;IACjC;kBAG0B;AACC,MAAzB,OAAO,AAAK,IAAD;AACe,MAA1B,AAAc,6BAAO,IAAI;AACN,MAAnB,AAAO,sBAAO,IAAI;IACpB;sBAGsC;UACzB;UAAc;AADG;;AAExB,4BAAgB,AAAK,IAAD;AACpB,kBAAM,AAAM,oBAAC,aAAa;AAC9B,YAAI,GAAG;AACqB,UAA1B,MAAM,AAAI,GAAD;;AAE4D,UAArE,MAAM,AAAS,yBAAU,aAAa,GAAO,MAAL,IAAI,EAAJ,cAAQ,sBAAU,UAAU;;MAExE;;;AAIM,0BAAgB,AAAO,AAAO,AAAS,yDAAI,QAAC,OACvC,AAAI,GAAD;AAGZ,YAAc,8BAAK,aAAa;IAClC;;AAIE,YAAqB,iCAAd,qBAAwB;IACjC;cAG8B;UACjB;UAAc;AADL;;AAEhB,4BAAgB,AAAK,IAAD;AACxB,cAAO,OAAM,AAAS,yBAClB,aAAa,GAAO,MAAL,IAAI,EAAJ,cAAQ,sBAAU,UAAU;MACjD;;;;IAtOM,eAAS;IACT,sBAAgB;IACG;IACZ,sBAAuB;IAI5B;AAGR;AAC4B,IAA1B;EACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAfqC,yCAAsB;YACxC;;;;;;IClBT;;;;;;IAiBI;;;;;;;;;;;iCAEO;QAAa;IAAb;IAAa;;EAAc;;;;;;;;;;;;ICnBtC;;;;;;IAGI;;;;;;;;;;;;;QASE;QACT;IADS;IACT;;EAEL;;;;;;;;;;;;;;ICoBJ;;;;;;;;;;;;;;ICnCgB;;;;;;IAGA;;;;;;IAGH;;;;;;;;;YAMc;;AACvB,UAAU,iBAAN,KAAK;AACP,cAAiB,AAAO,aAAjB,AAAM,KAAD,MAAQ,aAAmB,YAAZ,AAAM,KAAD,QAAU;;AAE5C,YAAO;IACT;;AAGoB,YAAoC,EAApC,AAAY,AAAS,8BAAM,cAAJ,YAAqB,cAAN;IAAc;;gCAX1D,KAAU,OAAY;IAAtB;IAAU;IAAY;;EAAQ;;;;;;;;;;;;;;;;;;;;;;IAsH9C;;;;;;;;;;;;;;ICtHA;;;;;;;;;;;;;;;;ACRyB;;IAAO;kBAAP;;;;;IAAO;;;AAEf;;IAAO;kBAAP;;;;;IAAO;;;;;AAeG;IAAO;YAIlB,KAAS,QAAY,WAAqB,KAAS;AAC3D,eAAS,8BAAJ,GAAG,EAAM,MAAM,EAAE;AAE1B,YAAO,AAAQ,uBAAQ,EAAE,EAAE,GAAG,EAAE,AAAO,MAAD,GAAG,IAAI,AAAU,SAAD,GAAG,IAAI,GAAG,EAAE;IACpE;;AAI0B,YAAU,iCAAV,8BAAoB;IAAG;YAInC,KAAS,QAAY,WAAqB,KAAS;AAC3D,eAAK;AACa,MAAtB,AAAI,GAAD,UAAQ,MAAM,EAAE,EAAE;AAEjB,gBAAM,AAAQ,sBAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,SAAS,EAAE,GAAG,EAAE,AAAO,MAAD,GAAG;AAE/D,YAAO,AAAI,IAAD,GAAG;IACf;qBAG+B;AAC7B,YAAO,AAAI,AAAO,IAAR,YAAU;IACtB;;qCAxCwB;oCALD;oCAER;AAIb,QAAI,AAAI,GAAD,cAAW,MAAM,AAAI,GAAD,OAAK,QAAC,MAAO,AAAG,AAAI,EAAL,GAAG,KAAK,AAAG,EAAD,GAAG;AAES,MAD9D,WAAM,2BACF;;AAGF,mBAAqB,4CAAS,GAAG;AACN,IAA/B,gBAAU,kCAAY,QAAQ;AACsC,IAApE,gBAAgB,oBAAuC,wBAA/B,AAAO,AAAkB,sBAAV,QAAQ;EACjD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAhBa,4BAAS;YAAU;;;;;;ECalC;;;;;;;ECkEA;;;;;;;IC9Ee;;;;;;;;;;AAOX,YAAO,AAAqB,iBAAR;IACtB;;;IALe;AAAf;;EAAuB;;;;;;;;;;;;;;;;;;ICgBzB;;;;;;;;;;;;;;iBCjBuB;YAAe;AAChC,yDAAa,GAAG,YAAW,OAAO;MAAC;;;;;;;;;;;;;;;;;;;;;ICMzC;;;;;;;;;;;;MANK,wCAAM;;;MAET,wCAAM;;;MAGN,2CAAS;;;;;;;ECWX;;;;;MCoBoB,SAAI;YAAG","file":"../../../../../../../../../../../../packages/hive/src/box_collection/box_collection_stub.dart.lib.js"}');
  // Exports:
  return {
    src__box_collection__box_collection_stub: box_collection_stub,
    src__box_collection__box_collection_indexed_db: box_collection_indexed_db,
    src__box__lazy_box_impl: lazy_box_impl,
    src__box__box_impl: box_impl,
    src__binary__frame_helper: frame_helper,
    src__binary__binary_writer_impl: binary_writer_impl,
    src__adapters__ignored_type_adapter: ignored_type_adapter,
    src__registry__type_registry_impl: type_registry_impl,
    src__binary__binary_reader_impl: binary_reader_impl,
    src__backend__js__native__storage_backend_js: storage_backend_js,
    src__backend__js__native__backend_manager: backend_manager,
    src__backend__js__backend_manager: backend_manager$,
    src__box__box_base_impl: box_base_impl,
    src__object__hive_collection_mixin: hive_collection_mixin,
    src__object__hive_list_impl: hive_list_impl,
    src__object__hive_object: hive_object,
    src__box__change_notifier: change_notifier,
    src__box__keystore: keystore$,
    src__binary__frame: frame$,
    src__backend__storage_backend: storage_backend,
    src__backend__storage_backend_memory: storage_backend_memory,
    src__adapters__date_time_adapter: date_time_adapter,
    src__adapters__big_int_adapter: big_int_adapter,
    src__hive_impl: hive_impl,
    hive: hive
  };
}));

//# sourceMappingURL=box_collection_stub.dart.lib.js.map
