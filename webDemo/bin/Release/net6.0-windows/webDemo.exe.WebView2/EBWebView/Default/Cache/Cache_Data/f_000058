define(['dart_sdk'], (function load__packages__internet_connection_checker__internet_connection_checker_dart(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const io = dart_sdk.io;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var internet_connection_checker = Object.create(dart.library);
  var $length = dartx.length;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    StreamControllerOfInternetConnectionStatus: () => (T.StreamControllerOfInternetConnectionStatus = dart.constFn(async.StreamController$(internet_connection_checker.InternetConnectionStatus)))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    CompleterOfbool: () => (T.CompleterOfbool = dart.constFn(async.Completer$(core.bool)))(),
    AddressCheckResultToNull: () => (T.AddressCheckResultToNull = dart.constFn(dart.fnType(core.Null, [internet_connection_checker.AddressCheckResult])))(),
    ListOfAddressCheckOptions: () => (T.ListOfAddressCheckOptions = dart.constFn(core.List$(internet_connection_checker.AddressCheckOptions)))(),
    JSArrayOfAddressCheckOptions: () => (T.JSArrayOfAddressCheckOptions = dart.constFn(_interceptors.JSArray$(internet_connection_checker.AddressCheckOptions)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const({
        __proto__: internet_connection_checker.InternetConnectionStatus.prototype,
        [_Enum__name]: "connected",
        [_Enum_index]: 0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: internet_connection_checker.InternetConnectionStatus.prototype,
        [_Enum__name]: "disconnected",
        [_Enum_index]: 1
      });
    },
    get C0() {
      return C[0] = dart.constList([C[1] || CT.C1, C[2] || CT.C2], internet_connection_checker.InternetConnectionStatus);
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 10000000
      });
    }
  }, false);
  var C = Array(4).fill(void 0);
  var I = ["package:internet_connection_checker/internet_connection_checker.dart"];
  var _name = dart.privateName(core, "_name");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  internet_connection_checker.InternetConnectionStatus = class InternetConnectionStatus extends core._Enum {
    toString() {
      return "InternetConnectionStatus." + this[_name];
    }
  };
  (internet_connection_checker.InternetConnectionStatus.new = function(index, name) {
    internet_connection_checker.InternetConnectionStatus.__proto__.new.call(this, index, name);
    ;
  }).prototype = internet_connection_checker.InternetConnectionStatus.prototype;
  dart.addTypeTests(internet_connection_checker.InternetConnectionStatus);
  dart.addTypeCaches(internet_connection_checker.InternetConnectionStatus);
  dart.setLibraryUri(internet_connection_checker.InternetConnectionStatus, I[0]);
  dart.setStaticFieldSignature(internet_connection_checker.InternetConnectionStatus, () => ['values', 'connected', 'disconnected']);
  dart.defineExtensionMethods(internet_connection_checker.InternetConnectionStatus, ['toString']);
  dart.defineLazy(internet_connection_checker.InternetConnectionStatus, {
    /*internet_connection_checker.InternetConnectionStatus.values*/get values() {
      return C[0] || CT.C0;
    },
    /*internet_connection_checker.InternetConnectionStatus.connected*/get connected() {
      return C[1] || CT.C1;
    },
    /*internet_connection_checker.InternetConnectionStatus.disconnected*/get disconnected() {
      return C[2] || CT.C2;
    }
  }, false);
  var address$ = dart.privateName(internet_connection_checker, "AddressCheckOptions.address");
  var port$ = dart.privateName(internet_connection_checker, "AddressCheckOptions.port");
  var timeout$ = dart.privateName(internet_connection_checker, "AddressCheckOptions.timeout");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  internet_connection_checker.AddressCheckOptions = class AddressCheckOptions extends core.Object {
    get address() {
      return this[address$];
    }
    set address(value) {
      super.address = value;
    }
    get port() {
      return this[port$];
    }
    set port(value) {
      super.port = value;
    }
    get timeout() {
      return this[timeout$];
    }
    set timeout(value) {
      super.timeout = value;
    }
    static ['_#new#tearOff'](address, opts) {
      let port = opts && 'port' in opts ? opts.port : 53;
      let timeout = opts && 'timeout' in opts ? opts.timeout : C[3] || CT.C3;
      return new internet_connection_checker.AddressCheckOptions.new(address, {port: port, timeout: timeout});
    }
    toString() {
      return "AddressCheckOptions(" + dart.str(this.address) + ", " + dart.str(this.port) + ", " + dart.str(this.timeout) + ")";
    }
  };
  (internet_connection_checker.AddressCheckOptions.new = function(address, opts) {
    let port = opts && 'port' in opts ? opts.port : 53;
    let timeout = opts && 'timeout' in opts ? opts.timeout : C[3] || CT.C3;
    this[address$] = address;
    this[port$] = port;
    this[timeout$] = timeout;
    ;
  }).prototype = internet_connection_checker.AddressCheckOptions.prototype;
  dart.addTypeTests(internet_connection_checker.AddressCheckOptions);
  dart.addTypeCaches(internet_connection_checker.AddressCheckOptions);
  dart.setLibraryUri(internet_connection_checker.AddressCheckOptions, I[0]);
  dart.setFieldSignature(internet_connection_checker.AddressCheckOptions, () => ({
    __proto__: dart.getFields(internet_connection_checker.AddressCheckOptions.__proto__),
    address: dart.finalFieldType(io.InternetAddress),
    port: dart.finalFieldType(core.int),
    timeout: dart.finalFieldType(core.Duration)
  }));
  dart.defineExtensionMethods(internet_connection_checker.AddressCheckOptions, ['toString']);
  var options$ = dart.privateName(internet_connection_checker, "AddressCheckResult.options");
  var isSuccess$ = dart.privateName(internet_connection_checker, "AddressCheckResult.isSuccess");
  internet_connection_checker.AddressCheckResult = class AddressCheckResult extends core.Object {
    get options() {
      return this[options$];
    }
    set options(value) {
      super.options = value;
    }
    get isSuccess() {
      return this[isSuccess$];
    }
    set isSuccess(value) {
      super.isSuccess = value;
    }
    static ['_#new#tearOff'](options, isSuccess) {
      return new internet_connection_checker.AddressCheckResult.new(options, isSuccess);
    }
    toString() {
      return "AddressCheckResult(" + dart.str(this.options) + ", " + dart.str(this.isSuccess) + ")";
    }
  };
  (internet_connection_checker.AddressCheckResult.new = function(options, isSuccess) {
    this[options$] = options;
    this[isSuccess$] = isSuccess;
    ;
  }).prototype = internet_connection_checker.AddressCheckResult.prototype;
  dart.addTypeTests(internet_connection_checker.AddressCheckResult);
  dart.addTypeCaches(internet_connection_checker.AddressCheckResult);
  dart.setLibraryUri(internet_connection_checker.AddressCheckResult, I[0]);
  dart.setFieldSignature(internet_connection_checker.AddressCheckResult, () => ({
    __proto__: dart.getFields(internet_connection_checker.AddressCheckResult.__proto__),
    options: dart.finalFieldType(internet_connection_checker.AddressCheckOptions),
    isSuccess: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(internet_connection_checker.AddressCheckResult, ['toString']);
  var addresses = dart.privateName(internet_connection_checker, "InternetConnectionChecker.addresses");
  var checkInterval = dart.privateName(internet_connection_checker, "InternetConnectionChecker.checkInterval");
  var _lastStatus = dart.privateName(internet_connection_checker, "_lastStatus");
  var _timerHandle = dart.privateName(internet_connection_checker, "_timerHandle");
  var _statusController = dart.privateName(internet_connection_checker, "_statusController");
  var _maybeEmitStatusUpdate = dart.privateName(internet_connection_checker, "_maybeEmitStatusUpdate");
  internet_connection_checker.InternetConnectionChecker = class InternetConnectionChecker extends core.Object {
    get addresses() {
      return this[addresses];
    }
    set addresses(value) {
      this[addresses] = value;
    }
    get checkInterval() {
      return this[checkInterval];
    }
    set checkInterval(value) {
      this[checkInterval] = value;
    }
    static new() {
      return internet_connection_checker.InternetConnectionChecker._instance;
    }
    static ['_#new#tearOff']() {
      return internet_connection_checker.InternetConnectionChecker.new();
    }
    static ['_#_#tearOff']() {
      return new internet_connection_checker.InternetConnectionChecker.__();
    }
    isHostReachable(options) {
      return async.async(internet_connection_checker.AddressCheckResult, function* isHostReachable() {
        let t2, t3;
        let sock = null;
        try {
          sock = (t2 = (yield io.Socket.connect(options.address, options.port, {timeout: options.timeout})), (() => {
            t2.destroy();
            return t2;
          })());
          return new internet_connection_checker.AddressCheckResult.new(options, true);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            t3 = sock;
            t3 == null ? null : t3.destroy();
            return new internet_connection_checker.AddressCheckResult.new(options, false);
          } else
            throw e$;
        }
      });
    }
    get hasConnection() {
      return async.async(core.bool, (function* hasConnection() {
        let result = T.CompleterOfbool().new();
        let length = this.addresses[$length];
        for (let addressOptions of this.addresses) {
          this.isHostReachable(addressOptions).then(core.Null, dart.fn(request => {
            length = length - 1;
            if (!result.isCompleted) {
              if (request.isSuccess) {
                result.complete(true);
              } else if (length === 0) {
                result.complete(false);
              }
            }
          }, T.AddressCheckResultToNull()));
        }
        return result.future;
      }).bind(this));
    }
    get connectionStatus() {
      return async.async(internet_connection_checker.InternetConnectionStatus, (function* connectionStatus() {
        return (yield this.hasConnection) ? internet_connection_checker.InternetConnectionStatus.connected : internet_connection_checker.InternetConnectionStatus.disconnected;
      }).bind(this));
    }
    [_maybeEmitStatusUpdate](timer = null) {
      return async.async(dart.void, (function* _maybeEmitStatusUpdate$() {
        let t3, t3$;
        t3 = this[_timerHandle];
        t3 == null ? null : t3.cancel();
        t3$ = timer;
        t3$ == null ? null : t3$.cancel();
        let currentStatus = (yield this.connectionStatus);
        if (this[_lastStatus] !== currentStatus && this[_statusController].hasListener) {
          this[_statusController].add(currentStatus);
        }
        if (!this[_statusController].hasListener) return;
        this[_timerHandle] = async.Timer.new(this.checkInterval, dart.bind(this, _maybeEmitStatusUpdate));
        this[_lastStatus] = currentStatus;
      }).bind(this));
    }
    get onStatusChange() {
      return this[_statusController].stream;
    }
    get hasListeners() {
      return this[_statusController].hasListener;
    }
    get isActivelyChecking() {
      return this[_statusController].hasListener;
    }
  };
  (internet_connection_checker.InternetConnectionChecker.__ = function() {
    this[addresses] = internet_connection_checker.InternetConnectionChecker.DEFAULT_ADDRESSES;
    this[checkInterval] = internet_connection_checker.InternetConnectionChecker.DEFAULT_INTERVAL;
    this[_lastStatus] = null;
    this[_timerHandle] = null;
    this[_statusController] = T.StreamControllerOfInternetConnectionStatus().broadcast();
    this[_statusController].onListen = dart.fn(() => {
      this[_maybeEmitStatusUpdate]();
    }, T.VoidTovoid());
    this[_statusController].onCancel = dart.fn(() => {
      let t2;
      t2 = this[_timerHandle];
      t2 == null ? null : t2.cancel();
      this[_lastStatus] = null;
    }, T.VoidToNull());
  }).prototype = internet_connection_checker.InternetConnectionChecker.prototype;
  dart.addTypeTests(internet_connection_checker.InternetConnectionChecker);
  dart.addTypeCaches(internet_connection_checker.InternetConnectionChecker);
  dart.setMethodSignature(internet_connection_checker.InternetConnectionChecker, () => ({
    __proto__: dart.getMethods(internet_connection_checker.InternetConnectionChecker.__proto__),
    isHostReachable: dart.fnType(async.Future$(internet_connection_checker.AddressCheckResult), [internet_connection_checker.AddressCheckOptions]),
    [_maybeEmitStatusUpdate]: dart.fnType(async.Future$(dart.void), [], [dart.nullable(async.Timer)])
  }));
  dart.setStaticMethodSignature(internet_connection_checker.InternetConnectionChecker, () => ['new']);
  dart.setGetterSignature(internet_connection_checker.InternetConnectionChecker, () => ({
    __proto__: dart.getGetters(internet_connection_checker.InternetConnectionChecker.__proto__),
    hasConnection: async.Future$(core.bool),
    connectionStatus: async.Future$(internet_connection_checker.InternetConnectionStatus),
    onStatusChange: async.Stream$(internet_connection_checker.InternetConnectionStatus),
    hasListeners: core.bool,
    isActivelyChecking: core.bool
  }));
  dart.setLibraryUri(internet_connection_checker.InternetConnectionChecker, I[0]);
  dart.setFieldSignature(internet_connection_checker.InternetConnectionChecker, () => ({
    __proto__: dart.getFields(internet_connection_checker.InternetConnectionChecker.__proto__),
    addresses: dart.fieldType(core.List$(internet_connection_checker.AddressCheckOptions)),
    checkInterval: dart.fieldType(core.Duration),
    [_lastStatus]: dart.fieldType(dart.nullable(internet_connection_checker.InternetConnectionStatus)),
    [_timerHandle]: dart.fieldType(dart.nullable(async.Timer)),
    [_statusController]: dart.finalFieldType(async.StreamController$(internet_connection_checker.InternetConnectionStatus))
  }));
  dart.setStaticFieldSignature(internet_connection_checker.InternetConnectionChecker, () => ['DEFAULT_PORT', 'DEFAULT_TIMEOUT', 'DEFAULT_INTERVAL', 'DEFAULT_ADDRESSES', '_instance']);
  dart.defineLazy(internet_connection_checker.InternetConnectionChecker, {
    /*internet_connection_checker.InternetConnectionChecker.DEFAULT_PORT*/get DEFAULT_PORT() {
      return 53;
    },
    /*internet_connection_checker.InternetConnectionChecker.DEFAULT_TIMEOUT*/get DEFAULT_TIMEOUT() {
      return C[3] || CT.C3;
    },
    /*internet_connection_checker.InternetConnectionChecker.DEFAULT_INTERVAL*/get DEFAULT_INTERVAL() {
      return C[3] || CT.C3;
    },
    /*internet_connection_checker.InternetConnectionChecker.DEFAULT_ADDRESSES*/get DEFAULT_ADDRESSES() {
      return T.ListOfAddressCheckOptions().unmodifiable(T.JSArrayOfAddressCheckOptions().of([new internet_connection_checker.AddressCheckOptions.new(io.InternetAddress.new("1.1.1.1", {type: io.InternetAddressType.IPv4})), new internet_connection_checker.AddressCheckOptions.new(io.InternetAddress.new("2606:4700:4700::1111", {type: io.InternetAddressType.IPv6})), new internet_connection_checker.AddressCheckOptions.new(io.InternetAddress.new("8.8.4.4", {type: io.InternetAddressType.IPv4})), new internet_connection_checker.AddressCheckOptions.new(io.InternetAddress.new("2001:4860:4860::8888", {type: io.InternetAddressType.IPv6})), new internet_connection_checker.AddressCheckOptions.new(io.InternetAddress.new("208.67.222.222", {type: io.InternetAddressType.IPv4})), new internet_connection_checker.AddressCheckOptions.new(io.InternetAddress.new("2620:0:ccc::2", {type: io.InternetAddressType.IPv6}))]));
    },
    /*internet_connection_checker.InternetConnectionChecker._instance*/get _instance() {
      return new internet_connection_checker.InternetConnectionChecker.__();
    }
  }, false);
  dart.trackLibraries("packages/internet_connection_checker/internet_connection_checker.dart", {
    "package:internet_connection_checker/internet_connection_checker.dart": internet_connection_checker
  }, {
    "package:internet_connection_checker/internet_connection_checker.dart": ["status_enum.dart", "address_check_options.dart", "address_check_result.dart", "internet_connection.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["status_enum.dart","address_check_options.dart","address_check_result.dart","internet_connection.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAUA;;;;;;;;;;;;MANK,2DAAM;;;MAET,8DAAS;;;MAGT,iEAAY;;;;;;;;;ICcU;;;;;;IAGZ;;;;;;IAGK;;;;;;;;;;;;AAGM,YAAA,AAAgD,mCAA1B,gBAAO,gBAAG,aAAI,gBAAG,gBAAO;IAAE;;kEArB9D;QACA;QACA;IAFA;IACA;IACA;;EACL;;;;;;;;;;;;;;ICFwB;;;;;;IAGf;;;;;;;;;;AAGU,YAAA,AAA0C,kCAArB,gBAAO,gBAAG,kBAAS;IAAE;;iEAXxD,SACA;IADA;IACA;;EACN;;;;;;;;;;;;;;;;;IC8GyB;;;;;;IA2EjB;;;;;;;AA3L8B;IAAS;;;;;;;oBAwH1B;AADoB;;AAGhC;AACR;AAMe,UALb,cAAO,MAAa,kBAClB,AAAQ,OAAD,UACP,AAAQ,OAAD,iBACE,AAAQ,OAAD,aAHX;AAKH;;;AACJ,gBAAO,wDACL,OAAO,EACP;;cAEK;AAAP;AACe,iBAAf,IAAI;yBAAJ,OAAM;AACN,kBAAO,wDACL,OAAO,EACP;;;;MAGN;;;AAM+B;AACP,qBAAS;AAC3B,qBAAS,AAAU;AAEvB,iBAA+B,iBAAkB;AAa9C,UAXD,AAAgC,qBAAhB,cAAc,kBAC5B,QAAoB;AACP,YAAX,SAAA,AAAO,MAAD,GAAI;AACV,iBAAK,AAAO,MAAD;AACT,kBAAI,AAAQ,OAAD;AACY,gBAArB,AAAO,MAAD,UAAU;oBACX,KAAI,AAAO,MAAD,KAAI;AACG,gBAAtB,AAAO,MAAD,UAAU;;;;;AAO1B,cAAO,AAAO,OAAD;MACf;;;AAOsD;AACpD,gBAAO,MAAM,sBACkB,iEACA;MACjC;;6BAgBS;AAD0B;;AAIX,aAAtB;4BAAc;AACC,cAAf,KAAK;sBAAL,OAAO;AAEwB,6BAAgB,MAAM;AAIrD,YAAI,sBAAe,aAAa,IAAI,AAAkB;AAChB,UAApC,AAAkB,4BAAI,aAAa;;AAIrC,aAAK,AAAkB,qCAAa;AACuB,QAA3D,qBAAe,gBAAM,8BAAe;AAGT,QAA3B,oBAAc,aAAa;MAC7B;;;AAiEI,YAAA,AAAkB;IAAM;;AAGH,YAAA,AAAkB;IAAW;;AAGvB,YAAA,AAAkB;IAAW;;;IA9KlC,kBAAY;IA2E7B,sBAAgB;IAgCC;IACnB;IAG0C,0BAC7C;AAvND,IAFD,AAAkB,mCAAW;AACH,MAAxB;;AAOD,IAHD,AAAkB,mCAAW;;AACL,WAAtB;0BAAc;AACI,MAAlB,oBAAc;;EAElB;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAMiB,kEAAY;;;MAMP,qEAAe;;;MAKf,sEAAgB;;;MAyBC,uEAAiB;YACpD,4CACmB,qCACnB,wDACE,uBACE,kBAC0B,gCAG9B,wDACE,uBACE,+BAC0B,gCAG9B,wDACE,uBACE,kBAC0B,gCAG9B,wDACE,uBACE,+BAC0B,gCAG9B,wDACE,uBACE,yBAC0B,gCAG9B,wDACE,uBACE,wBAC0B;;MAoBK,+DAAS;YAClB","file":"../../../../../../../../../../packages/internet_connection_checker/internet_connection_checker.dart.lib.js"}');
  // Exports:
  return {
    internet_connection_checker: internet_connection_checker
  };
}));

//# sourceMappingURL=internet_connection_checker.dart.lib.js.map
