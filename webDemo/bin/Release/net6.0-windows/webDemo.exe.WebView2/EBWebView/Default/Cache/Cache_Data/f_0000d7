define(['dart_sdk', 'packages/xml/src/xml/entities/entity_mapping.dart', 'packages/xml/src/xml/entities/default_mapping.dart', 'packages/xml/src/xml/enums/node_type.dart', 'packages/xml/src/xml_events/utils/list_converter.dart', 'packages/xml/src/xml_events/annotations/has_location.dart', 'packages/xml/src/xml_events/annotations/has_buffer.dart', 'packages/xml/src/xml/exceptions/tag_exception.dart', 'packages/xml/src/xml_events/streams/flatten.dart', 'packages/xml/src/xml_events/utils/conversion_sink.dart', 'packages/petitparser/src/parser/combinator/optional.dart', 'packages/xml/src/xml/exceptions/parser_exception.dart', 'packages/petitparser/src/definition/resolve.dart', 'packages/xml/src/xml/utils/character_data_parser.dart', 'packages/petitparser/src/parser/predicate/string.dart', 'packages/xml/src/xml/enums/attribute_type.dart', 'packages/petitparser/src/parser/action/flatten.dart', 'packages/petitparser/src/parser/repeater/lazy.dart', 'packages/petitparser/src/parser/action/pick.dart', 'packages/xml/src/xml/dtd/external_id.dart', 'packages/petitparser/src/parser/combinator/skip.dart', 'packages/petitparser/src/parser/character/whitespace.dart', 'packages/petitparser/src/parser/character/pattern.dart', 'packages/xml/src/xml/utils/token.dart', 'packages/xml/src/xml/utils/cache.dart', 'packages/collection/src/equality.dart', 'packages/xml/src/xml/exceptions/exception.dart', 'packages/collection/src/union_set_controller.dart'], (function load__packages__xml__src__xml__utils__simple_name_dart(dart_sdk, packages__xml__src__xml__entities__entity_mapping$46dart, packages__xml__src__xml__entities__default_mapping$46dart, packages__xml__src__xml__enums__node_type$46dart, packages__xml__src__xml_events__utils__list_converter$46dart, packages__xml__src__xml_events__annotations__has_location$46dart, packages__xml__src__xml_events__annotations__has_buffer$46dart, packages__xml__src__xml__exceptions__tag_exception$46dart, packages__xml__src__xml_events__streams__flatten$46dart, packages__xml__src__xml_events__utils__conversion_sink$46dart, packages__petitparser__src__parser__combinator__optional$46dart, packages__xml__src__xml__exceptions__parser_exception$46dart, packages__petitparser__src__definition__resolve$46dart, packages__xml__src__xml__utils__character_data_parser$46dart, packages__petitparser__src__parser__predicate__string$46dart, packages__xml__src__xml__enums__attribute_type$46dart, packages__petitparser__src__parser__action__flatten$46dart, packages__petitparser__src__parser__repeater__lazy$46dart, packages__petitparser__src__parser__action__pick$46dart, packages__xml__src__xml__dtd__external_id$46dart, packages__petitparser__src__parser__combinator__skip$46dart, packages__petitparser__src__parser__character__whitespace$46dart, packages__petitparser__src__parser__character__pattern$46dart, packages__xml__src__xml__utils__token$46dart, packages__xml__src__xml__utils__cache$46dart, packages__collection__src__equality$46dart, packages__xml__src__xml__exceptions__exception$46dart, packages__collection__src__union_set_controller$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const _internal = dart_sdk._internal;
  const convert = dart_sdk.convert;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const entity_mapping = packages__xml__src__xml__entities__entity_mapping$46dart.src__xml__entities__entity_mapping;
  const default_mapping = packages__xml__src__xml__entities__default_mapping$46dart.src__xml__entities__default_mapping;
  const node_type = packages__xml__src__xml__enums__node_type$46dart.src__xml__enums__node_type;
  const list_converter = packages__xml__src__xml_events__utils__list_converter$46dart.src__xml_events__utils__list_converter;
  const has_location = packages__xml__src__xml_events__annotations__has_location$46dart.src__xml_events__annotations__has_location;
  const has_buffer = packages__xml__src__xml_events__annotations__has_buffer$46dart.src__xml_events__annotations__has_buffer;
  const tag_exception = packages__xml__src__xml__exceptions__tag_exception$46dart.src__xml__exceptions__tag_exception;
  const flatten = packages__xml__src__xml_events__streams__flatten$46dart.src__xml_events__streams__flatten;
  const conversion_sink = packages__xml__src__xml_events__utils__conversion_sink$46dart.src__xml_events__utils__conversion_sink;
  const failure = packages__petitparser__src__parser__combinator__optional$46dart.src__context__failure;
  const parser = packages__petitparser__src__parser__combinator__optional$46dart.src__core__parser;
  const choice = packages__petitparser__src__parser__combinator__optional$46dart.src__parser__combinator__choice;
  const failure_joiner = packages__petitparser__src__parser__combinator__optional$46dart.src__parser__utils__failure_joiner;
  const map = packages__petitparser__src__parser__combinator__optional$46dart.src__parser__action__map;
  const sequence = packages__petitparser__src__parser__combinator__optional$46dart.src__parser__combinator__sequence;
  const possessive = packages__petitparser__src__parser__combinator__optional$46dart.src__parser__repeater__possessive;
  const any = packages__petitparser__src__parser__combinator__optional$46dart.src__parser__predicate__any;
  const optional = packages__petitparser__src__parser__combinator__optional$46dart.src__parser__combinator__optional;
  const result = packages__petitparser__src__parser__combinator__optional$46dart.src__context__result;
  const parser_exception = packages__xml__src__xml__exceptions__parser_exception$46dart.src__xml__exceptions__parser_exception;
  const resolve = packages__petitparser__src__definition__resolve$46dart.src__definition__resolve;
  const reference = packages__petitparser__src__definition__resolve$46dart.src__definition__reference;
  const character_data_parser = packages__xml__src__xml__utils__character_data_parser$46dart.src__xml__utils__character_data_parser;
  const string = packages__petitparser__src__parser__predicate__string$46dart.src__parser__predicate__string;
  const attribute_type = packages__xml__src__xml__enums__attribute_type$46dart.src__xml__enums__attribute_type;
  const flatten$ = packages__petitparser__src__parser__action__flatten$46dart.src__parser__action__flatten;
  const lazy = packages__petitparser__src__parser__repeater__lazy$46dart.src__parser__repeater__lazy;
  const pick = packages__petitparser__src__parser__action__pick$46dart.src__parser__action__pick;
  const external_id = packages__xml__src__xml__dtd__external_id$46dart.src__xml__dtd__external_id;
  const skip = packages__petitparser__src__parser__combinator__skip$46dart.src__parser__combinator__skip;
  const whitespace = packages__petitparser__src__parser__character__whitespace$46dart.src__parser__character__whitespace;
  const pattern = packages__petitparser__src__parser__character__pattern$46dart.src__parser__character__pattern;
  const token = packages__xml__src__xml__utils__token$46dart.src__xml__utils__token;
  const cache = packages__xml__src__xml__utils__cache$46dart.src__xml__utils__cache;
  const equality = packages__collection__src__equality$46dart.src__equality;
  const exception = packages__xml__src__xml__exceptions__exception$46dart.src__xml__exceptions__exception;
  const wrappers = packages__collection__src__union_set_controller$46dart.src__wrappers;
  var simple_name = Object.create(dart.library);
  var prefix_name = Object.create(dart.library);
  var has_xml = Object.create(dart.library);
  var writer$ = Object.create(dart.library);
  var pretty_writer = Object.create(dart.library);
  var has_writer = Object.create(dart.library);
  var descendants = Object.create(dart.library);
  var has_text = Object.create(dart.library);
  var document_fragment = Object.create(dart.library);
  var with_parent = Object.create(dart.library);
  var subtree_selector = Object.create(dart.library);
  var normalizer = Object.create(dart.library);
  var for_each_event = Object.create(dart.library);
  var node_encoder = Object.create(dart.library);
  var text$ = Object.create(dart.library);
  var processing = Object.create(dart.library);
  var parent = Object.create(dart.library);
  var node_decoder = Object.create(dart.library);
  var node_codec = Object.create(dart.library);
  var event_decoder = Object.create(dart.library);
  var event_codec = Object.create(dart.library);
  var parser$ = Object.create(dart.library);
  var iterator = Object.create(dart.library);
  var annotator = Object.create(dart.library);
  var iterable = Object.create(dart.library);
  var event_encoder = Object.create(dart.library);
  var text$0 = Object.create(dart.library);
  var processing$ = Object.create(dart.library);
  var end_element = Object.create(dart.library);
  var doctype = Object.create(dart.library);
  var declaration = Object.create(dart.library);
  var comment = Object.create(dart.library);
  var cdata = Object.create(dart.library);
  var visitor = Object.create(dart.library);
  var named = Object.create(dart.library);
  var event_attribute = Object.create(dart.library);
  var start_element = Object.create(dart.library);
  var has_parent = Object.create(dart.library);
  var event = Object.create(dart.library);
  var xml_events = Object.create(dart.library);
  var document = Object.create(dart.library);
  var doctype$ = Object.create(dart.library);
  var declaration$ = Object.create(dart.library);
  var comment$ = Object.create(dart.library);
  var data = Object.create(dart.library);
  var cdata$ = Object.create(dart.library);
  var has_visitor = Object.create(dart.library);
  var visitor$ = Object.create(dart.library);
  var element$ = Object.create(dart.library);
  var has_children = Object.create(dart.library);
  var type_exception = Object.create(dart.library);
  var node_list = Object.create(dart.library);
  var namespace$ = Object.create(dart.library);
  var name_matcher = Object.create(dart.library);
  var has_attributes = Object.create(dart.library);
  var node = Object.create(dart.library);
  var parent_exception = Object.create(dart.library);
  var has_parent$ = Object.create(dart.library);
  var name$ = Object.create(dart.library);
  var has_name = Object.create(dart.library);
  var attribute$ = Object.create(dart.library);
  var $noSuchMethod = dartx.noSuchMethod;
  var $isEmpty = dartx.isEmpty;
  var $indexOf = dartx.indexOf;
  var $substring = dartx.substring;
  var $hashCode = dartx.hashCode;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $where = dartx.where;
  var $map = dartx.map;
  var $join = dartx.join;
  var $clear = dartx.clear;
  var $isNotEmpty = dartx.isNotEmpty;
  var $add = dartx.add;
  var $iterator = dartx.iterator;
  var $times = dartx['*'];
  var $toList = dartx.toList;
  var $sort = dartx.sort;
  var $trim = dartx.trim;
  var $replaceAll = dartx.replaceAll;
  var $last = dartx.last;
  var $reversed = dartx.reversed;
  var $addAll = dartx.addAll;
  var $removeLast = dartx.removeLast;
  var $whereType = dartx.whereType;
  var $forEach = dartx.forEach;
  var $removeAt = dartx.removeAt;
  var $sublist = dartx.sublist;
  var $removeRange = dartx.removeRange;
  var $_equals = dartx._equals;
  var $contains = dartx.contains;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T$ = {
    XmlNodeTobool: () => (T$.XmlNodeTobool = dart.constFn(dart.fnType(core.bool, [node.XmlNode])))(),
    XmlNodeToString: () => (T$.XmlNodeToString = dart.constFn(dart.fnType(core.String, [node.XmlNode])))(),
    JSArrayOfXmlNode: () => (T$.JSArrayOfXmlNode = dart.constFn(_interceptors.JSArray$(node.XmlNode)))(),
    XmlNodeToXmlNode: () => (T$.XmlNodeToXmlNode = dart.constFn(dart.fnType(node.XmlNode, [node.XmlNode])))(),
    ListOfXmlEvent: () => (T$.ListOfXmlEvent = dart.constFn(core.List$(event.XmlEvent)))(),
    SinkOfListOfXmlEvent: () => (T$.SinkOfListOfXmlEvent = dart.constFn(core.Sink$(T$.ListOfXmlEvent())))(),
    JSArrayOfXmlEvent: () => (T$.JSArrayOfXmlEvent = dart.constFn(_interceptors.JSArray$(event.XmlEvent)))(),
    StreamOfListOfXmlEvent: () => (T$.StreamOfListOfXmlEvent = dart.constFn(async.Stream$(T$.ListOfXmlEvent())))(),
    VoidToStreamOfListOfXmlEvent: () => (T$.VoidToStreamOfListOfXmlEvent = dart.constFn(dart.fnType(T$.StreamOfListOfXmlEvent(), [])))(),
    JSArrayOfXmlStartElementEvent: () => (T$.JSArrayOfXmlStartElementEvent = dart.constFn(_interceptors.JSArray$(start_element.XmlStartElementEvent)))(),
    XmlStartElementEventTobool: () => (T$.XmlStartElementEventTobool = dart.constFn(dart.fnType(core.bool, [start_element.XmlStartElementEvent])))(),
    FnToStreamOfListOfXmlEvent: () => (T$.FnToStreamOfListOfXmlEvent = dart.constFn(dart.fnType(T$.StreamOfListOfXmlEvent(), [T$.XmlStartElementEventTobool()])))(),
    XmlEventTobool: () => (T$.XmlEventTobool = dart.constFn(dart.fnType(core.bool, [event.XmlEvent])))(),
    XmlCDATAEventTovoid: () => (T$.XmlCDATAEventTovoid = dart.constFn(dart.fnType(dart.void, [cdata.XmlCDATAEvent])))(),
    XmlCDATAEventToNvoid: () => (T$.XmlCDATAEventToNvoid = dart.constFn(dart.nullable(T$.XmlCDATAEventTovoid())))(),
    XmlCommentEventTovoid: () => (T$.XmlCommentEventTovoid = dart.constFn(dart.fnType(dart.void, [comment.XmlCommentEvent])))(),
    XmlCommentEventToNvoid: () => (T$.XmlCommentEventToNvoid = dart.constFn(dart.nullable(T$.XmlCommentEventTovoid())))(),
    XmlDeclarationEventTovoid: () => (T$.XmlDeclarationEventTovoid = dart.constFn(dart.fnType(dart.void, [declaration.XmlDeclarationEvent])))(),
    XmlDeclarationEventToNvoid: () => (T$.XmlDeclarationEventToNvoid = dart.constFn(dart.nullable(T$.XmlDeclarationEventTovoid())))(),
    XmlDoctypeEventTovoid: () => (T$.XmlDoctypeEventTovoid = dart.constFn(dart.fnType(dart.void, [doctype.XmlDoctypeEvent])))(),
    XmlDoctypeEventToNvoid: () => (T$.XmlDoctypeEventToNvoid = dart.constFn(dart.nullable(T$.XmlDoctypeEventTovoid())))(),
    XmlEndElementEventTovoid: () => (T$.XmlEndElementEventTovoid = dart.constFn(dart.fnType(dart.void, [end_element.XmlEndElementEvent])))(),
    XmlEndElementEventToNvoid: () => (T$.XmlEndElementEventToNvoid = dart.constFn(dart.nullable(T$.XmlEndElementEventTovoid())))(),
    XmlProcessingEventTovoid: () => (T$.XmlProcessingEventTovoid = dart.constFn(dart.fnType(dart.void, [processing$.XmlProcessingEvent])))(),
    XmlProcessingEventToNvoid: () => (T$.XmlProcessingEventToNvoid = dart.constFn(dart.nullable(T$.XmlProcessingEventTovoid())))(),
    XmlStartElementEventTovoid: () => (T$.XmlStartElementEventTovoid = dart.constFn(dart.fnType(dart.void, [start_element.XmlStartElementEvent])))(),
    XmlStartElementEventToNvoid: () => (T$.XmlStartElementEventToNvoid = dart.constFn(dart.nullable(T$.XmlStartElementEventTovoid())))(),
    XmlTextEventTovoid: () => (T$.XmlTextEventTovoid = dart.constFn(dart.fnType(dart.void, [text$0.XmlTextEvent])))(),
    XmlTextEventToNvoid: () => (T$.XmlTextEventToNvoid = dart.constFn(dart.nullable(T$.XmlTextEventTovoid())))(),
    __ToFuture: () => (T$.__ToFuture = dart.constFn(dart.fnType(async.Future, [], {onCDATA: T$.XmlCDATAEventToNvoid(), onComment: T$.XmlCommentEventToNvoid(), onDeclaration: T$.XmlDeclarationEventToNvoid(), onDoctype: T$.XmlDoctypeEventToNvoid(), onEndElement: T$.XmlEndElementEventToNvoid(), onProcessing: T$.XmlProcessingEventToNvoid(), onStartElement: T$.XmlStartElementEventToNvoid(), onText: T$.XmlTextEventToNvoid()}, {})))(),
    ListOfXmlNode: () => (T$.ListOfXmlNode = dart.constFn(core.List$(node.XmlNode)))(),
    XmlAttributeToXmlEventAttribute: () => (T$.XmlAttributeToXmlEventAttribute = dart.constFn(dart.fnType(event_attribute.XmlEventAttribute, [attribute$.XmlAttribute])))(),
    SinkOfListOfXmlNode: () => (T$.SinkOfListOfXmlNode = dart.constFn(core.Sink$(T$.ListOfXmlNode())))(),
    ConversionSinkOfListOfXmlNode: () => (T$.ConversionSinkOfListOfXmlNode = dart.constFn(conversion_sink.ConversionSink$(T$.ListOfXmlNode())))(),
    IterableOfXmlNode: () => (T$.IterableOfXmlNode = dart.constFn(core.Iterable$(node.XmlNode)))(),
    IterableOfXmlNodeTovoid: () => (T$.IterableOfXmlNodeTovoid = dart.constFn(dart.fnType(dart.void, [T$.IterableOfXmlNode()])))(),
    XmlEventAttributeToXmlAttribute: () => (T$.XmlEventAttributeToXmlAttribute = dart.constFn(dart.fnType(attribute$.XmlAttribute, [event_attribute.XmlEventAttribute])))(),
    StreamOfListOfXmlNode: () => (T$.StreamOfListOfXmlNode = dart.constFn(async.Stream$(T$.ListOfXmlNode())))(),
    VoidToStreamOfListOfXmlNode: () => (T$.VoidToStreamOfListOfXmlNode = dart.constFn(dart.fnType(T$.StreamOfListOfXmlNode(), [])))(),
    ConversionSinkOfListOfXmlEvent: () => (T$.ConversionSinkOfListOfXmlEvent = dart.constFn(conversion_sink.ConversionSink$(T$.ListOfXmlEvent())))(),
    IterableOfXmlEvent: () => (T$.IterableOfXmlEvent = dart.constFn(core.Iterable$(event.XmlEvent)))(),
    IterableOfXmlEventTovoid: () => (T$.IterableOfXmlEventTovoid = dart.constFn(dart.fnType(dart.void, [T$.IterableOfXmlEvent()])))(),
    FailureOfXmlEvent: () => (T$.FailureOfXmlEvent = dart.constFn(failure.Failure$(event.XmlEvent)))(),
    XmlEntityMappingN: () => (T$.XmlEntityMappingN = dart.constFn(dart.nullable(entity_mapping.XmlEntityMapping)))(),
    __ToStreamOfListOfXmlEvent: () => (T$.__ToStreamOfListOfXmlEvent = dart.constFn(dart.fnType(T$.StreamOfListOfXmlEvent(), [], {entityMapping: T$.XmlEntityMappingN(), validateDocument: core.bool, validateNesting: core.bool, withLocation: core.bool, withParent: core.bool}, {})))(),
    ParserOfXmlEvent: () => (T$.ParserOfXmlEvent = dart.constFn(parser.Parser$(event.XmlEvent)))(),
    JSArrayOfParserOfXmlEvent: () => (T$.JSArrayOfParserOfXmlEvent = dart.constFn(_interceptors.JSArray$(T$.ParserOfXmlEvent())))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    FailureOfTAndFailureOfTToFailureOfT: () => (T$.FailureOfTAndFailureOfTToFailureOfT = dart.constFn(dart.gFnType(T => [failure.Failure$(T), [failure.Failure$(T), failure.Failure$(T)]], T => [T$.ObjectN()])))(),
    StringToXmlRawTextEvent: () => (T$.StringToXmlRawTextEvent = dart.constFn(dart.fnType(text$0.XmlRawTextEvent, [core.String])))(),
    ListOfObject: () => (T$.ListOfObject = dart.constFn(core.List$(core.Object)))(),
    ListOfXmlEventAttribute: () => (T$.ListOfXmlEventAttribute = dart.constFn(core.List$(event_attribute.XmlEventAttribute)))(),
    ParserOfString: () => (T$.ParserOfString = dart.constFn(parser.Parser$(core.String)))(),
    JSArrayOfParserOfString: () => (T$.JSArrayOfParserOfString = dart.constFn(_interceptors.JSArray$(T$.ParserOfString())))(),
    FailureOfTAndFailureOfTToFailureOfT$1: () => (T$.FailureOfTAndFailureOfTToFailureOfT$1 = dart.constFn(dart.gFnType(T => [failure.Failure$(T), [failure.Failure$(T), failure.Failure$(T)]], T => [T$.ObjectN()])))(),
    ParserOfObject: () => (T$.ParserOfObject = dart.constFn(parser.Parser$(core.Object)))(),
    JSArrayOfParserOfObject: () => (T$.JSArrayOfParserOfObject = dart.constFn(_interceptors.JSArray$(T$.ParserOfObject())))(),
    ListOfObjectToXmlStartElementEvent: () => (T$.ListOfObjectToXmlStartElementEvent = dart.constFn(dart.fnType(start_element.XmlStartElementEvent, [T$.ListOfObject()])))(),
    ListOfString: () => (T$.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfObjectToXmlEventAttribute: () => (T$.ListOfObjectToXmlEventAttribute = dart.constFn(dart.fnType(event_attribute.XmlEventAttribute, [T$.ListOfObject()])))(),
    ParserOfListOfString: () => (T$.ParserOfListOfString = dart.constFn(parser.Parser$(T$.ListOfString())))(),
    JSArrayOfParserOfListOfString: () => (T$.JSArrayOfParserOfListOfString = dart.constFn(_interceptors.JSArray$(T$.ParserOfListOfString())))(),
    ListOfStringToXmlEndElementEvent: () => (T$.ListOfStringToXmlEndElementEvent = dart.constFn(dart.fnType(end_element.XmlEndElementEvent, [T$.ListOfString()])))(),
    ListOfStringToXmlCommentEvent: () => (T$.ListOfStringToXmlCommentEvent = dart.constFn(dart.fnType(comment.XmlCommentEvent, [T$.ListOfString()])))(),
    ListOfStringToXmlCDATAEvent: () => (T$.ListOfStringToXmlCDATAEvent = dart.constFn(dart.fnType(cdata.XmlCDATAEvent, [T$.ListOfString()])))(),
    ListOfObjectToXmlDeclarationEvent: () => (T$.ListOfObjectToXmlDeclarationEvent = dart.constFn(dart.fnType(declaration.XmlDeclarationEvent, [T$.ListOfObject()])))(),
    ListOfStringToXmlProcessingEvent: () => (T$.ListOfStringToXmlProcessingEvent = dart.constFn(dart.fnType(processing$.XmlProcessingEvent, [T$.ListOfString()])))(),
    ListOfObjectN: () => (T$.ListOfObjectN = dart.constFn(core.List$(T$.ObjectN())))(),
    ParserOfObjectN: () => (T$.ParserOfObjectN = dart.constFn(parser.Parser$(T$.ObjectN())))(),
    JSArrayOfParserOfObjectN: () => (T$.JSArrayOfParserOfObjectN = dart.constFn(_interceptors.JSArray$(T$.ParserOfObjectN())))(),
    DtdExternalIdN: () => (T$.DtdExternalIdN = dart.constFn(dart.nullable(external_id.DtdExternalId)))(),
    StringN: () => (T$.StringN = dart.constFn(dart.nullable(core.String)))(),
    ListOfObjectNToXmlDoctypeEvent: () => (T$.ListOfObjectNToXmlDoctypeEvent = dart.constFn(dart.fnType(doctype.XmlDoctypeEvent, [T$.ListOfObjectN()])))(),
    ListOfObjectToDtdExternalId: () => (T$.ListOfObjectToDtdExternalId = dart.constFn(dart.fnType(external_id.DtdExternalId, [T$.ListOfObject()])))(),
    ParserOfDtdExternalId: () => (T$.ParserOfDtdExternalId = dart.constFn(parser.Parser$(external_id.DtdExternalId)))(),
    JSArrayOfParserOfDtdExternalId: () => (T$.JSArrayOfParserOfDtdExternalId = dart.constFn(_interceptors.JSArray$(T$.ParserOfDtdExternalId())))(),
    JSArrayOfParser: () => (T$.JSArrayOfParser = dart.constFn(_interceptors.JSArray$(parser.Parser)))(),
    XmlCacheOfXmlEntityMapping$ParserOfXmlEvent: () => (T$.XmlCacheOfXmlEntityMapping$ParserOfXmlEvent = dart.constFn(cache.XmlCache$(entity_mapping.XmlEntityMapping, T$.ParserOfXmlEvent())))(),
    dynamicToParserOfXmlEvent: () => (T$.dynamicToParserOfXmlEvent = dart.constFn(dart.fnType(T$.ParserOfXmlEvent(), [dart.dynamic])))(),
    ConversionSinkOfString: () => (T$.ConversionSinkOfString = dart.constFn(conversion_sink.ConversionSink$(core.String)))(),
    SinkOfString: () => (T$.SinkOfString = dart.constFn(core.Sink$(core.String)))(),
    StreamOfString: () => (T$.StreamOfString = dart.constFn(async.Stream$(core.String)))(),
    __ToStreamOfString: () => (T$.__ToStreamOfString = dart.constFn(dart.fnType(T$.StreamOfString(), [], {entityMapping: T$.XmlEntityMappingN()}, {})))(),
    DefaultEqualityOfNever: () => (T$.DefaultEqualityOfNever = dart.constFn(equality.DefaultEquality$(dart.Never)))(),
    XmlAttributeToXmlAttribute: () => (T$.XmlAttributeToXmlAttribute = dart.constFn(dart.fnType(attribute$.XmlAttribute, [attribute$.XmlAttribute])))(),
    XmlNodeListOfXmlAttribute: () => (T$.XmlNodeListOfXmlAttribute = dart.constFn(node_list.XmlNodeList$(attribute$.XmlAttribute)))(),
    XmlNodeN: () => (T$.XmlNodeN = dart.constFn(dart.nullable(node.XmlNode)))(),
    XmlHasNameTobool: () => (T$.XmlHasNameTobool = dart.constFn(dart.fnType(core.bool, [has_name.XmlHasName])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const(new _js_helper.PrivateSymbol.new('_throwNoParent', _throwNoParent));
    },
    get C1() {
      return C[1] = dart.constList([], attribute$.XmlAttribute);
    },
    get C2() {
      return C[2] = dart.constList([], node.XmlNode);
    },
    get C3() {
      return C[3] = dart.constList([], element$.XmlElement);
    },
    get C4() {
      return C[4] = dart.const(new _js_helper.PrivateSymbol.new('_throwNoParent', _throwNoParent$0));
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: node_type.XmlNodeType.prototype,
        [_Enum__name]: "CDATA",
        [_Enum_index]: 1
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: node_type.XmlNodeType.prototype,
        [_Enum__name]: "COMMENT",
        [_Enum_index]: 2
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: node_type.XmlNodeType.prototype,
        [_Enum__name]: "DECLARATION",
        [_Enum_index]: 3
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: node_type.XmlNodeType.prototype,
        [_Enum__name]: "DOCUMENT_TYPE",
        [_Enum_index]: 4
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: node_type.XmlNodeType.prototype,
        [_Enum__name]: "ELEMENT",
        [_Enum_index]: 7
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: node_type.XmlNodeType.prototype,
        [_Enum__name]: "PROCESSING",
        [_Enum_index]: 8
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: node_type.XmlNodeType.prototype,
        [_Enum__name]: "TEXT",
        [_Enum_index]: 9
      });
    },
    get C5() {
      return C[5] = dart.constSet(node_type.XmlNodeType, [C[6] || CT.C6, C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9, C[10] || CT.C10, C[11] || CT.C11, C[12] || CT.C12]);
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: with_parent.XmlWithParentEvents.prototype
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: normalizer.XmlNormalizeEvents.prototype
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: node_encoder.XmlNodeEncoder.prototype
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: node_decoder.XmlNodeDecoder.prototype
      });
    },
    get C18() {
      return C[18] = dart.fn(failure_joiner.selectFarthest, T$.FailureOfTAndFailureOfTToFailureOfT());
    },
    get C17() {
      return C[17] = dart.const(dart.gbind(C[18] || CT.C18, event.XmlEvent));
    },
    get C20() {
      return C[20] = dart.fn(failure_joiner.selectFirst, T$.FailureOfTAndFailureOfTToFailureOfT$1());
    },
    get C19() {
      return C[19] = dart.const(dart.gbind(C[20] || CT.C20, core.String));
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: T$.DefaultEqualityOfNever().prototype
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: equality.ListEquality.prototype,
        [ListEquality__elementEquality]: C[22] || CT.C22
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: node_type.XmlNodeType.prototype,
        [_Enum__name]: "ATTRIBUTE",
        [_Enum_index]: 0
      });
    },
    get C23() {
      return C[23] = dart.constSet(node_type.XmlNodeType, [C[24] || CT.C24]);
    },
    get C25() {
      return C[25] = dart.constSet(node_type.XmlNodeType, [C[6] || CT.C6, C[7] || CT.C7, C[10] || CT.C10, C[11] || CT.C11, C[12] || CT.C12]);
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: attribute_type.XmlAttributeType.prototype,
        [_Enum__name]: "DOUBLE_QUOTE",
        [_Enum_index]: 1,
        token: "\""
      });
    }
  }, false);
  var C = Array(27).fill(void 0);
  var I = [
    "package:xml/src/xml/mixins/has_visitor.dart",
    "package:xml/src/xml/mixins/has_writer.dart",
    "package:xml/src/xml/mixins/has_parent.dart",
    "package:xml/src/xml/mixins/has_attributes.dart",
    "package:xml/src/xml/mixins/has_children.dart",
    "package:xml/src/xml/mixins/has_text.dart",
    "package:xml/src/xml/mixins/has_xml.dart",
    "package:xml/src/xml/nodes/node.dart",
    "package:xml/src/xml/utils/name.dart",
    "package:xml/src/xml/utils/simple_name.dart",
    "package:xml/src/xml/utils/prefix_name.dart",
    "package:xml/src/xml/visitors/visitor.dart",
    "package:xml/src/xml/visitors/writer.dart",
    "package:xml/src/xml/visitors/pretty_writer.dart",
    "package:xml/src/xml/navigation/descendants.dart",
    "package:xml/src/xml/nodes/document_fragment.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/xml-6.1.0/lib/src/xml_events/annotations/has_parent.dart",
    "package:xml/src/xml_events/annotations/has_parent.dart",
    "package:xml/src/xml_events/event.dart",
    "package:xml/src/xml_events/streams/with_parent.dart",
    "package:xml/src/xml_events/visitor.dart",
    "package:xml/src/xml_events/streams/subtree_selector.dart",
    "package:xml/src/xml_events/streams/normalizer.dart",
    "package:xml/src/xml_events/streams/for_each_event.dart",
    "package:xml/src/xml_events/converters/node_encoder.dart",
    "package:xml/src/xml/nodes/data.dart",
    "package:xml/src/xml/nodes/text.dart",
    "package:xml/src/xml/nodes/processing.dart",
    "package:xml/src/xml_events/converters/node_decoder.dart",
    "package:xml/src/xml_events/codec/node_codec.dart",
    "package:xml/src/xml_events/converters/event_decoder.dart",
    "package:xml/src/xml_events/codec/event_codec.dart",
    "package:xml/src/xml_events/parser.dart",
    "package:xml/src/xml_events/iterator.dart",
    "package:xml/src/xml_events/annotations/annotator.dart",
    "package:xml/src/xml_events/iterable.dart",
    "package:xml/src/xml_events/converters/event_encoder.dart",
    "package:xml/src/xml_events/events/text.dart",
    "package:xml/src/xml_events/events/processing.dart",
    "package:xml/src/xml_events/utils/named.dart",
    "package:xml/src/xml_events/events/end_element.dart",
    "package:xml/src/xml_events/events/doctype.dart",
    "package:xml/src/xml_events/events/declaration.dart",
    "package:xml/src/xml_events/events/comment.dart",
    "package:xml/src/xml_events/events/cdata.dart",
    "package:xml/src/xml_events/utils/event_attribute.dart",
    "package:xml/src/xml_events/events/start_element.dart",
    "package:xml/src/xml/nodes/document.dart",
    "package:xml/src/xml/nodes/doctype.dart",
    "package:xml/src/xml/nodes/declaration.dart",
    "package:xml/src/xml/nodes/comment.dart",
    "package:xml/src/xml/nodes/cdata.dart",
    "package:xml/src/xml/mixins/has_name.dart",
    "package:xml/src/xml/nodes/element.dart",
    "package:xml/src/xml/exceptions/type_exception.dart",
    "package:xml/src/xml/utils/node_list.dart",
    "package:xml/src/xml/exceptions/parent_exception.dart",
    "package:xml/src/xml/nodes/attribute.dart"
  ];
  var local$ = dart.privateName(simple_name, "XmlSimpleName.local");
  var _throwNoParent = dart.privateName(simple_name, "_throwNoParent");
  var _throwNoParent$ = dart.privateName(has_parent$, "_throwNoParent");
  has_visitor.XmlHasVisitor = class XmlHasVisitor extends core.Object {};
  has_visitor.XmlHasVisitor[dart.mixinOn] = Object => class XmlHasVisitor extends Object {};
  (has_visitor.XmlHasVisitor[dart.mixinNew] = function() {
  }).prototype = has_visitor.XmlHasVisitor.prototype;
  dart.addTypeTests(has_visitor.XmlHasVisitor);
  dart.addTypeCaches(has_visitor.XmlHasVisitor);
  has_visitor.XmlHasVisitor[dart.implements] = () => [core.Object];
  dart.setLibraryUri(has_visitor.XmlHasVisitor, I[0]);
  has_writer.XmlHasWriter = class XmlHasWriter extends core.Object {};
  has_writer.XmlHasWriter[dart.mixinOn] = Object => {
    class XmlHasWriter extends Object {
      toXmlString(opts) {
        let pretty = opts && 'pretty' in opts ? opts.pretty : false;
        let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
        let level = opts && 'level' in opts ? opts.level : null;
        let indent = opts && 'indent' in opts ? opts.indent : null;
        let newLine = opts && 'newLine' in opts ? opts.newLine : null;
        let preserveWhitespace = opts && 'preserveWhitespace' in opts ? opts.preserveWhitespace : null;
        let indentAttribute = opts && 'indentAttribute' in opts ? opts.indentAttribute : null;
        let sortAttributes = opts && 'sortAttributes' in opts ? opts.sortAttributes : null;
        let spaceBeforeSelfClose = opts && 'spaceBeforeSelfClose' in opts ? opts.spaceBeforeSelfClose : null;
        let buffer = new core.StringBuffer.new();
        let writer = pretty ? new pretty_writer.XmlPrettyWriter.new(buffer, {entityMapping: entityMapping, level: level, indent: indent, newLine: newLine, preserveWhitespace: preserveWhitespace, indentAttribute: indentAttribute, sortAttributes: sortAttributes, spaceBeforeSelfClose: spaceBeforeSelfClose}) : new writer$.XmlWriter.new(buffer, {entityMapping: entityMapping});
        writer.visit(this);
        return buffer.toString();
      }
      toString() {
        return this.toXmlString();
      }
    }
    dart.defineExtensionMethods(XmlHasWriter, ['toString']);
    return XmlHasWriter;
  };
  (has_writer.XmlHasWriter[dart.mixinNew] = function() {
  }).prototype = has_writer.XmlHasWriter.prototype;
  dart.addTypeTests(has_writer.XmlHasWriter);
  dart.addTypeCaches(has_writer.XmlHasWriter);
  has_writer.XmlHasWriter[dart.implements] = () => [has_visitor.XmlHasVisitor, core.Object];
  dart.setMethodSignature(has_writer.XmlHasWriter, () => ({
    __proto__: dart.getMethods(has_writer.XmlHasWriter.__proto__),
    toXmlString: dart.fnType(core.String, [], {entityMapping: dart.nullable(entity_mapping.XmlEntityMapping), indent: dart.nullable(core.String), indentAttribute: dart.nullable(dart.fnType(core.bool, [attribute$.XmlAttribute])), level: dart.nullable(core.int), newLine: dart.nullable(core.String), preserveWhitespace: dart.nullable(dart.fnType(core.bool, [node.XmlNode])), pretty: core.bool, sortAttributes: dart.nullable(dart.fnType(core.int, [attribute$.XmlAttribute, attribute$.XmlAttribute])), spaceBeforeSelfClose: dart.nullable(dart.fnType(core.bool, [node.XmlNode]))}, {})
  }));
  dart.setLibraryUri(has_writer.XmlHasWriter, I[1]);
  var _parent = dart.privateName(has_parent$, "_parent");
  const _is_XmlHasParent_default = Symbol('_is_XmlHasParent_default');
  has_parent$.XmlHasParent$ = dart.generic(T => {
    class XmlHasParent extends core.Object {}
    XmlHasParent[dart.mixinOn] = Object => class XmlHasParent extends Object {
      get parent() {
        return this[_parent];
      }
      get hasParent() {
        return this[_parent] != null;
      }
      replace(other) {
        if (this[_parent] != null) {
          let siblings = dart.nullCheck(this[_parent]).children;
          for (let i = 0; i < siblings[$length]; i = i + 1) {
            if (siblings[$_get](i) === this) {
              siblings[$_set](i, other);
              break;
            }
          }
        }
      }
      attachParent(parent) {
        T.as(parent);
        parent_exception.XmlParentException.checkNoParent(this);
        this[_parent] = parent;
      }
      detachParent(parent) {
        T.as(parent);
        parent_exception.XmlParentException.checkMatchingParent(this, parent);
        this[_parent] = null;
      }
    };
    (XmlHasParent[dart.mixinNew] = function() {
      this[_parent] = null;
    }).prototype = XmlHasParent.prototype;
    dart.addTypeTests(XmlHasParent);
    XmlHasParent.prototype[_is_XmlHasParent_default] = true;
    dart.addTypeCaches(XmlHasParent);
    XmlHasParent[dart.implements] = () => [has_parent$.XmlParentBase, core.Object];
    dart.setMethodSignature(XmlHasParent, () => ({
      __proto__: dart.getMethods(XmlHasParent.__proto__),
      replace: dart.fnType(dart.void, [node.XmlNode]),
      attachParent: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      detachParent: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(XmlHasParent, () => ({
      __proto__: dart.getGetters(XmlHasParent.__proto__),
      parent: dart.nullable(T),
      hasParent: core.bool
    }));
    dart.setLibraryUri(XmlHasParent, I[2]);
    dart.setFieldSignature(XmlHasParent, () => ({
      __proto__: dart.getFields(XmlHasParent.__proto__),
      [_parent]: dart.fieldType(dart.nullable(T))
    }));
    return XmlHasParent;
  });
  has_parent$.XmlHasParent = has_parent$.XmlHasParent$();
  dart.addTypeTests(has_parent$.XmlHasParent, _is_XmlHasParent_default);
  has_attributes.XmlAttributesBase = class XmlAttributesBase extends core.Object {};
  has_attributes.XmlAttributesBase[dart.mixinOn] = Object => class XmlAttributesBase extends Object {
    get attributes() {
      return C[1] || CT.C1;
    }
    getAttribute(name, opts) {
      let namespace = opts && 'namespace' in opts ? opts.namespace : null;
      return null;
    }
    getAttributeNode(name, opts) {
      let namespace = opts && 'namespace' in opts ? opts.namespace : null;
      return null;
    }
    setAttribute(name, value, opts) {
      let namespace = opts && 'namespace' in opts ? opts.namespace : null;
      return dart.throw(new core.UnsupportedError.new(dart.str(this) + " has no attributes."));
    }
    removeAttribute(name, opts) {
      let namespace = opts && 'namespace' in opts ? opts.namespace : null;
      return this.setAttribute(name, null, {namespace: namespace});
    }
  };
  (has_attributes.XmlAttributesBase[dart.mixinNew] = function() {
  }).prototype = has_attributes.XmlAttributesBase.prototype;
  dart.addTypeTests(has_attributes.XmlAttributesBase);
  dart.addTypeCaches(has_attributes.XmlAttributesBase);
  has_attributes.XmlAttributesBase[dart.implements] = () => [core.Object];
  dart.setMethodSignature(has_attributes.XmlAttributesBase, () => ({
    __proto__: dart.getMethods(has_attributes.XmlAttributesBase.__proto__),
    getAttribute: dart.fnType(dart.nullable(core.String), [core.String], {namespace: dart.nullable(core.String)}, {}),
    getAttributeNode: dart.fnType(dart.nullable(attribute$.XmlAttribute), [core.String], {namespace: dart.nullable(core.String)}, {}),
    setAttribute: dart.fnType(dart.void, [core.String, dart.nullable(core.String)], {namespace: dart.nullable(core.String)}, {}),
    removeAttribute: dart.fnType(dart.void, [core.String], {namespace: dart.nullable(core.String)}, {})
  }));
  dart.setGetterSignature(has_attributes.XmlAttributesBase, () => ({
    __proto__: dart.getGetters(has_attributes.XmlAttributesBase.__proto__),
    attributes: core.List$(attribute$.XmlAttribute)
  }));
  dart.setLibraryUri(has_attributes.XmlAttributesBase, I[3]);
  has_children.XmlChildrenBase = class XmlChildrenBase extends core.Object {};
  has_children.XmlChildrenBase[dart.mixinOn] = Object => class XmlChildrenBase extends Object {
    get children() {
      return C[2] || CT.C2;
    }
    get childElements() {
      return C[3] || CT.C3;
    }
    getElement(name, opts) {
      let namespace = opts && 'namespace' in opts ? opts.namespace : null;
      return null;
    }
    get firstChild() {
      return null;
    }
    get firstElementChild() {
      return null;
    }
    get lastChild() {
      return null;
    }
    get lastElementChild() {
      return null;
    }
  };
  (has_children.XmlChildrenBase[dart.mixinNew] = function() {
  }).prototype = has_children.XmlChildrenBase.prototype;
  dart.addTypeTests(has_children.XmlChildrenBase);
  dart.addTypeCaches(has_children.XmlChildrenBase);
  has_children.XmlChildrenBase[dart.implements] = () => [core.Object];
  dart.setMethodSignature(has_children.XmlChildrenBase, () => ({
    __proto__: dart.getMethods(has_children.XmlChildrenBase.__proto__),
    getElement: dart.fnType(dart.nullable(element$.XmlElement), [core.String], {namespace: dart.nullable(core.String)}, {})
  }));
  dart.setGetterSignature(has_children.XmlChildrenBase, () => ({
    __proto__: dart.getGetters(has_children.XmlChildrenBase.__proto__),
    children: core.List$(node.XmlNode),
    childElements: core.Iterable$(element$.XmlElement),
    firstChild: dart.nullable(node.XmlNode),
    firstElementChild: dart.nullable(element$.XmlElement),
    lastChild: dart.nullable(node.XmlNode),
    lastElementChild: dart.nullable(element$.XmlElement)
  }));
  dart.setLibraryUri(has_children.XmlChildrenBase, I[4]);
  has_text.XmlHasText = class XmlHasText extends core.Object {};
  has_text.XmlHasText[dart.mixinOn] = Object => class XmlHasText extends Object {
    get text() {
      return this.innerText;
    }
    get innerText() {
      return new descendants.XmlDescendantsIterable.new(node.XmlNode.as(this))[$where](dart.fn(node => text$.XmlText.is(node) || cdata$.XmlCDATA.is(node), T$.XmlNodeTobool()))[$map](core.String, dart.fn(node => node.text, T$.XmlNodeToString()))[$join]();
    }
    set innerText(value) {
      this.children[$clear]();
      if (value[$isNotEmpty]) {
        this.children[$add](new text$.XmlText.new(value));
      }
    }
  };
  (has_text.XmlHasText[dart.mixinNew] = function() {
  }).prototype = has_text.XmlHasText.prototype;
  dart.addTypeTests(has_text.XmlHasText);
  dart.addTypeCaches(has_text.XmlHasText);
  has_text.XmlHasText[dart.implements] = () => [has_children.XmlChildrenBase, core.Object];
  dart.setGetterSignature(has_text.XmlHasText, () => ({
    __proto__: dart.getGetters(has_text.XmlHasText.__proto__),
    text: core.String,
    innerText: core.String
  }));
  dart.setSetterSignature(has_text.XmlHasText, () => ({
    __proto__: dart.getSetters(has_text.XmlHasText.__proto__),
    innerText: core.String
  }));
  dart.setLibraryUri(has_text.XmlHasText, I[5]);
  has_xml.XmlHasXml = class XmlHasXml extends core.Object {};
  has_xml.XmlHasXml[dart.mixinOn] = Object => class XmlHasXml extends Object {
    get outerXml() {
      return this.toXmlString();
    }
    set outerXml(value) {
      return this.replace(document_fragment.XmlDocumentFragment.parse(value));
    }
    get innerXml() {
      return this.children[$map](core.String, dart.fn(node => node.toXmlString(), T$.XmlNodeToString()))[$join]();
    }
    set innerXml(value) {
      let t0;
      t0 = this.children;
      return (() => {
        t0[$clear]();
        t0[$add](document_fragment.XmlDocumentFragment.parse(value));
        return t0;
      })();
    }
  };
  (has_xml.XmlHasXml[dart.mixinNew] = function() {
  }).prototype = has_xml.XmlHasXml.prototype;
  dart.addTypeTests(has_xml.XmlHasXml);
  dart.addTypeCaches(has_xml.XmlHasXml);
  has_xml.XmlHasXml[dart.implements] = () => [has_children.XmlChildrenBase, has_parent$.XmlParentBase, has_writer.XmlHasWriter, core.Object];
  dart.setGetterSignature(has_xml.XmlHasXml, () => ({
    __proto__: dart.getGetters(has_xml.XmlHasXml.__proto__),
    outerXml: core.String,
    innerXml: core.String
  }));
  dart.setSetterSignature(has_xml.XmlHasXml, () => ({
    __proto__: dart.getSetters(has_xml.XmlHasXml.__proto__),
    outerXml: core.String,
    innerXml: core.String
  }));
  dart.setLibraryUri(has_xml.XmlHasXml, I[6]);
  has_parent$.XmlParentBase = class XmlParentBase extends core.Object {};
  has_parent$.XmlParentBase[dart.mixinOn] = Object => class XmlParentBase extends Object {
    get parent() {
      return null;
    }
    get hasParent() {
      return false;
    }
    replace(other) {
      return this[_throwNoParent$]();
    }
    attachParent(parent) {
      node.XmlNode.as(parent);
      return this[_throwNoParent$]();
    }
    detachParent(parent) {
      node.XmlNode.as(parent);
      return this[_throwNoParent$]();
    }
    [_throwNoParent$]() {
      return dart.throw(new core.UnsupportedError.new(dart.str(this) + " does not have a parent."));
    }
  };
  (has_parent$.XmlParentBase[dart.mixinNew] = function() {
  }).prototype = has_parent$.XmlParentBase.prototype;
  dart.addTypeTests(has_parent$.XmlParentBase);
  dart.addTypeCaches(has_parent$.XmlParentBase);
  has_parent$.XmlParentBase[dart.implements] = () => [core.Object];
  dart.setMethodSignature(has_parent$.XmlParentBase, () => ({
    __proto__: dart.getMethods(has_parent$.XmlParentBase.__proto__),
    replace: dart.fnType(dart.void, [node.XmlNode]),
    attachParent: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    detachParent: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [_throwNoParent$]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(has_parent$.XmlParentBase, () => ({
    __proto__: dart.getGetters(has_parent$.XmlParentBase.__proto__),
    parent: dart.nullable(node.XmlNode),
    hasParent: core.bool
  }));
  dart.setLibraryUri(has_parent$.XmlParentBase, I[2]);
  const Object_XmlAttributesBase$36 = class Object_XmlAttributesBase extends core.Object {};
  (Object_XmlAttributesBase$36.new = function() {
  }).prototype = Object_XmlAttributesBase$36.prototype;
  dart.applyMixin(Object_XmlAttributesBase$36, has_attributes.XmlAttributesBase);
  const Object_XmlChildrenBase$36 = class Object_XmlChildrenBase extends Object_XmlAttributesBase$36 {};
  (Object_XmlChildrenBase$36.new = function() {
  }).prototype = Object_XmlChildrenBase$36.prototype;
  dart.applyMixin(Object_XmlChildrenBase$36, has_children.XmlChildrenBase);
  const Object_XmlHasText$36 = class Object_XmlHasText extends Object_XmlChildrenBase$36 {};
  (Object_XmlHasText$36.new = function() {
  }).prototype = Object_XmlHasText$36.prototype;
  dart.applyMixin(Object_XmlHasText$36, has_text.XmlHasText);
  const Object_XmlHasVisitor$36 = class Object_XmlHasVisitor extends Object_XmlHasText$36 {};
  (Object_XmlHasVisitor$36.new = function() {
  }).prototype = Object_XmlHasVisitor$36.prototype;
  dart.applyMixin(Object_XmlHasVisitor$36, has_visitor.XmlHasVisitor);
  const Object_XmlHasWriter$36 = class Object_XmlHasWriter extends Object_XmlHasVisitor$36 {};
  (Object_XmlHasWriter$36.new = function() {
  }).prototype = Object_XmlHasWriter$36.prototype;
  dart.applyMixin(Object_XmlHasWriter$36, has_writer.XmlHasWriter);
  const Object_XmlHasXml$36 = class Object_XmlHasXml extends Object_XmlHasWriter$36 {};
  (Object_XmlHasXml$36.new = function() {
  }).prototype = Object_XmlHasXml$36.prototype;
  dart.applyMixin(Object_XmlHasXml$36, has_xml.XmlHasXml);
  const Object_XmlParentBase$36 = class Object_XmlParentBase extends Object_XmlHasXml$36 {};
  (Object_XmlParentBase$36.new = function() {
  }).prototype = Object_XmlParentBase$36.prototype;
  dart.applyMixin(Object_XmlParentBase$36, has_parent$.XmlParentBase);
  node.XmlNode = class XmlNode extends Object_XmlParentBase$36 {};
  (node.XmlNode.new = function() {
    ;
  }).prototype = node.XmlNode.prototype;
  dart.addTypeTests(node.XmlNode);
  dart.addTypeCaches(node.XmlNode);
  dart.setLibraryUri(node.XmlNode, I[7]);
  const Object_XmlHasVisitor$36$ = class Object_XmlHasVisitor extends core.Object {};
  (Object_XmlHasVisitor$36$.new = function() {
  }).prototype = Object_XmlHasVisitor$36$.prototype;
  dart.applyMixin(Object_XmlHasVisitor$36$, has_visitor.XmlHasVisitor);
  const Object_XmlHasWriter$36$ = class Object_XmlHasWriter extends Object_XmlHasVisitor$36$ {};
  (Object_XmlHasWriter$36$.new = function() {
  }).prototype = Object_XmlHasWriter$36$.prototype;
  dart.applyMixin(Object_XmlHasWriter$36$, has_writer.XmlHasWriter);
  const Object_XmlHasParent$36 = class Object_XmlHasParent extends Object_XmlHasWriter$36$ {};
  (Object_XmlHasParent$36.new = function() {
    has_parent$.XmlHasParent$(node.XmlNode)[dart.mixinNew].call(this);
  }).prototype = Object_XmlHasParent$36.prototype;
  dart.applyMixin(Object_XmlHasParent$36, has_parent$.XmlHasParent$(node.XmlNode));
  name$.XmlName = class XmlName extends Object_XmlHasParent$36 {
    static new(local, prefix = null) {
      return prefix == null || prefix[$isEmpty] ? new simple_name.XmlSimpleName.new(local) : new prefix_name.XmlPrefixName.new(prefix, local, dart.str(prefix) + ":" + local);
    }
    static ['_#new#tearOff'](local, prefix = null) {
      return name$.XmlName.new(local, prefix);
    }
    static fromString(qualified) {
      let index = qualified[$indexOf](":");
      if (index > 0) {
        let prefix = qualified[$substring](0, index);
        let local = qualified[$substring](index + 1);
        return new prefix_name.XmlPrefixName.new(prefix, local, qualified);
      } else {
        return new simple_name.XmlSimpleName.new(qualified);
      }
    }
    static ['_#fromString#tearOff'](qualified) {
      return name$.XmlName.fromString(qualified);
    }
    accept(visitor) {
      return visitor.visitName(this);
    }
    _equals(other) {
      if (other == null) return false;
      return name$.XmlName.is(other) && other.qualified === this.qualified;
    }
    get hashCode() {
      return this.qualified[$hashCode];
    }
  };
  (name$.XmlName.internal = function() {
    name$.XmlName.__proto__.new.call(this);
    ;
  }).prototype = name$.XmlName.prototype;
  dart.addTypeTests(name$.XmlName);
  dart.addTypeCaches(name$.XmlName);
  dart.setMethodSignature(name$.XmlName, () => ({
    __proto__: dart.getMethods(name$.XmlName.__proto__),
    accept: dart.fnType(dart.void, [visitor$.XmlVisitor])
  }));
  dart.setStaticMethodSignature(name$.XmlName, () => ['new', 'fromString']);
  dart.setLibraryUri(name$.XmlName, I[8]);
  dart.defineExtensionMethods(name$.XmlName, ['_equals']);
  dart.defineExtensionAccessors(name$.XmlName, ['hashCode']);
  simple_name.XmlSimpleName = class XmlSimpleName extends name$.XmlName {
    get local() {
      return this[local$];
    }
    set local(value) {
      super.local = value;
    }
    static ['_#new#tearOff'](local) {
      return new simple_name.XmlSimpleName.new(local);
    }
    get prefix() {
      return null;
    }
    get qualified() {
      return this.local;
    }
    get namespaceUri() {
      let t0;
      t0 = namespace$.lookupAttribute(this.parent, null, "xmlns");
      return t0 == null ? null : t0.value;
    }
    copy() {
      return new simple_name.XmlSimpleName.new(this.local);
    }
    [_throwNoParent$]() {
      return this[$noSuchMethod](new core._Invocation.method(C[0] || CT.C0, null, []));
    }
  };
  (simple_name.XmlSimpleName.new = function(local) {
    this[local$] = local;
    simple_name.XmlSimpleName.__proto__.internal.call(this);
    ;
  }).prototype = simple_name.XmlSimpleName.prototype;
  dart.addTypeTests(simple_name.XmlSimpleName);
  dart.addTypeCaches(simple_name.XmlSimpleName);
  dart.setMethodSignature(simple_name.XmlSimpleName, () => ({
    __proto__: dart.getMethods(simple_name.XmlSimpleName.__proto__),
    copy: dart.fnType(simple_name.XmlSimpleName, []),
    [_throwNoParent$]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(simple_name.XmlSimpleName, () => ({
    __proto__: dart.getGetters(simple_name.XmlSimpleName.__proto__),
    prefix: dart.nullable(core.String),
    qualified: core.String,
    namespaceUri: dart.nullable(core.String)
  }));
  dart.setLibraryUri(simple_name.XmlSimpleName, I[9]);
  dart.setFieldSignature(simple_name.XmlSimpleName, () => ({
    __proto__: dart.getFields(simple_name.XmlSimpleName.__proto__),
    local: dart.finalFieldType(core.String)
  }));
  var prefix$ = dart.privateName(prefix_name, "XmlPrefixName.prefix");
  var local$0 = dart.privateName(prefix_name, "XmlPrefixName.local");
  var qualified$ = dart.privateName(prefix_name, "XmlPrefixName.qualified");
  var _throwNoParent$0 = dart.privateName(prefix_name, "_throwNoParent");
  prefix_name.XmlPrefixName = class XmlPrefixName extends name$.XmlName {
    get prefix() {
      return this[prefix$];
    }
    set prefix(value) {
      super.prefix = value;
    }
    get local() {
      return this[local$0];
    }
    set local(value) {
      super.local = value;
    }
    get qualified() {
      return this[qualified$];
    }
    set qualified(value) {
      super.qualified = value;
    }
    static ['_#new#tearOff'](prefix, local, qualified) {
      return new prefix_name.XmlPrefixName.new(prefix, local, qualified);
    }
    get namespaceUri() {
      let t0;
      t0 = namespace$.lookupAttribute(this.parent, "xmlns", this.prefix);
      return t0 == null ? null : t0.value;
    }
    copy() {
      return new prefix_name.XmlPrefixName.new(this.prefix, this.local, this.qualified);
    }
    [_throwNoParent$]() {
      return this[$noSuchMethod](new core._Invocation.method(C[4] || CT.C4, null, []));
    }
  };
  (prefix_name.XmlPrefixName.new = function(prefix, local, qualified) {
    this[prefix$] = prefix;
    this[local$0] = local;
    this[qualified$] = qualified;
    prefix_name.XmlPrefixName.__proto__.internal.call(this);
    ;
  }).prototype = prefix_name.XmlPrefixName.prototype;
  dart.addTypeTests(prefix_name.XmlPrefixName);
  dart.addTypeCaches(prefix_name.XmlPrefixName);
  dart.setMethodSignature(prefix_name.XmlPrefixName, () => ({
    __proto__: dart.getMethods(prefix_name.XmlPrefixName.__proto__),
    copy: dart.fnType(prefix_name.XmlPrefixName, []),
    [_throwNoParent$]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(prefix_name.XmlPrefixName, () => ({
    __proto__: dart.getGetters(prefix_name.XmlPrefixName.__proto__),
    namespaceUri: dart.nullable(core.String)
  }));
  dart.setLibraryUri(prefix_name.XmlPrefixName, I[10]);
  dart.setFieldSignature(prefix_name.XmlPrefixName, () => ({
    __proto__: dart.getFields(prefix_name.XmlPrefixName.__proto__),
    prefix: dart.finalFieldType(core.String),
    local: dart.finalFieldType(core.String),
    qualified: dart.finalFieldType(core.String)
  }));
  var buffer$ = dart.privateName(writer$, "XmlWriter.buffer");
  var entityMapping$ = dart.privateName(writer$, "XmlWriter.entityMapping");
  visitor$.XmlVisitor = class XmlVisitor extends core.Object {};
  visitor$.XmlVisitor[dart.mixinOn] = Object => class XmlVisitor extends Object {
    visit(node) {
      return node.accept(this);
    }
    visitName(name) {
    }
    visitAttribute(node) {
    }
    visitDeclaration(node) {
    }
    visitDocument(node) {
    }
    visitDocumentFragment(node) {
    }
    visitElement(node) {
    }
    visitCDATA(node) {
    }
    visitComment(node) {
    }
    visitDoctype(node) {
    }
    visitProcessing(node) {
    }
    visitText(node) {
    }
  };
  (visitor$.XmlVisitor[dart.mixinNew] = function() {
  }).prototype = visitor$.XmlVisitor.prototype;
  dart.addTypeTests(visitor$.XmlVisitor);
  dart.addTypeCaches(visitor$.XmlVisitor);
  visitor$.XmlVisitor[dart.implements] = () => [core.Object];
  dart.setMethodSignature(visitor$.XmlVisitor, () => ({
    __proto__: dart.getMethods(visitor$.XmlVisitor.__proto__),
    visit: dart.fnType(dart.void, [has_visitor.XmlHasVisitor]),
    visitName: dart.fnType(dart.void, [name$.XmlName]),
    visitAttribute: dart.fnType(dart.void, [attribute$.XmlAttribute]),
    visitDeclaration: dart.fnType(dart.void, [declaration$.XmlDeclaration]),
    visitDocument: dart.fnType(dart.void, [document.XmlDocument]),
    visitDocumentFragment: dart.fnType(dart.void, [document_fragment.XmlDocumentFragment]),
    visitElement: dart.fnType(dart.void, [element$.XmlElement]),
    visitCDATA: dart.fnType(dart.void, [cdata$.XmlCDATA]),
    visitComment: dart.fnType(dart.void, [comment$.XmlComment]),
    visitDoctype: dart.fnType(dart.void, [doctype$.XmlDoctype]),
    visitProcessing: dart.fnType(dart.void, [processing.XmlProcessing]),
    visitText: dart.fnType(dart.void, [text$.XmlText])
  }));
  dart.setLibraryUri(visitor$.XmlVisitor, I[11]);
  const Object_XmlVisitor$36 = class Object_XmlVisitor extends core.Object {};
  (Object_XmlVisitor$36.new = function() {
  }).prototype = Object_XmlVisitor$36.prototype;
  dart.applyMixin(Object_XmlVisitor$36, visitor$.XmlVisitor);
  writer$.XmlWriter = class XmlWriter extends Object_XmlVisitor$36 {
    get buffer() {
      return this[buffer$];
    }
    set buffer(value) {
      super.buffer = value;
    }
    get entityMapping() {
      return this[entityMapping$];
    }
    set entityMapping(value) {
      super.entityMapping = value;
    }
    static ['_#new#tearOff'](buffer, opts) {
      let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
      return new writer$.XmlWriter.new(buffer, {entityMapping: entityMapping});
    }
    visitAttribute(node) {
      this.visit(node.name);
      this.buffer.write("=");
      this.buffer.write(this.entityMapping.encodeAttributeValueWithQuotes(node.value, node.attributeType));
    }
    visitCDATA(node) {
      this.buffer.write("<![CDATA[");
      this.buffer.write(node.text);
      this.buffer.write("]]>");
    }
    visitComment(node) {
      this.buffer.write("<!--");
      this.buffer.write(node.text);
      this.buffer.write("-->");
    }
    visitDeclaration(node) {
      this.buffer.write("<?xml");
      this.writeAttributes(node);
      this.buffer.write("?>");
    }
    visitDoctype(node) {
      this.buffer.write("<!DOCTYPE");
      this.buffer.write(" ");
      this.buffer.write(node.name);
      if (node.externalId != null) {
        this.buffer.write(" ");
        this.buffer.write(node.externalId);
      }
      if (node.internalSubset != null) {
        this.buffer.write(" ");
        this.buffer.write("[");
        this.buffer.write(node.internalSubset);
        this.buffer.write("]");
      }
      this.buffer.write(">");
    }
    visitDocument(node) {
      this.writeIterable(node.children);
    }
    visitDocumentFragment(node) {
      this.buffer.write("#document-fragment");
    }
    visitElement(node) {
      this.buffer.write("<");
      this.visit(node.name);
      this.writeAttributes(node);
      if (node.children.isEmpty && node.isSelfClosing) {
        this.buffer.write("/>");
      } else {
        this.buffer.write(">");
        this.writeIterable(node.children);
        this.buffer.write("</");
        this.visit(node.name);
        this.buffer.write(">");
      }
    }
    visitName(name) {
      this.buffer.write(name.qualified);
    }
    visitProcessing(node) {
      this.buffer.write("<?");
      this.buffer.write(node.target);
      if (node.text[$isNotEmpty]) {
        this.buffer.write(" ");
        this.buffer.write(node.text);
      }
      this.buffer.write("?>");
    }
    visitText(node) {
      this.buffer.write(this.entityMapping.encodeText(node.text));
    }
    writeAttributes(node) {
      if (node.attributes.isNotEmpty) {
        this.buffer.write(" ");
        this.writeIterable(node.attributes, " ");
      }
    }
    writeIterable(nodes, separator = null) {
      let iterator = nodes[$iterator];
      if (iterator.moveNext()) {
        if (separator == null || separator[$isEmpty]) {
          do {
            this.visit(iterator.current);
          } while (iterator.moveNext());
        } else {
          this.visit(iterator.current);
          while (iterator.moveNext()) {
            this.buffer.write(separator);
            this.visit(iterator.current);
          }
        }
      }
    }
  };
  (writer$.XmlWriter.new = function(buffer, opts) {
    let t0;
    let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
    this[buffer$] = buffer;
    this[entityMapping$] = (t0 = entityMapping, t0 == null ? default_mapping.defaultEntityMapping : t0);
    ;
  }).prototype = writer$.XmlWriter.prototype;
  dart.addTypeTests(writer$.XmlWriter);
  dart.addTypeCaches(writer$.XmlWriter);
  dart.setMethodSignature(writer$.XmlWriter, () => ({
    __proto__: dart.getMethods(writer$.XmlWriter.__proto__),
    writeAttributes: dart.fnType(dart.void, [has_attributes.XmlHasAttributes]),
    writeIterable: dart.fnType(dart.void, [core.Iterable$(has_visitor.XmlHasVisitor)], [dart.nullable(core.String)])
  }));
  dart.setLibraryUri(writer$.XmlWriter, I[12]);
  dart.setFieldSignature(writer$.XmlWriter, () => ({
    __proto__: dart.getFields(writer$.XmlWriter.__proto__),
    buffer: dart.finalFieldType(core.StringSink),
    entityMapping: dart.finalFieldType(entity_mapping.XmlEntityMapping)
  }));
  var level$ = dart.privateName(pretty_writer, "XmlPrettyWriter.level");
  var pretty = dart.privateName(pretty_writer, "XmlPrettyWriter.pretty");
  var indent$ = dart.privateName(pretty_writer, "XmlPrettyWriter.indent");
  var newLine$ = dart.privateName(pretty_writer, "XmlPrettyWriter.newLine");
  var preserveWhitespace$ = dart.privateName(pretty_writer, "XmlPrettyWriter.preserveWhitespace");
  var indentAttribute$ = dart.privateName(pretty_writer, "XmlPrettyWriter.indentAttribute");
  var sortAttributes$ = dart.privateName(pretty_writer, "XmlPrettyWriter.sortAttributes");
  var spaceBeforeSelfClose$ = dart.privateName(pretty_writer, "XmlPrettyWriter.spaceBeforeSelfClose");
  pretty_writer.XmlPrettyWriter = class XmlPrettyWriter extends writer$.XmlWriter {
    get level() {
      return this[level$];
    }
    set level(value) {
      this[level$] = value;
    }
    get pretty() {
      return this[pretty];
    }
    set pretty(value) {
      this[pretty] = value;
    }
    get indent() {
      return this[indent$];
    }
    set indent(value) {
      super.indent = value;
    }
    get newLine() {
      return this[newLine$];
    }
    set newLine(value) {
      super.newLine = value;
    }
    get preserveWhitespace() {
      return this[preserveWhitespace$];
    }
    set preserveWhitespace(value) {
      super.preserveWhitespace = value;
    }
    get indentAttribute() {
      return this[indentAttribute$];
    }
    set indentAttribute(value) {
      super.indentAttribute = value;
    }
    get sortAttributes() {
      return this[sortAttributes$];
    }
    set sortAttributes(value) {
      super.sortAttributes = value;
    }
    get spaceBeforeSelfClose() {
      return this[spaceBeforeSelfClose$];
    }
    set spaceBeforeSelfClose(value) {
      super.spaceBeforeSelfClose = value;
    }
    static ['_#new#tearOff'](buffer, opts) {
      let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
      let level = opts && 'level' in opts ? opts.level : null;
      let indent = opts && 'indent' in opts ? opts.indent : null;
      let newLine = opts && 'newLine' in opts ? opts.newLine : null;
      let preserveWhitespace = opts && 'preserveWhitespace' in opts ? opts.preserveWhitespace : null;
      let indentAttribute = opts && 'indentAttribute' in opts ? opts.indentAttribute : null;
      let sortAttributes = opts && 'sortAttributes' in opts ? opts.sortAttributes : null;
      let spaceBeforeSelfClose = opts && 'spaceBeforeSelfClose' in opts ? opts.spaceBeforeSelfClose : null;
      return new pretty_writer.XmlPrettyWriter.new(buffer, {entityMapping: entityMapping, level: level, indent: indent, newLine: newLine, preserveWhitespace: preserveWhitespace, indentAttribute: indentAttribute, sortAttributes: sortAttributes, spaceBeforeSelfClose: spaceBeforeSelfClose});
    }
    visitDocument(node) {
      this.buffer.write(this.indent[$times](this.level));
      this.writeIterable(this.normalizeText(node.children), this.newLine + this.indent[$times](this.level));
    }
    visitElement(node) {
      this.buffer.write("<");
      this.visit(node.name);
      this.writeAttributes(node);
      if (node.children.isEmpty && node.isSelfClosing) {
        if (this.spaceBeforeSelfClose != null && dart.nullCheck(this.spaceBeforeSelfClose)(node)) {
          this.buffer.write(" ");
        }
        this.buffer.write("/>");
      } else {
        this.buffer.write(">");
        if (node.children.isNotEmpty) {
          if (this.pretty) {
            if (this.preserveWhitespace != null && dart.nullCheck(this.preserveWhitespace)(node)) {
              this.pretty = false;
              this.writeIterable(node.children);
              this.pretty = true;
            } else if (node.children.every(dart.fn(each => text$.XmlText.is(each), T$.XmlNodeTobool()))) {
              this.writeIterable(this.normalizeText(node.children));
            } else {
              this.level = this.level + 1;
              this.buffer.write(this.newLine);
              this.buffer.write(this.indent[$times](this.level));
              this.writeIterable(this.normalizeText(node.children), this.newLine + this.indent[$times](this.level));
              this.level = this.level - 1;
              this.buffer.write(this.newLine);
              this.buffer.write(this.indent[$times](this.level));
            }
          } else {
            this.writeIterable(node.children);
          }
        }
        this.buffer.write("</");
        this.visit(node.name);
        this.buffer.write(">");
      }
    }
    writeAttributes(node) {
      for (let attribute of this.normalizeAttributes(node.attributes)) {
        if (this.pretty && this.indentAttribute != null && dart.nullCheck(this.indentAttribute)(attribute)) {
          this.buffer.write(this.newLine);
          this.buffer.write(this.indent[$times](this.level + 1));
        } else {
          this.buffer.write(" ");
        }
        this.visit(attribute);
      }
    }
    normalizeAttributes(attributes) {
      let result = attributes[$toList]();
      if (this.sortAttributes != null) {
        result[$sort](this.sortAttributes);
      }
      return result;
    }
    normalizeText(nodes) {
      let result = T$.JSArrayOfXmlNode().of([]);
      for (let node of nodes) {
        if (text$.XmlText.is(node)) {
          let text = node.text[$trim]()[$replaceAll](pretty_writer._whitespaceOrLineTerminators, " ");
          if (text[$isNotEmpty]) {
            if (result[$isNotEmpty] && text$.XmlText.is(result[$last])) {
              result[$last] = new text$.XmlText.new(result[$last].text + " " + text);
            } else if (node.text !== text) {
              result[$add](new text$.XmlText.new(text));
            } else {
              result[$add](node);
            }
          }
        } else {
          result[$add](node);
        }
      }
      return result;
    }
  };
  (pretty_writer.XmlPrettyWriter.new = function(buffer, opts) {
    let t0, t0$, t0$0;
    let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
    let level = opts && 'level' in opts ? opts.level : null;
    let indent = opts && 'indent' in opts ? opts.indent : null;
    let newLine = opts && 'newLine' in opts ? opts.newLine : null;
    let preserveWhitespace = opts && 'preserveWhitespace' in opts ? opts.preserveWhitespace : null;
    let indentAttribute = opts && 'indentAttribute' in opts ? opts.indentAttribute : null;
    let sortAttributes = opts && 'sortAttributes' in opts ? opts.sortAttributes : null;
    let spaceBeforeSelfClose = opts && 'spaceBeforeSelfClose' in opts ? opts.spaceBeforeSelfClose : null;
    this[pretty] = true;
    this[preserveWhitespace$] = preserveWhitespace;
    this[indentAttribute$] = indentAttribute;
    this[sortAttributes$] = sortAttributes;
    this[spaceBeforeSelfClose$] = spaceBeforeSelfClose;
    this[level$] = (t0 = level, t0 == null ? 0 : t0);
    this[indent$] = (t0$ = indent, t0$ == null ? "  " : t0$);
    this[newLine$] = (t0$0 = newLine, t0$0 == null ? "\n" : t0$0);
    pretty_writer.XmlPrettyWriter.__proto__.new.call(this, buffer, {entityMapping: entityMapping});
    ;
  }).prototype = pretty_writer.XmlPrettyWriter.prototype;
  dart.addTypeTests(pretty_writer.XmlPrettyWriter);
  dart.addTypeCaches(pretty_writer.XmlPrettyWriter);
  dart.setMethodSignature(pretty_writer.XmlPrettyWriter, () => ({
    __proto__: dart.getMethods(pretty_writer.XmlPrettyWriter.__proto__),
    normalizeAttributes: dart.fnType(core.List$(attribute$.XmlAttribute), [core.List$(attribute$.XmlAttribute)]),
    normalizeText: dart.fnType(core.List$(node.XmlNode), [core.List$(node.XmlNode)])
  }));
  dart.setLibraryUri(pretty_writer.XmlPrettyWriter, I[13]);
  dart.setFieldSignature(pretty_writer.XmlPrettyWriter, () => ({
    __proto__: dart.getFields(pretty_writer.XmlPrettyWriter.__proto__),
    level: dart.fieldType(core.int),
    pretty: dart.fieldType(core.bool),
    indent: dart.finalFieldType(core.String),
    newLine: dart.finalFieldType(core.String),
    preserveWhitespace: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [node.XmlNode]))),
    indentAttribute: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [attribute$.XmlAttribute]))),
    sortAttributes: dart.finalFieldType(dart.nullable(dart.fnType(core.int, [attribute$.XmlAttribute, attribute$.XmlAttribute]))),
    spaceBeforeSelfClose: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [node.XmlNode])))
  }));
  dart.defineLazy(pretty_writer, {
    /*pretty_writer._whitespaceOrLineTerminators*/get _whitespaceOrLineTerminators() {
      return core.RegExp.new("\\s+");
    }
  }, false);
  var _start$ = dart.privateName(descendants, "_start");
  descendants.XmlDescendantsIterable = class XmlDescendantsIterable extends collection.IterableBase$(node.XmlNode) {
    static ['_#new#tearOff'](_start) {
      return new descendants.XmlDescendantsIterable.new(_start);
    }
    get iterator() {
      return new descendants.XmlDescendantsIterator.new(this[_start$]);
    }
  };
  (descendants.XmlDescendantsIterable.new = function(_start) {
    this[_start$] = _start;
    descendants.XmlDescendantsIterable.__proto__.new.call(this);
    ;
  }).prototype = descendants.XmlDescendantsIterable.prototype;
  dart.addTypeTests(descendants.XmlDescendantsIterable);
  dart.addTypeCaches(descendants.XmlDescendantsIterable);
  dart.setGetterSignature(descendants.XmlDescendantsIterable, () => ({
    __proto__: dart.getGetters(descendants.XmlDescendantsIterable.__proto__),
    iterator: core.Iterator$(node.XmlNode),
    [$iterator]: core.Iterator$(node.XmlNode)
  }));
  dart.setLibraryUri(descendants.XmlDescendantsIterable, I[14]);
  dart.setFieldSignature(descendants.XmlDescendantsIterable, () => ({
    __proto__: dart.getFields(descendants.XmlDescendantsIterable.__proto__),
    [_start$]: dart.finalFieldType(node.XmlNode)
  }));
  dart.defineExtensionAccessors(descendants.XmlDescendantsIterable, ['iterator']);
  var _todo = dart.privateName(descendants, "_todo");
  var __XmlDescendantsIterator__current = dart.privateName(descendants, "_#XmlDescendantsIterator#_current");
  var _current = dart.privateName(descendants, "_current");
  descendants.XmlDescendantsIterator = class XmlDescendantsIterator extends core.Iterator$(node.XmlNode) {
    static ['_#new#tearOff'](start) {
      return new descendants.XmlDescendantsIterator.new(start);
    }
    get [_current]() {
      let t0;
      t0 = this[__XmlDescendantsIterator__current];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_current")) : t0;
    }
    set [_current](library$32package$58xml$47src$47xml$47navigation$47descendants$46dart$58$58_current$35param) {
      this[__XmlDescendantsIterator__current] = library$32package$58xml$47src$47xml$47navigation$47descendants$46dart$58$58_current$35param;
    }
    push(node) {
      this[_todo][$addAll](node.children[$reversed]);
      this[_todo][$addAll](node.attributes[$reversed]);
    }
    get current() {
      return this[_current];
    }
    moveNext() {
      if (this[_todo][$isEmpty]) {
        return false;
      } else {
        this[_current] = this[_todo][$removeLast]();
        this.push(this[_current]);
        return true;
      }
    }
  };
  (descendants.XmlDescendantsIterator.new = function(start) {
    this[_todo] = T$.JSArrayOfXmlNode().of([]);
    this[__XmlDescendantsIterator__current] = null;
    this.push(start);
  }).prototype = descendants.XmlDescendantsIterator.prototype;
  dart.addTypeTests(descendants.XmlDescendantsIterator);
  dart.addTypeCaches(descendants.XmlDescendantsIterator);
  dart.setMethodSignature(descendants.XmlDescendantsIterator, () => ({
    __proto__: dart.getMethods(descendants.XmlDescendantsIterator.__proto__),
    push: dart.fnType(dart.void, [node.XmlNode]),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(descendants.XmlDescendantsIterator, () => ({
    __proto__: dart.getGetters(descendants.XmlDescendantsIterator.__proto__),
    [_current]: node.XmlNode,
    current: node.XmlNode
  }));
  dart.setSetterSignature(descendants.XmlDescendantsIterator, () => ({
    __proto__: dart.getSetters(descendants.XmlDescendantsIterator.__proto__),
    [_current]: node.XmlNode
  }));
  dart.setLibraryUri(descendants.XmlDescendantsIterator, I[14]);
  dart.setFieldSignature(descendants.XmlDescendantsIterator, () => ({
    __proto__: dart.getFields(descendants.XmlDescendantsIterator.__proto__),
    [_todo]: dart.finalFieldType(core.List$(node.XmlNode)),
    [__XmlDescendantsIterator__current]: dart.fieldType(dart.nullable(node.XmlNode))
  }));
  descendants['XmlDescendantsExtension|get#descendants'] = function XmlDescendantsExtension$124get$35descendants($this) {
    return new descendants.XmlDescendantsIterable.new($this);
  };
  descendants['XmlDescendantsExtension|get#descendantElements'] = function XmlDescendantsExtension$124get$35descendantElements($this) {
    return descendants['XmlDescendantsExtension|get#descendants']($this)[$whereType](element$.XmlElement);
  };
  var children = dart.privateName(has_children, "XmlHasChildren.children");
  const _is_XmlHasChildren_default = Symbol('_is_XmlHasChildren_default');
  has_children.XmlHasChildren$ = dart.generic(T => {
    var __t$XmlNodeListOfT = () => (__t$XmlNodeListOfT = dart.constFn(node_list.XmlNodeList$(T)))();
    class XmlHasChildren extends core.Object {}
    XmlHasChildren[dart.mixinOn] = Object => class XmlHasChildren extends Object {
      get children() {
        return this[children];
      }
      set children(value) {
        super.children = value;
      }
      get childElements() {
        return this.children.whereType(element$.XmlElement);
      }
      getElement(name, opts) {
        let namespace = opts && 'namespace' in opts ? opts.namespace : null;
        let tester = name_matcher.createNameMatcher(name, namespace);
        for (let node of this.children) {
          if (element$.XmlElement.is(node) && tester(node)) {
            return node;
          }
        }
        return null;
      }
      get firstChild() {
        return this.children.isEmpty ? null : this.children.first;
      }
      get firstElementChild() {
        for (let node of this.children) {
          if (element$.XmlElement.is(node)) {
            return node;
          }
        }
        return null;
      }
      get lastChild() {
        return this.children.isEmpty ? null : this.children.last;
      }
      get lastElementChild() {
        for (let node of this.children.reversed) {
          if (element$.XmlElement.is(node)) {
            return node;
          }
        }
        return null;
      }
    };
    (XmlHasChildren[dart.mixinNew] = function() {
      this[children] = new (__t$XmlNodeListOfT()).new();
    }).prototype = XmlHasChildren.prototype;
    dart.addTypeTests(XmlHasChildren);
    XmlHasChildren.prototype[_is_XmlHasChildren_default] = true;
    dart.addTypeCaches(XmlHasChildren);
    XmlHasChildren[dart.implements] = () => [has_children.XmlChildrenBase, core.Object];
    dart.setMethodSignature(XmlHasChildren, () => ({
      __proto__: dart.getMethods(XmlHasChildren.__proto__),
      getElement: dart.fnType(dart.nullable(element$.XmlElement), [core.String], {namespace: dart.nullable(core.String)}, {})
    }));
    dart.setGetterSignature(XmlHasChildren, () => ({
      __proto__: dart.getGetters(XmlHasChildren.__proto__),
      childElements: core.Iterable$(element$.XmlElement),
      firstChild: dart.nullable(T),
      firstElementChild: dart.nullable(element$.XmlElement),
      lastChild: dart.nullable(T),
      lastElementChild: dart.nullable(element$.XmlElement)
    }));
    dart.setLibraryUri(XmlHasChildren, I[4]);
    dart.setFieldSignature(XmlHasChildren, () => ({
      __proto__: dart.getFields(XmlHasChildren.__proto__),
      children: dart.finalFieldType(node_list.XmlNodeList$(T))
    }));
    return XmlHasChildren;
  });
  has_children.XmlHasChildren = has_children.XmlHasChildren$();
  dart.addTypeTests(has_children.XmlHasChildren, _is_XmlHasChildren_default);
  const XmlNode_XmlHasChildren$36 = class XmlNode_XmlHasChildren extends node.XmlNode {};
  (XmlNode_XmlHasChildren$36.new = function() {
    has_children.XmlHasChildren$(node.XmlNode)[dart.mixinNew].call(this);
  }).prototype = XmlNode_XmlHasChildren$36.prototype;
  dart.applyMixin(XmlNode_XmlHasChildren$36, has_children.XmlHasChildren$(node.XmlNode));
  document_fragment.XmlDocumentFragment = class XmlDocumentFragment extends XmlNode_XmlHasChildren$36 {
    static parse(input, opts) {
      let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
      let events = xml_events.parseEvents(input, {entityMapping: entityMapping, validateNesting: true});
      return new document_fragment.XmlDocumentFragment.new(new node_decoder.XmlNodeDecoder.new().convertIterable(events));
    }
    static ['_#parse#tearOff'](input, opts) {
      let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
      return document_fragment.XmlDocumentFragment.parse(input, {entityMapping: entityMapping});
    }
    static ['_#new#tearOff'](childrenIterable = C[2] || CT.C2) {
      return new document_fragment.XmlDocumentFragment.new(childrenIterable);
    }
    get nodeType() {
      return node_type.XmlNodeType.DOCUMENT_FRAGMENT;
    }
    copy() {
      return new document_fragment.XmlDocumentFragment.new(this.children.map(node.XmlNode, dart.fn(each => each.copy(), T$.XmlNodeToXmlNode())));
    }
    accept(visitor) {
      return visitor.visitDocumentFragment(this);
    }
  };
  (document_fragment.XmlDocumentFragment.new = function(childrenIterable = C[2] || CT.C2) {
    document_fragment.XmlDocumentFragment.__proto__.new.call(this);
    this.children.initialize(this, document_fragment.childrenNodeTypes);
    this.children.addAll(childrenIterable);
  }).prototype = document_fragment.XmlDocumentFragment.prototype;
  dart.addTypeTests(document_fragment.XmlDocumentFragment);
  dart.addTypeCaches(document_fragment.XmlDocumentFragment);
  dart.setMethodSignature(document_fragment.XmlDocumentFragment, () => ({
    __proto__: dart.getMethods(document_fragment.XmlDocumentFragment.__proto__),
    copy: dart.fnType(document_fragment.XmlDocumentFragment, []),
    accept: dart.fnType(dart.void, [visitor$.XmlVisitor])
  }));
  dart.setStaticMethodSignature(document_fragment.XmlDocumentFragment, () => ['parse']);
  dart.setGetterSignature(document_fragment.XmlDocumentFragment, () => ({
    __proto__: dart.getGetters(document_fragment.XmlDocumentFragment.__proto__),
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(document_fragment.XmlDocumentFragment, I[15]);
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  dart.defineLazy(document_fragment, {
    /*document_fragment.childrenNodeTypes*/get childrenNodeTypes() {
      return C[5] || CT.C5;
    }
  }, false);
  var _parent$ = dart.privateName(has_parent, "_parent");
  has_parent.XmlHasParent = class XmlHasParent extends core.Object {};
  has_parent.XmlHasParent[dart.mixinOn] = Object => class XmlHasParent extends Object {
    get parent() {
      return this[_parent$];
    }
    get parentEvent() {
      return this[_parent$];
    }
    attachParent(parent) {
      if (!(this[_parent$] == null)) dart.assertFailed("Parent is already initialized.", I[16], 20, 12, "_parent == null");
      this[_parent$] = parent;
    }
  };
  (has_parent.XmlHasParent[dart.mixinNew] = function() {
    this[_parent$] = null;
  }).prototype = has_parent.XmlHasParent.prototype;
  dart.addTypeTests(has_parent.XmlHasParent);
  dart.addTypeCaches(has_parent.XmlHasParent);
  has_parent.XmlHasParent[dart.implements] = () => [core.Object];
  dart.setMethodSignature(has_parent.XmlHasParent, () => ({
    __proto__: dart.getMethods(has_parent.XmlHasParent.__proto__),
    attachParent: dart.fnType(dart.void, [dart.nullable(start_element.XmlStartElementEvent)])
  }));
  dart.setGetterSignature(has_parent.XmlHasParent, () => ({
    __proto__: dart.getGetters(has_parent.XmlHasParent.__proto__),
    parent: dart.nullable(start_element.XmlStartElementEvent),
    parentEvent: dart.nullable(start_element.XmlStartElementEvent)
  }));
  dart.setLibraryUri(has_parent.XmlHasParent, I[17]);
  dart.setFieldSignature(has_parent.XmlHasParent, () => ({
    __proto__: dart.getFields(has_parent.XmlHasParent.__proto__),
    [_parent$]: dart.fieldType(dart.nullable(start_element.XmlStartElementEvent))
  }));
  const Object_XmlHasParent$36$ = class Object_XmlHasParent extends core.Object {};
  (Object_XmlHasParent$36$.new = function() {
    has_parent.XmlHasParent[dart.mixinNew].call(this);
  }).prototype = Object_XmlHasParent$36$.prototype;
  dart.applyMixin(Object_XmlHasParent$36$, has_parent.XmlHasParent);
  const Object_XmlHasLocation$36 = class Object_XmlHasLocation extends Object_XmlHasParent$36$ {};
  (Object_XmlHasLocation$36.new = function() {
    has_location.XmlHasLocation[dart.mixinNew].call(this);
    Object_XmlHasLocation$36.__proto__.new.call(this);
  }).prototype = Object_XmlHasLocation$36.prototype;
  dart.applyMixin(Object_XmlHasLocation$36, has_location.XmlHasLocation);
  const Object_XmlHasBuffer$36 = class Object_XmlHasBuffer extends Object_XmlHasLocation$36 {};
  (Object_XmlHasBuffer$36.new = function() {
    has_buffer.XmlHasBuffer[dart.mixinNew].call(this);
    Object_XmlHasBuffer$36.__proto__.new.call(this);
  }).prototype = Object_XmlHasBuffer$36.prototype;
  dart.applyMixin(Object_XmlHasBuffer$36, has_buffer.XmlHasBuffer);
  event.XmlEvent = class XmlEvent extends Object_XmlHasBuffer$36 {
    toString() {
      return new event_encoder.XmlEventEncoder.new().convert(T$.JSArrayOfXmlEvent().of([this]));
    }
  };
  (event.XmlEvent.new = function() {
    event.XmlEvent.__proto__.new.call(this);
    ;
  }).prototype = event.XmlEvent.prototype;
  dart.addTypeTests(event.XmlEvent);
  dart.addTypeCaches(event.XmlEvent);
  dart.setLibraryUri(event.XmlEvent, I[18]);
  dart.defineExtensionMethods(event.XmlEvent, ['toString']);
  with_parent.XmlWithParentEvents = class XmlWithParentEvents extends list_converter.XmlListConverter$(event.XmlEvent, event.XmlEvent) {
    static ['_#new#tearOff']() {
      return new with_parent.XmlWithParentEvents.new();
    }
    startChunkedConversion(sink) {
      T$.SinkOfListOfXmlEvent().as(sink);
      return new with_parent._XmlWithParentEventsSink.new(sink);
    }
  };
  (with_parent.XmlWithParentEvents.new = function() {
    with_parent.XmlWithParentEvents.__proto__.new.call(this);
    ;
  }).prototype = with_parent.XmlWithParentEvents.prototype;
  dart.addTypeTests(with_parent.XmlWithParentEvents);
  dart.addTypeCaches(with_parent.XmlWithParentEvents);
  dart.setMethodSignature(with_parent.XmlWithParentEvents, () => ({
    __proto__: dart.getMethods(with_parent.XmlWithParentEvents.__proto__),
    startChunkedConversion: dart.fnType(convert.ChunkedConversionSink$(core.List$(event.XmlEvent)), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(with_parent.XmlWithParentEvents, I[19]);
  visitor.XmlEventVisitor = class XmlEventVisitor extends core.Object {};
  visitor.XmlEventVisitor[dart.mixinOn] = Object => class XmlEventVisitor extends Object {
    visit(event) {
      return event.accept(this);
    }
  };
  (visitor.XmlEventVisitor[dart.mixinNew] = function() {
  }).prototype = visitor.XmlEventVisitor.prototype;
  dart.addTypeTests(visitor.XmlEventVisitor);
  dart.addTypeCaches(visitor.XmlEventVisitor);
  visitor.XmlEventVisitor[dart.implements] = () => [core.Object];
  dart.setMethodSignature(visitor.XmlEventVisitor, () => ({
    __proto__: dart.getMethods(visitor.XmlEventVisitor.__proto__),
    visit: dart.fnType(dart.void, [event.XmlEvent])
  }));
  dart.setLibraryUri(visitor.XmlEventVisitor, I[20]);
  const ChunkedConversionSink_XmlEventVisitor$36 = class ChunkedConversionSink_XmlEventVisitor extends convert.ChunkedConversionSink$(core.List$(event.XmlEvent)) {};
  (ChunkedConversionSink_XmlEventVisitor$36.new = function() {
    ChunkedConversionSink_XmlEventVisitor$36.__proto__.new.call(this);
  }).prototype = ChunkedConversionSink_XmlEventVisitor$36.prototype;
  dart.applyMixin(ChunkedConversionSink_XmlEventVisitor$36, visitor.XmlEventVisitor);
  with_parent._XmlWithParentEventsSink = class _XmlWithParentEventsSink extends ChunkedConversionSink_XmlEventVisitor$36 {
    static ['_#new#tearOff'](sink) {
      return new with_parent._XmlWithParentEventsSink.new(sink);
    }
    add(events) {
      T$.ListOfXmlEvent().as(events);
      events[$forEach](dart.bind(this, 'visit'));
      this.sink.add(events);
    }
    close() {
      if (this.currentParent != null) {
        dart.throw(tag_exception.XmlTagException.missingClosingTag(dart.nullCheck(this.currentParent).name));
      }
      this.sink.close();
    }
    visitCDATAEvent(event) {
      return event.attachParent(this.currentParent);
    }
    visitCommentEvent(event) {
      return event.attachParent(this.currentParent);
    }
    visitDeclarationEvent(event) {
      return event.attachParent(this.currentParent);
    }
    visitDoctypeEvent(event) {
      return event.attachParent(this.currentParent);
    }
    visitEndElementEvent(event) {
      if (this.currentParent == null) {
        dart.throw(tag_exception.XmlTagException.unexpectedClosingTag(event.name));
      } else if (dart.nullCheck(this.currentParent).name !== event.name) {
        dart.throw(tag_exception.XmlTagException.mismatchClosingTag(dart.nullCheck(this.currentParent).name, event.name));
      }
      event.attachParent(this.currentParent);
      this.currentParent = dart.nullCheck(this.currentParent).parent;
    }
    visitProcessingEvent(event) {
      return event.attachParent(this.currentParent);
    }
    visitStartElementEvent(event) {
      event.attachParent(this.currentParent);
      for (let attribute of event.attributes) {
        attribute.attachParent(event);
      }
      if (!event.isSelfClosing) {
        this.currentParent = event;
      }
    }
    visitTextEvent(event) {
      return event.attachParent(this.currentParent);
    }
  };
  (with_parent._XmlWithParentEventsSink.new = function(sink) {
    this.currentParent = null;
    this.sink = sink;
    with_parent._XmlWithParentEventsSink.__proto__.new.call(this);
    ;
  }).prototype = with_parent._XmlWithParentEventsSink.prototype;
  dart.addTypeTests(with_parent._XmlWithParentEventsSink);
  dart.addTypeCaches(with_parent._XmlWithParentEventsSink);
  dart.setMethodSignature(with_parent._XmlWithParentEventsSink, () => ({
    __proto__: dart.getMethods(with_parent._XmlWithParentEventsSink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, []),
    visitCDATAEvent: dart.fnType(dart.void, [cdata.XmlCDATAEvent]),
    visitCommentEvent: dart.fnType(dart.void, [comment.XmlCommentEvent]),
    visitDeclarationEvent: dart.fnType(dart.void, [declaration.XmlDeclarationEvent]),
    visitDoctypeEvent: dart.fnType(dart.void, [doctype.XmlDoctypeEvent]),
    visitEndElementEvent: dart.fnType(dart.void, [end_element.XmlEndElementEvent]),
    visitProcessingEvent: dart.fnType(dart.void, [processing$.XmlProcessingEvent]),
    visitStartElementEvent: dart.fnType(dart.void, [start_element.XmlStartElementEvent]),
    visitTextEvent: dart.fnType(dart.void, [text$0.XmlTextEvent])
  }));
  dart.setLibraryUri(with_parent._XmlWithParentEventsSink, I[19]);
  dart.setFieldSignature(with_parent._XmlWithParentEventsSink, () => ({
    __proto__: dart.getFields(with_parent._XmlWithParentEventsSink.__proto__),
    sink: dart.finalFieldType(core.Sink$(core.List$(event.XmlEvent))),
    currentParent: dart.fieldType(dart.nullable(start_element.XmlStartElementEvent))
  }));
  with_parent['XmlWithParentEventsExtension|withParentEvents'] = function XmlWithParentEventsExtension$124withParentEvents($this) {
    return $this.transform(T$.ListOfXmlEvent(), C[13] || CT.C13);
  };
  with_parent['XmlWithParentEventsExtension|get#withParentEvents'] = function XmlWithParentEventsExtension$124get$35withParentEvents($this) {
    return dart.fn(() => with_parent['XmlWithParentEventsExtension|withParentEvents']($this), T$.VoidToStreamOfListOfXmlEvent());
  };
  var predicate$ = dart.privateName(subtree_selector, "XmlSubtreeSelector.predicate");
  subtree_selector.XmlSubtreeSelector = class XmlSubtreeSelector extends list_converter.XmlListConverter$(event.XmlEvent, event.XmlEvent) {
    get predicate() {
      return this[predicate$];
    }
    set predicate(value) {
      super.predicate = value;
    }
    static ['_#new#tearOff'](predicate) {
      return new subtree_selector.XmlSubtreeSelector.new(predicate);
    }
    startChunkedConversion(sink) {
      T$.SinkOfListOfXmlEvent().as(sink);
      return new subtree_selector._XmlSubtreeSelectorSink.new(sink, this.predicate);
    }
  };
  (subtree_selector.XmlSubtreeSelector.new = function(predicate) {
    this[predicate$] = predicate;
    subtree_selector.XmlSubtreeSelector.__proto__.new.call(this);
    ;
  }).prototype = subtree_selector.XmlSubtreeSelector.prototype;
  dart.addTypeTests(subtree_selector.XmlSubtreeSelector);
  dart.addTypeCaches(subtree_selector.XmlSubtreeSelector);
  dart.setMethodSignature(subtree_selector.XmlSubtreeSelector, () => ({
    __proto__: dart.getMethods(subtree_selector.XmlSubtreeSelector.__proto__),
    startChunkedConversion: dart.fnType(convert.ChunkedConversionSink$(core.List$(event.XmlEvent)), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(subtree_selector.XmlSubtreeSelector, I[21]);
  dart.setFieldSignature(subtree_selector.XmlSubtreeSelector, () => ({
    __proto__: dart.getFields(subtree_selector.XmlSubtreeSelector.__proto__),
    predicate: dart.finalFieldType(dart.fnType(core.bool, [start_element.XmlStartElementEvent]))
  }));
  subtree_selector._XmlSubtreeSelectorSink = class _XmlSubtreeSelectorSink extends convert.ChunkedConversionSink$(core.List$(event.XmlEvent)) {
    static ['_#new#tearOff'](sink, predicate) {
      return new subtree_selector._XmlSubtreeSelectorSink.new(sink, predicate);
    }
    add(chunk) {
      let t4;
      T$.ListOfXmlEvent().as(chunk);
      let result = T$.JSArrayOfXmlEvent().of([]);
      for (let event of chunk) {
        if (this.stack[$isEmpty]) {
          if (start_element.XmlStartElementEvent.is(event) && (t4 = event, this.predicate(t4))) {
            if (!event.isSelfClosing) {
              this.stack[$add](event);
            }
            result[$add](event);
          }
        } else {
          if (start_element.XmlStartElementEvent.is(event) && !event.isSelfClosing) {
            this.stack[$add](event);
          } else if (end_element.XmlEndElementEvent.is(event)) {
            tag_exception.XmlTagException.checkClosingTag(this.stack[$last].name, event.name);
            this.stack[$removeLast]();
          }
          result[$add](event);
        }
      }
      if (result[$isNotEmpty]) {
        this.sink.add(result);
      }
    }
    close() {
      this.sink.close();
    }
  };
  (subtree_selector._XmlSubtreeSelectorSink.new = function(sink, predicate) {
    this.stack = T$.JSArrayOfXmlStartElementEvent().of([]);
    this.sink = sink;
    this.predicate = predicate;
    subtree_selector._XmlSubtreeSelectorSink.__proto__.new.call(this);
    ;
  }).prototype = subtree_selector._XmlSubtreeSelectorSink.prototype;
  dart.addTypeTests(subtree_selector._XmlSubtreeSelectorSink);
  dart.addTypeCaches(subtree_selector._XmlSubtreeSelectorSink);
  dart.setMethodSignature(subtree_selector._XmlSubtreeSelectorSink, () => ({
    __proto__: dart.getMethods(subtree_selector._XmlSubtreeSelectorSink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(subtree_selector._XmlSubtreeSelectorSink, I[21]);
  dart.setFieldSignature(subtree_selector._XmlSubtreeSelectorSink, () => ({
    __proto__: dart.getFields(subtree_selector._XmlSubtreeSelectorSink.__proto__),
    sink: dart.finalFieldType(core.Sink$(core.List$(event.XmlEvent))),
    predicate: dart.finalFieldType(dart.fnType(core.bool, [start_element.XmlStartElementEvent])),
    stack: dart.finalFieldType(core.List$(start_element.XmlStartElementEvent))
  }));
  subtree_selector['XmlSubtreeSelectorExtension|selectSubtreeEvents'] = function XmlSubtreeSelectorExtension$124selectSubtreeEvents($this, predicate) {
    return $this.transform(T$.ListOfXmlEvent(), new subtree_selector.XmlSubtreeSelector.new(predicate));
  };
  subtree_selector['XmlSubtreeSelectorExtension|get#selectSubtreeEvents'] = function XmlSubtreeSelectorExtension$124get$35selectSubtreeEvents($this) {
    return dart.fn(predicate => subtree_selector['XmlSubtreeSelectorExtension|selectSubtreeEvents']($this, predicate), T$.FnToStreamOfListOfXmlEvent());
  };
  normalizer.XmlNormalizeEvents = class XmlNormalizeEvents extends list_converter.XmlListConverter$(event.XmlEvent, event.XmlEvent) {
    static ['_#new#tearOff']() {
      return new normalizer.XmlNormalizeEvents.new();
    }
    startChunkedConversion(sink) {
      T$.SinkOfListOfXmlEvent().as(sink);
      return new normalizer._XmlNormalizeEventsSink.new(sink);
    }
  };
  (normalizer.XmlNormalizeEvents.new = function() {
    normalizer.XmlNormalizeEvents.__proto__.new.call(this);
    ;
  }).prototype = normalizer.XmlNormalizeEvents.prototype;
  dart.addTypeTests(normalizer.XmlNormalizeEvents);
  dart.addTypeCaches(normalizer.XmlNormalizeEvents);
  dart.setMethodSignature(normalizer.XmlNormalizeEvents, () => ({
    __proto__: dart.getMethods(normalizer.XmlNormalizeEvents.__proto__),
    startChunkedConversion: dart.fnType(convert.ChunkedConversionSink$(core.List$(event.XmlEvent)), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(normalizer.XmlNormalizeEvents, I[22]);
  normalizer._XmlNormalizeEventsSink = class _XmlNormalizeEventsSink extends convert.ChunkedConversionSink$(core.List$(event.XmlEvent)) {
    static ['_#new#tearOff'](sink) {
      return new normalizer._XmlNormalizeEventsSink.new(sink);
    }
    add(chunk) {
      T$.ListOfXmlEvent().as(chunk);
      this.buffer[$addAll](chunk[$where](dart.fn(event => !(text$0.XmlTextEvent.is(event) && event.text[$isEmpty]), T$.XmlEventTobool())));
      for (let i = 0; i < this.buffer[$length] - 1;) {
        let event1 = this.buffer[$_get](i);
        let event2 = this.buffer[$_get](i + 1);
        if (text$0.XmlTextEvent.is(event1) && text$0.XmlTextEvent.is(event2)) {
          let event = text$0.XmlRawTextEvent.is(event1) && text$0.XmlRawTextEvent.is(event2) ? new text$0.XmlRawTextEvent.new(event1.raw + event2.raw, event1.entityMapping) : new text$0.XmlTextEvent.new(event1.text + event2.text);
          event.attachBuffer(event1.buffer);
          event.attachLocation(event1.start, event2.stop);
          event.attachParent(event1.parent);
          this.buffer[$_set](i, event);
          this.buffer[$removeAt](i + 1);
        } else {
          i = i + 1;
        }
      }
      if (this.buffer[$isNotEmpty]) {
        if (text$0.XmlTextEvent.is(this.buffer[$last])) {
          if (this.buffer[$length] > 1) {
            this.sink.add(this.buffer[$sublist](0, this.buffer[$length] - 1));
            this.buffer[$removeRange](0, this.buffer[$length] - 1);
          }
        } else {
          this.sink.add(this.buffer[$toList]({growable: false}));
          this.buffer[$clear]();
        }
      }
    }
    close() {
      if (this.buffer[$isNotEmpty]) {
        this.sink.add(this.buffer[$toList]({growable: false}));
        this.buffer[$clear]();
      }
      this.sink.close();
    }
  };
  (normalizer._XmlNormalizeEventsSink.new = function(sink) {
    this.buffer = T$.JSArrayOfXmlEvent().of([]);
    this.sink = sink;
    normalizer._XmlNormalizeEventsSink.__proto__.new.call(this);
    ;
  }).prototype = normalizer._XmlNormalizeEventsSink.prototype;
  dart.addTypeTests(normalizer._XmlNormalizeEventsSink);
  dart.addTypeCaches(normalizer._XmlNormalizeEventsSink);
  dart.setMethodSignature(normalizer._XmlNormalizeEventsSink, () => ({
    __proto__: dart.getMethods(normalizer._XmlNormalizeEventsSink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(normalizer._XmlNormalizeEventsSink, I[22]);
  dart.setFieldSignature(normalizer._XmlNormalizeEventsSink, () => ({
    __proto__: dart.getFields(normalizer._XmlNormalizeEventsSink.__proto__),
    sink: dart.finalFieldType(core.Sink$(core.List$(event.XmlEvent))),
    buffer: dart.finalFieldType(core.List$(event.XmlEvent))
  }));
  normalizer['XmlNormalizeEventsExtension|normalizeEvents'] = function XmlNormalizeEventsExtension$124normalizeEvents($this) {
    return $this.transform(T$.ListOfXmlEvent(), C[14] || CT.C14);
  };
  normalizer['XmlNormalizeEventsExtension|get#normalizeEvents'] = function XmlNormalizeEventsExtension$124get$35normalizeEvents($this) {
    return dart.fn(() => normalizer['XmlNormalizeEventsExtension|normalizeEvents']($this), T$.VoidToStreamOfListOfXmlEvent());
  };
  var onCDATA$ = dart.privateName(for_each_event, "_XmlForEachEventHandler.onCDATA");
  var onComment$ = dart.privateName(for_each_event, "_XmlForEachEventHandler.onComment");
  var onDeclaration$ = dart.privateName(for_each_event, "_XmlForEachEventHandler.onDeclaration");
  var onDoctype$ = dart.privateName(for_each_event, "_XmlForEachEventHandler.onDoctype");
  var onEndElement$ = dart.privateName(for_each_event, "_XmlForEachEventHandler.onEndElement");
  var onProcessing$ = dart.privateName(for_each_event, "_XmlForEachEventHandler.onProcessing");
  var onStartElement$ = dart.privateName(for_each_event, "_XmlForEachEventHandler.onStartElement");
  var onText$ = dart.privateName(for_each_event, "_XmlForEachEventHandler.onText");
  const Object_XmlEventVisitor$36 = class Object_XmlEventVisitor extends core.Object {};
  (Object_XmlEventVisitor$36.new = function() {
  }).prototype = Object_XmlEventVisitor$36.prototype;
  dart.applyMixin(Object_XmlEventVisitor$36, visitor.XmlEventVisitor);
  for_each_event._XmlForEachEventHandler = class _XmlForEachEventHandler extends Object_XmlEventVisitor$36 {
    get onCDATA() {
      return this[onCDATA$];
    }
    set onCDATA(value) {
      super.onCDATA = value;
    }
    get onComment() {
      return this[onComment$];
    }
    set onComment(value) {
      super.onComment = value;
    }
    get onDeclaration() {
      return this[onDeclaration$];
    }
    set onDeclaration(value) {
      super.onDeclaration = value;
    }
    get onDoctype() {
      return this[onDoctype$];
    }
    set onDoctype(value) {
      super.onDoctype = value;
    }
    get onEndElement() {
      return this[onEndElement$];
    }
    set onEndElement(value) {
      super.onEndElement = value;
    }
    get onProcessing() {
      return this[onProcessing$];
    }
    set onProcessing(value) {
      super.onProcessing = value;
    }
    get onStartElement() {
      return this[onStartElement$];
    }
    set onStartElement(value) {
      super.onStartElement = value;
    }
    get onText() {
      return this[onText$];
    }
    set onText(value) {
      super.onText = value;
    }
    static ['_#new#tearOff'](opts) {
      let onCDATA = opts && 'onCDATA' in opts ? opts.onCDATA : null;
      let onComment = opts && 'onComment' in opts ? opts.onComment : null;
      let onDeclaration = opts && 'onDeclaration' in opts ? opts.onDeclaration : null;
      let onDoctype = opts && 'onDoctype' in opts ? opts.onDoctype : null;
      let onEndElement = opts && 'onEndElement' in opts ? opts.onEndElement : null;
      let onProcessing = opts && 'onProcessing' in opts ? opts.onProcessing : null;
      let onStartElement = opts && 'onStartElement' in opts ? opts.onStartElement : null;
      let onText = opts && 'onText' in opts ? opts.onText : null;
      return new for_each_event._XmlForEachEventHandler.new({onCDATA: onCDATA, onComment: onComment, onDeclaration: onDeclaration, onDoctype: onDoctype, onEndElement: onEndElement, onProcessing: onProcessing, onStartElement: onStartElement, onText: onText});
    }
    call(input) {
      return this.visit(input);
    }
    visitCDATAEvent(event) {
      let t8;
      t8 = this.onCDATA;
      return t8 == null ? null : t8(event);
    }
    visitCommentEvent(event) {
      let t8;
      t8 = this.onComment;
      return t8 == null ? null : t8(event);
    }
    visitDeclarationEvent(event) {
      let t8;
      t8 = this.onDeclaration;
      return t8 == null ? null : t8(event);
    }
    visitDoctypeEvent(event) {
      let t8;
      t8 = this.onDoctype;
      return t8 == null ? null : t8(event);
    }
    visitEndElementEvent(event) {
      let t8;
      t8 = this.onEndElement;
      return t8 == null ? null : t8(event);
    }
    visitProcessingEvent(event) {
      let t8;
      t8 = this.onProcessing;
      return t8 == null ? null : t8(event);
    }
    visitStartElementEvent(event) {
      let t8;
      t8 = this.onStartElement;
      return t8 == null ? null : t8(event);
    }
    visitTextEvent(event) {
      let t8;
      t8 = this.onText;
      return t8 == null ? null : t8(event);
    }
  };
  (for_each_event._XmlForEachEventHandler.new = function(opts) {
    let onCDATA = opts && 'onCDATA' in opts ? opts.onCDATA : null;
    let onComment = opts && 'onComment' in opts ? opts.onComment : null;
    let onDeclaration = opts && 'onDeclaration' in opts ? opts.onDeclaration : null;
    let onDoctype = opts && 'onDoctype' in opts ? opts.onDoctype : null;
    let onEndElement = opts && 'onEndElement' in opts ? opts.onEndElement : null;
    let onProcessing = opts && 'onProcessing' in opts ? opts.onProcessing : null;
    let onStartElement = opts && 'onStartElement' in opts ? opts.onStartElement : null;
    let onText = opts && 'onText' in opts ? opts.onText : null;
    this[onCDATA$] = onCDATA;
    this[onComment$] = onComment;
    this[onDeclaration$] = onDeclaration;
    this[onDoctype$] = onDoctype;
    this[onEndElement$] = onEndElement;
    this[onProcessing$] = onProcessing;
    this[onStartElement$] = onStartElement;
    this[onText$] = onText;
    ;
  }).prototype = for_each_event._XmlForEachEventHandler.prototype;
  dart.addTypeTests(for_each_event._XmlForEachEventHandler);
  dart.addTypeCaches(for_each_event._XmlForEachEventHandler);
  dart.setMethodSignature(for_each_event._XmlForEachEventHandler, () => ({
    __proto__: dart.getMethods(for_each_event._XmlForEachEventHandler.__proto__),
    call: dart.fnType(dart.void, [event.XmlEvent]),
    visitCDATAEvent: dart.fnType(dart.void, [cdata.XmlCDATAEvent]),
    visitCommentEvent: dart.fnType(dart.void, [comment.XmlCommentEvent]),
    visitDeclarationEvent: dart.fnType(dart.void, [declaration.XmlDeclarationEvent]),
    visitDoctypeEvent: dart.fnType(dart.void, [doctype.XmlDoctypeEvent]),
    visitEndElementEvent: dart.fnType(dart.void, [end_element.XmlEndElementEvent]),
    visitProcessingEvent: dart.fnType(dart.void, [processing$.XmlProcessingEvent]),
    visitStartElementEvent: dart.fnType(dart.void, [start_element.XmlStartElementEvent]),
    visitTextEvent: dart.fnType(dart.void, [text$0.XmlTextEvent])
  }));
  dart.setLibraryUri(for_each_event._XmlForEachEventHandler, I[23]);
  dart.setFieldSignature(for_each_event._XmlForEachEventHandler, () => ({
    __proto__: dart.getFields(for_each_event._XmlForEachEventHandler.__proto__),
    onCDATA: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [cdata.XmlCDATAEvent]))),
    onComment: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [comment.XmlCommentEvent]))),
    onDeclaration: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [declaration.XmlDeclarationEvent]))),
    onDoctype: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [doctype.XmlDoctypeEvent]))),
    onEndElement: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [end_element.XmlEndElementEvent]))),
    onProcessing: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [processing$.XmlProcessingEvent]))),
    onStartElement: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [start_element.XmlStartElementEvent]))),
    onText: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [text$0.XmlTextEvent])))
  }));
  for_each_event['XmlForEachEventExtension|forEachEvent'] = function XmlForEachEventExtension$124forEachEvent($this, opts) {
    let t9;
    let onCDATA = opts && 'onCDATA' in opts ? opts.onCDATA : null;
    let onComment = opts && 'onComment' in opts ? opts.onComment : null;
    let onDeclaration = opts && 'onDeclaration' in opts ? opts.onDeclaration : null;
    let onDoctype = opts && 'onDoctype' in opts ? opts.onDoctype : null;
    let onEndElement = opts && 'onEndElement' in opts ? opts.onEndElement : null;
    let onProcessing = opts && 'onProcessing' in opts ? opts.onProcessing : null;
    let onStartElement = opts && 'onStartElement' in opts ? opts.onStartElement : null;
    let onText = opts && 'onText' in opts ? opts.onText : null;
    return $this.forEach((t9 = new for_each_event._XmlForEachEventHandler.new({onCDATA: onCDATA, onComment: onComment, onDeclaration: onDeclaration, onDoctype: onDoctype, onEndElement: onEndElement, onProcessing: onProcessing, onStartElement: onStartElement, onText: onText}), t9 === null ? null : dart.bind(t9, 'call')));
  };
  for_each_event['XmlForEachEventExtension|get#forEachEvent'] = function XmlForEachEventExtension$124get$35forEachEvent($this) {
    return dart.fn(opts => {
      let onCDATA = opts && 'onCDATA' in opts ? opts.onCDATA : null;
      let onComment = opts && 'onComment' in opts ? opts.onComment : null;
      let onDeclaration = opts && 'onDeclaration' in opts ? opts.onDeclaration : null;
      let onDoctype = opts && 'onDoctype' in opts ? opts.onDoctype : null;
      let onEndElement = opts && 'onEndElement' in opts ? opts.onEndElement : null;
      let onProcessing = opts && 'onProcessing' in opts ? opts.onProcessing : null;
      let onStartElement = opts && 'onStartElement' in opts ? opts.onStartElement : null;
      let onText = opts && 'onText' in opts ? opts.onText : null;
      return for_each_event['XmlForEachEventExtension|forEachEvent']($this, {onCDATA: onCDATA, onComment: onComment, onDeclaration: onDeclaration, onDoctype: onDoctype, onEndElement: onEndElement, onProcessing: onProcessing, onStartElement: onStartElement, onText: onText});
    }, T$.__ToFuture());
  };
  for_each_event['XmlForEachEventListExtension|forEachEvent'] = function XmlForEachEventListExtension$124forEachEvent($this, opts) {
    let onCDATA = opts && 'onCDATA' in opts ? opts.onCDATA : null;
    let onComment = opts && 'onComment' in opts ? opts.onComment : null;
    let onDeclaration = opts && 'onDeclaration' in opts ? opts.onDeclaration : null;
    let onDoctype = opts && 'onDoctype' in opts ? opts.onDoctype : null;
    let onEndElement = opts && 'onEndElement' in opts ? opts.onEndElement : null;
    let onProcessing = opts && 'onProcessing' in opts ? opts.onProcessing : null;
    let onStartElement = opts && 'onStartElement' in opts ? opts.onStartElement : null;
    let onText = opts && 'onText' in opts ? opts.onText : null;
    return for_each_event['XmlForEachEventExtension|forEachEvent'](flatten['XmlFlattenStreamExtension|flatten'](event.XmlEvent, $this), {onCDATA: onCDATA, onComment: onComment, onDeclaration: onDeclaration, onDoctype: onDoctype, onEndElement: onEndElement, onProcessing: onProcessing, onStartElement: onStartElement, onText: onText});
  };
  for_each_event['XmlForEachEventListExtension|get#forEachEvent'] = function XmlForEachEventListExtension$124get$35forEachEvent($this) {
    return dart.fn(opts => {
      let onCDATA = opts && 'onCDATA' in opts ? opts.onCDATA : null;
      let onComment = opts && 'onComment' in opts ? opts.onComment : null;
      let onDeclaration = opts && 'onDeclaration' in opts ? opts.onDeclaration : null;
      let onDoctype = opts && 'onDoctype' in opts ? opts.onDoctype : null;
      let onEndElement = opts && 'onEndElement' in opts ? opts.onEndElement : null;
      let onProcessing = opts && 'onProcessing' in opts ? opts.onProcessing : null;
      let onStartElement = opts && 'onStartElement' in opts ? opts.onStartElement : null;
      let onText = opts && 'onText' in opts ? opts.onText : null;
      return for_each_event['XmlForEachEventListExtension|forEachEvent']($this, {onCDATA: onCDATA, onComment: onComment, onDeclaration: onDeclaration, onDoctype: onDoctype, onEndElement: onEndElement, onProcessing: onProcessing, onStartElement: onStartElement, onText: onText});
    }, T$.__ToFuture());
  };
  node_encoder.XmlNodeEncoder = class XmlNodeEncoder extends list_converter.XmlListConverter$(node.XmlNode, event.XmlEvent) {
    static ['_#new#tearOff']() {
      return new node_encoder.XmlNodeEncoder.new();
    }
    startChunkedConversion(sink) {
      T$.SinkOfListOfXmlEvent().as(sink);
      return new node_encoder._XmlNodeEncoderSink.new(sink);
    }
  };
  (node_encoder.XmlNodeEncoder.new = function() {
    node_encoder.XmlNodeEncoder.__proto__.new.call(this);
    ;
  }).prototype = node_encoder.XmlNodeEncoder.prototype;
  dart.addTypeTests(node_encoder.XmlNodeEncoder);
  dart.addTypeCaches(node_encoder.XmlNodeEncoder);
  dart.setMethodSignature(node_encoder.XmlNodeEncoder, () => ({
    __proto__: dart.getMethods(node_encoder.XmlNodeEncoder.__proto__),
    startChunkedConversion: dart.fnType(convert.ChunkedConversionSink$(core.List$(node.XmlNode)), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(node_encoder.XmlNodeEncoder, I[24]);
  const ChunkedConversionSink_XmlVisitor$36 = class ChunkedConversionSink_XmlVisitor extends convert.ChunkedConversionSink$(core.List$(node.XmlNode)) {};
  (ChunkedConversionSink_XmlVisitor$36.new = function() {
    ChunkedConversionSink_XmlVisitor$36.__proto__.new.call(this);
  }).prototype = ChunkedConversionSink_XmlVisitor$36.prototype;
  dart.applyMixin(ChunkedConversionSink_XmlVisitor$36, visitor$.XmlVisitor);
  node_encoder._XmlNodeEncoderSink = class _XmlNodeEncoderSink extends ChunkedConversionSink_XmlVisitor$36 {
    static ['_#new#tearOff'](sink) {
      return new node_encoder._XmlNodeEncoderSink.new(sink);
    }
    add(chunk) {
      T$.ListOfXmlNode().as(chunk);
      return chunk[$forEach](dart.bind(this, 'visit'));
    }
    close() {
      return this.sink.close();
    }
    visitElement(node) {
      let isSelfClosing = node.isSelfClosing && node.children.isEmpty;
      this.sink.add(T$.JSArrayOfXmlEvent().of([new start_element.XmlStartElementEvent.new(node.name.qualified, this.convertAttributes(node.attributes), isSelfClosing)]));
      if (!isSelfClosing) {
        node.children.forEach(dart.bind(this, 'visit'));
        this.sink.add(T$.JSArrayOfXmlEvent().of([new end_element.XmlEndElementEvent.new(node.name.qualified)]));
      }
    }
    visitCDATA(node) {
      return this.sink.add(T$.JSArrayOfXmlEvent().of([new cdata.XmlCDATAEvent.new(node.text)]));
    }
    visitComment(node) {
      return this.sink.add(T$.JSArrayOfXmlEvent().of([new comment.XmlCommentEvent.new(node.text)]));
    }
    visitDeclaration(node) {
      return this.sink.add(T$.JSArrayOfXmlEvent().of([new declaration.XmlDeclarationEvent.new(this.convertAttributes(node.attributes))]));
    }
    visitDoctype(node) {
      return this.sink.add(T$.JSArrayOfXmlEvent().of([new doctype.XmlDoctypeEvent.new(node.name, node.externalId, node.internalSubset)]));
    }
    visitProcessing(node) {
      return this.sink.add(T$.JSArrayOfXmlEvent().of([new processing$.XmlProcessingEvent.new(node.target, node.text)]));
    }
    visitText(node) {
      return this.sink.add(T$.JSArrayOfXmlEvent().of([new text$0.XmlTextEvent.new(node.text)]));
    }
    convertAttributes(attributes) {
      return attributes.map(event_attribute.XmlEventAttribute, dart.fn(attribute => new event_attribute.XmlEventAttribute.new(attribute.name.qualified, attribute.value, attribute.attributeType), T$.XmlAttributeToXmlEventAttribute()))[$toList]({growable: false});
    }
  };
  (node_encoder._XmlNodeEncoderSink.new = function(sink) {
    this.sink = sink;
    node_encoder._XmlNodeEncoderSink.__proto__.new.call(this);
    ;
  }).prototype = node_encoder._XmlNodeEncoderSink.prototype;
  dart.addTypeTests(node_encoder._XmlNodeEncoderSink);
  dart.addTypeCaches(node_encoder._XmlNodeEncoderSink);
  dart.setMethodSignature(node_encoder._XmlNodeEncoderSink, () => ({
    __proto__: dart.getMethods(node_encoder._XmlNodeEncoderSink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, []),
    convertAttributes: dart.fnType(core.List$(event_attribute.XmlEventAttribute), [node_list.XmlNodeList$(attribute$.XmlAttribute)])
  }));
  dart.setLibraryUri(node_encoder._XmlNodeEncoderSink, I[24]);
  dart.setFieldSignature(node_encoder._XmlNodeEncoderSink, () => ({
    __proto__: dart.getFields(node_encoder._XmlNodeEncoderSink.__proto__),
    sink: dart.finalFieldType(core.Sink$(core.List$(event.XmlEvent)))
  }));
  node_encoder['XmlNodeEncoderExtension|toXmlEvents'] = function XmlNodeEncoderExtension$124toXmlEvents($this) {
    return $this.transform(T$.ListOfXmlEvent(), C[15] || CT.C15);
  };
  node_encoder['XmlNodeEncoderExtension|get#toXmlEvents'] = function XmlNodeEncoderExtension$124get$35toXmlEvents($this) {
    return dart.fn(() => node_encoder['XmlNodeEncoderExtension|toXmlEvents']($this), T$.VoidToStreamOfListOfXmlEvent());
  };
  var text$1 = dart.privateName(data, "XmlData.text");
  const XmlNode_XmlHasParent$36 = class XmlNode_XmlHasParent extends node.XmlNode {};
  (XmlNode_XmlHasParent$36.new = function() {
    has_parent$.XmlHasParent$(node.XmlNode)[dart.mixinNew].call(this);
  }).prototype = XmlNode_XmlHasParent$36.prototype;
  dart.applyMixin(XmlNode_XmlHasParent$36, has_parent$.XmlHasParent$(node.XmlNode));
  data.XmlData = class XmlData extends XmlNode_XmlHasParent$36 {
    get text() {
      return this[text$1];
    }
    set text(value) {
      this[text$1] = value;
    }
  };
  (data.XmlData.new = function(text) {
    this[text$1] = text;
    data.XmlData.__proto__.new.call(this);
    ;
  }).prototype = data.XmlData.prototype;
  dart.addTypeTests(data.XmlData);
  dart.addTypeCaches(data.XmlData);
  dart.setLibraryUri(data.XmlData, I[25]);
  dart.setFieldSignature(data.XmlData, () => ({
    __proto__: dart.getFields(data.XmlData.__proto__),
    text: dart.fieldType(core.String)
  }));
  text$.XmlText = class XmlText extends data.XmlData {
    static ['_#new#tearOff'](text) {
      return new text$.XmlText.new(text);
    }
    get nodeType() {
      return node_type.XmlNodeType.TEXT;
    }
    copy() {
      return new text$.XmlText.new(this.text);
    }
    accept(visitor) {
      return visitor.visitText(this);
    }
  };
  (text$.XmlText.new = function(text) {
    text$.XmlText.__proto__.new.call(this, text);
    ;
  }).prototype = text$.XmlText.prototype;
  dart.addTypeTests(text$.XmlText);
  dart.addTypeCaches(text$.XmlText);
  dart.setMethodSignature(text$.XmlText, () => ({
    __proto__: dart.getMethods(text$.XmlText.__proto__),
    copy: dart.fnType(text$.XmlText, []),
    accept: dart.fnType(dart.void, [visitor$.XmlVisitor])
  }));
  dart.setGetterSignature(text$.XmlText, () => ({
    __proto__: dart.getGetters(text$.XmlText.__proto__),
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(text$.XmlText, I[26]);
  var target$ = dart.privateName(processing, "XmlProcessing.target");
  processing.XmlProcessing = class XmlProcessing extends data.XmlData {
    get target() {
      return this[target$];
    }
    set target(value) {
      super.target = value;
    }
    static ['_#new#tearOff'](target, text) {
      return new processing.XmlProcessing.new(target, text);
    }
    get nodeType() {
      return node_type.XmlNodeType.PROCESSING;
    }
    copy() {
      return new processing.XmlProcessing.new(this.target, this.text);
    }
    accept(visitor) {
      return visitor.visitProcessing(this);
    }
  };
  (processing.XmlProcessing.new = function(target, text) {
    this[target$] = target;
    processing.XmlProcessing.__proto__.new.call(this, text);
    ;
  }).prototype = processing.XmlProcessing.prototype;
  dart.addTypeTests(processing.XmlProcessing);
  dart.addTypeCaches(processing.XmlProcessing);
  dart.setMethodSignature(processing.XmlProcessing, () => ({
    __proto__: dart.getMethods(processing.XmlProcessing.__proto__),
    copy: dart.fnType(processing.XmlProcessing, []),
    accept: dart.fnType(dart.void, [visitor$.XmlVisitor])
  }));
  dart.setGetterSignature(processing.XmlProcessing, () => ({
    __proto__: dart.getGetters(processing.XmlProcessing.__proto__),
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(processing.XmlProcessing, I[27]);
  dart.setFieldSignature(processing.XmlProcessing, () => ({
    __proto__: dart.getFields(processing.XmlProcessing.__proto__),
    target: dart.finalFieldType(core.String)
  }));
  parent['XmlParentExtension|get#root'] = function XmlParentExtension$124get$35root($this) {
    let current = $this;
    while (current.parent != null) {
      current = dart.nullCheck(current.parent);
    }
    return current;
  };
  parent['XmlParentExtension|get#document'] = function XmlParentExtension$124get$35document($this) {
    let node = parent['XmlParentExtension|get#root']($this);
    return document.XmlDocument.is(node) ? node : null;
  };
  parent['XmlParentExtension|get#parentElement'] = function XmlParentExtension$124get$35parentElement($this) {
    for (let current = $this.parent; current != null; current = current.parent) {
      if (element$.XmlElement.is(current)) {
        return current;
      }
    }
    return null;
  };
  parent['XmlParentExtension|get#depth'] = function XmlParentExtension$124get$35depth($this) {
    let result = 0;
    let current = $this;
    while (current.parent != null) {
      current = dart.nullCheck(current.parent);
      result = result + 1;
    }
    return result;
  };
  node_decoder.XmlNodeDecoder = class XmlNodeDecoder extends list_converter.XmlListConverter$(event.XmlEvent, node.XmlNode) {
    static ['_#new#tearOff']() {
      return new node_decoder.XmlNodeDecoder.new();
    }
    startChunkedConversion(sink) {
      T$.SinkOfListOfXmlNode().as(sink);
      return new node_decoder._XmlNodeDecoderSink.new(sink);
    }
    convertIterable(events) {
      let result = T$.JSArrayOfXmlNode().of([]);
      let sink = new node_decoder._XmlNodeDecoderSink.new(new (T$.ConversionSinkOfListOfXmlNode()).new(T$.IterableOfXmlNodeTovoid().as(dart.bind(result, $addAll))));
      events[$forEach](dart.bind(sink, 'visit'));
      return result;
    }
  };
  (node_decoder.XmlNodeDecoder.new = function() {
    node_decoder.XmlNodeDecoder.__proto__.new.call(this);
    ;
  }).prototype = node_decoder.XmlNodeDecoder.prototype;
  dart.addTypeTests(node_decoder.XmlNodeDecoder);
  dart.addTypeCaches(node_decoder.XmlNodeDecoder);
  dart.setMethodSignature(node_decoder.XmlNodeDecoder, () => ({
    __proto__: dart.getMethods(node_decoder.XmlNodeDecoder.__proto__),
    startChunkedConversion: dart.fnType(convert.ChunkedConversionSink$(core.List$(event.XmlEvent)), [dart.nullable(core.Object)]),
    convertIterable: dart.fnType(core.List$(node.XmlNode), [core.Iterable$(event.XmlEvent)])
  }));
  dart.setLibraryUri(node_decoder.XmlNodeDecoder, I[28]);
  const ChunkedConversionSink_XmlEventVisitor$36$ = class ChunkedConversionSink_XmlEventVisitor extends convert.ChunkedConversionSink$(core.List$(event.XmlEvent)) {};
  (ChunkedConversionSink_XmlEventVisitor$36$.new = function() {
    ChunkedConversionSink_XmlEventVisitor$36$.__proto__.new.call(this);
  }).prototype = ChunkedConversionSink_XmlEventVisitor$36$.prototype;
  dart.applyMixin(ChunkedConversionSink_XmlEventVisitor$36$, visitor.XmlEventVisitor);
  node_decoder._XmlNodeDecoderSink = class _XmlNodeDecoderSink extends ChunkedConversionSink_XmlEventVisitor$36$ {
    static ['_#new#tearOff'](sink) {
      return new node_decoder._XmlNodeDecoderSink.new(sink);
    }
    add(chunk) {
      T$.ListOfXmlEvent().as(chunk);
      return chunk[$forEach](dart.bind(this, 'visit'));
    }
    visitCDATAEvent(event) {
      return this.commit(new cdata$.XmlCDATA.new(event.text), event);
    }
    visitCommentEvent(event) {
      return this.commit(new comment$.XmlComment.new(event.text), event);
    }
    visitDeclarationEvent(event) {
      return this.commit(new declaration$.XmlDeclaration.new(this.convertAttributes(event.attributes)), event);
    }
    visitDoctypeEvent(event) {
      return this.commit(new doctype$.XmlDoctype.new(event.name, event.externalId, event.internalSubset), event);
    }
    visitEndElementEvent(event) {
      if (this.parent == null) {
        dart.throw(tag_exception.XmlTagException.unexpectedClosingTag(event.name));
      }
      let element = dart.nullCheck(this.parent);
      tag_exception.XmlTagException.checkClosingTag(element.name.qualified, event.name);
      element.isSelfClosing = element.children.isNotEmpty;
      this.parent = parent['XmlParentExtension|get#parentElement'](element);
      if (this.parent == null) {
        this.commit(element, event.parent);
      }
    }
    visitProcessingEvent(event) {
      return this.commit(new processing.XmlProcessing.new(event.target, event.text), event);
    }
    visitStartElementEvent(event) {
      let element = new element$.XmlElement.new(name$.XmlName.fromString(event.name), this.convertAttributes(event.attributes));
      if (event.isSelfClosing) {
        this.commit(element, event);
      } else {
        if (this.parent != null) {
          dart.nullCheck(this.parent).children.add(element);
        }
        this.parent = element;
      }
    }
    visitTextEvent(event) {
      return this.commit(new text$.XmlText.new(event.text), event);
    }
    close() {
      if (this.parent != null) {
        dart.throw(tag_exception.XmlTagException.missingClosingTag(dart.nullCheck(this.parent).name.qualified));
      }
      this.sink.close();
    }
    commit(node, event) {
      let t18;
      if (this.parent == null) {
        for (let outerElement = node, outerEvent = (t18 = event, t18 == null ? null : t18.parent); outerEvent != null; outerEvent = outerEvent.parent) {
          outerElement = new element$.XmlElement.new(name$.XmlName.fromString(outerEvent.name), this.convertAttributes(outerEvent.attributes), T$.JSArrayOfXmlNode().of([outerElement]), outerEvent.isSelfClosing);
        }
        this.sink.add(T$.JSArrayOfXmlNode().of([node]));
      } else {
        dart.nullCheck(this.parent).children.add(node);
      }
    }
    convertAttributes(attributes) {
      return attributes[$map](attribute$.XmlAttribute, dart.fn(attribute => new attribute$.XmlAttribute.new(name$.XmlName.fromString(attribute.name), attribute.value, attribute.attributeType), T$.XmlEventAttributeToXmlAttribute()));
    }
  };
  (node_decoder._XmlNodeDecoderSink.new = function(sink) {
    this.parent = null;
    this.sink = sink;
    node_decoder._XmlNodeDecoderSink.__proto__.new.call(this);
    ;
  }).prototype = node_decoder._XmlNodeDecoderSink.prototype;
  dart.addTypeTests(node_decoder._XmlNodeDecoderSink);
  dart.addTypeCaches(node_decoder._XmlNodeDecoderSink);
  dart.setMethodSignature(node_decoder._XmlNodeDecoderSink, () => ({
    __proto__: dart.getMethods(node_decoder._XmlNodeDecoderSink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    visitCDATAEvent: dart.fnType(dart.void, [cdata.XmlCDATAEvent]),
    visitCommentEvent: dart.fnType(dart.void, [comment.XmlCommentEvent]),
    visitDeclarationEvent: dart.fnType(dart.void, [declaration.XmlDeclarationEvent]),
    visitDoctypeEvent: dart.fnType(dart.void, [doctype.XmlDoctypeEvent]),
    visitEndElementEvent: dart.fnType(dart.void, [end_element.XmlEndElementEvent]),
    visitProcessingEvent: dart.fnType(dart.void, [processing$.XmlProcessingEvent]),
    visitStartElementEvent: dart.fnType(dart.void, [start_element.XmlStartElementEvent]),
    visitTextEvent: dart.fnType(dart.void, [text$0.XmlTextEvent]),
    close: dart.fnType(dart.void, []),
    commit: dart.fnType(dart.void, [node.XmlNode, dart.nullable(event.XmlEvent)]),
    convertAttributes: dart.fnType(core.Iterable$(attribute$.XmlAttribute), [core.Iterable$(event_attribute.XmlEventAttribute)])
  }));
  dart.setLibraryUri(node_decoder._XmlNodeDecoderSink, I[28]);
  dart.setFieldSignature(node_decoder._XmlNodeDecoderSink, () => ({
    __proto__: dart.getFields(node_decoder._XmlNodeDecoderSink.__proto__),
    sink: dart.finalFieldType(core.Sink$(core.List$(node.XmlNode))),
    parent: dart.fieldType(dart.nullable(element$.XmlElement))
  }));
  node_decoder['XmlNodeDecoderExtension|toXmlNodes'] = function XmlNodeDecoderExtension$124toXmlNodes($this) {
    return $this.transform(T$.ListOfXmlNode(), C[16] || CT.C16);
  };
  node_decoder['XmlNodeDecoderExtension|get#toXmlNodes'] = function XmlNodeDecoderExtension$124get$35toXmlNodes($this) {
    return dart.fn(() => node_decoder['XmlNodeDecoderExtension|toXmlNodes']($this), T$.VoidToStreamOfListOfXmlNode());
  };
  node_codec.XmlNodeCodec = class XmlNodeCodec extends convert.Codec$(core.List$(node.XmlNode), core.List$(event.XmlEvent)) {
    static ['_#new#tearOff']() {
      return new node_codec.XmlNodeCodec.new();
    }
    get decoder() {
      return C[16] || CT.C16;
    }
    get encoder() {
      return C[15] || CT.C15;
    }
  };
  (node_codec.XmlNodeCodec.new = function() {
    node_codec.XmlNodeCodec.__proto__.new.call(this);
    ;
  }).prototype = node_codec.XmlNodeCodec.prototype;
  dart.addTypeTests(node_codec.XmlNodeCodec);
  dart.addTypeCaches(node_codec.XmlNodeCodec);
  dart.setGetterSignature(node_codec.XmlNodeCodec, () => ({
    __proto__: dart.getGetters(node_codec.XmlNodeCodec.__proto__),
    decoder: convert.Converter$(core.List$(event.XmlEvent), core.List$(node.XmlNode)),
    encoder: convert.Converter$(core.List$(node.XmlNode), core.List$(event.XmlEvent))
  }));
  dart.setLibraryUri(node_codec.XmlNodeCodec, I[29]);
  var entityMapping$0 = dart.privateName(event_decoder, "XmlEventDecoder.entityMapping");
  var validateNesting$ = dart.privateName(event_decoder, "XmlEventDecoder.validateNesting");
  var validateDocument$ = dart.privateName(event_decoder, "XmlEventDecoder.validateDocument");
  var withLocation$ = dart.privateName(event_decoder, "XmlEventDecoder.withLocation");
  var withParent$ = dart.privateName(event_decoder, "XmlEventDecoder.withParent");
  event_decoder.XmlEventDecoder = class XmlEventDecoder extends convert.Converter$(core.String, core.List$(event.XmlEvent)) {
    get entityMapping() {
      return this[entityMapping$0];
    }
    set entityMapping(value) {
      super.entityMapping = value;
    }
    get validateNesting() {
      return this[validateNesting$];
    }
    set validateNesting(value) {
      super.validateNesting = value;
    }
    get validateDocument() {
      return this[validateDocument$];
    }
    set validateDocument(value) {
      super.validateDocument = value;
    }
    get withLocation() {
      return this[withLocation$];
    }
    set withLocation(value) {
      super.withLocation = value;
    }
    get withParent() {
      return this[withParent$];
    }
    set withParent(value) {
      super.withParent = value;
    }
    static ['_#new#tearOff'](opts) {
      let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
      let validateNesting = opts && 'validateNesting' in opts ? opts.validateNesting : false;
      let validateDocument = opts && 'validateDocument' in opts ? opts.validateDocument : false;
      let withLocation = opts && 'withLocation' in opts ? opts.withLocation : false;
      let withParent = opts && 'withParent' in opts ? opts.withParent : false;
      return new event_decoder.XmlEventDecoder.new({entityMapping: entityMapping, validateNesting: validateNesting, validateDocument: validateDocument, withLocation: withLocation, withParent: withParent});
    }
    convert(input, start = 0, end = null) {
      let t20;
      core.String.as(input);
      end = core.RangeError.checkValidRange(start, end, input.length);
      let list = T$.JSArrayOfXmlEvent().of([]);
      let sink = new (T$.ConversionSinkOfListOfXmlEvent()).new(T$.IterableOfXmlEventTovoid().as(dart.bind(list, $addAll)));
      t20 = this.startChunkedConversion(sink);
      (() => {
        t20.add(input);
        t20.close();
        return t20;
      })();
      return list;
    }
    startChunkedConversion(sink) {
      T$.SinkOfListOfXmlEvent().as(sink);
      return new event_decoder._XmlEventDecoderSink.new(sink, this.entityMapping, new annotator.XmlAnnotator.new({validateNesting: this.validateNesting, validateDocument: this.validateDocument, withBuffer: false, withLocation: this.withLocation, withParent: this.withParent}));
    }
  };
  (event_decoder.XmlEventDecoder.new = function(opts) {
    let t20;
    let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
    let validateNesting = opts && 'validateNesting' in opts ? opts.validateNesting : false;
    let validateDocument = opts && 'validateDocument' in opts ? opts.validateDocument : false;
    let withLocation = opts && 'withLocation' in opts ? opts.withLocation : false;
    let withParent = opts && 'withParent' in opts ? opts.withParent : false;
    this[validateNesting$] = validateNesting;
    this[validateDocument$] = validateDocument;
    this[withLocation$] = withLocation;
    this[withParent$] = withParent;
    this[entityMapping$0] = (t20 = entityMapping, t20 == null ? default_mapping.defaultEntityMapping : t20);
    event_decoder.XmlEventDecoder.__proto__.new.call(this);
    ;
  }).prototype = event_decoder.XmlEventDecoder.prototype;
  dart.addTypeTests(event_decoder.XmlEventDecoder);
  dart.addTypeCaches(event_decoder.XmlEventDecoder);
  dart.setMethodSignature(event_decoder.XmlEventDecoder, () => ({
    __proto__: dart.getMethods(event_decoder.XmlEventDecoder.__proto__),
    convert: dart.fnType(core.List$(event.XmlEvent), [dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
    startChunkedConversion: dart.fnType(convert.StringConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(event_decoder.XmlEventDecoder, I[30]);
  dart.setFieldSignature(event_decoder.XmlEventDecoder, () => ({
    __proto__: dart.getFields(event_decoder.XmlEventDecoder.__proto__),
    entityMapping: dart.finalFieldType(entity_mapping.XmlEntityMapping),
    validateNesting: dart.finalFieldType(core.bool),
    validateDocument: dart.finalFieldType(core.bool),
    withLocation: dart.finalFieldType(core.bool),
    withParent: dart.finalFieldType(core.bool)
  }));
  event_decoder._XmlEventDecoderSink = class _XmlEventDecoderSink extends convert.StringConversionSinkBase {
    static ['_#new#tearOff'](sink, entityMapping, annotator) {
      return new event_decoder._XmlEventDecoderSink.new(sink, entityMapping, annotator);
    }
    addSlice(str, start, end, isLast) {
      end = core.RangeError.checkValidRange(start, end, str.length);
      if (start === end) {
        return;
      }
      let result = T$.JSArrayOfXmlEvent().of([]);
      let previous = new (T$.FailureOfXmlEvent()).new(this.carry + str[$substring](start, end), 0, "");
      for (;;) {
        let current = this.eventParser.parseOn(previous);
        if (current.isSuccess) {
          let event = current.value;
          this.annotator.annotate(event, {start: this.offset + previous.position, stop: this.offset + current.position});
          result[$add](event);
          previous = current;
        } else {
          this.carry = previous.buffer[$substring](previous.position);
          this.offset = this.offset + previous.position;
          break;
        }
      }
      if (result[$isNotEmpty]) {
        this.sink.add(result);
      }
      if (isLast) {
        this.close();
      }
    }
    close() {
      if (this.carry[$isNotEmpty]) {
        let context = this.eventParser.parseOn(new (T$.FailureOfXmlEvent()).new(this.carry, 0, ""));
        if (context.isFailure) {
          dart.throw(new parser_exception.XmlParserException.new(context.message, {position: this.offset + context.position}));
        }
      }
      this.annotator.close({position: this.offset});
      this.sink.close();
    }
  };
  (event_decoder._XmlEventDecoderSink.new = function(sink, entityMapping, annotator) {
    this.carry = "";
    this.offset = 0;
    this.sink = sink;
    this.annotator = annotator;
    this.eventParser = parser$.eventParserCache._get(entityMapping);
    ;
  }).prototype = event_decoder._XmlEventDecoderSink.prototype;
  dart.addTypeTests(event_decoder._XmlEventDecoderSink);
  dart.addTypeCaches(event_decoder._XmlEventDecoderSink);
  dart.setMethodSignature(event_decoder._XmlEventDecoderSink, () => ({
    __proto__: dart.getMethods(event_decoder._XmlEventDecoderSink.__proto__),
    addSlice: dart.fnType(dart.void, [core.String, core.int, core.int, core.bool]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(event_decoder._XmlEventDecoderSink, I[30]);
  dart.setFieldSignature(event_decoder._XmlEventDecoderSink, () => ({
    __proto__: dart.getFields(event_decoder._XmlEventDecoderSink.__proto__),
    sink: dart.finalFieldType(core.Sink$(core.List$(event.XmlEvent))),
    eventParser: dart.finalFieldType(parser.Parser$(event.XmlEvent)),
    annotator: dart.finalFieldType(annotator.XmlAnnotator),
    carry: dart.fieldType(core.String),
    offset: dart.fieldType(core.int)
  }));
  event_decoder['XmlEventDecoderExtension|toXmlEvents'] = function XmlEventDecoderExtension$124toXmlEvents($this, opts) {
    let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
    let validateNesting = opts && 'validateNesting' in opts ? opts.validateNesting : false;
    let validateDocument = opts && 'validateDocument' in opts ? opts.validateDocument : false;
    let withLocation = opts && 'withLocation' in opts ? opts.withLocation : false;
    let withParent = opts && 'withParent' in opts ? opts.withParent : false;
    return $this.transform(T$.ListOfXmlEvent(), new event_decoder.XmlEventDecoder.new({entityMapping: entityMapping, validateNesting: validateNesting, validateDocument: validateDocument, withLocation: withLocation, withParent: withParent}));
  };
  event_decoder['XmlEventDecoderExtension|get#toXmlEvents'] = function XmlEventDecoderExtension$124get$35toXmlEvents($this) {
    return dart.fn(opts => {
      let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
      let validateNesting = opts && 'validateNesting' in opts ? opts.validateNesting : false;
      let validateDocument = opts && 'validateDocument' in opts ? opts.validateDocument : false;
      let withLocation = opts && 'withLocation' in opts ? opts.withLocation : false;
      let withParent = opts && 'withParent' in opts ? opts.withParent : false;
      return event_decoder['XmlEventDecoderExtension|toXmlEvents']($this, {entityMapping: entityMapping, validateNesting: validateNesting, validateDocument: validateDocument, withLocation: withLocation, withParent: withParent});
    }, T$.__ToStreamOfListOfXmlEvent());
  };
  var decoder = dart.privateName(event_codec, "XmlEventCodec.decoder");
  var encoder = dart.privateName(event_codec, "XmlEventCodec.encoder");
  event_codec.XmlEventCodec = class XmlEventCodec extends convert.Codec$(core.List$(event.XmlEvent), core.String) {
    get decoder() {
      return this[decoder];
    }
    set decoder(value) {
      super.decoder = value;
    }
    get encoder() {
      return this[encoder];
    }
    set encoder(value) {
      super.encoder = value;
    }
    static ['_#new#tearOff'](opts) {
      let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
      return new event_codec.XmlEventCodec.new({entityMapping: entityMapping});
    }
  };
  (event_codec.XmlEventCodec.new = function(opts) {
    let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
    this[decoder] = new event_decoder.XmlEventDecoder.new({entityMapping: entityMapping});
    this[encoder] = new event_encoder.XmlEventEncoder.new({entityMapping: entityMapping});
    event_codec.XmlEventCodec.__proto__.new.call(this);
    ;
  }).prototype = event_codec.XmlEventCodec.prototype;
  dart.addTypeTests(event_codec.XmlEventCodec);
  dart.addTypeCaches(event_codec.XmlEventCodec);
  dart.setLibraryUri(event_codec.XmlEventCodec, I[31]);
  dart.setFieldSignature(event_codec.XmlEventCodec, () => ({
    __proto__: dart.getFields(event_codec.XmlEventCodec.__proto__),
    decoder: dart.finalFieldType(convert.Converter$(core.String, core.List$(event.XmlEvent))),
    encoder: dart.finalFieldType(convert.Converter$(core.List$(event.XmlEvent), core.String))
  }));
  var entityMapping$1 = dart.privateName(parser$, "XmlEventParser.entityMapping");
  parser$.XmlEventParser = class XmlEventParser extends core.Object {
    get entityMapping() {
      return this[entityMapping$1];
    }
    set entityMapping(value) {
      super.entityMapping = value;
    }
    static ['_#new#tearOff'](entityMapping) {
      return new parser$.XmlEventParser.new(entityMapping);
    }
    build() {
      return resolve.resolve(event.XmlEvent, reference.ref0(event.XmlEvent, dart.bind(this, 'event')));
    }
    event() {
      return choice['ChoiceIterableExtension|toChoiceParser'](event.XmlEvent, T$.JSArrayOfParserOfXmlEvent().of([reference.ref0(text$0.XmlTextEvent, dart.bind(this, 'characterData')), reference.ref0(start_element.XmlStartElementEvent, dart.bind(this, 'startElement')), reference.ref0(end_element.XmlEndElementEvent, dart.bind(this, 'endElement')), reference.ref0(comment.XmlCommentEvent, dart.bind(this, 'comment')), reference.ref0(cdata.XmlCDATAEvent, dart.bind(this, 'cdata')), reference.ref0(declaration.XmlDeclarationEvent, dart.bind(this, 'declaration')), reference.ref0(processing$.XmlProcessingEvent, dart.bind(this, 'processing')), reference.ref0(doctype.XmlDoctypeEvent, dart.bind(this, 'doctype'))]), {failureJoiner: C[17] || CT.C17});
    }
    characterData() {
      return map['MapParserExtension|map'](core.String, text$0.XmlTextEvent, new character_data_parser.XmlCharacterDataParser.new("<", 1), dart.fn(each => new text$0.XmlRawTextEvent.new(each, this.entityMapping), T$.StringToXmlRawTextEvent()));
    }
    startElement() {
      return map['MapParserExtension|map'](T$.ListOfObject(), start_element.XmlStartElementEvent, sequence['SequenceIterableExtension|toSequenceParser'](core.Object, T$.JSArrayOfParserOfObject().of([string['PredicateStringExtension|toParser']("<"), reference.ref0(core.String, dart.bind(this, 'nameToken')), reference.ref0(T$.ListOfXmlEventAttribute(), dart.bind(this, 'attributes')), reference.ref0(core.String, dart.bind(this, 'spaceOptional')), choice['ChoiceIterableExtension|toChoiceParser'](core.String, T$.JSArrayOfParserOfString().of([string['PredicateStringExtension|toParser'](">"), string['PredicateStringExtension|toParser']("/>")]), {failureJoiner: C[19] || CT.C19})])), dart.fn(each => new start_element.XmlStartElementEvent.new(core.String.as(each[$_get](1)), T$.ListOfXmlEventAttribute().as(each[$_get](2)), each[$_get](4)[$_equals]("/>")), T$.ListOfObjectToXmlStartElementEvent()));
    }
    attributes() {
      return possessive['PossessiveRepeatingParserExtension|star'](event_attribute.XmlEventAttribute, reference.ref0(event_attribute.XmlEventAttribute, dart.bind(this, 'attribute')));
    }
    attribute() {
      return map['MapParserExtension|map'](T$.ListOfObject(), event_attribute.XmlEventAttribute, sequence['SequenceIterableExtension|toSequenceParser'](core.Object, T$.JSArrayOfParserOfObject().of([reference.ref0(core.String, dart.bind(this, 'space')), reference.ref0(core.String, dart.bind(this, 'nameToken')), reference.ref0(core.String, dart.bind(this, 'spaceOptional')), string['PredicateStringExtension|toParser']("="), reference.ref0(core.String, dart.bind(this, 'spaceOptional')), reference.ref0(T$.ListOfString(), dart.bind(this, 'attributeValue'))])), dart.fn(each => {
        let attributeValue = T$.ListOfString().as(each[$_get](5));
        return new event_attribute.XmlEventAttribute.new(core.String.as(each[$_get](1)), this.entityMapping.decode(attributeValue[$_get](1)), attribute_type.XmlAttributeType.fromToken(attributeValue[$_get](0)));
      }, T$.ListOfObjectToXmlEventAttribute()));
    }
    attributeValue() {
      return choice['ChoiceIterableExtension|toChoiceParser'](T$.ListOfString(), T$.JSArrayOfParserOfListOfString().of([reference.ref0(T$.ListOfString(), dart.bind(this, 'attributeValueDouble')), reference.ref0(T$.ListOfString(), dart.bind(this, 'attributeValueSingle'))]));
    }
    attributeValueDouble() {
      return sequence['SequenceIterableExtension|toSequenceParser'](core.String, T$.JSArrayOfParserOfString().of([string['PredicateStringExtension|toParser']("\""), new character_data_parser.XmlCharacterDataParser.new("\"", 0), string['PredicateStringExtension|toParser']("\"")]));
    }
    attributeValueSingle() {
      return sequence['SequenceIterableExtension|toSequenceParser'](core.String, T$.JSArrayOfParserOfString().of([string['PredicateStringExtension|toParser']("'"), new character_data_parser.XmlCharacterDataParser.new("'", 0), string['PredicateStringExtension|toParser']("'")]));
    }
    endElement() {
      return map['MapParserExtension|map'](T$.ListOfString(), end_element.XmlEndElementEvent, sequence['SequenceIterableExtension|toSequenceParser'](core.String, T$.JSArrayOfParserOfString().of([string['PredicateStringExtension|toParser']("</"), reference.ref0(core.String, dart.bind(this, 'nameToken')), reference.ref0(core.String, dart.bind(this, 'spaceOptional')), string['PredicateStringExtension|toParser'](">")])), dart.fn(each => new end_element.XmlEndElementEvent.new(each[$_get](1)), T$.ListOfStringToXmlEndElementEvent()));
    }
    comment() {
      return map['MapParserExtension|map'](T$.ListOfString(), comment.XmlCommentEvent, sequence['SequenceIterableExtension|toSequenceParser'](core.String, T$.JSArrayOfParserOfString().of([string['PredicateStringExtension|toParser']("<!--"), flatten$['FlattenParserExtension|flatten'](T$.ListOfString(), lazy['LazyRepeatingParserExtension|starLazy'](core.String, any.any(), string['PredicateStringExtension|toParser']("-->")), "\"" + "-->" + "\" expected"), string['PredicateStringExtension|toParser']("-->")])), dart.fn(each => new comment.XmlCommentEvent.new(each[$_get](1)), T$.ListOfStringToXmlCommentEvent()));
    }
    cdata() {
      return map['MapParserExtension|map'](T$.ListOfString(), cdata.XmlCDATAEvent, sequence['SequenceIterableExtension|toSequenceParser'](core.String, T$.JSArrayOfParserOfString().of([string['PredicateStringExtension|toParser']("<![CDATA["), flatten$['FlattenParserExtension|flatten'](T$.ListOfString(), lazy['LazyRepeatingParserExtension|starLazy'](core.String, any.any(), string['PredicateStringExtension|toParser']("]]>")), "\"" + "]]>" + "\" expected"), string['PredicateStringExtension|toParser']("]]>")])), dart.fn(each => new cdata.XmlCDATAEvent.new(each[$_get](1)), T$.ListOfStringToXmlCDATAEvent()));
    }
    declaration() {
      return map['MapParserExtension|map'](T$.ListOfObject(), declaration.XmlDeclarationEvent, sequence['SequenceIterableExtension|toSequenceParser'](core.Object, T$.JSArrayOfParserOfObject().of([string['PredicateStringExtension|toParser']("<?xml"), reference.ref0(T$.ListOfXmlEventAttribute(), dart.bind(this, 'attributes')), reference.ref0(core.String, dart.bind(this, 'spaceOptional')), string['PredicateStringExtension|toParser']("?>")])), dart.fn(each => new declaration.XmlDeclarationEvent.new(T$.ListOfXmlEventAttribute().as(each[$_get](1))), T$.ListOfObjectToXmlDeclarationEvent()));
    }
    processing() {
      return map['MapParserExtension|map'](T$.ListOfString(), processing$.XmlProcessingEvent, sequence['SequenceIterableExtension|toSequenceParser'](core.String, T$.JSArrayOfParserOfString().of([string['PredicateStringExtension|toParser']("<?"), reference.ref0(core.String, dart.bind(this, 'nameToken')), optional['OptionalParserExtension|optionalWith'](core.String, pick['PickParserExtension|pick'](core.String, sequence['SequenceIterableExtension|toSequenceParser'](core.String, T$.JSArrayOfParserOfString().of([reference.ref0(core.String, dart.bind(this, 'space')), flatten$['FlattenParserExtension|flatten'](T$.ListOfString(), lazy['LazyRepeatingParserExtension|starLazy'](core.String, any.any(), string['PredicateStringExtension|toParser']("?>")), "\"" + "?>" + "\" expected")])), 1), ""), string['PredicateStringExtension|toParser']("?>")])), dart.fn(each => new processing$.XmlProcessingEvent.new(each[$_get](1), each[$_get](2)), T$.ListOfStringToXmlProcessingEvent()));
    }
    doctype() {
      return map['MapParserExtension|map'](T$.ListOfObjectN(), doctype.XmlDoctypeEvent, sequence['SequenceIterableExtension|toSequenceParser'](T$.ObjectN(), T$.JSArrayOfParserOfObjectN().of([string['PredicateStringExtension|toParser']("<!DOCTYPE"), reference.ref0(core.String, dart.bind(this, 'space')), reference.ref0(core.String, dart.bind(this, 'nameToken')), optional['OptionalParserExtension|optional'](external_id.DtdExternalId, skip['SkipParserExtension|skip'](external_id.DtdExternalId, reference.ref0(external_id.DtdExternalId, dart.bind(this, 'doctypeExternalId')), {before: reference.ref0(dart.void, dart.bind(this, 'space'))})), reference.ref0(core.String, dart.bind(this, 'spaceOptional')), optional['OptionalParserExtension|optional'](core.String, reference.ref0(core.String, dart.bind(this, 'doctypeIntSubset'))), reference.ref0(core.String, dart.bind(this, 'spaceOptional')), string['PredicateStringExtension|toParser'](">")])), dart.fn(each => {
        let name = core.String.as(each[$_get](2));
        let externalId = T$.DtdExternalIdN().as(each[$_get](3));
        let internalSubset = T$.StringN().as(each[$_get](5));
        return new doctype.XmlDoctypeEvent.new(name, externalId, internalSubset);
      }, T$.ListOfObjectNToXmlDoctypeEvent()));
    }
    doctypeExternalId() {
      return choice['ChoiceIterableExtension|toChoiceParser'](external_id.DtdExternalId, T$.JSArrayOfParserOfDtdExternalId().of([map['MapParserExtension|map'](T$.ListOfObject(), external_id.DtdExternalId, sequence['SequenceIterableExtension|toSequenceParser'](core.Object, T$.JSArrayOfParserOfObject().of([string['PredicateStringExtension|toParser']("SYSTEM"), reference.ref0(core.String, dart.bind(this, 'space')), reference.ref0(T$.ListOfString(), dart.bind(this, 'attributeValue'))])), dart.fn(each => {
          let system = T$.ListOfString().as(each[$_get](2));
          return new external_id.DtdExternalId.system(system[$_get](1), attribute_type.XmlAttributeType.fromToken(system[$_get](0)));
        }, T$.ListOfObjectToDtdExternalId())), map['MapParserExtension|map'](T$.ListOfObject(), external_id.DtdExternalId, sequence['SequenceIterableExtension|toSequenceParser'](core.Object, T$.JSArrayOfParserOfObject().of([string['PredicateStringExtension|toParser']("PUBLIC"), reference.ref0(core.String, dart.bind(this, 'space')), reference.ref0(T$.ListOfString(), dart.bind(this, 'attributeValue')), reference.ref0(core.String, dart.bind(this, 'space')), reference.ref0(T$.ListOfString(), dart.bind(this, 'attributeValue'))])), dart.fn(each => {
          let $public = T$.ListOfString().as(each[$_get](2));
          let system = T$.ListOfString().as(each[$_get](4));
          return new external_id.DtdExternalId.public($public[$_get](1), attribute_type.XmlAttributeType.fromToken($public[$_get](0)), system[$_get](1), attribute_type.XmlAttributeType.fromToken(system[$_get](0)));
        }, T$.ListOfObjectToDtdExternalId()))]));
    }
    doctypeIntSubset() {
      return pick['PickParserExtension|pick'](core.String, sequence['SequenceIterableExtension|toSequenceParser'](core.String, T$.JSArrayOfParserOfString().of([string['PredicateStringExtension|toParser']("["), flatten$['FlattenParserExtension|flatten'](core.List, lazy['LazyRepeatingParserExtension|starLazy'](dart.dynamic, choice['ChoiceIterableExtension|toChoiceParser'](dart.dynamic, T$.JSArrayOfParser().of([reference.ref0(dart.dynamic, dart.bind(this, 'doctypeElementDecl')), reference.ref0(dart.dynamic, dart.bind(this, 'doctypeAttlistDecl')), reference.ref0(dart.dynamic, dart.bind(this, 'doctypeEntityDecl')), reference.ref0(dart.dynamic, dart.bind(this, 'doctypeNotationDecl')), reference.ref0(processing$.XmlProcessingEvent, dart.bind(this, 'processing')), reference.ref0(comment.XmlCommentEvent, dart.bind(this, 'comment')), reference.ref0(dart.dynamic, dart.bind(this, 'doctypeReference')), any.any()])), string['PredicateStringExtension|toParser']("]")), "\"" + "]" + "\" expected"), string['PredicateStringExtension|toParser']("]")])), 1);
    }
    doctypeElementDecl() {
      return sequence['SequenceIterableExtension|toSequenceParser'](core.Object, T$.JSArrayOfParserOfObject().of([string['PredicateStringExtension|toParser']("<!ELEMENT"), lazy['LazyRepeatingParserExtension|starLazy'](core.Object, choice['ChoiceIterableExtension|toChoiceParser'](core.Object, T$.JSArrayOfParserOfObject().of([reference.ref0(core.String, dart.bind(this, 'nameToken')), reference.ref0(T$.ListOfString(), dart.bind(this, 'attributeValue')), any.any()])), string['PredicateStringExtension|toParser'](">")), string['PredicateStringExtension|toParser'](">")]));
    }
    doctypeAttlistDecl() {
      return sequence['SequenceIterableExtension|toSequenceParser'](core.Object, T$.JSArrayOfParserOfObject().of([string['PredicateStringExtension|toParser']("<!ATTLIST"), lazy['LazyRepeatingParserExtension|starLazy'](core.Object, choice['ChoiceIterableExtension|toChoiceParser'](core.Object, T$.JSArrayOfParserOfObject().of([reference.ref0(core.String, dart.bind(this, 'nameToken')), reference.ref0(T$.ListOfString(), dart.bind(this, 'attributeValue')), any.any()])), string['PredicateStringExtension|toParser'](">")), string['PredicateStringExtension|toParser'](">")]));
    }
    doctypeEntityDecl() {
      return sequence['SequenceIterableExtension|toSequenceParser'](core.Object, T$.JSArrayOfParserOfObject().of([string['PredicateStringExtension|toParser']("<!ENTITY"), lazy['LazyRepeatingParserExtension|starLazy'](core.Object, choice['ChoiceIterableExtension|toChoiceParser'](core.Object, T$.JSArrayOfParserOfObject().of([reference.ref0(core.String, dart.bind(this, 'nameToken')), reference.ref0(T$.ListOfString(), dart.bind(this, 'attributeValue')), any.any()])), string['PredicateStringExtension|toParser'](">")), string['PredicateStringExtension|toParser'](">")]));
    }
    doctypeNotationDecl() {
      return sequence['SequenceIterableExtension|toSequenceParser'](core.Object, T$.JSArrayOfParserOfObject().of([string['PredicateStringExtension|toParser']("<!NOTATION"), lazy['LazyRepeatingParserExtension|starLazy'](core.Object, choice['ChoiceIterableExtension|toChoiceParser'](core.Object, T$.JSArrayOfParserOfObject().of([reference.ref0(core.String, dart.bind(this, 'nameToken')), reference.ref0(T$.ListOfString(), dart.bind(this, 'attributeValue')), any.any()])), string['PredicateStringExtension|toParser'](">")), string['PredicateStringExtension|toParser'](">")]));
    }
    doctypeReference() {
      return sequence['SequenceIterableExtension|toSequenceParser'](core.String, T$.JSArrayOfParserOfString().of([string['PredicateStringExtension|toParser']("%"), reference.ref0(core.String, dart.bind(this, 'nameToken')), string['PredicateStringExtension|toParser'](";")]));
    }
    space() {
      return flatten$['FlattenParserExtension|flatten'](T$.ListOfString(), possessive['PossessiveRepeatingParserExtension|plus'](core.String, whitespace.whitespace()), "whitespace expected");
    }
    spaceOptional() {
      return flatten$['FlattenParserExtension|flatten'](T$.ListOfString(), possessive['PossessiveRepeatingParserExtension|star'](core.String, whitespace.whitespace()), "whitespace expected");
    }
    nameToken() {
      return flatten$['FlattenParserExtension|flatten'](T$.ListOfObject(), sequence['SequenceIterableExtension|toSequenceParser'](core.Object, T$.JSArrayOfParserOfObject().of([reference.ref0(core.String, dart.bind(this, 'nameStartChar')), possessive['PossessiveRepeatingParserExtension|star'](core.String, reference.ref0(core.String, dart.bind(this, 'nameChar')))])), "name expected");
    }
    nameStartChar() {
      return pattern.pattern(token.XmlToken.nameStartChars);
    }
    nameChar() {
      return pattern.pattern(token.XmlToken.nameChars);
    }
  };
  (parser$.XmlEventParser.new = function(entityMapping) {
    this[entityMapping$1] = entityMapping;
    ;
  }).prototype = parser$.XmlEventParser.prototype;
  dart.addTypeTests(parser$.XmlEventParser);
  dart.addTypeCaches(parser$.XmlEventParser);
  dart.setMethodSignature(parser$.XmlEventParser, () => ({
    __proto__: dart.getMethods(parser$.XmlEventParser.__proto__),
    build: dart.fnType(parser.Parser$(event.XmlEvent), []),
    event: dart.fnType(parser.Parser$(event.XmlEvent), []),
    characterData: dart.fnType(parser.Parser$(text$0.XmlTextEvent), []),
    startElement: dart.fnType(parser.Parser$(start_element.XmlStartElementEvent), []),
    attributes: dart.fnType(parser.Parser$(core.List$(event_attribute.XmlEventAttribute)), []),
    attribute: dart.fnType(parser.Parser$(event_attribute.XmlEventAttribute), []),
    attributeValue: dart.fnType(parser.Parser$(core.List$(core.String)), []),
    attributeValueDouble: dart.fnType(parser.Parser$(core.List$(core.String)), []),
    attributeValueSingle: dart.fnType(parser.Parser$(core.List$(core.String)), []),
    endElement: dart.fnType(parser.Parser$(end_element.XmlEndElementEvent), []),
    comment: dart.fnType(parser.Parser$(comment.XmlCommentEvent), []),
    cdata: dart.fnType(parser.Parser$(cdata.XmlCDATAEvent), []),
    declaration: dart.fnType(parser.Parser$(declaration.XmlDeclarationEvent), []),
    processing: dart.fnType(parser.Parser$(processing$.XmlProcessingEvent), []),
    doctype: dart.fnType(parser.Parser$(doctype.XmlDoctypeEvent), []),
    doctypeExternalId: dart.fnType(parser.Parser$(external_id.DtdExternalId), []),
    doctypeIntSubset: dart.fnType(parser.Parser$(core.String), []),
    doctypeElementDecl: dart.fnType(parser.Parser, []),
    doctypeAttlistDecl: dart.fnType(parser.Parser, []),
    doctypeEntityDecl: dart.fnType(parser.Parser, []),
    doctypeNotationDecl: dart.fnType(parser.Parser, []),
    doctypeReference: dart.fnType(parser.Parser, []),
    space: dart.fnType(parser.Parser$(core.String), []),
    spaceOptional: dart.fnType(parser.Parser$(core.String), []),
    nameToken: dart.fnType(parser.Parser$(core.String), []),
    nameStartChar: dart.fnType(parser.Parser$(core.String), []),
    nameChar: dart.fnType(parser.Parser$(core.String), [])
  }));
  dart.setLibraryUri(parser$.XmlEventParser, I[32]);
  dart.setFieldSignature(parser$.XmlEventParser, () => ({
    __proto__: dart.getFields(parser$.XmlEventParser.__proto__),
    entityMapping: dart.finalFieldType(entity_mapping.XmlEntityMapping)
  }));
  dart.defineLazy(parser$, {
    /*parser$.eventParserCache*/get eventParserCache() {
      return new (T$.XmlCacheOfXmlEntityMapping$ParserOfXmlEvent()).new(dart.fn(entityMapping => new parser$.XmlEventParser.new(entity_mapping.XmlEntityMapping.as(entityMapping)).build(), T$.dynamicToParserOfXmlEvent()), 5);
    }
  }, false);
  var _current$ = dart.privateName(iterator, "_current");
  var _annotator$ = dart.privateName(iterator, "_annotator");
  var _eventParser = dart.privateName(iterator, "_eventParser");
  var _context = dart.privateName(iterator, "_context");
  iterator.XmlEventIterator = class XmlEventIterator extends core.Iterator$(event.XmlEvent) {
    static ['_#new#tearOff'](input, entityMapping, _annotator) {
      return new iterator.XmlEventIterator.new(input, entityMapping, _annotator);
    }
    get current() {
      return dart.nullCheck(this[_current$]);
    }
    moveNext() {
      let context = this[_context];
      if (context != null) {
        let result = this[_eventParser].parseOn(context);
        if (result.isSuccess) {
          this[_context] = result;
          this[_current$] = result.value;
          this[_annotator$].annotate(result.value, {buffer: context.buffer, start: context.position, stop: result.position});
          return true;
        } else if (context.position < context.buffer.length) {
          this[_context] = context.failure(event.XmlEvent, result.message, context.position + 1);
          dart.throw(new parser_exception.XmlParserException.new(result.message, {buffer: result.buffer, position: result.position}));
        } else {
          this[_context] = null;
          this[_annotator$].close({buffer: context.buffer, position: context.position});
          return false;
        }
      }
      return false;
    }
  };
  (iterator.XmlEventIterator.new = function(input, entityMapping, _annotator) {
    this[_current$] = null;
    this[_annotator$] = _annotator;
    this[_eventParser] = parser$.eventParserCache._get(entityMapping);
    this[_context] = new (T$.FailureOfXmlEvent()).new(input, 0, "");
    ;
  }).prototype = iterator.XmlEventIterator.prototype;
  dart.addTypeTests(iterator.XmlEventIterator);
  dart.addTypeCaches(iterator.XmlEventIterator);
  dart.setMethodSignature(iterator.XmlEventIterator, () => ({
    __proto__: dart.getMethods(iterator.XmlEventIterator.__proto__),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(iterator.XmlEventIterator, () => ({
    __proto__: dart.getGetters(iterator.XmlEventIterator.__proto__),
    current: event.XmlEvent
  }));
  dart.setLibraryUri(iterator.XmlEventIterator, I[33]);
  dart.setFieldSignature(iterator.XmlEventIterator, () => ({
    __proto__: dart.getFields(iterator.XmlEventIterator.__proto__),
    [_eventParser]: dart.finalFieldType(parser.Parser$(event.XmlEvent)),
    [_annotator$]: dart.finalFieldType(annotator.XmlAnnotator),
    [_context]: dart.fieldType(dart.nullable(result.Result$(event.XmlEvent))),
    [_current$]: dart.fieldType(dart.nullable(event.XmlEvent))
  }));
  var validateNesting$0 = dart.privateName(annotator, "XmlAnnotator.validateNesting");
  var validateDocument$0 = dart.privateName(annotator, "XmlAnnotator.validateDocument");
  var withBuffer$ = dart.privateName(annotator, "XmlAnnotator.withBuffer");
  var withLocation$0 = dart.privateName(annotator, "XmlAnnotator.withLocation");
  var withParent$0 = dart.privateName(annotator, "XmlAnnotator.withParent");
  var _roots = dart.privateName(annotator, "_roots");
  var _parents = dart.privateName(annotator, "_parents");
  annotator.XmlAnnotator = class XmlAnnotator extends core.Object {
    get validateNesting() {
      return this[validateNesting$0];
    }
    set validateNesting(value) {
      super.validateNesting = value;
    }
    get validateDocument() {
      return this[validateDocument$0];
    }
    set validateDocument(value) {
      super.validateDocument = value;
    }
    get withBuffer() {
      return this[withBuffer$];
    }
    set withBuffer(value) {
      super.withBuffer = value;
    }
    get withLocation() {
      return this[withLocation$0];
    }
    set withLocation(value) {
      super.withLocation = value;
    }
    get withParent() {
      return this[withParent$0];
    }
    set withParent(value) {
      super.withParent = value;
    }
    static ['_#new#tearOff'](opts) {
      let validateNesting = opts && 'validateNesting' in opts ? opts.validateNesting : null;
      let validateDocument = opts && 'validateDocument' in opts ? opts.validateDocument : null;
      let withBuffer = opts && 'withBuffer' in opts ? opts.withBuffer : null;
      let withLocation = opts && 'withLocation' in opts ? opts.withLocation : null;
      let withParent = opts && 'withParent' in opts ? opts.withParent : null;
      return new annotator.XmlAnnotator.new({validateNesting: validateNesting, validateDocument: validateDocument, withBuffer: withBuffer, withLocation: withLocation, withParent: withParent});
    }
    annotate(event, opts) {
      let buffer = opts && 'buffer' in opts ? opts.buffer : null;
      let start = opts && 'start' in opts ? opts.start : null;
      let stop = opts && 'stop' in opts ? opts.stop : null;
      if (this.withBuffer) {
        event.attachBuffer(buffer);
      }
      if (this.withLocation) {
        event.attachLocation(start, stop);
      }
      if (this.withParent || this.validateNesting || this.validateDocument) {
        if (this.withParent && this[_parents][$isNotEmpty]) {
          event.attachParent(this[_parents][$last]);
        }
        if (this.validateDocument && this[_parents][$isEmpty]) {
          if (declaration.XmlDeclarationEvent.is(event)) {
            if (this[_roots][$whereType](declaration.XmlDeclarationEvent)[$isNotEmpty]) {
              dart.throw(new parser_exception.XmlParserException.new("Expected at most one XML declaration", {buffer: buffer, position: start}));
            } else if (this[_roots][$isNotEmpty]) {
              dart.throw(new parser_exception.XmlParserException.new("Unexpected XML declaration", {buffer: buffer, position: start}));
            }
            this[_roots][$add](event);
          } else if (doctype.XmlDoctypeEvent.is(event)) {
            if (this[_roots][$whereType](doctype.XmlDoctypeEvent)[$isNotEmpty]) {
              dart.throw(new parser_exception.XmlParserException.new("Expected at most one doctype declaration", {buffer: buffer, position: start}));
            } else if (this[_roots][$whereType](start_element.XmlStartElementEvent)[$isNotEmpty]) {
              dart.throw(new parser_exception.XmlParserException.new("Unexpected doctype declaration", {buffer: buffer, position: start}));
            }
            this[_roots][$add](event);
          } else if (start_element.XmlStartElementEvent.is(event)) {
            if (this[_roots][$whereType](start_element.XmlStartElementEvent)[$isNotEmpty]) {
              dart.throw(new parser_exception.XmlParserException.new("Unexpected root element", {buffer: buffer, position: start}));
            }
            this[_roots][$add](event);
          }
        }
        if (start_element.XmlStartElementEvent.is(event)) {
          if (this.withParent) {
            for (let attribute of event.attributes) {
              attribute.attachParent(event);
            }
          }
          if (!event.isSelfClosing) {
            this[_parents][$add](event);
          }
        } else if (end_element.XmlEndElementEvent.is(event)) {
          if (this.validateNesting) {
            if (this[_parents][$isEmpty]) {
              dart.throw(tag_exception.XmlTagException.unexpectedClosingTag(event.name, {buffer: buffer, position: start}));
            } else if (this[_parents][$last].name !== event.name) {
              dart.throw(tag_exception.XmlTagException.mismatchClosingTag(this[_parents][$last].name, event.name, {buffer: buffer, position: start}));
            }
          }
          if (this[_parents][$isNotEmpty]) {
            this[_parents][$removeLast]();
          }
        }
      }
    }
    close(opts) {
      let buffer = opts && 'buffer' in opts ? opts.buffer : null;
      let position = opts && 'position' in opts ? opts.position : null;
      if (this.validateNesting && this[_parents][$isNotEmpty]) {
        dart.throw(tag_exception.XmlTagException.missingClosingTag(this[_parents][$last].name, {buffer: buffer, position: position}));
      }
      if (this.validateDocument && this[_roots][$whereType](start_element.XmlStartElementEvent)[$isEmpty]) {
        dart.throw(new parser_exception.XmlParserException.new("Expected a single root element", {buffer: buffer, position: position}));
      }
    }
  };
  (annotator.XmlAnnotator.new = function(opts) {
    let validateNesting = opts && 'validateNesting' in opts ? opts.validateNesting : null;
    let validateDocument = opts && 'validateDocument' in opts ? opts.validateDocument : null;
    let withBuffer = opts && 'withBuffer' in opts ? opts.withBuffer : null;
    let withLocation = opts && 'withLocation' in opts ? opts.withLocation : null;
    let withParent = opts && 'withParent' in opts ? opts.withParent : null;
    this[_roots] = T$.JSArrayOfXmlEvent().of([]);
    this[_parents] = T$.JSArrayOfXmlStartElementEvent().of([]);
    this[validateNesting$0] = validateNesting;
    this[validateDocument$0] = validateDocument;
    this[withBuffer$] = withBuffer;
    this[withLocation$0] = withLocation;
    this[withParent$0] = withParent;
    ;
  }).prototype = annotator.XmlAnnotator.prototype;
  dart.addTypeTests(annotator.XmlAnnotator);
  dart.addTypeCaches(annotator.XmlAnnotator);
  dart.setMethodSignature(annotator.XmlAnnotator, () => ({
    __proto__: dart.getMethods(annotator.XmlAnnotator.__proto__),
    annotate: dart.fnType(dart.void, [event.XmlEvent], {buffer: dart.nullable(core.String), start: dart.nullable(core.int), stop: dart.nullable(core.int)}, {}),
    close: dart.fnType(dart.void, [], {buffer: dart.nullable(core.String), position: dart.nullable(core.int)}, {})
  }));
  dart.setLibraryUri(annotator.XmlAnnotator, I[34]);
  dart.setFieldSignature(annotator.XmlAnnotator, () => ({
    __proto__: dart.getFields(annotator.XmlAnnotator.__proto__),
    validateNesting: dart.finalFieldType(core.bool),
    validateDocument: dart.finalFieldType(core.bool),
    withBuffer: dart.finalFieldType(core.bool),
    withLocation: dart.finalFieldType(core.bool),
    withParent: dart.finalFieldType(core.bool),
    [_roots]: dart.finalFieldType(core.List$(event.XmlEvent)),
    [_parents]: dart.finalFieldType(core.List$(start_element.XmlStartElementEvent))
  }));
  var input$ = dart.privateName(iterable, "XmlEventIterable.input");
  var entityMapping$2 = dart.privateName(iterable, "XmlEventIterable.entityMapping");
  var validateNesting$1 = dart.privateName(iterable, "XmlEventIterable.validateNesting");
  var validateDocument$1 = dart.privateName(iterable, "XmlEventIterable.validateDocument");
  var withBuffer$0 = dart.privateName(iterable, "XmlEventIterable.withBuffer");
  var withLocation$1 = dart.privateName(iterable, "XmlEventIterable.withLocation");
  var withParent$1 = dart.privateName(iterable, "XmlEventIterable.withParent");
  iterable.XmlEventIterable = class XmlEventIterable extends core.Iterable$(event.XmlEvent) {
    get input() {
      return this[input$];
    }
    set input(value) {
      super.input = value;
    }
    get entityMapping() {
      return this[entityMapping$2];
    }
    set entityMapping(value) {
      super.entityMapping = value;
    }
    get validateNesting() {
      return this[validateNesting$1];
    }
    set validateNesting(value) {
      super.validateNesting = value;
    }
    get validateDocument() {
      return this[validateDocument$1];
    }
    set validateDocument(value) {
      super.validateDocument = value;
    }
    get withBuffer() {
      return this[withBuffer$0];
    }
    set withBuffer(value) {
      super.withBuffer = value;
    }
    get withLocation() {
      return this[withLocation$1];
    }
    set withLocation(value) {
      super.withLocation = value;
    }
    get withParent() {
      return this[withParent$1];
    }
    set withParent(value) {
      super.withParent = value;
    }
    static ['_#new#tearOff'](input, opts) {
      let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
      let validateNesting = opts && 'validateNesting' in opts ? opts.validateNesting : null;
      let validateDocument = opts && 'validateDocument' in opts ? opts.validateDocument : null;
      let withBuffer = opts && 'withBuffer' in opts ? opts.withBuffer : null;
      let withLocation = opts && 'withLocation' in opts ? opts.withLocation : null;
      let withParent = opts && 'withParent' in opts ? opts.withParent : null;
      return new iterable.XmlEventIterable.new(input, {entityMapping: entityMapping, validateNesting: validateNesting, validateDocument: validateDocument, withBuffer: withBuffer, withLocation: withLocation, withParent: withParent});
    }
    get iterator() {
      return new iterator.XmlEventIterator.new(this.input, this.entityMapping, new annotator.XmlAnnotator.new({validateNesting: this.validateNesting, validateDocument: this.validateDocument, withBuffer: this.withBuffer, withLocation: this.withLocation, withParent: this.withParent}));
    }
  };
  (iterable.XmlEventIterable.new = function(input, opts) {
    let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
    let validateNesting = opts && 'validateNesting' in opts ? opts.validateNesting : null;
    let validateDocument = opts && 'validateDocument' in opts ? opts.validateDocument : null;
    let withBuffer = opts && 'withBuffer' in opts ? opts.withBuffer : null;
    let withLocation = opts && 'withLocation' in opts ? opts.withLocation : null;
    let withParent = opts && 'withParent' in opts ? opts.withParent : null;
    this[input$] = input;
    this[entityMapping$2] = entityMapping;
    this[validateNesting$1] = validateNesting;
    this[validateDocument$1] = validateDocument;
    this[withBuffer$0] = withBuffer;
    this[withLocation$1] = withLocation;
    this[withParent$1] = withParent;
    iterable.XmlEventIterable.__proto__.new.call(this);
    ;
  }).prototype = iterable.XmlEventIterable.prototype;
  dart.addTypeTests(iterable.XmlEventIterable);
  dart.addTypeCaches(iterable.XmlEventIterable);
  dart.setGetterSignature(iterable.XmlEventIterable, () => ({
    __proto__: dart.getGetters(iterable.XmlEventIterable.__proto__),
    iterator: core.Iterator$(event.XmlEvent),
    [$iterator]: core.Iterator$(event.XmlEvent)
  }));
  dart.setLibraryUri(iterable.XmlEventIterable, I[35]);
  dart.setFieldSignature(iterable.XmlEventIterable, () => ({
    __proto__: dart.getFields(iterable.XmlEventIterable.__proto__),
    input: dart.finalFieldType(core.String),
    entityMapping: dart.finalFieldType(entity_mapping.XmlEntityMapping),
    validateNesting: dart.finalFieldType(core.bool),
    validateDocument: dart.finalFieldType(core.bool),
    withBuffer: dart.finalFieldType(core.bool),
    withLocation: dart.finalFieldType(core.bool),
    withParent: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionAccessors(iterable.XmlEventIterable, ['iterator']);
  var entityMapping$3 = dart.privateName(event_encoder, "XmlEventEncoder.entityMapping");
  event_encoder.XmlEventEncoder = class XmlEventEncoder extends convert.Converter$(core.List$(event.XmlEvent), core.String) {
    get entityMapping() {
      return this[entityMapping$3];
    }
    set entityMapping(value) {
      super.entityMapping = value;
    }
    static ['_#new#tearOff'](opts) {
      let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
      return new event_encoder.XmlEventEncoder.new({entityMapping: entityMapping});
    }
    convert(input) {
      let t22;
      T$.ListOfXmlEvent().as(input);
      let buffer = new core.StringBuffer.new();
      let sink = new (T$.ConversionSinkOfString()).new(dart.bind(buffer, 'write'));
      t22 = this.startChunkedConversion(sink);
      (() => {
        t22.add(input);
        t22.close();
        return t22;
      })();
      return buffer.toString();
    }
    startChunkedConversion(sink) {
      T$.SinkOfString().as(sink);
      return new event_encoder._XmlEventEncoderSink.new(sink, this.entityMapping);
    }
  };
  (event_encoder.XmlEventEncoder.new = function(opts) {
    let t22;
    let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
    this[entityMapping$3] = (t22 = entityMapping, t22 == null ? default_mapping.defaultEntityMapping : t22);
    event_encoder.XmlEventEncoder.__proto__.new.call(this);
    ;
  }).prototype = event_encoder.XmlEventEncoder.prototype;
  dart.addTypeTests(event_encoder.XmlEventEncoder);
  dart.addTypeCaches(event_encoder.XmlEventEncoder);
  dart.setMethodSignature(event_encoder.XmlEventEncoder, () => ({
    __proto__: dart.getMethods(event_encoder.XmlEventEncoder.__proto__),
    convert: dart.fnType(core.String, [dart.nullable(core.Object)]),
    startChunkedConversion: dart.fnType(convert.ChunkedConversionSink$(core.List$(event.XmlEvent)), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(event_encoder.XmlEventEncoder, I[36]);
  dart.setFieldSignature(event_encoder.XmlEventEncoder, () => ({
    __proto__: dart.getFields(event_encoder.XmlEventEncoder.__proto__),
    entityMapping: dart.finalFieldType(entity_mapping.XmlEntityMapping)
  }));
  const ChunkedConversionSink_XmlEventVisitor$36$0 = class ChunkedConversionSink_XmlEventVisitor extends convert.ChunkedConversionSink$(core.List$(event.XmlEvent)) {};
  (ChunkedConversionSink_XmlEventVisitor$36$0.new = function() {
    ChunkedConversionSink_XmlEventVisitor$36$0.__proto__.new.call(this);
  }).prototype = ChunkedConversionSink_XmlEventVisitor$36$0.prototype;
  dart.applyMixin(ChunkedConversionSink_XmlEventVisitor$36$0, visitor.XmlEventVisitor);
  event_encoder._XmlEventEncoderSink = class _XmlEventEncoderSink extends ChunkedConversionSink_XmlEventVisitor$36$0 {
    static ['_#new#tearOff'](sink, entityMapping) {
      return new event_encoder._XmlEventEncoderSink.new(sink, entityMapping);
    }
    add(chunk) {
      T$.ListOfXmlEvent().as(chunk);
      return chunk[$forEach](dart.bind(this, 'visit'));
    }
    close() {
      return this.sink.close();
    }
    visitCDATAEvent(event) {
      this.sink.add("<![CDATA[");
      this.sink.add(event.text);
      this.sink.add("]]>");
    }
    visitCommentEvent(event) {
      this.sink.add("<!--");
      this.sink.add(event.text);
      this.sink.add("-->");
    }
    visitDeclarationEvent(event) {
      this.sink.add("<?xml");
      this.addAttributes(event.attributes);
      this.sink.add("?>");
    }
    visitDoctypeEvent(event) {
      this.sink.add("<!DOCTYPE");
      this.sink.add(" ");
      this.sink.add(event.name);
      let externalId = event.externalId;
      if (externalId != null) {
        this.sink.add(" ");
        this.sink.add(dart.toString(externalId));
      }
      let intSubset = event.internalSubset;
      if (intSubset != null) {
        this.sink.add(" ");
        this.sink.add("[");
        this.sink.add(intSubset);
        this.sink.add("]");
      }
      this.sink.add(">");
    }
    visitEndElementEvent(event) {
      this.sink.add("</");
      this.sink.add(event.name);
      this.sink.add(">");
    }
    visitProcessingEvent(event) {
      this.sink.add("<?");
      this.sink.add(event.target);
      if (event.text[$isNotEmpty]) {
        this.sink.add(" ");
        this.sink.add(event.text);
      }
      this.sink.add("?>");
    }
    visitStartElementEvent(event) {
      this.sink.add("<");
      this.sink.add(event.name);
      this.addAttributes(event.attributes);
      if (event.isSelfClosing) {
        this.sink.add("/>");
      } else {
        this.sink.add(">");
      }
    }
    visitTextEvent(event) {
      this.sink.add(this.entityMapping.encodeText(event.text));
    }
    addAttributes(attributes) {
      for (let attribute of attributes) {
        this.sink.add(" ");
        this.sink.add(attribute.name);
        this.sink.add("=");
        this.sink.add(this.entityMapping.encodeAttributeValueWithQuotes(attribute.value, attribute.attributeType));
      }
    }
  };
  (event_encoder._XmlEventEncoderSink.new = function(sink, entityMapping) {
    this.sink = sink;
    this.entityMapping = entityMapping;
    event_encoder._XmlEventEncoderSink.__proto__.new.call(this);
    ;
  }).prototype = event_encoder._XmlEventEncoderSink.prototype;
  dart.addTypeTests(event_encoder._XmlEventEncoderSink);
  dart.addTypeCaches(event_encoder._XmlEventEncoderSink);
  dart.setMethodSignature(event_encoder._XmlEventEncoderSink, () => ({
    __proto__: dart.getMethods(event_encoder._XmlEventEncoderSink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, []),
    visitCDATAEvent: dart.fnType(dart.void, [cdata.XmlCDATAEvent]),
    visitCommentEvent: dart.fnType(dart.void, [comment.XmlCommentEvent]),
    visitDeclarationEvent: dart.fnType(dart.void, [declaration.XmlDeclarationEvent]),
    visitDoctypeEvent: dart.fnType(dart.void, [doctype.XmlDoctypeEvent]),
    visitEndElementEvent: dart.fnType(dart.void, [end_element.XmlEndElementEvent]),
    visitProcessingEvent: dart.fnType(dart.void, [processing$.XmlProcessingEvent]),
    visitStartElementEvent: dart.fnType(dart.void, [start_element.XmlStartElementEvent]),
    visitTextEvent: dart.fnType(dart.void, [text$0.XmlTextEvent]),
    addAttributes: dart.fnType(dart.void, [core.List$(event_attribute.XmlEventAttribute)])
  }));
  dart.setLibraryUri(event_encoder._XmlEventEncoderSink, I[36]);
  dart.setFieldSignature(event_encoder._XmlEventEncoderSink, () => ({
    __proto__: dart.getFields(event_encoder._XmlEventEncoderSink.__proto__),
    sink: dart.finalFieldType(core.Sink$(core.String)),
    entityMapping: dart.finalFieldType(entity_mapping.XmlEntityMapping)
  }));
  event_encoder['XmlEventEncoderExtension|toXmlString'] = function XmlEventEncoderExtension$124toXmlString($this, opts) {
    let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
    return $this.transform(core.String, new event_encoder.XmlEventEncoder.new({entityMapping: entityMapping}));
  };
  event_encoder['XmlEventEncoderExtension|get#toXmlString'] = function XmlEventEncoderExtension$124get$35toXmlString($this) {
    return dart.fn(opts => {
      let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
      return event_encoder['XmlEventEncoderExtension|toXmlString']($this, {entityMapping: entityMapping});
    }, T$.__ToStreamOfString());
  };
  var text$2 = dart.privateName(text$0, "XmlTextEvent.text");
  text$0.XmlTextEvent = class XmlTextEvent extends event.XmlEvent {
    get text() {
      return this[text$2];
    }
    set text(value) {
      super.text = value;
    }
    static ['_#new#tearOff'](text) {
      return new text$0.XmlTextEvent.new(text);
    }
    get nodeType() {
      return node_type.XmlNodeType.TEXT;
    }
    accept(visitor) {
      return visitor.visitTextEvent(this);
    }
    get hashCode() {
      return core.Object.hash(this.nodeType, this.text);
    }
    _equals(other) {
      if (other == null) return false;
      return text$0.XmlTextEvent.is(other) && other.text === this.text;
    }
  };
  (text$0.XmlTextEvent.new = function(text) {
    this[text$2] = text;
    text$0.XmlTextEvent.__proto__.new.call(this);
    ;
  }).prototype = text$0.XmlTextEvent.prototype;
  dart.addTypeTests(text$0.XmlTextEvent);
  dart.addTypeCaches(text$0.XmlTextEvent);
  dart.setMethodSignature(text$0.XmlTextEvent, () => ({
    __proto__: dart.getMethods(text$0.XmlTextEvent.__proto__),
    accept: dart.fnType(dart.void, [visitor.XmlEventVisitor])
  }));
  dart.setGetterSignature(text$0.XmlTextEvent, () => ({
    __proto__: dart.getGetters(text$0.XmlTextEvent.__proto__),
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(text$0.XmlTextEvent, I[37]);
  dart.setFieldSignature(text$0.XmlTextEvent, () => ({
    __proto__: dart.getFields(text$0.XmlTextEvent.__proto__),
    text: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text$0.XmlTextEvent, ['_equals']);
  dart.defineExtensionAccessors(text$0.XmlTextEvent, ['hashCode']);
  var raw$ = dart.privateName(text$0, "XmlRawTextEvent.raw");
  var entityMapping$4 = dart.privateName(text$0, "XmlRawTextEvent.entityMapping");
  var __XmlRawTextEvent_text = dart.privateName(text$0, "_#XmlRawTextEvent#text");
  text$0.XmlRawTextEvent = class XmlRawTextEvent extends event.XmlEvent {
    get raw() {
      return this[raw$];
    }
    set raw(value) {
      super.raw = value;
    }
    get entityMapping() {
      return this[entityMapping$4];
    }
    set entityMapping(value) {
      super.entityMapping = value;
    }
    static ['_#new#tearOff'](raw, entityMapping) {
      return new text$0.XmlRawTextEvent.new(raw, entityMapping);
    }
    get text() {
      let t25, t24;
      t24 = this[__XmlRawTextEvent_text];
      return t24 == null ? (t25 = this.entityMapping.decode(this.raw), this[__XmlRawTextEvent_text] == null ? this[__XmlRawTextEvent_text] = t25 : dart.throw(new _internal.LateError.fieldADI("text"))) : t24;
    }
    get nodeType() {
      return node_type.XmlNodeType.TEXT;
    }
    accept(visitor) {
      return visitor.visitTextEvent(this);
    }
    get hashCode() {
      return core.Object.hash(this.nodeType, this.text);
    }
    _equals(other) {
      if (other == null) return false;
      return text$0.XmlTextEvent.is(other) && other.text === this.text;
    }
  };
  (text$0.XmlRawTextEvent.new = function(raw, entityMapping) {
    this[__XmlRawTextEvent_text] = null;
    this[raw$] = raw;
    this[entityMapping$4] = entityMapping;
    text$0.XmlRawTextEvent.__proto__.new.call(this);
    ;
  }).prototype = text$0.XmlRawTextEvent.prototype;
  dart.addTypeTests(text$0.XmlRawTextEvent);
  dart.addTypeCaches(text$0.XmlRawTextEvent);
  text$0.XmlRawTextEvent[dart.implements] = () => [text$0.XmlTextEvent];
  dart.setMethodSignature(text$0.XmlRawTextEvent, () => ({
    __proto__: dart.getMethods(text$0.XmlRawTextEvent.__proto__),
    accept: dart.fnType(dart.void, [visitor.XmlEventVisitor])
  }));
  dart.setGetterSignature(text$0.XmlRawTextEvent, () => ({
    __proto__: dart.getGetters(text$0.XmlRawTextEvent.__proto__),
    text: core.String,
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(text$0.XmlRawTextEvent, I[37]);
  dart.setFieldSignature(text$0.XmlRawTextEvent, () => ({
    __proto__: dart.getFields(text$0.XmlRawTextEvent.__proto__),
    raw: dart.finalFieldType(core.String),
    entityMapping: dart.finalFieldType(entity_mapping.XmlEntityMapping),
    [__XmlRawTextEvent_text]: dart.fieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(text$0.XmlRawTextEvent, ['_equals']);
  dart.defineExtensionAccessors(text$0.XmlRawTextEvent, ['hashCode']);
  var target$0 = dart.privateName(processing$, "XmlProcessingEvent.target");
  var text$3 = dart.privateName(processing$, "XmlProcessingEvent.text");
  processing$.XmlProcessingEvent = class XmlProcessingEvent extends event.XmlEvent {
    get target() {
      return this[target$0];
    }
    set target(value) {
      super.target = value;
    }
    get text() {
      return this[text$3];
    }
    set text(value) {
      super.text = value;
    }
    static ['_#new#tearOff'](target, text) {
      return new processing$.XmlProcessingEvent.new(target, text);
    }
    get nodeType() {
      return node_type.XmlNodeType.PROCESSING;
    }
    accept(visitor) {
      return visitor.visitProcessingEvent(this);
    }
    get hashCode() {
      return core.Object.hash(this.nodeType, this.text, this.target);
    }
    _equals(other) {
      if (other == null) return false;
      return processing$.XmlProcessingEvent.is(other) && other.target === this.target && other.text === this.text;
    }
  };
  (processing$.XmlProcessingEvent.new = function(target, text) {
    this[target$0] = target;
    this[text$3] = text;
    processing$.XmlProcessingEvent.__proto__.new.call(this);
    ;
  }).prototype = processing$.XmlProcessingEvent.prototype;
  dart.addTypeTests(processing$.XmlProcessingEvent);
  dart.addTypeCaches(processing$.XmlProcessingEvent);
  dart.setMethodSignature(processing$.XmlProcessingEvent, () => ({
    __proto__: dart.getMethods(processing$.XmlProcessingEvent.__proto__),
    accept: dart.fnType(dart.void, [visitor.XmlEventVisitor])
  }));
  dart.setGetterSignature(processing$.XmlProcessingEvent, () => ({
    __proto__: dart.getGetters(processing$.XmlProcessingEvent.__proto__),
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(processing$.XmlProcessingEvent, I[38]);
  dart.setFieldSignature(processing$.XmlProcessingEvent, () => ({
    __proto__: dart.getFields(processing$.XmlProcessingEvent.__proto__),
    target: dart.finalFieldType(core.String),
    text: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(processing$.XmlProcessingEvent, ['_equals']);
  dart.defineExtensionAccessors(processing$.XmlProcessingEvent, ['hashCode']);
  var name$0 = dart.privateName(end_element, "XmlEndElementEvent.name");
  named.XmlNamed = class XmlNamed extends core.Object {};
  named.XmlNamed[dart.mixinOn] = Object => class XmlNamed extends Object {
    get qualifiedName() {
      return this.name;
    }
    get namespacePrefix() {
      let index = this.name[$indexOf](":");
      return index > 0 ? this.name[$substring](0, index) : null;
    }
    get namespaceUri() {
      let index = this.name[$indexOf](":");
      let prefix = index < 0 ? null : "xmlns";
      let local = index < 0 ? "xmlns" : this.name[$substring](0, index);
      let start = start_element.XmlStartElementEvent.is(this) ? start_element.XmlStartElementEvent.as(this) : this.parent;
      for (let event = start; event != null; event = event.parent) {
        for (let attribute of event.attributes) {
          if (attribute.namespacePrefix == prefix && attribute.localName === local) {
            return attribute.value;
          }
        }
      }
      return null;
    }
    get localName() {
      let index = this.name[$indexOf](":");
      return index > 0 ? this.name[$substring](index + 1) : this.name;
    }
  };
  (named.XmlNamed[dart.mixinNew] = function() {
  }).prototype = named.XmlNamed.prototype;
  dart.addTypeTests(named.XmlNamed);
  dart.addTypeCaches(named.XmlNamed);
  named.XmlNamed[dart.implements] = () => [has_parent.XmlHasParent, core.Object];
  dart.setGetterSignature(named.XmlNamed, () => ({
    __proto__: dart.getGetters(named.XmlNamed.__proto__),
    qualifiedName: core.String,
    namespacePrefix: dart.nullable(core.String),
    namespaceUri: dart.nullable(core.String),
    localName: core.String
  }));
  dart.setLibraryUri(named.XmlNamed, I[39]);
  const XmlEvent_XmlNamed$36 = class XmlEvent_XmlNamed extends event.XmlEvent {};
  (XmlEvent_XmlNamed$36.new = function() {
    XmlEvent_XmlNamed$36.__proto__.new.call(this);
  }).prototype = XmlEvent_XmlNamed$36.prototype;
  dart.applyMixin(XmlEvent_XmlNamed$36, named.XmlNamed);
  end_element.XmlEndElementEvent = class XmlEndElementEvent extends XmlEvent_XmlNamed$36 {
    get name() {
      return this[name$0];
    }
    set name(value) {
      super.name = value;
    }
    static ['_#new#tearOff'](name) {
      return new end_element.XmlEndElementEvent.new(name);
    }
    get nodeType() {
      return node_type.XmlNodeType.ELEMENT;
    }
    accept(visitor) {
      return visitor.visitEndElementEvent(this);
    }
    get hashCode() {
      return core.Object.hash(this.nodeType, this.name);
    }
    _equals(other) {
      if (other == null) return false;
      return end_element.XmlEndElementEvent.is(other) && other.name === this.name;
    }
  };
  (end_element.XmlEndElementEvent.new = function(name) {
    this[name$0] = name;
    end_element.XmlEndElementEvent.__proto__.new.call(this);
    ;
  }).prototype = end_element.XmlEndElementEvent.prototype;
  dart.addTypeTests(end_element.XmlEndElementEvent);
  dart.addTypeCaches(end_element.XmlEndElementEvent);
  dart.setMethodSignature(end_element.XmlEndElementEvent, () => ({
    __proto__: dart.getMethods(end_element.XmlEndElementEvent.__proto__),
    accept: dart.fnType(dart.void, [visitor.XmlEventVisitor])
  }));
  dart.setGetterSignature(end_element.XmlEndElementEvent, () => ({
    __proto__: dart.getGetters(end_element.XmlEndElementEvent.__proto__),
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(end_element.XmlEndElementEvent, I[40]);
  dart.setFieldSignature(end_element.XmlEndElementEvent, () => ({
    __proto__: dart.getFields(end_element.XmlEndElementEvent.__proto__),
    name: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(end_element.XmlEndElementEvent, ['_equals']);
  dart.defineExtensionAccessors(end_element.XmlEndElementEvent, ['hashCode']);
  var name$1 = dart.privateName(doctype, "XmlDoctypeEvent.name");
  var externalId$ = dart.privateName(doctype, "XmlDoctypeEvent.externalId");
  var internalSubset$ = dart.privateName(doctype, "XmlDoctypeEvent.internalSubset");
  doctype.XmlDoctypeEvent = class XmlDoctypeEvent extends event.XmlEvent {
    get name() {
      return this[name$1];
    }
    set name(value) {
      super.name = value;
    }
    get externalId() {
      return this[externalId$];
    }
    set externalId(value) {
      super.externalId = value;
    }
    get internalSubset() {
      return this[internalSubset$];
    }
    set internalSubset(value) {
      super.internalSubset = value;
    }
    static ['_#new#tearOff'](name, externalId = null, internalSubset = null) {
      return new doctype.XmlDoctypeEvent.new(name, externalId, internalSubset);
    }
    get nodeType() {
      return node_type.XmlNodeType.DOCUMENT_TYPE;
    }
    accept(visitor) {
      return visitor.visitDoctypeEvent(this);
    }
    get hashCode() {
      return core.Object.hash(this.nodeType, this.name, this.externalId, this.internalSubset);
    }
    _equals(other) {
      if (other == null) return false;
      return doctype.XmlDoctypeEvent.is(other) && this.name === other.name && dart.equals(this.externalId, other.externalId) && this.internalSubset == other.internalSubset;
    }
  };
  (doctype.XmlDoctypeEvent.new = function(name, externalId = null, internalSubset = null) {
    this[name$1] = name;
    this[externalId$] = externalId;
    this[internalSubset$] = internalSubset;
    doctype.XmlDoctypeEvent.__proto__.new.call(this);
    ;
  }).prototype = doctype.XmlDoctypeEvent.prototype;
  dart.addTypeTests(doctype.XmlDoctypeEvent);
  dart.addTypeCaches(doctype.XmlDoctypeEvent);
  dart.setMethodSignature(doctype.XmlDoctypeEvent, () => ({
    __proto__: dart.getMethods(doctype.XmlDoctypeEvent.__proto__),
    accept: dart.fnType(dart.void, [visitor.XmlEventVisitor])
  }));
  dart.setGetterSignature(doctype.XmlDoctypeEvent, () => ({
    __proto__: dart.getGetters(doctype.XmlDoctypeEvent.__proto__),
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(doctype.XmlDoctypeEvent, I[41]);
  dart.setFieldSignature(doctype.XmlDoctypeEvent, () => ({
    __proto__: dart.getFields(doctype.XmlDoctypeEvent.__proto__),
    name: dart.finalFieldType(core.String),
    externalId: dart.finalFieldType(dart.nullable(external_id.DtdExternalId)),
    internalSubset: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(doctype.XmlDoctypeEvent, ['_equals']);
  dart.defineExtensionAccessors(doctype.XmlDoctypeEvent, ['hashCode']);
  var attributes$ = dart.privateName(declaration, "XmlDeclarationEvent.attributes");
  var ListEquality__elementEquality = dart.privateName(equality, "ListEquality._elementEquality");
  declaration.XmlDeclarationEvent = class XmlDeclarationEvent extends event.XmlEvent {
    get attributes() {
      return this[attributes$];
    }
    set attributes(value) {
      super.attributes = value;
    }
    static ['_#new#tearOff'](attributes) {
      return new declaration.XmlDeclarationEvent.new(attributes);
    }
    get nodeType() {
      return node_type.XmlNodeType.DECLARATION;
    }
    accept(visitor) {
      return visitor.visitDeclarationEvent(this);
    }
    get hashCode() {
      return core.Object.hash(this.nodeType, (C[21] || CT.C21).hash(this.attributes));
    }
    _equals(other) {
      if (other == null) return false;
      return declaration.XmlDeclarationEvent.is(other) && (C[21] || CT.C21).equals(other.attributes, this.attributes);
    }
  };
  (declaration.XmlDeclarationEvent.new = function(attributes) {
    this[attributes$] = attributes;
    declaration.XmlDeclarationEvent.__proto__.new.call(this);
    ;
  }).prototype = declaration.XmlDeclarationEvent.prototype;
  dart.addTypeTests(declaration.XmlDeclarationEvent);
  dart.addTypeCaches(declaration.XmlDeclarationEvent);
  dart.setMethodSignature(declaration.XmlDeclarationEvent, () => ({
    __proto__: dart.getMethods(declaration.XmlDeclarationEvent.__proto__),
    accept: dart.fnType(dart.void, [visitor.XmlEventVisitor])
  }));
  dart.setGetterSignature(declaration.XmlDeclarationEvent, () => ({
    __proto__: dart.getGetters(declaration.XmlDeclarationEvent.__proto__),
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(declaration.XmlDeclarationEvent, I[42]);
  dart.setFieldSignature(declaration.XmlDeclarationEvent, () => ({
    __proto__: dart.getFields(declaration.XmlDeclarationEvent.__proto__),
    attributes: dart.finalFieldType(core.List$(event_attribute.XmlEventAttribute))
  }));
  dart.defineExtensionMethods(declaration.XmlDeclarationEvent, ['_equals']);
  dart.defineExtensionAccessors(declaration.XmlDeclarationEvent, ['hashCode']);
  var text$4 = dart.privateName(comment, "XmlCommentEvent.text");
  comment.XmlCommentEvent = class XmlCommentEvent extends event.XmlEvent {
    get text() {
      return this[text$4];
    }
    set text(value) {
      super.text = value;
    }
    static ['_#new#tearOff'](text) {
      return new comment.XmlCommentEvent.new(text);
    }
    get nodeType() {
      return node_type.XmlNodeType.COMMENT;
    }
    accept(visitor) {
      return visitor.visitCommentEvent(this);
    }
    get hashCode() {
      return core.Object.hash(this.nodeType, this.text);
    }
    _equals(other) {
      if (other == null) return false;
      return comment.XmlCommentEvent.is(other) && other.text === this.text;
    }
  };
  (comment.XmlCommentEvent.new = function(text) {
    this[text$4] = text;
    comment.XmlCommentEvent.__proto__.new.call(this);
    ;
  }).prototype = comment.XmlCommentEvent.prototype;
  dart.addTypeTests(comment.XmlCommentEvent);
  dart.addTypeCaches(comment.XmlCommentEvent);
  dart.setMethodSignature(comment.XmlCommentEvent, () => ({
    __proto__: dart.getMethods(comment.XmlCommentEvent.__proto__),
    accept: dart.fnType(dart.void, [visitor.XmlEventVisitor])
  }));
  dart.setGetterSignature(comment.XmlCommentEvent, () => ({
    __proto__: dart.getGetters(comment.XmlCommentEvent.__proto__),
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(comment.XmlCommentEvent, I[43]);
  dart.setFieldSignature(comment.XmlCommentEvent, () => ({
    __proto__: dart.getFields(comment.XmlCommentEvent.__proto__),
    text: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(comment.XmlCommentEvent, ['_equals']);
  dart.defineExtensionAccessors(comment.XmlCommentEvent, ['hashCode']);
  var text$5 = dart.privateName(cdata, "XmlCDATAEvent.text");
  cdata.XmlCDATAEvent = class XmlCDATAEvent extends event.XmlEvent {
    get text() {
      return this[text$5];
    }
    set text(value) {
      super.text = value;
    }
    static ['_#new#tearOff'](text) {
      return new cdata.XmlCDATAEvent.new(text);
    }
    get nodeType() {
      return node_type.XmlNodeType.CDATA;
    }
    accept(visitor) {
      return visitor.visitCDATAEvent(this);
    }
    get hashCode() {
      return core.Object.hash(this.nodeType, this.text);
    }
    _equals(other) {
      if (other == null) return false;
      return cdata.XmlCDATAEvent.is(other) && other.text === this.text;
    }
  };
  (cdata.XmlCDATAEvent.new = function(text) {
    this[text$5] = text;
    cdata.XmlCDATAEvent.__proto__.new.call(this);
    ;
  }).prototype = cdata.XmlCDATAEvent.prototype;
  dart.addTypeTests(cdata.XmlCDATAEvent);
  dart.addTypeCaches(cdata.XmlCDATAEvent);
  dart.setMethodSignature(cdata.XmlCDATAEvent, () => ({
    __proto__: dart.getMethods(cdata.XmlCDATAEvent.__proto__),
    accept: dart.fnType(dart.void, [visitor.XmlEventVisitor])
  }));
  dart.setGetterSignature(cdata.XmlCDATAEvent, () => ({
    __proto__: dart.getGetters(cdata.XmlCDATAEvent.__proto__),
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(cdata.XmlCDATAEvent, I[44]);
  dart.setFieldSignature(cdata.XmlCDATAEvent, () => ({
    __proto__: dart.getFields(cdata.XmlCDATAEvent.__proto__),
    text: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(cdata.XmlCDATAEvent, ['_equals']);
  dart.defineExtensionAccessors(cdata.XmlCDATAEvent, ['hashCode']);
  var name$2 = dart.privateName(event_attribute, "XmlEventAttribute.name");
  var value$ = dart.privateName(event_attribute, "XmlEventAttribute.value");
  var attributeType$ = dart.privateName(event_attribute, "XmlEventAttribute.attributeType");
  const Object_XmlNamed$36 = class Object_XmlNamed extends core.Object {};
  (Object_XmlNamed$36.new = function() {
  }).prototype = Object_XmlNamed$36.prototype;
  dart.applyMixin(Object_XmlNamed$36, named.XmlNamed);
  const Object_XmlHasParent$36$0 = class Object_XmlHasParent extends Object_XmlNamed$36 {};
  (Object_XmlHasParent$36$0.new = function() {
    has_parent.XmlHasParent[dart.mixinNew].call(this);
  }).prototype = Object_XmlHasParent$36$0.prototype;
  dart.applyMixin(Object_XmlHasParent$36$0, has_parent.XmlHasParent);
  event_attribute.XmlEventAttribute = class XmlEventAttribute extends Object_XmlHasParent$36$0 {
    get name() {
      return this[name$2];
    }
    set name(value) {
      super.name = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    get attributeType() {
      return this[attributeType$];
    }
    set attributeType(value) {
      super.attributeType = value;
    }
    static ['_#new#tearOff'](name, value, attributeType) {
      return new event_attribute.XmlEventAttribute.new(name, value, attributeType);
    }
    get hashCode() {
      return core.Object.hash(this.name, this.value, this.attributeType);
    }
    _equals(other) {
      if (other == null) return false;
      return event_attribute.XmlEventAttribute.is(other) && other.name === this.name && other.value === this.value && other.attributeType === this.attributeType;
    }
  };
  (event_attribute.XmlEventAttribute.new = function(name, value, attributeType) {
    this[name$2] = name;
    this[value$] = value;
    this[attributeType$] = attributeType;
    event_attribute.XmlEventAttribute.__proto__.new.call(this);
    ;
  }).prototype = event_attribute.XmlEventAttribute.prototype;
  dart.addTypeTests(event_attribute.XmlEventAttribute);
  dart.addTypeCaches(event_attribute.XmlEventAttribute);
  dart.setLibraryUri(event_attribute.XmlEventAttribute, I[45]);
  dart.setFieldSignature(event_attribute.XmlEventAttribute, () => ({
    __proto__: dart.getFields(event_attribute.XmlEventAttribute.__proto__),
    name: dart.finalFieldType(core.String),
    value: dart.finalFieldType(core.String),
    attributeType: dart.finalFieldType(attribute_type.XmlAttributeType)
  }));
  dart.defineExtensionMethods(event_attribute.XmlEventAttribute, ['_equals']);
  dart.defineExtensionAccessors(event_attribute.XmlEventAttribute, ['hashCode']);
  var name$3 = dart.privateName(start_element, "XmlStartElementEvent.name");
  var attributes$0 = dart.privateName(start_element, "XmlStartElementEvent.attributes");
  var isSelfClosing$ = dart.privateName(start_element, "XmlStartElementEvent.isSelfClosing");
  const XmlEvent_XmlNamed$36$ = class XmlEvent_XmlNamed extends event.XmlEvent {};
  (XmlEvent_XmlNamed$36$.new = function() {
    XmlEvent_XmlNamed$36$.__proto__.new.call(this);
  }).prototype = XmlEvent_XmlNamed$36$.prototype;
  dart.applyMixin(XmlEvent_XmlNamed$36$, named.XmlNamed);
  start_element.XmlStartElementEvent = class XmlStartElementEvent extends XmlEvent_XmlNamed$36$ {
    get name() {
      return this[name$3];
    }
    set name(value) {
      super.name = value;
    }
    get attributes() {
      return this[attributes$0];
    }
    set attributes(value) {
      super.attributes = value;
    }
    get isSelfClosing() {
      return this[isSelfClosing$];
    }
    set isSelfClosing(value) {
      super.isSelfClosing = value;
    }
    static ['_#new#tearOff'](name, attributes, isSelfClosing) {
      return new start_element.XmlStartElementEvent.new(name, attributes, isSelfClosing);
    }
    get nodeType() {
      return node_type.XmlNodeType.ELEMENT;
    }
    accept(visitor) {
      return visitor.visitStartElementEvent(this);
    }
    get hashCode() {
      return core.Object.hash(this.nodeType, this.name, this.isSelfClosing, (C[21] || CT.C21).hash(this.attributes));
    }
    _equals(other) {
      if (other == null) return false;
      return start_element.XmlStartElementEvent.is(other) && other.name === this.name && other.isSelfClosing === this.isSelfClosing && (C[21] || CT.C21).equals(other.attributes, this.attributes);
    }
  };
  (start_element.XmlStartElementEvent.new = function(name, attributes, isSelfClosing) {
    this[name$3] = name;
    this[attributes$0] = attributes;
    this[isSelfClosing$] = isSelfClosing;
    start_element.XmlStartElementEvent.__proto__.new.call(this);
    ;
  }).prototype = start_element.XmlStartElementEvent.prototype;
  dart.addTypeTests(start_element.XmlStartElementEvent);
  dart.addTypeCaches(start_element.XmlStartElementEvent);
  dart.setMethodSignature(start_element.XmlStartElementEvent, () => ({
    __proto__: dart.getMethods(start_element.XmlStartElementEvent.__proto__),
    accept: dart.fnType(dart.void, [visitor.XmlEventVisitor])
  }));
  dart.setGetterSignature(start_element.XmlStartElementEvent, () => ({
    __proto__: dart.getGetters(start_element.XmlStartElementEvent.__proto__),
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(start_element.XmlStartElementEvent, I[46]);
  dart.setFieldSignature(start_element.XmlStartElementEvent, () => ({
    __proto__: dart.getFields(start_element.XmlStartElementEvent.__proto__),
    name: dart.finalFieldType(core.String),
    attributes: dart.finalFieldType(core.List$(event_attribute.XmlEventAttribute)),
    isSelfClosing: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(start_element.XmlStartElementEvent, ['_equals']);
  dart.defineExtensionAccessors(start_element.XmlStartElementEvent, ['hashCode']);
  xml_events.parseEvents = function parseEvents(input, opts) {
    let t24;
    let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
    let validateNesting = opts && 'validateNesting' in opts ? opts.validateNesting : false;
    let validateDocument = opts && 'validateDocument' in opts ? opts.validateDocument : false;
    let withBuffer = opts && 'withBuffer' in opts ? opts.withBuffer : false;
    let withLocation = opts && 'withLocation' in opts ? opts.withLocation : false;
    let withParent = opts && 'withParent' in opts ? opts.withParent : false;
    return new iterable.XmlEventIterable.new(input, {entityMapping: (t24 = entityMapping, t24 == null ? default_mapping.defaultEntityMapping : t24), validateNesting: validateNesting, validateDocument: validateDocument, withBuffer: withBuffer, withLocation: withLocation, withParent: withParent});
  };
  const XmlNode_XmlHasChildren$36$ = class XmlNode_XmlHasChildren extends node.XmlNode {};
  (XmlNode_XmlHasChildren$36$.new = function() {
    has_children.XmlHasChildren$(node.XmlNode)[dart.mixinNew].call(this);
  }).prototype = XmlNode_XmlHasChildren$36$.prototype;
  dart.applyMixin(XmlNode_XmlHasChildren$36$, has_children.XmlHasChildren$(node.XmlNode));
  document.XmlDocument = class XmlDocument extends XmlNode_XmlHasChildren$36$ {
    static parse(input, opts) {
      let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
      let events = xml_events.parseEvents(input, {entityMapping: entityMapping, validateNesting: true, validateDocument: true});
      return new document.XmlDocument.new(new node_decoder.XmlNodeDecoder.new().convertIterable(events));
    }
    static ['_#parse#tearOff'](input, opts) {
      let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
      return document.XmlDocument.parse(input, {entityMapping: entityMapping});
    }
    static ['_#new#tearOff'](childrenIterable = C[2] || CT.C2) {
      return new document.XmlDocument.new(childrenIterable);
    }
    get declaration() {
      for (let node of this.children) {
        if (declaration$.XmlDeclaration.is(node)) {
          return node;
        }
      }
      return null;
    }
    get doctypeElement() {
      for (let node of this.children) {
        if (doctype$.XmlDoctype.is(node)) {
          return node;
        }
      }
      return null;
    }
    get rootElement() {
      for (let node of this.children) {
        if (element$.XmlElement.is(node)) {
          return node;
        }
      }
      dart.throw(new core.StateError.new("Empty XML document"));
    }
    get nodeType() {
      return node_type.XmlNodeType.DOCUMENT;
    }
    copy() {
      return new document.XmlDocument.new(this.children.map(node.XmlNode, dart.fn(each => each.copy(), T$.XmlNodeToXmlNode())));
    }
    accept(visitor) {
      return visitor.visitDocument(this);
    }
  };
  (document.XmlDocument.new = function(childrenIterable = C[2] || CT.C2) {
    document.XmlDocument.__proto__.new.call(this);
    this.children.initialize(this, document.childrenNodeTypes);
    this.children.addAll(childrenIterable);
  }).prototype = document.XmlDocument.prototype;
  dart.addTypeTests(document.XmlDocument);
  dart.addTypeCaches(document.XmlDocument);
  dart.setMethodSignature(document.XmlDocument, () => ({
    __proto__: dart.getMethods(document.XmlDocument.__proto__),
    copy: dart.fnType(document.XmlDocument, []),
    accept: dart.fnType(dart.void, [visitor$.XmlVisitor])
  }));
  dart.setStaticMethodSignature(document.XmlDocument, () => ['parse']);
  dart.setGetterSignature(document.XmlDocument, () => ({
    __proto__: dart.getGetters(document.XmlDocument.__proto__),
    declaration: dart.nullable(declaration$.XmlDeclaration),
    doctypeElement: dart.nullable(doctype$.XmlDoctype),
    rootElement: element$.XmlElement,
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(document.XmlDocument, I[47]);
  dart.defineLazy(document, {
    /*document.childrenNodeTypes*/get childrenNodeTypes() {
      return C[5] || CT.C5;
    }
  }, false);
  var name$4 = dart.privateName(doctype$, "XmlDoctype.name");
  var externalId$0 = dart.privateName(doctype$, "XmlDoctype.externalId");
  var internalSubset$0 = dart.privateName(doctype$, "XmlDoctype.internalSubset");
  const XmlNode_XmlHasParent$36$ = class XmlNode_XmlHasParent extends node.XmlNode {};
  (XmlNode_XmlHasParent$36$.new = function() {
    has_parent$.XmlHasParent$(node.XmlNode)[dart.mixinNew].call(this);
  }).prototype = XmlNode_XmlHasParent$36$.prototype;
  dart.applyMixin(XmlNode_XmlHasParent$36$, has_parent$.XmlHasParent$(node.XmlNode));
  doctype$.XmlDoctype = class XmlDoctype extends XmlNode_XmlHasParent$36$ {
    get name() {
      return this[name$4];
    }
    set name(value) {
      super.name = value;
    }
    get externalId() {
      return this[externalId$0];
    }
    set externalId(value) {
      super.externalId = value;
    }
    get internalSubset() {
      return this[internalSubset$0];
    }
    set internalSubset(value) {
      super.internalSubset = value;
    }
    static ['_#new#tearOff'](name, externalId = null, internalSubset = null) {
      return new doctype$.XmlDoctype.new(name, externalId, internalSubset);
    }
    get nodeType() {
      return node_type.XmlNodeType.DOCUMENT_TYPE;
    }
    copy() {
      return new doctype$.XmlDoctype.new(this.name, this.externalId, this.internalSubset);
    }
    accept(visitor) {
      return visitor.visitDoctype(this);
    }
  };
  (doctype$.XmlDoctype.new = function(name, externalId = null, internalSubset = null) {
    this[name$4] = name;
    this[externalId$0] = externalId;
    this[internalSubset$0] = internalSubset;
    doctype$.XmlDoctype.__proto__.new.call(this);
    ;
  }).prototype = doctype$.XmlDoctype.prototype;
  dart.addTypeTests(doctype$.XmlDoctype);
  dart.addTypeCaches(doctype$.XmlDoctype);
  dart.setMethodSignature(doctype$.XmlDoctype, () => ({
    __proto__: dart.getMethods(doctype$.XmlDoctype.__proto__),
    copy: dart.fnType(doctype$.XmlDoctype, []),
    accept: dart.fnType(dart.void, [visitor$.XmlVisitor])
  }));
  dart.setGetterSignature(doctype$.XmlDoctype, () => ({
    __proto__: dart.getGetters(doctype$.XmlDoctype.__proto__),
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(doctype$.XmlDoctype, I[48]);
  dart.setFieldSignature(doctype$.XmlDoctype, () => ({
    __proto__: dart.getFields(doctype$.XmlDoctype.__proto__),
    name: dart.finalFieldType(core.String),
    externalId: dart.finalFieldType(dart.nullable(external_id.DtdExternalId)),
    internalSubset: dart.finalFieldType(dart.nullable(core.String))
  }));
  var attributes = dart.privateName(has_attributes, "XmlHasAttributes.attributes");
  has_attributes.XmlHasAttributes = class XmlHasAttributes extends core.Object {};
  has_attributes.XmlHasAttributes[dart.mixinOn] = Object => class XmlHasAttributes extends Object {
    get attributes() {
      return this[attributes];
    }
    set attributes(value) {
      super.attributes = value;
    }
    getAttribute(name, opts) {
      let t24;
      let namespace = opts && 'namespace' in opts ? opts.namespace : null;
      t24 = this.getAttributeNode(name, {namespace: namespace});
      return t24 == null ? null : t24.value;
    }
    getAttributeNode(name, opts) {
      let namespace = opts && 'namespace' in opts ? opts.namespace : null;
      let tester = name_matcher.createNameMatcher(name, namespace);
      for (let attribute of this.attributes) {
        if (tester(attribute)) {
          return attribute;
        }
      }
      return null;
    }
    setAttribute(name, value, opts) {
      let namespace = opts && 'namespace' in opts ? opts.namespace : null;
      let index = this.attributes.indexWhere(name_matcher.createNameMatcher(name, namespace));
      if (index < 0) {
        if (value != null) {
          let prefix = namespace == null ? null : namespace$.lookupNamespacePrefix(T$.XmlNodeN().as(this), namespace);
          this.attributes.add(new attribute$.XmlAttribute.new(name$.XmlName.new(name, prefix), value));
        }
      } else {
        if (value != null) {
          this.attributes._get(index).value = value;
        } else {
          this.attributes.removeAt(index);
        }
      }
    }
  };
  (has_attributes.XmlHasAttributes[dart.mixinNew] = function() {
    this[attributes] = new (T$.XmlNodeListOfXmlAttribute()).new();
  }).prototype = has_attributes.XmlHasAttributes.prototype;
  dart.addTypeTests(has_attributes.XmlHasAttributes);
  dart.addTypeCaches(has_attributes.XmlHasAttributes);
  has_attributes.XmlHasAttributes[dart.implements] = () => [has_attributes.XmlAttributesBase, core.Object];
  dart.setMethodSignature(has_attributes.XmlHasAttributes, () => ({
    __proto__: dart.getMethods(has_attributes.XmlHasAttributes.__proto__),
    getAttribute: dart.fnType(dart.nullable(core.String), [core.String], {namespace: dart.nullable(core.String)}, {}),
    getAttributeNode: dart.fnType(dart.nullable(attribute$.XmlAttribute), [core.String], {namespace: dart.nullable(core.String)}, {}),
    setAttribute: dart.fnType(dart.void, [core.String, dart.nullable(core.String)], {namespace: dart.nullable(core.String)}, {})
  }));
  dart.setLibraryUri(has_attributes.XmlHasAttributes, I[3]);
  dart.setFieldSignature(has_attributes.XmlHasAttributes, () => ({
    __proto__: dart.getFields(has_attributes.XmlHasAttributes.__proto__),
    attributes: dart.finalFieldType(node_list.XmlNodeList$(attribute$.XmlAttribute))
  }));
  const XmlNode_XmlHasParent$36$0 = class XmlNode_XmlHasParent extends node.XmlNode {};
  (XmlNode_XmlHasParent$36$0.new = function() {
    has_parent$.XmlHasParent$(node.XmlNode)[dart.mixinNew].call(this);
  }).prototype = XmlNode_XmlHasParent$36$0.prototype;
  dart.applyMixin(XmlNode_XmlHasParent$36$0, has_parent$.XmlHasParent$(node.XmlNode));
  const XmlNode_XmlHasAttributes$36 = class XmlNode_XmlHasAttributes extends XmlNode_XmlHasParent$36$0 {};
  (XmlNode_XmlHasAttributes$36.new = function() {
    has_attributes.XmlHasAttributes[dart.mixinNew].call(this);
    XmlNode_XmlHasAttributes$36.__proto__.new.call(this);
  }).prototype = XmlNode_XmlHasAttributes$36.prototype;
  dart.applyMixin(XmlNode_XmlHasAttributes$36, has_attributes.XmlHasAttributes);
  declaration$.XmlDeclaration = class XmlDeclaration extends XmlNode_XmlHasAttributes$36 {
    static ['_#new#tearOff'](attributesIterable = C[1] || CT.C1) {
      return new declaration$.XmlDeclaration.new(attributesIterable);
    }
    get version() {
      return this.getAttribute("version");
    }
    set version(value) {
      return this.setAttribute("version", value);
    }
    get encoding() {
      return this.getAttribute("encoding");
    }
    set encoding(value) {
      return this.setAttribute("encoding", value);
    }
    get standalone() {
      return this.getAttribute("standalone") === "yes";
    }
    set standalone(value) {
      return this.setAttribute("standalone", value == null ? null : dart.test(value) ? "yes" : "no");
    }
    get nodeType() {
      return node_type.XmlNodeType.DECLARATION;
    }
    copy() {
      return new declaration$.XmlDeclaration.new(this.attributes.map(attribute$.XmlAttribute, dart.fn(each => each.copy(), T$.XmlAttributeToXmlAttribute())));
    }
    accept(visitor) {
      return visitor.visitDeclaration(this);
    }
  };
  (declaration$.XmlDeclaration.new = function(attributesIterable = C[1] || CT.C1) {
    declaration$.XmlDeclaration.__proto__.new.call(this);
    this.attributes.initialize(this, declaration$.attributeNodeTypes);
    this.attributes.addAll(attributesIterable);
  }).prototype = declaration$.XmlDeclaration.prototype;
  dart.addTypeTests(declaration$.XmlDeclaration);
  dart.addTypeCaches(declaration$.XmlDeclaration);
  dart.setMethodSignature(declaration$.XmlDeclaration, () => ({
    __proto__: dart.getMethods(declaration$.XmlDeclaration.__proto__),
    copy: dart.fnType(declaration$.XmlDeclaration, []),
    accept: dart.fnType(dart.void, [visitor$.XmlVisitor])
  }));
  dart.setGetterSignature(declaration$.XmlDeclaration, () => ({
    __proto__: dart.getGetters(declaration$.XmlDeclaration.__proto__),
    version: dart.nullable(core.String),
    encoding: dart.nullable(core.String),
    standalone: core.bool,
    nodeType: node_type.XmlNodeType
  }));
  dart.setSetterSignature(declaration$.XmlDeclaration, () => ({
    __proto__: dart.getSetters(declaration$.XmlDeclaration.__proto__),
    version: dart.nullable(core.String),
    encoding: dart.nullable(core.String),
    standalone: dart.nullable(core.bool)
  }));
  dart.setLibraryUri(declaration$.XmlDeclaration, I[49]);
  dart.defineLazy(declaration$, {
    /*declaration$.attributeNodeTypes*/get attributeNodeTypes() {
      return C[23] || CT.C23;
    },
    /*declaration$.versionAttribute*/get versionAttribute() {
      return "version";
    },
    /*declaration$.encodingAttribute*/get encodingAttribute() {
      return "encoding";
    },
    /*declaration$.standaloneAttribute*/get standaloneAttribute() {
      return "standalone";
    }
  }, false);
  comment$.XmlComment = class XmlComment extends data.XmlData {
    static ['_#new#tearOff'](text) {
      return new comment$.XmlComment.new(text);
    }
    get nodeType() {
      return node_type.XmlNodeType.COMMENT;
    }
    copy() {
      return new comment$.XmlComment.new(this.text);
    }
    accept(visitor) {
      return visitor.visitComment(this);
    }
  };
  (comment$.XmlComment.new = function(text) {
    comment$.XmlComment.__proto__.new.call(this, text);
    ;
  }).prototype = comment$.XmlComment.prototype;
  dart.addTypeTests(comment$.XmlComment);
  dart.addTypeCaches(comment$.XmlComment);
  dart.setMethodSignature(comment$.XmlComment, () => ({
    __proto__: dart.getMethods(comment$.XmlComment.__proto__),
    copy: dart.fnType(comment$.XmlComment, []),
    accept: dart.fnType(dart.void, [visitor$.XmlVisitor])
  }));
  dart.setGetterSignature(comment$.XmlComment, () => ({
    __proto__: dart.getGetters(comment$.XmlComment.__proto__),
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(comment$.XmlComment, I[50]);
  cdata$.XmlCDATA = class XmlCDATA extends data.XmlData {
    static ['_#new#tearOff'](text) {
      return new cdata$.XmlCDATA.new(text);
    }
    get nodeType() {
      return node_type.XmlNodeType.CDATA;
    }
    copy() {
      return new cdata$.XmlCDATA.new(this.text);
    }
    accept(visitor) {
      return visitor.visitCDATA(this);
    }
  };
  (cdata$.XmlCDATA.new = function(text) {
    cdata$.XmlCDATA.__proto__.new.call(this, text);
    ;
  }).prototype = cdata$.XmlCDATA.prototype;
  dart.addTypeTests(cdata$.XmlCDATA);
  dart.addTypeCaches(cdata$.XmlCDATA);
  dart.setMethodSignature(cdata$.XmlCDATA, () => ({
    __proto__: dart.getMethods(cdata$.XmlCDATA.__proto__),
    copy: dart.fnType(cdata$.XmlCDATA, []),
    accept: dart.fnType(dart.void, [visitor$.XmlVisitor])
  }));
  dart.setGetterSignature(cdata$.XmlCDATA, () => ({
    __proto__: dart.getGetters(cdata$.XmlCDATA.__proto__),
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(cdata$.XmlCDATA, I[51]);
  var isSelfClosing$0 = dart.privateName(element$, "XmlElement.isSelfClosing");
  var name$5 = dart.privateName(element$, "XmlElement.name");
  has_name.XmlHasName = class XmlHasName extends core.Object {};
  has_name.XmlHasName[dart.mixinOn] = Object => class XmlHasName extends Object {
    get qualifiedName() {
      return this.name.qualified;
    }
    get localName() {
      return this.name.local;
    }
    get namespacePrefix() {
      return this.name.prefix;
    }
    get namespaceUri() {
      return this.name.namespaceUri;
    }
  };
  (has_name.XmlHasName[dart.mixinNew] = function() {
  }).prototype = has_name.XmlHasName.prototype;
  dart.addTypeTests(has_name.XmlHasName);
  dart.addTypeCaches(has_name.XmlHasName);
  has_name.XmlHasName[dart.implements] = () => [core.Object];
  dart.setGetterSignature(has_name.XmlHasName, () => ({
    __proto__: dart.getGetters(has_name.XmlHasName.__proto__),
    qualifiedName: core.String,
    localName: core.String,
    namespacePrefix: dart.nullable(core.String),
    namespaceUri: dart.nullable(core.String)
  }));
  dart.setLibraryUri(has_name.XmlHasName, I[52]);
  const XmlNode_XmlHasName$36 = class XmlNode_XmlHasName extends node.XmlNode {};
  (XmlNode_XmlHasName$36.new = function() {
  }).prototype = XmlNode_XmlHasName$36.prototype;
  dart.applyMixin(XmlNode_XmlHasName$36, has_name.XmlHasName);
  const XmlNode_XmlHasParent$36$1 = class XmlNode_XmlHasParent extends XmlNode_XmlHasName$36 {};
  (XmlNode_XmlHasParent$36$1.new = function() {
    has_parent$.XmlHasParent$(node.XmlNode)[dart.mixinNew].call(this);
  }).prototype = XmlNode_XmlHasParent$36$1.prototype;
  dart.applyMixin(XmlNode_XmlHasParent$36$1, has_parent$.XmlHasParent$(node.XmlNode));
  const XmlNode_XmlHasAttributes$36$ = class XmlNode_XmlHasAttributes extends XmlNode_XmlHasParent$36$1 {};
  (XmlNode_XmlHasAttributes$36$.new = function() {
    has_attributes.XmlHasAttributes[dart.mixinNew].call(this);
    XmlNode_XmlHasAttributes$36$.__proto__.new.call(this);
  }).prototype = XmlNode_XmlHasAttributes$36$.prototype;
  dart.applyMixin(XmlNode_XmlHasAttributes$36$, has_attributes.XmlHasAttributes);
  const XmlNode_XmlHasChildren$36$0 = class XmlNode_XmlHasChildren extends XmlNode_XmlHasAttributes$36$ {};
  (XmlNode_XmlHasChildren$36$0.new = function() {
    has_children.XmlHasChildren$(node.XmlNode)[dart.mixinNew].call(this);
    XmlNode_XmlHasChildren$36$0.__proto__.new.call(this);
  }).prototype = XmlNode_XmlHasChildren$36$0.prototype;
  dart.applyMixin(XmlNode_XmlHasChildren$36$0, has_children.XmlHasChildren$(node.XmlNode));
  element$.XmlElement = class XmlElement extends XmlNode_XmlHasChildren$36$0 {
    get isSelfClosing() {
      return this[isSelfClosing$0];
    }
    set isSelfClosing(value) {
      this[isSelfClosing$0] = value;
    }
    get name() {
      return this[name$5];
    }
    set name(value) {
      super.name = value;
    }
    static ['_#new#tearOff'](name, attributesIterable = C[1] || CT.C1, childrenIterable = C[2] || CT.C2, isSelfClosing = true) {
      return new element$.XmlElement.new(name, attributesIterable, childrenIterable, isSelfClosing);
    }
    get nodeType() {
      return node_type.XmlNodeType.ELEMENT;
    }
    copy() {
      return new element$.XmlElement.new(this.name.copy(), this.attributes.map(attribute$.XmlAttribute, dart.fn(each => each.copy(), T$.XmlAttributeToXmlAttribute())), this.children.map(node.XmlNode, dart.fn(each => each.copy(), T$.XmlNodeToXmlNode())), this.isSelfClosing);
    }
    accept(visitor) {
      return visitor.visitElement(this);
    }
  };
  (element$.XmlElement.new = function(name, attributesIterable = C[1] || CT.C1, childrenIterable = C[2] || CT.C2, isSelfClosing = true) {
    this[name$5] = name;
    this[isSelfClosing$0] = isSelfClosing;
    element$.XmlElement.__proto__.new.call(this);
    this.name.attachParent(this);
    this.attributes.initialize(this, element$.attributeNodeTypes);
    this.attributes.addAll(attributesIterable);
    this.children.initialize(this, element$.childrenNodeTypes);
    this.children.addAll(childrenIterable);
  }).prototype = element$.XmlElement.prototype;
  dart.addTypeTests(element$.XmlElement);
  dart.addTypeCaches(element$.XmlElement);
  dart.setMethodSignature(element$.XmlElement, () => ({
    __proto__: dart.getMethods(element$.XmlElement.__proto__),
    copy: dart.fnType(element$.XmlElement, []),
    accept: dart.fnType(dart.void, [visitor$.XmlVisitor])
  }));
  dart.setGetterSignature(element$.XmlElement, () => ({
    __proto__: dart.getGetters(element$.XmlElement.__proto__),
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(element$.XmlElement, I[53]);
  dart.setFieldSignature(element$.XmlElement, () => ({
    __proto__: dart.getFields(element$.XmlElement.__proto__),
    isSelfClosing: dart.fieldType(core.bool),
    name: dart.finalFieldType(name$.XmlName)
  }));
  dart.defineLazy(element$, {
    /*element$.childrenNodeTypes*/get childrenNodeTypes() {
      return C[25] || CT.C25;
    },
    /*element$.attributeNodeTypes*/get attributeNodeTypes() {
      return C[23] || CT.C23;
    }
  }, false);
  var node$ = dart.privateName(type_exception, "XmlNodeTypeException.node");
  var types$ = dart.privateName(type_exception, "XmlNodeTypeException.types");
  type_exception.XmlNodeTypeException = class XmlNodeTypeException extends exception.XmlException {
    get node() {
      return this[node$];
    }
    set node(value) {
      super.node = value;
    }
    get types() {
      return this[types$];
    }
    set types(value) {
      super.types = value;
    }
    static ['_#new#tearOff'](message, opts) {
      let node = opts && 'node' in opts ? opts.node : null;
      let types = opts && 'types' in opts ? opts.types : null;
      return new type_exception.XmlNodeTypeException.new(message, {node: node, types: types});
    }
    static checkValidType(node, types) {
      if (!types[$contains](node.nodeType)) {
        dart.throw(new type_exception.XmlNodeTypeException.new("Got " + dart.str(node.nodeType) + ", but expected one of " + types[$join](", "), {node: node, types: types}));
      }
    }
    toString() {
      return "XmlNodeTypeException: " + this.message;
    }
  };
  (type_exception.XmlNodeTypeException.new = function(message, opts) {
    let node = opts && 'node' in opts ? opts.node : null;
    let types = opts && 'types' in opts ? opts.types : null;
    this[node$] = node;
    this[types$] = types;
    type_exception.XmlNodeTypeException.__proto__.new.call(this, message);
    ;
  }).prototype = type_exception.XmlNodeTypeException.prototype;
  dart.addTypeTests(type_exception.XmlNodeTypeException);
  dart.addTypeCaches(type_exception.XmlNodeTypeException);
  dart.setStaticMethodSignature(type_exception.XmlNodeTypeException, () => ['checkValidType']);
  dart.setLibraryUri(type_exception.XmlNodeTypeException, I[54]);
  dart.setFieldSignature(type_exception.XmlNodeTypeException, () => ({
    __proto__: dart.getFields(type_exception.XmlNodeTypeException.__proto__),
    node: dart.finalFieldType(node.XmlNode),
    types: dart.finalFieldType(core.Iterable$(node_type.XmlNodeType))
  }));
  dart.defineExtensionMethods(type_exception.XmlNodeTypeException, ['toString']);
  var __XmlNodeList__parent = dart.privateName(node_list, "_#XmlNodeList#_parent");
  var __XmlNodeList__nodeTypes = dart.privateName(node_list, "_#XmlNodeList#_nodeTypes");
  var _parent$0 = dart.privateName(node_list, "_parent");
  var _nodeTypes = dart.privateName(node_list, "_nodeTypes");
  var _expandFragment = dart.privateName(node_list, "_expandFragment");
  var _expandNodes = dart.privateName(node_list, "_expandNodes");
  const _is_XmlNodeList_default = Symbol('_is_XmlNodeList_default');
  node_list.XmlNodeList$ = dart.generic(E => {
    var __t$JSArrayOfE = () => (__t$JSArrayOfE = dart.constFn(_interceptors.JSArray$(E)))();
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    var __t$ETobool = () => (__t$ETobool = dart.constFn(dart.fnType(core.bool, [E])))();
    var __t$EN = () => (__t$EN = dart.constFn(dart.nullable(E)))();
    var __t$XmlNodeToE = () => (__t$XmlNodeToE = dart.constFn(dart.fnType(E, [node.XmlNode])))();
    class XmlNodeList extends wrappers.DelegatingList$(E) {
      static ['_#new#tearOff'](E) {
        return new (node_list.XmlNodeList$(E)).new();
      }
      get [_parent$0]() {
        let t24;
        t24 = this[__XmlNodeList__parent];
        return t24 == null ? dart.throw(new _internal.LateError.fieldNI("_parent")) : t24;
      }
      set [_parent$0](library$32package$58xml$47src$47xml$47utils$47node_list$46dart$58$58_parent$35param) {
        if (this[__XmlNodeList__parent] == null)
          this[__XmlNodeList__parent] = library$32package$58xml$47src$47xml$47utils$47node_list$46dart$58$58_parent$35param;
        else
          dart.throw(new _internal.LateError.fieldAI("_parent"));
      }
      get [_nodeTypes]() {
        let t24;
        t24 = this[__XmlNodeList__nodeTypes];
        return t24 == null ? dart.throw(new _internal.LateError.fieldNI("_nodeTypes")) : t24;
      }
      set [_nodeTypes](library$32package$58xml$47src$47xml$47utils$47node_list$46dart$58$58_nodeTypes$35param) {
        if (this[__XmlNodeList__nodeTypes] == null)
          this[__XmlNodeList__nodeTypes] = library$32package$58xml$47src$47xml$47utils$47node_list$46dart$58$58_nodeTypes$35param;
        else
          dart.throw(new _internal.LateError.fieldAI("_nodeTypes"));
      }
      initialize(parent, nodeTypes) {
        this[_parent$0] = parent;
        this[_nodeTypes] = nodeTypes;
      }
      _set(index, value$) {
        let value = value$;
        E.as(value);
        core.RangeError.checkValidIndex(index, this);
        if (value.nodeType === node_type.XmlNodeType.DOCUMENT_FRAGMENT) {
          this.replaceRange(index, index + 1, this[_expandFragment](value));
        } else {
          type_exception.XmlNodeTypeException.checkValidType(value, this[_nodeTypes]);
          parent_exception.XmlParentException.checkNoParent(value);
          this._get(index).detachParent(this[_parent$0]);
          super._set(index, value);
          value.attachParent(this[_parent$0]);
        }
        return value$;
      }
      set length(length) {
        return dart.throw(new core.UnsupportedError.new("Unsupported length change of node list."));
      }
      get length() {
        return super.length;
      }
      add(value) {
        E.as(value);
        if (value.nodeType === node_type.XmlNodeType.DOCUMENT_FRAGMENT) {
          this.addAll(this[_expandFragment](value));
        } else {
          type_exception.XmlNodeTypeException.checkValidType(value, this[_nodeTypes]);
          parent_exception.XmlParentException.checkNoParent(value);
          super.add(value);
          value.attachParent(this[_parent$0]);
        }
      }
      addAll(iterable) {
        __t$IterableOfE().as(iterable);
        let expanded = this[_expandNodes](iterable);
        super.addAll(expanded);
        for (let node of expanded) {
          node.attachParent(this[_parent$0]);
        }
      }
      remove(value) {
        let removed = super.remove(value);
        if (removed && E.is(value)) {
          value.detachParent(this[_parent$0]);
        }
        return removed;
      }
      removeWhere(test) {
        super.removeWhere(dart.fn(node => {
          let remove = test(node);
          if (remove) {
            node.detachParent(this[_parent$0]);
          }
          return remove;
        }, __t$ETobool()));
      }
      retainWhere(test) {
        super.retainWhere(dart.fn(node => {
          let retain = test(node);
          if (!retain) {
            node.detachParent(this[_parent$0]);
          }
          return retain;
        }, __t$ETobool()));
      }
      clear() {
        for (let node of this) {
          node.detachParent(this[_parent$0]);
        }
        super.clear();
      }
      removeLast() {
        let node = super.removeLast();
        node.detachParent(this[_parent$0]);
        return node;
      }
      removeRange(start, end) {
        core.RangeError.checkValidRange(start, end, this.length);
        for (let i = start; i < end; i = i + 1) {
          this._get(i).detachParent(this[_parent$0]);
        }
        super.removeRange(start, end);
      }
      fillRange(start, end, fillValue = null) {
        __t$EN().as(fillValue);
        return dart.throw(new core.UnsupportedError.new("Unsupported range filling of node list."));
      }
      setRange(start, end, iterable, skipCount = 0) {
        __t$IterableOfE().as(iterable);
        core.RangeError.checkValidRange(start, end, this.length);
        let expanded = this[_expandNodes](iterable);
        for (let i = start; i < end; i = i + 1) {
          this._get(i).detachParent(this[_parent$0]);
        }
        super.setRange(start, end, expanded, skipCount);
        for (let i = start; i < end; i = i + 1) {
          this._get(i).attachParent(this[_parent$0]);
        }
      }
      replaceRange(start, end, iterable) {
        __t$IterableOfE().as(iterable);
        core.RangeError.checkValidRange(start, end, this.length);
        let expanded = this[_expandNodes](iterable);
        for (let i = start; i < end; i = i + 1) {
          this._get(i).detachParent(this[_parent$0]);
        }
        super.replaceRange(start, end, expanded);
        for (let node of expanded) {
          node.attachParent(this[_parent$0]);
        }
      }
      setAll(index, iterable) {
        __t$IterableOfE().as(iterable);
        return dart.throw(new core.UnimplementedError.new());
      }
      insert(index, element) {
        E.as(element);
        if (element.nodeType === node_type.XmlNodeType.DOCUMENT_FRAGMENT) {
          this.insertAll(index, this[_expandFragment](element));
        } else {
          type_exception.XmlNodeTypeException.checkValidType(element, this[_nodeTypes]);
          parent_exception.XmlParentException.checkNoParent(element);
          super.insert(index, element);
          element.attachParent(this[_parent$0]);
        }
      }
      insertAll(index, iterable) {
        __t$IterableOfE().as(iterable);
        let expanded = this[_expandNodes](iterable);
        super.insertAll(index, expanded);
        for (let node of expanded) {
          node.attachParent(this[_parent$0]);
        }
      }
      removeAt(index) {
        core.RangeError.checkValidIndex(index, this);
        this._get(index).detachParent(this[_parent$0]);
        return super.removeAt(index);
      }
      [_expandFragment](fragment) {
        return fragment.children[$map](E, dart.fn(node => {
          type_exception.XmlNodeTypeException.checkValidType(node, this[_nodeTypes]);
          return E.as(node.copy());
        }, __t$XmlNodeToE()));
      }
      [_expandNodes](iterable) {
        let expanded = __t$JSArrayOfE().of([]);
        for (let node of iterable) {
          if (node.nodeType === node_type.XmlNodeType.DOCUMENT_FRAGMENT) {
            expanded[$addAll](this[_expandFragment](node));
          } else {
            type_exception.XmlNodeTypeException.checkValidType(node, this[_nodeTypes]);
            parent_exception.XmlParentException.checkNoParent(node);
            expanded[$add](node);
          }
        }
        return expanded;
      }
    }
    (XmlNodeList.new = function() {
      this[__XmlNodeList__parent] = null;
      this[__XmlNodeList__nodeTypes] = null;
      XmlNodeList.__proto__.new.call(this, __t$JSArrayOfE().of([]));
      ;
    }).prototype = XmlNodeList.prototype;
    dart.addTypeTests(XmlNodeList);
    XmlNodeList.prototype[_is_XmlNodeList_default] = true;
    dart.addTypeCaches(XmlNodeList);
    dart.setMethodSignature(XmlNodeList, () => ({
      __proto__: dart.getMethods(XmlNodeList.__proto__),
      initialize: dart.fnType(dart.void, [node.XmlNode, core.Set$(node_type.XmlNodeType)]),
      [_expandFragment]: dart.fnType(core.Iterable$(E), [E]),
      [_expandNodes]: dart.fnType(core.Iterable$(E), [core.Iterable$(E)])
    }));
    dart.setGetterSignature(XmlNodeList, () => ({
      __proto__: dart.getGetters(XmlNodeList.__proto__),
      [_parent$0]: node.XmlNode,
      [_nodeTypes]: core.Set$(node_type.XmlNodeType)
    }));
    dart.setSetterSignature(XmlNodeList, () => ({
      __proto__: dart.getSetters(XmlNodeList.__proto__),
      [_parent$0]: node.XmlNode,
      [_nodeTypes]: core.Set$(node_type.XmlNodeType)
    }));
    dart.setLibraryUri(XmlNodeList, I[55]);
    dart.setFieldSignature(XmlNodeList, () => ({
      __proto__: dart.getFields(XmlNodeList.__proto__),
      [__XmlNodeList__parent]: dart.fieldType(dart.nullable(node.XmlNode)),
      [__XmlNodeList__nodeTypes]: dart.fieldType(dart.nullable(core.Set$(node_type.XmlNodeType)))
    }));
    dart.defineExtensionMethods(XmlNodeList, [
      '_set',
      'add',
      'addAll',
      'remove',
      'removeWhere',
      'retainWhere',
      'clear',
      'removeLast',
      'removeRange',
      'fillRange',
      'setRange',
      'replaceRange',
      'setAll',
      'insert',
      'insertAll',
      'removeAt'
    ]);
    dart.defineExtensionAccessors(XmlNodeList, ['length']);
    return XmlNodeList;
  });
  node_list.XmlNodeList = node_list.XmlNodeList$();
  dart.addTypeTests(node_list.XmlNodeList, _is_XmlNodeList_default);
  namespace$.lookupAttribute = function lookupAttribute(start, prefix, local) {
    for (let node = start; node != null; node = node.parent) {
      for (let attribute of node.attributes) {
        let name = attribute.name;
        if (name.prefix == prefix && name.local === local) {
          return attribute;
        }
      }
    }
    return null;
  };
  namespace$.lookupNamespacePrefix = function lookupNamespacePrefix(start, uri) {
    for (let node = start; node != null; node = node.parent) {
      for (let attribute of node.attributes) {
        if (attribute.value === uri) {
          let name = attribute.name;
          if (name.prefix === "xmlns") {
            return name.local;
          } else if (name.prefix == null && name.local === "xmlns") {
            return "";
          }
        }
      }
    }
    return null;
  };
  dart.defineLazy(namespace$, {
    /*namespace$.xml*/get xml() {
      return "xml";
    },
    /*namespace$.xmlUri*/get xmlUri() {
      return "http://www.w3.org/XML/1998/namespace";
    },
    /*namespace$.xmlns*/get xmlns() {
      return "xmlns";
    }
  }, false);
  name_matcher.createNameMatcher = function createNameMatcher(name, namespace) {
    if (name === "*") {
      if (namespace == null || namespace === "*") {
        return dart.fn(named => true, T$.XmlHasNameTobool());
      } else {
        return dart.fn(named => named.name.namespaceUri == namespace, T$.XmlHasNameTobool());
      }
    } else {
      if (namespace == null) {
        return dart.fn(named => named.name.qualified === name, T$.XmlHasNameTobool());
      } else if (namespace === "*") {
        return dart.fn(named => named.name.local === name, T$.XmlHasNameTobool());
      } else {
        return dart.fn(named => named.name.local === name && named.name.namespaceUri == namespace, T$.XmlHasNameTobool());
      }
    }
  };
  var node$0 = dart.privateName(parent_exception, "XmlParentException.node");
  var parent$ = dart.privateName(parent_exception, "XmlParentException.parent");
  parent_exception.XmlParentException = class XmlParentException extends exception.XmlException {
    get node() {
      return this[node$0];
    }
    set node(value) {
      super.node = value;
    }
    get parent() {
      return this[parent$];
    }
    set parent(value) {
      super.parent = value;
    }
    static ['_#new#tearOff'](message, opts) {
      let node = opts && 'node' in opts ? opts.node : null;
      let parent = opts && 'parent' in opts ? opts.parent : null;
      return new parent_exception.XmlParentException.new(message, {node: node, parent: parent});
    }
    static checkNoParent(node) {
      if (node.parent != null) {
        dart.throw(new parent_exception.XmlParentException.new("Node already has a parent, copy or remove it first", {node: node, parent: node.parent}));
      }
    }
    static checkMatchingParent(node, parent) {
      if (!dart.equals(node.parent, parent)) {
        dart.throw(new parent_exception.XmlParentException.new("Node already has a non-matching parent", {node: node, parent: parent}));
      }
    }
    toString() {
      return "XmlParentException: " + this.message;
    }
  };
  (parent_exception.XmlParentException.new = function(message, opts) {
    let node = opts && 'node' in opts ? opts.node : null;
    let parent = opts && 'parent' in opts ? opts.parent : null;
    this[node$0] = node;
    this[parent$] = parent;
    parent_exception.XmlParentException.__proto__.new.call(this, message);
    ;
  }).prototype = parent_exception.XmlParentException.prototype;
  dart.addTypeTests(parent_exception.XmlParentException);
  dart.addTypeCaches(parent_exception.XmlParentException);
  dart.setStaticMethodSignature(parent_exception.XmlParentException, () => ['checkNoParent', 'checkMatchingParent']);
  dart.setLibraryUri(parent_exception.XmlParentException, I[56]);
  dart.setFieldSignature(parent_exception.XmlParentException, () => ({
    __proto__: dart.getFields(parent_exception.XmlParentException.__proto__),
    node: dart.finalFieldType(has_parent$.XmlParentBase),
    parent: dart.finalFieldType(dart.nullable(node.XmlNode))
  }));
  dart.defineExtensionMethods(parent_exception.XmlParentException, ['toString']);
  var name$6 = dart.privateName(attribute$, "XmlAttribute.name");
  var value$0 = dart.privateName(attribute$, "XmlAttribute.value");
  var attributeType$0 = dart.privateName(attribute$, "XmlAttribute.attributeType");
  const XmlNode_XmlHasName$36$ = class XmlNode_XmlHasName extends node.XmlNode {};
  (XmlNode_XmlHasName$36$.new = function() {
  }).prototype = XmlNode_XmlHasName$36$.prototype;
  dart.applyMixin(XmlNode_XmlHasName$36$, has_name.XmlHasName);
  const XmlNode_XmlHasParent$36$2 = class XmlNode_XmlHasParent extends XmlNode_XmlHasName$36$ {};
  (XmlNode_XmlHasParent$36$2.new = function() {
    has_parent$.XmlHasParent$(node.XmlNode)[dart.mixinNew].call(this);
  }).prototype = XmlNode_XmlHasParent$36$2.prototype;
  dart.applyMixin(XmlNode_XmlHasParent$36$2, has_parent$.XmlHasParent$(node.XmlNode));
  attribute$.XmlAttribute = class XmlAttribute extends XmlNode_XmlHasParent$36$2 {
    get name() {
      return this[name$6];
    }
    set name(value) {
      super.name = value;
    }
    get value() {
      return this[value$0];
    }
    set value(value) {
      this[value$0] = value;
    }
    get attributeType() {
      return this[attributeType$0];
    }
    set attributeType(value) {
      super.attributeType = value;
    }
    static ['_#new#tearOff'](name, value, attributeType = C[26] || CT.C26) {
      return new attribute$.XmlAttribute.new(name, value, attributeType);
    }
    get nodeType() {
      return node_type.XmlNodeType.ATTRIBUTE;
    }
    copy() {
      return new attribute$.XmlAttribute.new(this.name.copy(), this.value, this.attributeType);
    }
    accept(visitor) {
      return visitor.visitAttribute(this);
    }
  };
  (attribute$.XmlAttribute.new = function(name, value, attributeType = C[26] || CT.C26) {
    this[name$6] = name;
    this[value$0] = value;
    this[attributeType$0] = attributeType;
    attribute$.XmlAttribute.__proto__.new.call(this);
    this.name.attachParent(this);
  }).prototype = attribute$.XmlAttribute.prototype;
  dart.addTypeTests(attribute$.XmlAttribute);
  dart.addTypeCaches(attribute$.XmlAttribute);
  dart.setMethodSignature(attribute$.XmlAttribute, () => ({
    __proto__: dart.getMethods(attribute$.XmlAttribute.__proto__),
    copy: dart.fnType(attribute$.XmlAttribute, []),
    accept: dart.fnType(dart.void, [visitor$.XmlVisitor])
  }));
  dart.setGetterSignature(attribute$.XmlAttribute, () => ({
    __proto__: dart.getGetters(attribute$.XmlAttribute.__proto__),
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(attribute$.XmlAttribute, I[57]);
  dart.setFieldSignature(attribute$.XmlAttribute, () => ({
    __proto__: dart.getFields(attribute$.XmlAttribute.__proto__),
    name: dart.finalFieldType(name$.XmlName),
    value: dart.fieldType(core.String),
    attributeType: dart.finalFieldType(attribute_type.XmlAttributeType)
  }));
  dart.trackLibraries("packages/xml/src/xml/utils/simple_name.dart", {
    "package:xml/src/xml/utils/simple_name.dart": simple_name,
    "package:xml/src/xml/utils/prefix_name.dart": prefix_name,
    "package:xml/src/xml/mixins/has_xml.dart": has_xml,
    "package:xml/src/xml/visitors/writer.dart": writer$,
    "package:xml/src/xml/visitors/pretty_writer.dart": pretty_writer,
    "package:xml/src/xml/mixins/has_writer.dart": has_writer,
    "package:xml/src/xml/navigation/descendants.dart": descendants,
    "package:xml/src/xml/mixins/has_text.dart": has_text,
    "package:xml/src/xml/nodes/document_fragment.dart": document_fragment,
    "package:xml/src/xml_events/streams/with_parent.dart": with_parent,
    "package:xml/src/xml_events/streams/subtree_selector.dart": subtree_selector,
    "package:xml/src/xml_events/streams/normalizer.dart": normalizer,
    "package:xml/src/xml_events/streams/for_each_event.dart": for_each_event,
    "package:xml/src/xml_events/converters/node_encoder.dart": node_encoder,
    "package:xml/src/xml/nodes/text.dart": text$,
    "package:xml/src/xml/nodes/processing.dart": processing,
    "package:xml/src/xml/navigation/parent.dart": parent,
    "package:xml/src/xml_events/converters/node_decoder.dart": node_decoder,
    "package:xml/src/xml_events/codec/node_codec.dart": node_codec,
    "package:xml/src/xml_events/converters/event_decoder.dart": event_decoder,
    "package:xml/src/xml_events/codec/event_codec.dart": event_codec,
    "package:xml/src/xml_events/parser.dart": parser$,
    "package:xml/src/xml_events/iterator.dart": iterator,
    "package:xml/src/xml_events/annotations/annotator.dart": annotator,
    "package:xml/src/xml_events/iterable.dart": iterable,
    "package:xml/src/xml_events/converters/event_encoder.dart": event_encoder,
    "package:xml/src/xml_events/events/text.dart": text$0,
    "package:xml/src/xml_events/events/processing.dart": processing$,
    "package:xml/src/xml_events/events/end_element.dart": end_element,
    "package:xml/src/xml_events/events/doctype.dart": doctype,
    "package:xml/src/xml_events/events/declaration.dart": declaration,
    "package:xml/src/xml_events/events/comment.dart": comment,
    "package:xml/src/xml_events/events/cdata.dart": cdata,
    "package:xml/src/xml_events/visitor.dart": visitor,
    "package:xml/src/xml_events/utils/named.dart": named,
    "package:xml/src/xml_events/utils/event_attribute.dart": event_attribute,
    "package:xml/src/xml_events/events/start_element.dart": start_element,
    "package:xml/src/xml_events/annotations/has_parent.dart": has_parent,
    "package:xml/src/xml_events/event.dart": event,
    "package:xml/xml_events.dart": xml_events,
    "package:xml/src/xml/nodes/document.dart": document,
    "package:xml/src/xml/nodes/doctype.dart": doctype$,
    "package:xml/src/xml/nodes/declaration.dart": declaration$,
    "package:xml/src/xml/nodes/comment.dart": comment$,
    "package:xml/src/xml/nodes/data.dart": data,
    "package:xml/src/xml/nodes/cdata.dart": cdata$,
    "package:xml/src/xml/mixins/has_visitor.dart": has_visitor,
    "package:xml/src/xml/visitors/visitor.dart": visitor$,
    "package:xml/src/xml/nodes/element.dart": element$,
    "package:xml/src/xml/mixins/has_children.dart": has_children,
    "package:xml/src/xml/exceptions/type_exception.dart": type_exception,
    "package:xml/src/xml/utils/node_list.dart": node_list,
    "package:xml/src/xml/utils/namespace.dart": namespace$,
    "package:xml/src/xml/utils/name_matcher.dart": name_matcher,
    "package:xml/src/xml/mixins/has_attributes.dart": has_attributes,
    "package:xml/src/xml/nodes/node.dart": node,
    "package:xml/src/xml/exceptions/parent_exception.dart": parent_exception,
    "package:xml/src/xml/mixins/has_parent.dart": has_parent$,
    "package:xml/src/xml/utils/name.dart": name$,
    "package:xml/src/xml/mixins/has_name.dart": has_name,
    "package:xml/src/xml/nodes/attribute.dart": attribute$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["../mixins/has_writer.dart","../mixins/has_parent.dart","../mixins/has_attributes.dart","../mixins/has_children.dart","../mixins/has_text.dart","../mixins/has_xml.dart","../nodes/node.dart","name.dart","simple_name.dart","prefix_name.dart","../visitors/visitor.dart","../visitors/writer.dart","../visitors/pretty_writer.dart","../navigation/descendants.dart","../nodes/document_fragment.dart","../../xml_events/annotations/has_parent.dart","../../xml_events/event.dart","../../xml_events/streams/with_parent.dart","../../xml_events/visitor.dart","../../xml_events/streams/subtree_selector.dart","../../xml_events/streams/normalizer.dart","../../xml_events/streams/for_each_event.dart","../../xml_events/converters/node_encoder.dart","../nodes/data.dart","../nodes/text.dart","../nodes/processing.dart","../navigation/parent.dart","../../xml_events/converters/node_decoder.dart","../../xml_events/codec/node_codec.dart","../../xml_events/converters/event_decoder.dart","../../xml_events/codec/event_codec.dart","../../xml_events/parser.dart","../../xml_events/iterator.dart","../../xml_events/annotations/annotator.dart","../../xml_events/iterable.dart","../../xml_events/converters/event_encoder.dart","../../xml_events/events/text.dart","../../xml_events/events/processing.dart","../../xml_events/utils/named.dart","../../xml_events/events/end_element.dart","../../xml_events/events/doctype.dart","../../xml_events/events/declaration.dart","../../xml_events/events/comment.dart","../../xml_events/events/cdata.dart","../../xml_events/utils/event_attribute.dart","../../xml_events/events/start_element.dart","../../../xml_events.dart","../nodes/document.dart","../nodes/doctype.dart","../nodes/declaration.dart","../nodes/comment.dart","../nodes/cdata.dart","../mixins/has_name.dart","../nodes/element.dart","../exceptions/type_exception.dart","node_list.dart","namespace.dart","name_matcher.dart","../exceptions/parent_exception.dart","../nodes/attribute.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../../packages/xml/src/xml/utils/simple_name.dart.lib.js"}');
  // Exports:
  return {
    src__xml__utils__simple_name: simple_name,
    src__xml__utils__prefix_name: prefix_name,
    src__xml__mixins__has_xml: has_xml,
    src__xml__visitors__writer: writer$,
    src__xml__visitors__pretty_writer: pretty_writer,
    src__xml__mixins__has_writer: has_writer,
    src__xml__navigation__descendants: descendants,
    src__xml__mixins__has_text: has_text,
    src__xml__nodes__document_fragment: document_fragment,
    src__xml_events__streams__with_parent: with_parent,
    src__xml_events__streams__subtree_selector: subtree_selector,
    src__xml_events__streams__normalizer: normalizer,
    src__xml_events__streams__for_each_event: for_each_event,
    src__xml_events__converters__node_encoder: node_encoder,
    src__xml__nodes__text: text$,
    src__xml__nodes__processing: processing,
    src__xml__navigation__parent: parent,
    src__xml_events__converters__node_decoder: node_decoder,
    src__xml_events__codec__node_codec: node_codec,
    src__xml_events__converters__event_decoder: event_decoder,
    src__xml_events__codec__event_codec: event_codec,
    src__xml_events__parser: parser$,
    src__xml_events__iterator: iterator,
    src__xml_events__annotations__annotator: annotator,
    src__xml_events__iterable: iterable,
    src__xml_events__converters__event_encoder: event_encoder,
    src__xml_events__events__text: text$0,
    src__xml_events__events__processing: processing$,
    src__xml_events__events__end_element: end_element,
    src__xml_events__events__doctype: doctype,
    src__xml_events__events__declaration: declaration,
    src__xml_events__events__comment: comment,
    src__xml_events__events__cdata: cdata,
    src__xml_events__visitor: visitor,
    src__xml_events__utils__named: named,
    src__xml_events__utils__event_attribute: event_attribute,
    src__xml_events__events__start_element: start_element,
    src__xml_events__annotations__has_parent: has_parent,
    src__xml_events__event: event,
    xml_events: xml_events,
    src__xml__nodes__document: document,
    src__xml__nodes__doctype: doctype$,
    src__xml__nodes__declaration: declaration$,
    src__xml__nodes__comment: comment$,
    src__xml__nodes__data: data,
    src__xml__nodes__cdata: cdata$,
    src__xml__mixins__has_visitor: has_visitor,
    src__xml__visitors__visitor: visitor$,
    src__xml__nodes__element: element$,
    src__xml__mixins__has_children: has_children,
    src__xml__exceptions__type_exception: type_exception,
    src__xml__utils__node_list: node_list,
    src__xml__utils__namespace: namespace$,
    src__xml__utils__name_matcher: name_matcher,
    src__xml__mixins__has_attributes: has_attributes,
    src__xml__nodes__node: node,
    src__xml__exceptions__parent_exception: parent_exception,
    src__xml__mixins__has_parent: has_parent$,
    src__xml__utils__name: name$,
    src__xml__mixins__has_name: has_name,
    src__xml__nodes__attribute: attribute$
  };
}));

//# sourceMappingURL=simple_name.dart.lib.js.map
