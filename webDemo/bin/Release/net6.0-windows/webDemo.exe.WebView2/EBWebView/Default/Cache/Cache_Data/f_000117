define(['dart_sdk', 'packages/barcode/src/barcode_exception.dart', 'packages/barcode/src/barcode_maps.dart', 'packages/barcode/src/barcode_operations.dart', 'packages/barcode/src/barcode_types.dart', 'packages/qr/src/error_correct_level.dart', 'packages/qr/src/qr_code.dart', 'packages/qr/src/qr_image.dart', 'packages/barcode/src/pdf417_codewords.dart', 'packages/barcode/src/reedsolomon.dart'], (function load__packages__barcode__src__upce_dart(dart_sdk, packages__barcode__src__barcode_exception$46dart, packages__barcode__src__barcode_maps$46dart, packages__barcode__src__barcode_operations$46dart, packages__barcode__src__barcode_types$46dart, packages__qr__src__error_correct_level$46dart, packages__qr__src__qr_code$46dart, packages__qr__src__qr_image$46dart, packages__barcode__src__pdf417_codewords$46dart, packages__barcode__src__reedsolomon$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const convert = dart_sdk.convert;
  const _js_helper = dart_sdk._js_helper;
  const typed_data = dart_sdk.typed_data;
  const _native_typed_data = dart_sdk._native_typed_data;
  const _interceptors = dart_sdk._interceptors;
  const math = dart_sdk.math;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const barcode_exception = packages__barcode__src__barcode_exception$46dart.src__barcode_exception;
  const barcode_maps = packages__barcode__src__barcode_maps$46dart.src__barcode_maps;
  const barcode_operations = packages__barcode__src__barcode_operations$46dart.src__barcode_operations;
  const barcode_types = packages__barcode__src__barcode_types$46dart.src__barcode_types;
  const error_correct_level = packages__qr__src__error_correct_level$46dart.src__error_correct_level;
  const qr_code = packages__qr__src__qr_code$46dart.src__qr_code;
  const qr_image = packages__qr__src__qr_image$46dart.src__qr_image;
  const pdf417_codewords = packages__barcode__src__pdf417_codewords$46dart.src__pdf417_codewords;
  const reedsolomon = packages__barcode__src__reedsolomon$46dart.src__reedsolomon;
  var upce = Object.create(dart.library);
  var upca = Object.create(dart.library);
  var telepen = Object.create(dart.library);
  var barcode_hm = Object.create(dart.library);
  var rm4scc = Object.create(dart.library);
  var qrcode = Object.create(dart.library);
  var pdf417 = Object.create(dart.library);
  var itf16 = Object.create(dart.library);
  var itf14 = Object.create(dart.library);
  var itf = Object.create(dart.library);
  var isbn = Object.create(dart.library);
  var ean8 = Object.create(dart.library);
  var ean5 = Object.create(dart.library);
  var ean2 = Object.create(dart.library);
  var ean = Object.create(dart.library);
  var ean13 = Object.create(dart.library);
  var datamatrix = Object.create(dart.library);
  var code93 = Object.create(dart.library);
  var code39 = Object.create(dart.library);
  var code128 = Object.create(dart.library);
  var barcode_1d = Object.create(dart.library);
  var codabar = Object.create(dart.library);
  var barcode_2d = Object.create(dart.library);
  var aztec = Object.create(dart.library);
  var barcode = Object.create(dart.library);
  var barcode$ = Object.create(dart.library);
  var $_get = dartx._get;
  var $substring = dartx.substring;
  var $codeUnitAt = dartx.codeUnitAt;
  var $codeUnits = dartx.codeUnits;
  var $rightShift = dartx['>>'];
  var $padRight = dartx.padRight;
  var $modulo = dartx['%'];
  var $toList = dartx.toList;
  var $isEmpty = dartx.isEmpty;
  var $length = dartx.length;
  var $first = dartx.first;
  var $toRadixString = dartx.toRadixString;
  var $toSet = dartx.toSet;
  var $toDouble = dartx.toDouble;
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $padLeft = dartx.padLeft;
  var $keys = dartx.keys;
  var $indexOf = dartx.indexOf;
  var $truncate = dartx.truncate;
  var $buffer = dartx.buffer;
  var $asByteData = dartx.asByteData;
  var $toString = dartx.toString;
  var $sublist = dartx.sublist;
  var $add = dartx.add;
  var $addAll = dartx.addAll;
  var $insert = dartx.insert;
  var $abs = dartx.abs;
  var $leftShift = dartx['<<'];
  var $_set = dartx._set;
  var $containsKey = dartx.containsKey;
  var $isNotEmpty = dartx.isNotEmpty;
  var $where = dartx.where;
  var $followedBy = dartx.followedBy;
  var $reversed = dartx.reversed;
  var $replaceAll = dartx.replaceAll;
  var $trim = dartx.trim;
  var $contains = dartx.contains;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    SyncIterableOfbool: () => (T.SyncIterableOfbool = dart.constFn(_js_helper.SyncIterable$(core.bool)))(),
    SyncIterableOfBarcodeElement: () => (T.SyncIterableOfBarcodeElement = dart.constFn(_js_helper.SyncIterable$(barcode_operations.BarcodeElement)))(),
    ListOfint: () => (T.ListOfint = dart.constFn(core.List$(core.int)))(),
    intToint: () => (T.intToint = dart.constFn(dart.fnType(core.int, [core.int])))(),
    IterableOfint: () => (T.IterableOfint = dart.constFn(core.Iterable$(core.int)))(),
    SyncIterableOfBarcodeHMBar: () => (T.SyncIterableOfBarcodeHMBar = dart.constFn(_js_helper.SyncIterable$(barcode_hm.BarcodeHMBar)))(),
    JSArrayOfListOfint: () => (T.JSArrayOfListOfint = dart.constFn(_interceptors.JSArray$(T.ListOfint())))(),
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    VoidToint: () => (T.VoidToint = dart.constFn(dart.fnType(core.int, [])))(),
    intTodynamic: () => (T.intTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.int])))(),
    SyncIterableOfint: () => (T.SyncIterableOfint = dart.constFn(_js_helper.SyncIterable$(core.int)))(),
    intN: () => (T.intN = dart.constFn(dart.nullable(core.int)))(),
    JSArrayOfintN: () => (T.JSArrayOfintN = dart.constFn(_interceptors.JSArray$(T.intN())))(),
    ListOfbool: () => (T.ListOfbool = dart.constFn(core.List$(core.bool)))(),
    intAndintAndboolTovoid: () => (T.intAndintAndboolTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.int, core.bool])))(),
    intTobool: () => (T.intTobool = dart.constFn(dart.fnType(core.bool, [core.int])))(),
    ListOfintAndintTovoid: () => (T.ListOfintAndintTovoid = dart.constFn(dart.fnType(dart.void, [T.ListOfint(), core.int])))(),
    IterableOfbool: () => (T.IterableOfbool = dart.constFn(core.Iterable$(core.bool)))(),
    ListOfintN: () => (T.ListOfintN = dart.constFn(core.List$(T.intN())))(),
    LinkedMapOf_EncodingMode$ListOfintN: () => (T.LinkedMapOf_EncodingMode$ListOfintN = dart.constFn(_js_helper.LinkedMap$(aztec._EncodingMode, T.ListOfintN())))(),
    JSArrayOfbool: () => (T.JSArrayOfbool = dart.constFn(_interceptors.JSArray$(core.bool)))(),
    JSArrayOf_State: () => (T.JSArrayOf_State = dart.constFn(_interceptors.JSArray$(aztec._State)))(),
    JSArrayOf_Token: () => (T.JSArrayOf_Token = dart.constFn(_interceptors.JSArray$(aztec._Token)))(),
    MapOf_EncodingMode$int: () => (T.MapOf_EncodingMode$int = dart.constFn(core.Map$(aztec._EncodingMode, core.int)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: upca.BarcodeUpcA.prototype
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: barcode_types.BarcodeType.prototype,
        [_Enum__name]: "Code39",
        [_Enum_index]: 7
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: barcode_types.BarcodeType.prototype,
        [_Enum__name]: "Code93",
        [_Enum_index]: 8
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: barcode_types.BarcodeType.prototype,
        [_Enum__name]: "Code128",
        [_Enum_index]: 11
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: barcode_types.BarcodeType.prototype,
        [_Enum__name]: "GS128",
        [_Enum_index]: 12
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: barcode_types.BarcodeType.prototype,
        [_Enum__name]: "Itf",
        [_Enum_index]: 20
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: barcode_types.BarcodeType.prototype,
        [_Enum__name]: "CodeITF14",
        [_Enum_index]: 1
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: barcode_types.BarcodeType.prototype,
        [_Enum__name]: "CodeITF16",
        [_Enum_index]: 0
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: barcode_types.BarcodeType.prototype,
        [_Enum__name]: "CodeEAN13",
        [_Enum_index]: 2
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: barcode_types.BarcodeType.prototype,
        [_Enum__name]: "CodeEAN8",
        [_Enum_index]: 3
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: barcode_types.BarcodeType.prototype,
        [_Enum__name]: "CodeEAN5",
        [_Enum_index]: 4
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: barcode_types.BarcodeType.prototype,
        [_Enum__name]: "CodeEAN2",
        [_Enum_index]: 5
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: barcode_types.BarcodeType.prototype,
        [_Enum__name]: "CodeISBN",
        [_Enum_index]: 6
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: barcode_types.BarcodeType.prototype,
        [_Enum__name]: "CodeUPCA",
        [_Enum_index]: 9
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: barcode_types.BarcodeType.prototype,
        [_Enum__name]: "CodeUPCE",
        [_Enum_index]: 10
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: barcode_types.BarcodeType.prototype,
        [_Enum__name]: "Telepen",
        [_Enum_index]: 13
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: barcode_types.BarcodeType.prototype,
        [_Enum__name]: "Codabar",
        [_Enum_index]: 15
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: barcode_types.BarcodeType.prototype,
        [_Enum__name]: "Rm4scc",
        [_Enum_index]: 19
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: barcode_types.BarcodeType.prototype,
        [_Enum__name]: "QrCode",
        [_Enum_index]: 14
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: barcode_types.BarcodeType.prototype,
        [_Enum__name]: "PDF417",
        [_Enum_index]: 16
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: barcode_types.BarcodeType.prototype,
        [_Enum__name]: "DataMatrix",
        [_Enum_index]: 17
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: barcode_types.BarcodeType.prototype,
        [_Enum__name]: "Aztec",
        [_Enum_index]: 18
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: code39.BarcodeCode39.prototype
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: code93.BarcodeCode93.prototype
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: ean5.BarcodeEan5.prototype
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: ean2.BarcodeEan2.prototype
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: telepen.BarcodeTelepen.prototype
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: qrcode.BarcodeQRCorrectionLevel.prototype,
        [_Enum__name]: "low",
        [_Enum_index]: 0
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: pdf417.Pdf417SecurityLevel.prototype,
        [_Enum__name]: "level2",
        [_Enum_index]: 2
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: codabar.BarcodeCodabarStartStop.prototype,
        [_Enum__name]: "A",
        [_Enum_index]: 0
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: codabar.BarcodeCodabarStartStop.prototype,
        [_Enum__name]: "B",
        [_Enum_index]: 1
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: rm4scc.BarcodeRm4scc.prototype
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: datamatrix.BarcodeDataMatrix.prototype
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: convert.HtmlEscapeMode.prototype,
        [HtmlEscapeMode_escapeSlash]: true,
        [HtmlEscapeMode_escapeApos]: true,
        [HtmlEscapeMode_escapeQuot]: true,
        [HtmlEscapeMode_escapeLtGt]: true,
        [HtmlEscapeMode__name]: "unknown"
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: convert.HtmlEscape.prototype,
        [HtmlEscape_mode]: C[34] || CT.C34
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: barcode_operations.BarcodeTextAlign.prototype,
        [_Enum__name]: "left",
        [_Enum_index]: 0
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: barcode_operations.BarcodeTextAlign.prototype,
        [_Enum__name]: "center",
        [_Enum_index]: 1
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: barcode_operations.BarcodeTextAlign.prototype,
        [_Enum__name]: "right",
        [_Enum_index]: 2
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: barcode_hm.BarcodeHMBar.prototype,
        [_Enum__name]: "tracker",
        [_Enum_index]: 0
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: barcode_hm.BarcodeHMBar.prototype,
        [_Enum__name]: "ascender",
        [_Enum_index]: 1
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: barcode_hm.BarcodeHMBar.prototype,
        [_Enum__name]: "descender",
        [_Enum_index]: 2
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: barcode_hm.BarcodeHMBar.prototype,
        [_Enum__name]: "full",
        [_Enum_index]: 3
      });
    },
    get C38() {
      return C[38] = dart.constList([C[39] || CT.C39, C[40] || CT.C40, C[41] || CT.C41, C[42] || CT.C42], barcode_hm.BarcodeHMBar);
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: qrcode.BarcodeQRCorrectionLevel.prototype,
        [_Enum__name]: "medium",
        [_Enum_index]: 1
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: qrcode.BarcodeQRCorrectionLevel.prototype,
        [_Enum__name]: "quartile",
        [_Enum_index]: 2
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: qrcode.BarcodeQRCorrectionLevel.prototype,
        [_Enum__name]: "high",
        [_Enum_index]: 3
      });
    },
    get C43() {
      return C[43] = dart.constList([C[27] || CT.C27, C[44] || CT.C44, C[45] || CT.C45, C[46] || CT.C46], qrcode.BarcodeQRCorrectionLevel);
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: pdf417.Pdf417SecurityLevel.prototype,
        [_Enum__name]: "level0",
        [_Enum_index]: 0
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: pdf417.Pdf417SecurityLevel.prototype,
        [_Enum__name]: "level1",
        [_Enum_index]: 1
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: pdf417.Pdf417SecurityLevel.prototype,
        [_Enum__name]: "level3",
        [_Enum_index]: 3
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: pdf417.Pdf417SecurityLevel.prototype,
        [_Enum__name]: "level4",
        [_Enum_index]: 4
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: pdf417.Pdf417SecurityLevel.prototype,
        [_Enum__name]: "level5",
        [_Enum_index]: 5
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: pdf417.Pdf417SecurityLevel.prototype,
        [_Enum__name]: "level6",
        [_Enum_index]: 6
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: pdf417.Pdf417SecurityLevel.prototype,
        [_Enum__name]: "level7",
        [_Enum_index]: 7
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: pdf417.Pdf417SecurityLevel.prototype,
        [_Enum__name]: "level8",
        [_Enum_index]: 8
      });
    },
    get C47() {
      return C[47] = dart.constList([C[48] || CT.C48, C[49] || CT.C49, C[28] || CT.C28, C[50] || CT.C50, C[51] || CT.C51, C[52] || CT.C52, C[53] || CT.C53, C[54] || CT.C54, C[55] || CT.C55], pdf417.Pdf417SecurityLevel);
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: barcode_exception.BarcodeException.prototype,
        [BarcodeException_message]: "Unable to fit data in barcode"
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: pdf417._SubMode.prototype,
        [_Enum__name]: "subUpper",
        [_Enum_index]: 0
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: pdf417._SubMode.prototype,
        [_Enum__name]: "subLower",
        [_Enum_index]: 1
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: pdf417._SubMode.prototype,
        [_Enum__name]: "subMixed",
        [_Enum_index]: 2
      });
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: pdf417._EncodingMode.prototype,
        [_Enum__name]: "encText",
        [_Enum_index]: 0
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: pdf417._EncodingMode.prototype,
        [_Enum__name]: "encNumeric",
        [_Enum_index]: 1
      });
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: pdf417._EncodingMode.prototype,
        [_Enum__name]: "encBinary",
        [_Enum_index]: 2
      });
    },
    get C60() {
      return C[60] = dart.constList([C[61] || CT.C61, C[62] || CT.C62, C[63] || CT.C63], pdf417._EncodingMode);
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: pdf417._SubMode.prototype,
        [_Enum__name]: "subPunct",
        [_Enum_index]: 3
      });
    },
    get C64() {
      return C[64] = dart.constList([C[57] || CT.C57, C[58] || CT.C58, C[59] || CT.C59, C[65] || CT.C65], pdf417._SubMode);
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: barcode_exception.BarcodeException.prototype,
        [BarcodeException_message]: "Too much data to encode"
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: datamatrix._CodeSize.prototype,
        [blockCount$]: 1,
        [eccCount$]: 5,
        [regionCountVertical$]: 1,
        [regionCountHorizontal$]: 1,
        [columns$]: 10,
        [rows$]: 10
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: datamatrix._CodeSize.prototype,
        [blockCount$]: 1,
        [eccCount$]: 7,
        [regionCountVertical$]: 1,
        [regionCountHorizontal$]: 1,
        [columns$]: 12,
        [rows$]: 12
      });
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: datamatrix._CodeSize.prototype,
        [blockCount$]: 1,
        [eccCount$]: 10,
        [regionCountVertical$]: 1,
        [regionCountHorizontal$]: 1,
        [columns$]: 14,
        [rows$]: 14
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: datamatrix._CodeSize.prototype,
        [blockCount$]: 1,
        [eccCount$]: 12,
        [regionCountVertical$]: 1,
        [regionCountHorizontal$]: 1,
        [columns$]: 16,
        [rows$]: 16
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: datamatrix._CodeSize.prototype,
        [blockCount$]: 1,
        [eccCount$]: 14,
        [regionCountVertical$]: 1,
        [regionCountHorizontal$]: 1,
        [columns$]: 18,
        [rows$]: 18
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: datamatrix._CodeSize.prototype,
        [blockCount$]: 1,
        [eccCount$]: 18,
        [regionCountVertical$]: 1,
        [regionCountHorizontal$]: 1,
        [columns$]: 20,
        [rows$]: 20
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: datamatrix._CodeSize.prototype,
        [blockCount$]: 1,
        [eccCount$]: 20,
        [regionCountVertical$]: 1,
        [regionCountHorizontal$]: 1,
        [columns$]: 22,
        [rows$]: 22
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: datamatrix._CodeSize.prototype,
        [blockCount$]: 1,
        [eccCount$]: 24,
        [regionCountVertical$]: 1,
        [regionCountHorizontal$]: 1,
        [columns$]: 24,
        [rows$]: 24
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: datamatrix._CodeSize.prototype,
        [blockCount$]: 1,
        [eccCount$]: 28,
        [regionCountVertical$]: 1,
        [regionCountHorizontal$]: 1,
        [columns$]: 26,
        [rows$]: 26
      });
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: datamatrix._CodeSize.prototype,
        [blockCount$]: 1,
        [eccCount$]: 36,
        [regionCountVertical$]: 2,
        [regionCountHorizontal$]: 2,
        [columns$]: 32,
        [rows$]: 32
      });
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: datamatrix._CodeSize.prototype,
        [blockCount$]: 1,
        [eccCount$]: 42,
        [regionCountVertical$]: 2,
        [regionCountHorizontal$]: 2,
        [columns$]: 36,
        [rows$]: 36
      });
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: datamatrix._CodeSize.prototype,
        [blockCount$]: 1,
        [eccCount$]: 48,
        [regionCountVertical$]: 2,
        [regionCountHorizontal$]: 2,
        [columns$]: 40,
        [rows$]: 40
      });
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: datamatrix._CodeSize.prototype,
        [blockCount$]: 1,
        [eccCount$]: 56,
        [regionCountVertical$]: 2,
        [regionCountHorizontal$]: 2,
        [columns$]: 44,
        [rows$]: 44
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: datamatrix._CodeSize.prototype,
        [blockCount$]: 1,
        [eccCount$]: 68,
        [regionCountVertical$]: 2,
        [regionCountHorizontal$]: 2,
        [columns$]: 48,
        [rows$]: 48
      });
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: datamatrix._CodeSize.prototype,
        [blockCount$]: 2,
        [eccCount$]: 84,
        [regionCountVertical$]: 2,
        [regionCountHorizontal$]: 2,
        [columns$]: 52,
        [rows$]: 52
      });
    },
    get C83() {
      return C[83] = dart.const({
        __proto__: datamatrix._CodeSize.prototype,
        [blockCount$]: 2,
        [eccCount$]: 112,
        [regionCountVertical$]: 4,
        [regionCountHorizontal$]: 4,
        [columns$]: 64,
        [rows$]: 64
      });
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: datamatrix._CodeSize.prototype,
        [blockCount$]: 4,
        [eccCount$]: 144,
        [regionCountVertical$]: 4,
        [regionCountHorizontal$]: 4,
        [columns$]: 72,
        [rows$]: 72
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: datamatrix._CodeSize.prototype,
        [blockCount$]: 4,
        [eccCount$]: 192,
        [regionCountVertical$]: 4,
        [regionCountHorizontal$]: 4,
        [columns$]: 80,
        [rows$]: 80
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: datamatrix._CodeSize.prototype,
        [blockCount$]: 4,
        [eccCount$]: 224,
        [regionCountVertical$]: 4,
        [regionCountHorizontal$]: 4,
        [columns$]: 88,
        [rows$]: 88
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: datamatrix._CodeSize.prototype,
        [blockCount$]: 4,
        [eccCount$]: 272,
        [regionCountVertical$]: 4,
        [regionCountHorizontal$]: 4,
        [columns$]: 96,
        [rows$]: 96
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: datamatrix._CodeSize.prototype,
        [blockCount$]: 6,
        [eccCount$]: 336,
        [regionCountVertical$]: 4,
        [regionCountHorizontal$]: 4,
        [columns$]: 104,
        [rows$]: 104
      });
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: datamatrix._CodeSize.prototype,
        [blockCount$]: 6,
        [eccCount$]: 408,
        [regionCountVertical$]: 6,
        [regionCountHorizontal$]: 6,
        [columns$]: 120,
        [rows$]: 120
      });
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: datamatrix._CodeSize.prototype,
        [blockCount$]: 8,
        [eccCount$]: 496,
        [regionCountVertical$]: 6,
        [regionCountHorizontal$]: 6,
        [columns$]: 132,
        [rows$]: 132
      });
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: datamatrix._CodeSize.prototype,
        [blockCount$]: 10,
        [eccCount$]: 620,
        [regionCountVertical$]: 6,
        [regionCountHorizontal$]: 6,
        [columns$]: 144,
        [rows$]: 144
      });
    },
    get C67() {
      return C[67] = dart.constList([C[68] || CT.C68, C[69] || CT.C69, C[70] || CT.C70, C[71] || CT.C71, C[72] || CT.C72, C[73] || CT.C73, C[74] || CT.C74, C[75] || CT.C75, C[76] || CT.C76, C[77] || CT.C77, C[78] || CT.C78, C[79] || CT.C79, C[80] || CT.C80, C[81] || CT.C81, C[82] || CT.C82, C[83] || CT.C83, C[84] || CT.C84, C[85] || CT.C85, C[86] || CT.C86, C[87] || CT.C87, C[88] || CT.C88, C[89] || CT.C89, C[90] || CT.C90, C[91] || CT.C91], datamatrix._CodeSize);
    },
    get C93() {
      return C[93] = dart.const({
        __proto__: codabar.BarcodeCodabarStartStop.prototype,
        [_Enum__name]: "C",
        [_Enum_index]: 2
      });
    },
    get C94() {
      return C[94] = dart.const({
        __proto__: codabar.BarcodeCodabarStartStop.prototype,
        [_Enum__name]: "D",
        [_Enum_index]: 3
      });
    },
    get C92() {
      return C[92] = dart.constList([C[29] || CT.C29, C[30] || CT.C30, C[93] || CT.C93, C[94] || CT.C94], codabar.BarcodeCodabarStartStop);
    },
    get C95() {
      return C[95] = dart.constList([65, 66, 67, 68, 78, 84, 42, 69], core.int);
    },
    get C96() {
      return C[96] = dart.constList([0, 13, 0, 0, 0, 0, 33, 39, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 91, 93, 123, 125], core.int);
    },
    get C97() {
      return C[97] = dart.const({
        __proto__: barcode_exception.BarcodeException.prototype,
        [BarcodeException_message]: "Unable to find the Galois field"
      });
    },
    get C98() {
      return C[98] = dart.const({
        __proto__: barcode_exception.BarcodeException.prototype,
        [BarcodeException_message]: "Data too large for user specified layer"
      });
    },
    get C99() {
      return C[99] = dart.const({
        __proto__: barcode_exception.BarcodeException.prototype,
        [BarcodeException_message]: "Data too large for an aztec code"
      });
    },
    get C100() {
      return C[100] = dart.constList([4, 6, 6, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12], core.int);
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: aztec._EncodingMode.prototype,
        [_Enum__name]: "mode_upper",
        [_Enum_index]: 0
      });
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: aztec._EncodingMode.prototype,
        [_Enum__name]: "mode_lower",
        [_Enum_index]: 1
      });
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: aztec._EncodingMode.prototype,
        [_Enum__name]: "mode_digit",
        [_Enum_index]: 2
      });
    },
    get C105() {
      return C[105] = dart.const({
        __proto__: aztec._EncodingMode.prototype,
        [_Enum__name]: "mode_mixed",
        [_Enum_index]: 3
      });
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: aztec._EncodingMode.prototype,
        [_Enum__name]: "mode_punct",
        [_Enum_index]: 4
      });
    },
    get C101() {
      return C[101] = dart.constList([C[102] || CT.C102, C[103] || CT.C103, C[104] || CT.C104, C[105] || CT.C105, C[106] || CT.C106], aztec._EncodingMode);
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: aztec._State.prototype,
        [bitCount$]: 0,
        [bShiftByteCount$]: 0,
        [tokens$]: null,
        [mode$]: C[102] || CT.C102
      });
    },
    get C109() {
      return C[109] = dart.constMap(aztec._EncodingMode, core.int, [C[102] || CT.C102, 0, C[103] || CT.C103, 327708, C[104] || CT.C104, 327710, C[105] || CT.C105, 327709, C[106] || CT.C106, 656318]);
    },
    get C110() {
      return C[110] = dart.constMap(aztec._EncodingMode, core.int, [C[102] || CT.C102, 590318, C[103] || CT.C103, 0, C[104] || CT.C104, 327710, C[105] || CT.C105, 327709, C[106] || CT.C106, 656318]);
    },
    get C111() {
      return C[111] = dart.constMap(aztec._EncodingMode, core.int, [C[102] || CT.C102, 262158, C[103] || CT.C103, 590300, C[104] || CT.C104, 0, C[105] || CT.C105, 590301, C[106] || CT.C106, 932798]);
    },
    get C112() {
      return C[112] = dart.constMap(aztec._EncodingMode, core.int, [C[102] || CT.C102, 327709, C[103] || CT.C103, 327708, C[104] || CT.C104, 656318, C[105] || CT.C105, 0, C[106] || CT.C106, 327710]);
    },
    get C113() {
      return C[113] = dart.constMap(aztec._EncodingMode, core.int, [C[102] || CT.C102, 327711, C[103] || CT.C103, 656380, C[104] || CT.C104, 656382, C[105] || CT.C105, 656381, C[106] || CT.C106, 0]);
    },
    get C108() {
      return C[108] = dart.constMap(aztec._EncodingMode, T.MapOf_EncodingMode$int(), [C[102] || CT.C102, C[109] || CT.C109, C[103] || CT.C103, C[110] || CT.C110, C[104] || CT.C104, C[111] || CT.C111, C[105] || CT.C105, C[112] || CT.C112, C[106] || CT.C106, C[113] || CT.C113]);
    },
    get C115() {
      return C[115] = dart.constMap(aztec._EncodingMode, core.int, [C[106] || CT.C106, 0]);
    },
    get C116() {
      return C[116] = dart.constMap(aztec._EncodingMode, core.int, [C[106] || CT.C106, 0, C[102] || CT.C102, 28]);
    },
    get C117() {
      return C[117] = dart.constMap(aztec._EncodingMode, core.int, [C[106] || CT.C106, 0, C[102] || CT.C102, 15]);
    },
    get C114() {
      return C[114] = dart.constMap(aztec._EncodingMode, T.MapOf_EncodingMode$int(), [C[102] || CT.C102, C[115] || CT.C115, C[103] || CT.C103, C[116] || CT.C116, C[105] || CT.C105, C[115] || CT.C115, C[104] || CT.C104, C[117] || CT.C117]);
    }
  }, false);
  var C = Array(118).fill(void 0);
  var I = [
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/barcode-2.2.3/lib/src/barcode_1d.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/barcode-2.2.3/lib/src/barcode.dart",
    "package:barcode/src/barcode.dart",
    "package:barcode/src/barcode_1d.dart",
    "package:barcode/src/ean.dart",
    "package:barcode/src/upce.dart",
    "package:barcode/src/upca.dart",
    "package:barcode/src/telepen.dart",
    "package:barcode/src/barcode_hm.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/barcode-2.2.3/lib/src/barcode_hm.dart",
    "package:barcode/src/rm4scc.dart",
    "package:barcode/src/qrcode.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/barcode-2.2.3/lib/src/qrcode.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/barcode-2.2.3/lib/src/barcode_2d.dart",
    "package:barcode/src/barcode_2d.dart",
    "package:barcode/src/pdf417.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/barcode-2.2.3/lib/src/itf.dart",
    "package:barcode/src/itf.dart",
    "package:barcode/src/itf16.dart",
    "package:barcode/src/itf14.dart",
    "package:barcode/src/ean13.dart",
    "package:barcode/src/isbn.dart",
    "package:barcode/src/ean8.dart",
    "package:barcode/src/ean2.dart",
    "package:barcode/src/ean5.dart",
    "package:barcode/src/datamatrix.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/barcode-2.2.3/lib/src/datamatrix.dart",
    "package:barcode/src/code93.dart",
    "package:barcode/src/code39.dart",
    "package:barcode/src/code128.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/barcode-2.2.3/lib/src/code128.dart",
    "package:barcode/src/codabar.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/barcode-2.2.3/lib/src/aztec.dart",
    "package:barcode/src/aztec.dart"
  ];
  var fallback$ = dart.privateName(upce, "BarcodeUpcE.fallback");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  var _toSvg = dart.privateName(barcode, "_toSvg");
  var _d = dart.privateName(barcode, "_d");
  var HtmlEscapeMode_escapeSlash = dart.privateName(convert, "HtmlEscapeMode.escapeSlash");
  var HtmlEscapeMode_escapeApos = dart.privateName(convert, "HtmlEscapeMode.escapeApos");
  var HtmlEscapeMode_escapeQuot = dart.privateName(convert, "HtmlEscapeMode.escapeQuot");
  var HtmlEscapeMode_escapeLtGt = dart.privateName(convert, "HtmlEscapeMode.escapeLtGt");
  var HtmlEscapeMode__name = dart.privateName(convert, "HtmlEscapeMode._name");
  var HtmlEscape_mode = dart.privateName(convert, "HtmlEscape.mode");
  var _s = dart.privateName(barcode, "_s");
  var _c = dart.privateName(barcode, "_c");
  barcode.Barcode = class Barcode extends core.Object {
    static fromType(type) {
      switch (type) {
        case C[1] || CT.C1:
          {
            return barcode.Barcode.code39();
          }
        case C[2] || CT.C2:
          {
            return barcode.Barcode.code93();
          }
        case C[3] || CT.C3:
          {
            return barcode.Barcode.code128();
          }
        case C[4] || CT.C4:
          {
            return barcode.Barcode.gs128();
          }
        case C[5] || CT.C5:
          {
            return barcode.Barcode.itf();
          }
        case C[6] || CT.C6:
          {
            return barcode.Barcode.itf14();
          }
        case C[7] || CT.C7:
          {
            return barcode.Barcode.itf16();
          }
        case C[8] || CT.C8:
          {
            return barcode.Barcode.ean13();
          }
        case C[9] || CT.C9:
          {
            return barcode.Barcode.ean8();
          }
        case C[10] || CT.C10:
          {
            return barcode.Barcode.ean5();
          }
        case C[11] || CT.C11:
          {
            return barcode.Barcode.ean2();
          }
        case C[12] || CT.C12:
          {
            return barcode.Barcode.isbn();
          }
        case C[13] || CT.C13:
          {
            return barcode.Barcode.upcA();
          }
        case C[14] || CT.C14:
          {
            return barcode.Barcode.upcE();
          }
        case C[15] || CT.C15:
          {
            return barcode.Barcode.telepen();
          }
        case C[16] || CT.C16:
          {
            return barcode.Barcode.codabar();
          }
        case C[17] || CT.C17:
          {
            return barcode.Barcode.rm4scc();
          }
        case C[18] || CT.C18:
          {
            return barcode.Barcode.qrCode();
          }
        case C[19] || CT.C19:
          {
            return barcode.Barcode.pdf417();
          }
        case C[20] || CT.C20:
          {
            return barcode.Barcode.dataMatrix();
          }
        case C[21] || CT.C21:
          {
            return barcode.Barcode.aztec();
          }
        default:
          {
            dart.throw(new core.UnimplementedError.new("Barcode " + dart.str(type) + " not supported"));
          }
      }
    }
    static ['_#fromType#tearOff'](type) {
      return barcode.Barcode.fromType(type);
    }
    static code39() {
      return C[22] || CT.C22;
    }
    static code93() {
      return C[23] || CT.C23;
    }
    static code128(opts) {
      let useCode128A = opts && 'useCode128A' in opts ? opts.useCode128A : true;
      let useCode128B = opts && 'useCode128B' in opts ? opts.useCode128B : true;
      let useCode128C = opts && 'useCode128C' in opts ? opts.useCode128C : true;
      let escapes = opts && 'escapes' in opts ? opts.escapes : false;
      return new code128.BarcodeCode128.new(useCode128A, useCode128B, useCode128C, false, escapes);
    }
    static gs128(opts) {
      let useCode128A = opts && 'useCode128A' in opts ? opts.useCode128A : true;
      let useCode128B = opts && 'useCode128B' in opts ? opts.useCode128B : true;
      let useCode128C = opts && 'useCode128C' in opts ? opts.useCode128C : true;
      let escapes = opts && 'escapes' in opts ? opts.escapes : false;
      return new code128.BarcodeCode128.new(useCode128A, useCode128B, useCode128C, true, escapes);
    }
    static itf14(opts) {
      let drawBorder = opts && 'drawBorder' in opts ? opts.drawBorder : true;
      let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : null;
      let quietWidth = opts && 'quietWidth' in opts ? opts.quietWidth : null;
      return new itf14.BarcodeItf14.new(drawBorder, borderWidth, quietWidth);
    }
    static itf16(opts) {
      let drawBorder = opts && 'drawBorder' in opts ? opts.drawBorder : true;
      let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : null;
      let quietWidth = opts && 'quietWidth' in opts ? opts.quietWidth : null;
      return new itf16.BarcodeItf16.new(drawBorder, borderWidth, quietWidth);
    }
    static itf(opts) {
      let addChecksum = opts && 'addChecksum' in opts ? opts.addChecksum : false;
      let zeroPrepend = opts && 'zeroPrepend' in opts ? opts.zeroPrepend : false;
      let drawBorder = opts && 'drawBorder' in opts ? opts.drawBorder : false;
      let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : null;
      let quietWidth = opts && 'quietWidth' in opts ? opts.quietWidth : null;
      let fixedLength = opts && 'fixedLength' in opts ? opts.fixedLength : null;
      return new itf.BarcodeItf.new(addChecksum, zeroPrepend, drawBorder, borderWidth, quietWidth, fixedLength);
    }
    static ean13(opts) {
      let drawEndChar = opts && 'drawEndChar' in opts ? opts.drawEndChar : false;
      return new ean13.BarcodeEan13.new(drawEndChar);
    }
    static ean8(opts) {
      let drawSpacers = opts && 'drawSpacers' in opts ? opts.drawSpacers : false;
      return new ean8.BarcodeEan8.new(drawSpacers);
    }
    static ean5() {
      return C[24] || CT.C24;
    }
    static ean2() {
      return C[25] || CT.C25;
    }
    static isbn(opts) {
      let drawEndChar = opts && 'drawEndChar' in opts ? opts.drawEndChar : false;
      let drawIsbn = opts && 'drawIsbn' in opts ? opts.drawIsbn : true;
      return new isbn.BarcodeIsbn.new(drawEndChar, drawIsbn);
    }
    static upcA() {
      return C[0] || CT.C0;
    }
    static upcE(opts) {
      let fallback = opts && 'fallback' in opts ? opts.fallback : false;
      return new upce.BarcodeUpcE.new(fallback);
    }
    static telepen() {
      return C[26] || CT.C26;
    }
    static qrCode(opts) {
      let typeNumber = opts && 'typeNumber' in opts ? opts.typeNumber : null;
      let errorCorrectLevel = opts && 'errorCorrectLevel' in opts ? opts.errorCorrectLevel : C[27] || CT.C27;
      return new qrcode.BarcodeQR.new(typeNumber, errorCorrectLevel);
    }
    static pdf417(opts) {
      let securityLevel = opts && 'securityLevel' in opts ? opts.securityLevel : C[28] || CT.C28;
      let moduleHeight = opts && 'moduleHeight' in opts ? opts.moduleHeight : 2;
      let preferredRatio = opts && 'preferredRatio' in opts ? opts.preferredRatio : 3;
      return new pdf417.BarcodePDF417.new(securityLevel, moduleHeight, preferredRatio);
    }
    static codabar(opts) {
      let start = opts && 'start' in opts ? opts.start : C[29] || CT.C29;
      let stop = opts && 'stop' in opts ? opts.stop : C[30] || CT.C30;
      let printStartStop = opts && 'printStartStop' in opts ? opts.printStartStop : false;
      let explicitStartStop = opts && 'explicitStartStop' in opts ? opts.explicitStartStop : false;
      return new codabar.BarcodeCodabar.new(start, stop, printStartStop, explicitStartStop);
    }
    static rm4scc() {
      return C[31] || CT.C31;
    }
    static dataMatrix() {
      return C[32] || CT.C32;
    }
    static aztec(opts) {
      let minECCPercent = opts && 'minECCPercent' in opts ? opts.minECCPercent : 33;
      let userSpecifiedLayers = opts && 'userSpecifiedLayers' in opts ? opts.userSpecifiedLayers : 0;
      return new aztec.BarcodeAztec.new(minECCPercent, userSpecifiedLayers);
    }
    make(data, opts) {
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let drawText = opts && 'drawText' in opts ? opts.drawText : false;
      let fontHeight = opts && 'fontHeight' in opts ? opts.fontHeight : null;
      let textPadding = opts && 'textPadding' in opts ? opts.textPadding : null;
      return this.makeBytes(convert.utf8.encoder.convert(data), {width: width, height: height, drawText: drawText, fontHeight: fontHeight, textPadding: textPadding});
    }
    isValid(data) {
      try {
        this.verify(data);
      } catch (e) {
        let _ = dart.getThrown(e);
        if (core.Object.is(_)) {
          return false;
        } else
          throw e;
      }
      return true;
    }
    isValidBytes(data) {
      try {
        this.verifyBytes(data);
      } catch (e) {
        let _ = dart.getThrown(e);
        if (core.Object.is(_)) {
          return false;
        } else
          throw e;
      }
      return true;
    }
    verify(data) {
      return this.verifyBytes(convert.utf8.encoder.convert(data));
    }
    verifyBytes(data) {
      if (data[$length] > this.maxLength) {
        dart.throw(new barcode_exception.BarcodeException.new("Unable to encode \"" + dart.str(data) + "\", maximum length is " + dart.str(this.maxLength) + " for " + this.name + " Barcode"));
      }
      if (data[$length] < this.minLength) {
        dart.throw(new barcode_exception.BarcodeException.new("Unable to encode \"" + dart.str(data) + "\", minimum length is " + dart.str(this.minLength) + " for " + this.name + " Barcode"));
      }
      let chr = this.charSet[$toSet]();
      for (let code of data) {
        if (!chr.contains(code)) {
          dart.throw(new barcode_exception.BarcodeException.new("Unable to encode \"" + core.String.fromCharCode(code) + "\" to " + this.name + " Barcode"));
        }
      }
    }
    toSvg(data, opts) {
      let x = opts && 'x' in opts ? opts.x : 0;
      let y = opts && 'y' in opts ? opts.y : 0;
      let width = opts && 'width' in opts ? opts.width : 200;
      let height = opts && 'height' in opts ? opts.height : 80;
      let drawText = opts && 'drawText' in opts ? opts.drawText : true;
      let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : "monospace";
      let fontHeight = opts && 'fontHeight' in opts ? opts.fontHeight : null;
      let textPadding = opts && 'textPadding' in opts ? opts.textPadding : null;
      let color = opts && 'color' in opts ? opts.color : 0;
      let fullSvg = opts && 'fullSvg' in opts ? opts.fullSvg : true;
      let baseline = opts && 'baseline' in opts ? opts.baseline : 0.75;
      fontHeight == null ? fontHeight = height * 0.2 : null;
      textPadding == null ? textPadding = height * 0.05 : null;
      let recipe = this.make(data, {width: width[$toDouble](), height: height[$toDouble](), drawText: drawText, fontHeight: fontHeight, textPadding: textPadding});
      return this[_toSvg](recipe, x, y, width, height, fontFamily, fontHeight, textPadding, color, fullSvg, baseline);
    }
    toSvgBytes(data, opts) {
      let x = opts && 'x' in opts ? opts.x : 0;
      let y = opts && 'y' in opts ? opts.y : 0;
      let width = opts && 'width' in opts ? opts.width : 200;
      let height = opts && 'height' in opts ? opts.height : 80;
      let drawText = opts && 'drawText' in opts ? opts.drawText : true;
      let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : "monospace";
      let fontHeight = opts && 'fontHeight' in opts ? opts.fontHeight : null;
      let textPadding = opts && 'textPadding' in opts ? opts.textPadding : null;
      let color = opts && 'color' in opts ? opts.color : 0;
      let fullSvg = opts && 'fullSvg' in opts ? opts.fullSvg : true;
      let baseline = opts && 'baseline' in opts ? opts.baseline : 0.75;
      fontHeight == null ? fontHeight = height * 0.2 : null;
      textPadding == null ? textPadding = height * 0.05 : null;
      let recipe = this.makeBytes(data, {width: width[$toDouble](), height: height[$toDouble](), drawText: drawText, fontHeight: fontHeight, textPadding: textPadding});
      return this[_toSvg](recipe, x, y, width, height, fontFamily, fontHeight, textPadding, color, fullSvg, baseline);
    }
    [_d](d) {
      if (!(d !== 1 / 0)) dart.assertFailed(null, I[1], 622, 12, "d != double.infinity");
      return d[$toStringAsFixed](5);
    }
    [_s](s) {
      let esc = C[33] || CT.C33;
      return esc.convert(s);
    }
    [_c](c) {
      return "#" + (c & 16777215)[$toRadixString](16)[$padLeft](6, "0");
    }
    [_toSvg](recipe, x, y, width, height, fontFamily, fontHeight, textPadding, color, fullSvg, baseline) {
      let path = new core.StringBuffer.new();
      let tSpan = new core.StringBuffer.new();
      for (let elem of recipe) {
        if (barcode_operations.BarcodeBar.is(elem)) {
          if (elem.black) {
            path.write("M " + this[_d](x + elem.left) + " " + this[_d](y + elem.top) + " ");
            path.write("h " + this[_d](elem.width) + " ");
            path.write("v " + this[_d](elem.height) + " ");
            path.write("h " + this[_d](-elem.width) + " ");
            path.write("z ");
          }
        } else if (barcode_operations.BarcodeText.is(elem)) {
          let lY = y + elem.top + elem.height * baseline;
          let lX = null;
          let anchor = null;
          switch (elem.align) {
            case C[35] || CT.C35:
              {
                lX = x + elem.left;
                anchor = "start";
                break;
              }
            case C[36] || CT.C36:
              {
                lX = x + elem.left + elem.width / 2;
                anchor = "middle";
                break;
              }
            case C[37] || CT.C37:
              {
                lX = x + elem.left + elem.width;
                anchor = "end";
                break;
              }
          }
          tSpan.write("<tspan style=\"text-anchor: " + anchor + "\" x=\"" + this[_d](lX) + "\" y=\"" + this[_d](lY) + "\">" + this[_s](elem.text) + "</tspan>");
        }
      }
      let output = new core.StringBuffer.new();
      if (fullSvg) {
        output.write("<svg viewBox=\"" + this[_d](x) + " " + this[_d](y) + " " + this[_d](width) + " " + this[_d](height) + "\" xmlns=\"http://www.w3.org/2000/svg\">");
      }
      output.write("<path d=\"" + dart.str(path) + "\" style=\"fill: " + this[_c](color) + "\"/>");
      output.write("<text style=\"fill: " + this[_c](color) + "; font-family: &quot;" + this[_s](fontFamily) + "&quot;; font-size: " + this[_d](fontHeight) + "px\" x=\"" + this[_d](x) + "\" y=\"" + this[_d](y) + "\">" + dart.str(tSpan) + "</text>");
      if (fullSvg) {
        output.write("</svg>");
      }
      return output.toString();
    }
    get maxLength() {
      return 1000;
    }
    get minLength() {
      return 1;
    }
    toString() {
      return "Barcode " + this.name;
    }
  };
  (barcode.Barcode.new = function() {
    ;
  }).prototype = barcode.Barcode.prototype;
  dart.addTypeTests(barcode.Barcode);
  dart.addTypeCaches(barcode.Barcode);
  dart.setMethodSignature(barcode.Barcode, () => ({
    __proto__: dart.getMethods(barcode.Barcode.__proto__),
    make: dart.fnType(core.Iterable$(barcode_operations.BarcodeElement), [core.String], {drawText: core.bool, fontHeight: dart.nullable(core.double), textPadding: dart.nullable(core.double)}, {height: core.double, width: core.double}),
    isValid: dart.fnType(core.bool, [core.String]),
    isValidBytes: dart.fnType(core.bool, [typed_data.Uint8List]),
    verify: dart.fnType(dart.void, [core.String]),
    verifyBytes: dart.fnType(dart.void, [typed_data.Uint8List]),
    toSvg: dart.fnType(core.String, [core.String], {baseline: core.double, color: core.int, drawText: core.bool, fontFamily: core.String, fontHeight: dart.nullable(core.double), fullSvg: core.bool, height: core.double, textPadding: dart.nullable(core.double), width: core.double, x: core.double, y: core.double}, {}),
    toSvgBytes: dart.fnType(core.String, [typed_data.Uint8List], {baseline: core.double, color: core.int, drawText: core.bool, fontFamily: core.String, fontHeight: dart.nullable(core.double), fullSvg: core.bool, height: core.double, textPadding: dart.nullable(core.double), width: core.double, x: core.double, y: core.double}, {}),
    [_d]: dart.fnType(core.String, [core.double]),
    [_s]: dart.fnType(core.String, [core.String]),
    [_c]: dart.fnType(core.String, [core.int]),
    [_toSvg]: dart.fnType(core.String, [core.Iterable$(barcode_operations.BarcodeElement), core.double, core.double, core.double, core.double, core.String, core.double, core.double, core.int, core.bool, core.double])
  }));
  dart.setStaticMethodSignature(barcode.Barcode, () => ['fromType', 'code39', 'code93', 'code128', 'gs128', 'itf14', 'itf16', 'itf', 'ean13', 'ean8', 'ean5', 'ean2', 'isbn', 'upcA', 'upcE', 'telepen', 'qrCode', 'pdf417', 'codabar', 'rm4scc', 'dataMatrix', 'aztec']);
  dart.setGetterSignature(barcode.Barcode, () => ({
    __proto__: dart.getGetters(barcode.Barcode.__proto__),
    maxLength: core.int,
    minLength: core.int
  }));
  dart.setLibraryUri(barcode.Barcode, I[2]);
  dart.setStaticFieldSignature(barcode.Barcode, () => ['_infiniteMaxLength']);
  dart.defineExtensionMethods(barcode.Barcode, ['toString']);
  dart.defineLazy(barcode.Barcode, {
    /*barcode.Barcode._infiniteMaxLength*/get _infiniteMaxLength() {
      return 1000;
    }
  }, false);
  barcode_1d.Barcode1D = class Barcode1D extends barcode.Barcode {
    makeBytes(data, opts) {
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let drawText = opts && 'drawText' in opts ? opts.drawText : false;
      let fontHeight = opts && 'fontHeight' in opts ? opts.fontHeight : null;
      let textPadding = opts && 'textPadding' in opts ? opts.textPadding : null;
      return new (T.SyncIterableOfBarcodeElement()).new((function* makeBytes() {
        if (!(width > 0)) dart.assertFailed(null, I[0], 42, 12, "width > 0");
        if (!(height > 0)) dart.assertFailed(null, I[0], 43, 12, "height > 0");
        if (!(!drawText || fontHeight != null)) dart.assertFailed(null, I[0], 44, 12, "!drawText || fontHeight != null");
        fontHeight == null ? fontHeight = 0.0 : null;
        textPadding == null ? textPadding = 0 : null;
        let text = convert.utf8.decoder.convert(data);
        let bits = this.convert(text)[$toList]();
        if (bits[$isEmpty]) {
          return;
        }
        let top = this.marginTop(drawText, width, height, fontHeight, textPadding);
        let left = this.marginLeft(drawText, width, height, fontHeight, textPadding);
        let right = this.marginRight(drawText, width, height, fontHeight, textPadding);
        let lineWidth = (width - left - right) / bits[$length];
        let color = bits[$first];
        let count = 1;
        for (let i = 1; i < bits[$length]; i = i + 1) {
          if (color === bits[$_get](i)) {
            count = count + 1;
            continue;
          }
          yield new barcode_operations.BarcodeBar.new({left: left + (i - count) * lineWidth, top: top, width: count * lineWidth, height: this.getHeight(i - count, count, width, height - top, fontHeight, textPadding, drawText), black: color});
          color = bits[$_get](i);
          count = 1;
        }
        let l = bits[$length];
        yield new barcode_operations.BarcodeBar.new({left: left + (l - count) * lineWidth, top: top, width: count * lineWidth, height: this.getHeight(l - count, count, width, height - top, fontHeight, textPadding, drawText), black: color});
        if (drawText) {
          yield* this.makeText(text, width, height, fontHeight, textPadding, lineWidth);
        }
      }).bind(this));
    }
    getHeight(index, count, width, height, fontHeight, textPadding, drawText) {
      return height - (drawText ? fontHeight + textPadding : 0);
    }
    marginTop(drawText, width, height, fontHeight, textPadding) {
      return 0.0;
    }
    marginLeft(drawText, width, height, fontHeight, textPadding) {
      return 0.0;
    }
    marginRight(drawText, width, height, fontHeight, textPadding) {
      return 0.0;
    }
    makeText(data, width, height, fontHeight, textPadding, lineWidth) {
      return new (T.SyncIterableOfBarcodeElement()).new(function* makeText() {
        yield new barcode_operations.BarcodeText.new({left: 0.0, top: height - fontHeight, width: width, height: fontHeight, text: data, align: barcode_operations.BarcodeTextAlign.center});
      });
    }
    add(data, count) {
      return new (T.SyncIterableOfbool()).new(function* add() {
        for (let i = 0; i < count; i = i + 1) {
          yield (1 & data[$rightShift](i)) === 1;
        }
      });
    }
    toHex(data) {
      let intermediate = "";
      for (let bit of this.convert(data)) {
        intermediate = intermediate + (bit ? "1" : "0");
      }
      let result = "";
      while (intermediate.length > 8) {
        let sub = intermediate[$substring](intermediate.length - 8);
        result = result + core.int.parse(sub, {radix: 2})[$toRadixString](16);
        intermediate = intermediate[$substring](0, intermediate.length - 8);
      }
      result = result + core.int.parse(intermediate, {radix: 2})[$toRadixString](16);
      return result;
    }
    getText(data) {
      let result = new core.StringBuffer.new();
      for (let elem of this.makeText(data, 200.0, 200.0, 10.0, 5.0, 10.0)) {
        if (barcode_operations.BarcodeText.is(elem)) {
          result.write(elem.text);
        }
      }
      return result.toString();
    }
  };
  (barcode_1d.Barcode1D.new = function() {
    barcode_1d.Barcode1D.__proto__.new.call(this);
    ;
  }).prototype = barcode_1d.Barcode1D.prototype;
  dart.addTypeTests(barcode_1d.Barcode1D);
  dart.addTypeCaches(barcode_1d.Barcode1D);
  dart.setMethodSignature(barcode_1d.Barcode1D, () => ({
    __proto__: dart.getMethods(barcode_1d.Barcode1D.__proto__),
    makeBytes: dart.fnType(core.Iterable$(barcode_operations.BarcodeElement), [typed_data.Uint8List], {drawText: core.bool, fontHeight: dart.nullable(core.double), textPadding: dart.nullable(core.double)}, {height: core.double, width: core.double}),
    getHeight: dart.fnType(core.double, [core.int, core.int, core.double, core.double, core.double, core.double, core.bool]),
    marginTop: dart.fnType(core.double, [core.bool, core.double, core.double, core.double, core.double]),
    marginLeft: dart.fnType(core.double, [core.bool, core.double, core.double, core.double, core.double]),
    marginRight: dart.fnType(core.double, [core.bool, core.double, core.double, core.double, core.double]),
    makeText: dart.fnType(core.Iterable$(barcode_operations.BarcodeElement), [core.String, core.double, core.double, core.double, core.double, core.double]),
    add: dart.fnType(core.Iterable$(core.bool), [core.int, core.int]),
    toHex: dart.fnType(core.String, [core.String]),
    getText: dart.fnType(core.String, [core.String])
  }));
  dart.setLibraryUri(barcode_1d.Barcode1D, I[3]);
  dart.setStaticFieldSignature(barcode_1d.Barcode1D, () => ['defaultTextPadding']);
  dart.defineLazy(barcode_1d.Barcode1D, {
    /*barcode_1d.Barcode1D.defaultTextPadding*/get defaultTextPadding() {
      return 0;
    }
  }, false);
  ean.BarcodeEan = class BarcodeEan extends barcode_1d.Barcode1D {
    get charSet() {
      return T.ListOfint().generate(10, dart.fn(index => index + 48, T.intToint()));
    }
    checkLength(data, length) {
      if (data.length === length - 1) {
        data = data + this.checkSumModulo10(data);
      } else {
        if (data.length !== length) {
          dart.throw(new barcode_exception.BarcodeException.new("Unable to encode \"" + data + "\" to " + this.name + " Barcode, it is not " + dart.str(length) + " digits"));
        }
        let last = data[$substring](length - 1);
        let checksum = this.checkSumModulo10(data[$substring](0, length - 1));
        if (last !== checksum) {
          dart.throw(new barcode_exception.BarcodeException.new("Unable to encode \"" + data + "\" to " + this.name + " Barcode, checksum \"" + last + "\" should be \"" + checksum + "\""));
        }
      }
      return data;
    }
    checkSumModulo10(data) {
      let sum = 0;
      let fak = data.length;
      for (let c of data[$codeUnits]) {
        if (fak[$modulo](2) === 0) {
          sum = sum + (c - 48);
        } else {
          sum = sum + (c - 48) * 3;
        }
        fak = fak - 1;
      }
      if (sum[$modulo](10) === 0) {
        return "0";
      } else {
        return core.String.fromCharCode(10 - sum[$modulo](10) + 48);
      }
    }
    checkSumModulo11(data) {
      let sum = 0;
      let pos = 10;
      for (let c of data[$codeUnits]) {
        sum = sum + (c - 48) * pos;
        pos = pos - 1;
      }
      return core.String.fromCharCode(11 - sum[$modulo](11) + 48);
    }
    normalize(data) {
      return this.checkLength(data[$padRight](this.minLength, "0")[$substring](0, this.minLength), this.maxLength);
    }
  };
  (ean.BarcodeEan.new = function() {
    ean.BarcodeEan.__proto__.new.call(this);
    ;
  }).prototype = ean.BarcodeEan.prototype;
  dart.addTypeTests(ean.BarcodeEan);
  dart.addTypeCaches(ean.BarcodeEan);
  dart.setMethodSignature(ean.BarcodeEan, () => ({
    __proto__: dart.getMethods(ean.BarcodeEan.__proto__),
    checkLength: dart.fnType(core.String, [core.String, core.int]),
    checkSumModulo10: dart.fnType(core.String, [core.String]),
    checkSumModulo11: dart.fnType(core.String, [core.String]),
    normalize: dart.fnType(core.String, [core.String])
  }));
  dart.setGetterSignature(ean.BarcodeEan, () => ({
    __proto__: dart.getGetters(ean.BarcodeEan.__proto__),
    charSet: core.Iterable$(core.int)
  }));
  dart.setLibraryUri(ean.BarcodeEan, I[4]);
  upce.BarcodeUpcE = class BarcodeUpcE extends ean.BarcodeEan {
    get fallback() {
      return this[fallback$];
    }
    set fallback(value) {
      super.fallback = value;
    }
    static ['_#new#tearOff'](fallback) {
      return new upce.BarcodeUpcE.new(fallback);
    }
    get name() {
      return "UPC E";
    }
    get minLength() {
      return 6;
    }
    get maxLength() {
      return 12;
    }
    verifyBytes(data) {
      let text = convert.utf8.decoder.convert(data);
      if (text.length <= 8) {
        text = this.upceToUpca(text);
      }
      if (text.length < 11) {
        dart.throw(new barcode_exception.BarcodeException.new("Unable to encode \"" + text + "\", minimum length is 11 for " + this.name + " Barcode"));
      }
      let upca = this.checkLength(text, this.maxLength);
      if (!this.fallback) {
        this.upcaToUpce(upca);
      }
      super.verifyBytes(convert.utf8.encoder.convert(text));
    }
    upcaToUpce(data) {
      let exp = core.RegExp.new("^[01](\\d\\d+)([0-2]000[05-9])(\\d*)\\d$");
      let match = exp.firstMatch(data);
      if (match == null) {
        dart.throw(new barcode_exception.BarcodeException.new("Unable to convert \"" + data + "\" to " + this.name + " Barcode"));
      }
      let left = match.group(1);
      let right = match.group(3);
      let last = null;
      switch (match.group(2)) {
        case "00000":
          {
            if (dart.nullCheck(left).length === 2) {
              last = "0";
            } else if (left.length === 3) {
              last = "3";
            } else if (left.length === 4) {
              last = "4";
            }
            break;
          }
        case "10000":
          {
            last = "1";
            break;
          }
        case "20000":
          {
            last = "2";
            break;
          }
        case "00005":
          {
            last = "5";
            break;
          }
        case "00006":
          {
            last = "6";
            break;
          }
        case "00007":
          {
            last = "7";
            break;
          }
        case "00008":
          {
            last = "8";
            break;
          }
        case "00009":
          {
            last = "9";
            break;
          }
      }
      if (last == null) {
        dart.throw(new barcode_exception.BarcodeException.new("Unable to convert \"" + data + "\" to " + this.name + " Barcode"));
      }
      return dart.nullCheck(left) + dart.nullCheck(right) + dart.notNull(last);
    }
    upceToUpca(data) {
      let t0;
      let exp = core.RegExp.new("^\\d{6,8}$");
      let match = exp.firstMatch(data);
      if (match == null) {
        dart.throw(new barcode_exception.BarcodeException.new("Unable to convert \"" + data + "\" to UPC A Barcode"));
      }
      let first = "0";
      let checksum = null;
      switch (data.length) {
        case 8:
          {
            checksum = data[$_get](7);
            first = data[$_get](0);
            data = data[$substring](1, 7);
            break;
          }
        case 7:
          {
            first = data[$_get](0);
            data = data[$substring](1, 7);
            break;
          }
      }
      if (first !== "0" && first !== "1") {
        dart.throw(new barcode_exception.BarcodeException.new("Unable to convert \"" + data + "\" to UPC A Barcode"));
      }
      let d1 = data[$_get](0);
      let d2 = data[$_get](1);
      let d3 = data[$_get](2);
      let d4 = data[$_get](3);
      let d5 = data[$_get](4);
      let d6 = data[$_get](5);
      let manufacturer = null;
      let product = null;
      switch (d6) {
        case "0":
        case "1":
        case "2":
          {
            manufacturer = d1 + d2 + d6 + "00";
            product = "00" + d3 + d4 + d5;
            break;
          }
        case "3":
          {
            manufacturer = d1 + d2 + d3 + "00";
            product = "000" + d4 + d5;
            break;
          }
        case "4":
          {
            manufacturer = d1 + d2 + d3 + d4 + "0";
            product = "0000" + d5;
            break;
          }
        default:
          {
            manufacturer = d1 + d2 + d3 + d4 + d5;
            product = "0000" + d6;
            break;
          }
      }
      data = first + manufacturer + product;
      return data + dart.notNull((t0 = checksum, t0 == null ? this.checkSumModulo10(data) : t0));
    }
    convert(data) {
      return new (T.SyncIterableOfbool()).new(() => (function* convert(data) {
        if (data.length <= 8) {
          data = this.upceToUpca(data);
        }
        data = this.checkLength(data, this.maxLength);
        let first = data[$codeUnitAt](0);
        let last = data[$codeUnitAt](11);
        try {
          data = this.upcaToUpce(data);
        } catch (e) {
          let ex = dart.getThrown(e);
          if (barcode_exception.BarcodeException.is(ex)) {
            if (this.fallback) {
              yield* (C[0] || CT.C0).convert(data);
              return;
            }
            dart.rethrow(e);
          } else
            throw e;
        }
        yield* this.add(5, 3);
        let parityRow = barcode_maps.BarcodeMaps.upce[$_get](last);
        let parity = first === 48 ? parityRow : (dart.nullCheck(parityRow) ^ 63) >>> 0;
        let index = 0;
        for (let code of data[$codeUnits]) {
          let codes = barcode_maps.BarcodeMaps.ean[$_get](code);
          if (codes == null) {
            dart.throw(new barcode_exception.BarcodeException.new("Unable to encode \"" + core.String.fromCharCode(code) + "\" to " + this.name + " Barcode"));
          }
          yield* this.add(codes[$_get]((dart.nullCheck(parity)[$rightShift](index) & 1) === 0 ? 1 : 0), 7);
          index = index + 1;
        }
        yield* this.add(42, 6);
      }).bind(this)(data));
    }
    marginLeft(drawText, width, height, fontHeight, textPadding) {
      if (!drawText) {
        return 0.0;
      }
      return fontHeight;
    }
    marginRight(drawText, width, height, fontHeight, textPadding) {
      if (!drawText) {
        return 0.0;
      }
      return fontHeight;
    }
    getHeight(index, count, width, height, fontHeight, textPadding, drawText) {
      if (!drawText) {
        return super.getHeight(index, count, width, height, fontHeight, textPadding, drawText);
      }
      let h = height - fontHeight - textPadding;
      if (index + count < 4 || index > 44) {
        return h + fontHeight / 2 + textPadding;
      }
      return h;
    }
    makeText(data, width, height, fontHeight, textPadding, lineWidth) {
      return new (T.SyncIterableOfBarcodeElement()).new(() => (function* makeText(data) {
        if (data.length <= 8) {
          data = this.upceToUpca(data);
        }
        data = this.checkLength(data, this.maxLength);
        let first = data[$substring](0, 1);
        let last = data[$substring](11, 12);
        try {
          data = this.upcaToUpce(data);
        } catch (e) {
          let ex = dart.getThrown(e);
          if (barcode_exception.BarcodeException.is(ex)) {
            if (this.fallback) {
              yield* (C[0] || CT.C0).makeText(data, width, height, fontHeight, textPadding, lineWidth);
              return;
            }
            dart.rethrow(e);
          } else
            throw e;
        }
        let w = lineWidth * 7;
        let left = this.marginLeft(true, width, height, fontHeight, textPadding);
        let right = this.marginRight(true, width, height, fontHeight, textPadding);
        yield new barcode_operations.BarcodeText.new({left: 0.0, top: height - fontHeight, width: left - lineWidth, height: fontHeight, text: first, align: barcode_operations.BarcodeTextAlign.right});
        let offset = left + lineWidth * 3;
        for (let i = 0; i < data.length; i = i + 1) {
          yield new barcode_operations.BarcodeText.new({left: offset, top: height - fontHeight, width: w, height: fontHeight, text: data[$_get](i), align: barcode_operations.BarcodeTextAlign.center});
          offset = offset + w;
        }
        yield new barcode_operations.BarcodeText.new({left: width - right + lineWidth, top: height - fontHeight, width: right - lineWidth, height: fontHeight, text: last, align: barcode_operations.BarcodeTextAlign.left});
      }).bind(this)(data));
    }
    normalize(data) {
      if (data.length <= 8) {
        data = this.upceToUpca(data[$padRight](6, "0"));
      }
      data = this.checkLength(data, this.maxLength);
      let first = data[$substring](0, 1);
      let last = data[$substring](11, 12);
      try {
        data = this.upcaToUpce(data);
      } catch (e) {
        let ex = dart.getThrown(e);
        if (barcode_exception.BarcodeException.is(ex)) {
          if (this.fallback) {
            return data;
          }
          dart.rethrow(e);
        } else
          throw e;
      }
      return first + data + last;
    }
  };
  (upce.BarcodeUpcE.new = function(fallback) {
    this[fallback$] = fallback;
    upce.BarcodeUpcE.__proto__.new.call(this);
    ;
  }).prototype = upce.BarcodeUpcE.prototype;
  dart.addTypeTests(upce.BarcodeUpcE);
  dart.addTypeCaches(upce.BarcodeUpcE);
  dart.setMethodSignature(upce.BarcodeUpcE, () => ({
    __proto__: dart.getMethods(upce.BarcodeUpcE.__proto__),
    upcaToUpce: dart.fnType(core.String, [core.String]),
    upceToUpca: dart.fnType(core.String, [core.String]),
    convert: dart.fnType(core.Iterable$(core.bool), [core.String])
  }));
  dart.setGetterSignature(upce.BarcodeUpcE, () => ({
    __proto__: dart.getGetters(upce.BarcodeUpcE.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(upce.BarcodeUpcE, I[5]);
  dart.setFieldSignature(upce.BarcodeUpcE, () => ({
    __proto__: dart.getFields(upce.BarcodeUpcE.__proto__),
    fallback: dart.finalFieldType(core.bool)
  }));
  upca.BarcodeUpcA = class BarcodeUpcA extends ean.BarcodeEan {
    static ['_#new#tearOff']() {
      return new upca.BarcodeUpcA.new();
    }
    get name() {
      return "UPC A";
    }
    get minLength() {
      return 11;
    }
    get maxLength() {
      return 12;
    }
    verifyBytes(data) {
      let text = convert.utf8.decoder.convert(data);
      this.checkLength(text, this.maxLength);
      super.verifyBytes(data);
    }
    convert(data) {
      return new (T.SyncIterableOfbool()).new(() => (function* convert(data) {
        data = this.checkLength(data, this.maxLength);
        yield* this.add(5, 3);
        let index = 0;
        for (let code of data[$codeUnits]) {
          let codes = barcode_maps.BarcodeMaps.ean[$_get](code);
          if (codes == null) {
            dart.throw(new barcode_exception.BarcodeException.new("Unable to encode \"" + core.String.fromCharCode(code) + "\" to " + this.name + " Barcode"));
          }
          if (index === 6) {
            yield* this.add(10, 5);
          }
          yield* this.add(codes[$_get](index < 6 ? 0 : 2), 7);
          index = index + 1;
        }
        yield* this.add(5, 3);
      }).bind(this)(data));
    }
    marginLeft(drawText, width, height, fontHeight, textPadding) {
      if (!drawText) {
        return 0.0;
      }
      return fontHeight;
    }
    marginRight(drawText, width, height, fontHeight, textPadding) {
      if (!drawText) {
        return 0.0;
      }
      return fontHeight;
    }
    getHeight(index, count, width, height, fontHeight, textPadding, drawText) {
      if (!drawText) {
        return super.getHeight(index, count, width, height, fontHeight, textPadding, drawText);
      }
      let h = height - fontHeight - textPadding;
      if (index + count < 11 || index > 45 && index < 49 || index > 82) {
        return h + fontHeight / 2 + textPadding;
      }
      return h;
    }
    makeText(data, width, height, fontHeight, textPadding, lineWidth) {
      return new (T.SyncIterableOfBarcodeElement()).new((function* makeText() {
        let text = this.checkLength(data, this.maxLength);
        let w = lineWidth * 7;
        let left = this.marginLeft(true, width, height, fontHeight, textPadding);
        let right = this.marginRight(true, width, height, fontHeight, textPadding);
        yield new barcode_operations.BarcodeText.new({left: 0.0, top: height - fontHeight, width: left - lineWidth, height: fontHeight, text: text[$_get](0), align: barcode_operations.BarcodeTextAlign.right});
        let offset = left + lineWidth * 10;
        for (let i = 1; i < text.length - 1; i = i + 1) {
          yield new barcode_operations.BarcodeText.new({left: offset, top: height - fontHeight, width: w, height: fontHeight, text: text[$_get](i), align: barcode_operations.BarcodeTextAlign.center});
          offset = offset + w;
          if (i === 5) {
            offset = offset + lineWidth * 5;
          }
        }
        yield new barcode_operations.BarcodeText.new({left: width - right + lineWidth, top: height - fontHeight, width: right - lineWidth, height: fontHeight, text: text[$_get](text.length - 1), align: barcode_operations.BarcodeTextAlign.left});
      }).bind(this));
    }
  };
  (upca.BarcodeUpcA.new = function() {
    upca.BarcodeUpcA.__proto__.new.call(this);
    ;
  }).prototype = upca.BarcodeUpcA.prototype;
  dart.addTypeTests(upca.BarcodeUpcA);
  dart.addTypeCaches(upca.BarcodeUpcA);
  dart.setMethodSignature(upca.BarcodeUpcA, () => ({
    __proto__: dart.getMethods(upca.BarcodeUpcA.__proto__),
    convert: dart.fnType(core.Iterable$(core.bool), [core.String])
  }));
  dart.setGetterSignature(upca.BarcodeUpcA, () => ({
    __proto__: dart.getGetters(upca.BarcodeUpcA.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(upca.BarcodeUpcA, I[6]);
  telepen.BarcodeTelepen = class BarcodeTelepen extends barcode_1d.Barcode1D {
    static ['_#new#tearOff']() {
      return new telepen.BarcodeTelepen.new();
    }
    get charSet() {
      return T.IterableOfint().generate(128);
    }
    get name() {
      return "Telepen";
    }
    convert(data) {
      return new (T.SyncIterableOfbool()).new((function* convert() {
        yield* this.add(7509, 16);
        let checksum = 0;
        for (let code of data[$codeUnits]) {
          if (code >= barcode_maps.BarcodeMaps.telepen[$length]) {
            dart.throw(new barcode_exception.BarcodeException.new("Unable to encode \"" + core.String.fromCharCode(code) + "\" to " + this.name + " Barcode"));
          }
          let codeValue = barcode_maps.BarcodeMaps.telepen[$_get](code);
          yield* this.add(codeValue, 16);
          checksum = checksum + code;
        }
        checksum = 127 - checksum[$modulo](127);
        if (checksum === 127) {
          checksum = 0;
        }
        yield* this.add(barcode_maps.BarcodeMaps.telepen[$_get](checksum), 16);
        yield* this.add(21831, 16);
      }).bind(this));
    }
  };
  (telepen.BarcodeTelepen.new = function() {
    telepen.BarcodeTelepen.__proto__.new.call(this);
    ;
  }).prototype = telepen.BarcodeTelepen.prototype;
  dart.addTypeTests(telepen.BarcodeTelepen);
  dart.addTypeCaches(telepen.BarcodeTelepen);
  dart.setMethodSignature(telepen.BarcodeTelepen, () => ({
    __proto__: dart.getMethods(telepen.BarcodeTelepen.__proto__),
    convert: dart.fnType(core.Iterable$(core.bool), [core.String])
  }));
  dart.setGetterSignature(telepen.BarcodeTelepen, () => ({
    __proto__: dart.getGetters(telepen.BarcodeTelepen.__proto__),
    charSet: core.Iterable$(core.int),
    name: core.String
  }));
  dart.setLibraryUri(telepen.BarcodeTelepen, I[7]);
  var _name = dart.privateName(core, "_name");
  barcode_hm.BarcodeHMBar = class BarcodeHMBar extends core._Enum {
    toString() {
      return "BarcodeHMBar." + this[_name];
    }
  };
  (barcode_hm.BarcodeHMBar.new = function(index, name) {
    barcode_hm.BarcodeHMBar.__proto__.new.call(this, index, name);
    ;
  }).prototype = barcode_hm.BarcodeHMBar.prototype;
  dart.addTypeTests(barcode_hm.BarcodeHMBar);
  dart.addTypeCaches(barcode_hm.BarcodeHMBar);
  dart.setLibraryUri(barcode_hm.BarcodeHMBar, I[8]);
  dart.setStaticFieldSignature(barcode_hm.BarcodeHMBar, () => ['values', 'tracker', 'ascender', 'descender', 'full']);
  dart.defineExtensionMethods(barcode_hm.BarcodeHMBar, ['toString']);
  dart.defineLazy(barcode_hm.BarcodeHMBar, {
    /*barcode_hm.BarcodeHMBar.values*/get values() {
      return C[38] || CT.C38;
    },
    /*barcode_hm.BarcodeHMBar.tracker*/get tracker() {
      return C[39] || CT.C39;
    },
    /*barcode_hm.BarcodeHMBar.ascender*/get ascender() {
      return C[40] || CT.C40;
    },
    /*barcode_hm.BarcodeHMBar.descender*/get descender() {
      return C[41] || CT.C41;
    },
    /*barcode_hm.BarcodeHMBar.full*/get full() {
      return C[42] || CT.C42;
    }
  }, false);
  barcode_hm.BarcodeHM = class BarcodeHM extends barcode_1d.Barcode1D {
    makeBytes(data, opts) {
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let drawText = opts && 'drawText' in opts ? opts.drawText : false;
      let fontHeight = opts && 'fontHeight' in opts ? opts.fontHeight : null;
      let textPadding = opts && 'textPadding' in opts ? opts.textPadding : null;
      return new (T.SyncIterableOfBarcodeElement()).new((function* makeBytes() {
        if (!(width > 0)) dart.assertFailed(null, I[9], 56, 12, "width > 0");
        if (!(height > 0)) dart.assertFailed(null, I[9], 57, 12, "height > 0");
        if (!(!drawText || fontHeight != null)) dart.assertFailed(null, I[9], 58, 12, "!drawText || fontHeight != null");
        fontHeight == null ? fontHeight = 0.0 : null;
        textPadding == null ? textPadding = 0 : null;
        let text = convert.utf8.decoder.convert(data);
        let bars = this.convertHM(text)[$toList]();
        if (bars[$isEmpty]) {
          return;
        }
        let top = this.marginTop(drawText, width, height, fontHeight, textPadding);
        let left = this.marginLeft(drawText, width, height, fontHeight, textPadding);
        let right = this.marginRight(drawText, width, height, fontHeight, textPadding);
        let lineWidth = (width - left - right) / (bars[$length] * 2 - 1);
        let index = 0;
        let barHeight = height - (drawText ? dart.notNull(fontHeight) + dart.notNull(textPadding) : 0) - top;
        let tracker = barHeight * 0.3;
        for (let bar of bars) {
          switch (bar) {
            case C[39] || CT.C39:
              {
                yield new barcode_operations.BarcodeBar.new({left: left + index * 2 * lineWidth, top: top + barHeight / 2 - tracker / 2, width: lineWidth, height: tracker, black: true});
                break;
              }
            case C[40] || CT.C40:
              {
                yield new barcode_operations.BarcodeBar.new({left: left + index * 2 * lineWidth, top: top, width: lineWidth, height: barHeight / 2 + tracker / 2, black: true});
                break;
              }
            case C[41] || CT.C41:
              {
                yield new barcode_operations.BarcodeBar.new({left: left + index * 2 * lineWidth, top: top + barHeight / 2 - tracker / 2, width: lineWidth, height: barHeight / 2 + tracker / 2, black: true});
                break;
              }
            case C[42] || CT.C42:
              {
                yield new barcode_operations.BarcodeBar.new({left: left + index * 2 * lineWidth, top: top, width: lineWidth, height: barHeight, black: true});
                break;
              }
          }
          index = index + 1;
        }
        if (drawText) {
          yield* this.makeText(text, width, height, fontHeight, textPadding, lineWidth);
        }
      }).bind(this));
    }
    toHex(data) {
      let result = 0;
      for (let bit of this.convertHM(data)) {
        result = (result << 2 >>> 0) + bit.index;
      }
      return result[$toRadixString](16);
    }
    fromBits(bits) {
      return barcode_hm.BarcodeHMBar.values[$_get](bits);
    }
    addHW(code, len) {
      return new (T.SyncIterableOfBarcodeHMBar()).new((function* addHW() {
        for (let index = 0; index < len; index = index + 1) {
          yield this.fromBits(code[$rightShift](index * 2) & 3);
        }
      }).bind(this));
    }
    convert(data) {
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (barcode_hm.BarcodeHM.new = function() {
    barcode_hm.BarcodeHM.__proto__.new.call(this);
    ;
  }).prototype = barcode_hm.BarcodeHM.prototype;
  dart.addTypeTests(barcode_hm.BarcodeHM);
  dart.addTypeCaches(barcode_hm.BarcodeHM);
  dart.setMethodSignature(barcode_hm.BarcodeHM, () => ({
    __proto__: dart.getMethods(barcode_hm.BarcodeHM.__proto__),
    fromBits: dart.fnType(barcode_hm.BarcodeHMBar, [core.int]),
    addHW: dart.fnType(core.Iterable$(barcode_hm.BarcodeHMBar), [core.int, core.int]),
    convert: dart.fnType(core.Iterable$(core.bool), [core.String])
  }));
  dart.setLibraryUri(barcode_hm.BarcodeHM, I[8]);
  dart.setStaticFieldSignature(barcode_hm.BarcodeHM, () => ['_tracker']);
  dart.defineLazy(barcode_hm.BarcodeHM, {
    /*barcode_hm.BarcodeHM._tracker*/get _tracker() {
      return 0.3;
    }
  }, false);
  rm4scc.BarcodeRm4scc = class BarcodeRm4scc extends barcode_hm.BarcodeHM {
    static ['_#new#tearOff']() {
      return new rm4scc.BarcodeRm4scc.new();
    }
    get charSet() {
      return barcode_maps.BarcodeMaps.rm4scc[$keys];
    }
    get name() {
      return "RM4SCC";
    }
    convertHM(data) {
      return new (T.SyncIterableOfBarcodeHMBar()).new((function* convertHM() {
        yield this.fromBits(1);
        let sumTop = 0;
        let sumBottom = 0;
        let keys = barcode_maps.BarcodeMaps.rm4scc[$keys][$toList]();
        for (let codeUnit of data[$codeUnits]) {
          let code = barcode_maps.BarcodeMaps.rm4scc[$_get](codeUnit);
          if (code == null) {
            dart.throw(new barcode_exception.BarcodeException.new("Unable to encode \"" + core.String.fromCharCode(codeUnit) + "\" to " + this.name));
          }
          yield* this.addHW(code, 4);
          let index = keys[$indexOf](codeUnit);
          sumTop = sumTop + ((index / 6)[$truncate]() + 1)[$modulo](6);
          sumBottom = sumBottom + (index + 1)[$modulo](6);
        }
        let crc = (sumTop - 1)[$modulo](6) * 6 + (sumBottom - 1)[$modulo](6);
        yield* this.addHW(dart.nullCheck(barcode_maps.BarcodeMaps.rm4scc[$_get](keys[$_get](crc))), 4);
        yield this.fromBits(3);
      }).bind(this));
    }
  };
  (rm4scc.BarcodeRm4scc.new = function() {
    rm4scc.BarcodeRm4scc.__proto__.new.call(this);
    ;
  }).prototype = rm4scc.BarcodeRm4scc.prototype;
  dart.addTypeTests(rm4scc.BarcodeRm4scc);
  dart.addTypeCaches(rm4scc.BarcodeRm4scc);
  dart.setMethodSignature(rm4scc.BarcodeRm4scc, () => ({
    __proto__: dart.getMethods(rm4scc.BarcodeRm4scc.__proto__),
    convertHM: dart.fnType(core.Iterable$(barcode_hm.BarcodeHMBar), [core.String])
  }));
  dart.setGetterSignature(rm4scc.BarcodeRm4scc, () => ({
    __proto__: dart.getGetters(rm4scc.BarcodeRm4scc.__proto__),
    charSet: core.Iterable$(core.int),
    name: core.String
  }));
  dart.setLibraryUri(rm4scc.BarcodeRm4scc, I[10]);
  qrcode.BarcodeQRCorrectionLevel = class BarcodeQRCorrectionLevel extends core._Enum {
    toString() {
      return "BarcodeQRCorrectionLevel." + this[_name];
    }
  };
  (qrcode.BarcodeQRCorrectionLevel.new = function(index, name) {
    qrcode.BarcodeQRCorrectionLevel.__proto__.new.call(this, index, name);
    ;
  }).prototype = qrcode.BarcodeQRCorrectionLevel.prototype;
  dart.addTypeTests(qrcode.BarcodeQRCorrectionLevel);
  dart.addTypeCaches(qrcode.BarcodeQRCorrectionLevel);
  dart.setLibraryUri(qrcode.BarcodeQRCorrectionLevel, I[11]);
  dart.setStaticFieldSignature(qrcode.BarcodeQRCorrectionLevel, () => ['values', 'low', 'medium', 'quartile', 'high']);
  dart.defineExtensionMethods(qrcode.BarcodeQRCorrectionLevel, ['toString']);
  dart.defineLazy(qrcode.BarcodeQRCorrectionLevel, {
    /*qrcode.BarcodeQRCorrectionLevel.values*/get values() {
      return C[43] || CT.C43;
    },
    /*qrcode.BarcodeQRCorrectionLevel.low*/get low() {
      return C[27] || CT.C27;
    },
    /*qrcode.BarcodeQRCorrectionLevel.medium*/get medium() {
      return C[44] || CT.C44;
    },
    /*qrcode.BarcodeQRCorrectionLevel.quartile*/get quartile() {
      return C[45] || CT.C45;
    },
    /*qrcode.BarcodeQRCorrectionLevel.high*/get high() {
      return C[46] || CT.C46;
    }
  }, false);
  var typeNumber$ = dart.privateName(qrcode, "BarcodeQR.typeNumber");
  var errorCorrectLevel$ = dart.privateName(qrcode, "BarcodeQR.errorCorrectLevel");
  barcode_2d.Barcode2D = class Barcode2D extends barcode.Barcode {
    makeBytes(data, opts) {
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let drawText = opts && 'drawText' in opts ? opts.drawText : false;
      let fontHeight = opts && 'fontHeight' in opts ? opts.fontHeight : null;
      let textPadding = opts && 'textPadding' in opts ? opts.textPadding : null;
      return new (T.SyncIterableOfBarcodeElement()).new((function* makeBytes() {
        if (!(width > 0)) dart.assertFailed(null, I[13], 74, 12, "width > 0");
        if (!(height > 0)) dart.assertFailed(null, I[13], 75, 12, "height > 0");
        let matrix = this.convert(data);
        let mh = matrix.height * matrix.ratio;
        let w = null;
        let h = null;
        if (width / height > matrix.width / mh) {
          w = matrix.width * height / mh;
          h = height;
        } else {
          w = width;
          h = mh * width / matrix.width;
        }
        let pixelW = w / matrix.width;
        let pixelH = h / matrix.height;
        let offsetX = (width - w) / 2;
        let offsetY = (height - h) / 2;
        let start = 0;
        let color = null;
        let x = 0;
        let y = 0;
        for (let pixel of matrix.pixels) {
          color == null ? color = pixel : null;
          if (pixel !== color) {
            yield new barcode_operations.BarcodeBar.new({left: offsetX + start * pixelW, top: offsetY + y * pixelH, width: (x - start) * pixelW, height: pixelH, black: color});
            color = pixel;
            start = x;
          }
          x = x + 1;
          if (x >= matrix.width) {
            yield new barcode_operations.BarcodeBar.new({left: offsetX + start * pixelW, top: offsetY + y * pixelH, width: (matrix.width - start) * pixelW, height: pixelH, black: color});
            color = null;
            start = 0;
            x = 0;
            y = y + 1;
          }
        }
      }).bind(this));
    }
    verifyBytes(data) {
      super.verifyBytes(data);
      try {
        this.convert(data);
      } catch (e) {
        let ex = dart.getThrown(e);
        if (core.Exception.is(ex)) {
          dart.throw(new barcode_exception.BarcodeException.new(ex[$toString]()));
        } else
          throw e;
      }
    }
    toHex(data) {
      let intermediate = "";
      let matrix = this.convert(_native_typed_data.NativeUint8List.fromList(data[$codeUnits]));
      for (let bit of matrix.pixels) {
        intermediate = intermediate + (bit ? "1" : "0");
      }
      let result = "";
      while (intermediate.length > 8) {
        let sub = intermediate[$substring](intermediate.length - 8);
        result = result + core.int.parse(sub, {radix: 2})[$toRadixString](16);
        intermediate = intermediate[$substring](0, intermediate.length - 8);
      }
      result = result + core.int.parse(intermediate, {radix: 2})[$toRadixString](16);
      return result;
    }
  };
  (barcode_2d.Barcode2D.new = function() {
    barcode_2d.Barcode2D.__proto__.new.call(this);
    ;
  }).prototype = barcode_2d.Barcode2D.prototype;
  dart.addTypeTests(barcode_2d.Barcode2D);
  dart.addTypeCaches(barcode_2d.Barcode2D);
  dart.setMethodSignature(barcode_2d.Barcode2D, () => ({
    __proto__: dart.getMethods(barcode_2d.Barcode2D.__proto__),
    makeBytes: dart.fnType(core.Iterable$(barcode_operations.BarcodeElement), [typed_data.Uint8List], {drawText: core.bool, fontHeight: dart.nullable(core.double), textPadding: dart.nullable(core.double)}, {height: core.double, width: core.double}),
    toHex: dart.fnType(core.String, [core.String])
  }));
  dart.setLibraryUri(barcode_2d.Barcode2D, I[14]);
  qrcode.BarcodeQR = class BarcodeQR extends barcode_2d.Barcode2D {
    get typeNumber() {
      return this[typeNumber$];
    }
    set typeNumber(value) {
      super.typeNumber = value;
    }
    get errorCorrectLevel() {
      return this[errorCorrectLevel$];
    }
    set errorCorrectLevel(value) {
      super.errorCorrectLevel = value;
    }
    static ['_#new#tearOff'](typeNumber, errorCorrectLevel) {
      return new qrcode.BarcodeQR.new(typeNumber, errorCorrectLevel);
    }
    convert(data) {
      let t12;
      let errorLevel = error_correct_level.QrErrorCorrectLevel.levels[$_get](this.errorCorrectLevel.index);
      let qrCode = this.typeNumber == null ? qr_code.QrCode.fromUint8List({data: data, errorCorrectLevel: errorLevel}) : (t12 = new qr_code.QrCode.new(dart.nullCheck(this.typeNumber), errorLevel), (() => {
        t12.addByteData(data[$buffer][$asByteData]());
        return t12;
      })());
      let qrImage = qr_image.QrImage.new(qrCode);
      return barcode_2d.Barcode2DMatrix.fromXY(qrCode.moduleCount, qrCode.moduleCount, 1.0, dart.bind(qrImage, 'isDark'));
    }
    get charSet() {
      return T.IterableOfint().generate(256);
    }
    get name() {
      return "QR-Code";
    }
    get maxLength() {
      return 2953;
    }
  };
  (qrcode.BarcodeQR.new = function(typeNumber, errorCorrectLevel) {
    this[typeNumber$] = typeNumber;
    this[errorCorrectLevel$] = errorCorrectLevel;
    if (!(typeNumber == null || dart.notNull(typeNumber) >= 1 && dart.notNull(typeNumber) <= 40)) dart.assertFailed(null, I[12], 48, 14, "typeNumber == null || (typeNumber >= 1 && typeNumber <= 40)");
    qrcode.BarcodeQR.__proto__.new.call(this);
    ;
  }).prototype = qrcode.BarcodeQR.prototype;
  dart.addTypeTests(qrcode.BarcodeQR);
  dart.addTypeCaches(qrcode.BarcodeQR);
  dart.setMethodSignature(qrcode.BarcodeQR, () => ({
    __proto__: dart.getMethods(qrcode.BarcodeQR.__proto__),
    convert: dart.fnType(barcode_2d.Barcode2DMatrix, [typed_data.Uint8List])
  }));
  dart.setGetterSignature(qrcode.BarcodeQR, () => ({
    __proto__: dart.getGetters(qrcode.BarcodeQR.__proto__),
    charSet: core.Iterable$(core.int),
    name: core.String
  }));
  dart.setLibraryUri(qrcode.BarcodeQR, I[11]);
  dart.setFieldSignature(qrcode.BarcodeQR, () => ({
    __proto__: dart.getFields(qrcode.BarcodeQR.__proto__),
    typeNumber: dart.finalFieldType(dart.nullable(core.int)),
    errorCorrectLevel: dart.finalFieldType(qrcode.BarcodeQRCorrectionLevel)
  }));
  pdf417.Pdf417SecurityLevel = class Pdf417SecurityLevel extends core._Enum {
    toString() {
      return "Pdf417SecurityLevel." + this[_name];
    }
  };
  (pdf417.Pdf417SecurityLevel.new = function(index, name) {
    pdf417.Pdf417SecurityLevel.__proto__.new.call(this, index, name);
    ;
  }).prototype = pdf417.Pdf417SecurityLevel.prototype;
  dart.addTypeTests(pdf417.Pdf417SecurityLevel);
  dart.addTypeCaches(pdf417.Pdf417SecurityLevel);
  dart.setLibraryUri(pdf417.Pdf417SecurityLevel, I[15]);
  dart.setStaticFieldSignature(pdf417.Pdf417SecurityLevel, () => ['values', 'level0', 'level1', 'level2', 'level3', 'level4', 'level5', 'level6', 'level7', 'level8']);
  dart.defineExtensionMethods(pdf417.Pdf417SecurityLevel, ['toString']);
  dart.defineLazy(pdf417.Pdf417SecurityLevel, {
    /*pdf417.Pdf417SecurityLevel.values*/get values() {
      return C[47] || CT.C47;
    },
    /*pdf417.Pdf417SecurityLevel.level0*/get level0() {
      return C[48] || CT.C48;
    },
    /*pdf417.Pdf417SecurityLevel.level1*/get level1() {
      return C[49] || CT.C49;
    },
    /*pdf417.Pdf417SecurityLevel.level2*/get level2() {
      return C[28] || CT.C28;
    },
    /*pdf417.Pdf417SecurityLevel.level3*/get level3() {
      return C[50] || CT.C50;
    },
    /*pdf417.Pdf417SecurityLevel.level4*/get level4() {
      return C[51] || CT.C51;
    },
    /*pdf417.Pdf417SecurityLevel.level5*/get level5() {
      return C[52] || CT.C52;
    },
    /*pdf417.Pdf417SecurityLevel.level6*/get level6() {
      return C[53] || CT.C53;
    },
    /*pdf417.Pdf417SecurityLevel.level7*/get level7() {
      return C[54] || CT.C54;
    },
    /*pdf417.Pdf417SecurityLevel.level8*/get level8() {
      return C[55] || CT.C55;
    }
  }, false);
  var moduleHeight$ = dart.privateName(pdf417, "BarcodePDF417.moduleHeight");
  var preferredRatio$ = dart.privateName(pdf417, "BarcodePDF417.preferredRatio");
  var securityLevel$ = dart.privateName(pdf417, "BarcodePDF417.securityLevel");
  var _highlevelEncode = dart.privateName(pdf417, "_highlevelEncode");
  var _errorCorrectionWordCount = dart.privateName(pdf417, "_errorCorrectionWordCount");
  var _calcDimensions = dart.privateName(pdf417, "_calcDimensions");
  var BarcodeException_message = dart.privateName(barcode_exception, "BarcodeException.message");
  var _encodeData = dart.privateName(pdf417, "_encodeData");
  var _getLeftCodeWord = dart.privateName(pdf417, "_getLeftCodeWord");
  var _getCodeword = dart.privateName(pdf417, "_getCodeword");
  var _getRightCodeWord = dart.privateName(pdf417, "_getRightCodeWord");
  var _renderBarcode = dart.privateName(pdf417, "_renderBarcode");
  var _getPadding = dart.privateName(pdf417, "_getPadding");
  var _computeErrorCorrection = dart.privateName(pdf417, "_computeErrorCorrection");
  var _addBits = dart.privateName(pdf417, "_addBits");
  var _calculateNumberOfRows = dart.privateName(pdf417, "_calculateNumberOfRows");
  var _determineConsecutiveDigitCount = dart.privateName(pdf417, "_determineConsecutiveDigitCount");
  var _encodeNumeric = dart.privateName(pdf417, "_encodeNumeric");
  var _isText = dart.privateName(pdf417, "_isText");
  var _determineConsecutiveTextCount = dart.privateName(pdf417, "_determineConsecutiveTextCount");
  var _isAlphaUpper = dart.privateName(pdf417, "_isAlphaUpper");
  var _isAlphaLower = dart.privateName(pdf417, "_isAlphaLower");
  var _isMixed = dart.privateName(pdf417, "_isMixed");
  var _isPunctuation = dart.privateName(pdf417, "_isPunctuation");
  var _encodeText = dart.privateName(pdf417, "_encodeText");
  var _determineConsecutiveBinaryCount = dart.privateName(pdf417, "_determineConsecutiveBinaryCount");
  var _encodeBinary = dart.privateName(pdf417, "_encodeBinary");
  pdf417.BarcodePDF417 = class BarcodePDF417 extends barcode_2d.Barcode2D {
    get moduleHeight() {
      return this[moduleHeight$];
    }
    set moduleHeight(value) {
      super.moduleHeight = value;
    }
    get preferredRatio() {
      return this[preferredRatio$];
    }
    set preferredRatio(value) {
      super.preferredRatio = value;
    }
    get securityLevel() {
      return this[securityLevel$];
    }
    set securityLevel(value) {
      super.securityLevel = value;
    }
    static ['_#new#tearOff'](securityLevel, moduleHeight, preferredRatio) {
      return new pdf417.BarcodePDF417.new(securityLevel, moduleHeight, preferredRatio);
    }
    convert(data) {
      let dataWords = this[_highlevelEncode](data);
      let dim = this[_calcDimensions](dataWords[$length], this[_errorCorrectionWordCount](this.securityLevel));
      if (dim.columns < 2 || dim.columns > 60 || dim.rows < 2 || dim.rows > 60) {
        dart.throw(C[56] || CT.C56);
      }
      let codeWords = this[_encodeData](dataWords[$toList](), dim.columns, this.securityLevel);
      let grid = T.JSArrayOfListOfint().of([]);
      for (let i = 0; i < codeWords[$length]; i = i + dim.columns) {
        grid[$add](codeWords[$sublist](i, math.min(core.int, i + dim.columns, codeWords[$length])));
      }
      let codes = T.JSArrayOfListOfint().of([]);
      let rowNum = 0;
      for (let row of grid) {
        let table = rowNum[$modulo](3);
        let rowCodes = T.JSArrayOfint().of([]);
        rowCodes[$add](130728);
        rowCodes[$add](this[_getCodeword](table, this[_getLeftCodeWord](rowNum, dim.rows, dim.columns, this.securityLevel)));
        for (let word of row) {
          rowCodes[$add](this[_getCodeword](table, word));
        }
        rowCodes[$add](this[_getCodeword](table, this[_getRightCodeWord](rowNum, dim.rows, dim.columns, this.securityLevel)));
        rowCodes[$add](260649);
        codes[$add](rowCodes);
        rowNum = rowNum + 1;
      }
      let width = (dim.columns + 4) * 17 + 1;
      return new barcode_2d.Barcode2DMatrix.new(width, dim.rows, this.moduleHeight, this[_renderBarcode](codes));
    }
    get charSet() {
      return T.IterableOfint().generate(256);
    }
    get name() {
      return "PDF417";
    }
    get maxLength() {
      return 990;
    }
    [_encodeData](dataWords, columns, securityLevel) {
      let dataCount = dataWords[$length];
      let ecCount = this[_errorCorrectionWordCount](securityLevel);
      let padWords = this[_getPadding](dataCount, ecCount, columns);
      dataWords[$addAll](padWords);
      let length = dataWords[$length] + 1;
      dataWords[$insert](0, length);
      let ecWords = this[_computeErrorCorrection](securityLevel, dataWords);
      dataWords[$addAll](ecWords);
      return dataWords;
    }
    [_getLeftCodeWord](rowNum, rows, columns, securityLevel) {
      let tableId = rowNum[$modulo](3);
      let x = null;
      function x$35get() {
        let t16;
        t16 = x;
        return t16 == null ? dart.throw(new _internal.LateError.localNI("x")) : t16;
      }
      dart.fn(x$35get, T.VoidToint());
      function x$35set(x$35param) {
        return x = x$35param;
      }
      dart.fn(x$35set, T.intTodynamic());
      switch (tableId) {
        case 0:
          {
            x$35set(((rows - 3) / 3)[$truncate]());
            break;
          }
        case 1:
          {
            x$35set(securityLevel.index * 3);
            x$35set(x$35get() + (rows - 1)[$modulo](3));
            break;
          }
        case 2:
          {
            x$35set(columns - 1);
            break;
          }
      }
      return 30 * (rowNum / 3)[$truncate]() + x$35get();
    }
    [_getRightCodeWord](rowNum, rows, columns, securityLevel) {
      let tableId = rowNum[$modulo](3);
      let x = null;
      function x$35get() {
        let t19;
        t19 = x;
        return t19 == null ? dart.throw(new _internal.LateError.localNI("x")) : t19;
      }
      dart.fn(x$35get, T.VoidToint());
      function x$35set(x$35param) {
        return x = x$35param;
      }
      dart.fn(x$35set, T.intTodynamic());
      switch (tableId) {
        case 0:
          {
            x$35set(columns - 1);
            break;
          }
        case 1:
          {
            x$35set(((rows - 1) / 3)[$truncate]());
            break;
          }
        case 2:
          {
            x$35set(securityLevel.index * 3);
            x$35set(x$35get() + (rows - 1)[$modulo](3));
            break;
          }
      }
      return 30 * (rowNum / 3)[$truncate]() + x$35get();
    }
    [_getPadding](dataCount, ecCount, columns) {
      return new (T.SyncIterableOfint()).new(function* _getPadding() {
        let totalCount = dataCount + ecCount + 1;
        let mod = totalCount[$modulo](columns);
        if (mod > 0) {
          let padCount = columns - mod;
          yield* T.IterableOfint().generate(padCount, dart.fn(_ => 900, T.intToint()));
        }
      });
    }
    [_addBits](b, count) {
      return new (T.SyncIterableOfbool()).new(function* _addBits() {
        for (let i = count - 1; i >= 0; i = i - 1) {
          yield (b[$rightShift](i) & 1) === 1;
        }
      });
    }
    [_renderBarcode](codes) {
      return new (T.SyncIterableOfbool()).new((function* _renderBarcode() {
        for (let row of codes) {
          let lastIdx = row[$length] - 1;
          let i = 0;
          for (let col of row) {
            if (i === lastIdx) {
              yield* this[_addBits](col, 18);
            } else {
              yield* this[_addBits](col, 17);
            }
            i = i + 1;
          }
        }
      }).bind(this));
    }
    [_calculateNumberOfRows](m, k, c) {
      let r = ((m + 1 + k) / c)[$truncate]() + 1;
      if (c * r >= m + 1 + k + c) {
        r = r - 1;
      }
      return r;
    }
    [_calcDimensions](dataWords, eccWords) {
      let ratio = 0.0;
      let cols = 0;
      let rows = 0;
      for (let c = 2; c <= 60; c = c + 1) {
        let r = this[_calculateNumberOfRows](dataWords, eccWords, c);
        if (r < 2) {
          break;
        }
        if (r > 60) {
          continue;
        }
        if (r !== 0) {
          let newRatio = (17 * c + 69) / (r * this.moduleHeight);
          if ((newRatio - this.preferredRatio)[$abs]() < (ratio - this.preferredRatio)[$abs]()) {
            ratio = newRatio;
            cols = c;
            rows = r;
            continue;
          }
          break;
        }
      }
      if (rows === 0) {
        cols = 2;
        rows = this[_calculateNumberOfRows](dataWords, eccWords, cols);
        if (rows < 2) {
          rows = 2;
        }
      }
      return new pdf417._Pdf417Size.new(cols, rows);
    }
    [_errorCorrectionWordCount](level) {
      return (1)[$leftShift](level.index + 1);
    }
    [_computeErrorCorrection](level, data) {
      let factors = pdf417_codewords.correctionFactors[$_get](level.index);
      let count = this[_errorCorrectionWordCount](level);
      let ecWords = T.ListOfint().filled(count, 0);
      for (let value of data) {
        let temp = (value + ecWords[$_get](0))[$modulo](929);
        for (let i = count - 1; i >= 0; i = i - 1) {
          let add = 0;
          if (i > 0) {
            add = ecWords[$_get](count - i);
          }
          ecWords[$_set](count - 1 - i, (add + 929 - (temp * factors[$_get](i))[$modulo](929))[$modulo](929));
        }
      }
      let key = 0;
      for (let word of ecWords) {
        if (word > 0) {
          ecWords[$_set](key, 929 - word);
        }
        key = key + 1;
      }
      return ecWords;
    }
    [_getCodeword](tableId, word) {
      return pdf417_codewords.codewords[$_get](tableId)[$_get](word);
    }
    [_determineConsecutiveDigitCount](data) {
      let cnt = 0;
      for (let r of data) {
        if (r < 48 || r > 57) {
          break;
        }
        cnt = cnt + 1;
      }
      return cnt;
    }
    [_encodeNumeric](digits) {
      return new (T.SyncIterableOfint()).new(function* _encodeNumeric() {
        let digitCount = digits[$length];
        let chunkCount = (digitCount / 44)[$truncate]();
        if (digitCount[$modulo](44) !== 0) {
          chunkCount = chunkCount + 1;
        }
        for (let i = 0; i < chunkCount; i = i + 1) {
          let start = i * 44;
          let end = start + 44;
          if (end > digitCount) {
            end = digitCount;
          }
          let chunk = digits[$sublist](start, end);
          let chunkNum = core.BigInt.parse("1" + core.String.fromCharCodes(chunk), {radix: 10});
          let cws = T.JSArrayOfint().of([]);
          while (chunkNum['>'](core.BigInt.zero)) {
            let newChunk = chunkNum['~/'](core._BigIntImpl.from(900));
            let cw = chunkNum['%'](core._BigIntImpl.from(900));
            chunkNum = newChunk;
            cws[$insert](0, cw.toInt());
          }
          yield* cws;
        }
      });
    }
    [_isText](ch) {
      return ch === 9 || ch === 10 || ch === 13 || ch >= 32 && ch <= 126;
    }
    [_determineConsecutiveTextCount](msg) {
      let result = 0;
      let i = 0;
      for (let ch of msg) {
        let numericCount = this[_determineConsecutiveDigitCount](msg[$sublist](i));
        if (numericCount >= 13 || numericCount === 0 && !this[_isText](ch)) {
          break;
        }
        result = result + 1;
        i = i + 1;
      }
      return result;
    }
    [_isAlphaUpper](ch) {
      return ch === 32 || ch >= 65 && ch <= 90;
    }
    [_isAlphaLower](ch) {
      return ch === 32 || ch >= 97 && ch <= 122;
    }
    [_isMixed](ch) {
      return pdf417_codewords.mixedMap[$containsKey](ch);
    }
    [_isPunctuation](ch) {
      return pdf417_codewords.punctMap[$containsKey](ch);
    }
    [_encodeText](text, submode, result) {
      let idx = 0;
      let tmp = T.JSArrayOfintN().of([]);
      while (idx < text[$length]) {
        let ch = text[$_get](idx);
        switch (submode) {
          case C[57] || CT.C57:
            {
              if (this[_isAlphaUpper](ch)) {
                if (ch === 32) {
                  tmp[$add](26);
                } else {
                  tmp[$add](ch - 65);
                }
              } else {
                if (this[_isAlphaLower](ch)) {
                  submode = pdf417._SubMode.subLower;
                  tmp[$add](27);
                  continue;
                } else if (this[_isMixed](ch)) {
                  submode = pdf417._SubMode.subMixed;
                  tmp[$add](28);
                  continue;
                } else {
                  tmp[$add](29);
                  tmp[$add](pdf417_codewords.punctMap[$_get](ch));
                  break;
                }
              }
              break;
            }
          case C[58] || CT.C58:
            {
              if (this[_isAlphaLower](ch)) {
                if (ch === 32) {
                  tmp[$add](26);
                } else {
                  tmp[$add](ch - 97);
                }
              } else {
                if (this[_isAlphaUpper](ch)) {
                  tmp[$add](27);
                  tmp[$add](ch - 65);
                  break;
                } else if (this[_isMixed](ch)) {
                  submode = pdf417._SubMode.subMixed;
                  tmp[$add](28);
                  continue;
                } else {
                  tmp[$add](29);
                  tmp[$add](pdf417_codewords.punctMap[$_get](ch));
                  break;
                }
              }
              break;
            }
          case C[59] || CT.C59:
            {
              if (this[_isMixed](ch)) {
                tmp[$add](pdf417_codewords.mixedMap[$_get](ch));
              } else {
                if (this[_isAlphaUpper](ch)) {
                  submode = pdf417._SubMode.subUpper;
                  tmp[$add](28);
                  continue;
                } else if (this[_isAlphaLower](ch)) {
                  submode = pdf417._SubMode.subLower;
                  tmp[$add](27);
                  continue;
                } else {
                  if (idx + 1 < text[$length]) {
                    let next = text[$_get](idx + 1);
                    if (this[_isPunctuation](next)) {
                      submode = pdf417._SubMode.subPunct;
                      tmp[$add](25);
                      continue;
                    }
                  }
                  tmp[$add](29);
                  tmp[$add](pdf417_codewords.punctMap[$_get](ch));
                }
              }
              break;
            }
          default:
            {
              if (this[_isPunctuation](ch)) {
                tmp[$add](pdf417_codewords.punctMap[$_get](ch));
              } else {
                submode = pdf417._SubMode.subUpper;
                tmp[$add](29);
                continue;
              }
            }
        }
        idx = idx + 1;
      }
      let h = 0;
      let i = 0;
      for (let val of tmp) {
        if (i[$modulo](2) !== 0) {
          h = dart.nullCheck(h) * 30 + dart.nullCheck(val);
          result[$add](h);
        } else {
          h = val;
        }
        i = i + 1;
      }
      if (tmp[$length][$modulo](2) !== 0) {
        result[$add](dart.nullCheck(h) * 30 + 29);
      }
      return submode;
    }
    [_determineConsecutiveBinaryCount](msg) {
      let result = 0;
      for (let i = 0; i < msg[$length]; i = i + 1) {
        let numericCount = this[_determineConsecutiveDigitCount](msg[$sublist](i));
        if (numericCount >= 13) {
          break;
        }
        let textCount = this[_determineConsecutiveTextCount](msg[$sublist](i));
        if (textCount > 5) {
          break;
        }
        result = result + 1;
      }
      return result;
    }
    [_encodeBinary](data, startmode) {
      return new (T.SyncIterableOfint()).new(function* _encodeBinary() {
        let count = data[$length];
        if (count === 1 && startmode === pdf417._EncodingMode.encText) {
          yield 913;
        } else if (count[$modulo](6) === 0) {
          yield 924;
        } else {
          yield 901;
        }
        let idx = 0;
        if (count >= 6) {
          let words = T.ListOfint().filled(5, 0);
          while (count - idx >= 6) {
            let t = 0;
            for (let i = 0; i < 6; i = i + 1) {
              t = t << 8 >>> 0;
              t = t + data[$_get](idx + i);
            }
            for (let i = 0; i < 5; i = i + 1) {
              words[$_set](4 - i, t[$modulo](900));
              t = (t / 900)[$truncate]();
            }
            yield* words;
            idx = idx + 6;
          }
        }
        for (let i = idx; i < count; i = i + 1) {
          yield data[$_get](i) & 255;
        }
      });
    }
    [_highlevelEncode](data) {
      return new (T.SyncIterableOfint()).new(() => (function* _highlevelEncode(data) {
        let encodingMode = pdf417._EncodingMode.encText;
        let textSubMode = pdf417._SubMode.subUpper;
        while (data[$isNotEmpty]) {
          let numericCount = this[_determineConsecutiveDigitCount](data);
          if (numericCount >= 13 || numericCount === data[$length]) {
            yield 902;
            encodingMode = pdf417._EncodingMode.encNumeric;
            textSubMode = pdf417._SubMode.subUpper;
            let numData = this[_encodeNumeric](data[$sublist](0, numericCount));
            yield* numData;
            data = data[$sublist](numericCount);
          } else {
            let textCount = this[_determineConsecutiveTextCount](data);
            if (textCount >= 5 || textCount === data[$length]) {
              if (encodingMode !== pdf417._EncodingMode.encText) {
                yield 900;
                encodingMode = pdf417._EncodingMode.encText;
                textSubMode = pdf417._SubMode.subUpper;
              }
              let txtData = T.JSArrayOfint().of([]);
              textSubMode = this[_encodeText](data[$sublist](0, textCount), textSubMode, txtData);
              yield* txtData;
              data = data[$sublist](textCount);
            } else {
              let binaryCount = this[_determineConsecutiveBinaryCount](data);
              if (binaryCount === 0) {
                binaryCount = 1;
              }
              let bytes = data[$sublist](0, binaryCount);
              if (bytes[$length] !== 1 || encodingMode !== pdf417._EncodingMode.encText) {
                encodingMode = pdf417._EncodingMode.encBinary;
                textSubMode = pdf417._SubMode.subUpper;
              }
              let byteData = this[_encodeBinary](bytes, encodingMode);
              yield* byteData;
              data = data[$sublist](binaryCount);
            }
          }
        }
      }).bind(this)(data));
    }
  };
  (pdf417.BarcodePDF417.new = function(securityLevel, moduleHeight, preferredRatio) {
    this[securityLevel$] = securityLevel;
    this[moduleHeight$] = moduleHeight;
    this[preferredRatio$] = preferredRatio;
    pdf417.BarcodePDF417.__proto__.new.call(this);
    ;
  }).prototype = pdf417.BarcodePDF417.prototype;
  dart.addTypeTests(pdf417.BarcodePDF417);
  dart.addTypeCaches(pdf417.BarcodePDF417);
  dart.setMethodSignature(pdf417.BarcodePDF417, () => ({
    __proto__: dart.getMethods(pdf417.BarcodePDF417.__proto__),
    convert: dart.fnType(barcode_2d.Barcode2DMatrix, [typed_data.Uint8List]),
    [_encodeData]: dart.fnType(core.List$(core.int), [core.List$(core.int), core.int, pdf417.Pdf417SecurityLevel]),
    [_getLeftCodeWord]: dart.fnType(core.int, [core.int, core.int, core.int, pdf417.Pdf417SecurityLevel]),
    [_getRightCodeWord]: dart.fnType(core.int, [core.int, core.int, core.int, pdf417.Pdf417SecurityLevel]),
    [_getPadding]: dart.fnType(core.Iterable$(core.int), [core.int, core.int, core.int]),
    [_addBits]: dart.fnType(core.Iterable$(core.bool), [core.int, core.int]),
    [_renderBarcode]: dart.fnType(core.Iterable$(core.bool), [core.List$(core.List$(core.int))]),
    [_calculateNumberOfRows]: dart.fnType(core.int, [core.int, core.int, core.int]),
    [_calcDimensions]: dart.fnType(pdf417._Pdf417Size, [core.int, core.int]),
    [_errorCorrectionWordCount]: dart.fnType(core.int, [pdf417.Pdf417SecurityLevel]),
    [_computeErrorCorrection]: dart.fnType(core.List$(core.int), [pdf417.Pdf417SecurityLevel, core.Iterable$(core.int)]),
    [_getCodeword]: dart.fnType(core.int, [core.int, core.int]),
    [_determineConsecutiveDigitCount]: dart.fnType(core.int, [core.Iterable$(core.int)]),
    [_encodeNumeric]: dart.fnType(core.Iterable$(core.int), [core.List$(core.int)]),
    [_isText]: dart.fnType(core.bool, [core.int]),
    [_determineConsecutiveTextCount]: dart.fnType(core.int, [core.List$(core.int)]),
    [_isAlphaUpper]: dart.fnType(core.bool, [core.int]),
    [_isAlphaLower]: dart.fnType(core.bool, [core.int]),
    [_isMixed]: dart.fnType(core.bool, [core.int]),
    [_isPunctuation]: dart.fnType(core.bool, [core.int]),
    [_encodeText]: dart.fnType(pdf417._SubMode, [core.List$(core.int), pdf417._SubMode, core.List$(core.int)]),
    [_determineConsecutiveBinaryCount]: dart.fnType(core.int, [core.List$(core.int)]),
    [_encodeBinary]: dart.fnType(core.Iterable$(core.int), [core.List$(core.int), pdf417._EncodingMode]),
    [_highlevelEncode]: dart.fnType(core.Iterable$(core.int), [core.List$(core.int)])
  }));
  dart.setGetterSignature(pdf417.BarcodePDF417, () => ({
    __proto__: dart.getGetters(pdf417.BarcodePDF417.__proto__),
    charSet: core.Iterable$(core.int),
    name: core.String
  }));
  dart.setLibraryUri(pdf417.BarcodePDF417, I[15]);
  dart.setFieldSignature(pdf417.BarcodePDF417, () => ({
    __proto__: dart.getFields(pdf417.BarcodePDF417.__proto__),
    moduleHeight: dart.finalFieldType(core.double),
    preferredRatio: dart.finalFieldType(core.double),
    securityLevel: dart.finalFieldType(pdf417.Pdf417SecurityLevel)
  }));
  dart.setStaticFieldSignature(pdf417.BarcodePDF417, () => ['_minCols', '_maxCols', '_maxRows', '_minRows']);
  dart.defineLazy(pdf417.BarcodePDF417, {
    /*pdf417.BarcodePDF417._minCols*/get _minCols() {
      return 2;
    },
    /*pdf417.BarcodePDF417._maxCols*/get _maxCols() {
      return 60;
    },
    /*pdf417.BarcodePDF417._maxRows*/get _maxRows() {
      return 60;
    },
    /*pdf417.BarcodePDF417._minRows*/get _minRows() {
      return 2;
    }
  }, false);
  pdf417._EncodingMode = class _EncodingMode extends core._Enum {
    toString() {
      return "_EncodingMode." + this[_name];
    }
  };
  (pdf417._EncodingMode.new = function(index, name) {
    pdf417._EncodingMode.__proto__.new.call(this, index, name);
    ;
  }).prototype = pdf417._EncodingMode.prototype;
  dart.addTypeTests(pdf417._EncodingMode);
  dart.addTypeCaches(pdf417._EncodingMode);
  dart.setLibraryUri(pdf417._EncodingMode, I[15]);
  dart.setStaticFieldSignature(pdf417._EncodingMode, () => ['values', 'encText', 'encNumeric', 'encBinary']);
  dart.defineExtensionMethods(pdf417._EncodingMode, ['toString']);
  dart.defineLazy(pdf417._EncodingMode, {
    /*pdf417._EncodingMode.values*/get values() {
      return C[60] || CT.C60;
    },
    /*pdf417._EncodingMode.encText*/get encText() {
      return C[61] || CT.C61;
    },
    /*pdf417._EncodingMode.encNumeric*/get encNumeric() {
      return C[62] || CT.C62;
    },
    /*pdf417._EncodingMode.encBinary*/get encBinary() {
      return C[63] || CT.C63;
    }
  }, false);
  pdf417._SubMode = class _SubMode extends core._Enum {
    toString() {
      return "_SubMode." + this[_name];
    }
  };
  (pdf417._SubMode.new = function(index, name) {
    pdf417._SubMode.__proto__.new.call(this, index, name);
    ;
  }).prototype = pdf417._SubMode.prototype;
  dart.addTypeTests(pdf417._SubMode);
  dart.addTypeCaches(pdf417._SubMode);
  dart.setLibraryUri(pdf417._SubMode, I[15]);
  dart.setStaticFieldSignature(pdf417._SubMode, () => ['values', 'subUpper', 'subLower', 'subMixed', 'subPunct']);
  dart.defineExtensionMethods(pdf417._SubMode, ['toString']);
  dart.defineLazy(pdf417._SubMode, {
    /*pdf417._SubMode.values*/get values() {
      return C[64] || CT.C64;
    },
    /*pdf417._SubMode.subUpper*/get subUpper() {
      return C[57] || CT.C57;
    },
    /*pdf417._SubMode.subLower*/get subLower() {
      return C[58] || CT.C58;
    },
    /*pdf417._SubMode.subMixed*/get subMixed() {
      return C[59] || CT.C59;
    },
    /*pdf417._SubMode.subPunct*/get subPunct() {
      return C[65] || CT.C65;
    }
  }, false);
  pdf417._Pdf417Size = class _Pdf417Size extends core.Object {
    static ['_#new#tearOff'](columns, rows) {
      return new pdf417._Pdf417Size.new(columns, rows);
    }
  };
  (pdf417._Pdf417Size.new = function(columns, rows) {
    this.columns = columns;
    this.rows = rows;
    ;
  }).prototype = pdf417._Pdf417Size.prototype;
  dart.addTypeTests(pdf417._Pdf417Size);
  dart.addTypeCaches(pdf417._Pdf417Size);
  dart.setLibraryUri(pdf417._Pdf417Size, I[15]);
  dart.setFieldSignature(pdf417._Pdf417Size, () => ({
    __proto__: dart.getFields(pdf417._Pdf417Size.__proto__),
    columns: dart.finalFieldType(core.int),
    rows: dart.finalFieldType(core.int)
  }));
  var addChecksum$ = dart.privateName(itf, "BarcodeItf.addChecksum");
  var zeroPrepend$ = dart.privateName(itf, "BarcodeItf.zeroPrepend");
  var drawBorder$ = dart.privateName(itf, "BarcodeItf.drawBorder");
  var borderWidth$ = dart.privateName(itf, "BarcodeItf.borderWidth");
  var quietWidth$ = dart.privateName(itf, "BarcodeItf.quietWidth");
  var fixedLength$ = dart.privateName(itf, "BarcodeItf.fixedLength");
  var _getBorderWidth = dart.privateName(itf, "_getBorderWidth");
  var _getQuietWidth = dart.privateName(itf, "_getQuietWidth");
  const makeBytes = Symbol("makeBytes");
  itf.BarcodeItf = class BarcodeItf extends ean.BarcodeEan {
    get addChecksum() {
      return this[addChecksum$];
    }
    set addChecksum(value) {
      super.addChecksum = value;
    }
    get zeroPrepend() {
      return this[zeroPrepend$];
    }
    set zeroPrepend(value) {
      super.zeroPrepend = value;
    }
    get drawBorder() {
      return this[drawBorder$];
    }
    set drawBorder(value) {
      super.drawBorder = value;
    }
    get borderWidth() {
      return this[borderWidth$];
    }
    set borderWidth(value) {
      super.borderWidth = value;
    }
    get quietWidth() {
      return this[quietWidth$];
    }
    set quietWidth(value) {
      super.quietWidth = value;
    }
    get fixedLength() {
      return this[fixedLength$];
    }
    set fixedLength(value) {
      super.fixedLength = value;
    }
    static ['_#new#tearOff'](addChecksum, zeroPrepend, drawBorder, borderWidth, quietWidth, fixedLength) {
      return new itf.BarcodeItf.new(addChecksum, zeroPrepend, drawBorder, borderWidth, quietWidth, fixedLength);
    }
    get name() {
      return "ITF";
    }
    get minLength() {
      return this.fixedLength != null ? dart.nullCheck(this.fixedLength) - 1 : super.minLength;
    }
    get maxLength() {
      return this.fixedLength != null ? dart.nullCheck(this.fixedLength) : super.maxLength;
    }
    [_getBorderWidth](width) {
      let t25;
      t25 = this.borderWidth;
      return t25 == null ? width * 0.015 : t25;
    }
    [_getQuietWidth](width) {
      let t25;
      t25 = this.quietWidth;
      return t25 == null ? width * 0.07 : t25;
    }
    marginTop(drawText, width, height, fontHeight, textPadding) {
      return this.drawBorder ? this[_getBorderWidth](width) : 0.0;
    }
    marginLeft(drawText, width, height, fontHeight, textPadding) {
      return this.drawBorder ? this[_getBorderWidth](width) + this[_getQuietWidth](width) : 0.0;
    }
    marginRight(drawText, width, height, fontHeight, textPadding) {
      return this.drawBorder ? this[_getBorderWidth](width) + this[_getQuietWidth](width) : 0.0;
    }
    getHeight(index, count, width, height, fontHeight, textPadding, drawText) {
      return super.getHeight(index, count, width, height, fontHeight, textPadding, drawText) - (this.drawBorder ? this[_getBorderWidth](width) : 0);
    }
    convert(data) {
      return new (T.SyncIterableOfbool()).new(() => (function* convert(data) {
        if (this.fixedLength != null) {
          data = this.checkLength(data, dart.nullCheck(this.fixedLength));
        } else {
          if (this.zeroPrepend && data.length[$modulo](2) !== 0 !== this.addChecksum) {
            data = "0" + data;
          }
          if (this.addChecksum) {
            data = data + this.checkSumModulo10(data);
          }
          if (data.length[$modulo](2) !== 0) {
            dart.throw(new barcode_exception.BarcodeException.new(this.name + " barcode can only encode an even number of digits."));
          }
        }
        yield* this.add(5, 4);
        let cu = data[$codeUnits];
        for (let i = 0; i < cu[$length] / 2; i = i + 1) {
          let tuple = T.JSArrayOfintN().of([barcode_maps.BarcodeMaps.itf[$_get](cu[$_get](i * 2)), barcode_maps.BarcodeMaps.itf[$_get](cu[$_get](i * 2 + 1))]);
          if (tuple[$_get](0) == null || tuple[$_get](1) == null) {
            dart.throw(new barcode_exception.BarcodeException.new("Unable to encode \"" + core.String.fromCharCode(cu[$_get](i * 2)) + core.String.fromCharCode(cu[$_get](i * 2 + 1)) + "\" to " + this.name + " Barcode"));
          }
          for (let n = 0; n < 10; n = n + 1) {
            let v = dart.nullCheck(tuple[$_get](n[$modulo](2)))[$rightShift]((n / 2)[$truncate]()) & 1;
            let c = n[$modulo](2) === 0;
            yield c;
            if (v !== 0) {
              yield c;
              yield c;
            }
          }
        }
        yield* this.add(23, 5);
      }).bind(this)(data));
    }
    makeBytes(data, opts) {
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let drawText = opts && 'drawText' in opts ? opts.drawText : false;
      let fontHeight = opts && 'fontHeight' in opts ? opts.fontHeight : null;
      let textPadding = opts && 'textPadding' in opts ? opts.textPadding : null;
      return new (T.SyncIterableOfBarcodeElement()).new((function* makeBytes$() {
        if (!(width > 0)) dart.assertFailed(null, I[16], 191, 12, "width > 0");
        if (!(height > 0)) dart.assertFailed(null, I[16], 192, 12, "height > 0");
        if (!(!drawText || fontHeight != null)) dart.assertFailed(null, I[16], 193, 12, "!drawText || fontHeight != null");
        fontHeight == null ? fontHeight = 0.0 : null;
        textPadding == null ? textPadding = 0 : null;
        yield* this[makeBytes](data, {width: width, height: height, drawText: drawText, fontHeight: fontHeight, textPadding: textPadding});
        if (this.drawBorder) {
          let bw = this[_getBorderWidth](width);
          let hp = drawText ? dart.notNull(fontHeight) + dart.notNull(textPadding) : 0;
          yield new barcode_operations.BarcodeBar.new({left: 0.0, top: 0.0, width: width, height: bw, black: true});
          yield new barcode_operations.BarcodeBar.new({left: 0.0, top: height - hp - bw, width: width, height: bw, black: true});
          yield new barcode_operations.BarcodeBar.new({left: 0.0, top: bw, width: bw, height: height - hp - bw * 2, black: true});
          yield new barcode_operations.BarcodeBar.new({left: width - bw, top: bw, width: bw, height: height - hp - bw * 2, black: true});
        }
      }).bind(this));
    }
    makeText(data, width, height, fontHeight, textPadding, lineWidth) {
      if (this.fixedLength != null) {
      } else {
        if (this.zeroPrepend && data.length[$modulo](2) !== 0 !== this.addChecksum) {
          data = "0" + data;
        }
        if (this.addChecksum) {
          data = data + this.checkSumModulo10(data);
        }
      }
      return super.makeText(data, width, height, fontHeight, textPadding, lineWidth);
    }
    verifyBytes(data) {
      let text = convert.utf8.decoder.convert(data);
      if (this.fixedLength != null) {
        text = this.checkLength(text, this.maxLength);
      } else {
        if (this.zeroPrepend && text.length[$modulo](2) !== 0 !== this.addChecksum) {
          text = "0" + text;
        }
        if (this.addChecksum) {
          text = text + this.checkSumModulo10(text);
        }
      }
      if (text.length[$modulo](2) !== 0) {
        dart.throw(new barcode_exception.BarcodeException.new(this.name + " barcode can only encode an even number of digits."));
      }
      super.verifyBytes(convert.utf8.encoder.convert(text));
    }
    normalize(data) {
      if (this.fixedLength != null) {
        return this.checkLength(this.zeroPrepend ? data[$padRight](this.minLength, "0")[$substring](0, this.minLength) : data, this.maxLength);
      }
      if (this.zeroPrepend && data.length[$modulo](2) !== 0 !== this.addChecksum) {
        data = "0" + data;
      }
      if (this.addChecksum) {
        data = data + this.checkSumModulo10(data);
      }
      return data;
    }
    [makeBytes](data, opts) {
      return super.makeBytes(data, opts);
    }
  };
  (itf.BarcodeItf.new = function(addChecksum, zeroPrepend, drawBorder, borderWidth, quietWidth, fixedLength) {
    this[addChecksum$] = addChecksum;
    this[zeroPrepend$] = zeroPrepend;
    this[drawBorder$] = drawBorder;
    this[borderWidth$] = borderWidth;
    this[quietWidth$] = quietWidth;
    this[fixedLength$] = fixedLength;
    if (!(fixedLength == null || fixedLength[$modulo](2) === 0)) dart.assertFailed(null, I[16], 41, 14, "fixedLength == null || fixedLength % 2 == 0");
    itf.BarcodeItf.__proto__.new.call(this);
    ;
  }).prototype = itf.BarcodeItf.prototype;
  dart.addTypeTests(itf.BarcodeItf);
  dart.addTypeCaches(itf.BarcodeItf);
  dart.setMethodSignature(itf.BarcodeItf, () => ({
    __proto__: dart.getMethods(itf.BarcodeItf.__proto__),
    [_getBorderWidth]: dart.fnType(core.double, [core.double]),
    [_getQuietWidth]: dart.fnType(core.double, [core.double]),
    convert: dart.fnType(core.Iterable$(core.bool), [core.String])
  }));
  dart.setGetterSignature(itf.BarcodeItf, () => ({
    __proto__: dart.getGetters(itf.BarcodeItf.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(itf.BarcodeItf, I[17]);
  dart.setFieldSignature(itf.BarcodeItf, () => ({
    __proto__: dart.getFields(itf.BarcodeItf.__proto__),
    addChecksum: dart.finalFieldType(core.bool),
    zeroPrepend: dart.finalFieldType(core.bool),
    drawBorder: dart.finalFieldType(core.bool),
    borderWidth: dart.finalFieldType(dart.nullable(core.double)),
    quietWidth: dart.finalFieldType(dart.nullable(core.double)),
    fixedLength: dart.finalFieldType(dart.nullable(core.int))
  }));
  itf16.BarcodeItf16 = class BarcodeItf16 extends itf.BarcodeItf {
    static ['_#new#tearOff'](drawBorder, borderWidth, quietWidth) {
      return new itf16.BarcodeItf16.new(drawBorder, borderWidth, quietWidth);
    }
    get name() {
      return "ITF 16";
    }
    makeText(data, width, height, fontHeight, textPadding, lineWidth) {
      data = this.checkLength(data, this.maxLength);
      data = data[$substring](0, 1) + " " + data[$substring](1, 3) + " " + data[$substring](3, 5) + " " + data[$substring](5, 10) + " " + data[$substring](10, 15) + " " + data[$substring](15, 16);
      return super.makeText(data, width, height, fontHeight, textPadding, lineWidth);
    }
  };
  (itf16.BarcodeItf16.new = function(drawBorder, borderWidth, quietWidth) {
    itf16.BarcodeItf16.__proto__.new.call(this, true, true, drawBorder, borderWidth, quietWidth, 16);
    ;
  }).prototype = itf16.BarcodeItf16.prototype;
  dart.addTypeTests(itf16.BarcodeItf16);
  dart.addTypeCaches(itf16.BarcodeItf16);
  dart.setLibraryUri(itf16.BarcodeItf16, I[18]);
  itf14.BarcodeItf14 = class BarcodeItf14 extends itf.BarcodeItf {
    static ['_#new#tearOff'](drawBorder, borderWidth, quietWidth) {
      return new itf14.BarcodeItf14.new(drawBorder, borderWidth, quietWidth);
    }
    get name() {
      return "ITF 14";
    }
    makeText(data, width, height, fontHeight, textPadding, lineWidth) {
      data = this.checkLength(data, this.maxLength);
      data = data[$substring](0, 1) + " " + data[$substring](1, 3) + " " + data[$substring](3, 8) + " " + data[$substring](8, 13) + " " + data[$substring](13, 14);
      return super.makeText(data, width, height, fontHeight, textPadding, lineWidth);
    }
  };
  (itf14.BarcodeItf14.new = function(drawBorder, borderWidth, quietWidth) {
    itf14.BarcodeItf14.__proto__.new.call(this, true, true, drawBorder, borderWidth, quietWidth, 14);
    ;
  }).prototype = itf14.BarcodeItf14.prototype;
  dart.addTypeTests(itf14.BarcodeItf14);
  dart.addTypeCaches(itf14.BarcodeItf14);
  dart.setLibraryUri(itf14.BarcodeItf14, I[19]);
  var drawIsbn$ = dart.privateName(isbn, "BarcodeIsbn.drawIsbn");
  var drawEndChar$ = dart.privateName(ean13, "BarcodeEan13.drawEndChar");
  ean13.BarcodeEan13 = class BarcodeEan13 extends ean.BarcodeEan {
    get drawEndChar() {
      return this[drawEndChar$];
    }
    set drawEndChar(value) {
      super.drawEndChar = value;
    }
    static ['_#new#tearOff'](drawEndChar) {
      return new ean13.BarcodeEan13.new(drawEndChar);
    }
    get name() {
      return "EAN 13";
    }
    get minLength() {
      return 12;
    }
    get maxLength() {
      return 13;
    }
    verifyBytes(data) {
      let text = convert.utf8.decoder.convert(data);
      this.checkLength(text, this.maxLength);
      super.verifyBytes(data);
    }
    convert(data) {
      return new (T.SyncIterableOfbool()).new(() => (function* convert(data) {
        data = this.checkLength(data, this.maxLength);
        yield* this.add(5, 3);
        let index = 0;
        let first = barcode_maps.BarcodeMaps.eanFirst[$_get](data[$codeUnits][$first]);
        if (first == null) {
          dart.throw(new barcode_exception.BarcodeException.new("Unable to encode \"" + core.String.fromCharCode(data[$codeUnits][$first]) + "\" to " + this.name + " Barcode"));
        }
        for (let code of data[$codeUnits][$sublist](1)) {
          let codes = barcode_maps.BarcodeMaps.ean[$_get](code);
          if (codes == null) {
            dart.throw(new barcode_exception.BarcodeException.new("Unable to encode \"" + core.String.fromCharCode(code) + "\" to " + this.name + " Barcode"));
          }
          if (index === 6) {
            yield* this.add(10, 5);
          }
          if (index < 6) {
            yield* this.add(codes[$_get](first[$rightShift](index) & 1), 7);
          } else {
            yield* this.add(codes[$_get](2), 7);
          }
          index = index + 1;
        }
        yield* this.add(5, 3);
      }).bind(this)(data));
    }
    marginLeft(drawText, width, height, fontHeight, textPadding) {
      if (!drawText) {
        return 0.0;
      }
      return fontHeight;
    }
    marginRight(drawText, width, height, fontHeight, textPadding) {
      if (!drawText || !this.drawEndChar) {
        return 0.0;
      }
      return fontHeight;
    }
    getHeight(index, count, width, height, fontHeight, textPadding, drawText) {
      if (!drawText) {
        return super.getHeight(index, count, width, height, fontHeight, textPadding, drawText);
      }
      let h = height - fontHeight - textPadding;
      if (index < 3 || index > 45 && index < 49 || index > 91) {
        return h + fontHeight / 2 + textPadding;
      }
      return h;
    }
    makeText(data, width, height, fontHeight, textPadding, lineWidth) {
      return new (T.SyncIterableOfBarcodeElement()).new((function* makeText() {
        let text = this.checkLength(data, this.maxLength);
        let w = lineWidth * 7;
        let left = this.marginLeft(true, width, height, fontHeight, textPadding);
        let right = this.marginRight(true, width, height, fontHeight, textPadding);
        yield new barcode_operations.BarcodeText.new({left: 0.0, top: height - fontHeight, width: left - lineWidth, height: fontHeight, text: text[$_get](0), align: barcode_operations.BarcodeTextAlign.right});
        let offset = left + lineWidth * 3;
        for (let i = 1; i < text.length; i = i + 1) {
          yield new barcode_operations.BarcodeText.new({left: offset, top: height - fontHeight, width: w, height: fontHeight, text: text[$_get](i), align: barcode_operations.BarcodeTextAlign.center});
          offset = offset + w;
          if (i === 6) {
            offset = offset + lineWidth * 5;
          }
        }
        if (this.drawEndChar) {
          yield new barcode_operations.BarcodeText.new({left: width - right + lineWidth, top: height - fontHeight, width: right - lineWidth, height: fontHeight, text: ">", align: barcode_operations.BarcodeTextAlign.left});
        }
      }).bind(this));
    }
  };
  (ean13.BarcodeEan13.new = function(drawEndChar) {
    this[drawEndChar$] = drawEndChar;
    ean13.BarcodeEan13.__proto__.new.call(this);
    ;
  }).prototype = ean13.BarcodeEan13.prototype;
  dart.addTypeTests(ean13.BarcodeEan13);
  dart.addTypeCaches(ean13.BarcodeEan13);
  dart.setMethodSignature(ean13.BarcodeEan13, () => ({
    __proto__: dart.getMethods(ean13.BarcodeEan13.__proto__),
    convert: dart.fnType(core.Iterable$(core.bool), [core.String])
  }));
  dart.setGetterSignature(ean13.BarcodeEan13, () => ({
    __proto__: dart.getGetters(ean13.BarcodeEan13.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(ean13.BarcodeEan13, I[20]);
  dart.setFieldSignature(ean13.BarcodeEan13, () => ({
    __proto__: dart.getFields(ean13.BarcodeEan13.__proto__),
    drawEndChar: dart.finalFieldType(core.bool)
  }));
  dart.setStaticFieldSignature(ean13.BarcodeEan13, () => ['_finalSpacer']);
  dart.defineLazy(ean13.BarcodeEan13, {
    /*ean13.BarcodeEan13._finalSpacer*/get _finalSpacer() {
      return ">";
    }
  }, false);
  const makeText = Symbol("makeText");
  isbn.BarcodeIsbn = class BarcodeIsbn extends ean13.BarcodeEan13 {
    get drawIsbn() {
      return this[drawIsbn$];
    }
    set drawIsbn(value) {
      super.drawIsbn = value;
    }
    static ['_#new#tearOff'](drawEndChar, drawIsbn) {
      return new isbn.BarcodeIsbn.new(drawEndChar, drawIsbn);
    }
    marginTop(drawText, width, height, fontHeight, textPadding) {
      if (!drawText || !this.drawIsbn) {
        return super.marginTop(drawText, width, height, fontHeight, textPadding);
      }
      return fontHeight + textPadding;
    }
    makeText(data, width, height, fontHeight, textPadding, lineWidth) {
      return new (T.SyncIterableOfBarcodeElement()).new(() => (function* makeText$(data) {
        data = this.checkLength(data, this.maxLength);
        yield* this[makeText](data, width, height, fontHeight, textPadding, lineWidth);
        if (this.drawIsbn) {
          let isbn = data[$substring](0, 3) + "-" + data[$substring](3, 12) + "-" + data[$substring](12, 13);
          yield new barcode_operations.BarcodeText.new({left: 0.0, top: 0.0, width: width, height: fontHeight, text: "ISBN " + isbn, align: barcode_operations.BarcodeTextAlign.center});
        }
      }).bind(this)(data));
    }
    get name() {
      return "ISBN";
    }
    [makeText](data, width, height, fontHeight, textPadding, lineWidth) {
      return super.makeText(data, width, height, fontHeight, textPadding, lineWidth);
    }
  };
  (isbn.BarcodeIsbn.new = function(drawEndChar, drawIsbn) {
    this[drawIsbn$] = drawIsbn;
    isbn.BarcodeIsbn.__proto__.new.call(this, drawEndChar);
    ;
  }).prototype = isbn.BarcodeIsbn.prototype;
  dart.addTypeTests(isbn.BarcodeIsbn);
  dart.addTypeCaches(isbn.BarcodeIsbn);
  dart.setLibraryUri(isbn.BarcodeIsbn, I[21]);
  dart.setFieldSignature(isbn.BarcodeIsbn, () => ({
    __proto__: dart.getFields(isbn.BarcodeIsbn.__proto__),
    drawIsbn: dart.finalFieldType(core.bool)
  }));
  var drawSpacers$ = dart.privateName(ean8, "BarcodeEan8.drawSpacers");
  ean8.BarcodeEan8 = class BarcodeEan8 extends ean.BarcodeEan {
    get drawSpacers() {
      return this[drawSpacers$];
    }
    set drawSpacers(value) {
      super.drawSpacers = value;
    }
    static ['_#new#tearOff'](drawSpacers) {
      return new ean8.BarcodeEan8.new(drawSpacers);
    }
    get name() {
      return "EAN 8";
    }
    get minLength() {
      return 7;
    }
    get maxLength() {
      return 8;
    }
    verifyBytes(data) {
      let text = convert.utf8.decoder.convert(data);
      this.checkLength(text, this.maxLength);
      super.verifyBytes(data);
    }
    convert(data) {
      return new (T.SyncIterableOfbool()).new(() => (function* convert(data) {
        data = this.checkLength(data, this.maxLength);
        yield* this.add(5, 3);
        let index = 0;
        for (let code of data[$codeUnits]) {
          let codes = barcode_maps.BarcodeMaps.ean[$_get](code);
          if (codes == null) {
            dart.throw(new barcode_exception.BarcodeException.new("Unable to encode \"" + core.String.fromCharCode(code) + "\" to " + this.name + " Barcode"));
          }
          if (index === 4) {
            yield* this.add(10, 5);
          }
          yield* this.add(codes[$_get](index < 4 ? 0 : 2), 7);
          index = index + 1;
        }
        yield* this.add(5, 3);
      }).bind(this)(data));
    }
    marginLeft(drawText, width, height, fontHeight, textPadding) {
      if (!drawText || !this.drawSpacers) {
        return 0.0;
      }
      return fontHeight;
    }
    marginRight(drawText, width, height, fontHeight, textPadding) {
      if (!drawText || !this.drawSpacers) {
        return 0.0;
      }
      return fontHeight;
    }
    getHeight(index, count, width, height, fontHeight, textPadding, drawText) {
      if (!drawText) {
        return super.getHeight(index, count, width, height, fontHeight, textPadding, drawText);
      }
      let h = height - fontHeight - textPadding;
      if (index + count < 4 || index > 31 && index + count < 36 || index > 63) {
        return h + fontHeight / 2 + textPadding;
      }
      return h;
    }
    makeText(data, width, height, fontHeight, textPadding, lineWidth) {
      return new (T.SyncIterableOfBarcodeElement()).new(() => (function* makeText(data) {
        data = this.checkLength(data, this.maxLength);
        let w = lineWidth * 7;
        let left = this.marginLeft(true, width, height, fontHeight, textPadding);
        let right = this.marginRight(true, width, height, fontHeight, textPadding);
        let offset = left + lineWidth * 3;
        for (let i = 0; i < data.length; i = i + 1) {
          yield new barcode_operations.BarcodeText.new({left: offset, top: height - fontHeight, width: w, height: fontHeight, text: data[$_get](i), align: barcode_operations.BarcodeTextAlign.center});
          offset = offset + w;
          if (i === 3) {
            offset = offset + lineWidth * 5;
          }
        }
        if (this.drawSpacers) {
          yield new barcode_operations.BarcodeText.new({left: 0.0, top: height - fontHeight, width: left - lineWidth, height: fontHeight, text: "<", align: barcode_operations.BarcodeTextAlign.right});
          yield new barcode_operations.BarcodeText.new({left: width - right + lineWidth, top: height - fontHeight, width: right - lineWidth, height: fontHeight, text: ">", align: barcode_operations.BarcodeTextAlign.left});
        }
      }).bind(this)(data));
    }
  };
  (ean8.BarcodeEan8.new = function(drawSpacers) {
    this[drawSpacers$] = drawSpacers;
    ean8.BarcodeEan8.__proto__.new.call(this);
    ;
  }).prototype = ean8.BarcodeEan8.prototype;
  dart.addTypeTests(ean8.BarcodeEan8);
  dart.addTypeCaches(ean8.BarcodeEan8);
  dart.setMethodSignature(ean8.BarcodeEan8, () => ({
    __proto__: dart.getMethods(ean8.BarcodeEan8.__proto__),
    convert: dart.fnType(core.Iterable$(core.bool), [core.String])
  }));
  dart.setGetterSignature(ean8.BarcodeEan8, () => ({
    __proto__: dart.getGetters(ean8.BarcodeEan8.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(ean8.BarcodeEan8, I[22]);
  dart.setFieldSignature(ean8.BarcodeEan8, () => ({
    __proto__: dart.getFields(ean8.BarcodeEan8.__proto__),
    drawSpacers: dart.finalFieldType(core.bool)
  }));
  dart.setStaticFieldSignature(ean8.BarcodeEan8, () => ['_startSpacer', '_finalSpacer']);
  dart.defineLazy(ean8.BarcodeEan8, {
    /*ean8.BarcodeEan8._startSpacer*/get _startSpacer() {
      return "<";
    },
    /*ean8.BarcodeEan8._finalSpacer*/get _finalSpacer() {
      return ">";
    }
  }, false);
  ean2.BarcodeEan2 = class BarcodeEan2 extends ean.BarcodeEan {
    static ['_#new#tearOff']() {
      return new ean2.BarcodeEan2.new();
    }
    get name() {
      return "EAN 2";
    }
    get minLength() {
      return 2;
    }
    get maxLength() {
      return 2;
    }
    convert(data) {
      return new (T.SyncIterableOfbool()).new((function* convert() {
        this.verify(data);
        let idata = null;
        try {
          idata = core.int.parse(data);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(new barcode_exception.BarcodeException.new("Unable to encode \"" + data + "\" to " + this.name + " Barcode"));
          } else
            throw e$;
        }
        let pattern = idata[$modulo](4);
        yield* this.add(26, 5);
        let index = 0;
        for (let code of data[$codeUnits]) {
          let codes = barcode_maps.BarcodeMaps.ean[$_get](code);
          if (codes == null) {
            dart.throw(new barcode_exception.BarcodeException.new("Unable to encode \"" + core.String.fromCharCode(code) + "\" to " + this.name + " Barcode"));
          }
          if (index === 1) {
            yield* this.add(2, 2);
          }
          yield* this.add(codes[$_get](pattern[$rightShift](index) & 1 ^ 1), 7);
          index = index + 1;
        }
      }).bind(this));
    }
    marginTop(drawText, width, height, fontHeight, textPadding) {
      return drawText ? fontHeight + textPadding : 0.0;
    }
    getHeight(index, count, width, height, fontHeight, textPadding, drawText) {
      return height;
    }
    makeText(data, width, height, fontHeight, textPadding, lineWidth) {
      return new (T.SyncIterableOfBarcodeElement()).new(function* makeText() {
        yield new barcode_operations.BarcodeText.new({left: 0.0, top: 0.0, width: width, height: fontHeight, text: data, align: barcode_operations.BarcodeTextAlign.center});
      });
    }
    normalize(data) {
      return data[$padRight](this.minLength, "0")[$substring](0, this.minLength);
    }
  };
  (ean2.BarcodeEan2.new = function() {
    ean2.BarcodeEan2.__proto__.new.call(this);
    ;
  }).prototype = ean2.BarcodeEan2.prototype;
  dart.addTypeTests(ean2.BarcodeEan2);
  dart.addTypeCaches(ean2.BarcodeEan2);
  dart.setMethodSignature(ean2.BarcodeEan2, () => ({
    __proto__: dart.getMethods(ean2.BarcodeEan2.__proto__),
    convert: dart.fnType(core.Iterable$(core.bool), [core.String])
  }));
  dart.setGetterSignature(ean2.BarcodeEan2, () => ({
    __proto__: dart.getGetters(ean2.BarcodeEan2.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(ean2.BarcodeEan2, I[23]);
  ean5.BarcodeEan5 = class BarcodeEan5 extends ean2.BarcodeEan2 {
    static ['_#new#tearOff']() {
      return new ean5.BarcodeEan5.new();
    }
    get name() {
      return "EAN 5";
    }
    get minLength() {
      return 5;
    }
    get maxLength() {
      return 5;
    }
    checkSumModulo10(data) {
      let sum = 0;
      let fak = data.length;
      for (let c of data[$codeUnits]) {
        if (fak[$modulo](2) === 0) {
          sum = sum + (c - 48) * 9;
        } else {
          sum = sum + (c - 48) * 3;
        }
        fak = fak - 1;
      }
      return core.String.fromCharCode(sum[$modulo](10) + 48);
    }
    convert(data) {
      return new (T.SyncIterableOfbool()).new((function* convert() {
        this.verify(data);
        let checksum = this.checkSumModulo10(data);
        let pattern = barcode_maps.BarcodeMaps.ean5Checksum[$_get](checksum[$codeUnitAt](0));
        yield* this.add(26, 5);
        let index = 0;
        for (let code of data[$codeUnits]) {
          let codes = barcode_maps.BarcodeMaps.ean[$_get](code);
          if (codes == null) {
            dart.throw(new barcode_exception.BarcodeException.new("Unable to encode \"" + core.String.fromCharCode(code) + "\" to " + this.name + " Barcode"));
          }
          if (index >= 1) {
            yield* this.add(2, 2);
          }
          yield* this.add(codes[$_get](dart.nullCheck(pattern)[$rightShift](index) & 1), 7);
          index = index + 1;
        }
      }).bind(this));
    }
  };
  (ean5.BarcodeEan5.new = function() {
    ean5.BarcodeEan5.__proto__.new.call(this);
    ;
  }).prototype = ean5.BarcodeEan5.prototype;
  dart.addTypeTests(ean5.BarcodeEan5);
  dart.addTypeCaches(ean5.BarcodeEan5);
  dart.setLibraryUri(ean5.BarcodeEan5, I[24]);
  var _addPadding = dart.privateName(datamatrix, "_addPadding");
  var _render = dart.privateName(datamatrix, "_render");
  datamatrix.BarcodeDataMatrix = class BarcodeDataMatrix extends barcode_2d.Barcode2D {
    static ['_#new#tearOff']() {
      return new datamatrix.BarcodeDataMatrix.new();
    }
    make(data, opts) {
      let t26;
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let drawText = opts && 'drawText' in opts ? opts.drawText : false;
      let fontHeight = opts && 'fontHeight' in opts ? opts.fontHeight : null;
      let textPadding = opts && 'textPadding' in opts ? opts.textPadding : null;
      let encoder = (t26 = new datamatrix.DataMatrixEncoder.new(), (() => {
        t26.ascii(data);
        return t26;
      })());
      return this.makeBytes(encoder.toBytes(), {width: width, height: height, drawText: drawText, fontHeight: fontHeight, textPadding: textPadding});
    }
    convert(data) {
      let text = (() => {
        let t26 = T.ListOfint().of(data);
        return t26;
      })();
      let size = null;
      for (let s of datamatrix._CodeSize.codeSizes) {
        if (s.dataCodewords() >= text[$length]) {
          size = s;
          break;
        }
      }
      if (size == null) {
        dart.throw(C[66] || CT.C66);
      }
      text = this[_addPadding](text, size.dataCodewords());
      text = datamatrix._ErrorCorrection.ec.calcECC(text, size);
      let code = this[_render](text, size);
      return new barcode_2d.Barcode2DMatrix.new(size.columns, size.rows, 1.0, code);
    }
    get charSet() {
      return T.IterableOfint().generate(256);
    }
    get name() {
      return "Data Matrix";
    }
    get maxLength() {
      return 1559;
    }
    [_render](data, size) {
      let cl = new datamatrix._CodeLayout.new(size);
      cl.setValues(data);
      return cl.merge();
    }
    [_addPadding](data, toCount) {
      if (data[$length] < toCount) {
        data[$add](129);
      }
      while (data[$length] < toCount) {
        let r = (149 * (data[$length] + 1))[$modulo](253) + 1;
        data[$add]((129 + r)[$modulo](254));
      }
      return data;
    }
  };
  (datamatrix.BarcodeDataMatrix.new = function() {
    datamatrix.BarcodeDataMatrix.__proto__.new.call(this);
    ;
  }).prototype = datamatrix.BarcodeDataMatrix.prototype;
  dart.addTypeTests(datamatrix.BarcodeDataMatrix);
  dart.addTypeCaches(datamatrix.BarcodeDataMatrix);
  dart.setMethodSignature(datamatrix.BarcodeDataMatrix, () => ({
    __proto__: dart.getMethods(datamatrix.BarcodeDataMatrix.__proto__),
    convert: dart.fnType(barcode_2d.Barcode2DMatrix, [typed_data.Uint8List]),
    [_render]: dart.fnType(core.List$(core.bool), [core.List$(core.int), datamatrix._CodeSize]),
    [_addPadding]: dart.fnType(core.List$(core.int), [core.List$(core.int), core.int])
  }));
  dart.setGetterSignature(datamatrix.BarcodeDataMatrix, () => ({
    __proto__: dart.getGetters(datamatrix.BarcodeDataMatrix.__proto__),
    charSet: core.Iterable$(core.int),
    name: core.String
  }));
  dart.setLibraryUri(datamatrix.BarcodeDataMatrix, I[25]);
  var ___CodeLayout_matrix = dart.privateName(datamatrix, "_#_CodeLayout#matrix");
  var ___CodeLayout_occupy = dart.privateName(datamatrix, "_#_CodeLayout#occupy");
  datamatrix._CodeLayout = class _CodeLayout extends core.Object {
    static ['_#new#tearOff'](size) {
      return new datamatrix._CodeLayout.new(size);
    }
    get matrix() {
      let t27;
      t27 = this[___CodeLayout_matrix];
      return t27 == null ? dart.throw(new _internal.LateError.fieldNI("matrix")) : t27;
    }
    set matrix(matrix$35param) {
      this[___CodeLayout_matrix] = matrix$35param;
    }
    get occupy() {
      let t27;
      t27 = this[___CodeLayout_occupy];
      return t27 == null ? dart.throw(new _internal.LateError.fieldNI("occupy")) : t27;
    }
    set occupy(occupy$35param) {
      this[___CodeLayout_occupy] = occupy$35param;
    }
    occupied(row, col) {
      return this.occupy[$_get](col + row * this.size.matrixColumns());
    }
    setXY(row, col, value, bitNum) {
      let val = (value[$rightShift](7 - bitNum) & 1) === 1;
      if (row < 0) {
        row = row + this.size.matrixRows();
        col = col + (4 - (this.size.matrixRows() + 4)[$modulo](8));
      }
      if (col < 0) {
        col = col + this.size.matrixColumns();
        row = row + (4 - (this.size.matrixColumns() + 4)[$modulo](8));
      }
      if (!!this.occupied(row, col)) dart.assertFailed("Field already occupied row: " + dart.str(row) + " col: " + dart.str(col), I[26], 136, 12, "!occupied(row, col)");
      this.occupy[$_set](col + row * this.size.matrixColumns(), true);
      this.matrix[$_set](col + row * this.size.matrixColumns(), val);
    }
    setSimple(row, col, value) {
      this.setXY(row - 2, col - 2, value, 0);
      this.setXY(row - 2, col - 1, value, 1);
      this.setXY(row - 1, col - 2, value, 2);
      this.setXY(row - 1, col - 1, value, 3);
      this.setXY(row - 1, col - 0, value, 4);
      this.setXY(row - 0, col - 2, value, 5);
      this.setXY(row - 0, col - 1, value, 6);
      this.setXY(row - 0, col - 0, value, 7);
    }
    corner1(value) {
      this.setXY(this.size.matrixRows() - 1, 0, value, 0);
      this.setXY(this.size.matrixRows() - 1, 1, value, 1);
      this.setXY(this.size.matrixRows() - 1, 2, value, 2);
      this.setXY(0, this.size.matrixColumns() - 2, value, 3);
      this.setXY(0, this.size.matrixColumns() - 1, value, 4);
      this.setXY(1, this.size.matrixColumns() - 1, value, 5);
      this.setXY(2, this.size.matrixColumns() - 1, value, 6);
      this.setXY(3, this.size.matrixColumns() - 1, value, 7);
    }
    corner2(value) {
      this.setXY(this.size.matrixRows() - 3, 0, value, 0);
      this.setXY(this.size.matrixRows() - 2, 0, value, 1);
      this.setXY(this.size.matrixRows() - 1, 0, value, 2);
      this.setXY(0, this.size.matrixColumns() - 4, value, 3);
      this.setXY(0, this.size.matrixColumns() - 3, value, 4);
      this.setXY(0, this.size.matrixColumns() - 2, value, 5);
      this.setXY(0, this.size.matrixColumns() - 1, value, 6);
      this.setXY(1, this.size.matrixColumns() - 1, value, 7);
    }
    corner3(value) {
      this.setXY(this.size.matrixRows() - 3, 0, value, 0);
      this.setXY(this.size.matrixRows() - 2, 0, value, 1);
      this.setXY(this.size.matrixRows() - 1, 0, value, 2);
      this.setXY(0, this.size.matrixColumns() - 2, value, 3);
      this.setXY(0, this.size.matrixColumns() - 1, value, 4);
      this.setXY(1, this.size.matrixColumns() - 1, value, 5);
      this.setXY(2, this.size.matrixColumns() - 1, value, 6);
      this.setXY(3, this.size.matrixColumns() - 1, value, 7);
    }
    corner4(value) {
      this.setXY(this.size.matrixRows() - 1, 0, value, 0);
      this.setXY(this.size.matrixRows() - 1, this.size.matrixColumns() - 1, value, 1);
      this.setXY(0, this.size.matrixColumns() - 3, value, 2);
      this.setXY(0, this.size.matrixColumns() - 2, value, 3);
      this.setXY(0, this.size.matrixColumns() - 1, value, 4);
      this.setXY(1, this.size.matrixColumns() - 3, value, 5);
      this.setXY(1, this.size.matrixColumns() - 2, value, 6);
      this.setXY(1, this.size.matrixColumns() - 1, value, 7);
    }
    setValues(data) {
      let idx = 0;
      let row = 4;
      let col = 0;
      while (row < this.size.matrixRows() || col < this.size.matrixColumns()) {
        if (row === this.size.matrixRows() && col === 0) {
          this.corner1(data[$_get](idx));
          idx = idx + 1;
        }
        if (row === this.size.matrixRows() - 2 && col === 0 && this.size.matrixColumns()[$modulo](4) !== 0) {
          this.corner2(data[$_get](idx));
          idx = idx + 1;
        }
        if (row === this.size.matrixRows() - 2 && col === 0 && this.size.matrixColumns()[$modulo](8) === 4) {
          this.corner3(data[$_get](idx));
          idx = idx + 1;
        }
        if (row === this.size.matrixRows() + 4 && col === 2 && this.size.matrixColumns()[$modulo](8) === 0) {
          this.corner4(data[$_get](idx));
          idx = idx + 1;
        }
        while (true) {
          if (row < this.size.matrixRows() && col >= 0 && !this.occupied(row, col)) {
            this.setSimple(row, col, data[$_get](idx));
            idx = idx + 1;
          }
          row = row - 2;
          col = col + 2;
          if (row < 0 || col >= this.size.matrixColumns()) {
            break;
          }
        }
        row = row + 1;
        col = col + 3;
        while (true) {
          if (row >= 0 && col < this.size.matrixColumns() && !this.occupied(row, col)) {
            this.setSimple(row, col, data[$_get](idx));
            idx = idx + 1;
          }
          row = row + 2;
          col = col - 2;
          if (row >= this.size.matrixRows() || col < 0) {
            break;
          }
        }
        row = row + 3;
        col = col + 1;
      }
      if (!this.occupied(this.size.matrixRows() - 1, this.size.matrixColumns() - 1)) {
        this.setXY(this.size.matrixRows() - 1, this.size.matrixColumns() - 1, 255, 0);
        this.setXY(this.size.matrixRows() - 2, this.size.matrixColumns() - 2, 255, 0);
      }
    }
    merge() {
      let result = T.ListOfbool().filled(this.size.rows * this.size.columns, false);
      const setXY = (x, y, v) => {
        result[$_set](x + y * this.size.columns, v);
      };
      dart.fn(setXY, T.intAndintAndboolTovoid());
      for (let r = 0; r < this.size.rows; r = r + (this.size.regionRows() + 2)) {
        for (let c = 0; c < this.size.columns; c = c + 2) {
          setXY(c, r, true);
        }
      }
      for (let r = this.size.regionRows() + 1; r < this.size.rows; r = r + (this.size.regionRows() + 2)) {
        for (let c = 0; c < this.size.columns; c = c + 1) {
          setXY(c, r, true);
        }
      }
      for (let c = this.size.regionColumns() + 1; c < this.size.columns; c = c + (this.size.regionColumns() + 2)) {
        for (let r = 1; r < this.size.rows; r = r + 2) {
          setXY(c, r, true);
        }
      }
      for (let c = 0; c < this.size.columns; c = c + (this.size.regionColumns() + 2)) {
        for (let r = 0; r < this.size.rows; r = r + 1) {
          setXY(c, r, true);
        }
      }
      for (let hRegion = 0; hRegion < this.size.regionCountHorizontal; hRegion = hRegion + 1) {
        for (let vRegion = 0; vRegion < this.size.regionCountVertical; vRegion = vRegion + 1) {
          for (let x = 0; x < this.size.regionColumns(); x = x + 1) {
            let colMatrix = this.size.regionColumns() * hRegion + x;
            let colResult = (2 + this.size.regionColumns()) * hRegion + x + 1;
            for (let y = 0; y < this.size.regionRows(); y = y + 1) {
              let rowMatrix = this.size.regionRows() * vRegion + y;
              let rowResult = (2 + this.size.regionRows()) * vRegion + y + 1;
              let val = this.matrix[$_get](colMatrix + rowMatrix * this.size.matrixColumns());
              setXY(colResult, rowResult, val);
            }
          }
        }
      }
      return result;
    }
  };
  (datamatrix._CodeLayout.new = function(size) {
    this[___CodeLayout_matrix] = null;
    this[___CodeLayout_occupy] = null;
    this.size = size;
    this.matrix = T.ListOfbool().filled(this.size.matrixColumns() * this.size.matrixRows(), false);
    this.occupy = T.ListOfbool().filled(this.size.matrixColumns() * this.size.matrixRows(), false);
  }).prototype = datamatrix._CodeLayout.prototype;
  dart.addTypeTests(datamatrix._CodeLayout);
  dart.addTypeCaches(datamatrix._CodeLayout);
  dart.setMethodSignature(datamatrix._CodeLayout, () => ({
    __proto__: dart.getMethods(datamatrix._CodeLayout.__proto__),
    occupied: dart.fnType(core.bool, [core.int, core.int]),
    setXY: dart.fnType(dart.void, [core.int, core.int, core.int, core.int]),
    setSimple: dart.fnType(dart.void, [core.int, core.int, core.int]),
    corner1: dart.fnType(dart.void, [core.int]),
    corner2: dart.fnType(dart.void, [core.int]),
    corner3: dart.fnType(dart.void, [core.int]),
    corner4: dart.fnType(dart.void, [core.int]),
    setValues: dart.fnType(dart.void, [core.List$(core.int)]),
    merge: dart.fnType(core.List$(core.bool), [])
  }));
  dart.setGetterSignature(datamatrix._CodeLayout, () => ({
    __proto__: dart.getGetters(datamatrix._CodeLayout.__proto__),
    matrix: core.List$(core.bool),
    occupy: core.List$(core.bool)
  }));
  dart.setSetterSignature(datamatrix._CodeLayout, () => ({
    __proto__: dart.getSetters(datamatrix._CodeLayout.__proto__),
    matrix: core.List$(core.bool),
    occupy: core.List$(core.bool)
  }));
  dart.setLibraryUri(datamatrix._CodeLayout, I[25]);
  dart.setFieldSignature(datamatrix._CodeLayout, () => ({
    __proto__: dart.getFields(datamatrix._CodeLayout.__proto__),
    [___CodeLayout_matrix]: dart.fieldType(dart.nullable(core.List$(core.bool))),
    [___CodeLayout_occupy]: dart.fieldType(dart.nullable(core.List$(core.bool))),
    size: dart.finalFieldType(datamatrix._CodeSize)
  }));
  var rows$ = dart.privateName(datamatrix, "_CodeSize.rows");
  var columns$ = dart.privateName(datamatrix, "_CodeSize.columns");
  var regionCountHorizontal$ = dart.privateName(datamatrix, "_CodeSize.regionCountHorizontal");
  var regionCountVertical$ = dart.privateName(datamatrix, "_CodeSize.regionCountVertical");
  var eccCount$ = dart.privateName(datamatrix, "_CodeSize.eccCount");
  var blockCount$ = dart.privateName(datamatrix, "_CodeSize.blockCount");
  datamatrix._CodeSize = class _CodeSize extends core.Object {
    get rows() {
      return this[rows$];
    }
    set rows(value) {
      super.rows = value;
    }
    get columns() {
      return this[columns$];
    }
    set columns(value) {
      super.columns = value;
    }
    get regionCountHorizontal() {
      return this[regionCountHorizontal$];
    }
    set regionCountHorizontal(value) {
      super.regionCountHorizontal = value;
    }
    get regionCountVertical() {
      return this[regionCountVertical$];
    }
    set regionCountVertical(value) {
      super.regionCountVertical = value;
    }
    get eccCount() {
      return this[eccCount$];
    }
    set eccCount(value) {
      super.eccCount = value;
    }
    get blockCount() {
      return this[blockCount$];
    }
    set blockCount(value) {
      super.blockCount = value;
    }
    static ['_#new#tearOff'](rows, columns, regionCountHorizontal, regionCountVertical, eccCount, blockCount) {
      return new datamatrix._CodeSize.new(rows, columns, regionCountHorizontal, regionCountVertical, eccCount, blockCount);
    }
    regionRows() {
      return ((this.rows - this.regionCountHorizontal * 2) / this.regionCountHorizontal)[$truncate]();
    }
    regionColumns() {
      return ((this.columns - this.regionCountVertical * 2) / this.regionCountVertical)[$truncate]();
    }
    matrixRows() {
      return this.regionRows() * this.regionCountHorizontal;
    }
    matrixColumns() {
      return this.regionColumns() * this.regionCountVertical;
    }
    dataCodewords() {
      return (this.matrixColumns() * this.matrixRows() / 8)[$truncate]() - this.eccCount;
    }
    dataCodewordsForBlock(idx) {
      if (this.rows === 144 && this.columns === 144) {
        if (idx < 8) {
          return 156;
        } else {
          return 155;
        }
      }
      return (this.dataCodewords() / this.blockCount)[$truncate]();
    }
    errorCorrectionCodewordsPerBlock() {
      return (this.eccCount / this.blockCount)[$truncate]();
    }
  };
  (datamatrix._CodeSize.new = function(rows, columns, regionCountHorizontal, regionCountVertical, eccCount, blockCount) {
    this[rows$] = rows;
    this[columns$] = columns;
    this[regionCountHorizontal$] = regionCountHorizontal;
    this[regionCountVertical$] = regionCountVertical;
    this[eccCount$] = eccCount;
    this[blockCount$] = blockCount;
    ;
  }).prototype = datamatrix._CodeSize.prototype;
  dart.addTypeTests(datamatrix._CodeSize);
  dart.addTypeCaches(datamatrix._CodeSize);
  dart.setMethodSignature(datamatrix._CodeSize, () => ({
    __proto__: dart.getMethods(datamatrix._CodeSize.__proto__),
    regionRows: dart.fnType(core.int, []),
    regionColumns: dart.fnType(core.int, []),
    matrixRows: dart.fnType(core.int, []),
    matrixColumns: dart.fnType(core.int, []),
    dataCodewords: dart.fnType(core.int, []),
    dataCodewordsForBlock: dart.fnType(core.int, [core.int]),
    errorCorrectionCodewordsPerBlock: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(datamatrix._CodeSize, I[25]);
  dart.setFieldSignature(datamatrix._CodeSize, () => ({
    __proto__: dart.getFields(datamatrix._CodeSize.__proto__),
    rows: dart.finalFieldType(core.int),
    columns: dart.finalFieldType(core.int),
    regionCountHorizontal: dart.finalFieldType(core.int),
    regionCountVertical: dart.finalFieldType(core.int),
    eccCount: dart.finalFieldType(core.int),
    blockCount: dart.finalFieldType(core.int)
  }));
  dart.setStaticFieldSignature(datamatrix._CodeSize, () => ['codeSizes']);
  dart.defineLazy(datamatrix._CodeSize, {
    /*datamatrix._CodeSize.codeSizes*/get codeSizes() {
      return C[67] || CT.C67;
    }
  }, false);
  var ___ErrorCorrection_rs = dart.privateName(datamatrix, "_#_ErrorCorrection#rs");
  datamatrix._ErrorCorrection = class _ErrorCorrection extends core.Object {
    static ['_#new#tearOff']() {
      return new datamatrix._ErrorCorrection.new();
    }
    get rs() {
      let t27;
      t27 = this[___ErrorCorrection_rs];
      return t27 == null ? dart.throw(new _internal.LateError.fieldNI("rs")) : t27;
    }
    set rs(rs$35param) {
      this[___ErrorCorrection_rs] = rs$35param;
    }
    calcECC(data, size) {
      let dataSize = data[$length];
      data[$addAll](T.ListOfint().filled(size.eccCount, 0));
      for (let block = 0; block < size.blockCount; block = block + 1) {
        let dataCnt = size.dataCodewordsForBlock(block);
        let buff = T.ListOfint().filled(dataCnt, 0);
        let j = 0;
        for (let i = block; i < dataSize; i = i + size.blockCount) {
          buff[$_set](j, data[$_get](i));
          j = j + 1;
        }
        let ecc = datamatrix._ErrorCorrection.ec.rs.encode(buff, size.errorCorrectionCodewordsPerBlock());
        j = 0;
        for (let i = block; i < size.errorCorrectionCodewordsPerBlock() * size.blockCount; i = i + size.blockCount) {
          data[$_set](dataSize + i, ecc[$_get](j));
          j = j + 1;
        }
      }
      return data;
    }
  };
  (datamatrix._ErrorCorrection.new = function() {
    this[___ErrorCorrection_rs] = null;
    let gf = new reedsolomon.GaloisField.new(301, 256, 1);
    this.rs = new reedsolomon.ReedSolomonEncoder.new(gf);
  }).prototype = datamatrix._ErrorCorrection.prototype;
  dart.addTypeTests(datamatrix._ErrorCorrection);
  dart.addTypeCaches(datamatrix._ErrorCorrection);
  dart.setMethodSignature(datamatrix._ErrorCorrection, () => ({
    __proto__: dart.getMethods(datamatrix._ErrorCorrection.__proto__),
    calcECC: dart.fnType(core.List$(core.int), [core.List$(core.int), datamatrix._CodeSize])
  }));
  dart.setGetterSignature(datamatrix._ErrorCorrection, () => ({
    __proto__: dart.getGetters(datamatrix._ErrorCorrection.__proto__),
    rs: reedsolomon.ReedSolomonEncoder
  }));
  dart.setSetterSignature(datamatrix._ErrorCorrection, () => ({
    __proto__: dart.getSetters(datamatrix._ErrorCorrection.__proto__),
    rs: reedsolomon.ReedSolomonEncoder
  }));
  dart.setLibraryUri(datamatrix._ErrorCorrection, I[25]);
  dart.setFieldSignature(datamatrix._ErrorCorrection, () => ({
    __proto__: dart.getFields(datamatrix._ErrorCorrection.__proto__),
    [___ErrorCorrection_rs]: dart.fieldType(dart.nullable(reedsolomon.ReedSolomonEncoder))
  }));
  dart.setStaticFieldSignature(datamatrix._ErrorCorrection, () => ['ec']);
  dart.defineLazy(datamatrix._ErrorCorrection, {
    /*datamatrix._ErrorCorrection.ec*/get ec() {
      return new datamatrix._ErrorCorrection.new();
    }
  }, false);
  var _data = dart.privateName(datamatrix, "_data");
  datamatrix.DataMatrixEncoder = class DataMatrixEncoder extends core.Object {
    ascii(data) {
      let input = data[$codeUnits];
      for (let i = 0; i < input[$length];) {
        let c = input[$_get](i);
        i = i + 1;
        if (c >= 48 && c <= 57 && i < input[$length] && input[$_get](i) >= 48 && input[$_get](i) <= 57) {
          let c2 = input[$_get](i);
          i = i + 1;
          let cw = (c - 48) * 10 + (c2 - 48) + 130;
          this[_data].addByte(cw);
        } else if (c > 127) {
          this[_data].addByte(235);
          this[_data].addByte(c - 127);
        } else {
          this[_data].addByte(c + 1);
        }
      }
    }
    fnc1() {
      this[_data].addByte(232);
    }
    append() {
      this[_data].addByte(233);
    }
    program() {
      this[_data].addByte(234);
    }
    macro05() {
      this[_data].addByte(236);
    }
    macro06() {
      this[_data].addByte(237);
    }
    eci() {
      this[_data].addByte(241);
    }
    gs() {
      this[_data].addByte(29);
    }
    toBytes() {
      return this[_data].toBytes();
    }
    static ['_#new#tearOff']() {
      return new datamatrix.DataMatrixEncoder.new();
    }
  };
  (datamatrix.DataMatrixEncoder.new = function() {
    this[_data] = _internal.BytesBuilder.new();
    ;
  }).prototype = datamatrix.DataMatrixEncoder.prototype;
  dart.addTypeTests(datamatrix.DataMatrixEncoder);
  dart.addTypeCaches(datamatrix.DataMatrixEncoder);
  dart.setMethodSignature(datamatrix.DataMatrixEncoder, () => ({
    __proto__: dart.getMethods(datamatrix.DataMatrixEncoder.__proto__),
    ascii: dart.fnType(dart.void, [core.String]),
    fnc1: dart.fnType(dart.void, []),
    append: dart.fnType(dart.void, []),
    program: dart.fnType(dart.void, []),
    macro05: dart.fnType(dart.void, []),
    macro06: dart.fnType(dart.void, []),
    eci: dart.fnType(dart.void, []),
    gs: dart.fnType(dart.void, []),
    toBytes: dart.fnType(typed_data.Uint8List, [])
  }));
  dart.setLibraryUri(datamatrix.DataMatrixEncoder, I[25]);
  dart.setFieldSignature(datamatrix.DataMatrixEncoder, () => ({
    __proto__: dart.getFields(datamatrix.DataMatrixEncoder.__proto__),
    [_data]: dart.finalFieldType(_internal.BytesBuilder)
  }));
  code93.BarcodeCode93 = class BarcodeCode93 extends barcode_1d.Barcode1D {
    static ['_#new#tearOff']() {
      return new code93.BarcodeCode93.new();
    }
    get charSet() {
      return barcode_maps.BarcodeMaps.code93[$keys][$where](dart.fn(x => x > 0, T.intTobool()));
    }
    get name() {
      return "CODE 93";
    }
    convert(data) {
      return new (T.SyncIterableOfbool()).new((function* convert() {
        yield* this.add(245, 9);
        let keys = barcode_maps.BarcodeMaps.code93[$keys][$toList]();
        for (let code of data[$codeUnits]) {
          let codeValue = barcode_maps.BarcodeMaps.code93[$_get](code);
          if (codeValue == null) {
            dart.throw(new barcode_exception.BarcodeException.new("Unable to encode \"" + core.String.fromCharCode(code) + "\" to " + this.name + " Barcode"));
          }
          yield* this.add(codeValue, 9);
        }
        let sumC = 0;
        let sumK = 0;
        let indexC = 1;
        let indexK = 2;
        for (let index = data[$codeUnits][$length] - 1; index >= 0; index = index - 1) {
          let code = data[$codeUnits][$_get](index);
          sumC = sumC + keys[$indexOf](code) * indexC;
          sumK = sumK + keys[$indexOf](code) * indexK;
          indexC = indexC + 1;
          if (indexC > 20) {
            indexC = 1;
          }
          indexK = indexK + 1;
          if (indexK > 15) {
            indexK = 1;
          }
        }
        sumC = sumC[$modulo](47);
        yield* this.add(dart.nullCheck(barcode_maps.BarcodeMaps.code93[$_get](keys[$_get](sumC))), 9);
        sumK = (sumK + sumC)[$modulo](47);
        yield* this.add(dart.nullCheck(barcode_maps.BarcodeMaps.code93[$_get](keys[$_get](sumK))), 9);
        yield* this.add(245, 9);
        yield true;
      }).bind(this));
    }
  };
  (code93.BarcodeCode93.new = function() {
    code93.BarcodeCode93.__proto__.new.call(this);
    ;
  }).prototype = code93.BarcodeCode93.prototype;
  dart.addTypeTests(code93.BarcodeCode93);
  dart.addTypeCaches(code93.BarcodeCode93);
  dart.setMethodSignature(code93.BarcodeCode93, () => ({
    __proto__: dart.getMethods(code93.BarcodeCode93.__proto__),
    convert: dart.fnType(core.Iterable$(core.bool), [core.String])
  }));
  dart.setGetterSignature(code93.BarcodeCode93, () => ({
    __proto__: dart.getGetters(code93.BarcodeCode93.__proto__),
    charSet: core.Iterable$(core.int),
    name: core.String
  }));
  dart.setLibraryUri(code93.BarcodeCode93, I[27]);
  code39.BarcodeCode39 = class BarcodeCode39 extends barcode_1d.Barcode1D {
    static ['_#new#tearOff']() {
      return new code39.BarcodeCode39.new();
    }
    get charSet() {
      return barcode_maps.BarcodeMaps.code39[$keys];
    }
    get name() {
      return "CODE 39";
    }
    convert(data) {
      return new (T.SyncIterableOfbool()).new((function* convert() {
        yield* this.add(2921, 13);
        for (let code of data[$codeUnits]) {
          let codeValue = barcode_maps.BarcodeMaps.code39[$_get](code);
          if (codeValue == null) {
            dart.throw(new barcode_exception.BarcodeException.new("Unable to encode \"" + core.String.fromCharCode(code) + "\" to " + this.name + " Barcode"));
          }
          yield* this.add(codeValue, 13);
        }
        yield* this.add(2921, 13);
      }).bind(this));
    }
    makeText(data, width, height, fontHeight, textPadding, lineWidth) {
      return new (T.SyncIterableOfBarcodeElement()).new(function* makeText() {
        let text = "*" + data + "*";
        for (let i = 0; i < text.length; i = i + 1) {
          yield new barcode_operations.BarcodeText.new({left: lineWidth * 13 * i, top: height - fontHeight, width: lineWidth * 13, height: fontHeight, text: text[$_get](i), align: barcode_operations.BarcodeTextAlign.center});
        }
      });
    }
  };
  (code39.BarcodeCode39.new = function() {
    code39.BarcodeCode39.__proto__.new.call(this);
    ;
  }).prototype = code39.BarcodeCode39.prototype;
  dart.addTypeTests(code39.BarcodeCode39);
  dart.addTypeCaches(code39.BarcodeCode39);
  dart.setMethodSignature(code39.BarcodeCode39, () => ({
    __proto__: dart.getMethods(code39.BarcodeCode39.__proto__),
    convert: dart.fnType(core.Iterable$(core.bool), [core.String])
  }));
  dart.setGetterSignature(code39.BarcodeCode39, () => ({
    __proto__: dart.getGetters(code39.BarcodeCode39.__proto__),
    charSet: core.Iterable$(core.int),
    name: core.String
  }));
  dart.setLibraryUri(code39.BarcodeCode39, I[28]);
  code128.BarcodeCode128Fnc = class BarcodeCode128Fnc extends core.Object {
    static ['_#new#tearOff']() {
      return new code128.BarcodeCode128Fnc.new();
    }
  };
  (code128.BarcodeCode128Fnc.new = function() {
    ;
  }).prototype = code128.BarcodeCode128Fnc.prototype;
  dart.addTypeTests(code128.BarcodeCode128Fnc);
  dart.addTypeCaches(code128.BarcodeCode128Fnc);
  dart.setLibraryUri(code128.BarcodeCode128Fnc, I[29]);
  dart.setStaticFieldSignature(code128.BarcodeCode128Fnc, () => ['fnc1', 'fnc2', 'fnc3', 'fnc4']);
  dart.defineLazy(code128.BarcodeCode128Fnc, {
    /*code128.BarcodeCode128Fnc.fnc1*/get fnc1() {
      return "ú";
    },
    /*code128.BarcodeCode128Fnc.fnc2*/get fnc2() {
      return "û";
    },
    /*code128.BarcodeCode128Fnc.fnc3*/get fnc3() {
      return "ü";
    },
    /*code128.BarcodeCode128Fnc.fnc4*/get fnc4() {
      return "ý";
    }
  }, false);
  var useCode128A$ = dart.privateName(code128, "BarcodeCode128.useCode128A");
  var useCode128B$ = dart.privateName(code128, "BarcodeCode128.useCode128B");
  var useCode128C$ = dart.privateName(code128, "BarcodeCode128.useCode128C");
  var escapes$ = dart.privateName(code128, "BarcodeCode128.escapes");
  var isGS1$ = dart.privateName(code128, "BarcodeCode128.isGS1");
  code128.BarcodeCode128 = class BarcodeCode128 extends barcode_1d.Barcode1D {
    get useCode128A() {
      return this[useCode128A$];
    }
    set useCode128A(value) {
      super.useCode128A = value;
    }
    get useCode128B() {
      return this[useCode128B$];
    }
    set useCode128B(value) {
      super.useCode128B = value;
    }
    get useCode128C() {
      return this[useCode128C$];
    }
    set useCode128C(value) {
      super.useCode128C = value;
    }
    get escapes() {
      return this[escapes$];
    }
    set escapes(value) {
      super.escapes = value;
    }
    get isGS1() {
      return this[isGS1$];
    }
    set isGS1(value) {
      super.isGS1 = value;
    }
    static ['_#new#tearOff'](useCode128A, useCode128B, useCode128C, isGS1, escapes) {
      return new code128.BarcodeCode128.new(useCode128A, useCode128B, useCode128C, isGS1, escapes);
    }
    get charSet() {
      return barcode_maps.BarcodeMaps.code128B[$keys][$where](dart.fn(x => this.useCode128B && x >= 0, T.intTobool()))[$followedBy](barcode_maps.BarcodeMaps.code128A[$keys][$where](dart.fn(x => this.useCode128A && x >= 0, T.intTobool())))[$followedBy](this.useCode128C ? T.ListOfint().generate(10, dart.fn(index => index + 48, T.intToint())) : T.JSArrayOfint().of([]))[$followedBy]((() => {
        let t27 = T.JSArrayOfint().of([250]);
        if (this.useCode128A || this.useCode128B) t27.push(251);
        if (this.useCode128A || this.useCode128B) t27.push(252);
        if (this.useCode128A || this.useCode128B) t27.push(253);
        if (this.isGS1) t27[$addAll](T.JSArrayOfint().of([40, 41]));
        return t27;
      })())[$toSet]();
    }
    get name() {
      return this.isGS1 ? "GS1 128" : "CODE 128";
    }
    shortestCode(data) {
      let table = 0;
      let lastTable = 0;
      let length = 0;
      let digitCount = 0;
      let result = T.JSArrayOfint().of([]);
      const addFrom = (data, start) => {
        let t = null;
        if ((table & 4) !== 0 && (digitCount & 1) === 0) {
          t = barcode_maps.BarcodeMaps.code128C;
          if (lastTable === 1) {
            result[$add](dart.nullCheck(t[$_get](-7)));
          } else if (lastTable === 2) {
            result[$add](dart.nullCheck(t[$_get](-8)));
          }
          lastTable = 3;
        } else if ((table & 1) !== 0) {
          t = barcode_maps.BarcodeMaps.code128A;
          if (lastTable === 2) {
            result[$add](dart.nullCheck(t[$_get](-8)));
          } else if (lastTable === 3) {
            result[$add](dart.nullCheck(t[$_get](-9)));
          }
          lastTable = 1;
        } else if ((table & 2) !== 0) {
          t = barcode_maps.BarcodeMaps.code128B;
          if (lastTable === 1) {
            result[$add](dart.nullCheck(t[$_get](-7)));
          } else if (lastTable === 3) {
            result[$add](dart.nullCheck(t[$_get](-9)));
          }
          lastTable = 2;
        }
        if (t == null) {
          dart.throw(new barcode_exception.BarcodeException.new("Unable to encode \"" + core.String.fromCharCodes(data) + "\" to " + this.name + " Barcode"));
        }
        if (lastTable === 3) {
          for (let i = start + length - 1; i >= start; i = i - 1) {
            if (data[$_get](i) === 250) {
              result[$add](dart.nullCheck(t[$_get](250)));
            } else {
              let digit = data[$_get](i) - 48 + (data[$_get](i - 1) - 48) * 10;
              if (!(t[$_get](digit) != null)) dart.assertFailed(null, I[30], 167, 20, "t[digit] != null");
              result[$add](dart.nullCheck(t[$_get](digit)));
              i = i - 1;
            }
          }
        } else {
          for (let c of data[$sublist](start, start + length)[$reversed]) {
            if (!(t[$_get](c) != null)) dart.assertFailed(null, I[30], 174, 18, "t[c] != null");
            result[$add](dart.nullCheck(t[$_get](c)));
          }
        }
      };
      dart.fn(addFrom, T.ListOfintAndintTovoid());
      for (let index = data[$length] - 1; index >= 0; index = index - 1) {
        let code = data[$_get](index);
        let codeA = this.useCode128A && barcode_maps.BarcodeMaps.code128A[$containsKey](code);
        let codeB = this.useCode128B && barcode_maps.BarcodeMaps.code128B[$containsKey](code);
        let isFnc1 = code === 250;
        let codeC = this.useCode128C && code >= 48 && code <= 57;
        let available = 0;
        if (codeA) {
          available = 1;
        }
        if (codeB) {
          available = (available | 2) >>> 0;
        }
        if (codeC || isFnc1) {
          available = (available | 4) >>> 0;
        }
        if (available === 0) {
          dart.throw(new barcode_exception.BarcodeException.new("Unable to encode \"" + core.String.fromCharCode(code) + "\" to " + this.name + " Barcode"));
        }
        if (codeC) {
          digitCount = digitCount + 1;
        } else if (isFnc1) {
          length = length + 1;
          addFrom(data, index);
          length = 0;
          digitCount = 0;
          continue;
        } else {
          if (digitCount >= 4) {
            if ((digitCount & 1) !== 0) {
              digitCount = digitCount - 1;
            } else {
            }
            if (length > digitCount) {
              length = length - digitCount;
              table = table & 3;
              if (table === 0) {
                dart.throw(new barcode_exception.BarcodeException.new("Unable to encode \"" + core.String.fromCharCodes(data) + "\" to " + this.name + " Barcode"));
              }
              addFrom(data, index + digitCount + 1);
              length = digitCount;
            }
            table = 4;
            addFrom(data, index + 1);
            table = 0;
            length = 0;
          }
          digitCount = 0;
        }
        if (table === 0) {
          table = available;
          length = length + 1;
        } else {
          let newTable = (table & available) >>> 0;
          if (newTable === 0) {
            addFrom(data, index + 1);
            length = 0;
            table = available;
          } else {
            table = newTable;
          }
          length = length + 1;
        }
      }
      if (digitCount >= 2) {
        if ((digitCount & 1) !== 0) {
          length = length - (digitCount - 1);
          addFrom(data, digitCount - 1);
          digitCount = digitCount - 1;
        } else if (length > digitCount) {
          length = length - digitCount;
          addFrom(data, digitCount);
        }
        table = 4;
        length = digitCount;
      }
      if (length > 0) {
        addFrom(data, 0);
      }
      if (lastTable === 1) {
        result[$add](103);
      } else if (lastTable === 2) {
        result[$add](104);
      } else if (lastTable === 3) {
        result[$add](105);
      }
      return result[$reversed];
    }
    adaptData(data, text = false) {
      if (this.isGS1) {
        let result = new core.StringBuffer.new();
        let start = 0;
        for (let match of core.RegExp.new("\\(.+?\\)").allMatches(data)) {
          result.write(data[$substring](start, match.start));
          result.write("ú");
          result.write(data[$substring](match.start + 1, match.end - 1));
          if (text) {
            result.write(" ");
          }
          start = match.end;
        }
        result.write(data[$substring](start));
        data = result.toString();
      }
      if (this.escapes) {
        let result = new core.StringBuffer.new();
        let start = 0;
        for (let match of core.RegExp.new("{\\d}").allMatches(data)) {
          result.write(data[$substring](start, match.start));
          switch (match.group(0)) {
            case "{1}":
              {
                result.write("ú");
                break;
              }
            case "{2}":
              {
                result.write("û");
                break;
              }
            case "{3}":
              {
                result.write("ü");
                break;
              }
            case "{4}":
              {
                result.write("ý");
                break;
              }
            default:
              {
                result.write(match.group(0));
              }
          }
          start = match.end;
        }
        result.write(data[$substring](start));
        data = result.toString();
      }
      return data;
    }
    convert(data) {
      return new (T.SyncIterableOfbool()).new(() => (function* convert(data) {
        data = this.adaptData(data);
        let checksum = T.JSArrayOfint().of([]);
        for (let codeIndex of this.shortestCode(data[$codeUnits])) {
          let codeValue = dart.nullCheck(barcode_maps.BarcodeMaps.code128[$_get](codeIndex));
          yield* this.add(codeValue, 11);
          checksum[$add](codeIndex);
        }
        let sum = 0;
        for (let index = 0; index < checksum[$length]; index = index + 1) {
          let code = checksum[$_get](index);
          let mul = index === 0 ? 1 : index;
          sum = sum + code * mul;
        }
        sum = sum[$modulo](103);
        yield* this.add(dart.nullCheck(barcode_maps.BarcodeMaps.code128[$_get](sum)), 11);
        yield* this.add(dart.nullCheck(barcode_maps.BarcodeMaps.code128[$_get](106)), 11);
        yield true;
        yield true;
      }).bind(this)(data));
    }
    makeText(data, width, height, fontHeight, textPadding, lineWidth) {
      data = this.adaptData(data, true)[$replaceAll](core.RegExp.new("[^ -]"), " ")[$trim]();
      return super.makeText(data, width, height, fontHeight, textPadding, lineWidth);
    }
    verifyBytes(data) {
      let text = _native_typed_data.NativeUint8List.fromList(this.adaptData(convert.utf8.decoder.convert(data))[$codeUnits]);
      this.shortestCode(text);
      super.verifyBytes(text);
    }
  };
  (code128.BarcodeCode128.new = function(useCode128A, useCode128B, useCode128C, isGS1, escapes) {
    this[useCode128A$] = useCode128A;
    this[useCode128B$] = useCode128B;
    this[useCode128C$] = useCode128C;
    this[isGS1$] = isGS1;
    this[escapes$] = escapes;
    if (!(useCode128A || useCode128B || useCode128C)) dart.assertFailed("Enable at least one of the CODE 128 tables", I[30], 63, 14, "useCode128A || useCode128B || useCode128C");
    code128.BarcodeCode128.__proto__.new.call(this);
    ;
  }).prototype = code128.BarcodeCode128.prototype;
  dart.addTypeTests(code128.BarcodeCode128);
  dart.addTypeCaches(code128.BarcodeCode128);
  dart.setMethodSignature(code128.BarcodeCode128, () => ({
    __proto__: dart.getMethods(code128.BarcodeCode128.__proto__),
    shortestCode: dart.fnType(core.Iterable$(core.int), [core.List$(core.int)]),
    adaptData: dart.fnType(core.String, [core.String], [core.bool]),
    convert: dart.fnType(core.Iterable$(core.bool), [core.String])
  }));
  dart.setGetterSignature(code128.BarcodeCode128, () => ({
    __proto__: dart.getGetters(code128.BarcodeCode128.__proto__),
    charSet: core.Iterable$(core.int),
    name: core.String
  }));
  dart.setLibraryUri(code128.BarcodeCode128, I[29]);
  dart.setFieldSignature(code128.BarcodeCode128, () => ({
    __proto__: dart.getFields(code128.BarcodeCode128.__proto__),
    useCode128A: dart.finalFieldType(core.bool),
    useCode128B: dart.finalFieldType(core.bool),
    useCode128C: dart.finalFieldType(core.bool),
    escapes: dart.finalFieldType(core.bool),
    isGS1: dart.finalFieldType(core.bool)
  }));
  codabar.BarcodeCodabarStartStop = class BarcodeCodabarStartStop extends core._Enum {
    toString() {
      return "BarcodeCodabarStartStop." + this[_name];
    }
  };
  (codabar.BarcodeCodabarStartStop.new = function(index, name) {
    codabar.BarcodeCodabarStartStop.__proto__.new.call(this, index, name);
    ;
  }).prototype = codabar.BarcodeCodabarStartStop.prototype;
  dart.addTypeTests(codabar.BarcodeCodabarStartStop);
  dart.addTypeCaches(codabar.BarcodeCodabarStartStop);
  dart.setLibraryUri(codabar.BarcodeCodabarStartStop, I[31]);
  dart.setStaticFieldSignature(codabar.BarcodeCodabarStartStop, () => ['values', 'A', 'B', 'C', 'D']);
  dart.defineExtensionMethods(codabar.BarcodeCodabarStartStop, ['toString']);
  dart.defineLazy(codabar.BarcodeCodabarStartStop, {
    /*codabar.BarcodeCodabarStartStop.values*/get values() {
      return C[92] || CT.C92;
    },
    /*codabar.BarcodeCodabarStartStop.A*/get A() {
      return C[29] || CT.C29;
    },
    /*codabar.BarcodeCodabarStartStop.B*/get B() {
      return C[30] || CT.C30;
    },
    /*codabar.BarcodeCodabarStartStop.C*/get C() {
      return C[93] || CT.C93;
    },
    /*codabar.BarcodeCodabarStartStop.D*/get D() {
      return C[94] || CT.C94;
    }
  }, false);
  var start$ = dart.privateName(codabar, "BarcodeCodabar.start");
  var stop$ = dart.privateName(codabar, "BarcodeCodabar.stop");
  var printStartStop$ = dart.privateName(codabar, "BarcodeCodabar.printStartStop");
  var explicitStartStop$ = dart.privateName(codabar, "BarcodeCodabar.explicitStartStop");
  var _getStartStopByte = dart.privateName(codabar, "_getStartStopByte");
  codabar.BarcodeCodabar = class BarcodeCodabar extends barcode_1d.Barcode1D {
    get start() {
      return this[start$];
    }
    set start(value) {
      super.start = value;
    }
    get stop() {
      return this[stop$];
    }
    set stop(value) {
      super.stop = value;
    }
    get printStartStop() {
      return this[printStartStop$];
    }
    set printStartStop(value) {
      super.printStartStop = value;
    }
    get explicitStartStop() {
      return this[explicitStartStop$];
    }
    set explicitStartStop(value) {
      super.explicitStartStop = value;
    }
    static ['_#new#tearOff'](start, stop, printStartStop, explicitStartStop) {
      return new codabar.BarcodeCodabar.new(start, stop, printStartStop, explicitStartStop);
    }
    get charSet() {
      return barcode_maps.BarcodeMaps.codabar[$keys][$where](dart.fn(x => x < 64, T.intTobool()));
    }
    get name() {
      return "CODABAR";
    }
    convert(data) {
      return new (T.SyncIterableOfbool()).new(() => (function* convert(data) {
        let startStop = T.JSArrayOfint().of([65, 66, 67, 68]);
        let lStart = startStop[$_get](this.start.index);
        let lStop = startStop[$_get](this.stop.index);
        if (this.explicitStartStop) {
          lStart = this[_getStartStopByte](data[$codeUnitAt](0));
          lStop = this[_getStartStopByte](data[$codeUnitAt](data.length - 1));
          data = data[$substring](1, data.length - 1);
        }
        yield* this.add(dart.nullCheck(barcode_maps.BarcodeMaps.codabar[$_get](lStart)), dart.nullCheck(barcode_maps.BarcodeMaps.codabarLen[$_get](lStart)));
        yield false;
        for (let code of data[$codeUnits]) {
          if (code > 64 || code === 42) {
            dart.throw(new barcode_exception.BarcodeException.new("Unable to encode \"" + core.String.fromCharCode(code) + "\" to " + this.name + " Barcode"));
          }
          let codeValue = barcode_maps.BarcodeMaps.codabar[$_get](code);
          if (codeValue == null) {
            dart.throw(new barcode_exception.BarcodeException.new("Unable to encode \"" + core.String.fromCharCode(code) + "\" to " + this.name + " Barcode"));
          }
          let codeLen = dart.nullCheck(barcode_maps.BarcodeMaps.codabarLen[$_get](code));
          yield* this.add(codeValue, codeLen);
          yield false;
        }
        yield* this.add(dart.nullCheck(barcode_maps.BarcodeMaps.codabar[$_get](lStop)), dart.nullCheck(barcode_maps.BarcodeMaps.codabarLen[$_get](lStop)));
      }).bind(this)(data));
    }
    [_getStartStopByte](value) {
      switch (value) {
        case 84:
          {
            return 65;
          }
        case 78:
          {
            return 66;
          }
        case 42:
          {
            return 67;
          }
        case 69:
          {
            return 68;
          }
      }
      return value;
    }
    verifyBytes(data) {
      if (this.explicitStartStop) {
        let validStartStop = C[95] || CT.C95;
        if (data[$length] < 3) {
          dart.throw(new barcode_exception.BarcodeException.new("Unable to encode " + this.name + " Barcode: missing start and/or stop chars"));
        }
        if (!validStartStop[$contains](data[$_get](0))) {
          dart.throw(new barcode_exception.BarcodeException.new("Unable to encode " + this.name + " Barcode: \"" + core.String.fromCharCode(data[$_get](0)) + "\" is an invalid start char"));
        }
        if (!validStartStop[$contains](data[$_get](data[$length] - 1))) {
          dart.throw(new barcode_exception.BarcodeException.new("Unable to encode " + this.name + " Barcode: \"" + core.String.fromCharCode(data[$_get](data[$length] - 1)) + "\" is an invalid start char"));
        }
        data = data[$sublist](1, data[$length] - 1);
      }
      super.verifyBytes(data);
    }
    makeText(data, width, height, fontHeight, textPadding, lineWidth) {
      if (this.printStartStop && !this.explicitStartStop) {
        data = core.String.fromCharCode(this.start.index + 65) + data + core.String.fromCharCode(this.stop.index + 65);
      } else if (!this.printStartStop && this.explicitStartStop) {
        data = data[$substring](1, data.length - 1);
      }
      return super.makeText(data, width, height, fontHeight, textPadding, lineWidth);
    }
  };
  (codabar.BarcodeCodabar.new = function(start, stop, printStartStop, explicitStartStop) {
    this[start$] = start;
    this[stop$] = stop;
    this[printStartStop$] = printStartStop;
    this[explicitStartStop$] = explicitStartStop;
    codabar.BarcodeCodabar.__proto__.new.call(this);
    ;
  }).prototype = codabar.BarcodeCodabar.prototype;
  dart.addTypeTests(codabar.BarcodeCodabar);
  dart.addTypeCaches(codabar.BarcodeCodabar);
  dart.setMethodSignature(codabar.BarcodeCodabar, () => ({
    __proto__: dart.getMethods(codabar.BarcodeCodabar.__proto__),
    convert: dart.fnType(core.Iterable$(core.bool), [core.String]),
    [_getStartStopByte]: dart.fnType(core.int, [core.int])
  }));
  dart.setGetterSignature(codabar.BarcodeCodabar, () => ({
    __proto__: dart.getGetters(codabar.BarcodeCodabar.__proto__),
    charSet: core.Iterable$(core.int),
    name: core.String
  }));
  dart.setLibraryUri(codabar.BarcodeCodabar, I[31]);
  dart.setFieldSignature(codabar.BarcodeCodabar, () => ({
    __proto__: dart.getFields(codabar.BarcodeCodabar.__proto__),
    start: dart.finalFieldType(codabar.BarcodeCodabarStartStop),
    stop: dart.finalFieldType(codabar.BarcodeCodabarStartStop),
    printStartStop: dart.finalFieldType(core.bool),
    explicitStartStop: dart.finalFieldType(core.bool)
  }));
  var width$ = dart.privateName(barcode_2d, "Barcode2DMatrix.width");
  var height$ = dart.privateName(barcode_2d, "Barcode2DMatrix.height");
  var ratio$ = dart.privateName(barcode_2d, "Barcode2DMatrix.ratio");
  var pixels$ = dart.privateName(barcode_2d, "Barcode2DMatrix.pixels");
  barcode_2d.Barcode2DMatrix = class Barcode2DMatrix extends core.Object {
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    get ratio() {
      return this[ratio$];
    }
    set ratio(value) {
      super.ratio = value;
    }
    get pixels() {
      return this[pixels$];
    }
    set pixels(value) {
      super.pixels = value;
    }
    static ['_#new#tearOff'](width, height, ratio, pixels) {
      return new barcode_2d.Barcode2DMatrix.new(width, height, ratio, pixels);
    }
    static fromXY(width, height, ratio, isDark) {
      return new barcode_2d.Barcode2DMatrix.new(width, height, ratio, T.IterableOfbool().generate(width * height, dart.fn(p => {
        let x = p[$modulo](height);
        let y = (p / height)[$truncate]();
        return isDark(y, x);
      }, T.intTobool())));
    }
    static ['_#fromXY#tearOff'](width, height, ratio, isDark) {
      return barcode_2d.Barcode2DMatrix.fromXY(width, height, ratio, isDark);
    }
  };
  (barcode_2d.Barcode2DMatrix.new = function(width, height, ratio, pixels) {
    this[width$] = width;
    this[height$] = height;
    this[ratio$] = ratio;
    this[pixels$] = pixels;
    ;
  }).prototype = barcode_2d.Barcode2DMatrix.prototype;
  dart.addTypeTests(barcode_2d.Barcode2DMatrix);
  dart.addTypeCaches(barcode_2d.Barcode2DMatrix);
  dart.setStaticMethodSignature(barcode_2d.Barcode2DMatrix, () => ['fromXY']);
  dart.setLibraryUri(barcode_2d.Barcode2DMatrix, I[14]);
  dart.setFieldSignature(barcode_2d.Barcode2DMatrix, () => ({
    __proto__: dart.getFields(barcode_2d.Barcode2DMatrix.__proto__),
    width: dart.finalFieldType(core.int),
    height: dart.finalFieldType(core.int),
    ratio: dart.finalFieldType(core.double),
    pixels: dart.finalFieldType(core.Iterable$(core.bool))
  }));
  var minECCPercent$ = dart.privateName(aztec, "BarcodeAztec.minECCPercent");
  var userSpecifiedLayers$ = dart.privateName(aztec, "BarcodeAztec.userSpecifiedLayers");
  var _encode = dart.privateName(aztec, "_encode");
  var _bitsToWords = dart.privateName(aztec, "_bitsToWords");
  var _getGF = dart.privateName(aztec, "_getGF");
  var _generateCheckWords = dart.privateName(aztec, "_generateCheckWords");
  var _updateStateListForPair = dart.privateName(aztec, "_updateStateListForPair");
  var _updateStateListForChar = dart.privateName(aztec, "_updateStateListForChar");
  var _highlevelEncode$ = dart.privateName(aztec, "_highlevelEncode");
  var _simplifyStates = dart.privateName(aztec, "_simplifyStates");
  var _updateStateForChar = dart.privateName(aztec, "_updateStateForChar");
  var _updateStateForPair = dart.privateName(aztec, "_updateStateForPair");
  var _totalBitsInLayer = dart.privateName(aztec, "_totalBitsInLayer");
  var _stuffBits = dart.privateName(aztec, "_stuffBits");
  var _generateModeMessage = dart.privateName(aztec, "_generateModeMessage");
  var _drawModeMessage = dart.privateName(aztec, "_drawModeMessage");
  var _drawBullsEye = dart.privateName(aztec, "_drawBullsEye");
  aztec.BarcodeAztec = class BarcodeAztec extends barcode_2d.Barcode2D {
    get minECCPercent() {
      return this[minECCPercent$];
    }
    set minECCPercent(value) {
      super.minECCPercent = value;
    }
    get userSpecifiedLayers() {
      return this[userSpecifiedLayers$];
    }
    set userSpecifiedLayers(value) {
      super.userSpecifiedLayers = value;
    }
    static ['_#new#tearOff'](minECCPercent, userSpecifiedLayers) {
      return new aztec.BarcodeAztec.new(minECCPercent, userSpecifiedLayers);
    }
    static get _charMap() {
      let t30;
      t30 = aztec.BarcodeAztec['_#_charMap'];
      return t30 == null ? dart.throw(new _internal.LateError.fieldNI("_charMap")) : t30;
    }
    static set _charMap(library$32package$58barcode$47src$47aztec$46dart$58$58_charMap$35param) {
      aztec.BarcodeAztec['_#_charMap'] = library$32package$58barcode$47src$47aztec$46dart$58$58_charMap$35param;
    }
    static _init() {
      aztec.BarcodeAztec._charMap = new (T.LinkedMapOf_EncodingMode$ListOfintN()).new();
      aztec.BarcodeAztec._charMap[$_set](aztec._EncodingMode.mode_upper, T.ListOfintN().filled(256, null));
      aztec.BarcodeAztec._charMap[$_set](aztec._EncodingMode.mode_lower, T.ListOfintN().filled(256, null));
      aztec.BarcodeAztec._charMap[$_set](aztec._EncodingMode.mode_digit, T.ListOfintN().filled(256, null));
      aztec.BarcodeAztec._charMap[$_set](aztec._EncodingMode.mode_mixed, T.ListOfintN().filled(256, null));
      aztec.BarcodeAztec._charMap[$_set](aztec._EncodingMode.mode_punct, T.ListOfintN().filled(256, null));
      dart.nullCheck(aztec.BarcodeAztec._charMap[$_get](aztec._EncodingMode.mode_upper))[$_set](32, 1);
      for (let c = 65; c <= 90; c = c + 1) {
        dart.nullCheck(aztec.BarcodeAztec._charMap[$_get](aztec._EncodingMode.mode_upper))[$_set](c, c - 65 + 2);
      }
      dart.nullCheck(aztec.BarcodeAztec._charMap[$_get](aztec._EncodingMode.mode_lower))[$_set](32, 1);
      for (let c = 97; c <= 122; c = c + 1) {
        dart.nullCheck(aztec.BarcodeAztec._charMap[$_get](aztec._EncodingMode.mode_lower))[$_set](c, c - 97 + 2);
      }
      dart.nullCheck(aztec.BarcodeAztec._charMap[$_get](aztec._EncodingMode.mode_digit))[$_set](32, 1);
      for (let c = 48; c <= 57; c = c + 1) {
        dart.nullCheck(aztec.BarcodeAztec._charMap[$_get](aztec._EncodingMode.mode_digit))[$_set](c, c - 48 + 2);
      }
      dart.nullCheck(aztec.BarcodeAztec._charMap[$_get](aztec._EncodingMode.mode_digit))[$_set](44, 12);
      dart.nullCheck(aztec.BarcodeAztec._charMap[$_get](aztec._EncodingMode.mode_digit))[$_set](46, 13);
      let mixedTable = T.JSArrayOfint().of([0, 32, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 27, 28, 29, 30, 31, 64, 92, 94, 95, 96, 124, 126, 127]);
      for (let i = 0; i < mixedTable[$length]; i = i + 1) {
        let v = mixedTable[$_get](i);
        dart.nullCheck(aztec.BarcodeAztec._charMap[$_get](aztec._EncodingMode.mode_mixed))[$_set](v, i);
      }
      let punctTable = C[96] || CT.C96;
      for (let i = 0; i < punctTable[$length]; i = i + 1) {
        let v = punctTable[$_get](i);
        if (v > 0) {
          dart.nullCheck(aztec.BarcodeAztec._charMap[$_get](aztec._EncodingMode.mode_punct))[$_set](v, i);
        }
      }
    }
    convert(data) {
      if (!aztec.BarcodeAztec._initialized) {
        aztec.BarcodeAztec._init();
        aztec.BarcodeAztec._initialized = true;
      }
      let m = this[_encode](data);
      return new barcode_2d.Barcode2DMatrix.new(m.matrixSize, m.matrixSize, 1.0, m.bits);
    }
    get charSet() {
      return T.IterableOfint().generate(256);
    }
    get name() {
      return "Aztec";
    }
    get maxLength() {
      return 2335;
    }
    [_bitsToWords](stuffedBits, wordSize, wordCount) {
      let message = T.ListOfint().filled(wordCount, 0);
      for (let i = 0; i < wordCount; i = i + 1) {
        let value = 0;
        for (let j = 0; j < wordSize; j = j + 1) {
          if (stuffedBits[$_get](i * wordSize + j)) {
            value = (value | (1)[$leftShift](wordSize - j - 1)) >>> 0;
          }
        }
        message[$_set](i, value);
      }
      return message;
    }
    [_generateCheckWords](bits, totalBits, wordSize) {
      let rs = new reedsolomon.ReedSolomonEncoder.new(this[_getGF](wordSize));
      let messageWordCount = (bits[$length] / wordSize)[$truncate]();
      let totalWordCount = (totalBits / wordSize)[$truncate]();
      let eccWordCount = totalWordCount - messageWordCount;
      let messageWords = this[_bitsToWords](bits, wordSize, messageWordCount);
      let eccWords = rs.encode(messageWords, eccWordCount);
      let startPad = totalBits[$modulo](wordSize);
      let messageBits = T.JSArrayOfbool().of([]);
      messageBits[$addAll](aztec._addBits(0, startPad));
      for (let messageWord of messageWords) {
        messageBits[$addAll](aztec._addBits(messageWord, wordSize));
      }
      for (let eccWord of eccWords) {
        messageBits[$addAll](aztec._addBits(eccWord, wordSize));
      }
      return messageBits;
    }
    [_getGF](wordSize) {
      switch (wordSize) {
        case 4:
          {
            return new reedsolomon.GaloisField.new(19, 16, 1);
          }
        case 6:
          {
            return new reedsolomon.GaloisField.new(67, 64, 1);
          }
        case 8:
          {
            return new reedsolomon.GaloisField.new(301, 256, 1);
          }
        case 10:
          {
            return new reedsolomon.GaloisField.new(1033, 1024, 1);
          }
        case 12:
          {
            return new reedsolomon.GaloisField.new(4201, 4096, 1);
          }
        default:
          {
            dart.throw(C[97] || CT.C97);
          }
      }
    }
    [_highlevelEncode$](data) {
      let states = T.JSArrayOf_State().of([aztec._State.initialState]);
      for (let index = 0; index < data[$length]; index = index + 1) {
        let pairCode = 0;
        let nextChar = 0;
        if (index + 1 < data[$length]) {
          nextChar = data[$_get](index + 1);
        }
        let cur = data[$_get](index);
        if (cur === 13 && nextChar === 10) {
          pairCode = 2;
        } else if (cur === 46 && nextChar === 32) {
          pairCode = 3;
        } else if (cur === 44 && nextChar === 32) {
          pairCode = 4;
        } else if (cur === 58 && nextChar === 32) {
          pairCode = 5;
        }
        if (pairCode > 0) {
          states = this[_updateStateListForPair](states, data, index, pairCode);
          index = index + 1;
        } else {
          states = this[_updateStateListForChar](states, data, index);
        }
      }
      let minBitCnt = null;
      let result = null;
      for (let s of states) {
        if (minBitCnt == null || s.bitCount < dart.notNull(minBitCnt)) {
          minBitCnt = s.bitCount;
          result = s;
        }
      }
      if (result != null) {
        return result.toBitList(data);
      } else {
        return T.JSArrayOfbool().of([]);
      }
    }
    [_simplifyStates](states) {
      let result = T.JSArrayOf_State().of([]);
      for (let newState of states) {
        let add = true;
        let newResult = T.JSArrayOf_State().of([]);
        for (let oldState of result) {
          if (add && oldState.isBetterThanOrEqualTo(newState)) {
            add = false;
          }
          if (!(add && newState.isBetterThanOrEqualTo(oldState))) {
            newResult[$add](oldState);
          }
        }
        if (add) {
          result[$add](newState);
        } else {
          result = newResult;
        }
      }
      return result;
    }
    [_updateStateListForChar](states, data, index) {
      let result = T.JSArrayOf_State().of([]);
      for (let s of states) {
        let r = this[_updateStateForChar](s, data, index);
        if (r[$isNotEmpty]) {
          result[$addAll](r);
        }
      }
      return this[_simplifyStates](result);
    }
    [_updateStateForChar](s, data, index) {
      let result = T.JSArrayOf_State().of([]);
      let ch = data[$_get](index);
      let charInCurrentTable = dart.nullCheck(aztec.BarcodeAztec._charMap[$_get](s.mode))[$_get](ch) != null;
      let stateNoBinary = null;
      for (let mode of aztec._EncodingMode.values) {
        let charInMode = dart.nullCheck(aztec.BarcodeAztec._charMap[$_get](mode))[$_get](ch);
        if (charInMode != null) {
          stateNoBinary == null ? stateNoBinary = s.endBinaryShift(index) : null;
          if (!charInCurrentTable || mode === s.mode || mode === aztec._EncodingMode.mode_digit) {
            let res = stateNoBinary.latchAndAppend(mode, charInMode);
            result[$add](res);
          }
          if (!charInCurrentTable && aztec._shiftTable[$_get](s.mode) != null && dart.nullCheck(aztec._shiftTable[$_get](s.mode))[$_get](mode) != null) {
            let res = stateNoBinary.shiftAndAppend(mode, charInMode);
            result[$add](res);
          }
        }
      }
      if (s.bShiftByteCount > 0 || dart.nullCheck(aztec.BarcodeAztec._charMap[$_get](s.mode))[$_get](ch) == null) {
        let res = s.addBinaryShiftChar(index);
        result[$add](res);
      }
      return result;
    }
    [_updateStateListForPair](states, data, index, pairCode) {
      let result = T.JSArrayOf_State().of([]);
      for (let s of states) {
        let r = this[_updateStateForPair](s, data, index, pairCode);
        if (r[$isNotEmpty]) {
          result[$addAll](r);
        }
      }
      return this[_simplifyStates](result);
    }
    [_updateStateForPair](s, data, index, pairCode) {
      let result = T.JSArrayOf_State().of([]);
      let stateNoBinary = s.endBinaryShift(index);
      result[$add](stateNoBinary.latchAndAppend(aztec._EncodingMode.mode_punct, pairCode));
      if (s.mode !== aztec._EncodingMode.mode_punct) {
        result[$add](stateNoBinary.shiftAndAppend(aztec._EncodingMode.mode_punct, pairCode));
      }
      if (pairCode === 3 || pairCode === 4) {
        let digitState = stateNoBinary.latchAndAppend(aztec._EncodingMode.mode_digit, 16 - pairCode).latchAndAppend(aztec._EncodingMode.mode_digit, 1);
        result[$add](digitState);
      }
      if (s.bShiftByteCount > 0) {
        result[$add](s.addBinaryShiftChar(index).addBinaryShiftChar(index + 1));
      }
      return result;
    }
    [_totalBitsInLayer](layers, compact) {
      let tmp = 112;
      if (compact) {
        tmp = 88;
      }
      return (tmp + 16 * layers) * layers;
    }
    [_stuffBits](bits, wordSize) {
      let out = T.JSArrayOfbool().of([]);
      let n = bits[$length];
      let mask = (1)[$leftShift](wordSize) - 2;
      for (let i = 0; i < n; i = i + wordSize) {
        let word = 0;
        for (let j = 0; j < wordSize; j = j + 1) {
          if (i + j >= n || bits[$_get](i + j)) {
            word = (word | (1)[$leftShift](wordSize - 1 - j)) >>> 0;
          }
        }
        if ((word & mask) >>> 0 === mask) {
          out[$addAll](aztec._addBits((word & mask) >>> 0, wordSize));
          i = i - 1;
        } else if ((word & mask) === 0) {
          out[$addAll](aztec._addBits((word | 1) >>> 0, wordSize));
          i = i - 1;
        } else {
          out[$addAll](aztec._addBits(word, wordSize));
        }
      }
      return out;
    }
    [_generateModeMessage](compact, layers, messageSizeInWords) {
      let modeMessage = T.JSArrayOfbool().of([]);
      if (compact) {
        modeMessage[$addAll](aztec._addBits(layers - 1, 2));
        modeMessage[$addAll](aztec._addBits(messageSizeInWords - 1, 6));
        modeMessage = this[_generateCheckWords](modeMessage, 28, 4);
      } else {
        modeMessage[$addAll](aztec._addBits(layers - 1, 5));
        modeMessage[$addAll](aztec._addBits(messageSizeInWords - 1, 11));
        modeMessage = this[_generateCheckWords](modeMessage, 40, 4);
      }
      return modeMessage;
    }
    [_drawModeMessage](matrix, compact, matrixSize, modeMessage) {
      let center = (matrixSize / 2)[$truncate]();
      if (compact) {
        for (let i = 0; i < 7; i = i + 1) {
          let offset = center - 3 + i;
          if (modeMessage[$_get](i)) {
            matrix.set(offset, center - 5);
          }
          if (modeMessage[$_get](i + 7)) {
            matrix.set(center + 5, offset);
          }
          if (modeMessage[$_get](20 - i)) {
            matrix.set(offset, center + 5);
          }
          if (modeMessage[$_get](27 - i)) {
            matrix.set(center - 5, offset);
          }
        }
      } else {
        for (let i = 0; i < 10; i = i + 1) {
          let offset = center - 5 + i + (i / 5)[$truncate]();
          if (modeMessage[$_get](i)) {
            matrix.set(offset, center - 7);
          }
          if (modeMessage[$_get](i + 10)) {
            matrix.set(center + 7, offset);
          }
          if (modeMessage[$_get](29 - i)) {
            matrix.set(offset, center + 7);
          }
          if (modeMessage[$_get](39 - i)) {
            matrix.set(center - 7, offset);
          }
        }
      }
    }
    [_drawBullsEye](matrix, center, size) {
      for (let i = 0; i < size; i = i + 2) {
        for (let j = center - i; j <= center + i; j = j + 1) {
          matrix.set(j, center - i);
          matrix.set(j, center + i);
          matrix.set(center - i, j);
          matrix.set(center + i, j);
        }
      }
      matrix.set(center - size, center - size);
      matrix.set(center - size + 1, center - size);
      matrix.set(center - size, center - size + 1);
      matrix.set(center + size, center - size);
      matrix.set(center + size, center - size + 1);
      matrix.set(center + size, center + size - 1);
    }
    [_encode](data) {
      let bits = this[_highlevelEncode$](data);
      let eccBits = (bits[$length] * this.minECCPercent / 100)[$truncate]() + 11;
      let totalSizeBits = bits[$length] + eccBits;
      let layers = null;
      let wordSize = null;
      let totalBitsInLayer = null;
      let compact = null;
      let stuffedBits = null;
      if (this.userSpecifiedLayers !== 0) {
        compact = this.userSpecifiedLayers < 0;
        if (compact) {
          layers = -this.userSpecifiedLayers;
        } else {
          layers = this.userSpecifiedLayers;
        }
        if (compact && layers > 4 || !compact && layers > 32) {
          dart.throw(new barcode_exception.BarcodeException.new("Illegal value " + dart.str(this.userSpecifiedLayers) + " for layers"));
        }
        totalBitsInLayer = this[_totalBitsInLayer](layers, compact);
        wordSize = aztec.BarcodeAztec._wordSize[$_get](layers);
        let usableBitsInLayers = totalBitsInLayer - totalBitsInLayer[$modulo](wordSize);
        stuffedBits = this[_stuffBits](bits, wordSize);
        if (stuffedBits[$length] + eccBits > usableBitsInLayers) {
          dart.throw(C[98] || CT.C98);
        }
        if (compact && stuffedBits[$length] > wordSize * 64) {
          dart.throw(C[98] || CT.C98);
        }
      } else {
        wordSize = 0;
        stuffedBits = null;
        for (let i = 0;; i = i + 1) {
          if (i > 32) {
            dart.throw(C[99] || CT.C99);
          }
          compact = i <= 3;
          layers = i;
          if (compact) {
            layers = i + 1;
          }
          totalBitsInLayer = this[_totalBitsInLayer](layers, compact);
          if (totalSizeBits > totalBitsInLayer) {
            continue;
          }
          if (wordSize !== aztec.BarcodeAztec._wordSize[$_get](layers)) {
            wordSize = aztec.BarcodeAztec._wordSize[$_get](layers);
            stuffedBits = this[_stuffBits](bits, wordSize);
          }
          let usableBitsInLayers = totalBitsInLayer - totalBitsInLayer[$modulo](wordSize);
          if (compact && dart.nullCheck(stuffedBits)[$length] > wordSize * 64) {
            continue;
          }
          if (dart.nullCheck(stuffedBits)[$length] + eccBits <= usableBitsInLayers) {
            break;
          }
        }
      }
      let messageBits = this[_generateCheckWords](stuffedBits, totalBitsInLayer, wordSize);
      let messageSizeInWords = (stuffedBits[$length] / wordSize)[$truncate]();
      let modeMessage = this[_generateModeMessage](compact, layers, messageSizeInWords);
      let baseMatrixSize = null;
      if (compact) {
        baseMatrixSize = 11 + layers * 4;
      } else {
        baseMatrixSize = 14 + layers * 4;
      }
      let alignmentMap = T.ListOfint().filled(baseMatrixSize, 0);
      let matrixSize = null;
      if (compact) {
        matrixSize = baseMatrixSize;
        for (let i = 0; i < alignmentMap[$length]; i = i + 1) {
          alignmentMap[$_set](i, i);
        }
      } else {
        matrixSize = baseMatrixSize + 1 + 2 * ((baseMatrixSize / 2 - 1) / 15)[$truncate]();
        let origCenter = (baseMatrixSize / 2)[$truncate]();
        let center = (matrixSize / 2)[$truncate]();
        for (let i = 0; i < origCenter; i = i + 1) {
          let newOffset = i + (i / 15)[$truncate]();
          alignmentMap[$_set](origCenter - i - 1, center - newOffset - 1);
          alignmentMap[$_set](origCenter + i, center + newOffset + 1);
        }
      }
      let code = new aztec._AztecCode.new(matrixSize);
      let rowOffset = 0;
      for (let i = 0; i < layers; i = i + 1) {
        let rowSize = (layers - i) * 4;
        if (compact) {
          rowSize = rowSize + 9;
        } else {
          rowSize = rowSize + 12;
        }
        for (let j = 0; j < rowSize; j = j + 1) {
          let columnOffset = j * 2;
          for (let k = 0; k < 2; k = k + 1) {
            if (messageBits[$_get](rowOffset + columnOffset + k)) {
              code.set(alignmentMap[$_get](i * 2 + k), alignmentMap[$_get](i * 2 + j));
            }
            if (messageBits[$_get](rowOffset + rowSize * 2 + columnOffset + k)) {
              code.set(alignmentMap[$_get](i * 2 + j), alignmentMap[$_get](baseMatrixSize - 1 - i * 2 - k));
            }
            if (messageBits[$_get](rowOffset + rowSize * 4 + columnOffset + k)) {
              code.set(alignmentMap[$_get](baseMatrixSize - 1 - i * 2 - k), alignmentMap[$_get](baseMatrixSize - 1 - i * 2 - j));
            }
            if (messageBits[$_get](rowOffset + rowSize * 6 + columnOffset + k)) {
              code.set(alignmentMap[$_get](baseMatrixSize - 1 - i * 2 - j), alignmentMap[$_get](i * 2 + k));
            }
          }
        }
        rowOffset = rowOffset + rowSize * 8;
      }
      this[_drawModeMessage](code, compact, matrixSize, modeMessage);
      if (compact) {
        this[_drawBullsEye](code, (matrixSize / 2)[$truncate](), 5);
      } else {
        this[_drawBullsEye](code, (matrixSize / 2)[$truncate](), 7);
        let j = 0;
        for (let i = 0; i < baseMatrixSize / 2 - 1; i = i + 15) {
          for (let k = (matrixSize / 2)[$truncate]() & 1; k < matrixSize; k = k + 2) {
            code.set((matrixSize / 2)[$truncate]() - j, k);
            code.set((matrixSize / 2)[$truncate]() + j, k);
            code.set(k, (matrixSize / 2)[$truncate]() - j);
            code.set(k, (matrixSize / 2)[$truncate]() + j);
          }
          j = j + 16;
        }
      }
      return code;
    }
  };
  (aztec.BarcodeAztec.new = function(minECCPercent, userSpecifiedLayers) {
    this[minECCPercent$] = minECCPercent;
    this[userSpecifiedLayers$] = userSpecifiedLayers;
    if (!(minECCPercent >= 0 && minECCPercent <= 100)) dart.assertFailed(null, I[32], 33, 16, "minECCPercent >= 0 && minECCPercent <= 100");
    if (!(userSpecifiedLayers >= 0)) dart.assertFailed(null, I[32], 34, 16, "userSpecifiedLayers >= 0");
    aztec.BarcodeAztec.__proto__.new.call(this);
    ;
  }).prototype = aztec.BarcodeAztec.prototype;
  dart.addTypeTests(aztec.BarcodeAztec);
  dart.addTypeCaches(aztec.BarcodeAztec);
  dart.setMethodSignature(aztec.BarcodeAztec, () => ({
    __proto__: dart.getMethods(aztec.BarcodeAztec.__proto__),
    convert: dart.fnType(barcode_2d.Barcode2DMatrix, [typed_data.Uint8List]),
    [_bitsToWords]: dart.fnType(core.List$(core.int), [core.List$(core.bool), core.int, core.int]),
    [_generateCheckWords]: dart.fnType(core.List$(core.bool), [core.List$(core.bool), core.int, core.int]),
    [_getGF]: dart.fnType(reedsolomon.GaloisField, [core.int]),
    [_highlevelEncode$]: dart.fnType(core.List$(core.bool), [core.List$(core.int)]),
    [_simplifyStates]: dart.fnType(core.List$(aztec._State), [core.List$(aztec._State)]),
    [_updateStateListForChar]: dart.fnType(core.List$(aztec._State), [core.List$(aztec._State), core.List$(core.int), core.int]),
    [_updateStateForChar]: dart.fnType(core.List$(aztec._State), [aztec._State, core.List$(core.int), core.int]),
    [_updateStateListForPair]: dart.fnType(core.List$(aztec._State), [core.List$(aztec._State), core.List$(core.int), core.int, core.int]),
    [_updateStateForPair]: dart.fnType(core.List$(aztec._State), [aztec._State, core.List$(core.int), core.int, core.int]),
    [_totalBitsInLayer]: dart.fnType(core.int, [core.int, core.bool]),
    [_stuffBits]: dart.fnType(core.List$(core.bool), [core.List$(core.bool), core.int]),
    [_generateModeMessage]: dart.fnType(core.List$(core.bool), [core.bool, core.int, core.int]),
    [_drawModeMessage]: dart.fnType(dart.void, [aztec._AztecCode, core.bool, core.int, core.List$(core.bool)]),
    [_drawBullsEye]: dart.fnType(dart.void, [aztec._AztecCode, core.int, core.int]),
    [_encode]: dart.fnType(aztec._AztecCode, [core.List$(core.int)])
  }));
  dart.setStaticMethodSignature(aztec.BarcodeAztec, () => ['_init']);
  dart.setGetterSignature(aztec.BarcodeAztec, () => ({
    __proto__: dart.getGetters(aztec.BarcodeAztec.__proto__),
    charSet: core.Iterable$(core.int),
    name: core.String
  }));
  dart.setStaticGetterSignature(aztec.BarcodeAztec, () => ['_charMap']);
  dart.setStaticSetterSignature(aztec.BarcodeAztec, () => ['_charMap']);
  dart.setLibraryUri(aztec.BarcodeAztec, I[33]);
  dart.setFieldSignature(aztec.BarcodeAztec, () => ({
    __proto__: dart.getFields(aztec.BarcodeAztec.__proto__),
    minECCPercent: dart.finalFieldType(core.int),
    userSpecifiedLayers: dart.finalFieldType(core.int)
  }));
  dart.setStaticFieldSignature(aztec.BarcodeAztec, () => ['defaultEcPercent', 'defaultLayers', '_maxNbBits', '_maxNbBitsCompact', '_wordSize', '_initialized', '_#_charMap']);
  dart.defineLazy(aztec.BarcodeAztec, {
    /*aztec.BarcodeAztec.defaultEcPercent*/get defaultEcPercent() {
      return 33;
    },
    /*aztec.BarcodeAztec.defaultLayers*/get defaultLayers() {
      return 0;
    },
    /*aztec.BarcodeAztec._maxNbBits*/get _maxNbBits() {
      return 32;
    },
    /*aztec.BarcodeAztec._maxNbBitsCompact*/get _maxNbBitsCompact() {
      return 4;
    },
    /*aztec.BarcodeAztec._wordSize*/get _wordSize() {
      return C[100] || CT.C100;
    },
    /*aztec.BarcodeAztec._initialized*/get _initialized() {
      return false;
    },
    set _initialized(_) {},
    /*aztec.BarcodeAztec['_#_charMap']*/get ['_#_charMap']() {
      return null;
    },
    set ['_#_charMap'](_) {}
  }, false);
  aztec._Token = class _Token extends core.Object {};
  (aztec._Token.new = function(prev) {
    this.prev = prev;
    ;
  }).prototype = aztec._Token.prototype;
  dart.addTypeTests(aztec._Token);
  dart.addTypeCaches(aztec._Token);
  dart.setLibraryUri(aztec._Token, I[33]);
  dart.setFieldSignature(aztec._Token, () => ({
    __proto__: dart.getFields(aztec._Token.__proto__),
    prev: dart.finalFieldType(dart.nullable(aztec._Token))
  }));
  aztec._SimpleToken = class _SimpleToken extends aztec._Token {
    static ['_#new#tearOff'](prev, value, bitCount) {
      return new aztec._SimpleToken.new(prev, value, bitCount);
    }
    appendTo(bits, text) {
      bits[$addAll](aztec._addBits(this.value, this.bitCount));
    }
  };
  (aztec._SimpleToken.new = function(prev, value, bitCount) {
    this.value = value;
    this.bitCount = bitCount;
    aztec._SimpleToken.__proto__.new.call(this, prev);
    ;
  }).prototype = aztec._SimpleToken.prototype;
  dart.addTypeTests(aztec._SimpleToken);
  dart.addTypeCaches(aztec._SimpleToken);
  dart.setMethodSignature(aztec._SimpleToken, () => ({
    __proto__: dart.getMethods(aztec._SimpleToken.__proto__),
    appendTo: dart.fnType(dart.void, [core.List$(core.bool), core.List$(core.int)])
  }));
  dart.setLibraryUri(aztec._SimpleToken, I[33]);
  dart.setFieldSignature(aztec._SimpleToken, () => ({
    __proto__: dart.getFields(aztec._SimpleToken.__proto__),
    value: dart.finalFieldType(core.int),
    bitCount: dart.finalFieldType(core.int)
  }));
  aztec._BinaryShiftToken = class _BinaryShiftToken extends aztec._Token {
    static ['_#new#tearOff'](prev, bShiftStart, bShiftByteCnt) {
      return new aztec._BinaryShiftToken.new(prev, bShiftStart, bShiftByteCnt);
    }
    appendTo(bits, text) {
      for (let i = 0; i < this.bShiftByteCnt; i = i + 1) {
        if (i === 0 || i === 31 && this.bShiftByteCnt <= 62) {
          bits[$addAll](aztec._addBits(31, 5));
          if (this.bShiftByteCnt > 62) {
            bits[$addAll](aztec._addBits(this.bShiftByteCnt - 31, 16));
          } else if (i === 0) {
            if (this.bShiftByteCnt < 31) {
              bits[$addAll](aztec._addBits(this.bShiftByteCnt, 5));
            } else {
              bits[$addAll](aztec._addBits(31, 5));
            }
          } else {
            bits[$addAll](aztec._addBits(this.bShiftByteCnt - 31, 5));
          }
        }
        bits[$addAll](aztec._addBits(text[$_get](this.bShiftStart + i), 8));
      }
    }
  };
  (aztec._BinaryShiftToken.new = function(prev, bShiftStart, bShiftByteCnt) {
    this.bShiftStart = bShiftStart;
    this.bShiftByteCnt = bShiftByteCnt;
    aztec._BinaryShiftToken.__proto__.new.call(this, prev);
    ;
  }).prototype = aztec._BinaryShiftToken.prototype;
  dart.addTypeTests(aztec._BinaryShiftToken);
  dart.addTypeCaches(aztec._BinaryShiftToken);
  dart.setMethodSignature(aztec._BinaryShiftToken, () => ({
    __proto__: dart.getMethods(aztec._BinaryShiftToken.__proto__),
    appendTo: dart.fnType(dart.void, [core.List$(core.bool), core.List$(core.int)])
  }));
  dart.setLibraryUri(aztec._BinaryShiftToken, I[33]);
  dart.setFieldSignature(aztec._BinaryShiftToken, () => ({
    __proto__: dart.getFields(aztec._BinaryShiftToken.__proto__),
    bShiftStart: dart.finalFieldType(core.int),
    bShiftByteCnt: dart.finalFieldType(core.int)
  }));
  aztec._EncodingMode = class _EncodingMode extends core._Enum {
    toString() {
      return "_EncodingMode." + this[_name];
    }
  };
  (aztec._EncodingMode.new = function(index, name) {
    aztec._EncodingMode.__proto__.new.call(this, index, name);
    ;
  }).prototype = aztec._EncodingMode.prototype;
  dart.addTypeTests(aztec._EncodingMode);
  dart.addTypeCaches(aztec._EncodingMode);
  dart.setLibraryUri(aztec._EncodingMode, I[33]);
  dart.setStaticFieldSignature(aztec._EncodingMode, () => ['values', 'mode_upper', 'mode_lower', 'mode_digit', 'mode_mixed', 'mode_punct']);
  dart.defineExtensionMethods(aztec._EncodingMode, ['toString']);
  dart.defineLazy(aztec._EncodingMode, {
    /*aztec._EncodingMode.values*/get values() {
      return C[101] || CT.C101;
    },
    /*aztec._EncodingMode.mode_upper*/get mode_upper() {
      return C[102] || CT.C102;
    },
    /*aztec._EncodingMode.mode_lower*/get mode_lower() {
      return C[103] || CT.C103;
    },
    /*aztec._EncodingMode.mode_digit*/get mode_digit() {
      return C[104] || CT.C104;
    },
    /*aztec._EncodingMode.mode_mixed*/get mode_mixed() {
      return C[105] || CT.C105;
    },
    /*aztec._EncodingMode.mode_punct*/get mode_punct() {
      return C[106] || CT.C106;
    }
  }, false);
  var mode$ = dart.privateName(aztec, "_State.mode");
  var tokens$ = dart.privateName(aztec, "_State.tokens");
  var bShiftByteCount$ = dart.privateName(aztec, "_State.bShiftByteCount");
  var bitCount$ = dart.privateName(aztec, "_State.bitCount");
  aztec._State = class _State extends core.Object {
    get mode() {
      return this[mode$];
    }
    set mode(value) {
      super.mode = value;
    }
    get tokens() {
      return this[tokens$];
    }
    set tokens(value) {
      super.tokens = value;
    }
    get bShiftByteCount() {
      return this[bShiftByteCount$];
    }
    set bShiftByteCount(value) {
      super.bShiftByteCount = value;
    }
    get bitCount() {
      return this[bitCount$];
    }
    set bitCount(value) {
      super.bitCount = value;
    }
    static ['_#new#tearOff'](opts) {
      let mode = opts && 'mode' in opts ? opts.mode : null;
      let tokens = opts && 'tokens' in opts ? opts.tokens : null;
      let bShiftByteCount = opts && 'bShiftByteCount' in opts ? opts.bShiftByteCount : null;
      let bitCount = opts && 'bitCount' in opts ? opts.bitCount : null;
      return new aztec._State.new({mode: mode, tokens: tokens, bShiftByteCount: bShiftByteCount, bitCount: bitCount});
    }
    latchAndAppend(mode, value) {
      let bitCount = this.bitCount;
      let tokens = this.tokens;
      if (mode !== this.mode) {
        let latch = dart.nullCheck(dart.nullCheck(aztec._State.latchTable[$_get](this.mode))[$_get](mode));
        tokens = new aztec._SimpleToken.new(tokens, latch & 65535, latch[$rightShift](16));
        bitCount = bitCount + latch[$rightShift](16);
      }
      tokens = new aztec._SimpleToken.new(tokens, value, aztec._bitCount(mode));
      return new aztec._State.new({mode: mode, tokens: tokens, bShiftByteCount: 0, bitCount: bitCount + aztec._bitCount(mode)});
    }
    shiftAndAppend(mode, value) {
      let tokens = this.tokens;
      tokens = new aztec._SimpleToken.new(tokens, dart.nullCheck(dart.nullCheck(aztec._shiftTable[$_get](this.mode))[$_get](mode)), aztec._bitCount(this.mode));
      tokens = new aztec._SimpleToken.new(tokens, value, 5);
      return new aztec._State.new({mode: this.mode, tokens: tokens, bShiftByteCount: 0, bitCount: this.bitCount + aztec._bitCount(this.mode) + 5});
    }
    addBinaryShiftChar(index) {
      let tokens = this.tokens;
      let mode = this.mode;
      let bitCnt = this.bitCount;
      if (this.mode === aztec._EncodingMode.mode_punct || this.mode === aztec._EncodingMode.mode_digit) {
        let latch = dart.nullCheck(dart.nullCheck(aztec._State.latchTable[$_get](this.mode))[$_get](aztec._EncodingMode.mode_upper));
        tokens = new aztec._SimpleToken.new(tokens, latch & 65535, latch[$rightShift](16));
        bitCnt = bitCnt + latch[$rightShift](16);
        mode = aztec._EncodingMode.mode_upper;
      }
      let deltaBitCount = 8;
      if (this.bShiftByteCount === 0 || this.bShiftByteCount === 31) {
        deltaBitCount = 18;
      } else if (this.bShiftByteCount === 62) {
        deltaBitCount = 9;
      }
      let result = new aztec._State.new({mode: mode, tokens: tokens, bShiftByteCount: this.bShiftByteCount + 1, bitCount: bitCnt + deltaBitCount});
      if (result.bShiftByteCount === 2047 + 31) {
        result = result.endBinaryShift(index + 1);
      }
      return result;
    }
    endBinaryShift(index) {
      if (this.bShiftByteCount === 0) {
        return this;
      }
      let tokens = new aztec._BinaryShiftToken.new(this.tokens, index - this.bShiftByteCount, this.bShiftByteCount);
      return new aztec._State.new({mode: this.mode, tokens: tokens, bShiftByteCount: 0, bitCount: this.bitCount});
    }
    isBetterThanOrEqualTo(other) {
      let mySize = this.bitCount + dart.nullCheck(dart.nullCheck(aztec._State.latchTable[$_get](this.mode))[$_get](other.mode))[$rightShift](16);
      if (other.bShiftByteCount > 0 && (this.bShiftByteCount === 0 || this.bShiftByteCount > other.bShiftByteCount)) {
        mySize = mySize + 10;
      }
      return mySize <= other.bitCount;
    }
    toBitList(text) {
      let tokens = T.JSArrayOf_Token().of([]);
      let se = this.endBinaryShift(text[$length]);
      for (let t = se.tokens; t != null; t = t.prev) {
        tokens[$add](t);
      }
      let res = T.JSArrayOfbool().of([]);
      for (let i = tokens[$length] - 1; i >= 0; i = i - 1) {
        tokens[$_get](i).appendTo(res, text);
      }
      return res;
    }
  };
  (aztec._State.new = function(opts) {
    let mode = opts && 'mode' in opts ? opts.mode : null;
    let tokens = opts && 'tokens' in opts ? opts.tokens : null;
    let bShiftByteCount = opts && 'bShiftByteCount' in opts ? opts.bShiftByteCount : null;
    let bitCount = opts && 'bitCount' in opts ? opts.bitCount : null;
    this[mode$] = mode;
    this[tokens$] = tokens;
    this[bShiftByteCount$] = bShiftByteCount;
    this[bitCount$] = bitCount;
    ;
  }).prototype = aztec._State.prototype;
  dart.addTypeTests(aztec._State);
  dart.addTypeCaches(aztec._State);
  dart.setMethodSignature(aztec._State, () => ({
    __proto__: dart.getMethods(aztec._State.__proto__),
    latchAndAppend: dart.fnType(aztec._State, [aztec._EncodingMode, core.int]),
    shiftAndAppend: dart.fnType(aztec._State, [aztec._EncodingMode, core.int]),
    addBinaryShiftChar: dart.fnType(aztec._State, [core.int]),
    endBinaryShift: dart.fnType(aztec._State, [core.int]),
    isBetterThanOrEqualTo: dart.fnType(core.bool, [aztec._State]),
    toBitList: dart.fnType(core.List$(core.bool), [core.List$(core.int)])
  }));
  dart.setLibraryUri(aztec._State, I[33]);
  dart.setFieldSignature(aztec._State, () => ({
    __proto__: dart.getFields(aztec._State.__proto__),
    mode: dart.finalFieldType(aztec._EncodingMode),
    tokens: dart.finalFieldType(dart.nullable(aztec._Token)),
    bShiftByteCount: dart.finalFieldType(core.int),
    bitCount: dart.finalFieldType(core.int)
  }));
  dart.setStaticFieldSignature(aztec._State, () => ['initialState', 'latchTable']);
  dart.defineLazy(aztec._State, {
    /*aztec._State.initialState*/get initialState() {
      return C[107] || CT.C107;
    },
    /*aztec._State.latchTable*/get latchTable() {
      return C[108] || CT.C108;
    }
  }, false);
  aztec._AztecCode = class _AztecCode extends core.Object {
    static ['_#new#tearOff'](matrixSize) {
      return new aztec._AztecCode.new(matrixSize);
    }
    set(x, y) {
      this.bits[$_set](y * this.matrixSize + x, true);
    }
  };
  (aztec._AztecCode.new = function(matrixSize) {
    this.matrixSize = matrixSize;
    this.bits = T.ListOfbool().filled(matrixSize * matrixSize, false);
    ;
  }).prototype = aztec._AztecCode.prototype;
  dart.addTypeTests(aztec._AztecCode);
  dart.addTypeCaches(aztec._AztecCode);
  dart.setMethodSignature(aztec._AztecCode, () => ({
    __proto__: dart.getMethods(aztec._AztecCode.__proto__),
    set: dart.fnType(dart.void, [core.int, core.int])
  }));
  dart.setLibraryUri(aztec._AztecCode, I[33]);
  dart.setFieldSignature(aztec._AztecCode, () => ({
    __proto__: dart.getFields(aztec._AztecCode.__proto__),
    bits: dart.finalFieldType(core.List$(core.bool)),
    matrixSize: dart.finalFieldType(core.int)
  }));
  aztec._addBits = function _addBits$(b, count) {
    return new (T.SyncIterableOfbool()).new(function* _addBits() {
      for (let i = count - 1; i >= 0; i = i - 1) {
        yield (b[$rightShift](i) & 1) === 1;
      }
    });
  };
  aztec._bitCount = function _bitCount(em) {
    if (em === aztec._EncodingMode.mode_digit) {
      return 4;
    }
    return 5;
  };
  dart.defineLazy(aztec, {
    /*aztec._shiftTable*/get _shiftTable() {
      return C[114] || CT.C114;
    }
  }, false);
  dart.trackLibraries("packages/barcode/src/upce.dart", {
    "package:barcode/src/upce.dart": upce,
    "package:barcode/src/upca.dart": upca,
    "package:barcode/src/telepen.dart": telepen,
    "package:barcode/src/barcode_hm.dart": barcode_hm,
    "package:barcode/src/rm4scc.dart": rm4scc,
    "package:barcode/src/qrcode.dart": qrcode,
    "package:barcode/src/pdf417.dart": pdf417,
    "package:barcode/src/itf16.dart": itf16,
    "package:barcode/src/itf14.dart": itf14,
    "package:barcode/src/itf.dart": itf,
    "package:barcode/src/isbn.dart": isbn,
    "package:barcode/src/ean8.dart": ean8,
    "package:barcode/src/ean5.dart": ean5,
    "package:barcode/src/ean2.dart": ean2,
    "package:barcode/src/ean.dart": ean,
    "package:barcode/src/ean13.dart": ean13,
    "package:barcode/src/datamatrix.dart": datamatrix,
    "package:barcode/src/code93.dart": code93,
    "package:barcode/src/code39.dart": code39,
    "package:barcode/src/code128.dart": code128,
    "package:barcode/src/barcode_1d.dart": barcode_1d,
    "package:barcode/src/codabar.dart": codabar,
    "package:barcode/src/barcode_2d.dart": barcode_2d,
    "package:barcode/src/aztec.dart": aztec,
    "package:barcode/src/barcode.dart": barcode,
    "package:barcode/barcode.dart": barcode$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["barcode.dart","barcode_1d.dart","ean.dart","upce.dart","upca.dart","telepen.dart","barcode_hm.dart","rm4scc.dart","qrcode.dart","barcode_2d.dart","pdf417.dart","itf.dart","itf16.dart","itf14.dart","ean13.dart","isbn.dart","ean8.dart","ean2.dart","ean5.dart","datamatrix.dart","code93.dart","code39.dart","code128.dart","codabar.dart","aztec.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA0DuC;AACnC,cAAQ,IAAI;;;AAER,kBAAe;;;;AAEf,kBAAe;;;;AAEf,kBAAe;;;;AAEf,kBAAe;;;;AAEf,kBAAe;;;;AAEf,kBAAe;;;;AAEf,kBAAe;;;;AAEf,kBAAe;;;;AAEf,kBAAe;;;;AAEf,kBAAe;;;;AAEf,kBAAe;;;;AAEf,kBAAe;;;;AAEf,kBAAe;;;;AAE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","file":"../../../../../../../../../../../packages/barcode/src/upce.dart.lib.js"}');
  // Exports:
  return {
    src__upce: upce,
    src__upca: upca,
    src__telepen: telepen,
    src__barcode_hm: barcode_hm,
    src__rm4scc: rm4scc,
    src__qrcode: qrcode,
    src__pdf417: pdf417,
    src__itf16: itf16,
    src__itf14: itf14,
    src__itf: itf,
    src__isbn: isbn,
    src__ean8: ean8,
    src__ean5: ean5,
    src__ean2: ean2,
    src__ean: ean,
    src__ean13: ean13,
    src__datamatrix: datamatrix,
    src__code93: code93,
    src__code39: code39,
    src__code128: code128,
    src__barcode_1d: barcode_1d,
    src__codabar: codabar,
    src__barcode_2d: barcode_2d,
    src__aztec: aztec,
    src__barcode: barcode,
    barcode: barcode$
  };
}));

//# sourceMappingURL=upce.dart.lib.js.map
