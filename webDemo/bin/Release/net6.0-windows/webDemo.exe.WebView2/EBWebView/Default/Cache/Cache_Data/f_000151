define(['dart_sdk', 'packages/rxdart/src/transformers/start_with_error.dart', 'packages/rxdart/src/transformers/start_with.dart', 'packages/rxdart/src/utils/error_and_stacktrace.dart', 'packages/rxdart/src/utils/collection_extensions.dart', 'packages/rxdart/src/subjects/subject.dart', 'packages/rxdart/src/streams/replay_stream.dart', 'packages/rxdart/src/utils/empty.dart', 'packages/rxdart/src/streams/value_stream.dart', 'packages/rxdart/src/subjects/publish_subject.dart', 'packages/rxdart/src/streams/combine_latest.dart', 'packages/rxdart/src/streams/concat.dart', 'packages/rxdart/src/streams/concat_eager.dart', 'packages/rxdart/src/streams/defer.dart', 'packages/rxdart/src/streams/fork_join.dart', 'packages/rxdart/src/streams/from_callable.dart', 'packages/rxdart/src/streams/merge.dart', 'packages/rxdart/src/streams/never.dart', 'packages/rxdart/src/streams/race.dart', 'packages/rxdart/src/streams/range.dart', 'packages/rxdart/src/streams/repeat.dart', 'packages/rxdart/src/streams/retry.dart', 'packages/rxdart/src/streams/retry_when.dart', 'packages/rxdart/src/streams/sequence_equal.dart', 'packages/rxdart/src/streams/switch_latest.dart', 'packages/rxdart/src/streams/timer.dart', 'packages/rxdart/src/streams/using.dart', 'packages/rxdart/src/streams/zip.dart'], (function load__packages__rxdart__src__subjects__replay_subject_dart(dart_sdk, packages__rxdart__src__transformers__start_with_error$46dart, packages__rxdart__src__transformers__start_with$46dart, packages__rxdart__src__utils__error_and_stacktrace$46dart, packages__rxdart__src__utils__collection_extensions$46dart, packages__rxdart__src__subjects__subject$46dart, packages__rxdart__src__streams__replay_stream$46dart, packages__rxdart__src__utils__empty$46dart, packages__rxdart__src__streams__value_stream$46dart, packages__rxdart__src__subjects__publish_subject$46dart, packages__rxdart__src__streams__combine_latest$46dart, packages__rxdart__src__streams__concat$46dart, packages__rxdart__src__streams__concat_eager$46dart, packages__rxdart__src__streams__defer$46dart, packages__rxdart__src__streams__fork_join$46dart, packages__rxdart__src__streams__from_callable$46dart, packages__rxdart__src__streams__merge$46dart, packages__rxdart__src__streams__never$46dart, packages__rxdart__src__streams__race$46dart, packages__rxdart__src__streams__range$46dart, packages__rxdart__src__streams__repeat$46dart, packages__rxdart__src__streams__retry$46dart, packages__rxdart__src__streams__retry_when$46dart, packages__rxdart__src__streams__sequence_equal$46dart, packages__rxdart__src__streams__switch_latest$46dart, packages__rxdart__src__streams__timer$46dart, packages__rxdart__src__streams__using$46dart, packages__rxdart__src__streams__zip$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const collection = dart_sdk.collection;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const start_with_error = packages__rxdart__src__transformers__start_with_error$46dart.src__transformers__start_with_error;
  const start_with = packages__rxdart__src__transformers__start_with$46dart.src__transformers__start_with;
  const error_and_stacktrace = packages__rxdart__src__utils__error_and_stacktrace$46dart.src__utils__error_and_stacktrace;
  const collection_extensions = packages__rxdart__src__utils__collection_extensions$46dart.src__utils__collection_extensions;
  const subject = packages__rxdart__src__subjects__subject$46dart.src__subjects__subject;
  const replay_stream = packages__rxdart__src__streams__replay_stream$46dart.src__streams__replay_stream;
  const empty = packages__rxdart__src__utils__empty$46dart.src__utils__empty;
  const value_stream = packages__rxdart__src__streams__value_stream$46dart.src__streams__value_stream;
  const publish_subject = packages__rxdart__src__subjects__publish_subject$46dart.src__subjects__publish_subject;
  const combine_latest = packages__rxdart__src__streams__combine_latest$46dart.src__streams__combine_latest;
  const concat = packages__rxdart__src__streams__concat$46dart.src__streams__concat;
  const concat_eager = packages__rxdart__src__streams__concat_eager$46dart.src__streams__concat_eager;
  const defer = packages__rxdart__src__streams__defer$46dart.src__streams__defer;
  const fork_join = packages__rxdart__src__streams__fork_join$46dart.src__streams__fork_join;
  const from_callable = packages__rxdart__src__streams__from_callable$46dart.src__streams__from_callable;
  const merge = packages__rxdart__src__streams__merge$46dart.src__streams__merge;
  const never = packages__rxdart__src__streams__never$46dart.src__streams__never;
  const race = packages__rxdart__src__streams__race$46dart.src__streams__race;
  const range = packages__rxdart__src__streams__range$46dart.src__streams__range;
  const repeat = packages__rxdart__src__streams__repeat$46dart.src__streams__repeat;
  const retry = packages__rxdart__src__streams__retry$46dart.src__streams__retry;
  const retry_when = packages__rxdart__src__streams__retry_when$46dart.src__streams__retry_when;
  const sequence_equal = packages__rxdart__src__streams__sequence_equal$46dart.src__streams__sequence_equal;
  const switch_latest = packages__rxdart__src__streams__switch_latest$46dart.src__streams__switch_latest;
  const timer = packages__rxdart__src__streams__timer$46dart.src__streams__timer;
  const using = packages__rxdart__src__streams__using$46dart.src__streams__using;
  const zip = packages__rxdart__src__streams__zip$46dart.src__streams__zip;
  var replay_subject = Object.create(dart.library);
  var behavior_subject = Object.create(dart.library);
  var subjects = Object.create(dart.library);
  var connectable_stream = Object.create(dart.library);
  var streams = Object.create(dart.library);
  var rx = Object.create(dart.library);
  var $reversed = dartx.reversed;
  var $toList = dartx.toList;
  var $fold = dartx.fold;
  var $length = dartx.length;
  var $where = dartx.where;
  var $map = dartx.map;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T$ = {
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    StackTraceN: () => (T$.StackTraceN = dart.constFn(dart.nullable(core.StackTrace)))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    FutureNOfvoid: () => (T$.FutureNOfvoid = dart.constFn(dart.nullable(T$.FutureOfvoid())))(),
    VoidToFutureNOfvoid: () => (T$.VoidToFutureNOfvoid = dart.constFn(dart.fnType(T$.FutureNOfvoid(), [])))(),
    voidToFuture: () => (T$.voidToFuture = dart.constFn(dart.fnType(async.Future, [dart.void])))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const({
        __proto__: connectable_stream._ConnectableStreamUse.prototype,
        [_Enum__name]: "autoConnect",
        [_Enum_index]: 0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: connectable_stream._ConnectableStreamUse.prototype,
        [_Enum__name]: "connect",
        [_Enum_index]: 1
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: connectable_stream._ConnectableStreamUse.prototype,
        [_Enum__name]: "refCount",
        [_Enum_index]: 2
      });
    },
    get C0() {
      return C[0] = dart.constList([C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3], connectable_stream._ConnectableStreamUse);
    }
  }, false);
  var C = Array(4).fill(void 0);
  var I = [
    "package:rxdart/src/subjects/replay_subject.dart",
    "package:rxdart/src/subjects/behavior_subject.dart",
    "package:rxdart/src/streams/connectable_stream.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/rxdart-0.27.3/lib/src/streams/connectable_stream.dart",
    "package:rxdart/src/rx.dart"
  ];
  var _queue$ = dart.privateName(replay_subject, "_queue");
  var _maxSize$ = dart.privateName(replay_subject, "_maxSize");
  const _is_ReplaySubject_default = Symbol('_is_ReplaySubject_default');
  replay_subject.ReplaySubject$ = dart.generic(T => {
    var __t$_EventOfT = () => (__t$_EventOfT = dart.constFn(replay_subject._Event$(T)))();
    var __t$_EventOfTTobool = () => (__t$_EventOfTTobool = dart.constFn(dart.fnType(core.bool, [__t$_EventOfT()])))();
    var __t$_EventOfTToT = () => (__t$_EventOfTToT = dart.constFn(dart.fnType(T, [__t$_EventOfT()])))();
    var __t$_EventOfTToObjectN = () => (__t$_EventOfTToObjectN = dart.constFn(dart.fnType(T$.ObjectN(), [__t$_EventOfT()])))();
    var __t$_EventOfTToStackTraceN = () => (__t$_EventOfTToStackTraceN = dart.constFn(dart.fnType(T$.StackTraceN(), [__t$_EventOfT()])))();
    class ReplaySubject extends subject.Subject$(T) {
      static new(opts) {
        let maxSize = opts && 'maxSize' in opts ? opts.maxSize : null;
        let onListen = opts && 'onListen' in opts ? opts.onListen : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        let sync = opts && 'sync' in opts ? opts.sync : false;
        let controller = async.StreamController$(T).broadcast({onListen: onListen, onCancel: onCancel, sync: sync});
        let queue = new (collection.ListQueue$(replay_subject._Event$(T))).new();
        return new (replay_subject.ReplaySubject$(T)).__(controller, rx.Rx.defer(T, dart.fn(() => queue[$toList]({growable: false})[$reversed][$fold](async.Stream$(T), controller.stream, dart.fn((stream, event) => {
          let errorAndStackTrace = event.errorAndStackTrace;
          if (errorAndStackTrace != null) {
            return stream.transform(T, new (start_with_error.StartWithErrorStreamTransformer$(T)).new(errorAndStackTrace.error, errorAndStackTrace.stackTrace));
          } else {
            return stream.transform(T, new (start_with.StartWithStreamTransformer$(T)).new(T.as(event.data)));
          }
        }, dart.fnType(async.Stream$(T), [async.Stream$(T), replay_subject._Event$(T)]))), dart.fnType(async.Stream$(T), [])), {reusable: true}), queue, maxSize);
      }
      static ['_#new#tearOff'](T, opts) {
        let maxSize = opts && 'maxSize' in opts ? opts.maxSize : null;
        let onListen = opts && 'onListen' in opts ? opts.onListen : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        let sync = opts && 'sync' in opts ? opts.sync : false;
        return replay_subject.ReplaySubject$(T).new({maxSize: maxSize, onListen: onListen, onCancel: onCancel, sync: sync});
      }
      static ['_#_#tearOff'](T, controller, stream, _queue, _maxSize) {
        return new (replay_subject.ReplaySubject$(T)).__(controller, stream, _queue, _maxSize);
      }
      onAdd(event) {
        T.as(event);
        if (this[_queue$][$length] === this[_maxSize$]) {
          this[_queue$].removeFirst();
        }
        this[_queue$].add(__t$_EventOfT().data(event));
      }
      onAddError(error, stackTrace = null) {
        if (this[_queue$][$length] === this[_maxSize$]) {
          this[_queue$].removeFirst();
        }
        this[_queue$].add(__t$_EventOfT().error(new error_and_stacktrace.ErrorAndStackTrace.new(error, stackTrace)));
      }
      get values() {
        return this[_queue$][$where](dart.fn(event => event.errorAndStackTrace == null, __t$_EventOfTTobool()))[$map](T, dart.fn(event => T.as(event.data), __t$_EventOfTToT()))[$toList]({growable: false});
      }
      get errors() {
        return collection_extensions['MapNotNullIterableExtension|mapNotNull'](__t$_EventOfT(), core.Object, this[_queue$], dart.fn(event => {
          let t0;
          t0 = event.errorAndStackTrace;
          return t0 == null ? null : t0.error;
        }, __t$_EventOfTToObjectN()))[$toList]({growable: false});
      }
      get stackTraces() {
        return this[_queue$][$where](dart.fn(event => event.errorAndStackTrace != null, __t$_EventOfTTobool()))[$map](T$.StackTraceN(), dart.fn(event => dart.nullCheck(event.errorAndStackTrace).stackTrace, __t$_EventOfTToStackTraceN()))[$toList]({growable: false});
      }
    }
    (ReplaySubject.__ = function(controller, stream, _queue, _maxSize) {
      this[_queue$] = _queue;
      this[_maxSize$] = _maxSize;
      ReplaySubject.__proto__.new.call(this, controller, stream);
      ;
    }).prototype = ReplaySubject.prototype;
    dart.addTypeTests(ReplaySubject);
    ReplaySubject.prototype[_is_ReplaySubject_default] = true;
    dart.addTypeCaches(ReplaySubject);
    ReplaySubject[dart.implements] = () => [replay_stream.ReplayStream$(T)];
    dart.setStaticMethodSignature(ReplaySubject, () => ['new']);
    dart.setGetterSignature(ReplaySubject, () => ({
      __proto__: dart.getGetters(ReplaySubject.__proto__),
      values: core.List$(T),
      errors: core.List$(core.Object),
      stackTraces: core.List$(dart.nullable(core.StackTrace))
    }));
    dart.setLibraryUri(ReplaySubject, I[0]);
    dart.setFieldSignature(ReplaySubject, () => ({
      __proto__: dart.getFields(ReplaySubject.__proto__),
      [_queue$]: dart.finalFieldType(collection.Queue$(replay_subject._Event$(T))),
      [_maxSize$]: dart.finalFieldType(dart.nullable(core.int))
    }));
    return ReplaySubject;
  });
  replay_subject.ReplaySubject = replay_subject.ReplaySubject$();
  dart.addTypeTests(replay_subject.ReplaySubject, _is_ReplaySubject_default);
  const _is__Event_default = Symbol('_is__Event_default');
  replay_subject._Event$ = dart.generic(T => {
    class _Event extends core.Object {
      static ['_#_#tearOff'](T, opts) {
        let data = opts && 'data' in opts ? opts.data : null;
        let errorAndStackTrace = opts && 'errorAndStackTrace' in opts ? opts.errorAndStackTrace : null;
        return new (replay_subject._Event$(T)).__({data: data, errorAndStackTrace: errorAndStackTrace});
      }
      static data(data) {
        return new (replay_subject._Event$(T)).__({data: data, errorAndStackTrace: null});
      }
      static ['_#data#tearOff'](T, data) {
        return replay_subject._Event$(T).data(data);
      }
      static error(e) {
        return new (replay_subject._Event$(T)).__({errorAndStackTrace: e, data: empty.EMPTY});
      }
      static ['_#error#tearOff'](T, e) {
        return replay_subject._Event$(T).error(e);
      }
    }
    (_Event.__ = function(opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let errorAndStackTrace = opts && 'errorAndStackTrace' in opts ? opts.errorAndStackTrace : null;
      this.data = data;
      this.errorAndStackTrace = errorAndStackTrace;
      ;
    }).prototype = _Event.prototype;
    dart.addTypeTests(_Event);
    _Event.prototype[_is__Event_default] = true;
    dart.addTypeCaches(_Event);
    dart.setStaticMethodSignature(_Event, () => ['data', 'error']);
    dart.setLibraryUri(_Event, I[0]);
    dart.setFieldSignature(_Event, () => ({
      __proto__: dart.getFields(_Event.__proto__),
      data: dart.finalFieldType(dart.nullable(core.Object)),
      errorAndStackTrace: dart.finalFieldType(dart.nullable(error_and_stacktrace.ErrorAndStackTrace))
    }));
    return _Event;
  });
  replay_subject._Event = replay_subject._Event$();
  dart.addTypeTests(replay_subject._Event, _is__Event_default);
  var _wrapper$ = dart.privateName(behavior_subject, "_wrapper");
  const _is_BehaviorSubject_default = Symbol('_is_BehaviorSubject_default');
  behavior_subject.BehaviorSubject$ = dart.generic(T => {
    class BehaviorSubject extends subject.Subject$(T) {
      static ['_#_#tearOff'](T, controller, stream, _wrapper) {
        return new (behavior_subject.BehaviorSubject$(T)).__(controller, stream, _wrapper);
      }
      static new(opts) {
        let onListen = opts && 'onListen' in opts ? opts.onListen : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        let sync = opts && 'sync' in opts ? opts.sync : false;
        let controller = async.StreamController$(T).broadcast({onListen: onListen, onCancel: onCancel, sync: sync});
        let wrapper = new (behavior_subject._Wrapper$(T)).new();
        return new (behavior_subject.BehaviorSubject$(T)).__(controller, rx.Rx.defer(T, behavior_subject.BehaviorSubject._deferStream(T, wrapper, controller, sync), {reusable: true}), wrapper);
      }
      static ['_#new#tearOff'](T, opts) {
        let onListen = opts && 'onListen' in opts ? opts.onListen : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        let sync = opts && 'sync' in opts ? opts.sync : false;
        return behavior_subject.BehaviorSubject$(T).new({onListen: onListen, onCancel: onCancel, sync: sync});
      }
      static seeded(seedValue, opts) {
        let onListen = opts && 'onListen' in opts ? opts.onListen : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        let sync = opts && 'sync' in opts ? opts.sync : false;
        let controller = async.StreamController$(T).broadcast({onListen: onListen, onCancel: onCancel, sync: sync});
        let wrapper = new (behavior_subject._Wrapper$(T)).seeded(seedValue);
        return new (behavior_subject.BehaviorSubject$(T)).__(controller, rx.Rx.defer(T, behavior_subject.BehaviorSubject._deferStream(T, wrapper, controller, sync), {reusable: true}), wrapper);
      }
      static ['_#seeded#tearOff'](T, seedValue, opts) {
        let onListen = opts && 'onListen' in opts ? opts.onListen : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        let sync = opts && 'sync' in opts ? opts.sync : false;
        return behavior_subject.BehaviorSubject$(T).seeded(seedValue, {onListen: onListen, onCancel: onCancel, sync: sync});
      }
      static _deferStream(T, wrapper, controller, sync) {
        return dart.fn(() => {
          let errorAndStackTrace = wrapper.errorAndStackTrace;
          if (errorAndStackTrace != null && !wrapper.isValue) {
            return controller.stream.transform(T, new (start_with_error.StartWithErrorStreamTransformer$(T)).new(errorAndStackTrace.error, errorAndStackTrace.stackTrace));
          }
          let value = wrapper.value;
          if (empty.isNotEmpty(value) && wrapper.isValue) {
            return controller.stream.transform(T, new (start_with.StartWithStreamTransformer$(T)).new(T.as(value)));
          }
          return controller.stream;
        }, dart.fnType(async.Stream$(T), []));
      }
      onAdd(event) {
        T.as(event);
        return this[_wrapper$].setValue(event);
      }
      onAddError(error, stackTrace = null) {
        return this[_wrapper$].setError(error, stackTrace);
      }
      get stream() {
        return this;
      }
      get hasValue() {
        return empty.isNotEmpty(this[_wrapper$].value);
      }
      get value() {
        let value = this[_wrapper$].value;
        if (empty.isNotEmpty(value)) {
          return T.as(value);
        }
        dart.throw(value_stream.ValueStreamError.hasNoValue());
      }
      get valueOrNull() {
        return empty.unbox(T, this[_wrapper$].value);
      }
      set value(newValue) {
        T.as(newValue);
        return this.add(newValue);
      }
      get hasError() {
        return this[_wrapper$].errorAndStackTrace != null;
      }
      get errorOrNull() {
        let t0;
        t0 = this[_wrapper$].errorAndStackTrace;
        return t0 == null ? null : t0.error;
      }
      get error() {
        let errorAndSt = this[_wrapper$].errorAndStackTrace;
        if (errorAndSt != null) {
          return errorAndSt.error;
        }
        dart.throw(value_stream.ValueStreamError.hasNoError());
      }
      get stackTrace() {
        let t0;
        t0 = this[_wrapper$].errorAndStackTrace;
        return t0 == null ? null : t0.stackTrace;
      }
    }
    (BehaviorSubject.__ = function(controller, stream, _wrapper) {
      this[_wrapper$] = _wrapper;
      BehaviorSubject.__proto__.new.call(this, controller, stream);
      ;
    }).prototype = BehaviorSubject.prototype;
    dart.addTypeTests(BehaviorSubject);
    BehaviorSubject.prototype[_is_BehaviorSubject_default] = true;
    dart.addTypeCaches(BehaviorSubject);
    BehaviorSubject[dart.implements] = () => [value_stream.ValueStream$(T)];
    dart.setStaticMethodSignature(BehaviorSubject, () => ['new', 'seeded', '_deferStream']);
    dart.setGetterSignature(BehaviorSubject, () => ({
      __proto__: dart.getGetters(BehaviorSubject.__proto__),
      stream: value_stream.ValueStream$(T),
      hasValue: core.bool,
      value: T,
      valueOrNull: dart.nullable(T),
      hasError: core.bool,
      errorOrNull: dart.nullable(core.Object),
      error: core.Object,
      stackTrace: dart.nullable(core.StackTrace)
    }));
    dart.setSetterSignature(BehaviorSubject, () => ({
      __proto__: dart.getSetters(BehaviorSubject.__proto__),
      value: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(BehaviorSubject, I[1]);
    dart.setFieldSignature(BehaviorSubject, () => ({
      __proto__: dart.getFields(BehaviorSubject.__proto__),
      [_wrapper$]: dart.finalFieldType(behavior_subject._Wrapper$(T))
    }));
    return BehaviorSubject;
  });
  behavior_subject.BehaviorSubject = behavior_subject.BehaviorSubject$();
  dart.addTypeTests(behavior_subject.BehaviorSubject, _is_BehaviorSubject_default);
  const _is__Wrapper_default = Symbol('_is__Wrapper_default');
  behavior_subject._Wrapper$ = dart.generic(T => {
    class _Wrapper extends core.Object {
      static ['_#new#tearOff'](T) {
        return new (behavior_subject._Wrapper$(T)).new();
      }
      static ['_#seeded#tearOff'](T, value) {
        return new (behavior_subject._Wrapper$(T)).seeded(value);
      }
      setValue(event) {
        T.as(event);
        this.value = event;
        this.isValue = true;
      }
      setError(error, stackTrace) {
        this.errorAndStackTrace = new error_and_stacktrace.ErrorAndStackTrace.new(error, stackTrace);
        this.isValue = false;
      }
    }
    (_Wrapper.new = function() {
      this.value = empty.EMPTY;
      this.errorAndStackTrace = null;
      this.isValue = false;
      ;
    }).prototype = _Wrapper.prototype;
    (_Wrapper.seeded = function(value) {
      this.value = empty.EMPTY;
      this.errorAndStackTrace = null;
      this.value = value;
      this.isValue = true;
      ;
    }).prototype = _Wrapper.prototype;
    dart.addTypeTests(_Wrapper);
    _Wrapper.prototype[_is__Wrapper_default] = true;
    dart.addTypeCaches(_Wrapper);
    dart.setMethodSignature(_Wrapper, () => ({
      __proto__: dart.getMethods(_Wrapper.__proto__),
      setValue: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      setError: dart.fnType(dart.void, [core.Object, dart.nullable(core.StackTrace)])
    }));
    dart.setLibraryUri(_Wrapper, I[1]);
    dart.setFieldSignature(_Wrapper, () => ({
      __proto__: dart.getFields(_Wrapper.__proto__),
      isValue: dart.fieldType(core.bool),
      value: dart.fieldType(dart.nullable(core.Object)),
      errorAndStackTrace: dart.fieldType(dart.nullable(error_and_stacktrace.ErrorAndStackTrace))
    }));
    return _Wrapper;
  });
  behavior_subject._Wrapper = behavior_subject._Wrapper$();
  dart.addTypeTests(behavior_subject._Wrapper, _is__Wrapper_default);
  const _is_ConnectableStream_default = Symbol('_is_ConnectableStream_default');
  connectable_stream.ConnectableStream$ = dart.generic(T => {
    class ConnectableStream extends async.StreamView$(T) {}
    (ConnectableStream.new = function(stream) {
      ConnectableStream.__proto__.new.call(this, stream);
      ;
    }).prototype = ConnectableStream.prototype;
    dart.addTypeTests(ConnectableStream);
    ConnectableStream.prototype[_is_ConnectableStream_default] = true;
    dart.addTypeCaches(ConnectableStream);
    dart.setLibraryUri(ConnectableStream, I[2]);
    return ConnectableStream;
  });
  connectable_stream.ConnectableStream = connectable_stream.ConnectableStream$();
  dart.addTypeTests(connectable_stream.ConnectableStream, _is_ConnectableStream_default);
  var _name = dart.privateName(core, "_name");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  connectable_stream._ConnectableStreamUse = class _ConnectableStreamUse extends core._Enum {
    toString() {
      return "_ConnectableStreamUse." + this[_name];
    }
  };
  (connectable_stream._ConnectableStreamUse.new = function(index, name) {
    connectable_stream._ConnectableStreamUse.__proto__.new.call(this, index, name);
    ;
  }).prototype = connectable_stream._ConnectableStreamUse.prototype;
  dart.addTypeTests(connectable_stream._ConnectableStreamUse);
  dart.addTypeCaches(connectable_stream._ConnectableStreamUse);
  dart.setLibraryUri(connectable_stream._ConnectableStreamUse, I[2]);
  dart.setStaticFieldSignature(connectable_stream._ConnectableStreamUse, () => ['values', 'autoConnect', 'connect', 'refCount']);
  dart.defineExtensionMethods(connectable_stream._ConnectableStreamUse, ['toString']);
  dart.defineLazy(connectable_stream._ConnectableStreamUse, {
    /*connectable_stream._ConnectableStreamUse.values*/get values() {
      return C[0] || CT.C0;
    },
    /*connectable_stream._ConnectableStreamUse.autoConnect*/get autoConnect() {
      return C[1] || CT.C1;
    },
    /*connectable_stream._ConnectableStreamUse.connect*/get connect() {
      return C[2] || CT.C2;
    },
    /*connectable_stream._ConnectableStreamUse.refCount*/get refCount() {
      return C[3] || CT.C3;
    }
  }, false);
  var _use = dart.privateName(connectable_stream, "_use");
  var __AbstractConnectableStream__connection = dart.privateName(connectable_stream, "_#AbstractConnectableStream#_connection");
  var __AbstractConnectableStream__connection_isSet = dart.privateName(connectable_stream, "_#AbstractConnectableStream#_connection#isSet");
  var _source$ = dart.privateName(connectable_stream, "_source");
  var _subject$ = dart.privateName(connectable_stream, "_subject");
  var _connection = dart.privateName(connectable_stream, "_connection");
  var _canReuse = dart.privateName(connectable_stream, "_canReuse");
  const _is_AbstractConnectableStream_default = Symbol('_is_AbstractConnectableStream_default');
  connectable_stream.AbstractConnectableStream$ = dart.generic((T, S, R) => {
    var __t$ConnectableStreamSubscriptionOfT = () => (__t$ConnectableStreamSubscriptionOfT = dart.constFn(connectable_stream.ConnectableStreamSubscription$(T)))();
    var __t$TTovoid = () => (__t$TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    class AbstractConnectableStream extends connectable_stream.ConnectableStream$(T) {
      get [_connection]() {
        let t3, t2;
        t2 = this[__AbstractConnectableStream__connection];
        return t2 == null ? (t3 = new (__t$ConnectableStreamSubscriptionOfT()).new(this[_source$].listen(__t$TTovoid().as(dart.bind(this[_subject$], 'add')), {onError: dart.bind(this[_subject$], 'addError'), onDone: dart.bind(this[_subject$], 'close')}), this[_subject$]), this[__AbstractConnectableStream__connection] == null ? this[__AbstractConnectableStream__connection] = t3 : dart.throw(new _internal.LateError.fieldADI("_connection"))) : t2;
      }
      [_canReuse](use) {
        if (this[_use] != null && this[_use] !== use) {
          dart.throw(new core.StateError.new("Do not mix autoConnect, connect and refCount together, you should only use one of them!"));
        }
        let canReuse = this[_use] != null && this[_use] === use;
        this[_use] = use;
        return canReuse;
      }
      autoConnect(opts) {
        let connection = opts && 'connection' in opts ? opts.connection : null;
        if (this[_canReuse](connectable_stream._ConnectableStreamUse.autoConnect)) {
          return R.as(this[_subject$]);
        }
        this[_subject$].onListen = dart.fn(() => {
          let t2;
          let subscription = this[_connection];
          t2 = connection;
          t2 == null ? null : t2(subscription);
        }, T$.VoidTovoid());
        this[_subject$].onCancel = null;
        return R.as(this[_subject$]);
      }
      connect() {
        if (this[_canReuse](connectable_stream._ConnectableStreamUse.connect)) {
          return this[_connection];
        }
        this[_subject$].onListen = this[_subject$].onCancel = null;
        return this[_connection];
      }
      refCount() {
        if (this[_canReuse](connectable_stream._ConnectableStreamUse.refCount)) {
          return R.as(this[_subject$]);
        }
        let subscription = null;
        this[_subject$].onListen = dart.fn(() => subscription = this[_connection], T$.VoidTovoid());
        this[_subject$].onCancel = dart.fn(() => {
          let t2;
          t2 = subscription;
          return t2 == null ? null : t2.cancel();
        }, T$.VoidToFutureNOfvoid());
        return R.as(this[_subject$]);
      }
    }
    (AbstractConnectableStream.new = function(source, subject) {
      this[_use] = null;
      this[__AbstractConnectableStream__connection] = null;
      this[__AbstractConnectableStream__connection_isSet] = false;
      if (!R.is(subject)) dart.assertFailed(null, I[3], 58, 16, "subject is R");
      this[_source$] = source;
      this[_subject$] = subject;
      AbstractConnectableStream.__proto__.new.call(this, subject);
      ;
    }).prototype = AbstractConnectableStream.prototype;
    dart.addTypeTests(AbstractConnectableStream);
    AbstractConnectableStream.prototype[_is_AbstractConnectableStream_default] = true;
    dart.addTypeCaches(AbstractConnectableStream);
    dart.setMethodSignature(AbstractConnectableStream, () => ({
      __proto__: dart.getMethods(AbstractConnectableStream.__proto__),
      [_canReuse]: dart.fnType(core.bool, [connectable_stream._ConnectableStreamUse]),
      autoConnect: dart.fnType(R, [], {connection: dart.nullable(dart.fnType(dart.void, [async.StreamSubscription$(T)]))}, {}),
      connect: dart.fnType(async.StreamSubscription$(T), []),
      refCount: dart.fnType(R, [])
    }));
    dart.setGetterSignature(AbstractConnectableStream, () => ({
      __proto__: dart.getGetters(AbstractConnectableStream.__proto__),
      [_connection]: connectable_stream.ConnectableStreamSubscription$(T)
    }));
    dart.setLibraryUri(AbstractConnectableStream, I[2]);
    dart.setFieldSignature(AbstractConnectableStream, () => ({
      __proto__: dart.getFields(AbstractConnectableStream.__proto__),
      [_source$]: dart.finalFieldType(async.Stream$(T)),
      [_subject$]: dart.finalFieldType(S),
      [_use]: dart.fieldType(dart.nullable(connectable_stream._ConnectableStreamUse)),
      [__AbstractConnectableStream__connection]: dart.fieldType(dart.nullable(connectable_stream.ConnectableStreamSubscription$(T))),
      [__AbstractConnectableStream__connection_isSet]: dart.fieldType(core.bool)
    }));
    return AbstractConnectableStream;
  });
  connectable_stream.AbstractConnectableStream = connectable_stream.AbstractConnectableStream$();
  dart.addTypeTests(connectable_stream.AbstractConnectableStream, _is_AbstractConnectableStream_default);
  const _is_PublishConnectableStream_default = Symbol('_is_PublishConnectableStream_default');
  connectable_stream.PublishConnectableStream$ = dart.generic(T => {
    var __t$PublishSubjectOfT = () => (__t$PublishSubjectOfT = dart.constFn(publish_subject.PublishSubject$(T)))();
    class PublishConnectableStream extends connectable_stream.AbstractConnectableStream$(T, publish_subject.PublishSubject$(T), async.Stream$(T)) {
      static ['_#new#tearOff'](T, source, opts) {
        let sync = opts && 'sync' in opts ? opts.sync : false;
        return new (connectable_stream.PublishConnectableStream$(T)).new(source, {sync: sync});
      }
    }
    (PublishConnectableStream.new = function(source, opts) {
      let sync = opts && 'sync' in opts ? opts.sync : false;
      PublishConnectableStream.__proto__.new.call(this, source, __t$PublishSubjectOfT().new({sync: sync}));
      ;
    }).prototype = PublishConnectableStream.prototype;
    dart.addTypeTests(PublishConnectableStream);
    PublishConnectableStream.prototype[_is_PublishConnectableStream_default] = true;
    dart.addTypeCaches(PublishConnectableStream);
    dart.setLibraryUri(PublishConnectableStream, I[2]);
    return PublishConnectableStream;
  });
  connectable_stream.PublishConnectableStream = connectable_stream.PublishConnectableStream$();
  dart.addTypeTests(connectable_stream.PublishConnectableStream, _is_PublishConnectableStream_default);
  const _is_ValueConnectableStream_default = Symbol('_is_ValueConnectableStream_default');
  connectable_stream.ValueConnectableStream$ = dart.generic(T => {
    var __t$BehaviorSubjectOfT = () => (__t$BehaviorSubjectOfT = dart.constFn(behavior_subject.BehaviorSubject$(T)))();
    class ValueConnectableStream extends connectable_stream.AbstractConnectableStream$(T, behavior_subject.BehaviorSubject$(T), value_stream.ValueStream$(T)) {
      static ['_#new#tearOff'](T, source, opts) {
        let sync = opts && 'sync' in opts ? opts.sync : false;
        return new (connectable_stream.ValueConnectableStream$(T)).new(source, {sync: sync});
      }
      static ['_#seeded#tearOff'](T, source, seedValue, opts) {
        let sync = opts && 'sync' in opts ? opts.sync : false;
        return new (connectable_stream.ValueConnectableStream$(T)).seeded(source, seedValue, {sync: sync});
      }
      get hasValue() {
        return this[_subject$].hasValue;
      }
      get value() {
        return this[_subject$].value;
      }
      get valueOrNull() {
        return this[_subject$].valueOrNull;
      }
      get error() {
        return this[_subject$].error;
      }
      get errorOrNull() {
        return this[_subject$].errorOrNull;
      }
      get hasError() {
        return this[_subject$].hasError;
      }
      get stackTrace() {
        return this[_subject$].stackTrace;
      }
    }
    (ValueConnectableStream.new = function(source, opts) {
      let sync = opts && 'sync' in opts ? opts.sync : false;
      ValueConnectableStream.__proto__.new.call(this, source, __t$BehaviorSubjectOfT().new({sync: sync}));
      ;
    }).prototype = ValueConnectableStream.prototype;
    (ValueConnectableStream.seeded = function(source, seedValue, opts) {
      let sync = opts && 'sync' in opts ? opts.sync : false;
      ValueConnectableStream.__proto__.new.call(this, source, __t$BehaviorSubjectOfT().seeded(seedValue, {sync: sync}));
      ;
    }).prototype = ValueConnectableStream.prototype;
    dart.addTypeTests(ValueConnectableStream);
    ValueConnectableStream.prototype[_is_ValueConnectableStream_default] = true;
    dart.addTypeCaches(ValueConnectableStream);
    ValueConnectableStream[dart.implements] = () => [value_stream.ValueStream$(T)];
    dart.setGetterSignature(ValueConnectableStream, () => ({
      __proto__: dart.getGetters(ValueConnectableStream.__proto__),
      hasValue: core.bool,
      value: T,
      valueOrNull: dart.nullable(T),
      error: core.Object,
      errorOrNull: dart.nullable(core.Object),
      hasError: core.bool,
      stackTrace: dart.nullable(core.StackTrace)
    }));
    dart.setLibraryUri(ValueConnectableStream, I[2]);
    return ValueConnectableStream;
  });
  connectable_stream.ValueConnectableStream = connectable_stream.ValueConnectableStream$();
  dart.addTypeTests(connectable_stream.ValueConnectableStream, _is_ValueConnectableStream_default);
  const _is_ReplayConnectableStream_default = Symbol('_is_ReplayConnectableStream_default');
  connectable_stream.ReplayConnectableStream$ = dart.generic(T => {
    var __t$ReplaySubjectOfT = () => (__t$ReplaySubjectOfT = dart.constFn(replay_subject.ReplaySubject$(T)))();
    class ReplayConnectableStream extends connectable_stream.AbstractConnectableStream$(T, replay_subject.ReplaySubject$(T), replay_stream.ReplayStream$(T)) {
      static ['_#new#tearOff'](T, stream, opts) {
        let maxSize = opts && 'maxSize' in opts ? opts.maxSize : null;
        let sync = opts && 'sync' in opts ? opts.sync : false;
        return new (connectable_stream.ReplayConnectableStream$(T)).new(stream, {maxSize: maxSize, sync: sync});
      }
      get values() {
        return this[_subject$].values;
      }
      get errors() {
        return this[_subject$].errors;
      }
      get stackTraces() {
        return this[_subject$].stackTraces;
      }
    }
    (ReplayConnectableStream.new = function(stream, opts) {
      let maxSize = opts && 'maxSize' in opts ? opts.maxSize : null;
      let sync = opts && 'sync' in opts ? opts.sync : false;
      ReplayConnectableStream.__proto__.new.call(this, stream, __t$ReplaySubjectOfT().new({maxSize: maxSize, sync: sync}));
      ;
    }).prototype = ReplayConnectableStream.prototype;
    dart.addTypeTests(ReplayConnectableStream);
    ReplayConnectableStream.prototype[_is_ReplayConnectableStream_default] = true;
    dart.addTypeCaches(ReplayConnectableStream);
    ReplayConnectableStream[dart.implements] = () => [replay_stream.ReplayStream$(T)];
    dart.setGetterSignature(ReplayConnectableStream, () => ({
      __proto__: dart.getGetters(ReplayConnectableStream.__proto__),
      values: core.List$(T),
      errors: core.List$(core.Object),
      stackTraces: core.List$(dart.nullable(core.StackTrace))
    }));
    dart.setLibraryUri(ReplayConnectableStream, I[2]);
    return ReplayConnectableStream;
  });
  connectable_stream.ReplayConnectableStream = connectable_stream.ReplayConnectableStream$();
  dart.addTypeTests(connectable_stream.ReplayConnectableStream, _is_ReplayConnectableStream_default);
  var _unsupportedError = dart.privateName(connectable_stream, "_unsupportedError");
  const _is_ConnectableStreamSubscription_default = Symbol('_is_ConnectableStreamSubscription_default');
  connectable_stream.ConnectableStreamSubscription$ = dart.generic(T => {
    class ConnectableStreamSubscription extends async.StreamSubscription$(T) {
      static ['_#new#tearOff'](T, _source, _subject) {
        return new (connectable_stream.ConnectableStreamSubscription$(T)).new(_source, _subject);
      }
      cancel() {
        return this[_source$].cancel().then(dart.void, dart.fn(_ => this[_subject$].close(), T$.voidToFuture()));
      }
      asFuture(E, futureValue = null) {
        return this[_unsupportedError]();
      }
      get isPaused() {
        return this[_source$].isPaused;
      }
      onData(handleData) {
        return this[_unsupportedError]();
      }
      onDone(handleDone) {
        return this[_unsupportedError]();
      }
      onError(handleError) {
        return this[_unsupportedError]();
      }
      pause(resumeSignal = null) {
        return this[_source$].pause(resumeSignal);
      }
      resume() {
        return this[_source$].resume();
      }
      [_unsupportedError]() {
        return dart.throw(new core.UnsupportedError.new("Cannot change handlers of ConnectableStreamSubscription."));
      }
    }
    (ConnectableStreamSubscription.new = function(_source, _subject) {
      this[_source$] = _source;
      this[_subject$] = _subject;
      ;
    }).prototype = ConnectableStreamSubscription.prototype;
    dart.addTypeTests(ConnectableStreamSubscription);
    ConnectableStreamSubscription.prototype[_is_ConnectableStreamSubscription_default] = true;
    dart.addTypeCaches(ConnectableStreamSubscription);
    dart.setMethodSignature(ConnectableStreamSubscription, () => ({
      __proto__: dart.getMethods(ConnectableStreamSubscription.__proto__),
      cancel: dart.fnType(async.Future, []),
      asFuture: dart.gFnType(E => [dart.Never, [], [dart.nullable(E)]], E => [dart.nullable(core.Object)]),
      onData: dart.fnType(dart.Never, [dart.nullable(dart.fnType(dart.void, [T]))]),
      onDone: dart.fnType(dart.Never, [dart.nullable(dart.fnType(dart.void, []))]),
      onError: dart.fnType(dart.Never, [dart.nullable(core.Function)]),
      pause: dart.fnType(dart.void, [], [dart.nullable(async.Future$(dart.void))]),
      resume: dart.fnType(dart.void, []),
      [_unsupportedError]: dart.fnType(dart.Never, [])
    }));
    dart.setGetterSignature(ConnectableStreamSubscription, () => ({
      __proto__: dart.getGetters(ConnectableStreamSubscription.__proto__),
      isPaused: core.bool
    }));
    dart.setLibraryUri(ConnectableStreamSubscription, I[2]);
    dart.setFieldSignature(ConnectableStreamSubscription, () => ({
      __proto__: dart.getFields(ConnectableStreamSubscription.__proto__),
      [_source$]: dart.finalFieldType(async.StreamSubscription$(T)),
      [_subject$]: dart.finalFieldType(subject.Subject$(T))
    }));
    return ConnectableStreamSubscription;
  });
  connectable_stream.ConnectableStreamSubscription = connectable_stream.ConnectableStreamSubscription$();
  dart.addTypeTests(connectable_stream.ConnectableStreamSubscription, _is_ConnectableStreamSubscription_default);
  connectable_stream['ConnectableStreamExtensions|publish'] = function ConnectableStreamExtensions$124publish(T, $this) {
    return new (connectable_stream.PublishConnectableStream$(T)).new($this, {sync: true});
  };
  connectable_stream['ConnectableStreamExtensions|get#publish'] = function ConnectableStreamExtensions$124get$35publish(T, $this) {
    return dart.fn(() => connectable_stream['ConnectableStreamExtensions|publish'](T, $this), dart.fnType(connectable_stream.PublishConnectableStream$(T), []));
  };
  connectable_stream['ConnectableStreamExtensions|publishValue'] = function ConnectableStreamExtensions$124publishValue(T, $this) {
    return new (connectable_stream.ValueConnectableStream$(T)).new($this, {sync: true});
  };
  connectable_stream['ConnectableStreamExtensions|get#publishValue'] = function ConnectableStreamExtensions$124get$35publishValue(T, $this) {
    return dart.fn(() => connectable_stream['ConnectableStreamExtensions|publishValue'](T, $this), dart.fnType(connectable_stream.ValueConnectableStream$(T), []));
  };
  connectable_stream['ConnectableStreamExtensions|publishValueSeeded'] = function ConnectableStreamExtensions$124publishValueSeeded(T, $this, seedValue) {
    return new (connectable_stream.ValueConnectableStream$(T)).seeded($this, seedValue, {sync: true});
  };
  connectable_stream['ConnectableStreamExtensions|get#publishValueSeeded'] = function ConnectableStreamExtensions$124get$35publishValueSeeded(T, $this) {
    return dart.fn(seedValue => connectable_stream['ConnectableStreamExtensions|publishValueSeeded'](T, $this, seedValue), dart.fnType(connectable_stream.ValueConnectableStream$(T), [T]));
  };
  connectable_stream['ConnectableStreamExtensions|publishReplay'] = function ConnectableStreamExtensions$124publishReplay(T, $this, opts) {
    let maxSize = opts && 'maxSize' in opts ? opts.maxSize : null;
    return new (connectable_stream.ReplayConnectableStream$(T)).new($this, {maxSize: maxSize, sync: true});
  };
  connectable_stream['ConnectableStreamExtensions|get#publishReplay'] = function ConnectableStreamExtensions$124get$35publishReplay(T, $this) {
    return dart.fn(opts => {
      let maxSize = opts && 'maxSize' in opts ? opts.maxSize : null;
      return connectable_stream['ConnectableStreamExtensions|publishReplay'](T, $this, {maxSize: maxSize});
    }, dart.fnType(connectable_stream.ReplayConnectableStream$(T), [], {maxSize: T$.intN()}, {}));
  };
  connectable_stream['ConnectableStreamExtensions|share'] = function ConnectableStreamExtensions$124share(T, $this) {
    return connectable_stream['ConnectableStreamExtensions|publish'](T, $this).refCount();
  };
  connectable_stream['ConnectableStreamExtensions|get#share'] = function ConnectableStreamExtensions$124get$35share(T, $this) {
    return dart.fn(() => connectable_stream['ConnectableStreamExtensions|share'](T, $this), dart.fnType(async.Stream$(T), []));
  };
  connectable_stream['ConnectableStreamExtensions|shareValue'] = function ConnectableStreamExtensions$124shareValue(T, $this) {
    return connectable_stream['ConnectableStreamExtensions|publishValue'](T, $this).refCount();
  };
  connectable_stream['ConnectableStreamExtensions|get#shareValue'] = function ConnectableStreamExtensions$124get$35shareValue(T, $this) {
    return dart.fn(() => connectable_stream['ConnectableStreamExtensions|shareValue'](T, $this), dart.fnType(value_stream.ValueStream$(T), []));
  };
  connectable_stream['ConnectableStreamExtensions|shareValueSeeded'] = function ConnectableStreamExtensions$124shareValueSeeded(T, $this, seedValue) {
    return connectable_stream['ConnectableStreamExtensions|publishValueSeeded'](T, $this, seedValue).refCount();
  };
  connectable_stream['ConnectableStreamExtensions|get#shareValueSeeded'] = function ConnectableStreamExtensions$124get$35shareValueSeeded(T, $this) {
    return dart.fn(seedValue => connectable_stream['ConnectableStreamExtensions|shareValueSeeded'](T, $this, seedValue), dart.fnType(value_stream.ValueStream$(T), [T]));
  };
  connectable_stream['ConnectableStreamExtensions|shareReplay'] = function ConnectableStreamExtensions$124shareReplay(T, $this, opts) {
    let maxSize = opts && 'maxSize' in opts ? opts.maxSize : null;
    return connectable_stream['ConnectableStreamExtensions|publishReplay'](T, $this, {maxSize: maxSize}).refCount();
  };
  connectable_stream['ConnectableStreamExtensions|get#shareReplay'] = function ConnectableStreamExtensions$124get$35shareReplay(T, $this) {
    return dart.fn(opts => {
      let maxSize = opts && 'maxSize' in opts ? opts.maxSize : null;
      return connectable_stream['ConnectableStreamExtensions|shareReplay'](T, $this, {maxSize: maxSize});
    }, dart.fnType(replay_stream.ReplayStream$(T), [], {maxSize: T$.intN()}, {}));
  };
  rx.Rx = class Rx extends core.Object {
    static combineLatest(T, R, streams, combiner) {
      return new (combine_latest.CombineLatestStream$(T, R)).new(streams, combiner);
    }
    static combineLatestList(T, streams) {
      return combine_latest.CombineLatestStream.list(T, streams);
    }
    static combineLatest2(A, B, T, streamA, streamB, combiner) {
      return combine_latest.CombineLatestStream.combine2(A, B, T, streamA, streamB, combiner);
    }
    static combineLatest3(A, B, C, T, streamA, streamB, streamC, combiner) {
      return combine_latest.CombineLatestStream.combine3(A, B, C, T, streamA, streamB, streamC, combiner);
    }
    static combineLatest4(A, B, C, D, T, streamA, streamB, streamC, streamD, combiner) {
      return combine_latest.CombineLatestStream.combine4(A, B, C, D, T, streamA, streamB, streamC, streamD, combiner);
    }
    static combineLatest5(A, B, C, D, E, T, streamA, streamB, streamC, streamD, streamE, combiner) {
      return combine_latest.CombineLatestStream.combine5(A, B, C, D, E, T, streamA, streamB, streamC, streamD, streamE, combiner);
    }
    static combineLatest6(A, B, C, D, E, F, T, streamA, streamB, streamC, streamD, streamE, streamF, combiner) {
      return combine_latest.CombineLatestStream.combine6(A, B, C, D, E, F, T, streamA, streamB, streamC, streamD, streamE, streamF, combiner);
    }
    static combineLatest7(A, B, C, D, E, F, G, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, combiner) {
      return combine_latest.CombineLatestStream.combine7(A, B, C, D, E, F, G, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, combiner);
    }
    static combineLatest8(A, B, C, D, E, F, G, H, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, combiner) {
      return combine_latest.CombineLatestStream.combine8(A, B, C, D, E, F, G, H, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, combiner);
    }
    static combineLatest9(A, B, C, D, E, F, G, H, I, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, combiner) {
      return combine_latest.CombineLatestStream.combine9(A, B, C, D, E, F, G, H, I, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, combiner);
    }
    static concat(T, streams) {
      return new (concat.ConcatStream$(T)).new(streams);
    }
    static concatEager(T, streams) {
      return new (concat_eager.ConcatEagerStream$(T)).new(streams);
    }
    static defer(T, streamFactory, opts) {
      let reusable = opts && 'reusable' in opts ? opts.reusable : false;
      return new (defer.DeferStream$(T)).new(streamFactory, {reusable: reusable});
    }
    static forkJoin(T, R, streams, combiner) {
      return new (fork_join.ForkJoinStream$(T, R)).new(streams, combiner);
    }
    static forkJoinList(T, streams) {
      return fork_join.ForkJoinStream.list(T, streams);
    }
    static forkJoin2(A, B, T, streamA, streamB, combiner) {
      return fork_join.ForkJoinStream.combine2(A, B, T, streamA, streamB, combiner);
    }
    static forkJoin3(A, B, C, T, streamA, streamB, streamC, combiner) {
      return fork_join.ForkJoinStream.combine3(A, B, C, T, streamA, streamB, streamC, combiner);
    }
    static forkJoin4(A, B, C, D, T, streamA, streamB, streamC, streamD, combiner) {
      return fork_join.ForkJoinStream.combine4(A, B, C, D, T, streamA, streamB, streamC, streamD, combiner);
    }
    static forkJoin5(A, B, C, D, E, T, streamA, streamB, streamC, streamD, streamE, combiner) {
      return fork_join.ForkJoinStream.combine5(A, B, C, D, E, T, streamA, streamB, streamC, streamD, streamE, combiner);
    }
    static forkJoin6(A, B, C, D, E, F, T, streamA, streamB, streamC, streamD, streamE, streamF, combiner) {
      return fork_join.ForkJoinStream.combine6(A, B, C, D, E, F, T, streamA, streamB, streamC, streamD, streamE, streamF, combiner);
    }
    static forkJoin7(A, B, C, D, E, F, G, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, combiner) {
      return fork_join.ForkJoinStream.combine7(A, B, C, D, E, F, G, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, combiner);
    }
    static forkJoin8(A, B, C, D, E, F, G, H, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, combiner) {
      return fork_join.ForkJoinStream.combine8(A, B, C, D, E, F, G, H, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, combiner);
    }
    static forkJoin9(A, B, C, D, E, F, G, H, I, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, combiner) {
      return fork_join.ForkJoinStream.combine9(A, B, C, D, E, F, G, H, I, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, combiner);
    }
    static fromCallable(T, callable, opts) {
      let reusable = opts && 'reusable' in opts ? opts.reusable : false;
      return new (from_callable.FromCallableStream$(T)).new(callable, {reusable: reusable});
    }
    static merge(T, streams) {
      return new (merge.MergeStream$(T)).new(streams);
    }
    static never(T) {
      return new (never.NeverStream$(T)).new();
    }
    static race(T, streams) {
      return new (race.RaceStream$(T)).new(streams);
    }
    static range(startInclusive, endInclusive) {
      return new range.RangeStream.new(startInclusive, endInclusive);
    }
    static repeat(T, streamFactory, count = null) {
      return new (repeat.RepeatStream$(T)).new(streamFactory, count);
    }
    static retry(T, streamFactory, count = null) {
      return new (retry.RetryStream$(T)).new(streamFactory, count);
    }
    static retryWhen(T, streamFactory, retryWhenFactory) {
      return new (retry_when.RetryWhenStream$(T)).new(streamFactory, retryWhenFactory);
    }
    static sequenceEqual(A, B, stream, other, opts) {
      let equals = opts && 'equals' in opts ? opts.equals : null;
      let errorEquals = opts && 'errorEquals' in opts ? opts.errorEquals : null;
      return new (sequence_equal.SequenceEqualStream$(A, B)).new(stream, other, {dataEquals: equals, errorEquals: errorEquals});
    }
    static switchLatest(T, streams) {
      return new (switch_latest.SwitchLatestStream$(T)).new(streams);
    }
    static timer(T, value, duration) {
      return new (timer.TimerStream$(T)).new(value, duration);
    }
    static using(T, R, resourceFactory, streamFactory, disposer) {
      return new (using.UsingStream$(T, R)).new(resourceFactory, streamFactory, disposer);
    }
    static zip2(A, B, T, streamA, streamB, zipper) {
      return zip.ZipStream.zip2(A, B, T, streamA, streamB, zipper);
    }
    static zip(T, R, streams, zipper) {
      return new (zip.ZipStream$(T, R)).new(streams, zipper);
    }
    static zipList(T, streams) {
      return zip.ZipStream.list(T, streams);
    }
    static zip3(A, B, C, T, streamA, streamB, streamC, zipper) {
      return zip.ZipStream.zip3(A, B, C, T, streamA, streamB, streamC, zipper);
    }
    static zip4(A, B, C, D, T, streamA, streamB, streamC, streamD, zipper) {
      return zip.ZipStream.zip4(A, B, C, D, T, streamA, streamB, streamC, streamD, zipper);
    }
    static zip5(A, B, C, D, E, T, streamA, streamB, streamC, streamD, streamE, zipper) {
      return zip.ZipStream.zip5(A, B, C, D, E, T, streamA, streamB, streamC, streamD, streamE, zipper);
    }
    static zip6(A, B, C, D, E, F, T, streamA, streamB, streamC, streamD, streamE, streamF, zipper) {
      return zip.ZipStream.zip6(A, B, C, D, E, F, T, streamA, streamB, streamC, streamD, streamE, streamF, zipper);
    }
    static zip7(A, B, C, D, E, F, G, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, zipper) {
      return zip.ZipStream.zip7(A, B, C, D, E, F, G, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, zipper);
    }
    static zip8(A, B, C, D, E, F, G, H, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, zipper) {
      return zip.ZipStream.zip8(A, B, C, D, E, F, G, H, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, zipper);
    }
    static zip9(A, B, C, D, E, F, G, H, I, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, zipper) {
      return zip.ZipStream.zip9(A, B, C, D, E, F, G, H, I, T, streamA, streamB, streamC, streamD, streamE, streamF, streamG, streamH, streamI, zipper);
    }
  };
  (rx.Rx.new = function() {
    ;
  }).prototype = rx.Rx.prototype;
  dart.addTypeTests(rx.Rx);
  dart.addTypeCaches(rx.Rx);
  dart.setStaticMethodSignature(rx.Rx, () => ['combineLatest', 'combineLatestList', 'combineLatest2', 'combineLatest3', 'combineLatest4', 'combineLatest5', 'combineLatest6', 'combineLatest7', 'combineLatest8', 'combineLatest9', 'concat', 'concatEager', 'defer', 'forkJoin', 'forkJoinList', 'forkJoin2', 'forkJoin3', 'forkJoin4', 'forkJoin5', 'forkJoin6', 'forkJoin7', 'forkJoin8', 'forkJoin9', 'fromCallable', 'merge', 'never', 'race', 'range', 'repeat', 'retry', 'retryWhen', 'sequenceEqual', 'switchLatest', 'timer', 'using', 'zip2', 'zip', 'zipList', 'zip3', 'zip4', 'zip5', 'zip6', 'zip7', 'zip8', 'zip9']);
  dart.setLibraryUri(rx.Rx, I[4]);
  dart.trackLibraries("packages/rxdart/src/subjects/replay_subject.dart", {
    "package:rxdart/src/subjects/replay_subject.dart": replay_subject,
    "package:rxdart/src/subjects/behavior_subject.dart": behavior_subject,
    "package:rxdart/subjects.dart": subjects,
    "package:rxdart/src/streams/connectable_stream.dart": connectable_stream,
    "package:rxdart/streams.dart": streams,
    "package:rxdart/src/rx.dart": rx
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["replay_subject.dart","behavior_subject.dart","../streams/connectable_stream.dart","../rx.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../packages/rxdart/src/subjects/replay_subject.dart.lib.js"}');
  // Exports:
  return {
    src__subjects__replay_subject: replay_subject,
    src__subjects__behavior_subject: behavior_subject,
    subjects: subjects,
    src__streams__connectable_stream: connectable_stream,
    streams: streams,
    src__rx: rx
  };
}));

//# sourceMappingURL=replay_subject.dart.lib.js.map
