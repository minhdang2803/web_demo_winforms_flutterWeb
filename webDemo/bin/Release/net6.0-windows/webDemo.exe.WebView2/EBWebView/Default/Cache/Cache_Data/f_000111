define(['dart_sdk', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/widgets/title.dart', 'packages/flutter/src/painting/border_radius.dart', 'packages/flutter/src/painting/borders.dart', 'packages/flutter/src/material/icon_button.dart', 'packages/flutter/src/material/material_state.dart', 'packages/flutter/src/painting/placeholder_span.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/painting/rounded_rectangle_border.dart', 'packages/flutter/src/services/mouse_cursor.dart', 'packages/flutter/src/material/constants.dart', 'packages/flutter/src/painting/alignment.dart', 'packages/flutter/src/rendering/flex.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/painting/colors.dart', 'packages/flutter/src/rendering/box.dart', 'packages/flutter/src/rendering/layout_helper.dart', 'packages/flutter/src/rendering/shifted_box.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/painting/matrix_utils.dart'], (function load__packages__flutter__src__material__toggle_buttons_dart(dart_sdk, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__widgets__title$46dart, packages__flutter__src__painting__border_radius$46dart, packages__flutter__src__painting__borders$46dart, packages__flutter__src__material__icon_button$46dart, packages__flutter__src__material__material_state$46dart, packages__flutter__src__painting__placeholder_span$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__painting__rounded_rectangle_border$46dart, packages__flutter__src__services__mouse_cursor$46dart, packages__flutter__src__material__constants$46dart, packages__flutter__src__painting__alignment$46dart, packages__flutter__src__rendering__flex$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__painting__colors$46dart, packages__flutter__src__rendering__box$46dart, packages__flutter__src__rendering__layout_helper$46dart, packages__flutter__src__rendering__shifted_box$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__painting__matrix_utils$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const collection = dart_sdk.collection;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const widget_inspector = packages__flutter__src__widgets__title$46dart.src__widgets__widget_inspector;
  const focus_manager = packages__flutter__src__widgets__title$46dart.src__widgets__focus_manager;
  const basic = packages__flutter__src__widgets__title$46dart.src__widgets__basic;
  const framework = packages__flutter__src__widgets__title$46dart.src__widgets__framework;
  const border_radius = packages__flutter__src__painting__border_radius$46dart.src__painting__border_radius;
  const borders = packages__flutter__src__painting__borders$46dart.src__painting__borders;
  const theme$ = packages__flutter__src__material__icon_button$46dart.src__material__theme;
  const toggle_buttons_theme = packages__flutter__src__material__icon_button$46dart.src__material__toggle_buttons_theme;
  const theme_data = packages__flutter__src__material__icon_button$46dart.src__material__theme_data;
  const text_button = packages__flutter__src__material__icon_button$46dart.src__material__text_button;
  const button_style = packages__flutter__src__material__icon_button$46dart.src__material__button_style;
  const ink_ripple = packages__flutter__src__material__icon_button$46dart.src__material__ink_ripple;
  const color_scheme = packages__flutter__src__material__icon_button$46dart.src__material__color_scheme;
  const material_state = packages__flutter__src__material__material_state$46dart.src__material__material_state;
  const text_style = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_style;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const rounded_rectangle_border = packages__flutter__src__painting__rounded_rectangle_border$46dart.src__painting__rounded_rectangle_border;
  const mouse_cursor = packages__flutter__src__services__mouse_cursor$46dart.src__services__mouse_cursor;
  const constants = packages__flutter__src__material__constants$46dart.src__material__constants;
  const alignment = packages__flutter__src__painting__alignment$46dart.src__painting__alignment;
  const flex = packages__flutter__src__rendering__flex$46dart.src__rendering__flex;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const colors = packages__flutter__src__painting__colors$46dart.src__painting__colors;
  const box = packages__flutter__src__rendering__box$46dart.src__rendering__box;
  const layout_helper = packages__flutter__src__rendering__layout_helper$46dart.src__rendering__layout_helper;
  const shifted_box = packages__flutter__src__rendering__shifted_box$46dart.src__rendering__shifted_box;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const matrix_utils = packages__flutter__src__painting__matrix_utils$46dart.src__painting__matrix_utils;
  var toggle_buttons = Object.create(dart.library);
  var $length = dartx.length;
  var $_get = dartx._get;
  var $any = dartx.any;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    boolTobool: () => (T.boolTobool = dart.constFn(dart.fnType(core.bool, [core.bool])))(),
    FocusNodeTobool: () => (T.FocusNodeTobool = dart.constFn(dart.fnType(core.bool, [focus_manager.FocusNode])))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    ListOfWidget: () => (T.ListOfWidget = dart.constFn(core.List$(framework.Widget)))(),
    LinkedHashSetOfMaterialState: () => (T.LinkedHashSetOfMaterialState = dart.constFn(collection.LinkedHashSet$(material_state.MaterialState)))(),
    ColorN: () => (T.ColorN = dart.constFn(dart.nullable(ui.Color)))(),
    MaterialStatePropertyAllOfColorN: () => (T.MaterialStatePropertyAllOfColorN = dart.constFn(material_state.MaterialStatePropertyAll$(T.ColorN())))(),
    MaterialStatePropertyAllOfdouble: () => (T.MaterialStatePropertyAllOfdouble = dart.constFn(material_state.MaterialStatePropertyAll$(core.double)))(),
    TextStyleN: () => (T.TextStyleN = dart.constFn(dart.nullable(text_style.TextStyle)))(),
    MaterialStatePropertyAllOfTextStyleN: () => (T.MaterialStatePropertyAllOfTextStyleN = dart.constFn(material_state.MaterialStatePropertyAll$(T.TextStyleN())))(),
    MaterialStatePropertyAllOfEdgeInsetsGeometry: () => (T.MaterialStatePropertyAllOfEdgeInsetsGeometry = dart.constFn(material_state.MaterialStatePropertyAll$(edge_insets.EdgeInsetsGeometry)))(),
    SizeN: () => (T.SizeN = dart.constFn(dart.nullable(ui.Size)))(),
    MaterialStatePropertyAllOfSizeN: () => (T.MaterialStatePropertyAllOfSizeN = dart.constFn(material_state.MaterialStatePropertyAll$(T.SizeN())))(),
    MaterialStatePropertyAllOfOutlinedBorder: () => (T.MaterialStatePropertyAllOfOutlinedBorder = dart.constFn(material_state.MaterialStatePropertyAll$(borders.OutlinedBorder)))(),
    MouseCursorN: () => (T.MouseCursorN = dart.constFn(dart.nullable(mouse_cursor.MouseCursor)))(),
    MaterialStatePropertyAllOfMouseCursorN: () => (T.MaterialStatePropertyAllOfMouseCursorN = dart.constFn(material_state.MaterialStatePropertyAll$(T.MouseCursorN())))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    intToMergeSemantics: () => (T.intToMergeSemantics = dart.constFn(dart.fnType(basic.MergeSemantics, [core.int])))(),
    DiagnosticsPropertyOfBorderRadius: () => (T.DiagnosticsPropertyOfBorderRadius = dart.constFn(diagnostics.DiagnosticsProperty$(border_radius.BorderRadius)))(),
    DiagnosticsPropertyOfAxis: () => (T.DiagnosticsPropertyOfAxis = dart.constFn(diagnostics.DiagnosticsProperty$(basic_types.Axis)))(),
    DiagnosticsPropertyOfVerticalDirection: () => (T.DiagnosticsPropertyOfVerticalDirection = dart.constFn(diagnostics.DiagnosticsProperty$(basic_types.VerticalDirection)))(),
    MaterialStatePropertyOfColor: () => (T.MaterialStatePropertyOfColor = dart.constFn(material_state.MaterialStateProperty$(ui.Color)))(),
    RenderBoxAndBoxConstraintsToSize: () => (T.RenderBoxAndBoxConstraintsToSize = dart.constFn(dart.fnType(ui.Size, [box.RenderBox, box.BoxConstraints])))(),
    BoxHitTestResultAndOffsetTobool: () => (T.BoxHitTestResultAndOffsetTobool = dart.constFn(dart.fnType(core.bool, [box.BoxHitTestResult, ui.Offset])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_Enum__name]: "horizontal",
        [_Enum_index]: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: basic_types.VerticalDirection.prototype,
        [_Enum__name]: "down",
        [_Enum_index]: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "ToggleButtons",
        [_Location_column]: 9,
        [_Location_line]: 176,
        [_Location_file]: "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/material/toggle_buttons.dart"
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 48,
        [OffsetBase__dx]: 48
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 48,
        [OffsetBase__dx]: 0
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 48
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: theme_data.MaterialTapTargetSize.prototype,
        [_Enum__name]: "padded",
        [_Enum_index]: 0
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: theme_data.MaterialTapTargetSize.prototype,
        [_Enum__name]: "shrinkWrap",
        [_Enum_index]: 1
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: T.MaterialStatePropertyAllOfdouble().prototype,
        [MaterialStatePropertyAll_value]: 0
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 0,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 0
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: T.MaterialStatePropertyAllOfEdgeInsetsGeometry().prototype,
        [MaterialStatePropertyAll_value]: C[10] || CT.C10
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: borders.StrokeAlign.prototype,
        [_Enum__name]: "inside",
        [_Enum_index]: 0
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: borders.BorderStyle.prototype,
        [_Enum__name]: "none",
        [_Enum_index]: 0
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080.0
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: borders.BorderSide.prototype,
        [BorderSide_strokeAlign]: C[14] || CT.C14,
        [BorderSide_style]: C[15] || CT.C15,
        [BorderSide_width]: 0,
        [BorderSide_color]: C[16] || CT.C16
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: ui.Radius.prototype,
        [Radius_y]: 0,
        [Radius_x]: 0
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: border_radius.BorderRadius.prototype,
        [BorderRadius_bottomRight]: C[18] || CT.C18,
        [BorderRadius_bottomLeft]: C[18] || CT.C18,
        [BorderRadius_topRight]: C[18] || CT.C18,
        [BorderRadius_topLeft]: C[18] || CT.C18
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: rounded_rectangle_border.RoundedRectangleBorder.prototype,
        [OutlinedBorder_side]: C[13] || CT.C13,
        [RoundedRectangleBorder_borderRadius]: C[17] || CT.C17
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: T.MaterialStatePropertyAllOfOutlinedBorder().prototype,
        [MaterialStatePropertyAll_value]: C[12] || CT.C12
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "TextButton",
        [_Location_column]: 18,
        [_Location_line]: 747,
        [_Location_file]: "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/material/toggle_buttons.dart"
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "ClipRRect",
        [_Location_column]: 16,
        [_Location_line]: 745,
        [_Location_file]: "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/material/toggle_buttons.dart"
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "_SelectToggleButton",
        [_Location_column]: 23,
        [_Location_line]: 736,
        [_Location_file]: "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/material/toggle_buttons.dart"
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "Center",
        [_Location_column]: 18,
        [_Location_line]: 787,
        [_Location_file]: "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/material/toggle_buttons.dart"
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "_InputPadding",
        [_Location_column]: 18,
        [_Location_line]: 795,
        [_Location_file]: "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/material/toggle_buttons.dart"
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "Semantics",
        [_Location_column]: 16,
        [_Location_line]: 791,
        [_Location_file]: "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/material/toggle_buttons.dart"
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "MergeSemantics",
        [_Location_column]: 14,
        [_Location_line]: 790,
        [_Location_file]: "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/material/toggle_buttons.dart"
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "Column",
        [_Location_column]: 16,
        [_Location_line]: 806,
        [_Location_file]: "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/material/toggle_buttons.dart"
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "IntrinsicWidth",
        [_Location_column]: 14,
        [_Location_line]: 805,
        [_Location_file]: "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/material/toggle_buttons.dart"
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "Row",
        [_Location_column]: 14,
        [_Location_line]: 816,
        [_Location_file]: "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/material/toggle_buttons.dart"
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "IntrinsicHeight",
        [_Location_column]: 12,
        [_Location_line]: 815,
        [_Location_file]: "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/material/toggle_buttons.dart"
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "_SelectToggleButton",
        [_Location_column]: 9,
        [_Location_line]: 944,
        [_Location_file]: "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/material/toggle_buttons.dart"
      });
    },
    get C31() {
      return C[31] = dart.fn(layout_helper.ChildLayoutHelper.dryLayoutChild, T.RenderBoxAndBoxConstraintsToSize());
    },
    get C32() {
      return C[32] = dart.fn(layout_helper.ChildLayoutHelper.layoutChild, T.RenderBoxAndBoxConstraintsToSize());
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_Enum__name]: "ltr",
        [_Enum_index]: 1
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_Enum__name]: "rtl",
        [_Enum_index]: 0
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: basic_types.VerticalDirection.prototype,
        [_Enum__name]: "up",
        [_Enum_index]: 0
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "_InputPadding",
        [_Location_column]: 9,
        [_Location_line]: 1505,
        [_Location_file]: "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/material/toggle_buttons.dart"
      });
    }
  }, false);
  var C = Array(37).fill(void 0);
  var I = [
    "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/material/toggle_buttons.dart",
    "package:flutter/src/material/toggle_buttons.dart"
  ];
  var children$ = dart.privateName(toggle_buttons, "ToggleButtons.children");
  var isSelected$ = dart.privateName(toggle_buttons, "ToggleButtons.isSelected");
  var onPressed$ = dart.privateName(toggle_buttons, "ToggleButtons.onPressed");
  var mouseCursor$ = dart.privateName(toggle_buttons, "ToggleButtons.mouseCursor");
  var tapTargetSize$ = dart.privateName(toggle_buttons, "ToggleButtons.tapTargetSize");
  var textStyle$ = dart.privateName(toggle_buttons, "ToggleButtons.textStyle");
  var constraints$ = dart.privateName(toggle_buttons, "ToggleButtons.constraints");
  var color$ = dart.privateName(toggle_buttons, "ToggleButtons.color");
  var selectedColor$ = dart.privateName(toggle_buttons, "ToggleButtons.selectedColor");
  var disabledColor$ = dart.privateName(toggle_buttons, "ToggleButtons.disabledColor");
  var fillColor$ = dart.privateName(toggle_buttons, "ToggleButtons.fillColor");
  var focusColor$ = dart.privateName(toggle_buttons, "ToggleButtons.focusColor");
  var highlightColor$ = dart.privateName(toggle_buttons, "ToggleButtons.highlightColor");
  var splashColor$ = dart.privateName(toggle_buttons, "ToggleButtons.splashColor");
  var hoverColor$ = dart.privateName(toggle_buttons, "ToggleButtons.hoverColor");
  var focusNodes$ = dart.privateName(toggle_buttons, "ToggleButtons.focusNodes");
  var renderBorder$ = dart.privateName(toggle_buttons, "ToggleButtons.renderBorder");
  var borderColor$ = dart.privateName(toggle_buttons, "ToggleButtons.borderColor");
  var selectedBorderColor$ = dart.privateName(toggle_buttons, "ToggleButtons.selectedBorderColor");
  var disabledBorderColor$ = dart.privateName(toggle_buttons, "ToggleButtons.disabledBorderColor");
  var borderWidth$ = dart.privateName(toggle_buttons, "ToggleButtons.borderWidth");
  var borderRadius$ = dart.privateName(toggle_buttons, "ToggleButtons.borderRadius");
  var direction$ = dart.privateName(toggle_buttons, "ToggleButtons.direction");
  var verticalDirection$ = dart.privateName(toggle_buttons, "ToggleButtons.verticalDirection");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  var _isFirstButton$ = dart.privateName(toggle_buttons, "_isFirstButton");
  var _isLastButton$ = dart.privateName(toggle_buttons, "_isLastButton");
  var _getEdgeBorderRadius = dart.privateName(toggle_buttons, "_getEdgeBorderRadius");
  var _getClipBorderRadius = dart.privateName(toggle_buttons, "_getClipBorderRadius");
  var _getLeadingBorderSide = dart.privateName(toggle_buttons, "_getLeadingBorderSide");
  var _getBorderSide = dart.privateName(toggle_buttons, "_getBorderSide");
  var _getTrailingBorderSide = dart.privateName(toggle_buttons, "_getTrailingBorderSide");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var MaterialStatePropertyAll_value = dart.privateName(material_state, "MaterialStatePropertyAll.value");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  var BorderSide_strokeAlign = dart.privateName(borders, "BorderSide.strokeAlign");
  var BorderSide_style = dart.privateName(borders, "BorderSide.style");
  var BorderSide_width = dart.privateName(borders, "BorderSide.width");
  var Color_value = dart.privateName(ui, "Color.value");
  var BorderSide_color = dart.privateName(borders, "BorderSide.color");
  var OutlinedBorder_side = dart.privateName(borders, "OutlinedBorder.side");
  var Radius_y = dart.privateName(ui, "Radius.y");
  var Radius_x = dart.privateName(ui, "Radius.x");
  var BorderRadius_bottomRight = dart.privateName(border_radius, "BorderRadius.bottomRight");
  var BorderRadius_bottomLeft = dart.privateName(border_radius, "BorderRadius.bottomLeft");
  var BorderRadius_topRight = dart.privateName(border_radius, "BorderRadius.topRight");
  var BorderRadius_topLeft = dart.privateName(border_radius, "BorderRadius.topLeft");
  var RoundedRectangleBorder_borderRadius = dart.privateName(rounded_rectangle_border, "RoundedRectangleBorder.borderRadius");
  toggle_buttons.ToggleButtons = class ToggleButtons extends framework.StatelessWidget {
    get children() {
      return this[children$];
    }
    set children(value) {
      super.children = value;
    }
    get isSelected() {
      return this[isSelected$];
    }
    set isSelected(value) {
      super.isSelected = value;
    }
    get onPressed() {
      return this[onPressed$];
    }
    set onPressed(value) {
      super.onPressed = value;
    }
    get mouseCursor() {
      return this[mouseCursor$];
    }
    set mouseCursor(value) {
      super.mouseCursor = value;
    }
    get tapTargetSize() {
      return this[tapTargetSize$];
    }
    set tapTargetSize(value) {
      super.tapTargetSize = value;
    }
    get textStyle() {
      return this[textStyle$];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get constraints() {
      return this[constraints$];
    }
    set constraints(value) {
      super.constraints = value;
    }
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get selectedColor() {
      return this[selectedColor$];
    }
    set selectedColor(value) {
      super.selectedColor = value;
    }
    get disabledColor() {
      return this[disabledColor$];
    }
    set disabledColor(value) {
      super.disabledColor = value;
    }
    get fillColor() {
      return this[fillColor$];
    }
    set fillColor(value) {
      super.fillColor = value;
    }
    get focusColor() {
      return this[focusColor$];
    }
    set focusColor(value) {
      super.focusColor = value;
    }
    get highlightColor() {
      return this[highlightColor$];
    }
    set highlightColor(value) {
      super.highlightColor = value;
    }
    get splashColor() {
      return this[splashColor$];
    }
    set splashColor(value) {
      super.splashColor = value;
    }
    get hoverColor() {
      return this[hoverColor$];
    }
    set hoverColor(value) {
      super.hoverColor = value;
    }
    get focusNodes() {
      return this[focusNodes$];
    }
    set focusNodes(value) {
      super.focusNodes = value;
    }
    get renderBorder() {
      return this[renderBorder$];
    }
    set renderBorder(value) {
      super.renderBorder = value;
    }
    get borderColor() {
      return this[borderColor$];
    }
    set borderColor(value) {
      super.borderColor = value;
    }
    get selectedBorderColor() {
      return this[selectedBorderColor$];
    }
    set selectedBorderColor(value) {
      super.selectedBorderColor = value;
    }
    get disabledBorderColor() {
      return this[disabledBorderColor$];
    }
    set disabledBorderColor(value) {
      super.disabledBorderColor = value;
    }
    get borderWidth() {
      return this[borderWidth$];
    }
    set borderWidth(value) {
      super.borderWidth = value;
    }
    get borderRadius() {
      return this[borderRadius$];
    }
    set borderRadius(value) {
      super.borderRadius = value;
    }
    get direction() {
      return this[direction$];
    }
    set direction(value) {
      super.direction = value;
    }
    get verticalDirection() {
      return this[verticalDirection$];
    }
    set verticalDirection(value) {
      super.verticalDirection = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let children = opts && 'children' in opts ? opts.children : null;
      let isSelected = opts && 'isSelected' in opts ? opts.isSelected : null;
      let onPressed = opts && 'onPressed' in opts ? opts.onPressed : null;
      let mouseCursor = opts && 'mouseCursor' in opts ? opts.mouseCursor : null;
      let tapTargetSize = opts && 'tapTargetSize' in opts ? opts.tapTargetSize : null;
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let constraints = opts && 'constraints' in opts ? opts.constraints : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let selectedColor = opts && 'selectedColor' in opts ? opts.selectedColor : null;
      let disabledColor = opts && 'disabledColor' in opts ? opts.disabledColor : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let focusColor = opts && 'focusColor' in opts ? opts.focusColor : null;
      let highlightColor = opts && 'highlightColor' in opts ? opts.highlightColor : null;
      let hoverColor = opts && 'hoverColor' in opts ? opts.hoverColor : null;
      let splashColor = opts && 'splashColor' in opts ? opts.splashColor : null;
      let focusNodes = opts && 'focusNodes' in opts ? opts.focusNodes : null;
      let renderBorder = opts && 'renderBorder' in opts ? opts.renderBorder : true;
      let borderColor = opts && 'borderColor' in opts ? opts.borderColor : null;
      let selectedBorderColor = opts && 'selectedBorderColor' in opts ? opts.selectedBorderColor : null;
      let disabledBorderColor = opts && 'disabledBorderColor' in opts ? opts.disabledBorderColor : null;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
      let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : null;
      let direction = opts && 'direction' in opts ? opts.direction : C[0] || CT.C0;
      let verticalDirection = opts && 'verticalDirection' in opts ? opts.verticalDirection : C[1] || CT.C1;
      return new toggle_buttons.ToggleButtons.new({key: key, children: children, isSelected: isSelected, onPressed: onPressed, mouseCursor: mouseCursor, tapTargetSize: tapTargetSize, textStyle: textStyle, constraints: constraints, color: color, selectedColor: selectedColor, disabledColor: disabledColor, fillColor: fillColor, focusColor: focusColor, highlightColor: highlightColor, hoverColor: hoverColor, splashColor: splashColor, focusNodes: focusNodes, renderBorder: renderBorder, borderColor: borderColor, selectedBorderColor: selectedBorderColor, disabledBorderColor: disabledBorderColor, borderRadius: borderRadius, borderWidth: borderWidth, direction: direction, verticalDirection: verticalDirection, $creationLocationd_0dea112b090073317d4: C[2] || CT.C2});
    }
    [_isFirstButton$](index, length, textDirection) {
      return index === 0 && (this.direction === basic_types.Axis.horizontal && textDirection === ui.TextDirection.ltr || this.direction === basic_types.Axis.vertical && this.verticalDirection === basic_types.VerticalDirection.down) || index === length - 1 && (this.direction === basic_types.Axis.horizontal && textDirection === ui.TextDirection.rtl || this.direction === basic_types.Axis.vertical && this.verticalDirection === basic_types.VerticalDirection.up);
    }
    [_isLastButton$](index, length, textDirection) {
      return index === length - 1 && (this.direction === basic_types.Axis.horizontal && textDirection === ui.TextDirection.ltr || this.direction === basic_types.Axis.vertical && this.verticalDirection === basic_types.VerticalDirection.down) || index === 0 && (this.direction === basic_types.Axis.horizontal && textDirection === ui.TextDirection.rtl || this.direction === basic_types.Axis.vertical && this.verticalDirection === basic_types.VerticalDirection.up);
    }
    [_getEdgeBorderRadius](index, length, textDirection, toggleButtonsTheme) {
      let t0, t0$;
      let resultingBorderRadius = (t0$ = (t0 = this.borderRadius, t0 == null ? toggleButtonsTheme.borderRadius : t0), t0$ == null ? border_radius.BorderRadius.zero : t0$);
      if (length === 1) {
        return resultingBorderRadius;
      } else if (this.direction === basic_types.Axis.horizontal) {
        if (this[_isFirstButton$](index, length, textDirection)) {
          return new border_radius.BorderRadius.only({topLeft: resultingBorderRadius.topLeft, bottomLeft: resultingBorderRadius.bottomLeft});
        } else if (this[_isLastButton$](index, length, textDirection)) {
          return new border_radius.BorderRadius.only({topRight: resultingBorderRadius.topRight, bottomRight: resultingBorderRadius.bottomRight});
        }
      } else {
        if (this[_isFirstButton$](index, length, textDirection)) {
          return new border_radius.BorderRadius.only({topLeft: resultingBorderRadius.topLeft, topRight: resultingBorderRadius.topRight});
        } else if (this[_isLastButton$](index, length, textDirection)) {
          return new border_radius.BorderRadius.only({bottomLeft: resultingBorderRadius.bottomLeft, bottomRight: resultingBorderRadius.bottomRight});
        }
      }
      return border_radius.BorderRadius.zero;
    }
    [_getClipBorderRadius](index, length, textDirection, toggleButtonsTheme) {
      let t0, t0$, t0$0, t0$1;
      let resultingBorderRadius = (t0$ = (t0 = this.borderRadius, t0 == null ? toggleButtonsTheme.borderRadius : t0), t0$ == null ? border_radius.BorderRadius.zero : t0$);
      let resultingBorderWidth = (t0$1 = (t0$0 = this.borderWidth, t0$0 == null ? toggleButtonsTheme.borderWidth : t0$0), t0$1 == null ? 1 : t0$1);
      if (length === 1) {
        return new border_radius.BorderRadius.only({topLeft: resultingBorderRadius.topLeft['-'](new ui.Radius.circular(resultingBorderWidth / 2.0)), bottomLeft: resultingBorderRadius.bottomLeft['-'](new ui.Radius.circular(resultingBorderWidth / 2.0)), topRight: resultingBorderRadius.topRight['-'](new ui.Radius.circular(resultingBorderWidth / 2.0)), bottomRight: resultingBorderRadius.bottomRight['-'](new ui.Radius.circular(resultingBorderWidth / 2.0))});
      } else if (this.direction === basic_types.Axis.horizontal) {
        if (this[_isFirstButton$](index, length, textDirection)) {
          return new border_radius.BorderRadius.only({topLeft: resultingBorderRadius.topLeft['-'](new ui.Radius.circular(resultingBorderWidth / 2.0)), bottomLeft: resultingBorderRadius.bottomLeft['-'](new ui.Radius.circular(resultingBorderWidth / 2.0))});
        } else if (this[_isLastButton$](index, length, textDirection)) {
          return new border_radius.BorderRadius.only({topRight: resultingBorderRadius.topRight['-'](new ui.Radius.circular(resultingBorderWidth / 2.0)), bottomRight: resultingBorderRadius.bottomRight['-'](new ui.Radius.circular(resultingBorderWidth / 2.0))});
        }
      } else {
        if (this[_isFirstButton$](index, length, textDirection)) {
          return new border_radius.BorderRadius.only({topLeft: resultingBorderRadius.topLeft['-'](new ui.Radius.circular(resultingBorderWidth / 2.0)), topRight: resultingBorderRadius.topRight['-'](new ui.Radius.circular(resultingBorderWidth / 2.0))});
        } else if (this[_isLastButton$](index, length, textDirection)) {
          return new border_radius.BorderRadius.only({bottomLeft: resultingBorderRadius.bottomLeft['-'](new ui.Radius.circular(resultingBorderWidth / 2.0)), bottomRight: resultingBorderRadius.bottomRight['-'](new ui.Radius.circular(resultingBorderWidth / 2.0))});
        }
      }
      return border_radius.BorderRadius.zero;
    }
    [_getLeadingBorderSide](index, theme, toggleButtonsTheme) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5;
      if (!this.renderBorder) {
        return borders.BorderSide.none;
      }
      let resultingBorderWidth = (t0$ = (t0 = this.borderWidth, t0 == null ? toggleButtonsTheme.borderWidth : t0), t0$ == null ? 1 : t0$);
      if (this.onPressed != null && (this.isSelected[$_get](index) || index !== 0 && this.isSelected[$_get](index - 1))) {
        return new borders.BorderSide.new({color: (t0$1 = (t0$0 = this.selectedBorderColor, t0$0 == null ? toggleButtonsTheme.selectedBorderColor : t0$0), t0$1 == null ? theme.colorScheme.onSurface.withOpacity(0.12) : t0$1), width: resultingBorderWidth});
      } else if (this.onPressed != null && !this.isSelected[$_get](index)) {
        return new borders.BorderSide.new({color: (t0$3 = (t0$2 = this.borderColor, t0$2 == null ? toggleButtonsTheme.borderColor : t0$2), t0$3 == null ? theme.colorScheme.onSurface.withOpacity(0.12) : t0$3), width: resultingBorderWidth});
      } else {
        return new borders.BorderSide.new({color: (t0$5 = (t0$4 = this.disabledBorderColor, t0$4 == null ? toggleButtonsTheme.disabledBorderColor : t0$4), t0$5 == null ? theme.colorScheme.onSurface.withOpacity(0.12) : t0$5), width: resultingBorderWidth});
      }
    }
    [_getBorderSide](index, theme, toggleButtonsTheme) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5;
      if (!this.renderBorder) {
        return borders.BorderSide.none;
      }
      let resultingBorderWidth = (t0$ = (t0 = this.borderWidth, t0 == null ? toggleButtonsTheme.borderWidth : t0), t0$ == null ? 1 : t0$);
      if (this.onPressed != null && this.isSelected[$_get](index)) {
        return new borders.BorderSide.new({color: (t0$1 = (t0$0 = this.selectedBorderColor, t0$0 == null ? toggleButtonsTheme.selectedBorderColor : t0$0), t0$1 == null ? theme.colorScheme.onSurface.withOpacity(0.12) : t0$1), width: resultingBorderWidth});
      } else if (this.onPressed != null && !this.isSelected[$_get](index)) {
        return new borders.BorderSide.new({color: (t0$3 = (t0$2 = this.borderColor, t0$2 == null ? toggleButtonsTheme.borderColor : t0$2), t0$3 == null ? theme.colorScheme.onSurface.withOpacity(0.12) : t0$3), width: resultingBorderWidth});
      } else {
        return new borders.BorderSide.new({color: (t0$5 = (t0$4 = this.disabledBorderColor, t0$4 == null ? toggleButtonsTheme.disabledBorderColor : t0$4), t0$5 == null ? theme.colorScheme.onSurface.withOpacity(0.12) : t0$5), width: resultingBorderWidth});
      }
    }
    [_getTrailingBorderSide](index, theme, toggleButtonsTheme) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5;
      if (!this.renderBorder) {
        return borders.BorderSide.none;
      }
      if (index !== this.children[$length] - 1) {
        return borders.BorderSide.none;
      }
      let resultingBorderWidth = (t0$ = (t0 = this.borderWidth, t0 == null ? toggleButtonsTheme.borderWidth : t0), t0$ == null ? 1 : t0$);
      if (this.onPressed != null && this.isSelected[$_get](index)) {
        return new borders.BorderSide.new({color: (t0$1 = (t0$0 = this.selectedBorderColor, t0$0 == null ? toggleButtonsTheme.selectedBorderColor : t0$0), t0$1 == null ? theme.colorScheme.onSurface.withOpacity(0.12) : t0$1), width: resultingBorderWidth});
      } else if (this.onPressed != null && !this.isSelected[$_get](index)) {
        return new borders.BorderSide.new({color: (t0$3 = (t0$2 = this.borderColor, t0$2 == null ? toggleButtonsTheme.borderColor : t0$2), t0$3 == null ? theme.colorScheme.onSurface.withOpacity(0.12) : t0$3), width: resultingBorderWidth});
      } else {
        return new borders.BorderSide.new({color: (t0$5 = (t0$4 = this.disabledBorderColor, t0$4 == null ? toggleButtonsTheme.disabledBorderColor : t0$4), t0$5 == null ? theme.colorScheme.onSurface.withOpacity(0.12) : t0$5), width: resultingBorderWidth});
      }
    }
    build(context) {
      if (!!this.isSelected[$any](dart.fn(val => val === null, T.boolTobool()))) dart.assertFailed("All elements of isSelected must be non-null.\n" + "The current list of isSelected values is as follows:\n" + dart.str(this.isSelected), I[0], 648, 7, "!isSelected.any((bool val) => val == null)");
      if (!(this.focusNodes == null || !dart.nullCheck(this.focusNodes)[$any](dart.fn(val => val === null, T.FocusNodeTobool())))) dart.assertFailed("All elements of focusNodes must be non-null.\n" + "The current list of focus node values is as follows:\n" + dart.str(this.focusNodes), I[0], 654, 7, "focusNodes == null || !focusNodes!.any((FocusNode val) => val == null)");
      if (!dart.fn(() => {
        if (this.focusNodes != null) {
          return dart.nullCheck(this.focusNodes)[$length] === this.children[$length];
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed("focusNodes.length must match children.length.\n" + "There are " + dart.str(dart.nullCheck(this.focusNodes)[$length]) + " focus nodes, while " + "there are " + dart.str(this.children[$length]) + " children.", I[0], 660, 7, "() {\n        if (focusNodes != null) {\n          return focusNodes!.length == children.length;\n        }\n        return true;\n      }()");
      let theme = theme$.Theme.of(context);
      let toggleButtonsTheme = toggle_buttons_theme.ToggleButtonsTheme.of(context);
      let textDirection = basic.Directionality.of(context);
      let buttons = T.ListOfWidget().generate(this.children[$length], dart.fn(index => {
        let t1, t1$, t1$0, t1$1, t1$2, t1$3, t1$4, t1$5, t1$6, t1$7, t1$8, t1$9, t1$10, t1$11, t1$12, t1$13, t1$14;
        let edgeBorderRadius = this[_getEdgeBorderRadius](index, this.children[$length], textDirection, toggleButtonsTheme);
        let clipBorderRadius = this[_getClipBorderRadius](index, this.children[$length], textDirection, toggleButtonsTheme);
        let leadingBorderSide = this[_getLeadingBorderSide](index, theme, toggleButtonsTheme);
        let borderSide = this[_getBorderSide](index, theme, toggleButtonsTheme);
        let trailingBorderSide = this[_getTrailingBorderSide](index, theme, toggleButtonsTheme);
        let states = (() => {
          let t0 = T.LinkedHashSetOfMaterialState().new();
          if (this.isSelected[$_get](index) && this.onPressed != null) t0.add(material_state.MaterialState.selected);
          if (this.onPressed == null) t0.add(material_state.MaterialState.disabled);
          return t0;
        })();
        let effectiveFillColor = (t1$ = new toggle_buttons._ResolveFillColor.new((t1 = this.fillColor, t1 == null ? toggleButtonsTheme.fillColor : t1)).resolve(states), t1$ == null ? new toggle_buttons._DefaultFillColor.new(theme.colorScheme).resolve(states) : t1$);
        let currentColor = null;
        if (this.onPressed != null && this.isSelected[$_get](index)) {
          currentColor = (t1$1 = (t1$0 = this.selectedColor, t1$0 == null ? toggleButtonsTheme.selectedColor : t1$0), t1$1 == null ? theme.colorScheme.primary : t1$1);
        } else if (this.onPressed != null && !this.isSelected[$_get](index)) {
          currentColor = (t1$3 = (t1$2 = this.color, t1$2 == null ? toggleButtonsTheme.color : t1$2), t1$3 == null ? theme.colorScheme.onSurface.withOpacity(0.87) : t1$3);
        } else {
          currentColor = (t1$5 = (t1$4 = this.disabledColor, t1$4 == null ? toggleButtonsTheme.disabledColor : t1$4), t1$5 == null ? theme.colorScheme.onSurface.withOpacity(0.38) : t1$5);
        }
        let currentTextStyle = (t1$7 = (t1$6 = this.textStyle, t1$6 == null ? toggleButtonsTheme.textStyle : t1$6), t1$7 == null ? dart.nullCheck(theme.textTheme.bodyText2) : t1$7);
        let currentConstraints = (t1$8 = this.constraints, t1$8 == null ? toggleButtonsTheme.constraints : t1$8);
        let minimumSize = currentConstraints == null ? C[3] || CT.C3 : new ui.Size.new(currentConstraints.minWidth, currentConstraints.minHeight);
        let maximumSize = currentConstraints == null ? null : new ui.Size.new(currentConstraints.maxWidth, currentConstraints.maxHeight);
        let minPaddingSize = null;
        switch (t1$9 = this.tapTargetSize, t1$9 == null ? theme.materialTapTargetSize : t1$9) {
          case C[6] || CT.C6:
            {
              if (this.direction === basic_types.Axis.horizontal) {
                minPaddingSize = C[4] || CT.C4;
              } else {
                minPaddingSize = C[5] || CT.C5;
              }
              if (!(minPaddingSize.width >= 0.0)) dart.assertFailed(null, I[0], 728, 18, "minPaddingSize.width >= 0.0");
              if (!(minPaddingSize.height >= 0.0)) dart.assertFailed(null, I[0], 729, 18, "minPaddingSize.height >= 0.0");
              break;
            }
          case C[7] || CT.C7:
            {
              minPaddingSize = ui.Size.zero;
              break;
            }
        }
        let button = new toggle_buttons._SelectToggleButton.new({leadingBorderSide: leadingBorderSide, borderSide: borderSide, trailingBorderSide: trailingBorderSide, borderRadius: edgeBorderRadius, isFirstButton: index === 0, isLastButton: index === this.children[$length] - 1, direction: this.direction, verticalDirection: this.verticalDirection, child: new basic.ClipRRect.new({borderRadius: clipBorderRadius, child: new text_button.TextButton.new({focusNode: this.focusNodes != null ? dart.nullCheck(this.focusNodes)[$_get](index) : null, style: new button_style.ButtonStyle.new({backgroundColor: new (T.MaterialStatePropertyAllOfColorN()).new(effectiveFillColor), foregroundColor: new (T.MaterialStatePropertyAllOfColorN()).new(currentColor), overlayColor: new toggle_buttons._ToggleButtonDefaultOverlay.new({selected: this.onPressed != null && this.isSelected[$_get](index), unselected: this.onPressed != null && !this.isSelected[$_get](index), colorScheme: theme.colorScheme, disabledColor: (t1$10 = this.disabledColor, t1$10 == null ? toggleButtonsTheme.disabledColor : t1$10), focusColor: (t1$11 = this.focusColor, t1$11 == null ? toggleButtonsTheme.focusColor : t1$11), highlightColor: (t1$12 = this.highlightColor, t1$12 == null ? toggleButtonsTheme.highlightColor : t1$12), hoverColor: (t1$13 = this.hoverColor, t1$13 == null ? toggleButtonsTheme.hoverColor : t1$13), splashColor: (t1$14 = this.splashColor, t1$14 == null ? toggleButtonsTheme.splashColor : t1$14)}), elevation: C[8] || CT.C8, textStyle: new (T.MaterialStatePropertyAllOfTextStyleN()).new(currentTextStyle.copyWith({color: currentColor})), padding: C[9] || CT.C9, minimumSize: new (T.MaterialStatePropertyAllOfSizeN()).new(minimumSize), maximumSize: new (T.MaterialStatePropertyAllOfSizeN()).new(maximumSize), shape: C[11] || CT.C11, mouseCursor: new (T.MaterialStatePropertyAllOfMouseCursorN()).new(this.mouseCursor), visualDensity: theme_data.VisualDensity.standard, tapTargetSize: theme_data.MaterialTapTargetSize.shrinkWrap, animationDuration: constants.kThemeChangeDuration, enableFeedback: true, alignment: alignment.Alignment.center, splashFactory: ink_ripple.InkRipple.splashFactory}), onPressed: this.onPressed != null ? dart.fn(() => {
                dart.nullCheck(this.onPressed)(index);
              }, T.VoidTovoid()) : null, child: this.children[$_get](index), $creationLocationd_0dea112b090073317d4: C[19] || CT.C19}), $creationLocationd_0dea112b090073317d4: C[20] || CT.C20}), $creationLocationd_0dea112b090073317d4: C[21] || CT.C21});
        if (currentConstraints != null) {
          button = new basic.Center.new({child: button, $creationLocationd_0dea112b090073317d4: C[22] || CT.C22});
        }
        return new basic.MergeSemantics.new({child: new basic.Semantics.new({container: true, toggled: this.isSelected[$_get](index), enabled: this.onPressed != null, child: new toggle_buttons._InputPadding.new({minSize: minPaddingSize, direction: this.direction, child: button, $creationLocationd_0dea112b090073317d4: C[23] || CT.C23}), $creationLocationd_0dea112b090073317d4: C[24] || CT.C24}), $creationLocationd_0dea112b090073317d4: C[25] || CT.C25});
      }, T.intToMergeSemantics()));
      if (this.direction === basic_types.Axis.vertical) {
        return new basic.IntrinsicWidth.new({child: new basic.Column.new({mainAxisSize: flex.MainAxisSize.min, crossAxisAlignment: flex.CrossAxisAlignment.stretch, verticalDirection: this.verticalDirection, children: buttons, $creationLocationd_0dea112b090073317d4: C[26] || CT.C26}), $creationLocationd_0dea112b090073317d4: C[27] || CT.C27});
      }
      return new basic.IntrinsicHeight.new({child: new basic.Row.new({mainAxisSize: flex.MainAxisSize.min, crossAxisAlignment: flex.CrossAxisAlignment.stretch, children: buttons, $creationLocationd_0dea112b090073317d4: C[28] || CT.C28}), $creationLocationd_0dea112b090073317d4: C[29] || CT.C29});
    }
    debugFillProperties(properties) {
      let t1;
      super.debugFillProperties(properties);
      properties.add(new diagnostics.FlagProperty.new("disabled", {value: this.onPressed == null, ifTrue: "Buttons are disabled", ifFalse: "Buttons are enabled"}));
      t1 = this.textStyle;
      t1 == null ? null : t1.debugFillProperties(properties, {prefix: "textStyle."});
      properties.add(new colors.ColorProperty.new("color", this.color, {defaultValue: null}));
      properties.add(new colors.ColorProperty.new("selectedColor", this.selectedColor, {defaultValue: null}));
      properties.add(new colors.ColorProperty.new("disabledColor", this.disabledColor, {defaultValue: null}));
      properties.add(new colors.ColorProperty.new("fillColor", this.fillColor, {defaultValue: null}));
      properties.add(new colors.ColorProperty.new("focusColor", this.focusColor, {defaultValue: null}));
      properties.add(new colors.ColorProperty.new("highlightColor", this.highlightColor, {defaultValue: null}));
      properties.add(new colors.ColorProperty.new("hoverColor", this.hoverColor, {defaultValue: null}));
      properties.add(new colors.ColorProperty.new("splashColor", this.splashColor, {defaultValue: null}));
      properties.add(new colors.ColorProperty.new("borderColor", this.borderColor, {defaultValue: null}));
      properties.add(new colors.ColorProperty.new("selectedBorderColor", this.selectedBorderColor, {defaultValue: null}));
      properties.add(new colors.ColorProperty.new("disabledBorderColor", this.disabledBorderColor, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfBorderRadius()).new("borderRadius", this.borderRadius, {defaultValue: null}));
      properties.add(new diagnostics.DoubleProperty.new("borderWidth", this.borderWidth, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfAxis()).new("direction", this.direction, {defaultValue: basic_types.Axis.horizontal}));
      properties.add(new (T.DiagnosticsPropertyOfVerticalDirection()).new("verticalDirection", this.verticalDirection, {defaultValue: basic_types.VerticalDirection.down}));
    }
  };
  (toggle_buttons.ToggleButtons.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let children = opts && 'children' in opts ? opts.children : null;
    let isSelected = opts && 'isSelected' in opts ? opts.isSelected : null;
    let onPressed = opts && 'onPressed' in opts ? opts.onPressed : null;
    let mouseCursor = opts && 'mouseCursor' in opts ? opts.mouseCursor : null;
    let tapTargetSize = opts && 'tapTargetSize' in opts ? opts.tapTargetSize : null;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let constraints = opts && 'constraints' in opts ? opts.constraints : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let selectedColor = opts && 'selectedColor' in opts ? opts.selectedColor : null;
    let disabledColor = opts && 'disabledColor' in opts ? opts.disabledColor : null;
    let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
    let focusColor = opts && 'focusColor' in opts ? opts.focusColor : null;
    let highlightColor = opts && 'highlightColor' in opts ? opts.highlightColor : null;
    let hoverColor = opts && 'hoverColor' in opts ? opts.hoverColor : null;
    let splashColor = opts && 'splashColor' in opts ? opts.splashColor : null;
    let focusNodes = opts && 'focusNodes' in opts ? opts.focusNodes : null;
    let renderBorder = opts && 'renderBorder' in opts ? opts.renderBorder : true;
    let borderColor = opts && 'borderColor' in opts ? opts.borderColor : null;
    let selectedBorderColor = opts && 'selectedBorderColor' in opts ? opts.selectedBorderColor : null;
    let disabledBorderColor = opts && 'disabledBorderColor' in opts ? opts.disabledBorderColor : null;
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
    let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : null;
    let direction = opts && 'direction' in opts ? opts.direction : C[0] || CT.C0;
    let verticalDirection = opts && 'verticalDirection' in opts ? opts.verticalDirection : C[1] || CT.C1;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[children$] = children;
    this[isSelected$] = isSelected;
    this[onPressed$] = onPressed;
    this[mouseCursor$] = mouseCursor;
    this[tapTargetSize$] = tapTargetSize;
    this[textStyle$] = textStyle;
    this[constraints$] = constraints;
    this[color$] = color;
    this[selectedColor$] = selectedColor;
    this[disabledColor$] = disabledColor;
    this[fillColor$] = fillColor;
    this[focusColor$] = focusColor;
    this[highlightColor$] = highlightColor;
    this[hoverColor$] = hoverColor;
    this[splashColor$] = splashColor;
    this[focusNodes$] = focusNodes;
    this[renderBorder$] = renderBorder;
    this[borderColor$] = borderColor;
    this[selectedBorderColor$] = selectedBorderColor;
    this[disabledBorderColor$] = disabledBorderColor;
    this[borderRadius$] = borderRadius;
    this[borderWidth$] = borderWidth;
    this[direction$] = direction;
    this[verticalDirection$] = verticalDirection;
    if (!(children !== null)) dart.assertFailed(null, I[0], 203, 12, "children != null");
    if (!(isSelected !== null)) dart.assertFailed(null, I[0], 204, 12, "isSelected != null");
    if (!(children[$length] === isSelected[$length])) dart.assertFailed(null, I[0], 205, 12, "children.length == isSelected.length");
    if (!(direction !== null)) dart.assertFailed(null, I[0], 206, 12, "direction != null");
    if (!(direction === basic_types.Axis.horizontal || verticalDirection !== null)) dart.assertFailed(null, I[0], 207, 12, "direction == Axis.horizontal || verticalDirection != null");
    toggle_buttons.ToggleButtons.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = toggle_buttons.ToggleButtons.prototype;
  dart.addTypeTests(toggle_buttons.ToggleButtons);
  dart.addTypeCaches(toggle_buttons.ToggleButtons);
  dart.setMethodSignature(toggle_buttons.ToggleButtons, () => ({
    __proto__: dart.getMethods(toggle_buttons.ToggleButtons.__proto__),
    [_isFirstButton$]: dart.fnType(core.bool, [core.int, core.int, ui.TextDirection]),
    [_isLastButton$]: dart.fnType(core.bool, [core.int, core.int, ui.TextDirection]),
    [_getEdgeBorderRadius]: dart.fnType(border_radius.BorderRadius, [core.int, core.int, ui.TextDirection, toggle_buttons_theme.ToggleButtonsThemeData]),
    [_getClipBorderRadius]: dart.fnType(border_radius.BorderRadius, [core.int, core.int, ui.TextDirection, toggle_buttons_theme.ToggleButtonsThemeData]),
    [_getLeadingBorderSide]: dart.fnType(borders.BorderSide, [core.int, theme_data.ThemeData, toggle_buttons_theme.ToggleButtonsThemeData]),
    [_getBorderSide]: dart.fnType(borders.BorderSide, [core.int, theme_data.ThemeData, toggle_buttons_theme.ToggleButtonsThemeData]),
    [_getTrailingBorderSide]: dart.fnType(borders.BorderSide, [core.int, theme_data.ThemeData, toggle_buttons_theme.ToggleButtonsThemeData]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(toggle_buttons.ToggleButtons, I[1]);
  dart.setFieldSignature(toggle_buttons.ToggleButtons, () => ({
    __proto__: dart.getFields(toggle_buttons.ToggleButtons.__proto__),
    children: dart.finalFieldType(core.List$(framework.Widget)),
    isSelected: dart.finalFieldType(core.List$(core.bool)),
    onPressed: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.int]))),
    mouseCursor: dart.finalFieldType(dart.nullable(mouse_cursor.MouseCursor)),
    tapTargetSize: dart.finalFieldType(dart.nullable(theme_data.MaterialTapTargetSize)),
    textStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    constraints: dart.finalFieldType(dart.nullable(box.BoxConstraints)),
    color: dart.finalFieldType(dart.nullable(ui.Color)),
    selectedColor: dart.finalFieldType(dart.nullable(ui.Color)),
    disabledColor: dart.finalFieldType(dart.nullable(ui.Color)),
    fillColor: dart.finalFieldType(dart.nullable(ui.Color)),
    focusColor: dart.finalFieldType(dart.nullable(ui.Color)),
    highlightColor: dart.finalFieldType(dart.nullable(ui.Color)),
    splashColor: dart.finalFieldType(dart.nullable(ui.Color)),
    hoverColor: dart.finalFieldType(dart.nullable(ui.Color)),
    focusNodes: dart.finalFieldType(dart.nullable(core.List$(focus_manager.FocusNode))),
    renderBorder: dart.finalFieldType(core.bool),
    borderColor: dart.finalFieldType(dart.nullable(ui.Color)),
    selectedBorderColor: dart.finalFieldType(dart.nullable(ui.Color)),
    disabledBorderColor: dart.finalFieldType(dart.nullable(ui.Color)),
    borderWidth: dart.finalFieldType(dart.nullable(core.double)),
    borderRadius: dart.finalFieldType(dart.nullable(border_radius.BorderRadius)),
    direction: dart.finalFieldType(basic_types.Axis),
    verticalDirection: dart.finalFieldType(basic_types.VerticalDirection)
  }));
  dart.setStaticFieldSignature(toggle_buttons.ToggleButtons, () => ['_defaultBorderWidth']);
  dart.defineLazy(toggle_buttons.ToggleButtons, {
    /*toggle_buttons.ToggleButtons._defaultBorderWidth*/get _defaultBorderWidth() {
      return 1;
    }
  }, false);
  const MaterialStateProperty_Diagnosticable$36 = class MaterialStateProperty_Diagnosticable extends material_state.MaterialStateProperty$(dart.nullable(ui.Color)) {};
  (MaterialStateProperty_Diagnosticable$36.new = function() {
  }).prototype = MaterialStateProperty_Diagnosticable$36.prototype;
  dart.applyMixin(MaterialStateProperty_Diagnosticable$36, diagnostics.Diagnosticable);
  toggle_buttons._ResolveFillColor = class _ResolveFillColor extends MaterialStateProperty_Diagnosticable$36 {
    static ['_#new#tearOff'](primary) {
      return new toggle_buttons._ResolveFillColor.new(primary);
    }
    resolve(states) {
      if (T.MaterialStatePropertyOfColor().is(this.primary)) {
        return material_state.MaterialStateProperty.resolveAs(T.ColorN(), this.primary, states);
      }
      return states.contains(material_state.MaterialState.selected) ? this.primary : null;
    }
  };
  (toggle_buttons._ResolveFillColor.new = function(primary) {
    this.primary = primary;
    ;
  }).prototype = toggle_buttons._ResolveFillColor.prototype;
  dart.addTypeTests(toggle_buttons._ResolveFillColor);
  dart.addTypeCaches(toggle_buttons._ResolveFillColor);
  dart.setMethodSignature(toggle_buttons._ResolveFillColor, () => ({
    __proto__: dart.getMethods(toggle_buttons._ResolveFillColor.__proto__),
    resolve: dart.fnType(dart.nullable(ui.Color), [core.Set$(material_state.MaterialState)])
  }));
  dart.setLibraryUri(toggle_buttons._ResolveFillColor, I[1]);
  dart.setFieldSignature(toggle_buttons._ResolveFillColor, () => ({
    __proto__: dart.getFields(toggle_buttons._ResolveFillColor.__proto__),
    primary: dart.finalFieldType(dart.nullable(ui.Color))
  }));
  const MaterialStateProperty_Diagnosticable$36$ = class MaterialStateProperty_Diagnosticable extends material_state.MaterialStateProperty$(ui.Color) {};
  (MaterialStateProperty_Diagnosticable$36$.new = function() {
  }).prototype = MaterialStateProperty_Diagnosticable$36$.prototype;
  dart.applyMixin(MaterialStateProperty_Diagnosticable$36$, diagnostics.Diagnosticable);
  toggle_buttons._DefaultFillColor = class _DefaultFillColor extends MaterialStateProperty_Diagnosticable$36$ {
    static ['_#new#tearOff'](colorScheme) {
      return new toggle_buttons._DefaultFillColor.new(colorScheme);
    }
    resolve(states) {
      if (states.contains(material_state.MaterialState.selected)) {
        return this.colorScheme.primary.withOpacity(0.12);
      }
      return this.colorScheme.surface.withOpacity(0.0);
    }
  };
  (toggle_buttons._DefaultFillColor.new = function(colorScheme) {
    this.colorScheme = colorScheme;
    ;
  }).prototype = toggle_buttons._DefaultFillColor.prototype;
  dart.addTypeTests(toggle_buttons._DefaultFillColor);
  dart.addTypeCaches(toggle_buttons._DefaultFillColor);
  dart.setMethodSignature(toggle_buttons._DefaultFillColor, () => ({
    __proto__: dart.getMethods(toggle_buttons._DefaultFillColor.__proto__),
    resolve: dart.fnType(ui.Color, [core.Set$(material_state.MaterialState)])
  }));
  dart.setLibraryUri(toggle_buttons._DefaultFillColor, I[1]);
  dart.setFieldSignature(toggle_buttons._DefaultFillColor, () => ({
    __proto__: dart.getFields(toggle_buttons._DefaultFillColor.__proto__),
    colorScheme: dart.finalFieldType(color_scheme.ColorScheme)
  }));
  toggle_buttons._ToggleButtonDefaultOverlay = class _ToggleButtonDefaultOverlay extends material_state.MaterialStateProperty$(dart.nullable(ui.Color)) {
    static ['_#new#tearOff'](opts) {
      let selected = opts && 'selected' in opts ? opts.selected : null;
      let unselected = opts && 'unselected' in opts ? opts.unselected : null;
      let colorScheme = opts && 'colorScheme' in opts ? opts.colorScheme : null;
      let focusColor = opts && 'focusColor' in opts ? opts.focusColor : null;
      let highlightColor = opts && 'highlightColor' in opts ? opts.highlightColor : null;
      let hoverColor = opts && 'hoverColor' in opts ? opts.hoverColor : null;
      let splashColor = opts && 'splashColor' in opts ? opts.splashColor : null;
      let disabledColor = opts && 'disabledColor' in opts ? opts.disabledColor : null;
      return new toggle_buttons._ToggleButtonDefaultOverlay.new({selected: selected, unselected: unselected, colorScheme: colorScheme, focusColor: focusColor, highlightColor: highlightColor, hoverColor: hoverColor, splashColor: splashColor, disabledColor: disabledColor});
    }
    resolve(states) {
      let t2, t1, t2$, t1$, t2$0, t1$0, t2$1, t1$1, t2$2, t1$2, t1$3, t2$3, t1$4;
      if (this.selected) {
        if (states.contains(material_state.MaterialState.hovered)) {
          t1 = this.hoverColor;
          return t1 == null ? (t2 = this.colorScheme, t2 == null ? null : t2.primary.withOpacity(0.04)) : t1;
        } else if (states.contains(material_state.MaterialState.focused)) {
          t1$ = this.focusColor;
          return t1$ == null ? (t2$ = this.colorScheme, t2$ == null ? null : t2$.primary.withOpacity(0.12)) : t1$;
        } else if (states.contains(material_state.MaterialState.pressed)) {
          t1$0 = this.splashColor;
          return t1$0 == null ? (t2$0 = this.colorScheme, t2$0 == null ? null : t2$0.primary.withOpacity(0.16)) : t1$0;
        }
      } else if (this.unselected) {
        if (states.contains(material_state.MaterialState.hovered)) {
          t1$1 = this.hoverColor;
          return t1$1 == null ? (t2$1 = this.colorScheme, t2$1 == null ? null : t2$1.onSurface.withOpacity(0.04)) : t1$1;
        } else if (states.contains(material_state.MaterialState.focused)) {
          t1$2 = this.focusColor;
          return t1$2 == null ? (t2$2 = this.colorScheme, t2$2 == null ? null : t2$2.onSurface.withOpacity(0.12)) : t1$2;
        } else if (states.contains(material_state.MaterialState.pressed)) {
          t1$4 = (t1$3 = this.splashColor, t1$3 == null ? this.highlightColor : t1$3);
          return t1$4 == null ? (t2$3 = this.colorScheme, t2$3 == null ? null : t2$3.onSurface.withOpacity(0.16)) : t1$4;
        }
      }
      return null;
    }
    toString() {
      let t1, t1$, t1$0, t1$1, t1$2, t1$3;
      return "    {\n      selected:\n        hovered: " + dart.str(this.hoverColor) + ", otherwise: " + dart.str((t1 = this.colorScheme, t1 == null ? null : t1.primary.withOpacity(0.04))) + ",\n        focused: " + dart.str(this.focusColor) + ", otherwise: " + dart.str((t1$ = this.colorScheme, t1$ == null ? null : t1$.primary.withOpacity(0.12))) + ",\n        pressed: " + dart.str(this.splashColor) + ", otherwise: " + dart.str((t1$0 = this.colorScheme, t1$0 == null ? null : t1$0.primary.withOpacity(0.16))) + ",\n      unselected:\n        hovered: " + dart.str(this.hoverColor) + ", otherwise: " + dart.str((t1$1 = this.colorScheme, t1$1 == null ? null : t1$1.onSurface.withOpacity(0.04))) + ",\n        focused: " + dart.str(this.focusColor) + ", otherwise: " + dart.str((t1$2 = this.colorScheme, t1$2 == null ? null : t1$2.onSurface.withOpacity(0.12))) + ",\n        pressed: " + dart.str(this.splashColor) + ", otherwise: " + dart.str((t1$3 = this.colorScheme, t1$3 == null ? null : t1$3.onSurface.withOpacity(0.16))) + ",\n      otherwise: null,\n    }\n    ";
    }
  };
  (toggle_buttons._ToggleButtonDefaultOverlay.new = function(opts) {
    let selected = opts && 'selected' in opts ? opts.selected : null;
    let unselected = opts && 'unselected' in opts ? opts.unselected : null;
    let colorScheme = opts && 'colorScheme' in opts ? opts.colorScheme : null;
    let focusColor = opts && 'focusColor' in opts ? opts.focusColor : null;
    let highlightColor = opts && 'highlightColor' in opts ? opts.highlightColor : null;
    let hoverColor = opts && 'hoverColor' in opts ? opts.hoverColor : null;
    let splashColor = opts && 'splashColor' in opts ? opts.splashColor : null;
    let disabledColor = opts && 'disabledColor' in opts ? opts.disabledColor : null;
    this.selected = selected;
    this.unselected = unselected;
    this.colorScheme = colorScheme;
    this.focusColor = focusColor;
    this.highlightColor = highlightColor;
    this.hoverColor = hoverColor;
    this.splashColor = splashColor;
    this.disabledColor = disabledColor;
    ;
  }).prototype = toggle_buttons._ToggleButtonDefaultOverlay.prototype;
  dart.addTypeTests(toggle_buttons._ToggleButtonDefaultOverlay);
  dart.addTypeCaches(toggle_buttons._ToggleButtonDefaultOverlay);
  dart.setMethodSignature(toggle_buttons._ToggleButtonDefaultOverlay, () => ({
    __proto__: dart.getMethods(toggle_buttons._ToggleButtonDefaultOverlay.__proto__),
    resolve: dart.fnType(dart.nullable(ui.Color), [core.Set$(material_state.MaterialState)])
  }));
  dart.setLibraryUri(toggle_buttons._ToggleButtonDefaultOverlay, I[1]);
  dart.setFieldSignature(toggle_buttons._ToggleButtonDefaultOverlay, () => ({
    __proto__: dart.getFields(toggle_buttons._ToggleButtonDefaultOverlay.__proto__),
    selected: dart.finalFieldType(core.bool),
    unselected: dart.finalFieldType(core.bool),
    colorScheme: dart.finalFieldType(dart.nullable(color_scheme.ColorScheme)),
    focusColor: dart.finalFieldType(dart.nullable(ui.Color)),
    highlightColor: dart.finalFieldType(dart.nullable(ui.Color)),
    hoverColor: dart.finalFieldType(dart.nullable(ui.Color)),
    splashColor: dart.finalFieldType(dart.nullable(ui.Color)),
    disabledColor: dart.finalFieldType(dart.nullable(ui.Color))
  }));
  dart.defineExtensionMethods(toggle_buttons._ToggleButtonDefaultOverlay, ['toString']);
  var leadingBorderSide$ = dart.privateName(toggle_buttons, "_SelectToggleButton.leadingBorderSide");
  var borderSide$ = dart.privateName(toggle_buttons, "_SelectToggleButton.borderSide");
  var trailingBorderSide$ = dart.privateName(toggle_buttons, "_SelectToggleButton.trailingBorderSide");
  var borderRadius$0 = dart.privateName(toggle_buttons, "_SelectToggleButton.borderRadius");
  var isFirstButton$ = dart.privateName(toggle_buttons, "_SelectToggleButton.isFirstButton");
  var isLastButton$ = dart.privateName(toggle_buttons, "_SelectToggleButton.isLastButton");
  var direction$0 = dart.privateName(toggle_buttons, "_SelectToggleButton.direction");
  var verticalDirection$0 = dart.privateName(toggle_buttons, "_SelectToggleButton.verticalDirection");
  toggle_buttons._SelectToggleButton = class _SelectToggleButton extends framework.SingleChildRenderObjectWidget {
    get leadingBorderSide() {
      return this[leadingBorderSide$];
    }
    set leadingBorderSide(value) {
      super.leadingBorderSide = value;
    }
    get borderSide() {
      return this[borderSide$];
    }
    set borderSide(value) {
      super.borderSide = value;
    }
    get trailingBorderSide() {
      return this[trailingBorderSide$];
    }
    set trailingBorderSide(value) {
      super.trailingBorderSide = value;
    }
    get borderRadius() {
      return this[borderRadius$0];
    }
    set borderRadius(value) {
      super.borderRadius = value;
    }
    get isFirstButton() {
      return this[isFirstButton$];
    }
    set isFirstButton(value) {
      super.isFirstButton = value;
    }
    get isLastButton() {
      return this[isLastButton$];
    }
    set isLastButton(value) {
      super.isLastButton = value;
    }
    get direction() {
      return this[direction$0];
    }
    set direction(value) {
      super.direction = value;
    }
    get verticalDirection() {
      return this[verticalDirection$0];
    }
    set verticalDirection(value) {
      super.verticalDirection = value;
    }
    static ['_#new#tearOff'](opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let leadingBorderSide = opts && 'leadingBorderSide' in opts ? opts.leadingBorderSide : null;
      let borderSide = opts && 'borderSide' in opts ? opts.borderSide : null;
      let trailingBorderSide = opts && 'trailingBorderSide' in opts ? opts.trailingBorderSide : null;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
      let isFirstButton = opts && 'isFirstButton' in opts ? opts.isFirstButton : null;
      let isLastButton = opts && 'isLastButton' in opts ? opts.isLastButton : null;
      let direction = opts && 'direction' in opts ? opts.direction : null;
      let verticalDirection = opts && 'verticalDirection' in opts ? opts.verticalDirection : null;
      return new toggle_buttons._SelectToggleButton.new({child: child, leadingBorderSide: leadingBorderSide, borderSide: borderSide, trailingBorderSide: trailingBorderSide, borderRadius: borderRadius, isFirstButton: isFirstButton, isLastButton: isLastButton, direction: direction, verticalDirection: verticalDirection, $creationLocationd_0dea112b090073317d4: C[30] || CT.C30});
    }
    createRenderObject(context) {
      return new toggle_buttons._SelectToggleButtonRenderObject.new(this.leadingBorderSide, this.borderSide, this.trailingBorderSide, this.borderRadius, this.isFirstButton, this.isLastButton, this.direction, this.verticalDirection, basic.Directionality.of(context));
    }
    updateRenderObject(context, renderObject) {
      let t1;
      toggle_buttons._SelectToggleButtonRenderObject.as(renderObject);
      t1 = renderObject;
      (() => {
        t1.leadingBorderSide = this.leadingBorderSide;
        t1.borderSide = this.borderSide;
        t1.trailingBorderSide = this.trailingBorderSide;
        t1.borderRadius = this.borderRadius;
        t1.isFirstButton = this.isFirstButton;
        t1.isLastButton = this.isLastButton;
        t1.direction = this.direction;
        t1.verticalDirection = this.verticalDirection;
        t1.textDirection = basic.Directionality.of(context);
        return t1;
      })();
    }
  };
  (toggle_buttons._SelectToggleButton.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let leadingBorderSide = opts && 'leadingBorderSide' in opts ? opts.leadingBorderSide : null;
    let borderSide = opts && 'borderSide' in opts ? opts.borderSide : null;
    let trailingBorderSide = opts && 'trailingBorderSide' in opts ? opts.trailingBorderSide : null;
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
    let isFirstButton = opts && 'isFirstButton' in opts ? opts.isFirstButton : null;
    let isLastButton = opts && 'isLastButton' in opts ? opts.isLastButton : null;
    let direction = opts && 'direction' in opts ? opts.direction : null;
    let verticalDirection = opts && 'verticalDirection' in opts ? opts.verticalDirection : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[leadingBorderSide$] = leadingBorderSide;
    this[borderSide$] = borderSide;
    this[trailingBorderSide$] = trailingBorderSide;
    this[borderRadius$0] = borderRadius;
    this[isFirstButton$] = isFirstButton;
    this[isLastButton$] = isLastButton;
    this[direction$0] = direction;
    this[verticalDirection$0] = verticalDirection;
    toggle_buttons._SelectToggleButton.__proto__.new.call(this, {child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = toggle_buttons._SelectToggleButton.prototype;
  dart.addTypeTests(toggle_buttons._SelectToggleButton);
  dart.addTypeCaches(toggle_buttons._SelectToggleButton);
  dart.setMethodSignature(toggle_buttons._SelectToggleButton, () => ({
    __proto__: dart.getMethods(toggle_buttons._SelectToggleButton.__proto__),
    createRenderObject: dart.fnType(toggle_buttons._SelectToggleButtonRenderObject, [framework.BuildContext])
  }));
  dart.setLibraryUri(toggle_buttons._SelectToggleButton, I[1]);
  dart.setFieldSignature(toggle_buttons._SelectToggleButton, () => ({
    __proto__: dart.getFields(toggle_buttons._SelectToggleButton.__proto__),
    leadingBorderSide: dart.finalFieldType(borders.BorderSide),
    borderSide: dart.finalFieldType(borders.BorderSide),
    trailingBorderSide: dart.finalFieldType(borders.BorderSide),
    borderRadius: dart.finalFieldType(border_radius.BorderRadius),
    isFirstButton: dart.finalFieldType(core.bool),
    isLastButton: dart.finalFieldType(core.bool),
    direction: dart.finalFieldType(basic_types.Axis),
    verticalDirection: dart.finalFieldType(basic_types.VerticalDirection)
  }));
  var _leadingBorderSide$ = dart.privateName(toggle_buttons, "_leadingBorderSide");
  var _borderSide$ = dart.privateName(toggle_buttons, "_borderSide");
  var _trailingBorderSide$ = dart.privateName(toggle_buttons, "_trailingBorderSide");
  var _borderRadius$ = dart.privateName(toggle_buttons, "_borderRadius");
  var _direction$ = dart.privateName(toggle_buttons, "_direction");
  var _verticalDirection$ = dart.privateName(toggle_buttons, "_verticalDirection");
  var _textDirection$ = dart.privateName(toggle_buttons, "_textDirection");
  var _computeSize = dart.privateName(toggle_buttons, "_computeSize");
  toggle_buttons._SelectToggleButtonRenderObject = class _SelectToggleButtonRenderObject extends shifted_box.RenderShiftedBox {
    static ['_#new#tearOff'](_leadingBorderSide, _borderSide, _trailingBorderSide, _borderRadius, _isFirstButton, _isLastButton, _direction, _verticalDirection, _textDirection, child = null) {
      return new toggle_buttons._SelectToggleButtonRenderObject.new(_leadingBorderSide, _borderSide, _trailingBorderSide, _borderRadius, _isFirstButton, _isLastButton, _direction, _verticalDirection, _textDirection, child);
    }
    get direction() {
      return this[_direction$];
    }
    set direction(value) {
      if (this[_direction$] === value) {
        return;
      }
      this[_direction$] = value;
      this.markNeedsLayout();
    }
    get verticalDirection() {
      return this[_verticalDirection$];
    }
    set verticalDirection(value) {
      if (this[_verticalDirection$] === value) {
        return;
      }
      this[_verticalDirection$] = value;
      this.markNeedsLayout();
    }
    get leadingBorderSide() {
      return this[_leadingBorderSide$];
    }
    set leadingBorderSide(value) {
      if (this[_leadingBorderSide$]._equals(value)) {
        return;
      }
      this[_leadingBorderSide$] = value;
      this.markNeedsLayout();
    }
    get borderSide() {
      return this[_borderSide$];
    }
    set borderSide(value) {
      if (this[_borderSide$]._equals(value)) {
        return;
      }
      this[_borderSide$] = value;
      this.markNeedsLayout();
    }
    get trailingBorderSide() {
      return this[_trailingBorderSide$];
    }
    set trailingBorderSide(value) {
      if (this[_trailingBorderSide$]._equals(value)) {
        return;
      }
      this[_trailingBorderSide$] = value;
      this.markNeedsLayout();
    }
    get borderRadius() {
      return this[_borderRadius$];
    }
    set borderRadius(value) {
      if (this[_borderRadius$]._equals(value)) {
        return;
      }
      this[_borderRadius$] = value;
      this.markNeedsLayout();
    }
    get isFirstButton() {
      return this[_isFirstButton$];
    }
    set isFirstButton(value) {
      if (this[_isFirstButton$] === value) {
        return;
      }
      this[_isFirstButton$] = value;
      this.markNeedsLayout();
    }
    get isLastButton() {
      return this[_isLastButton$];
    }
    set isLastButton(value) {
      if (this[_isLastButton$] === value) {
        return;
      }
      this[_isLastButton$] = value;
      this.markNeedsLayout();
    }
    get textDirection() {
      return this[_textDirection$];
    }
    set textDirection(value) {
      if (this[_textDirection$] === value) {
        return;
      }
      this[_textDirection$] = value;
      this.markNeedsLayout();
    }
    static _maxHeight(box, width) {
      return box == null ? 0.0 : box.getMaxIntrinsicHeight(width);
    }
    static _minHeight(box, width) {
      return box == null ? 0.0 : box.getMinIntrinsicHeight(width);
    }
    static _minWidth(box, height) {
      return box == null ? 0.0 : box.getMinIntrinsicWidth(height);
    }
    static _maxWidth(box, height) {
      return box == null ? 0.0 : box.getMaxIntrinsicWidth(height);
    }
    computeDistanceToActualBaseline(baseline) {
      return this.direction === basic_types.Axis.horizontal ? dart.nullCheck(dart.nullCheck(this.child).computeDistanceToActualBaseline(baseline)) + this.borderSide.width : dart.nullCheck(dart.nullCheck(this.child).computeDistanceToActualBaseline(baseline)) + this.leadingBorderSide.width;
    }
    computeMaxIntrinsicHeight(width) {
      return this.direction === basic_types.Axis.horizontal ? this.borderSide.width * 2.0 + toggle_buttons._SelectToggleButtonRenderObject._maxHeight(this.child, width) : this.leadingBorderSide.width + toggle_buttons._SelectToggleButtonRenderObject._maxHeight(this.child, width) + this.trailingBorderSide.width;
    }
    computeMinIntrinsicHeight(width) {
      return this.direction === basic_types.Axis.horizontal ? this.borderSide.width * 2.0 + toggle_buttons._SelectToggleButtonRenderObject._minHeight(this.child, width) : this.leadingBorderSide.width + toggle_buttons._SelectToggleButtonRenderObject._maxHeight(this.child, width) + this.trailingBorderSide.width;
    }
    computeMaxIntrinsicWidth(height) {
      return this.direction === basic_types.Axis.horizontal ? this.leadingBorderSide.width + toggle_buttons._SelectToggleButtonRenderObject._maxWidth(this.child, height) + this.trailingBorderSide.width : this.borderSide.width * 2.0 + toggle_buttons._SelectToggleButtonRenderObject._maxWidth(this.child, height);
    }
    computeMinIntrinsicWidth(height) {
      return this.direction === basic_types.Axis.horizontal ? this.leadingBorderSide.width + toggle_buttons._SelectToggleButtonRenderObject._minWidth(this.child, height) + this.trailingBorderSide.width : this.borderSide.width * 2.0 + toggle_buttons._SelectToggleButtonRenderObject._minWidth(this.child, height);
    }
    computeDryLayout(constraints) {
      return this[_computeSize]({constraints: constraints, layoutChild: C[31] || CT.C31});
    }
    performLayout() {
      this.size = this[_computeSize]({constraints: this.constraints, layoutChild: C[32] || CT.C32});
      if (this.child == null) {
        return;
      }
      let childParentData = box.BoxParentData.as(dart.nullCheck(dart.nullCheck(this.child).parentData));
      if (this.direction === basic_types.Axis.horizontal) {
        switch (this.textDirection) {
          case C[33] || CT.C33:
            {
              childParentData.offset = new ui.Offset.new(this.leadingBorderSide.width, this.borderSide.width);
              break;
            }
          case C[34] || CT.C34:
            {
              childParentData.offset = new ui.Offset.new(this.trailingBorderSide.width, this.borderSide.width);
              break;
            }
        }
      } else {
        switch (this.verticalDirection) {
          case C[1] || CT.C1:
            {
              childParentData.offset = new ui.Offset.new(this.borderSide.width, this.leadingBorderSide.width);
              break;
            }
          case C[35] || CT.C35:
            {
              childParentData.offset = new ui.Offset.new(this.borderSide.width, this.trailingBorderSide.width);
              break;
            }
        }
      }
    }
    [_computeSize](opts) {
      let constraints = opts && 'constraints' in opts ? opts.constraints : null;
      let layoutChild = opts && 'layoutChild' in opts ? opts.layoutChild : null;
      if (this.child == null) {
        if (this.direction === basic_types.Axis.horizontal) {
          return constraints.constrain(new ui.Size.new(this.leadingBorderSide.width + this.trailingBorderSide.width, this.borderSide.width * 2.0));
        } else {
          return constraints.constrain(new ui.Size.new(this.borderSide.width * 2.0, this.leadingBorderSide.width + this.trailingBorderSide.width));
        }
      }
      let leftConstraint = null;
      let rightConstraint = null;
      let topConstraint = null;
      let bottomConstraint = null;
      if (this.direction === basic_types.Axis.horizontal) {
        rightConstraint = this.trailingBorderSide.width;
        leftConstraint = this.leadingBorderSide.width;
        topConstraint = this.borderSide.width;
        bottomConstraint = this.borderSide.width;
      } else {
        rightConstraint = this.borderSide.width;
        leftConstraint = this.borderSide.width;
        topConstraint = this.leadingBorderSide.width;
        bottomConstraint = this.trailingBorderSide.width;
      }
      let innerConstraints = constraints.deflate(new edge_insets.EdgeInsets.only({left: leftConstraint, top: topConstraint, right: rightConstraint, bottom: bottomConstraint}));
      let childSize = layoutChild(dart.nullCheck(this.child), innerConstraints);
      return constraints.constrain(new ui.Size.new(leftConstraint + childSize.width + rightConstraint, topConstraint + childSize.height + bottomConstraint));
    }
    paint(context, offset) {
      let t1, t1$, t1$0, t1$1, t1$2, t1$3, t1$4, t1$5, t1$6, t1$7, t1$8, t1$9, t1$10, t1$11, t1$12, t1$13, t1$14, t1$15, t1$16, t1$17, t1$18;
      super.paint(context, offset);
      let bottomRight = this.size.bottomRight(offset);
      let outer = new ui.Rect.fromLTRB(offset.dx, offset.dy, bottomRight.dx, bottomRight.dy);
      let center = outer.deflate(this.borderSide.width / 2.0);
      let rrect = new ui.RRect.fromRectAndCorners(center, {topLeft: this.borderRadius.topLeft.x * this.borderRadius.topLeft.y !== 0.0 ? this.borderRadius.topLeft : ui.Radius.zero, topRight: this.borderRadius.topRight.x * this.borderRadius.topRight.y !== 0.0 ? this.borderRadius.topRight : ui.Radius.zero, bottomLeft: this.borderRadius.bottomLeft.x * this.borderRadius.bottomLeft.y !== 0.0 ? this.borderRadius.bottomLeft : ui.Radius.zero, bottomRight: this.borderRadius.bottomRight.x * this.borderRadius.bottomRight.y !== 0.0 ? this.borderRadius.bottomRight : ui.Radius.zero}).scaleRadii();
      let tlCorner = new ui.Rect.fromLTWH(rrect.left, rrect.top, rrect.tlRadiusX * 2.0, rrect.tlRadiusY * 2.0);
      let blCorner = new ui.Rect.fromLTWH(rrect.left, rrect.bottom - rrect.blRadiusY * 2.0, rrect.blRadiusX * 2.0, rrect.blRadiusY * 2.0);
      let trCorner = new ui.Rect.fromLTWH(rrect.right - rrect.trRadiusX * 2, rrect.top, rrect.trRadiusX * 2, rrect.trRadiusY * 2);
      let brCorner = new ui.Rect.fromLTWH(rrect.right - rrect.brRadiusX * 2, rrect.bottom - rrect.brRadiusY * 2, rrect.brRadiusX * 2, rrect.brRadiusY * 2);
      let leadingPaint = this.leadingBorderSide.toPaint();
      if (this.isFirstButton && this.isLastButton) {
        let leadingPath = ui.Path.new();
        let startX = rrect.brRadiusX === 0.0 ? outer.right : rrect.right - rrect.brRadiusX;
        t1 = leadingPath;
        (() => {
          t1.moveTo(startX, rrect.bottom);
          t1.lineTo(rrect.left + rrect.blRadiusX, rrect.bottom);
          t1.addArc(blCorner, 3.141592653589793 / 2.0, 1.5707963267948966);
          t1.lineTo(rrect.left, rrect.top + rrect.tlRadiusY);
          t1.addArc(tlCorner, 3.141592653589793, 1.5707963267948966);
          t1.lineTo(rrect.right - rrect.trRadiusX, rrect.top);
          t1.addArc(trCorner, 3.141592653589793 * 3.0 / 2.0, 1.5707963267948966);
          t1.lineTo(rrect.right, rrect.bottom - rrect.brRadiusY);
          t1.addArc(brCorner, 0.0, 1.5707963267948966);
          return t1;
        })();
        context.canvas.drawPath(leadingPath, leadingPaint);
        return;
      }
      if (this.direction === basic_types.Axis.horizontal) {
        switch (this.textDirection) {
          case C[33] || CT.C33:
            {
              if (this.isLastButton) {
                let leftPath = ui.Path.new();
                t1$ = leftPath;
                (() => {
                  t1$.moveTo(rrect.left, rrect.bottom + this.leadingBorderSide.width / 2);
                  t1$.lineTo(rrect.left, rrect.top - this.leadingBorderSide.width / 2);
                  return t1$;
                })();
                context.canvas.drawPath(leftPath, leadingPaint);
                let endingPaint = this.trailingBorderSide.toPaint();
                let endingPath = ui.Path.new();
                t1$0 = endingPath;
                (() => {
                  t1$0.moveTo(rrect.left + this.borderSide.width / 2.0, rrect.top);
                  t1$0.lineTo(rrect.right - rrect.trRadiusX, rrect.top);
                  t1$0.addArc(trCorner, 3.141592653589793 * 3.0 / 2.0, 1.5707963267948966);
                  t1$0.lineTo(rrect.right, rrect.bottom - rrect.brRadiusY);
                  t1$0.addArc(brCorner, 0.0, 1.5707963267948966);
                  t1$0.lineTo(rrect.left + this.borderSide.width / 2.0, rrect.bottom);
                  return t1$0;
                })();
                context.canvas.drawPath(endingPath, endingPaint);
              } else if (this.isFirstButton) {
                let leadingPath = ui.Path.new();
                t1$1 = leadingPath;
                (() => {
                  t1$1.moveTo(outer.right, rrect.bottom);
                  t1$1.lineTo(rrect.left + rrect.blRadiusX, rrect.bottom);
                  t1$1.addArc(blCorner, 3.141592653589793 / 2.0, 1.5707963267948966);
                  t1$1.lineTo(rrect.left, rrect.top + rrect.tlRadiusY);
                  t1$1.addArc(tlCorner, 3.141592653589793, 1.5707963267948966);
                  t1$1.lineTo(outer.right, rrect.top);
                  return t1$1;
                })();
                context.canvas.drawPath(leadingPath, leadingPaint);
              } else {
                let leadingPath = ui.Path.new();
                t1$2 = leadingPath;
                (() => {
                  t1$2.moveTo(rrect.left, rrect.bottom + this.leadingBorderSide.width / 2);
                  t1$2.lineTo(rrect.left, rrect.top - this.leadingBorderSide.width / 2);
                  return t1$2;
                })();
                context.canvas.drawPath(leadingPath, leadingPaint);
                let horizontalPaint = this.borderSide.toPaint();
                let horizontalPaths = ui.Path.new();
                t1$3 = horizontalPaths;
                (() => {
                  t1$3.moveTo(rrect.left + this.borderSide.width / 2.0, rrect.top);
                  t1$3.lineTo(outer.right - rrect.trRadiusX, rrect.top);
                  t1$3.moveTo(rrect.left + this.borderSide.width / 2.0 + rrect.tlRadiusX, rrect.bottom);
                  t1$3.lineTo(outer.right - rrect.trRadiusX, rrect.bottom);
                  return t1$3;
                })();
                context.canvas.drawPath(horizontalPaths, horizontalPaint);
              }
              break;
            }
          case C[34] || CT.C34:
            {
              if (this.isLastButton) {
                let leadingPath = ui.Path.new();
                t1$4 = leadingPath;
                (() => {
                  t1$4.moveTo(rrect.right, rrect.bottom + this.leadingBorderSide.width / 2);
                  t1$4.lineTo(rrect.right, rrect.top - this.leadingBorderSide.width / 2);
                  return t1$4;
                })();
                context.canvas.drawPath(leadingPath, leadingPaint);
                let endingPaint = this.trailingBorderSide.toPaint();
                let endingPath = ui.Path.new();
                t1$5 = endingPath;
                (() => {
                  t1$5.moveTo(rrect.right - this.borderSide.width / 2.0, rrect.top);
                  t1$5.lineTo(rrect.left + rrect.tlRadiusX, rrect.top);
                  t1$5.addArc(tlCorner, 3.141592653589793 * 3.0 / 2.0, -1.5707963267948966);
                  t1$5.lineTo(rrect.left, rrect.bottom - rrect.blRadiusY);
                  t1$5.addArc(blCorner, 3.141592653589793, -1.5707963267948966);
                  t1$5.lineTo(rrect.right - this.borderSide.width / 2.0, rrect.bottom);
                  return t1$5;
                })();
                context.canvas.drawPath(endingPath, endingPaint);
              } else if (this.isFirstButton) {
                let leadingPath = ui.Path.new();
                t1$6 = leadingPath;
                (() => {
                  t1$6.moveTo(outer.left, rrect.bottom);
                  t1$6.lineTo(rrect.right - rrect.brRadiusX, rrect.bottom);
                  t1$6.addArc(brCorner, 3.141592653589793 / 2.0, -1.5707963267948966);
                  t1$6.lineTo(rrect.right, rrect.top + rrect.trRadiusY);
                  t1$6.addArc(trCorner, 0.0, -1.5707963267948966);
                  t1$6.lineTo(outer.left, rrect.top);
                  return t1$6;
                })();
                context.canvas.drawPath(leadingPath, leadingPaint);
              } else {
                let leadingPath = ui.Path.new();
                t1$7 = leadingPath;
                (() => {
                  t1$7.moveTo(rrect.right, rrect.bottom + this.leadingBorderSide.width / 2);
                  t1$7.lineTo(rrect.right, rrect.top - this.leadingBorderSide.width / 2);
                  return t1$7;
                })();
                context.canvas.drawPath(leadingPath, leadingPaint);
                let horizontalPaint = this.borderSide.toPaint();
                let horizontalPaths = ui.Path.new();
                t1$8 = horizontalPaths;
                (() => {
                  t1$8.moveTo(rrect.right - this.borderSide.width / 2.0, rrect.top);
                  t1$8.lineTo(outer.left - rrect.tlRadiusX, rrect.top);
                  t1$8.moveTo(rrect.right - this.borderSide.width / 2.0 + rrect.trRadiusX, rrect.bottom);
                  t1$8.lineTo(outer.left - rrect.tlRadiusX, rrect.bottom);
                  return t1$8;
                })();
                context.canvas.drawPath(horizontalPaths, horizontalPaint);
              }
              break;
            }
        }
      } else {
        switch (this.verticalDirection) {
          case C[1] || CT.C1:
            {
              if (this.isLastButton) {
                let topPath = ui.Path.new();
                t1$9 = topPath;
                (() => {
                  t1$9.moveTo(outer.left, outer.top + this.leadingBorderSide.width / 2);
                  t1$9.lineTo(outer.right, outer.top + this.leadingBorderSide.width / 2);
                  return t1$9;
                })();
                context.canvas.drawPath(topPath, leadingPaint);
                let endingPaint = this.trailingBorderSide.toPaint();
                let endingPath = ui.Path.new();
                t1$10 = endingPath;
                (() => {
                  t1$10.moveTo(rrect.left, rrect.top + this.leadingBorderSide.width / 2.0);
                  t1$10.lineTo(rrect.left, rrect.bottom - rrect.blRadiusY);
                  t1$10.addArc(blCorner, 3.141592653589793 * 3.0, -1.5707963267948966);
                  t1$10.lineTo(rrect.right - rrect.blRadiusX, rrect.bottom);
                  t1$10.addArc(brCorner, 3.141592653589793 / 2.0, -1.5707963267948966);
                  t1$10.lineTo(rrect.right, rrect.top + this.leadingBorderSide.width / 2.0);
                  return t1$10;
                })();
                context.canvas.drawPath(endingPath, endingPaint);
              } else if (this.isFirstButton) {
                let leadingPath = ui.Path.new();
                t1$11 = leadingPath;
                (() => {
                  t1$11.moveTo(rrect.left, outer.bottom);
                  t1$11.lineTo(rrect.left, rrect.top + rrect.tlRadiusX);
                  t1$11.addArc(tlCorner, 3.141592653589793, 1.5707963267948966);
                  t1$11.lineTo(rrect.right - rrect.trRadiusX, rrect.top);
                  t1$11.addArc(trCorner, 3.141592653589793 * 3.0 / 2.0, 1.5707963267948966);
                  t1$11.lineTo(rrect.right, outer.bottom);
                  return t1$11;
                })();
                context.canvas.drawPath(leadingPath, leadingPaint);
              } else {
                let topPath = ui.Path.new();
                t1$12 = topPath;
                (() => {
                  t1$12.moveTo(outer.left, outer.top + this.leadingBorderSide.width / 2);
                  t1$12.lineTo(outer.right, outer.top + this.leadingBorderSide.width / 2);
                  return t1$12;
                })();
                context.canvas.drawPath(topPath, leadingPaint);
                let paint = this.borderSide.toPaint();
                let paths = ui.Path.new();
                t1$13 = paths;
                (() => {
                  t1$13.moveTo(rrect.left, outer.top + this.leadingBorderSide.width);
                  t1$13.lineTo(rrect.left, outer.bottom);
                  t1$13.moveTo(rrect.right, outer.top + this.leadingBorderSide.width);
                  t1$13.lineTo(rrect.right, outer.bottom);
                  return t1$13;
                })();
                context.canvas.drawPath(paths, paint);
              }
              break;
            }
          case C[35] || CT.C35:
            {
              if (this.isLastButton) {
                let bottomPath = ui.Path.new();
                t1$14 = bottomPath;
                (() => {
                  t1$14.moveTo(outer.left, outer.bottom - this.leadingBorderSide.width / 2.0);
                  t1$14.lineTo(outer.right, outer.bottom - this.leadingBorderSide.width / 2.0);
                  return t1$14;
                })();
                context.canvas.drawPath(bottomPath, leadingPaint);
                let endingPaint = this.trailingBorderSide.toPaint();
                let endingPath = ui.Path.new();
                t1$15 = endingPath;
                (() => {
                  t1$15.moveTo(rrect.left, rrect.bottom - this.leadingBorderSide.width / 2.0);
                  t1$15.lineTo(rrect.left, rrect.top + rrect.tlRadiusY);
                  t1$15.addArc(tlCorner, 3.141592653589793, 1.5707963267948966);
                  t1$15.lineTo(rrect.right - rrect.trRadiusX, rrect.top);
                  t1$15.addArc(trCorner, 3.141592653589793 * 3.0 / 2.0, 1.5707963267948966);
                  t1$15.lineTo(rrect.right, rrect.bottom - this.leadingBorderSide.width / 2.0);
                  return t1$15;
                })();
                context.canvas.drawPath(endingPath, endingPaint);
              } else if (this.isFirstButton) {
                let leadingPath = ui.Path.new();
                t1$16 = leadingPath;
                (() => {
                  t1$16.moveTo(rrect.left, outer.top);
                  t1$16.lineTo(rrect.left, rrect.bottom - rrect.blRadiusY);
                  t1$16.addArc(blCorner, 3.141592653589793, -1.5707963267948966);
                  t1$16.lineTo(rrect.right - rrect.brRadiusX, rrect.bottom);
                  t1$16.addArc(brCorner, 3.141592653589793 / 2.0, -1.5707963267948966);
                  t1$16.lineTo(rrect.right, outer.top);
                  return t1$16;
                })();
                context.canvas.drawPath(leadingPath, leadingPaint);
              } else {
                let bottomPath = ui.Path.new();
                t1$17 = bottomPath;
                (() => {
                  t1$17.moveTo(outer.left, outer.bottom - this.leadingBorderSide.width / 2.0);
                  t1$17.lineTo(outer.right, outer.bottom - this.leadingBorderSide.width / 2.0);
                  return t1$17;
                })();
                context.canvas.drawPath(bottomPath, leadingPaint);
                let paint = this.borderSide.toPaint();
                let paths = ui.Path.new();
                t1$18 = paths;
                (() => {
                  t1$18.moveTo(rrect.left, outer.top);
                  t1$18.lineTo(rrect.left, outer.bottom - this.leadingBorderSide.width);
                  t1$18.moveTo(rrect.right, outer.top);
                  t1$18.lineTo(rrect.right, outer.bottom - this.leadingBorderSide.width);
                  return t1$18;
                })();
                context.canvas.drawPath(paths, paint);
              }
              break;
            }
        }
      }
    }
  };
  (toggle_buttons._SelectToggleButtonRenderObject.new = function(_leadingBorderSide, _borderSide, _trailingBorderSide, _borderRadius, _isFirstButton, _isLastButton, _direction, _verticalDirection, _textDirection, child = null) {
    this[_leadingBorderSide$] = _leadingBorderSide;
    this[_borderSide$] = _borderSide;
    this[_trailingBorderSide$] = _trailingBorderSide;
    this[_borderRadius$] = _borderRadius;
    this[_isFirstButton$] = _isFirstButton;
    this[_isLastButton$] = _isLastButton;
    this[_direction$] = _direction;
    this[_verticalDirection$] = _verticalDirection;
    this[_textDirection$] = _textDirection;
    toggle_buttons._SelectToggleButtonRenderObject.__proto__.new.call(this, child);
    ;
  }).prototype = toggle_buttons._SelectToggleButtonRenderObject.prototype;
  dart.addTypeTests(toggle_buttons._SelectToggleButtonRenderObject);
  dart.addTypeCaches(toggle_buttons._SelectToggleButtonRenderObject);
  dart.setMethodSignature(toggle_buttons._SelectToggleButtonRenderObject, () => ({
    __proto__: dart.getMethods(toggle_buttons._SelectToggleButtonRenderObject.__proto__),
    computeDistanceToActualBaseline: dart.fnType(core.double, [ui.TextBaseline]),
    [_computeSize]: dart.fnType(ui.Size, [], {}, {constraints: box.BoxConstraints, layoutChild: dart.fnType(ui.Size, [box.RenderBox, box.BoxConstraints])})
  }));
  dart.setStaticMethodSignature(toggle_buttons._SelectToggleButtonRenderObject, () => ['_maxHeight', '_minHeight', '_minWidth', '_maxWidth']);
  dart.setGetterSignature(toggle_buttons._SelectToggleButtonRenderObject, () => ({
    __proto__: dart.getGetters(toggle_buttons._SelectToggleButtonRenderObject.__proto__),
    direction: basic_types.Axis,
    verticalDirection: basic_types.VerticalDirection,
    leadingBorderSide: borders.BorderSide,
    borderSide: borders.BorderSide,
    trailingBorderSide: borders.BorderSide,
    borderRadius: border_radius.BorderRadius,
    isFirstButton: core.bool,
    isLastButton: core.bool,
    textDirection: ui.TextDirection
  }));
  dart.setSetterSignature(toggle_buttons._SelectToggleButtonRenderObject, () => ({
    __proto__: dart.getSetters(toggle_buttons._SelectToggleButtonRenderObject.__proto__),
    direction: basic_types.Axis,
    verticalDirection: basic_types.VerticalDirection,
    leadingBorderSide: borders.BorderSide,
    borderSide: borders.BorderSide,
    trailingBorderSide: borders.BorderSide,
    borderRadius: border_radius.BorderRadius,
    isFirstButton: core.bool,
    isLastButton: core.bool,
    textDirection: ui.TextDirection
  }));
  dart.setLibraryUri(toggle_buttons._SelectToggleButtonRenderObject, I[1]);
  dart.setFieldSignature(toggle_buttons._SelectToggleButtonRenderObject, () => ({
    __proto__: dart.getFields(toggle_buttons._SelectToggleButtonRenderObject.__proto__),
    [_direction$]: dart.fieldType(basic_types.Axis),
    [_verticalDirection$]: dart.fieldType(basic_types.VerticalDirection),
    [_leadingBorderSide$]: dart.fieldType(borders.BorderSide),
    [_borderSide$]: dart.fieldType(borders.BorderSide),
    [_trailingBorderSide$]: dart.fieldType(borders.BorderSide),
    [_borderRadius$]: dart.fieldType(border_radius.BorderRadius),
    [_isFirstButton$]: dart.fieldType(core.bool),
    [_isLastButton$]: dart.fieldType(core.bool),
    [_textDirection$]: dart.fieldType(ui.TextDirection)
  }));
  var minSize$ = dart.privateName(toggle_buttons, "_InputPadding.minSize");
  var direction$1 = dart.privateName(toggle_buttons, "_InputPadding.direction");
  toggle_buttons._InputPadding = class _InputPadding extends framework.SingleChildRenderObjectWidget {
    get minSize() {
      return this[minSize$];
    }
    set minSize(value) {
      super.minSize = value;
    }
    get direction() {
      return this[direction$1];
    }
    set direction(value) {
      super.direction = value;
    }
    static ['_#new#tearOff'](opts) {
      let child = opts && 'child' in opts ? opts.child : null;
      let minSize = opts && 'minSize' in opts ? opts.minSize : null;
      let direction = opts && 'direction' in opts ? opts.direction : null;
      return new toggle_buttons._InputPadding.new({child: child, minSize: minSize, direction: direction, $creationLocationd_0dea112b090073317d4: C[36] || CT.C36});
    }
    createRenderObject(context) {
      return new toggle_buttons._RenderInputPadding.new(this.minSize, this.direction);
    }
    updateRenderObject(context, renderObject) {
      toggle_buttons._RenderInputPadding.as(renderObject);
      renderObject.minSize = this.minSize;
      renderObject.direction = this.direction;
    }
  };
  (toggle_buttons._InputPadding.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    let minSize = opts && 'minSize' in opts ? opts.minSize : null;
    let direction = opts && 'direction' in opts ? opts.direction : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[minSize$] = minSize;
    this[direction$1] = direction;
    toggle_buttons._InputPadding.__proto__.new.call(this, {child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = toggle_buttons._InputPadding.prototype;
  dart.addTypeTests(toggle_buttons._InputPadding);
  dart.addTypeCaches(toggle_buttons._InputPadding);
  dart.setMethodSignature(toggle_buttons._InputPadding, () => ({
    __proto__: dart.getMethods(toggle_buttons._InputPadding.__proto__),
    createRenderObject: dart.fnType(object.RenderObject, [framework.BuildContext])
  }));
  dart.setLibraryUri(toggle_buttons._InputPadding, I[1]);
  dart.setFieldSignature(toggle_buttons._InputPadding, () => ({
    __proto__: dart.getFields(toggle_buttons._InputPadding.__proto__),
    minSize: dart.finalFieldType(ui.Size),
    direction: dart.finalFieldType(basic_types.Axis)
  }));
  var _minSize$ = dart.privateName(toggle_buttons, "_minSize");
  toggle_buttons._RenderInputPadding = class _RenderInputPadding extends shifted_box.RenderShiftedBox {
    static ['_#new#tearOff'](_minSize, _direction, child = null) {
      return new toggle_buttons._RenderInputPadding.new(_minSize, _direction, child);
    }
    get minSize() {
      return this[_minSize$];
    }
    set minSize(value) {
      if (this[_minSize$]._equals(value)) {
        return;
      }
      this[_minSize$] = value;
      this.markNeedsLayout();
    }
    get direction() {
      return this[_direction$];
    }
    set direction(value) {
      if (this[_direction$] === value) {
        return;
      }
      this[_direction$] = value;
      this.markNeedsLayout();
    }
    computeMinIntrinsicWidth(height) {
      if (this.child != null) {
        return math.max(core.double, dart.nullCheck(this.child).getMinIntrinsicWidth(height), this.minSize.width);
      }
      return 0.0;
    }
    computeMinIntrinsicHeight(width) {
      if (this.child != null) {
        return math.max(core.double, dart.nullCheck(this.child).getMinIntrinsicHeight(width), this.minSize.height);
      }
      return 0.0;
    }
    computeMaxIntrinsicWidth(height) {
      if (this.child != null) {
        return math.max(core.double, dart.nullCheck(this.child).getMaxIntrinsicWidth(height), this.minSize.width);
      }
      return 0.0;
    }
    computeMaxIntrinsicHeight(width) {
      if (this.child != null) {
        return math.max(core.double, dart.nullCheck(this.child).getMaxIntrinsicHeight(width), this.minSize.height);
      }
      return 0.0;
    }
    [_computeSize](opts) {
      let constraints = opts && 'constraints' in opts ? opts.constraints : null;
      let layoutChild = opts && 'layoutChild' in opts ? opts.layoutChild : null;
      if (this.child != null) {
        let childSize = layoutChild(dart.nullCheck(this.child), constraints);
        let height = math.max(core.double, childSize.width, this.minSize.width);
        let width = math.max(core.double, childSize.height, this.minSize.height);
        return constraints.constrain(new ui.Size.new(height, width));
      }
      return ui.Size.zero;
    }
    computeDryLayout(constraints) {
      return this[_computeSize]({constraints: constraints, layoutChild: C[31] || CT.C31});
    }
    performLayout() {
      this.size = this[_computeSize]({constraints: this.constraints, layoutChild: C[32] || CT.C32});
      if (this.child != null) {
        let childParentData = box.BoxParentData.as(dart.nullCheck(dart.nullCheck(this.child).parentData));
        childParentData.offset = alignment.Alignment.center.alongOffset(ui.Offset.as(this.size['-'](dart.nullCheck(this.child).size)));
      }
    }
    hitTest(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      if (!this.size.contains(position)) {
        return false;
      }
      let center = null;
      if (this.direction === basic_types.Axis.horizontal) {
        center = new ui.Offset.new(position.dx, dart.nullCheck(this.child).size.height / 2);
      } else {
        center = new ui.Offset.new(dart.nullCheck(this.child).size.width / 2, position.dy);
      }
      return result.addWithRawTransform({transform: matrix_utils.MatrixUtils.forceToPoint(center), position: center, hitTest: dart.fn((result, position) => {
          if (!position._equals(center)) dart.assertFailed(null, I[0], 1631, 16, "position == center");
          return dart.nullCheck(this.child).hitTest(result, {position: center});
        }, T.BoxHitTestResultAndOffsetTobool())});
    }
  };
  (toggle_buttons._RenderInputPadding.new = function(_minSize, _direction, child = null) {
    this[_minSize$] = _minSize;
    this[_direction$] = _direction;
    toggle_buttons._RenderInputPadding.__proto__.new.call(this, child);
    ;
  }).prototype = toggle_buttons._RenderInputPadding.prototype;
  dart.addTypeTests(toggle_buttons._RenderInputPadding);
  dart.addTypeCaches(toggle_buttons._RenderInputPadding);
  dart.setMethodSignature(toggle_buttons._RenderInputPadding, () => ({
    __proto__: dart.getMethods(toggle_buttons._RenderInputPadding.__proto__),
    [_computeSize]: dart.fnType(ui.Size, [], {}, {constraints: box.BoxConstraints, layoutChild: dart.fnType(ui.Size, [box.RenderBox, box.BoxConstraints])})
  }));
  dart.setGetterSignature(toggle_buttons._RenderInputPadding, () => ({
    __proto__: dart.getGetters(toggle_buttons._RenderInputPadding.__proto__),
    minSize: ui.Size,
    direction: basic_types.Axis
  }));
  dart.setSetterSignature(toggle_buttons._RenderInputPadding, () => ({
    __proto__: dart.getSetters(toggle_buttons._RenderInputPadding.__proto__),
    minSize: ui.Size,
    direction: basic_types.Axis
  }));
  dart.setLibraryUri(toggle_buttons._RenderInputPadding, I[1]);
  dart.setFieldSignature(toggle_buttons._RenderInputPadding, () => ({
    __proto__: dart.getFields(toggle_buttons._RenderInputPadding.__proto__),
    [_minSize$]: dart.fieldType(ui.Size),
    [_direction$]: dart.fieldType(basic_types.Axis)
  }));
  dart.trackLibraries("packages/flutter/src/material/toggle_buttons.dart", {
    "package:flutter/src/material/toggle_buttons.dart": toggle_buttons
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["toggle_buttons.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../packages/flutter/src/material/toggle_buttons.dart.lib.js"}');
  // Exports:
  return {
    src__material__toggle_buttons: toggle_buttons
  };
}));

//# sourceMappingURL=toggle_buttons.dart.lib.js.map
