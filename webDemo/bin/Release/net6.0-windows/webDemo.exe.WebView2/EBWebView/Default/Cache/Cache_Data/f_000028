define(['dart_sdk', 'packages/flutter/src/services/text_editing_delta.dart', 'packages/pdf/src/pdf/page_format.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/printing/src/method_channel_js.dart', 'packages/printing/src/raster.dart', 'packages/printing/src/printing_info.dart', 'packages/printing/src/printer.dart', 'packages/plugin_platform_interface/plugin_platform_interface.dart', 'packages/printing/src/print_job.dart'], (function load__packages__printing__src__method_channel_dart(dart_sdk, packages__flutter__src__services__text_editing_delta$46dart, packages__pdf__src__pdf__page_format$46dart, packages__flutter__src__foundation__debug$46dart, packages__printing__src__method_channel_js$46dart, packages__printing__src__raster$46dart, packages__printing__src__printing_info$46dart, packages__printing__src__printer$46dart, packages__plugin_platform_interface__plugin_platform_interface$46dart, packages__printing__src__print_job$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _js_helper = dart_sdk._js_helper;
  const _native_typed_data = dart_sdk._native_typed_data;
  const typed_data = dart_sdk.typed_data;
  const _interceptors = dart_sdk._interceptors;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const message_codec = packages__flutter__src__services__text_editing_delta$46dart.src__services__message_codec;
  const platform_channel = packages__flutter__src__services__text_editing_delta$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__text_editing_delta$46dart.src__services__message_codecs;
  const page_format = packages__pdf__src__pdf__page_format$46dart.src__pdf__page_format;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const method_channel_js = packages__printing__src__method_channel_js$46dart.src__method_channel_js;
  const raster$ = packages__printing__src__raster$46dart.src__raster;
  const printing_info = packages__printing__src__printing_info$46dart.src__printing_info;
  const printer$ = packages__printing__src__printer$46dart.src__printer;
  const plugin_platform_interface = packages__plugin_platform_interface__plugin_platform_interface$46dart.plugin_platform_interface;
  const print_job = packages__printing__src__print_job$46dart.src__print_job;
  var method_channel = Object.create(dart.library);
  var $interface = Object.create(dart.library);
  var $toString = dartx.toString;
  var $_set = dartx._set;
  var $add = dartx.add;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    MethodCallToFuture: () => (T.MethodCallToFuture = dart.constFn(dart.fnType(async.Future, [message_codec.MethodCall])))(),
    SyncIterableOfDiagnosticsNode: () => (T.SyncIterableOfDiagnosticsNode = dart.constFn(_js_helper.SyncIterable$(diagnostics.DiagnosticsNode)))(),
    IterableOfDiagnosticsNode: () => (T.IterableOfDiagnosticsNode = dart.constFn(core.Iterable$(diagnostics.DiagnosticsNode)))(),
    VoidToIterableOfDiagnosticsNode: () => (T.VoidToIterableOfDiagnosticsNode = dart.constFn(dart.fnType(T.IterableOfDiagnosticsNode(), [])))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    IterableOfString: () => (T.IterableOfString = dart.constFn(core.Iterable$(core.String)))(),
    IterableOfStringToIterableOfString: () => (T.IterableOfStringToIterableOfString = dart.constFn(dart.fnType(T.IterableOfString(), [T.IterableOfString()])))(),
    boolN: () => (T.boolN = dart.constFn(dart.nullable(core.bool)))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    FutureOrOfUint8List: () => (T.FutureOrOfUint8List = dart.constFn(async.FutureOr$(typed_data.Uint8List)))(),
    FutureOrNOfUint8List: () => (T.FutureOrNOfUint8List = dart.constFn(dart.nullable(T.FutureOrOfUint8List())))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    CompleterOfbool: () => (T.CompleterOfbool = dart.constFn(async.Completer$(core.bool)))(),
    JSArrayOfPrinter: () => (T.JSArrayOfPrinter = dart.constFn(_interceptors.JSArray$(printer$.Printer)))(),
    ListOfPrinter: () => (T.ListOfPrinter = dart.constFn(core.List$(printer$.Printer)))(),
    PrinterN: () => (T.PrinterN = dart.constFn(dart.nullable(printer$.Printer)))(),
    CompleterOfUint8List: () => (T.CompleterOfUint8List = dart.constFn(async.Completer$(typed_data.Uint8List)))(),
    StreamControllerOfPdfRaster: () => (T.StreamControllerOfPdfRaster = dart.constFn(async.StreamController$(raster$.PdfRaster)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(method_channel.MethodChannelPrinting._handleMethod, T.MethodCallToFuture());
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[3] || CT.C3
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[2] || CT.C2,
        [MethodChannel_name]: "net.nfet.printing"
      });
    }
  }, false);
  var C = Array(4).fill(void 0);
  var I = [
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/printing-5.9.3/lib/src/method_channel.dart",
    "package:printing/src/interface.dart",
    "package:printing/src/method_channel.dart"
  ];
  $interface.PrintingPlatform = class PrintingPlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      return $interface.PrintingPlatform._instance;
    }
    static set instance(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, $interface.PrintingPlatform._token);
      $interface.PrintingPlatform._instance = instance;
    }
  };
  ($interface.PrintingPlatform.new = function() {
    $interface.PrintingPlatform.__proto__.new.call(this, {token: $interface.PrintingPlatform._token});
    ;
  }).prototype = $interface.PrintingPlatform.prototype;
  dart.addTypeTests($interface.PrintingPlatform);
  dart.addTypeCaches($interface.PrintingPlatform);
  dart.setStaticGetterSignature($interface.PrintingPlatform, () => ['instance']);
  dart.setStaticSetterSignature($interface.PrintingPlatform, () => ['instance']);
  dart.setLibraryUri($interface.PrintingPlatform, I[1]);
  dart.setStaticFieldSignature($interface.PrintingPlatform, () => ['_token', '_instance']);
  dart.defineLazy($interface.PrintingPlatform, {
    /*$interface.PrintingPlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*$interface.PrintingPlatform._instance*/get _instance() {
      return new method_channel.MethodChannelPrinting.new();
    },
    set _instance(_) {}
  }, false);
  method_channel.MethodChannelPrinting = class MethodChannelPrinting extends $interface.PrintingPlatform {
    static ['_#new#tearOff']() {
      return new method_channel.MethodChannelPrinting.new();
    }
    static _handleMethod(call) {
      return async.async(dart.dynamic, function* _handleMethod() {
        switch (call.method) {
          case "onLayout":
            {
              let job = method_channel.MethodChannelPrinting._printJobs.getJob(core.int.as(dart.dsend(call.arguments, '_get', ["job"])));
              if (job == null) {
                return;
              }
              let format = new page_format.PdfPageFormat.new(core.double.as(dart.dsend(call.arguments, '_get', ["width"])), core.double.as(dart.dsend(call.arguments, '_get', ["height"])), {marginLeft: core.double.as(dart.dsend(call.arguments, '_get', ["marginLeft"])), marginTop: core.double.as(dart.dsend(call.arguments, '_get', ["marginTop"])), marginRight: core.double.as(dart.dsend(call.arguments, '_get', ["marginRight"])), marginBottom: core.double.as(dart.dsend(call.arguments, '_get', ["marginBottom"]))});
              let bytes = null;
              try {
                bytes = (yield dart.nullCheck(job.onLayout)(format));
              } catch (e$) {
                let e = dart.getThrown(e$);
                let s = dart.stackTrace(e$);
                if (core.Object.is(e)) {
                  let collector = null;
                  if (!dart.fn(() => {
                    collector = dart.fn(() => new (T.SyncIterableOfDiagnosticsNode()).new(function*() {
                      yield new diagnostics.StringProperty.new("PageFormat", format.toString());
                    }), T.VoidToIterableOfDiagnosticsNode());
                    return true;
                  }, T.VoidTobool())()) dart.assertFailed(null, I[0], 67, 18, "() {\n            collector = () sync* {\n              yield StringProperty('PageFormat', format.toString());\n            };\n            return true;\n          }()");
                  assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: e, stack: s, stackFilter: dart.fn(input => input, T.IterableOfStringToIterableOfString()), library: "printing", context: new assertions.ErrorDescription.new("while generating a PDF"), informationCollector: collector}));
                  if (job.useFFI) {
                    return method_channel_js.setErrorFfi(job, e[$toString]());
                  }
                  dart.rethrow(e$);
                } else
                  throw e$;
              }
              if (job.useFFI) {
                return method_channel_js.setDocumentFfi(job, bytes);
              }
              return _native_typed_data.NativeUint8List.fromList(bytes);
            }
          case "onCompleted":
            {
              let completed = T.boolN().as(dart.dsend(call.arguments, '_get', ["completed"]));
              let error = T.StringN().as(dart.dsend(call.arguments, '_get', ["error"]));
              let job = method_channel.MethodChannelPrinting._printJobs.getJob(core.int.as(dart.dsend(call.arguments, '_get', ["job"])));
              if (job != null) {
                if (completed === false && error != null) {
                  dart.nullCheck(job.onCompleted).completeError(error);
                } else {
                  dart.nullCheck(job.onCompleted).complete(completed);
                }
              }
              break;
            }
          case "onHtmlRendered":
            {
              let job = method_channel.MethodChannelPrinting._printJobs.getJob(core.int.as(dart.dsend(call.arguments, '_get', ["job"])));
              if (job != null) {
                dart.nullCheck(job.onHtmlRendered).complete(T.FutureOrNOfUint8List().as(dart.dsend(call.arguments, '_get', ["doc"])));
              }
              break;
            }
          case "onHtmlError":
            {
              let job = method_channel.MethodChannelPrinting._printJobs.getJob(core.int.as(dart.dsend(call.arguments, '_get', ["job"])));
              if (job != null) {
                dart.nullCheck(job.onHtmlRendered).completeError(core.Object.as(dart.dsend(call.arguments, '_get', ["error"])));
              }
              break;
            }
          case "onPageRasterized":
            {
              let job = method_channel.MethodChannelPrinting._printJobs.getJob(core.int.as(dart.dsend(call.arguments, '_get', ["job"])));
              if (job != null) {
                let raster = new raster$.PdfRaster.new(core.int.as(dart.dsend(call.arguments, '_get', ["width"])), core.int.as(dart.dsend(call.arguments, '_get', ["height"])), typed_data.Uint8List.as(dart.dsend(call.arguments, '_get', ["image"])));
                dart.nullCheck(job.onPageRasterized).add(raster);
              }
              break;
            }
          case "onPageRasterEnd":
            {
              let job = method_channel.MethodChannelPrinting._printJobs.getJob(core.int.as(dart.dsend(call.arguments, '_get', ["job"])));
              if (job != null) {
                let error = dart.dsend(call.arguments, '_get', ["error"]);
                if (error != null) {
                  dart.nullCheck(job.onPageRasterized).addError(core.Object.as(error));
                }
                yield dart.nullCheck(job.onPageRasterized).close();
                method_channel.MethodChannelPrinting._printJobs.remove(job.index);
              }
              break;
            }
        }
      });
    }
    info() {
      return async.async(printing_info.PrintingInfo, function* info() {
        method_channel._channel.setMethodCallHandler(C[0] || CT.C0);
        let result = null;
        try {
          result = (yield method_channel._channel.invokeMethod(core.Map, "printingInfo", new (T.IdentityMapOfString$dynamic()).new()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            if (!dart.fn(() => {
              core.print("Error getting printing info: " + dart.str(e));
              return true;
            }, T.VoidTobool())()) dart.assertFailed(null, I[0], 155, 14, "() {\n        // ignore: avoid_print\n        print('Error getting printing info: $e');\n        return true;\n      }()");
            return printing_info.PrintingInfo.unavailable;
          } else
            throw e$;
        }
        return printing_info.PrintingInfo.fromMap(dart.nullCheck(result));
      });
    }
    layoutPdf(printer, onLayout, name, format, dynamicLayout, usePrinterSettings) {
      return async.async(core.bool, function* layoutPdf() {
        let job = method_channel.MethodChannelPrinting._printJobs.add({onCompleted: T.CompleterOfbool().new(), onLayout: onLayout});
        let params = (() => {
          let t2 = new (T.IdentityMapOfString$dynamic()).new();
          if (printer != null) t2[$_set]("printer", printer.url);
          t2[$_set]("name", name);
          t2[$_set]("job", job.index);
          t2[$_set]("width", format.width);
          t2[$_set]("height", format.height);
          t2[$_set]("marginLeft", format.marginLeft);
          t2[$_set]("marginTop", format.marginTop);
          t2[$_set]("marginRight", format.marginRight);
          t2[$_set]("marginBottom", format.marginBottom);
          t2[$_set]("dynamic", dynamicLayout);
          t2[$_set]("usePrinterSettings", usePrinterSettings);
          return t2;
        })();
        yield method_channel._channel.invokeMethod(core.int, "printPdf", params);
        try {
          return yield dart.nullCheck(job.onCompleted).future;
        } finally {
          method_channel.MethodChannelPrinting._printJobs.remove(job.index);
        }
      });
    }
    listPrinters() {
      return async.async(T.ListOfPrinter(), function* listPrinters() {
        let params = new (T.IdentityMapOfString$dynamic()).new();
        let list = (yield method_channel._channel.invokeMethod(core.List, "listPrinters", params));
        let printers = T.JSArrayOfPrinter().of([]);
        for (let printer of dart.nullCheck(list)) {
          printers[$add](printer$.Printer.fromMap(core.Map.as(printer)));
        }
        return printers;
      });
    }
    pickPrinter(bounds) {
      return async.async(T.PrinterN(), function* pickPrinter() {
        let params = new (T.IdentityMapOfString$dynamic()).from(["x", bounds.left, "y", bounds.top, "w", bounds.width, "h", bounds.height]);
        let printer = (yield method_channel._channel.invokeMethod(core.Map, "pickPrinter", params));
        if (printer == null) {
          return null;
        }
        return printer$.Printer.fromMap(printer);
      });
    }
    sharePdf(bytes, filename, bounds, subject, body, emails) {
      return async.async(core.bool, function* sharePdf() {
        let params = new (T.IdentityMapOfString$dynamic()).from(["doc", _native_typed_data.NativeUint8List.fromList(bytes), "name", filename, "subject", subject, "body", body, "emails", emails, "x", bounds.left, "y", bounds.top, "w", bounds.width, "h", bounds.height]);
        return (yield method_channel._channel.invokeMethod(core.int, "sharePdf", params)) !== 0;
      });
    }
    convertHtml(html, baseUrl, format) {
      return async.async(typed_data.Uint8List, function* convertHtml() {
        let job = method_channel.MethodChannelPrinting._printJobs.add({onHtmlRendered: T.CompleterOfUint8List().new()});
        let params = new (T.IdentityMapOfString$dynamic()).from(["html", html, "baseUrl", baseUrl, "width", format.width, "height", format.height, "marginLeft", format.marginLeft, "marginTop", format.marginTop, "marginRight", format.marginRight, "marginBottom", format.marginBottom, "job", job.index]);
        yield method_channel._channel.invokeMethod(dart.void, "convertHtml", params);
        let result = (yield dart.nullCheck(job.onHtmlRendered).future);
        method_channel.MethodChannelPrinting._printJobs.remove(job.index);
        return result;
      });
    }
    raster(document, pages, dpi) {
      let job = method_channel.MethodChannelPrinting._printJobs.add({onPageRasterized: T.StreamControllerOfPdfRaster().new()});
      let params = new (T.IdentityMapOfString$dynamic()).from(["doc", _native_typed_data.NativeUint8List.fromList(document), "pages", pages, "scale", dpi / 72, "job", job.index]);
      method_channel._channel.invokeMethod(dart.void, "rasterPdf", params);
      return dart.nullCheck(job.onPageRasterized).stream;
    }
  };
  (method_channel.MethodChannelPrinting.new = function() {
    method_channel.MethodChannelPrinting.__proto__.new.call(this);
    method_channel._channel.setMethodCallHandler(C[0] || CT.C0);
  }).prototype = method_channel.MethodChannelPrinting.prototype;
  dart.addTypeTests(method_channel.MethodChannelPrinting);
  dart.addTypeCaches(method_channel.MethodChannelPrinting);
  dart.setMethodSignature(method_channel.MethodChannelPrinting, () => ({
    __proto__: dart.getMethods(method_channel.MethodChannelPrinting.__proto__),
    info: dart.fnType(async.Future$(printing_info.PrintingInfo), []),
    layoutPdf: dart.fnType(async.Future$(core.bool), [dart.nullable(printer$.Printer), dart.fnType(async.FutureOr$(typed_data.Uint8List), [page_format.PdfPageFormat]), core.String, page_format.PdfPageFormat, core.bool, core.bool]),
    listPrinters: dart.fnType(async.Future$(core.List$(printer$.Printer)), []),
    pickPrinter: dart.fnType(async.Future$(dart.nullable(printer$.Printer)), [ui.Rect]),
    sharePdf: dart.fnType(async.Future$(core.bool), [typed_data.Uint8List, core.String, ui.Rect, dart.nullable(core.String), dart.nullable(core.String), dart.nullable(core.List$(core.String))]),
    convertHtml: dart.fnType(async.Future$(typed_data.Uint8List), [core.String, dart.nullable(core.String), page_format.PdfPageFormat]),
    raster: dart.fnType(async.Stream$(raster$.PdfRaster), [typed_data.Uint8List, dart.nullable(core.List$(core.int)), core.double])
  }));
  dart.setStaticMethodSignature(method_channel.MethodChannelPrinting, () => ['_handleMethod']);
  dart.setLibraryUri(method_channel.MethodChannelPrinting, I[2]);
  dart.setStaticFieldSignature(method_channel.MethodChannelPrinting, () => ['_printJobs']);
  dart.defineLazy(method_channel.MethodChannelPrinting, {
    /*method_channel.MethodChannelPrinting._printJobs*/get _printJobs() {
      return new print_job.PrintJobs.new();
    }
  }, false);
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  dart.defineLazy(method_channel, {
    /*method_channel._channel*/get _channel() {
      return C[1] || CT.C1;
    }
  }, false);
  dart.trackLibraries("packages/printing/src/method_channel.dart", {
    "package:printing/src/method_channel.dart": method_channel,
    "package:printing/src/interface.dart": $interface
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["interface.dart","method_channel.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../packages/printing/src/method_channel.dart.lib.js"}');
  // Exports:
  return {
    src__method_channel: method_channel,
    src__interface: $interface
  };
}));

//# sourceMappingURL=method_channel.dart.lib.js.map
