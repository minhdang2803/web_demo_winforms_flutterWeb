define(['dart_sdk', 'packages/flutter/src/material/icon_button.dart', 'packages/flutter/src/services/text_editing_delta.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/widgets/form.dart', 'packages/flutter/src/widgets/title.dart', 'packages/flutter/src/material/text_field.dart'], (function load__packages__flutter__src__material__text_form_field_dart(dart_sdk, packages__flutter__src__material__icon_button$46dart, packages__flutter__src__services__text_editing_delta$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__widgets__form$46dart, packages__flutter__src__widgets__title$46dart, packages__flutter__src__material__text_field$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const input_decorator = packages__flutter__src__material__icon_button$46dart.src__material__input_decorator;
  const theme = packages__flutter__src__material__icon_button$46dart.src__material__theme;
  const text_input = packages__flutter__src__services__text_editing_delta$46dart.src__services__text_input;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const form = packages__flutter__src__widgets__form$46dart.src__widgets__form;
  const restoration = packages__flutter__src__widgets__title$46dart.src__widgets__restoration;
  const widget_inspector = packages__flutter__src__widgets__title$46dart.src__widgets__widget_inspector;
  const editable_text = packages__flutter__src__widgets__title$46dart.src__widgets__editable_text;
  const restoration_properties = packages__flutter__src__widgets__title$46dart.src__widgets__restoration_properties;
  const text_field = packages__flutter__src__material__text_field$46dart.src__material__text_field;
  var text_form_field = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    StringTovoid: () => (T.StringTovoid = dart.constFn(dart.fnType(dart.void, [core.String])))(),
    FormFieldStateOfString: () => (T.FormFieldStateOfString = dart.constFn(form.FormFieldState$(core.String)))(),
    FormFieldStateOfStringToUnmanagedRestorationScope: () => (T.FormFieldStateOfStringToUnmanagedRestorationScope = dart.constFn(dart.fnType(restoration.UnmanagedRestorationScope, [T.FormFieldStateOfString()])))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: input_decorator.InputDecoration.prototype,
        [InputDecoration_constraints]: null,
        [InputDecoration_alignLabelWithHint]: null,
        [InputDecoration_semanticCounterText]: null,
        [InputDecoration_enabled]: true,
        [InputDecoration_border]: null,
        [InputDecoration_enabledBorder]: null,
        [InputDecoration_disabledBorder]: null,
        [InputDecoration_focusedErrorBorder]: null,
        [InputDecoration_focusedBorder]: null,
        [InputDecoration_errorBorder]: null,
        [InputDecoration_hoverColor]: null,
        [InputDecoration_focusColor]: null,
        [InputDecoration_fillColor]: null,
        [InputDecoration_filled]: null,
        [InputDecoration_counterStyle]: null,
        [InputDecoration_counter]: null,
        [InputDecoration_counterText]: null,
        [InputDecoration_suffixIconConstraints]: null,
        [InputDecoration_suffixIconColor]: null,
        [InputDecoration_suffixStyle]: null,
        [InputDecoration_suffixText]: null,
        [InputDecoration_suffix]: null,
        [InputDecoration_suffixIcon]: null,
        [InputDecoration_prefixIconColor]: null,
        [InputDecoration_prefixStyle]: null,
        [InputDecoration_prefixText]: null,
        [InputDecoration_prefix]: null,
        [InputDecoration_prefixIconConstraints]: null,
        [InputDecoration_prefixIcon]: null,
        [InputDecoration_isCollapsed]: false,
        [InputDecoration_contentPadding]: null,
        [InputDecoration_isDense]: null,
        [InputDecoration_floatingLabelAlignment]: null,
        [InputDecoration_floatingLabelBehavior]: null,
        [InputDecoration_errorMaxLines]: null,
        [InputDecoration_errorStyle]: null,
        [InputDecoration_errorText]: null,
        [InputDecoration_hintMaxLines]: null,
        [InputDecoration_hintTextDirection]: null,
        [InputDecoration_hintStyle]: null,
        [InputDecoration_hintText]: null,
        [InputDecoration_helperMaxLines]: null,
        [InputDecoration_helperStyle]: null,
        [InputDecoration_helperText]: null,
        [InputDecoration_floatingLabelStyle]: null,
        [InputDecoration_labelStyle]: null,
        [InputDecoration_labelText]: null,
        [InputDecoration_label]: null,
        [InputDecoration_iconColor]: null,
        [InputDecoration_icon]: null
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: text_input.TextCapitalization.prototype,
        [_Enum__name]: "none",
        [_Enum_index]: 3
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_Enum__name]: "start",
        [_Enum_index]: 4
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 20,
        [EdgeInsets_right]: 20,
        [EdgeInsets_top]: 20,
        [EdgeInsets_left]: 20
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "TextField",
        [_Location_column]: 21,
        [_Location_line]: 189,
        [_Location_file]: "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/material/text_form_field.dart"
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "UnmanagedRestorationScope",
        [_Location_column]: 19,
        [_Location_line]: 187,
        [_Location_file]: "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/material/text_form_field.dart"
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "TextFormField",
        [_Location_column]: 3,
        [_Location_line]: 97,
        [_Location_file]: "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/material/text_form_field.dart"
      });
    }
  }, false);
  var C = Array(7).fill(void 0);
  var I = [
    "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/material/text_form_field.dart",
    "package:flutter/src/material/text_form_field.dart"
  ];
  var controller$ = dart.privateName(text_form_field, "TextFormField.controller");
  var InputDecoration_constraints = dart.privateName(input_decorator, "InputDecoration.constraints");
  var InputDecoration_alignLabelWithHint = dart.privateName(input_decorator, "InputDecoration.alignLabelWithHint");
  var InputDecoration_semanticCounterText = dart.privateName(input_decorator, "InputDecoration.semanticCounterText");
  var InputDecoration_enabled = dart.privateName(input_decorator, "InputDecoration.enabled");
  var InputDecoration_border = dart.privateName(input_decorator, "InputDecoration.border");
  var InputDecoration_enabledBorder = dart.privateName(input_decorator, "InputDecoration.enabledBorder");
  var InputDecoration_disabledBorder = dart.privateName(input_decorator, "InputDecoration.disabledBorder");
  var InputDecoration_focusedErrorBorder = dart.privateName(input_decorator, "InputDecoration.focusedErrorBorder");
  var InputDecoration_focusedBorder = dart.privateName(input_decorator, "InputDecoration.focusedBorder");
  var InputDecoration_errorBorder = dart.privateName(input_decorator, "InputDecoration.errorBorder");
  var InputDecoration_hoverColor = dart.privateName(input_decorator, "InputDecoration.hoverColor");
  var InputDecoration_focusColor = dart.privateName(input_decorator, "InputDecoration.focusColor");
  var InputDecoration_fillColor = dart.privateName(input_decorator, "InputDecoration.fillColor");
  var InputDecoration_filled = dart.privateName(input_decorator, "InputDecoration.filled");
  var InputDecoration_counterStyle = dart.privateName(input_decorator, "InputDecoration.counterStyle");
  var InputDecoration_counter = dart.privateName(input_decorator, "InputDecoration.counter");
  var InputDecoration_counterText = dart.privateName(input_decorator, "InputDecoration.counterText");
  var InputDecoration_suffixIconConstraints = dart.privateName(input_decorator, "InputDecoration.suffixIconConstraints");
  var InputDecoration_suffixIconColor = dart.privateName(input_decorator, "InputDecoration.suffixIconColor");
  var InputDecoration_suffixStyle = dart.privateName(input_decorator, "InputDecoration.suffixStyle");
  var InputDecoration_suffixText = dart.privateName(input_decorator, "InputDecoration.suffixText");
  var InputDecoration_suffix = dart.privateName(input_decorator, "InputDecoration.suffix");
  var InputDecoration_suffixIcon = dart.privateName(input_decorator, "InputDecoration.suffixIcon");
  var InputDecoration_prefixIconColor = dart.privateName(input_decorator, "InputDecoration.prefixIconColor");
  var InputDecoration_prefixStyle = dart.privateName(input_decorator, "InputDecoration.prefixStyle");
  var InputDecoration_prefixText = dart.privateName(input_decorator, "InputDecoration.prefixText");
  var InputDecoration_prefix = dart.privateName(input_decorator, "InputDecoration.prefix");
  var InputDecoration_prefixIconConstraints = dart.privateName(input_decorator, "InputDecoration.prefixIconConstraints");
  var InputDecoration_prefixIcon = dart.privateName(input_decorator, "InputDecoration.prefixIcon");
  var InputDecoration_isCollapsed = dart.privateName(input_decorator, "InputDecoration.isCollapsed");
  var InputDecoration_contentPadding = dart.privateName(input_decorator, "InputDecoration.contentPadding");
  var InputDecoration_isDense = dart.privateName(input_decorator, "InputDecoration.isDense");
  var InputDecoration_floatingLabelAlignment = dart.privateName(input_decorator, "InputDecoration.floatingLabelAlignment");
  var InputDecoration_floatingLabelBehavior = dart.privateName(input_decorator, "InputDecoration.floatingLabelBehavior");
  var InputDecoration_errorMaxLines = dart.privateName(input_decorator, "InputDecoration.errorMaxLines");
  var InputDecoration_errorStyle = dart.privateName(input_decorator, "InputDecoration.errorStyle");
  var InputDecoration_errorText = dart.privateName(input_decorator, "InputDecoration.errorText");
  var InputDecoration_hintMaxLines = dart.privateName(input_decorator, "InputDecoration.hintMaxLines");
  var InputDecoration_hintTextDirection = dart.privateName(input_decorator, "InputDecoration.hintTextDirection");
  var InputDecoration_hintStyle = dart.privateName(input_decorator, "InputDecoration.hintStyle");
  var InputDecoration_hintText = dart.privateName(input_decorator, "InputDecoration.hintText");
  var InputDecoration_helperMaxLines = dart.privateName(input_decorator, "InputDecoration.helperMaxLines");
  var InputDecoration_helperStyle = dart.privateName(input_decorator, "InputDecoration.helperStyle");
  var InputDecoration_helperText = dart.privateName(input_decorator, "InputDecoration.helperText");
  var InputDecoration_floatingLabelStyle = dart.privateName(input_decorator, "InputDecoration.floatingLabelStyle");
  var InputDecoration_labelStyle = dart.privateName(input_decorator, "InputDecoration.labelStyle");
  var InputDecoration_labelText = dart.privateName(input_decorator, "InputDecoration.labelText");
  var InputDecoration_label = dart.privateName(input_decorator, "InputDecoration.label");
  var InputDecoration_iconColor = dart.privateName(input_decorator, "InputDecoration.iconColor");
  var InputDecoration_icon = dart.privateName(input_decorator, "InputDecoration.icon");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  var _effectiveController = dart.privateName(text_form_field, "_effectiveController");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  text_form_field.TextFormField = class TextFormField extends form.FormField$(core.String) {
    get controller() {
      return this[controller$];
    }
    set controller(value) {
      super.controller = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let controller = opts && 'controller' in opts ? opts.controller : null;
      let initialValue = opts && 'initialValue' in opts ? opts.initialValue : null;
      let focusNode = opts && 'focusNode' in opts ? opts.focusNode : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : C[0] || CT.C0;
      let keyboardType = opts && 'keyboardType' in opts ? opts.keyboardType : null;
      let textCapitalization = opts && 'textCapitalization' in opts ? opts.textCapitalization : C[1] || CT.C1;
      let textInputAction = opts && 'textInputAction' in opts ? opts.textInputAction : null;
      let style = opts && 'style' in opts ? opts.style : null;
      let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[2] || CT.C2;
      let textAlignVertical = opts && 'textAlignVertical' in opts ? opts.textAlignVertical : null;
      let autofocus = opts && 'autofocus' in opts ? opts.autofocus : false;
      let readOnly = opts && 'readOnly' in opts ? opts.readOnly : false;
      let toolbarOptions = opts && 'toolbarOptions' in opts ? opts.toolbarOptions : null;
      let showCursor = opts && 'showCursor' in opts ? opts.showCursor : null;
      let obscuringCharacter = opts && 'obscuringCharacter' in opts ? opts.obscuringCharacter : "•";
      let obscureText = opts && 'obscureText' in opts ? opts.obscureText : false;
      let autocorrect = opts && 'autocorrect' in opts ? opts.autocorrect : true;
      let smartDashesType = opts && 'smartDashesType' in opts ? opts.smartDashesType : null;
      let smartQuotesType = opts && 'smartQuotesType' in opts ? opts.smartQuotesType : null;
      let enableSuggestions = opts && 'enableSuggestions' in opts ? opts.enableSuggestions : true;
      let maxLengthEnforcement = opts && 'maxLengthEnforcement' in opts ? opts.maxLengthEnforcement : null;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : 1;
      let minLines = opts && 'minLines' in opts ? opts.minLines : null;
      let expands = opts && 'expands' in opts ? opts.expands : false;
      let maxLength = opts && 'maxLength' in opts ? opts.maxLength : null;
      let onChanged = opts && 'onChanged' in opts ? opts.onChanged : null;
      let onTap = opts && 'onTap' in opts ? opts.onTap : null;
      let onEditingComplete = opts && 'onEditingComplete' in opts ? opts.onEditingComplete : null;
      let onFieldSubmitted = opts && 'onFieldSubmitted' in opts ? opts.onFieldSubmitted : null;
      let onSaved = opts && 'onSaved' in opts ? opts.onSaved : null;
      let validator = opts && 'validator' in opts ? opts.validator : null;
      let inputFormatters = opts && 'inputFormatters' in opts ? opts.inputFormatters : null;
      let enabled = opts && 'enabled' in opts ? opts.enabled : null;
      let cursorWidth = opts && 'cursorWidth' in opts ? opts.cursorWidth : 2;
      let cursorHeight = opts && 'cursorHeight' in opts ? opts.cursorHeight : null;
      let cursorRadius = opts && 'cursorRadius' in opts ? opts.cursorRadius : null;
      let cursorColor = opts && 'cursorColor' in opts ? opts.cursorColor : null;
      let keyboardAppearance = opts && 'keyboardAppearance' in opts ? opts.keyboardAppearance : null;
      let scrollPadding = opts && 'scrollPadding' in opts ? opts.scrollPadding : C[3] || CT.C3;
      let enableInteractiveSelection = opts && 'enableInteractiveSelection' in opts ? opts.enableInteractiveSelection : null;
      let selectionControls = opts && 'selectionControls' in opts ? opts.selectionControls : null;
      let buildCounter = opts && 'buildCounter' in opts ? opts.buildCounter : null;
      let scrollPhysics = opts && 'scrollPhysics' in opts ? opts.scrollPhysics : null;
      let autofillHints = opts && 'autofillHints' in opts ? opts.autofillHints : null;
      let autovalidateMode = opts && 'autovalidateMode' in opts ? opts.autovalidateMode : null;
      let scrollController = opts && 'scrollController' in opts ? opts.scrollController : null;
      let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
      let enableIMEPersonalizedLearning = opts && 'enableIMEPersonalizedLearning' in opts ? opts.enableIMEPersonalizedLearning : true;
      let mouseCursor = opts && 'mouseCursor' in opts ? opts.mouseCursor : null;
      return new text_form_field.TextFormField.new({key: key, controller: controller, initialValue: initialValue, focusNode: focusNode, decoration: decoration, keyboardType: keyboardType, textCapitalization: textCapitalization, textInputAction: textInputAction, style: style, strutStyle: strutStyle, textDirection: textDirection, textAlign: textAlign, textAlignVertical: textAlignVertical, autofocus: autofocus, readOnly: readOnly, toolbarOptions: toolbarOptions, showCursor: showCursor, obscuringCharacter: obscuringCharacter, obscureText: obscureText, autocorrect: autocorrect, smartDashesType: smartDashesType, smartQuotesType: smartQuotesType, enableSuggestions: enableSuggestions, maxLengthEnforcement: maxLengthEnforcement, maxLines: maxLines, minLines: minLines, expands: expands, maxLength: maxLength, onChanged: onChanged, onTap: onTap, onEditingComplete: onEditingComplete, onFieldSubmitted: onFieldSubmitted, onSaved: onSaved, validator: validator, inputFormatters: inputFormatters, enabled: enabled, cursorWidth: cursorWidth, cursorHeight: cursorHeight, cursorRadius: cursorRadius, cursorColor: cursorColor, keyboardAppearance: keyboardAppearance, scrollPadding: scrollPadding, enableInteractiveSelection: enableInteractiveSelection, selectionControls: selectionControls, buildCounter: buildCounter, scrollPhysics: scrollPhysics, autofillHints: autofillHints, autovalidateMode: autovalidateMode, scrollController: scrollController, restorationId: restorationId, enableIMEPersonalizedLearning: enableIMEPersonalizedLearning, mouseCursor: mouseCursor, $creationLocationd_0dea112b090073317d4: C[6] || CT.C6});
    }
    createState() {
      return new text_form_field._TextFormFieldState.new();
    }
  };
  (text_form_field.TextFormField.new = function(opts) {
    let t0, t1, t0$, t0$0, t0$1;
    let key = opts && 'key' in opts ? opts.key : null;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let initialValue = opts && 'initialValue' in opts ? opts.initialValue : null;
    let focusNode = opts && 'focusNode' in opts ? opts.focusNode : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : C[0] || CT.C0;
    let keyboardType = opts && 'keyboardType' in opts ? opts.keyboardType : null;
    let textCapitalization = opts && 'textCapitalization' in opts ? opts.textCapitalization : C[1] || CT.C1;
    let textInputAction = opts && 'textInputAction' in opts ? opts.textInputAction : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[2] || CT.C2;
    let textAlignVertical = opts && 'textAlignVertical' in opts ? opts.textAlignVertical : null;
    let autofocus = opts && 'autofocus' in opts ? opts.autofocus : false;
    let readOnly = opts && 'readOnly' in opts ? opts.readOnly : false;
    let toolbarOptions = opts && 'toolbarOptions' in opts ? opts.toolbarOptions : null;
    let showCursor = opts && 'showCursor' in opts ? opts.showCursor : null;
    let obscuringCharacter = opts && 'obscuringCharacter' in opts ? opts.obscuringCharacter : "•";
    let obscureText = opts && 'obscureText' in opts ? opts.obscureText : false;
    let autocorrect = opts && 'autocorrect' in opts ? opts.autocorrect : true;
    let smartDashesType = opts && 'smartDashesType' in opts ? opts.smartDashesType : null;
    let smartQuotesType = opts && 'smartQuotesType' in opts ? opts.smartQuotesType : null;
    let enableSuggestions = opts && 'enableSuggestions' in opts ? opts.enableSuggestions : true;
    let maxLengthEnforcement = opts && 'maxLengthEnforcement' in opts ? opts.maxLengthEnforcement : null;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : 1;
    let minLines = opts && 'minLines' in opts ? opts.minLines : null;
    let expands = opts && 'expands' in opts ? opts.expands : false;
    let maxLength = opts && 'maxLength' in opts ? opts.maxLength : null;
    let onChanged = opts && 'onChanged' in opts ? opts.onChanged : null;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    let onEditingComplete = opts && 'onEditingComplete' in opts ? opts.onEditingComplete : null;
    let onFieldSubmitted = opts && 'onFieldSubmitted' in opts ? opts.onFieldSubmitted : null;
    let onSaved = opts && 'onSaved' in opts ? opts.onSaved : null;
    let validator = opts && 'validator' in opts ? opts.validator : null;
    let inputFormatters = opts && 'inputFormatters' in opts ? opts.inputFormatters : null;
    let enabled = opts && 'enabled' in opts ? opts.enabled : null;
    let cursorWidth = opts && 'cursorWidth' in opts ? opts.cursorWidth : 2;
    let cursorHeight = opts && 'cursorHeight' in opts ? opts.cursorHeight : null;
    let cursorRadius = opts && 'cursorRadius' in opts ? opts.cursorRadius : null;
    let cursorColor = opts && 'cursorColor' in opts ? opts.cursorColor : null;
    let keyboardAppearance = opts && 'keyboardAppearance' in opts ? opts.keyboardAppearance : null;
    let scrollPadding = opts && 'scrollPadding' in opts ? opts.scrollPadding : C[3] || CT.C3;
    let enableInteractiveSelection = opts && 'enableInteractiveSelection' in opts ? opts.enableInteractiveSelection : null;
    let selectionControls = opts && 'selectionControls' in opts ? opts.selectionControls : null;
    let buildCounter = opts && 'buildCounter' in opts ? opts.buildCounter : null;
    let scrollPhysics = opts && 'scrollPhysics' in opts ? opts.scrollPhysics : null;
    let autofillHints = opts && 'autofillHints' in opts ? opts.autofillHints : null;
    let autovalidateMode = opts && 'autovalidateMode' in opts ? opts.autovalidateMode : null;
    let scrollController = opts && 'scrollController' in opts ? opts.scrollController : null;
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let enableIMEPersonalizedLearning = opts && 'enableIMEPersonalizedLearning' in opts ? opts.enableIMEPersonalizedLearning : true;
    let mouseCursor = opts && 'mouseCursor' in opts ? opts.mouseCursor : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[controller$] = controller;
    if (!(initialValue == null || controller == null)) dart.assertFailed(null, I[0], 150, 15, "initialValue == null || controller == null");
    if (!(textAlign !== null)) dart.assertFailed(null, I[0], 151, 15, "textAlign != null");
    if (!(autofocus !== null)) dart.assertFailed(null, I[0], 152, 15, "autofocus != null");
    if (!(readOnly !== null)) dart.assertFailed(null, I[0], 153, 15, "readOnly != null");
    if (!(obscuringCharacter !== null && obscuringCharacter.length === 1)) dart.assertFailed(null, I[0], 154, 15, "obscuringCharacter != null && obscuringCharacter.length == 1");
    if (!(obscureText !== null)) dart.assertFailed(null, I[0], 155, 15, "obscureText != null");
    if (!(autocorrect !== null)) dart.assertFailed(null, I[0], 156, 15, "autocorrect != null");
    if (!(enableSuggestions !== null)) dart.assertFailed(null, I[0], 157, 15, "enableSuggestions != null");
    if (!(scrollPadding !== null)) dart.assertFailed(null, I[0], 158, 15, "scrollPadding != null");
    if (!(maxLines == null || dart.notNull(maxLines) > 0)) dart.assertFailed(null, I[0], 159, 15, "maxLines == null || maxLines > 0");
    if (!(minLines == null || dart.notNull(minLines) > 0)) dart.assertFailed(null, I[0], 160, 15, "minLines == null || minLines > 0");
    if (!(maxLines == null || minLines == null || dart.notNull(maxLines) >= dart.notNull(minLines))) dart.assertFailed("minLines can't be greater than maxLines", I[0], 162, 10, "(maxLines == null) || (minLines == null) || (maxLines >= minLines)");
    if (!(expands !== null)) dart.assertFailed(null, I[0], 165, 15, "expands != null");
    if (!(!expands || maxLines == null && minLines == null)) dart.assertFailed("minLines and maxLines must be null when expands is true.", I[0], 167, 10, "!expands || (maxLines == null && minLines == null)");
    if (!(!obscureText || maxLines === 1)) dart.assertFailed("Obscured fields cannot be multiline.", I[0], 170, 15, "!obscureText || maxLines == 1");
    if (!(maxLength == null || maxLength === -1 || dart.notNull(maxLength) > 0)) dart.assertFailed(null, I[0], 171, 15, "maxLength == null || maxLength == TextField.noMaxLength || maxLength > 0");
    if (!(enableIMEPersonalizedLearning !== null)) dart.assertFailed(null, I[0], 172, 15, "enableIMEPersonalizedLearning != null");
    text_form_field.TextFormField.__proto__.new.call(this, {initialValue: controller != null ? controller.text : (t0 = initialValue, t0 == null ? "" : t0), enabled: (t0$0 = (t0$ = enabled, t0$ == null ? (t1 = decoration, t1 == null ? null : t1.enabled) : t0$), t0$0 == null ? true : t0$0), autovalidateMode: (t0$1 = autovalidateMode, t0$1 == null ? form.AutovalidateMode.disabled : t0$1), builder: dart.fn(field => {
        let t0, t0$, t0$0, t1, t0$1, t0$2, t0$3;
        let state = text_form_field._TextFormFieldState.as(field);
        let effectiveDecoration = (t0 = decoration, t0 == null ? C[0] || CT.C0 : t0).applyDefaults(theme.Theme.of(field.context).inputDecorationTheme);
        function onChangedHandler(value) {
          field.didChange(value);
          if (onChanged != null) {
            onChanged(value);
          }
        }
        dart.fn(onChangedHandler, T.StringTovoid());
        return new restoration.UnmanagedRestorationScope.new({bucket: field.bucket, child: new text_field.TextField.new({restorationId: restorationId, controller: state[_effectiveController], focusNode: focusNode, decoration: effectiveDecoration.copyWith({errorText: field.errorText}), keyboardType: keyboardType, textInputAction: textInputAction, style: style, strutStyle: strutStyle, textAlign: textAlign, textAlignVertical: textAlignVertical, textDirection: textDirection, textCapitalization: textCapitalization, autofocus: autofocus, toolbarOptions: toolbarOptions, readOnly: readOnly, showCursor: showCursor, obscuringCharacter: obscuringCharacter, obscureText: obscureText, autocorrect: autocorrect, smartDashesType: (t0$ = smartDashesType, t0$ == null ? obscureText ? text_input.SmartDashesType.disabled : text_input.SmartDashesType.enabled : t0$), smartQuotesType: (t0$0 = smartQuotesType, t0$0 == null ? obscureText ? text_input.SmartQuotesType.disabled : text_input.SmartQuotesType.enabled : t0$0), enableSuggestions: enableSuggestions, maxLengthEnforcement: maxLengthEnforcement, maxLines: maxLines, minLines: minLines, expands: expands, maxLength: maxLength, onChanged: onChangedHandler, onTap: onTap, onEditingComplete: onEditingComplete, onSubmitted: onFieldSubmitted, inputFormatters: inputFormatters, enabled: (t0$2 = (t0$1 = enabled, t0$1 == null ? (t1 = decoration, t1 == null ? null : t1.enabled) : t0$1), t0$2 == null ? true : t0$2), cursorWidth: cursorWidth, cursorHeight: cursorHeight, cursorRadius: cursorRadius, cursorColor: cursorColor, scrollPadding: scrollPadding, scrollPhysics: scrollPhysics, keyboardAppearance: keyboardAppearance, enableInteractiveSelection: (t0$3 = enableInteractiveSelection, t0$3 == null ? !obscureText || !readOnly : t0$3), selectionControls: selectionControls, buildCounter: buildCounter, autofillHints: autofillHints, scrollController: scrollController, enableIMEPersonalizedLearning: enableIMEPersonalizedLearning, mouseCursor: mouseCursor, $creationLocationd_0dea112b090073317d4: C[4] || CT.C4}), $creationLocationd_0dea112b090073317d4: C[5] || CT.C5});
      }, T.FormFieldStateOfStringToUnmanagedRestorationScope()), key: key, onSaved: onSaved, validator: validator, restorationId: restorationId, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = text_form_field.TextFormField.prototype;
  dart.addTypeTests(text_form_field.TextFormField);
  dart.addTypeCaches(text_form_field.TextFormField);
  dart.setLibraryUri(text_form_field.TextFormField, I[1]);
  dart.setFieldSignature(text_form_field.TextFormField, () => ({
    __proto__: dart.getFields(text_form_field.TextFormField.__proto__),
    controller: dart.finalFieldType(dart.nullable(editable_text.TextEditingController))
  }));
  var _controller = dart.privateName(text_form_field, "_controller");
  var _textFormField = dart.privateName(text_form_field, "_textFormField");
  var _registerController = dart.privateName(text_form_field, "_registerController");
  var _createLocalController = dart.privateName(text_form_field, "_createLocalController");
  var _handleControllerChanged = dart.privateName(text_form_field, "_handleControllerChanged");
  text_form_field._TextFormFieldState = class _TextFormFieldState extends form.FormFieldState$(core.String) {
    get [_effectiveController]() {
      let t0;
      t0 = this[_textFormField].controller;
      return t0 == null ? dart.nullCheck(this[_controller]).value : t0;
    }
    get [_textFormField]() {
      return text_form_field.TextFormField.as(super.widget);
    }
    restoreState(oldBucket, initialRestore) {
      super.restoreState(oldBucket, initialRestore);
      if (this[_controller] != null) {
        this[_registerController]();
      }
      this.setValue(this[_effectiveController].text);
    }
    [_registerController]() {
      if (!(this[_controller] != null)) dart.assertFailed(null, I[0], 271, 12, "_controller != null");
      this.registerForRestoration(dart.nullCheck(this[_controller]), "controller");
    }
    [_createLocalController](value = null) {
      if (!(this[_controller] == null)) dart.assertFailed(null, I[0], 276, 12, "_controller == null");
      this[_controller] = value == null ? restoration_properties.RestorableTextEditingController.new() : new restoration_properties.RestorableTextEditingController.fromValue(value);
      if (!this.restorePending) {
        this[_registerController]();
      }
    }
    initState() {
      super.initState();
      if (this[_textFormField].controller == null) {
        this[_createLocalController](this.widget.initialValue != null ? new text_input.TextEditingValue.new({text: dart.nullCheck(this.widget.initialValue)}) : null);
      } else {
        dart.nullCheck(this[_textFormField].controller).addListener(dart.bind(this, _handleControllerChanged));
      }
    }
    didUpdateWidget(oldWidget) {
      let t0, t0$;
      text_form_field.TextFormField.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      if (!dart.equals(this[_textFormField].controller, oldWidget.controller)) {
        t0 = oldWidget.controller;
        t0 == null ? null : t0.removeListener(dart.bind(this, _handleControllerChanged));
        t0$ = this[_textFormField].controller;
        t0$ == null ? null : t0$.addListener(dart.bind(this, _handleControllerChanged));
        if (oldWidget.controller != null && this[_textFormField].controller == null) {
          this[_createLocalController](dart.nullCheck(oldWidget.controller).value);
        }
        if (this[_textFormField].controller != null) {
          this.setValue(dart.nullCheck(this[_textFormField].controller).text);
          if (oldWidget.controller == null) {
            this.unregisterFromRestoration(dart.nullCheck(this[_controller]));
            dart.nullCheck(this[_controller]).dispose();
            this[_controller] = null;
          }
        }
      }
    }
    dispose() {
      let t0, t0$;
      t0 = this[_textFormField].controller;
      t0 == null ? null : t0.removeListener(dart.bind(this, _handleControllerChanged));
      t0$ = this[_controller];
      t0$ == null ? null : t0$.dispose();
      super.dispose();
    }
    didChange(value) {
      let t0;
      T.StringN().as(value);
      super.didChange(value);
      if (this[_effectiveController].text !== value) {
        this[_effectiveController].text = (t0 = value, t0 == null ? "" : t0);
      }
    }
    reset() {
      let t0;
      this[_effectiveController].text = (t0 = this.widget.initialValue, t0 == null ? "" : t0);
      super.reset();
    }
    [_handleControllerChanged]() {
      if (this[_effectiveController].text !== this.value) {
        this.didChange(this[_effectiveController].text);
      }
    }
    static ['_#new#tearOff']() {
      return new text_form_field._TextFormFieldState.new();
    }
  };
  (text_form_field._TextFormFieldState.new = function() {
    this[_controller] = null;
    text_form_field._TextFormFieldState.__proto__.new.call(this);
    ;
  }).prototype = text_form_field._TextFormFieldState.prototype;
  dart.addTypeTests(text_form_field._TextFormFieldState);
  dart.addTypeCaches(text_form_field._TextFormFieldState);
  dart.setMethodSignature(text_form_field._TextFormFieldState, () => ({
    __proto__: dart.getMethods(text_form_field._TextFormFieldState.__proto__),
    [_registerController]: dart.fnType(dart.void, []),
    [_createLocalController]: dart.fnType(dart.void, [], [dart.nullable(text_input.TextEditingValue)]),
    [_handleControllerChanged]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(text_form_field._TextFormFieldState, () => ({
    __proto__: dart.getGetters(text_form_field._TextFormFieldState.__proto__),
    [_effectiveController]: editable_text.TextEditingController,
    [_textFormField]: text_form_field.TextFormField
  }));
  dart.setLibraryUri(text_form_field._TextFormFieldState, I[1]);
  dart.setFieldSignature(text_form_field._TextFormFieldState, () => ({
    __proto__: dart.getFields(text_form_field._TextFormFieldState.__proto__),
    [_controller]: dart.fieldType(dart.nullable(restoration_properties.RestorableTextEditingController))
  }));
  dart.trackLibraries("packages/flutter/src/material/text_form_field.dart", {
    "package:flutter/src/material/text_form_field.dart": text_form_field
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["text_form_field.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAqP+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGW;IAAqB;;;;QAvJrD;QACD;QACG;QACG;QACM;QACF;QACI;QACF;QACN;QACC;QACG;QACL;QACS;QACd;QACA;QACW;QACV;QACC;QACF;QACA;QACY;QACA;QACZ;QACiB;QACjB;QACA;QACA;QACA;QACiB;QACF;QACN;QACQ;QAChB;QACA;QACoB;QACpB;QACC;QACC;QACA;QACD;QACK;QACD;QACL;QACiB;QACI;QACZ;QACG;QACA;QACA;QACZ;QACD;QACQ;;IAlDR;UAmDK,AAAa,AAAQ,YAAT,YAAY,AAAW,UAAD;UAClC,AAAU,SAAD;UACT,AAAU,SAAD;UACT,AAAS,QAAD;UACR,AAA2B,kBAAT,aAAY,AAAmB,AAAO,kBAAR,YAAW;UAC3D,AAAY,WAAD;UACX,AAAY,WAAD;UACX,AAAkB,iBAAD;UACjB,AAAc,aAAD;UACb,AAAS,AAAQ,QAAT,YAAqB,aAAT,QAAQ,IAAG;UAC/B,AAAS,AAAQ,QAAT,YAAqB,aAAT,QAAQ,IAAG;UAEnC,AAAS,AAA+B,QAAhC,YAAc,AAAS,QAAD,YAAuB,aAAT,QAAQ,kBAAI,QAAQ,sBACjE;UAEK,AAAQ,OAAD;UAEH,CAAR,OAAO,IAAK,AAAS,QAAD,YAAY,AAAS,QAAD,6BACzC;UAEkB,CAAZ,WAAW,IAAI,AAAS,QAAD,KAAI,sBAAG;UAC/B,AAAU,AAA8C,SAA/C,YAAY,AAAU,SAAD,WAAuC,aAAV,SAAS,IAAG;UACvE,AAA8B,6BAAD;AACpC,0EACgB,AAAW,UAAD,WAAW,AAAW,UAAD,SAAsB,KAAb,YAAY,EAAZ,aAAgB,oBAC9B,QAAvB,MAAR,OAAO,EAAP,oBAAW,UAAU,eAAV,OAAY,oBAAf,eAA0B,iCACR,OAAjB,gBAAgB,EAAhB,eAAqC,iDAC9C,QAAwB;;AACL,oBAAc,uCAAN,KAAK;AACjB,kCACjB,CADmD,KAAX,UAAU,EAAV,+CACpB,AAAkB,eAAf,AAAM,KAAD;AACjC,iBAAK,iBAAwB;AACL,UAAtB,AAAM,KAAD,WAAW,KAAK;AACrB,cAAI,SAAS;AACK,YAAhB,AAAS,SAAA,CAAC,KAAK;;;;AAGnB,cAAO,wDACG,AAAM,KAAD,gBACN,6CACU,aAAa,cAChB,AAAM,KAAD,mCACN,SAAS,cACR,AAAoB,mBAAD,sBAAqB,AAAM,KAAD,4BAC3C,YAAY,mBACT,eAAe,SACzB,KAAK,cACA,UAAU,aACX,SAAS,qBACD,iBAAiB,iBACrB,aAAa,sBACR,kBAAkB,aAC3B,SAAS,kBACJ,cAAc,YACpB,QAAQ,cACN,UAAU,sBACF,kBAAkB,eACzB,WAAW,eACX,WAAW,oBACS,MAAhB,eAAe,EAAf,cAAoB,WAAW,GAAmB,sCAA2B,kCAA9C,2BACf,OAAhB,eAAe,EAAf,eAAoB,WAAW,GAAmB,sCAA2B,kCAA9C,6BAC7B,iBAAiB,wBACd,oBAAoB,YAChC,QAAQ,YACR,QAAQ,WACT,OAAO,aACL,SAAS,aACT,gBAAgB,SACpB,KAAK,qBACO,iBAAiB,eACvB,gBAAgB,mBACZ,eAAe,YACQ,QAAvB,OAAR,OAAO,EAAP,qBAAW,UAAU,eAAV,OAAY,qBAAf,eAA0B,2BAC9B,WAAW,gBACV,YAAY,gBACZ,YAAY,eACb,WAAW,iBACT,aAAa,iBACb,aAAa,sBACR,kBAAkB,+BACiB,OAA3B,0BAA0B,EAA1B,eAA4C,CAAZ,WAAW,KAAK,QAAQ,6BACjE,iBAAiB,gBACtB,YAAY,iBACX,aAAa,oBACV,gBAAgB,iCACH,6BAA6B,eAC/C,WAAW;sEA1I7B,GAAG,WAgCH,OAAO,aACP,SAAS,iBAgBT,aAAa;;EA6Ff;;;;;;;;;;;;;;;;AAe4C,WAAA,AAAe;YAAA,cAAyB,AAAE,eAAb;IAAkB;;AAE7D,YAAa,kCAAP;IAAuB;iBAG5B,WAAgB;AACN,MAAvC,mBAAa,SAAS,EAAE,cAAc;AAC5C,UAAI;AACmB,QAArB;;AAIiC,MAAnC,cAAS,AAAqB;IAChC;;AAGE,YAAO,AAAY;AAC+B,MAAlD,4BAAkC,eAAX,oBAAc;IACvC;6BAE+C;AAC7C,YAAO,AAAY;AAGmC,MAFtD,oBAAc,AAAM,KAAD,WACb,+DACgC,qEAAU,KAAK;AACrD,WAAK;AACkB,QAArB;;IAEJ;;AAImB,MAAX;AACN,UAAI,AAAe,AAAW;AAC6E,QAAzG,6BAAuB,AAAO,AAAa,mCAAU,2CAA0C,eAAnB,AAAO,8BAAiB;;AAEpC,QAAvC,AAAE,eAA3B,AAAe,uDAAwB;;IAE3C;oBAGmC;;;AACD,MAA1B,sBAAgB,SAAS;AAC/B,uBAAI,AAAe,iCAAc,AAAU,SAAD;AACsB,aAA9D,AAAU,SAAD;qBAAC,OAAY,4BAAe;AAC2B,cAAhE,AAAe;sBAAA,OAAY,0BAAY;AAEvC,YAAI,AAAU,SAAD,uBAAuB,AAAe,AAAW;AACT,UAAnD,6BAA2C,AAAE,eAAtB,AAAU,SAAD;;AAGlC,YAAI,AAAe;AACwB,UAAzC,cAAkC,AAAE,eAA3B,AAAe;AACxB,cAAI,AAAU,AAAW,SAAZ;AAC4B,YAAvC,+BAAqC,eAAX;AACJ,YAAX,AAAE,eAAb;AACkB,YAAlB,oBAAc;;;;IAItB;;;AAIqE,WAAnE,AAAe;mBAAA,OAAY,4BAAe;AACpB,YAAtB;2BAAa;AACE,MAAT;IACR;cAGuB;;;AACC,MAAhB,gBAAU,KAAK;AAErB,UAAI,AAAqB,oCAAQ,KAAK;AACG,QAAvC,AAAqB,mCAAa,KAAN,KAAK,EAAL,aAAS;;IAEzC;;;AAMuD,MAArD,AAAqB,mCAA2B,KAApB,AAAO,0BAAA,aAAgB;AACtC,MAAP;IACR;;AAUE,UAAI,AAAqB,oCAAQ;AACK,QAApC,eAAU,AAAqB;;IAEnC;;;;;;IAnGiC;;;EAoGnC","file":"../../../../../../../../../packages/flutter/src/material/text_form_field.dart.lib.js"}');
  // Exports:
  return {
    src__material__text_form_field: text_form_field
  };
}));

//# sourceMappingURL=text_form_field.dart.lib.js.map
