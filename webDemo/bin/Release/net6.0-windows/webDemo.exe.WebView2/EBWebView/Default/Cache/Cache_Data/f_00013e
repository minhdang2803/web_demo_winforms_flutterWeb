define(['dart_sdk', 'packages/flutter/src/gestures/recognizer.dart', 'packages/flutter/src/widgets/title.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/gestures/tap.dart', 'packages/flutter/src/gestures/monodrag.dart', 'packages/flutter/src/animation/animation_controller.dart', 'packages/flutter/src/animation/listener_helpers.dart', 'packages/flutter/src/animation/curves.dart', 'packages/flutter/src/services/haptic_feedback.dart', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/flutter/src/services/mouse_cursor.dart', 'packages/flutter/src/cupertino/text_theme.dart', 'packages/flutter/src/gestures/drag_details.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/cupertino/thumb_painter.dart', 'packages/flutter/src/rendering/box.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/rendering/proxy_box.dart'], (function load__packages__flutter__src__cupertino__switch_dart(dart_sdk, packages__flutter__src__gestures__recognizer$46dart, packages__flutter__src__widgets__title$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__gestures__tap$46dart, packages__flutter__src__gestures__monodrag$46dart, packages__flutter__src__animation__animation_controller$46dart, packages__flutter__src__animation__listener_helpers$46dart, packages__flutter__src__animation__curves$46dart, packages__flutter__src__services__haptic_feedback$46dart, packages__flutter__src__foundation___platform_web$46dart, packages__flutter__src__services__mouse_cursor$46dart, packages__flutter__src__cupertino__text_theme$46dart, packages__flutter__src__gestures__drag_details$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__cupertino__thumb_painter$46dart, packages__flutter__src__rendering__box$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__rendering__proxy_box$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const widget_inspector = packages__flutter__src__widgets__title$46dart.src__widgets__widget_inspector;
  const framework = packages__flutter__src__widgets__title$46dart.src__widgets__framework;
  const basic = packages__flutter__src__widgets__title$46dart.src__widgets__basic;
  const ticker_provider = packages__flutter__src__widgets__title$46dart.src__widgets__ticker_provider;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const tap = packages__flutter__src__gestures__tap$46dart.src__gestures__tap;
  const monodrag = packages__flutter__src__gestures__monodrag$46dart.src__gestures__monodrag;
  const animation_controller = packages__flutter__src__animation__animation_controller$46dart.src__animation__animation_controller;
  const animations = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animations;
  const animation = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animation;
  const curves = packages__flutter__src__animation__curves$46dart.src__animation__curves;
  const haptic_feedback = packages__flutter__src__services__haptic_feedback$46dart.src__services__haptic_feedback;
  const platform = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  const mouse_cursor = packages__flutter__src__services__mouse_cursor$46dart.src__services__mouse_cursor;
  const colors = packages__flutter__src__cupertino__text_theme$46dart.src__cupertino__colors;
  const drag_details = packages__flutter__src__gestures__drag_details$46dart.src__gestures__drag_details;
  const layer = packages__flutter__src__rendering__layer$46dart.src__rendering__layer;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const thumb_painter = packages__flutter__src__cupertino__thumb_painter$46dart.src__cupertino__thumb_painter;
  const box = packages__flutter__src__rendering__box$46dart.src__rendering__box;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const proxy_box = packages__flutter__src__rendering__proxy_box$46dart.src__rendering__proxy_box;
  var $switch = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    boolTovoid: () => (T.boolTovoid = dart.constFn(dart.fnType(dart.void, [core.bool])))(),
    ObjectFlagPropertyOfboolTovoid: () => (T.ObjectFlagPropertyOfboolTovoid = dart.constFn(diagnostics.ObjectFlagProperty$(T.boolTovoid())))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    LayerHandleOfClipRRectLayer: () => (T.LayerHandleOfClipRRectLayer = dart.constFn(layer.LayerHandle$(layer.ClipRRectLayer)))(),
    PaintingContextAndOffsetTovoid: () => (T.PaintingContextAndOffsetTovoid = dart.constFn(dart.fnType(dart.void, [object.PaintingContext, ui.Offset])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: recognizer.DragStartBehavior.prototype,
        [_Enum__name]: "start",
        [_Enum_index]: 1
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "CupertinoSwitch",
        [_Location_column]: 9,
        [_Location_line]: 65,
        [_Location_file]: "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/cupertino/switch.dart"
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_Enum__name]: "rtl",
        [_Enum_index]: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_Enum__name]: "ltr",
        [_Enum_index]: 1
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_Enum__name]: "iOS",
        [_Enum_index]: 2
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_Enum__name]: "android",
        [_Enum_index]: 0
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_Enum__name]: "fuchsia",
        [_Enum_index]: 1
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_Enum__name]: "linux",
        [_Enum_index]: 3
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_Enum__name]: "macOS",
        [_Enum_index]: 4
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_Enum__name]: "windows",
        [_Enum_index]: 5
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "_CupertinoSwitchRenderObjectWidget",
        [_Location_column]: 16,
        [_Location_line]: 317,
        [_Location_file]: "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/cupertino/switch.dart"
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "Opacity",
        [_Location_column]: 14,
        [_Location_line]: 315,
        [_Location_file]: "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/cupertino/switch.dart"
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "MouseRegion",
        [_Location_column]: 12,
        [_Location_line]: 313,
        [_Location_file]: "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/cupertino/switch.dart"
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "_CupertinoSwitchRenderObjectWidget",
        [_Location_column]: 9,
        [_Location_line]: 345,
        [_Location_file]: "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/cupertino/switch.dart"
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: box.BoxConstraints.prototype,
        [BoxConstraints_maxHeight]: 39,
        [BoxConstraints_minHeight]: 39,
        [BoxConstraints_maxWidth]: 59,
        [BoxConstraints_minWidth]: 59
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: ui.Radius.prototype,
        [Radius_y]: 15.5,
        [Radius_x]: 15.5
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 300000
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 200000
      });
    }
  }, false);
  var C = Array(18).fill(void 0);
  var I = [
    "file:///C:/Users/Admin/Desktop/flutter/packages/flutter/lib/src/cupertino/switch.dart",
    "package:flutter/src/cupertino/switch.dart"
  ];
  var value$ = dart.privateName($switch, "CupertinoSwitch.value");
  var onChanged$ = dart.privateName($switch, "CupertinoSwitch.onChanged");
  var activeColor$ = dart.privateName($switch, "CupertinoSwitch.activeColor");
  var trackColor$ = dart.privateName($switch, "CupertinoSwitch.trackColor");
  var thumbColor$ = dart.privateName($switch, "CupertinoSwitch.thumbColor");
  var dragStartBehavior$ = dart.privateName($switch, "CupertinoSwitch.dragStartBehavior");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  $switch.CupertinoSwitch = class CupertinoSwitch extends framework.StatefulWidget {
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    get onChanged() {
      return this[onChanged$];
    }
    set onChanged(value) {
      super.onChanged = value;
    }
    get activeColor() {
      return this[activeColor$];
    }
    set activeColor(value) {
      super.activeColor = value;
    }
    get trackColor() {
      return this[trackColor$];
    }
    set trackColor(value) {
      super.trackColor = value;
    }
    get thumbColor() {
      return this[thumbColor$];
    }
    set thumbColor(value) {
      super.thumbColor = value;
    }
    get dragStartBehavior() {
      return this[dragStartBehavior$];
    }
    set dragStartBehavior(value) {
      super.dragStartBehavior = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let onChanged = opts && 'onChanged' in opts ? opts.onChanged : null;
      let activeColor = opts && 'activeColor' in opts ? opts.activeColor : null;
      let trackColor = opts && 'trackColor' in opts ? opts.trackColor : null;
      let thumbColor = opts && 'thumbColor' in opts ? opts.thumbColor : null;
      let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[0] || CT.C0;
      return new $switch.CupertinoSwitch.new({key: key, value: value, onChanged: onChanged, activeColor: activeColor, trackColor: trackColor, thumbColor: thumbColor, dragStartBehavior: dragStartBehavior, $creationLocationd_0dea112b090073317d4: C[1] || CT.C1});
    }
    createState() {
      return new $switch._CupertinoSwitchState.new();
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new diagnostics.FlagProperty.new("value", {value: this.value, ifTrue: "on", ifFalse: "off", showName: true}));
      properties.add(new (T.ObjectFlagPropertyOfboolTovoid()).new("onChanged", this.onChanged, {ifNull: "disabled"}));
    }
  };
  ($switch.CupertinoSwitch.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let onChanged = opts && 'onChanged' in opts ? opts.onChanged : null;
    let activeColor = opts && 'activeColor' in opts ? opts.activeColor : null;
    let trackColor = opts && 'trackColor' in opts ? opts.trackColor : null;
    let thumbColor = opts && 'thumbColor' in opts ? opts.thumbColor : null;
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[0] || CT.C0;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[value$] = value;
    this[onChanged$] = onChanged;
    this[activeColor$] = activeColor;
    this[trackColor$] = trackColor;
    this[thumbColor$] = thumbColor;
    this[dragStartBehavior$] = dragStartBehavior;
    if (!(value !== null)) dart.assertFailed(null, I[0], 73, 15, "value != null");
    if (!(dragStartBehavior !== null)) dart.assertFailed(null, I[0], 74, 15, "dragStartBehavior != null");
    $switch.CupertinoSwitch.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = $switch.CupertinoSwitch.prototype;
  dart.addTypeTests($switch.CupertinoSwitch);
  dart.addTypeCaches($switch.CupertinoSwitch);
  dart.setMethodSignature($switch.CupertinoSwitch, () => ({
    __proto__: dart.getMethods($switch.CupertinoSwitch.__proto__),
    createState: dart.fnType(framework.State$($switch.CupertinoSwitch), [])
  }));
  dart.setLibraryUri($switch.CupertinoSwitch, I[1]);
  dart.setFieldSignature($switch.CupertinoSwitch, () => ({
    __proto__: dart.getFields($switch.CupertinoSwitch.__proto__),
    value: dart.finalFieldType(core.bool),
    onChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.bool]))),
    activeColor: dart.finalFieldType(dart.nullable(ui.Color)),
    trackColor: dart.finalFieldType(dart.nullable(ui.Color)),
    thumbColor: dart.finalFieldType(dart.nullable(ui.Color)),
    dragStartBehavior: dart.finalFieldType(recognizer.DragStartBehavior)
  }));
  var ___CupertinoSwitchState__tap = dart.privateName($switch, "_#_CupertinoSwitchState#_tap");
  var ___CupertinoSwitchState__drag = dart.privateName($switch, "_#_CupertinoSwitchState#_drag");
  var ___CupertinoSwitchState__positionController = dart.privateName($switch, "_#_CupertinoSwitchState#_positionController");
  var ___CupertinoSwitchState_position = dart.privateName($switch, "_#_CupertinoSwitchState#position");
  var ___CupertinoSwitchState__reactionController = dart.privateName($switch, "_#_CupertinoSwitchState#_reactionController");
  var ___CupertinoSwitchState__reaction = dart.privateName($switch, "_#_CupertinoSwitchState#_reaction");
  var _tap = dart.privateName($switch, "_tap");
  var _drag = dart.privateName($switch, "_drag");
  var _positionController = dart.privateName($switch, "_positionController");
  var _reactionController = dart.privateName($switch, "_reactionController");
  var _reaction = dart.privateName($switch, "_reaction");
  var _handleTapDown = dart.privateName($switch, "_handleTapDown");
  var _handleTapUp = dart.privateName($switch, "_handleTapUp");
  var _handleTap = dart.privateName($switch, "_handleTap");
  var _handleTapCancel = dart.privateName($switch, "_handleTapCancel");
  var _handleDragStart = dart.privateName($switch, "_handleDragStart");
  var _handleDragUpdate = dart.privateName($switch, "_handleDragUpdate");
  var _handleDragEnd = dart.privateName($switch, "_handleDragEnd");
  var _resumePositionAnimation = dart.privateName($switch, "_resumePositionAnimation");
  var _emitVibration = dart.privateName($switch, "_emitVibration");
  const State_TickerProviderStateMixin$36 = class State_TickerProviderStateMixin extends framework.State$($switch.CupertinoSwitch) {};
  (State_TickerProviderStateMixin$36.new = function() {
    ticker_provider.TickerProviderStateMixin$($switch.CupertinoSwitch)[dart.mixinNew].call(this);
    State_TickerProviderStateMixin$36.__proto__.new.call(this);
  }).prototype = State_TickerProviderStateMixin$36.prototype;
  dart.applyMixin(State_TickerProviderStateMixin$36, ticker_provider.TickerProviderStateMixin$($switch.CupertinoSwitch));
  $switch._CupertinoSwitchState = class _CupertinoSwitchState extends State_TickerProviderStateMixin$36 {
    get [_tap]() {
      let t0;
      t0 = this[___CupertinoSwitchState__tap];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_tap")) : t0;
    }
    set [_tap](library$32package$58flutter$47src$47cupertino$47switch$46dart$58$58_tap$35param) {
      this[___CupertinoSwitchState__tap] = library$32package$58flutter$47src$47cupertino$47switch$46dart$58$58_tap$35param;
    }
    get [_drag]() {
      let t0;
      t0 = this[___CupertinoSwitchState__drag];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_drag")) : t0;
    }
    set [_drag](library$32package$58flutter$47src$47cupertino$47switch$46dart$58$58_drag$35param) {
      this[___CupertinoSwitchState__drag] = library$32package$58flutter$47src$47cupertino$47switch$46dart$58$58_drag$35param;
    }
    get [_positionController]() {
      let t0;
      t0 = this[___CupertinoSwitchState__positionController];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_positionController")) : t0;
    }
    set [_positionController](library$32package$58flutter$47src$47cupertino$47switch$46dart$58$58_positionController$35param) {
      this[___CupertinoSwitchState__positionController] = library$32package$58flutter$47src$47cupertino$47switch$46dart$58$58_positionController$35param;
    }
    get position() {
      let t0;
      t0 = this[___CupertinoSwitchState_position];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("position")) : t0;
    }
    set position(position$35param) {
      this[___CupertinoSwitchState_position] = position$35param;
    }
    get [_reactionController]() {
      let t0;
      t0 = this[___CupertinoSwitchState__reactionController];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_reactionController")) : t0;
    }
    set [_reactionController](library$32package$58flutter$47src$47cupertino$47switch$46dart$58$58_reactionController$35param) {
      this[___CupertinoSwitchState__reactionController] = library$32package$58flutter$47src$47cupertino$47switch$46dart$58$58_reactionController$35param;
    }
    get [_reaction]() {
      let t0;
      t0 = this[___CupertinoSwitchState__reaction];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_reaction")) : t0;
    }
    set [_reaction](library$32package$58flutter$47src$47cupertino$47switch$46dart$58$58_reaction$35param) {
      this[___CupertinoSwitchState__reaction] = library$32package$58flutter$47src$47cupertino$47switch$46dart$58$58_reaction$35param;
    }
    get isInteractive() {
      return this.widget.onChanged != null;
    }
    initState() {
      let t0, t0$;
      super.initState();
      this[_tap] = (t0 = new tap.TapGestureRecognizer.new(), (() => {
        t0.onTapDown = dart.bind(this, _handleTapDown);
        t0.onTapUp = dart.bind(this, _handleTapUp);
        t0.onTap = dart.bind(this, _handleTap);
        t0.onTapCancel = dart.bind(this, _handleTapCancel);
        return t0;
      })());
      this[_drag] = (t0$ = new monodrag.HorizontalDragGestureRecognizer.new(), (() => {
        t0$.onStart = dart.bind(this, _handleDragStart);
        t0$.onUpdate = dart.bind(this, _handleDragUpdate);
        t0$.onEnd = dart.bind(this, _handleDragEnd);
        t0$.dragStartBehavior = this.widget.dragStartBehavior;
        return t0$;
      })());
      this[_positionController] = new animation_controller.AnimationController.new({duration: $switch._kToggleDuration, value: this.widget.value ? 1.0 : 0.0, vsync: this});
      this.position = new animations.CurvedAnimation.new({parent: this[_positionController], curve: curves.Curves.linear});
      this[_reactionController] = new animation_controller.AnimationController.new({duration: $switch._kReactionDuration, vsync: this});
      this[_reaction] = new animations.CurvedAnimation.new({parent: this[_reactionController], curve: curves.Curves.ease});
    }
    didUpdateWidget(oldWidget) {
      $switch.CupertinoSwitch.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      this[_drag].dragStartBehavior = this.widget.dragStartBehavior;
      if (this.needsPositionAnimation || oldWidget.value !== this.widget.value) {
        this[_resumePositionAnimation]({isLinear: this.needsPositionAnimation});
      }
    }
    [_resumePositionAnimation](opts) {
      let t0;
      let isLinear = opts && 'isLinear' in opts ? opts.isLinear : true;
      this.needsPositionAnimation = false;
      t0 = this.position;
      (() => {
        t0.curve = isLinear ? curves.Curves.linear : curves.Curves.ease;
        t0.reverseCurve = isLinear ? curves.Curves.linear : curves.Curves.ease.flipped;
        return t0;
      })();
      if (this.widget.value) {
        this[_positionController].forward();
      } else {
        this[_positionController].reverse();
      }
    }
    [_handleTapDown](details) {
      if (this.isInteractive) {
        this.needsPositionAnimation = false;
      }
      this[_reactionController].forward();
    }
    [_handleTap]() {
      if (this.isInteractive) {
        dart.nullCheck(this.widget.onChanged)(!this.widget.value);
        this[_emitVibration]();
      }
    }
    [_handleTapUp](details) {
      if (this.isInteractive) {
        this.needsPositionAnimation = false;
        this[_reactionController].reverse();
      }
    }
    [_handleTapCancel]() {
      if (this.isInteractive) {
        this[_reactionController].reverse();
      }
    }
    [_handleDragStart](details) {
      if (this.isInteractive) {
        this.needsPositionAnimation = false;
        this[_reactionController].forward();
        this[_emitVibration]();
      }
    }
    [_handleDragUpdate](details) {
      let t0, t0$, t0$0;
      if (this.isInteractive) {
        t0 = this.position;
        (() => {
          t0.curve = curves.Curves.linear;
          t0.reverseCurve = curves.Curves.linear;
          return t0;
        })();
        let delta = dart.nullCheck(details.primaryDelta) / 20;
        switch (basic.Directionality.of(this.context)) {
          case C[2] || CT.C2:
            {
              t0$ = this[_positionController];
              t0$.value = t0$.value - delta;
              break;
            }
          case C[3] || CT.C3:
            {
              t0$0 = this[_positionController];
              t0$0.value = t0$0.value + delta;
              break;
            }
        }
      }
    }
    [_handleDragEnd](details) {
      this.setState(dart.fn(() => {
        this.needsPositionAnimation = true;
      }, T.VoidTovoid()));
      if (this.position.value >= 0.5 !== this.widget.value) {
        dart.nullCheck(this.widget.onChanged)(!this.widget.value);
      }
      this[_reactionController].reverse();
    }
    [_emitVibration]() {
      switch (platform.defaultTargetPlatform) {
        case C[4] || CT.C4:
          {
            haptic_feedback.HapticFeedback.lightImpact();
            break;
          }
        case C[5] || CT.C5:
        case C[6] || CT.C6:
        case C[7] || CT.C7:
        case C[8] || CT.C8:
        case C[9] || CT.C9:
          {
            break;
          }
      }
    }
    build(context) {
      let t0, t0$, t0$0;
      if (this.needsPositionAnimation) {
        this[_resumePositionAnimation]();
      }
      return new basic.MouseRegion.new({cursor: this.isInteractive && true ? mouse_cursor.SystemMouseCursors.click : mouse_cursor.MouseCursor.defer, child: new basic.Opacity.new({opacity: this.widget.onChanged == null ? 0.5 : 1.0, child: new $switch._CupertinoSwitchRenderObjectWidget.new({value: this.widget.value, activeColor: colors.CupertinoDynamicColor.resolve((t0 = this.widget.activeColor, t0 == null ? colors.CupertinoColors.systemGreen : t0), context), trackColor: colors.CupertinoDynamicColor.resolve((t0$ = this.widget.trackColor, t0$ == null ? colors.CupertinoColors.secondarySystemFill : t0$), context), thumbColor: colors.CupertinoDynamicColor.resolve((t0$0 = this.widget.thumbColor, t0$0 == null ? colors.CupertinoColors.white : t0$0), context), onChanged: this.widget.onChanged, textDirection: basic.Directionality.of(context), state: this, $creationLocationd_0dea112b090073317d4: C[10] || CT.C10}), $creationLocationd_0dea112b090073317d4: C[11] || CT.C11}), $creationLocationd_0dea112b090073317d4: C[12] || CT.C12});
    }
    dispose() {
      this[_tap].dispose();
      this[_drag].dispose();
      this[_positionController].dispose();
      this[_reactionController].dispose();
      super.dispose();
    }
    static ['_#new#tearOff']() {
      return new $switch._CupertinoSwitchState.new();
    }
  };
  ($switch._CupertinoSwitchState.new = function() {
    this[___CupertinoSwitchState__tap] = null;
    this[___CupertinoSwitchState__drag] = null;
    this[___CupertinoSwitchState__positionController] = null;
    this[___CupertinoSwitchState_position] = null;
    this[___CupertinoSwitchState__reactionController] = null;
    this[___CupertinoSwitchState__reaction] = null;
    this.needsPositionAnimation = false;
    $switch._CupertinoSwitchState.__proto__.new.call(this);
    ;
  }).prototype = $switch._CupertinoSwitchState.prototype;
  dart.addTypeTests($switch._CupertinoSwitchState);
  dart.addTypeCaches($switch._CupertinoSwitchState);
  dart.setMethodSignature($switch._CupertinoSwitchState, () => ({
    __proto__: dart.getMethods($switch._CupertinoSwitchState.__proto__),
    [_resumePositionAnimation]: dart.fnType(dart.void, [], {isLinear: core.bool}, {}),
    [_handleTapDown]: dart.fnType(dart.void, [tap.TapDownDetails]),
    [_handleTap]: dart.fnType(dart.void, []),
    [_handleTapUp]: dart.fnType(dart.void, [tap.TapUpDetails]),
    [_handleTapCancel]: dart.fnType(dart.void, []),
    [_handleDragStart]: dart.fnType(dart.void, [drag_details.DragStartDetails]),
    [_handleDragUpdate]: dart.fnType(dart.void, [drag_details.DragUpdateDetails]),
    [_handleDragEnd]: dart.fnType(dart.void, [drag_details.DragEndDetails]),
    [_emitVibration]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature($switch._CupertinoSwitchState, () => ({
    __proto__: dart.getGetters($switch._CupertinoSwitchState.__proto__),
    [_tap]: tap.TapGestureRecognizer,
    [_drag]: monodrag.HorizontalDragGestureRecognizer,
    [_positionController]: animation_controller.AnimationController,
    position: animations.CurvedAnimation,
    [_reactionController]: animation_controller.AnimationController,
    [_reaction]: animation.Animation$(core.double),
    isInteractive: core.bool
  }));
  dart.setSetterSignature($switch._CupertinoSwitchState, () => ({
    __proto__: dart.getSetters($switch._CupertinoSwitchState.__proto__),
    [_tap]: tap.TapGestureRecognizer,
    [_drag]: monodrag.HorizontalDragGestureRecognizer,
    [_positionController]: animation_controller.AnimationController,
    position: animations.CurvedAnimation,
    [_reactionController]: animation_controller.AnimationController,
    [_reaction]: animation.Animation$(core.double)
  }));
  dart.setLibraryUri($switch._CupertinoSwitchState, I[1]);
  dart.setFieldSignature($switch._CupertinoSwitchState, () => ({
    __proto__: dart.getFields($switch._CupertinoSwitchState.__proto__),
    [___CupertinoSwitchState__tap]: dart.fieldType(dart.nullable(tap.TapGestureRecognizer)),
    [___CupertinoSwitchState__drag]: dart.fieldType(dart.nullable(monodrag.HorizontalDragGestureRecognizer)),
    [___CupertinoSwitchState__positionController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [___CupertinoSwitchState_position]: dart.fieldType(dart.nullable(animations.CurvedAnimation)),
    [___CupertinoSwitchState__reactionController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [___CupertinoSwitchState__reaction]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    needsPositionAnimation: dart.fieldType(core.bool)
  }));
  var value$0 = dart.privateName($switch, "_CupertinoSwitchRenderObjectWidget.value");
  var activeColor$0 = dart.privateName($switch, "_CupertinoSwitchRenderObjectWidget.activeColor");
  var trackColor$0 = dart.privateName($switch, "_CupertinoSwitchRenderObjectWidget.trackColor");
  var thumbColor$0 = dart.privateName($switch, "_CupertinoSwitchRenderObjectWidget.thumbColor");
  var onChanged$0 = dart.privateName($switch, "_CupertinoSwitchRenderObjectWidget.onChanged");
  var state$ = dart.privateName($switch, "_CupertinoSwitchRenderObjectWidget.state");
  var textDirection$ = dart.privateName($switch, "_CupertinoSwitchRenderObjectWidget.textDirection");
  $switch._CupertinoSwitchRenderObjectWidget = class _CupertinoSwitchRenderObjectWidget extends framework.LeafRenderObjectWidget {
    get value() {
      return this[value$0];
    }
    set value(value) {
      super.value = value;
    }
    get activeColor() {
      return this[activeColor$0];
    }
    set activeColor(value) {
      super.activeColor = value;
    }
    get trackColor() {
      return this[trackColor$0];
    }
    set trackColor(value) {
      super.trackColor = value;
    }
    get thumbColor() {
      return this[thumbColor$0];
    }
    set thumbColor(value) {
      super.thumbColor = value;
    }
    get onChanged() {
      return this[onChanged$0];
    }
    set onChanged(value) {
      super.onChanged = value;
    }
    get state() {
      return this[state$];
    }
    set state(value) {
      super.state = value;
    }
    get textDirection() {
      return this[textDirection$];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    static ['_#new#tearOff'](opts) {
      let value = opts && 'value' in opts ? opts.value : null;
      let activeColor = opts && 'activeColor' in opts ? opts.activeColor : null;
      let trackColor = opts && 'trackColor' in opts ? opts.trackColor : null;
      let thumbColor = opts && 'thumbColor' in opts ? opts.thumbColor : null;
      let onChanged = opts && 'onChanged' in opts ? opts.onChanged : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let state = opts && 'state' in opts ? opts.state : null;
      return new $switch._CupertinoSwitchRenderObjectWidget.new({value: value, activeColor: activeColor, trackColor: trackColor, thumbColor: thumbColor, onChanged: onChanged, textDirection: textDirection, state: state, $creationLocationd_0dea112b090073317d4: C[13] || CT.C13});
    }
    createRenderObject(context) {
      return new $switch._RenderCupertinoSwitch.new({value: this.value, activeColor: this.activeColor, trackColor: this.trackColor, thumbColor: this.thumbColor, onChanged: this.onChanged, textDirection: this.textDirection, state: this.state});
    }
    updateRenderObject(context, renderObject) {
      let t0;
      $switch._RenderCupertinoSwitch.as(renderObject);
      t0 = renderObject;
      (() => {
        t0.value = this.value;
        t0.activeColor = this.activeColor;
        t0.trackColor = this.trackColor;
        t0.thumbColor = this.thumbColor;
        t0.onChanged = this.onChanged;
        t0.textDirection = this.textDirection;
        return t0;
      })();
    }
  };
  ($switch._CupertinoSwitchRenderObjectWidget.new = function(opts) {
    let value = opts && 'value' in opts ? opts.value : null;
    let activeColor = opts && 'activeColor' in opts ? opts.activeColor : null;
    let trackColor = opts && 'trackColor' in opts ? opts.trackColor : null;
    let thumbColor = opts && 'thumbColor' in opts ? opts.thumbColor : null;
    let onChanged = opts && 'onChanged' in opts ? opts.onChanged : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let state = opts && 'state' in opts ? opts.state : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[value$0] = value;
    this[activeColor$0] = activeColor;
    this[trackColor$0] = trackColor;
    this[thumbColor$0] = thumbColor;
    this[onChanged$0] = onChanged;
    this[textDirection$] = textDirection;
    this[state$] = state;
    $switch._CupertinoSwitchRenderObjectWidget.__proto__.new.call(this, {$creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = $switch._CupertinoSwitchRenderObjectWidget.prototype;
  dart.addTypeTests($switch._CupertinoSwitchRenderObjectWidget);
  dart.addTypeCaches($switch._CupertinoSwitchRenderObjectWidget);
  dart.setMethodSignature($switch._CupertinoSwitchRenderObjectWidget, () => ({
    __proto__: dart.getMethods($switch._CupertinoSwitchRenderObjectWidget.__proto__),
    createRenderObject: dart.fnType($switch._RenderCupertinoSwitch, [framework.BuildContext])
  }));
  dart.setLibraryUri($switch._CupertinoSwitchRenderObjectWidget, I[1]);
  dart.setFieldSignature($switch._CupertinoSwitchRenderObjectWidget, () => ({
    __proto__: dart.getFields($switch._CupertinoSwitchRenderObjectWidget.__proto__),
    value: dart.finalFieldType(core.bool),
    activeColor: dart.finalFieldType(ui.Color),
    trackColor: dart.finalFieldType(ui.Color),
    thumbColor: dart.finalFieldType(ui.Color),
    onChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.bool]))),
    state: dart.finalFieldType($switch._CupertinoSwitchState),
    textDirection: dart.finalFieldType(ui.TextDirection)
  }));
  var _clipRRectLayer = dart.privateName($switch, "_clipRRectLayer");
  var _value = dart.privateName($switch, "_value");
  var _activeColor = dart.privateName($switch, "_activeColor");
  var _trackColor = dart.privateName($switch, "_trackColor");
  var _thumbPainter = dart.privateName($switch, "_thumbPainter");
  var _onChanged = dart.privateName($switch, "_onChanged");
  var _textDirection = dart.privateName($switch, "_textDirection");
  var _state = dart.privateName($switch, "_state");
  var BoxConstraints_maxHeight = dart.privateName(box, "BoxConstraints.maxHeight");
  var BoxConstraints_minHeight = dart.privateName(box, "BoxConstraints.minHeight");
  var BoxConstraints_maxWidth = dart.privateName(box, "BoxConstraints.maxWidth");
  var BoxConstraints_minWidth = dart.privateName(box, "BoxConstraints.minWidth");
  var Radius_y = dart.privateName(ui, "Radius.y");
  var Radius_x = dart.privateName(ui, "Radius.x");
  $switch._RenderCupertinoSwitch = class _RenderCupertinoSwitch extends proxy_box.RenderConstrainedBox {
    static ['_#new#tearOff'](opts) {
      let value = opts && 'value' in opts ? opts.value : null;
      let activeColor = opts && 'activeColor' in opts ? opts.activeColor : null;
      let trackColor = opts && 'trackColor' in opts ? opts.trackColor : null;
      let thumbColor = opts && 'thumbColor' in opts ? opts.thumbColor : null;
      let onChanged = opts && 'onChanged' in opts ? opts.onChanged : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let state = opts && 'state' in opts ? opts.state : null;
      return new $switch._RenderCupertinoSwitch.new({value: value, activeColor: activeColor, trackColor: trackColor, thumbColor: thumbColor, onChanged: onChanged, textDirection: textDirection, state: state});
    }
    get value() {
      return this[_value];
    }
    set value(value) {
      if (!(value !== null)) dart.assertFailed(null, I[0], 431, 12, "value != null");
      if (value === this[_value]) {
        return;
      }
      this[_value] = value;
      this.markNeedsSemanticsUpdate();
    }
    get activeColor() {
      return this[_activeColor];
    }
    set activeColor(value) {
      if (!(value !== null)) dart.assertFailed(null, I[0], 442, 12, "value != null");
      if (value._equals(this[_activeColor])) {
        return;
      }
      this[_activeColor] = value;
      this.markNeedsPaint();
    }
    get trackColor() {
      return this[_trackColor];
    }
    set trackColor(value) {
      if (!(value !== null)) dart.assertFailed(null, I[0], 453, 12, "value != null");
      if (value._equals(this[_trackColor])) {
        return;
      }
      this[_trackColor] = value;
      this.markNeedsPaint();
    }
    get thumbColor() {
      return this[_thumbPainter].color;
    }
    set thumbColor(value) {
      if (!(value !== null)) dart.assertFailed(null, I[0], 464, 12, "value != null");
      if (value._equals(this.thumbColor)) {
        return;
      }
      this[_thumbPainter] = new thumb_painter.CupertinoThumbPainter.switchThumb({color: value});
      this.markNeedsPaint();
    }
    get onChanged() {
      return this[_onChanged];
    }
    set onChanged(value) {
      if (dart.equals(value, this[_onChanged])) {
        return;
      }
      let wasInteractive = this.isInteractive;
      this[_onChanged] = value;
      if (wasInteractive !== this.isInteractive) {
        this.markNeedsPaint();
        this.markNeedsSemanticsUpdate();
      }
    }
    get textDirection() {
      return this[_textDirection];
    }
    set textDirection(value) {
      if (!(value !== null)) dart.assertFailed(null, I[0], 489, 12, "value != null");
      if (this[_textDirection] === value) {
        return;
      }
      this[_textDirection] = value;
      this.markNeedsPaint();
    }
    get isInteractive() {
      return this.onChanged != null;
    }
    hitTestSelf(position) {
      return true;
    }
    handleEvent(event, entry) {
      box.BoxHitTestEntry.as(entry);
      if (!this.debugHandleEvent(event, entry)) dart.assertFailed(null, I[0], 504, 12, "debugHandleEvent(event, entry)");
      if (events.PointerDownEvent.is(event) && this.isInteractive) {
        this[_state][_drag].addPointer(event);
        this[_state][_tap].addPointer(event);
      }
    }
    describeSemanticsConfiguration(config) {
      super.describeSemanticsConfiguration(config);
      if (this.isInteractive) {
        config.onTap = dart.bind(this[_state], _handleTap);
      }
      config.isEnabled = this.isInteractive;
      config.isToggled = this[_value];
    }
    paint(context, offset) {
      let t0;
      let canvas = context.canvas;
      let currentValue = this[_state].position.value;
      let currentReactionValue = this[_state][_reaction].value;
      let visualPosition = null;
      switch (this.textDirection) {
        case C[2] || CT.C2:
          {
            visualPosition = 1.0 - currentValue;
            break;
          }
        case C[3] || CT.C3:
          {
            visualPosition = currentValue;
            break;
          }
      }
      let paint = (t0 = ui.Paint.new(), (() => {
        t0.color = dart.nullCheck(ui.Color.lerp(this.trackColor, this.activeColor, currentValue));
        return t0;
      })());
      let trackRect = new ui.Rect.fromLTWH(offset.dx + (this.size.width - 51) / 2.0, offset.dy + (this.size.height - 31) / 2.0, 51, 31);
      let trackRRect = new ui.RRect.fromRectAndRadius(trackRect, C[15] || CT.C15);
      canvas.drawRRect(trackRRect, paint);
      let currentThumbExtension = 7 * currentReactionValue;
      let thumbLeft = dart.nullCheck(ui.lerpDouble(trackRect.left + 15.5 - 14, trackRect.left + 35.5 - 14 - currentThumbExtension, visualPosition));
      let thumbRight = dart.nullCheck(ui.lerpDouble(trackRect.left + 15.5 + 14 + currentThumbExtension, trackRect.left + 35.5 + 14, visualPosition));
      let thumbCenterY = offset.dy + this.size.height / 2.0;
      let thumbBounds = new ui.Rect.fromLTRB(thumbLeft, thumbCenterY - 14, thumbRight, thumbCenterY + 14);
      this[_clipRRectLayer].layer = context.pushClipRRect(this.needsCompositing, ui.Offset.zero, thumbBounds, trackRRect, dart.fn((innerContext, offset) => {
        this[_thumbPainter].paint(innerContext.canvas, thumbBounds);
      }, T.PaintingContextAndOffsetTovoid()), {oldLayer: this[_clipRRectLayer].layer});
    }
    dispose() {
      this[_clipRRectLayer].layer = null;
      super.dispose();
    }
    debugFillProperties(description) {
      super.debugFillProperties(description);
      description.add(new diagnostics.FlagProperty.new("value", {value: this.value, ifTrue: "checked", ifFalse: "unchecked", showName: true}));
      description.add(new diagnostics.FlagProperty.new("isInteractive", {value: this.isInteractive, ifTrue: "enabled", ifFalse: "disabled", showName: true, defaultValue: true}));
    }
  };
  ($switch._RenderCupertinoSwitch.new = function(opts) {
    let value = opts && 'value' in opts ? opts.value : null;
    let activeColor = opts && 'activeColor' in opts ? opts.activeColor : null;
    let trackColor = opts && 'trackColor' in opts ? opts.trackColor : null;
    let thumbColor = opts && 'thumbColor' in opts ? opts.thumbColor : null;
    let onChanged = opts && 'onChanged' in opts ? opts.onChanged : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let state = opts && 'state' in opts ? opts.state : null;
    this[_clipRRectLayer] = new (T.LayerHandleOfClipRRectLayer()).new();
    if (!(value !== null)) dart.assertFailed(null, I[0], 411, 15, "value != null");
    if (!(activeColor !== null)) dart.assertFailed(null, I[0], 412, 15, "activeColor != null");
    if (!(state !== null)) dart.assertFailed(null, I[0], 413, 15, "state != null");
    this[_value] = value;
    this[_activeColor] = activeColor;
    this[_trackColor] = trackColor;
    this[_thumbPainter] = new thumb_painter.CupertinoThumbPainter.switchThumb({color: thumbColor});
    this[_onChanged] = onChanged;
    this[_textDirection] = textDirection;
    this[_state] = state;
    $switch._RenderCupertinoSwitch.__proto__.new.call(this, {additionalConstraints: C[14] || CT.C14});
    state.position.addListener(dart.bind(this, 'markNeedsPaint'));
    state[_reaction].addListener(dart.bind(this, 'markNeedsPaint'));
  }).prototype = $switch._RenderCupertinoSwitch.prototype;
  dart.addTypeTests($switch._RenderCupertinoSwitch);
  dart.addTypeCaches($switch._RenderCupertinoSwitch);
  dart.setGetterSignature($switch._RenderCupertinoSwitch, () => ({
    __proto__: dart.getGetters($switch._RenderCupertinoSwitch.__proto__),
    value: core.bool,
    activeColor: ui.Color,
    trackColor: ui.Color,
    thumbColor: ui.Color,
    onChanged: dart.nullable(dart.fnType(dart.void, [core.bool])),
    textDirection: ui.TextDirection,
    isInteractive: core.bool
  }));
  dart.setSetterSignature($switch._RenderCupertinoSwitch, () => ({
    __proto__: dart.getSetters($switch._RenderCupertinoSwitch.__proto__),
    value: core.bool,
    activeColor: ui.Color,
    trackColor: ui.Color,
    thumbColor: ui.Color,
    onChanged: dart.nullable(dart.fnType(dart.void, [core.bool])),
    textDirection: ui.TextDirection
  }));
  dart.setLibraryUri($switch._RenderCupertinoSwitch, I[1]);
  dart.setFieldSignature($switch._RenderCupertinoSwitch, () => ({
    __proto__: dart.getFields($switch._RenderCupertinoSwitch.__proto__),
    [_state]: dart.finalFieldType($switch._CupertinoSwitchState),
    [_value]: dart.fieldType(core.bool),
    [_activeColor]: dart.fieldType(ui.Color),
    [_trackColor]: dart.fieldType(ui.Color),
    [_thumbPainter]: dart.fieldType(thumb_painter.CupertinoThumbPainter),
    [_onChanged]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.bool]))),
    [_textDirection]: dart.fieldType(ui.TextDirection),
    [_clipRRectLayer]: dart.finalFieldType(layer.LayerHandle$(layer.ClipRRectLayer))
  }));
  var Duration__duration = dart.privateName(core, "Duration._duration");
  dart.defineLazy($switch, {
    /*$switch._kTrackWidth*/get _kTrackWidth() {
      return 51;
    },
    /*$switch._kTrackHeight*/get _kTrackHeight() {
      return 31;
    },
    /*$switch._kTrackRadius*/get _kTrackRadius() {
      return 15.5;
    },
    /*$switch._kTrackInnerStart*/get _kTrackInnerStart() {
      return 15.5;
    },
    /*$switch._kTrackInnerEnd*/get _kTrackInnerEnd() {
      return 35.5;
    },
    /*$switch._kTrackInnerLength*/get _kTrackInnerLength() {
      return 20;
    },
    /*$switch._kSwitchWidth*/get _kSwitchWidth() {
      return 59;
    },
    /*$switch._kSwitchHeight*/get _kSwitchHeight() {
      return 39;
    },
    /*$switch._kCupertinoSwitchDisabledOpacity*/get _kCupertinoSwitchDisabledOpacity() {
      return 0.5;
    },
    /*$switch._kReactionDuration*/get _kReactionDuration() {
      return C[16] || CT.C16;
    },
    /*$switch._kToggleDuration*/get _kToggleDuration() {
      return C[17] || CT.C17;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/cupertino/switch.dart", {
    "package:flutter/src/cupertino/switch.dart": $switch
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["switch.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../packages/flutter/src/cupertino/switch.dart.lib.js"}');
  // Exports:
  return {
    src__cupertino__switch: $switch
  };
}));

//# sourceMappingURL=switch.dart.lib.js.map
