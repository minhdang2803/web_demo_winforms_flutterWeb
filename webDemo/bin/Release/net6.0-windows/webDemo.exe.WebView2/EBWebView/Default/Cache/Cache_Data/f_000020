define(['dart_sdk', 'packages/flutter/src/material/icon_button.dart', 'packages/intl/intl.dart', 'packages/intl/src/intl/date_format.dart', 'packages/intl/src/intl/number_parser.dart', 'packages/flutter/src/widgets/title.dart', 'packages/flutter_localizations/src/l10n/generated_cupertino_localizations.dart', 'packages/flutter_localizations/src/widgets_localizations.dart', 'packages/flutter_localizations/src/utils/date_localizations.dart', 'packages/flutter/src/foundation/synchronous_future.dart', 'packages/flutter/src/material/typography.dart'], (function load__packages__flutter_localizations__src__material_localizations_dart(dart_sdk, packages__flutter__src__material__icon_button$46dart, packages__intl__intl$46dart, packages__intl__src__intl__date_format$46dart, packages__intl__src__intl__number_parser$46dart, packages__flutter__src__widgets__title$46dart, packages__flutter_localizations__src__l10n__generated_cupertino_localizations$46dart, packages__flutter_localizations__src__widgets_localizations$46dart, packages__flutter_localizations__src__utils__date_localizations$46dart, packages__flutter__src__foundation__synchronous_future$46dart, packages__flutter__src__material__typography$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const async = dart_sdk.async;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const time = packages__flutter__src__material__icon_button$46dart.src__material__time;
  const material_localizations = packages__flutter__src__material__icon_button$46dart.src__material__material_localizations;
  const intl = packages__intl__intl$46dart.intl;
  const date_format = packages__intl__src__intl__date_format$46dart.src__intl__date_format;
  const number_format = packages__intl__src__intl__number_parser$46dart.src__intl__number_format;
  const localizations = packages__flutter__src__widgets__title$46dart.src__widgets__localizations;
  const cupertino_localizations = packages__flutter_localizations__src__l10n__generated_cupertino_localizations$46dart.src__cupertino_localizations;
  const widgets_localizations = packages__flutter_localizations__src__widgets_localizations$46dart.src__widgets_localizations;
  const date_localizations = packages__flutter_localizations__src__utils__date_localizations$46dart.src__utils__date_localizations;
  const synchronous_future = packages__flutter__src__foundation__synchronous_future$46dart.src__foundation__synchronous_future;
  const typography = packages__flutter__src__material__typography$46dart.src__material__typography;
  var material_localizations$ = Object.create(dart.library);
  var generated_material_localizations = Object.create(dart.library);
  var $modulo = dartx['%'];
  var $replaceFirst = dartx.replaceFirst;
  var $putIfAbsent = dartx.putIfAbsent;
  var $length = dartx.length;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    SynchronousFutureOfMaterialLocalizations: () => (T.SynchronousFutureOfMaterialLocalizations = dart.constFn(synchronous_future.SynchronousFuture$(material_localizations.MaterialLocalizations)))(),
    VoidToSynchronousFutureOfMaterialLocalizations: () => (T.VoidToSynchronousFutureOfMaterialLocalizations = dart.constFn(dart.fnType(T.SynchronousFutureOfMaterialLocalizations(), [])))(),
    FutureOfMaterialLocalizations: () => (T.FutureOfMaterialLocalizations = dart.constFn(async.Future$(material_localizations.MaterialLocalizations)))(),
    LinkedMapOfLocale$FutureOfMaterialLocalizations: () => (T.LinkedMapOfLocale$FutureOfMaterialLocalizations = dart.constFn(_js_helper.LinkedMap$(ui.Locale, T.FutureOfMaterialLocalizations())))(),
    HashSetOfString: () => (T.HashSetOfString = dart.constFn(collection.HashSet$(core.String)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: time.HourFormat.prototype,
        [_Enum__name]: "HH",
        [_Enum_index]: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: time.HourFormat.prototype,
        [_Enum__name]: "H",
        [_Enum_index]: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: time.HourFormat.prototype,
        [_Enum__name]: "h",
        [_Enum_index]: 2
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: time.TimeOfDayFormat.prototype,
        [_Enum__name]: "h_colon_mm_space_a",
        [_Enum_index]: 4
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: time.TimeOfDayFormat.prototype,
        [_Enum__name]: "H_colon_mm",
        [_Enum_index]: 3
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: time.TimeOfDayFormat.prototype,
        [_Enum__name]: "HH_colon_mm",
        [_Enum_index]: 0
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: time.TimeOfDayFormat.prototype,
        [_Enum__name]: "HH_dot_mm",
        [_Enum_index]: 1
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: time.TimeOfDayFormat.prototype,
        [_Enum__name]: "a_space_h_colon_mm",
        [_Enum_index]: 5
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: time.TimeOfDayFormat.prototype,
        [_Enum__name]: "frenchCanadian",
        [_Enum_index]: 2
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: time.DayPeriod.prototype,
        [_Enum__name]: "am",
        [_Enum_index]: 0
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: time.DayPeriod.prototype,
        [_Enum__name]: "pm",
        [_Enum_index]: 1
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: material_localizations$._MaterialLocalizationsDelegate.prototype
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: cupertino_localizations._GlobalCupertinoLocalizationsDelegate.prototype
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: widgets_localizations._WidgetsLocalizationsDelegate.prototype
      });
    },
    get C12() {
      return C[12] = dart.constList([C[13] || CT.C13, C[11] || CT.C11, C[14] || CT.C14], localizations.LocalizationsDelegate);
    },
    get C15() {
      return C[15] = dart.constList(["af", "am", "ar", "as", "az", "be", "bg", "bn", "bs", "ca", "cs", "da", "de", "el", "en", "es", "et", "eu", "fa", "fi", "fil", "fr", "gl", "gsw", "gu", "he", "hi", "hr", "hu", "hy", "id", "is", "it", "ja", "ka", "kk", "km", "kn", "ko", "ky", "lo", "lt", "lv", "mk", "ml", "mn", "mr", "ms", "my", "nb", "ne", "nl", "no", "or", "pa", "pl", "ps", "pt", "ro", "ru", "si", "sk", "sl", "sq", "sr", "sv", "sw", "ta", "te", "th", "tl", "tr", "uk", "ur", "uz", "vi", "zh", "zu"], core.String);
    }
  }, false);
  var C = Array(16).fill(void 0);
  var I = [
    "file:///C:/Users/Admin/Desktop/flutter/packages/flutter_localizations/lib/src/material_localizations.dart",
    "package:flutter_localizations/src/material_localizations.dart",
    "package:flutter_localizations/src/l10n/generated_material_localizations.dart",
    "file:///C:/Users/Admin/Desktop/flutter/packages/flutter_localizations/lib/src/l10n/generated_material_localizations.dart"
  ];
  var _localeName = dart.privateName(material_localizations$, "GlobalMaterialLocalizations._localeName");
  var _fullYearFormat = dart.privateName(material_localizations$, "GlobalMaterialLocalizations._fullYearFormat");
  var _compactDateFormat = dart.privateName(material_localizations$, "GlobalMaterialLocalizations._compactDateFormat");
  var _shortDateFormat = dart.privateName(material_localizations$, "GlobalMaterialLocalizations._shortDateFormat");
  var _mediumDateFormat = dart.privateName(material_localizations$, "GlobalMaterialLocalizations._mediumDateFormat");
  var _longDateFormat = dart.privateName(material_localizations$, "GlobalMaterialLocalizations._longDateFormat");
  var _yearMonthFormat = dart.privateName(material_localizations$, "GlobalMaterialLocalizations._yearMonthFormat");
  var _shortMonthDayFormat = dart.privateName(material_localizations$, "GlobalMaterialLocalizations._shortMonthDayFormat");
  var _decimalFormat = dart.privateName(material_localizations$, "GlobalMaterialLocalizations._decimalFormat");
  var _twoDigitZeroPaddedFormat = dart.privateName(material_localizations$, "GlobalMaterialLocalizations._twoDigitZeroPaddedFormat");
  var _localeName$ = dart.privateName(material_localizations$, "_localeName");
  var _fullYearFormat$ = dart.privateName(material_localizations$, "_fullYearFormat");
  var _compactDateFormat$ = dart.privateName(material_localizations$, "_compactDateFormat");
  var _shortDateFormat$ = dart.privateName(material_localizations$, "_shortDateFormat");
  var _mediumDateFormat$ = dart.privateName(material_localizations$, "_mediumDateFormat");
  var _longDateFormat$ = dart.privateName(material_localizations$, "_longDateFormat");
  var _yearMonthFormat$ = dart.privateName(material_localizations$, "_yearMonthFormat");
  var _shortMonthDayFormat$ = dart.privateName(material_localizations$, "_shortMonthDayFormat");
  var _decimalFormat$ = dart.privateName(material_localizations$, "_decimalFormat");
  var _twoDigitZeroPaddedFormat$ = dart.privateName(material_localizations$, "_twoDigitZeroPaddedFormat");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  var _formatDayPeriod = dart.privateName(material_localizations$, "_formatDayPeriod");
  material_localizations$.GlobalMaterialLocalizations = class GlobalMaterialLocalizations extends core.Object {
    get [_localeName$]() {
      return this[_localeName];
    }
    set [_localeName$](value) {
      super[_localeName$] = value;
    }
    get [_fullYearFormat$]() {
      return this[_fullYearFormat];
    }
    set [_fullYearFormat$](value) {
      super[_fullYearFormat$] = value;
    }
    get [_compactDateFormat$]() {
      return this[_compactDateFormat];
    }
    set [_compactDateFormat$](value) {
      super[_compactDateFormat$] = value;
    }
    get [_shortDateFormat$]() {
      return this[_shortDateFormat];
    }
    set [_shortDateFormat$](value) {
      super[_shortDateFormat$] = value;
    }
    get [_mediumDateFormat$]() {
      return this[_mediumDateFormat];
    }
    set [_mediumDateFormat$](value) {
      super[_mediumDateFormat$] = value;
    }
    get [_longDateFormat$]() {
      return this[_longDateFormat];
    }
    set [_longDateFormat$](value) {
      super[_longDateFormat$] = value;
    }
    get [_yearMonthFormat$]() {
      return this[_yearMonthFormat];
    }
    set [_yearMonthFormat$](value) {
      super[_yearMonthFormat$] = value;
    }
    get [_shortMonthDayFormat$]() {
      return this[_shortMonthDayFormat];
    }
    set [_shortMonthDayFormat$](value) {
      super[_shortMonthDayFormat$] = value;
    }
    get [_decimalFormat$]() {
      return this[_decimalFormat];
    }
    set [_decimalFormat$](value) {
      super[_decimalFormat$] = value;
    }
    get [_twoDigitZeroPaddedFormat$]() {
      return this[_twoDigitZeroPaddedFormat];
    }
    set [_twoDigitZeroPaddedFormat$](value) {
      super[_twoDigitZeroPaddedFormat$] = value;
    }
    formatHour(timeOfDay, opts) {
      let alwaysUse24HourFormat = opts && 'alwaysUse24HourFormat' in opts ? opts.alwaysUse24HourFormat : false;
      switch (time.hourFormat({of: this.timeOfDayFormat({alwaysUse24HourFormat: alwaysUse24HourFormat})})) {
        case C[0] || CT.C0:
          {
            return this[_twoDigitZeroPaddedFormat$].format(timeOfDay.hour);
          }
        case C[1] || CT.C1:
          {
            return this.formatDecimal(timeOfDay.hour);
          }
        case C[2] || CT.C2:
          {
            let hour = timeOfDay.hourOfPeriod;
            return this.formatDecimal(hour === 0 ? 12 : hour);
          }
      }
    }
    formatMinute(timeOfDay) {
      return this[_twoDigitZeroPaddedFormat$].format(timeOfDay.minute);
    }
    formatYear(date) {
      return this[_fullYearFormat$].format(date);
    }
    formatCompactDate(date) {
      return this[_compactDateFormat$].format(date);
    }
    formatShortDate(date) {
      return this[_shortDateFormat$].format(date);
    }
    formatMediumDate(date) {
      return this[_mediumDateFormat$].format(date);
    }
    formatFullDate(date) {
      return this[_longDateFormat$].format(date);
    }
    formatMonthYear(date) {
      return this[_yearMonthFormat$].format(date);
    }
    formatShortMonthDay(date) {
      return this[_shortMonthDayFormat$].format(date);
    }
    parseCompactDate(inputString) {
      try {
        return inputString != null ? this[_compactDateFormat$].parseStrict(inputString) : null;
      } catch (e) {
        let ex = dart.getThrown(e);
        if (core.FormatException.is(ex)) {
          return null;
        } else
          throw e;
      }
    }
    get narrowWeekdays() {
      return this[_longDateFormat$].dateSymbols.NARROWWEEKDAYS;
    }
    get firstDayOfWeekIndex() {
      return (this[_longDateFormat$].dateSymbols.FIRSTDAYOFWEEK + 1)[$modulo](7);
    }
    formatDecimal(number) {
      return this[_decimalFormat$].format(number);
    }
    formatTimeOfDay(timeOfDay, opts) {
      let alwaysUse24HourFormat = opts && 'alwaysUse24HourFormat' in opts ? opts.alwaysUse24HourFormat : false;
      let hour = this.formatHour(timeOfDay, {alwaysUse24HourFormat: alwaysUse24HourFormat});
      let minute = this.formatMinute(timeOfDay);
      switch (this.timeOfDayFormat({alwaysUse24HourFormat: alwaysUse24HourFormat})) {
        case C[3] || CT.C3:
          {
            return hour + ":" + minute + " " + dart.nullCheck(this[_formatDayPeriod](timeOfDay));
          }
        case C[4] || CT.C4:
        case C[5] || CT.C5:
          {
            return hour + ":" + minute;
          }
        case C[6] || CT.C6:
          {
            return hour + "." + minute;
          }
        case C[7] || CT.C7:
          {
            return dart.nullCheck(this[_formatDayPeriod](timeOfDay)) + " " + hour + ":" + minute;
          }
        case C[8] || CT.C8:
          {
            return hour + " h " + minute;
          }
      }
    }
    [_formatDayPeriod](timeOfDay) {
      switch (timeOfDay.period) {
        case C[9] || CT.C9:
          {
            return this.anteMeridiemAbbreviation;
          }
        case C[10] || CT.C10:
          {
            return this.postMeridiemAbbreviation;
          }
      }
    }
    dateRangeStartDateSemanticLabel(formattedDate) {
      return this.dateRangeStartDateSemanticLabelRaw[$replaceFirst]("$fullDate", formattedDate);
    }
    dateRangeEndDateSemanticLabel(formattedDate) {
      return this.dateRangeEndDateSemanticLabelRaw[$replaceFirst]("$fullDate", formattedDate);
    }
    aboutListTileTitle(applicationName) {
      let text = this.aboutListTileTitleRaw;
      return text[$replaceFirst]("$applicationName", applicationName);
    }
    pageRowsInfoTitle(firstRow, lastRow, rowCount, rowCountIsApproximate) {
      let text = rowCountIsApproximate ? this.pageRowsInfoTitleApproximateRaw : null;
      text == null ? text = this.pageRowsInfoTitleRaw : null;
      if (!(text != null)) dart.assertFailed("A " + this[_localeName$] + " localization was not found for pageRowsInfoTitle or pageRowsInfoTitleApproximate", I[0], 290, 12, "text != null");
      return text[$replaceFirst]("$firstRow", this.formatDecimal(firstRow))[$replaceFirst]("$lastRow", this.formatDecimal(lastRow))[$replaceFirst]("$rowCount", this.formatDecimal(rowCount));
    }
    tabLabel(opts) {
      let tabIndex = opts && 'tabIndex' in opts ? opts.tabIndex : null;
      let tabCount = opts && 'tabCount' in opts ? opts.tabCount : null;
      if (!(tabIndex >= 1)) dart.assertFailed(null, I[0], 304, 12, "tabIndex >= 1");
      if (!(tabCount >= 1)) dart.assertFailed(null, I[0], 305, 12, "tabCount >= 1");
      let template = this.tabLabelRaw;
      return template[$replaceFirst]("$tabIndex", this.formatDecimal(tabIndex))[$replaceFirst]("$tabCount", this.formatDecimal(tabCount));
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return null;
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    selectedRowCountTitle(selectedRowCount) {
      return intl.Intl.pluralLogic(core.String, selectedRowCount, {zero: this.selectedRowCountTitleZero, one: this.selectedRowCountTitleOne, two: this.selectedRowCountTitleTwo, few: this.selectedRowCountTitleFew, many: this.selectedRowCountTitleMany, other: this.selectedRowCountTitleOther, locale: this[_localeName$]})[$replaceFirst]("$selectedRowCount", this.formatDecimal(selectedRowCount));
    }
    timeOfDayFormat(opts) {
      let alwaysUse24HourFormat = opts && 'alwaysUse24HourFormat' in opts ? opts.alwaysUse24HourFormat : false;
      if (!(alwaysUse24HourFormat !== null)) dart.assertFailed(null, I[0], 438, 12, "alwaysUse24HourFormat != null");
      if (alwaysUse24HourFormat) {
        return material_localizations$._get24HourVersionOf(this.timeOfDayFormatRaw);
      }
      return this.timeOfDayFormatRaw;
    }
    get licensesPackageDetailTextZero() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return null;
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    licensesPackageDetailText(licenseCount) {
      return intl.Intl.pluralLogic(core.String, licenseCount, {zero: this.licensesPackageDetailTextZero, one: this.licensesPackageDetailTextOne, two: this.licensesPackageDetailTextTwo, many: this.licensesPackageDetailTextMany, few: this.licensesPackageDetailTextFew, other: this.licensesPackageDetailTextOther, locale: this[_localeName$]})[$replaceFirst]("$licenseCount", this.formatDecimal(licenseCount));
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return null;
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    remainingTextFieldCharacterCount(remaining) {
      return intl.Intl.pluralLogic(core.String, remaining, {zero: this.remainingTextFieldCharacterCountZero, one: this.remainingTextFieldCharacterCountOne, two: this.remainingTextFieldCharacterCountTwo, many: this.remainingTextFieldCharacterCountMany, few: this.remainingTextFieldCharacterCountFew, other: this.remainingTextFieldCharacterCountOther, locale: this[_localeName$]})[$replaceFirst]("$remainingCount", this.formatDecimal(remaining));
    }
  };
  (material_localizations$.GlobalMaterialLocalizations.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : null;
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    if (!(localeName !== null)) dart.assertFailed(null, I[0], 100, 15, "localeName != null");
    this[_localeName] = localeName;
    if (!(fullYearFormat !== null)) dart.assertFailed(null, I[0], 102, 15, "fullYearFormat != null");
    this[_fullYearFormat] = fullYearFormat;
    if (!(compactDateFormat !== null)) dart.assertFailed(null, I[0], 104, 15, "compactDateFormat != null");
    this[_compactDateFormat] = compactDateFormat;
    if (!(shortDateFormat !== null)) dart.assertFailed(null, I[0], 106, 15, "shortDateFormat != null");
    this[_shortDateFormat] = shortDateFormat;
    if (!(mediumDateFormat !== null)) dart.assertFailed(null, I[0], 108, 15, "mediumDateFormat != null");
    this[_mediumDateFormat] = mediumDateFormat;
    if (!(longDateFormat !== null)) dart.assertFailed(null, I[0], 110, 15, "longDateFormat != null");
    this[_longDateFormat] = longDateFormat;
    if (!(yearMonthFormat !== null)) dart.assertFailed(null, I[0], 112, 15, "yearMonthFormat != null");
    this[_yearMonthFormat] = yearMonthFormat;
    if (!(shortMonthDayFormat !== null)) dart.assertFailed(null, I[0], 114, 15, "shortMonthDayFormat != null");
    this[_shortMonthDayFormat] = shortMonthDayFormat;
    if (!(decimalFormat !== null)) dart.assertFailed(null, I[0], 116, 15, "decimalFormat != null");
    this[_decimalFormat] = decimalFormat;
    if (!(twoDigitZeroPaddedFormat !== null)) dart.assertFailed(null, I[0], 118, 15, "twoDigitZeroPaddedFormat != null");
    this[_twoDigitZeroPaddedFormat] = twoDigitZeroPaddedFormat;
    ;
  }).prototype = material_localizations$.GlobalMaterialLocalizations.prototype;
  dart.addTypeTests(material_localizations$.GlobalMaterialLocalizations);
  dart.addTypeCaches(material_localizations$.GlobalMaterialLocalizations);
  material_localizations$.GlobalMaterialLocalizations[dart.implements] = () => [material_localizations.MaterialLocalizations];
  dart.setMethodSignature(material_localizations$.GlobalMaterialLocalizations, () => ({
    __proto__: dart.getMethods(material_localizations$.GlobalMaterialLocalizations.__proto__),
    formatHour: dart.fnType(core.String, [time.TimeOfDay], {alwaysUse24HourFormat: core.bool}, {}),
    formatMinute: dart.fnType(core.String, [time.TimeOfDay]),
    formatYear: dart.fnType(core.String, [core.DateTime]),
    formatCompactDate: dart.fnType(core.String, [core.DateTime]),
    formatShortDate: dart.fnType(core.String, [core.DateTime]),
    formatMediumDate: dart.fnType(core.String, [core.DateTime]),
    formatFullDate: dart.fnType(core.String, [core.DateTime]),
    formatMonthYear: dart.fnType(core.String, [core.DateTime]),
    formatShortMonthDay: dart.fnType(core.String, [core.DateTime]),
    parseCompactDate: dart.fnType(dart.nullable(core.DateTime), [dart.nullable(core.String)]),
    formatDecimal: dart.fnType(core.String, [core.int]),
    formatTimeOfDay: dart.fnType(core.String, [time.TimeOfDay], {alwaysUse24HourFormat: core.bool}, {}),
    [_formatDayPeriod]: dart.fnType(dart.nullable(core.String), [time.TimeOfDay]),
    dateRangeStartDateSemanticLabel: dart.fnType(core.String, [core.String]),
    dateRangeEndDateSemanticLabel: dart.fnType(core.String, [core.String]),
    aboutListTileTitle: dart.fnType(core.String, [core.String]),
    pageRowsInfoTitle: dart.fnType(core.String, [core.int, core.int, core.int, core.bool]),
    tabLabel: dart.fnType(core.String, [], {}, {tabCount: core.int, tabIndex: core.int}),
    selectedRowCountTitle: dart.fnType(core.String, [core.int]),
    timeOfDayFormat: dart.fnType(time.TimeOfDayFormat, [], {alwaysUse24HourFormat: core.bool}, {}),
    licensesPackageDetailText: dart.fnType(core.String, [core.int]),
    remainingTextFieldCharacterCount: dart.fnType(core.String, [core.int])
  }));
  dart.setGetterSignature(material_localizations$.GlobalMaterialLocalizations, () => ({
    __proto__: dart.getGetters(material_localizations$.GlobalMaterialLocalizations.__proto__),
    narrowWeekdays: core.List$(core.String),
    firstDayOfWeekIndex: core.int,
    selectedRowCountTitleZero: dart.nullable(core.String),
    selectedRowCountTitleOne: dart.nullable(core.String),
    selectedRowCountTitleTwo: dart.nullable(core.String),
    selectedRowCountTitleFew: dart.nullable(core.String),
    selectedRowCountTitleMany: dart.nullable(core.String),
    licensesPackageDetailTextZero: dart.nullable(core.String),
    licensesPackageDetailTextOne: dart.nullable(core.String),
    licensesPackageDetailTextTwo: dart.nullable(core.String),
    licensesPackageDetailTextMany: dart.nullable(core.String),
    licensesPackageDetailTextFew: dart.nullable(core.String),
    remainingTextFieldCharacterCountZero: dart.nullable(core.String),
    remainingTextFieldCharacterCountOne: dart.nullable(core.String),
    remainingTextFieldCharacterCountTwo: dart.nullable(core.String),
    remainingTextFieldCharacterCountMany: dart.nullable(core.String),
    remainingTextFieldCharacterCountFew: dart.nullable(core.String)
  }));
  dart.setLibraryUri(material_localizations$.GlobalMaterialLocalizations, I[1]);
  dart.setFieldSignature(material_localizations$.GlobalMaterialLocalizations, () => ({
    __proto__: dart.getFields(material_localizations$.GlobalMaterialLocalizations.__proto__),
    [_localeName$]: dart.finalFieldType(core.String),
    [_fullYearFormat$]: dart.finalFieldType(date_format.DateFormat),
    [_compactDateFormat$]: dart.finalFieldType(date_format.DateFormat),
    [_shortDateFormat$]: dart.finalFieldType(date_format.DateFormat),
    [_mediumDateFormat$]: dart.finalFieldType(date_format.DateFormat),
    [_longDateFormat$]: dart.finalFieldType(date_format.DateFormat),
    [_yearMonthFormat$]: dart.finalFieldType(date_format.DateFormat),
    [_shortMonthDayFormat$]: dart.finalFieldType(date_format.DateFormat),
    [_decimalFormat$]: dart.finalFieldType(number_format.NumberFormat),
    [_twoDigitZeroPaddedFormat$]: dart.finalFieldType(number_format.NumberFormat)
  }));
  dart.setStaticFieldSignature(material_localizations$.GlobalMaterialLocalizations, () => ['delegate', 'delegates']);
  dart.defineLazy(material_localizations$.GlobalMaterialLocalizations, {
    /*material_localizations$.GlobalMaterialLocalizations.delegate*/get delegate() {
      return C[11] || CT.C11;
    },
    /*material_localizations$.GlobalMaterialLocalizations.delegates*/get delegates() {
      return C[12] || CT.C12;
    }
  }, false);
  material_localizations$._MaterialLocalizationsDelegate = class _MaterialLocalizationsDelegate extends localizations.LocalizationsDelegate$(material_localizations.MaterialLocalizations) {
    static ['_#new#tearOff']() {
      return new material_localizations$._MaterialLocalizationsDelegate.new();
    }
    isSupported(locale) {
      return generated_material_localizations.kMaterialSupportedLanguages.contains(locale.languageCode);
    }
    load(locale) {
      if (!this.isSupported(locale)) dart.assertFailed(null, I[0], 727, 12, "isSupported(locale)");
      return material_localizations$._MaterialLocalizationsDelegate._loadedTranslations[$putIfAbsent](locale, dart.fn(() => {
        date_localizations.loadDateIntlDataIfNotLoaded();
        let localeName = intl.Intl.canonicalizedLocale(locale.toString());
        if (!(locale.toString() === localeName)) dart.assertFailed("Flutter does not support the non-standard locale form " + dart.str(locale) + " (which " + "might be " + localeName, I[0], 733, 9, "locale.toString() == localeName");
        let fullYearFormat = null;
        let compactDateFormat = null;
        let shortDateFormat = null;
        let mediumDateFormat = null;
        let longDateFormat = null;
        let yearMonthFormat = null;
        let shortMonthDayFormat = null;
        if (date_format.DateFormat.localeExists(localeName)) {
          fullYearFormat = new date_format.DateFormat.y(localeName);
          compactDateFormat = new date_format.DateFormat.yMd(localeName);
          shortDateFormat = new date_format.DateFormat.yMMMd(localeName);
          mediumDateFormat = new date_format.DateFormat.MMMEd(localeName);
          longDateFormat = new date_format.DateFormat.yMMMMEEEEd(localeName);
          yearMonthFormat = new date_format.DateFormat.yMMMM(localeName);
          shortMonthDayFormat = new date_format.DateFormat.MMMd(localeName);
        } else if (date_format.DateFormat.localeExists(locale.languageCode)) {
          fullYearFormat = new date_format.DateFormat.y(locale.languageCode);
          compactDateFormat = new date_format.DateFormat.yMd(locale.languageCode);
          shortDateFormat = new date_format.DateFormat.yMMMd(locale.languageCode);
          mediumDateFormat = new date_format.DateFormat.MMMEd(locale.languageCode);
          longDateFormat = new date_format.DateFormat.yMMMMEEEEd(locale.languageCode);
          yearMonthFormat = new date_format.DateFormat.yMMMM(locale.languageCode);
          shortMonthDayFormat = new date_format.DateFormat.MMMd(locale.languageCode);
        } else {
          fullYearFormat = new date_format.DateFormat.y();
          compactDateFormat = new date_format.DateFormat.yMd();
          shortDateFormat = new date_format.DateFormat.yMMMd();
          mediumDateFormat = new date_format.DateFormat.MMMEd();
          longDateFormat = new date_format.DateFormat.yMMMMEEEEd();
          yearMonthFormat = new date_format.DateFormat.yMMMM();
          shortMonthDayFormat = new date_format.DateFormat.MMMd();
        }
        let decimalFormat = null;
        let twoDigitZeroPaddedFormat = null;
        if (number_format.NumberFormat.localeExists(localeName)) {
          decimalFormat = number_format.NumberFormat.decimalPattern(localeName);
          twoDigitZeroPaddedFormat = number_format.NumberFormat.new("00", localeName);
        } else if (number_format.NumberFormat.localeExists(locale.languageCode)) {
          decimalFormat = number_format.NumberFormat.decimalPattern(locale.languageCode);
          twoDigitZeroPaddedFormat = number_format.NumberFormat.new("00", locale.languageCode);
        } else {
          decimalFormat = number_format.NumberFormat.decimalPattern();
          twoDigitZeroPaddedFormat = number_format.NumberFormat.new("00");
        }
        return new (T.SynchronousFutureOfMaterialLocalizations()).new(dart.nullCheck(generated_material_localizations.getMaterialTranslation(locale, fullYearFormat, compactDateFormat, shortDateFormat, mediumDateFormat, longDateFormat, yearMonthFormat, shortMonthDayFormat, decimalFormat, twoDigitZeroPaddedFormat)));
      }, T.VoidToSynchronousFutureOfMaterialLocalizations()));
    }
    shouldReload(old) {
      material_localizations$._MaterialLocalizationsDelegate.as(old);
      return false;
    }
    toString() {
      return "GlobalMaterialLocalizations.delegate(" + dart.str(generated_material_localizations.kMaterialSupportedLanguages[$length]) + " locales)";
    }
  };
  (material_localizations$._MaterialLocalizationsDelegate.new = function() {
    material_localizations$._MaterialLocalizationsDelegate.__proto__.new.call(this);
    ;
  }).prototype = material_localizations$._MaterialLocalizationsDelegate.prototype;
  dart.addTypeTests(material_localizations$._MaterialLocalizationsDelegate);
  dart.addTypeCaches(material_localizations$._MaterialLocalizationsDelegate);
  dart.setMethodSignature(material_localizations$._MaterialLocalizationsDelegate, () => ({
    __proto__: dart.getMethods(material_localizations$._MaterialLocalizationsDelegate.__proto__),
    isSupported: dart.fnType(core.bool, [ui.Locale]),
    load: dart.fnType(async.Future$(material_localizations.MaterialLocalizations), [ui.Locale]),
    shouldReload: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(material_localizations$._MaterialLocalizationsDelegate, I[1]);
  dart.setStaticFieldSignature(material_localizations$._MaterialLocalizationsDelegate, () => ['_loadedTranslations']);
  dart.defineExtensionMethods(material_localizations$._MaterialLocalizationsDelegate, ['toString']);
  dart.defineLazy(material_localizations$._MaterialLocalizationsDelegate, {
    /*material_localizations$._MaterialLocalizationsDelegate._loadedTranslations*/get _loadedTranslations() {
      return new (T.LinkedMapOfLocale$FutureOfMaterialLocalizations()).new();
    }
  }, false);
  material_localizations$._get24HourVersionOf = function _get24HourVersionOf(original) {
    switch (original) {
      case C[5] || CT.C5:
      case C[6] || CT.C6:
      case C[8] || CT.C8:
      case C[4] || CT.C4:
        {
          return original;
        }
      case C[3] || CT.C3:
      case C[7] || CT.C7:
        {
          return time.TimeOfDayFormat.HH_colon_mm;
        }
    }
  };
  generated_material_localizations.MaterialLocalizationAf = class MaterialLocalizationAf extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationAf.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Meer oor $applicationName";
    }
    get alertDialogLabel() {
      return "Opletberig";
    }
    get anteMeridiemAbbreviation() {
      return "vm.";
    }
    get backButtonTooltip() {
      return "Terug";
    }
    get calendarModeButtonLabel() {
      return "Skakel oor na kalender";
    }
    get cancelButtonLabel() {
      return "KANSELLEER";
    }
    get closeButtonLabel() {
      return "MAAK TOE";
    }
    get closeButtonTooltip() {
      return "Maak toe";
    }
    get collapsedIconTapHint() {
      return "Vou uit";
    }
    get continueButtonLabel() {
      return "GAAN VOORT";
    }
    get copyButtonLabel() {
      return "Kopieer";
    }
    get cutButtonLabel() {
      return "Knip";
    }
    get dateHelpText() {
      return "dd-mm-jjjj";
    }
    get dateInputLabel() {
      return "Voer datum in";
    }
    get dateOutOfRangeLabel() {
      return "Buite reeks.";
    }
    get datePickerHelpText() {
      return "KIES DATUM";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Einddatum $fullDate";
    }
    get dateRangeEndLabel() {
      return "Einddatum";
    }
    get dateRangePickerHelpText() {
      return "KIES REEKS";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Begindatum $fullDate";
    }
    get dateRangeStartLabel() {
      return "Begindatum";
    }
    get dateSeparator() {
      return "-";
    }
    get deleteButtonTooltip() {
      return "Vee uit";
    }
    get dialModeButtonLabel() {
      return "Skakel oor na wyserplaatkiesermodus";
    }
    get dialogLabel() {
      return "Dialoog";
    }
    get drawerLabel() {
      return "Navigasiekieslys";
    }
    get expandedIconTapHint() {
      return "Vou in";
    }
    get firstPageTooltip() {
      return "Eerste bladsy";
    }
    get hideAccountsLabel() {
      return "Versteek rekeninge";
    }
    get inputDateModeButtonLabel() {
      return "Skakel oor na invoer";
    }
    get inputTimeModeButtonLabel() {
      return "Skakel oor na teksinvoermodus";
    }
    get invalidDateFormatLabel() {
      return "Ongeldige formaat.";
    }
    get invalidDateRangeLabel() {
      return "Ongeldige reeks.";
    }
    get invalidTimeLabel() {
      return "Voer 'n geldige tyd in";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "Power Off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Spasie";
    }
    get lastPageTooltip() {
      return "Laaste bladsy";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 lisensie";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount lisensies";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Lisensies";
    }
    get menuBarMenuLabel() {
      return "Kieslysbalkkieslys";
    }
    get modalBarrierDismissLabel() {
      return "Maak toe";
    }
    get moreButtonTooltip() {
      return "Nog";
    }
    get nextMonthTooltip() {
      return "Volgende maand";
    }
    get nextPageTooltip() {
      return "Volgende bladsy";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Maak navigasiekieslys oop";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow van $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow van ongeveer $rowCount";
    }
    get pasteButtonLabel() {
      return "Plak";
    }
    get popupMenuLabel() {
      return "Opspringkieslys";
    }
    get postMeridiemAbbreviation() {
      return "nm.";
    }
    get previousMonthTooltip() {
      return "Vorige maand";
    }
    get previousPageTooltip() {
      return "Vorige bladsy";
    }
    get refreshIndicatorSemanticLabel() {
      return "Herlaai";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 karakter oor";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount karakters oor";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "Skuif af";
    }
    get reorderItemLeft() {
      return "Skuif na links";
    }
    get reorderItemRight() {
      return "Skuif na regs";
    }
    get reorderItemToEnd() {
      return "Skuif na die einde";
    }
    get reorderItemToStart() {
      return "Skuif na die begin";
    }
    get reorderItemUp() {
      return "Skuif op";
    }
    get rowsPerPageTitle() {
      return "Rye per bladsy:";
    }
    get saveButtonLabel() {
      return "STOOR";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Soek";
    }
    get selectAllButtonLabel() {
      return "Kies alles";
    }
    get selectYearSemanticsLabel() {
      return "Kies jaar";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 item is gekies";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount items is gekies";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Wys rekeninge";
    }
    get showMenuTooltip() {
      return "Wys kieslys";
    }
    get signedInLabel() {
      return "Aangemeld";
    }
    get tabLabelRaw() {
      return "Oortjie $tabIndex van $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "KIES TYD";
    }
    get timePickerHourLabel() {
      return "Uur";
    }
    get timePickerHourModeAnnouncement() {
      return "Kies ure";
    }
    get timePickerInputHelpText() {
      return "VOER TYD IN";
    }
    get timePickerMinuteLabel() {
      return "Minuut";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Kies minute";
    }
    get unspecifiedDate() {
      return "Datum";
    }
    get unspecifiedDateRange() {
      return "Datumreeks";
    }
    get viewLicensesButtonLabel() {
      return "BEKYK LISENSIES";
    }
  };
  (generated_material_localizations.MaterialLocalizationAf.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "af";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationAf.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationAf.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationAf);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationAf);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationAf, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationAf.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationAf, I[2]);
  generated_material_localizations.MaterialLocalizationAm = class MaterialLocalizationAm extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationAm.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "ስለ $applicationName";
    }
    get alertDialogLabel() {
      return "ማንቂያ";
    }
    get anteMeridiemAbbreviation() {
      return "ጥዋት";
    }
    get backButtonTooltip() {
      return "ተመለስ";
    }
    get calendarModeButtonLabel() {
      return "ወደ የቀን መቁጠሪያ ቀይር";
    }
    get cancelButtonLabel() {
      return "ይቅር";
    }
    get closeButtonLabel() {
      return "ዝጋ";
    }
    get closeButtonTooltip() {
      return "ዝጋ";
    }
    get collapsedIconTapHint() {
      return "ዘርጋ";
    }
    get continueButtonLabel() {
      return "ቀጥል";
    }
    get copyButtonLabel() {
      return "ቅዳ";
    }
    get cutButtonLabel() {
      return "ቁረጥ";
    }
    get dateHelpText() {
      return "ወወ/ቀቀ/ዓዓዓዓ";
    }
    get dateInputLabel() {
      return "ቀን ያስገቡ";
    }
    get dateOutOfRangeLabel() {
      return "ከክልል ውጪ።";
    }
    get datePickerHelpText() {
      return "ቀን ይምረጡ";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "የማብቂያ ቀን $fullDate";
    }
    get dateRangeEndLabel() {
      return "የመጨረሻ ቀን";
    }
    get dateRangePickerHelpText() {
      return "ክልል ይምረጡ";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "የመጀመሪያ ቀን $fullDate";
    }
    get dateRangeStartLabel() {
      return "የመጀመሪያ ቀን";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "ሰርዝ";
    }
    get dialModeButtonLabel() {
      return "ወደ መደወያ መራጭ ሁነታ ቀይር";
    }
    get dialogLabel() {
      return "መገናኛ";
    }
    get drawerLabel() {
      return "የዳሰሳ ምናሌ";
    }
    get expandedIconTapHint() {
      return "ሰብስብ";
    }
    get firstPageTooltip() {
      return "የመጀመሪያው ገጽ";
    }
    get hideAccountsLabel() {
      return "መለያዎችን ደብቅ";
    }
    get inputDateModeButtonLabel() {
      return "ወደ ግቤት ቀይር";
    }
    get inputTimeModeButtonLabel() {
      return "ወደ ጽሑፍ ግቤት ሁነታ ቀይር";
    }
    get invalidDateFormatLabel() {
      return "ልክ ያልሆነ ቅርጸት።";
    }
    get invalidDateRangeLabel() {
      return "ልክ ያልኾነ ክልል።";
    }
    get invalidTimeLabel() {
      return "የሚሠራ ሰዓት ያስገቡ";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "የኋሊት መደምሰሻ";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "ጣቢያ ወደ ታች";
    }
    get keyboardKeyChannelUp() {
      return "ጣቢያ ወደ ላይ";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "አስወጣ";
    }
    get keyboardKeyEnd() {
      return "ጨርስ";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "መነሻ";
    }
    get keyboardKeyInsert() {
      return "አስገባ";
    }
    get keyboardKeyMeta() {
      return "ሜታ";
    }
    get keyboardKeyMetaMacOs() {
      return "ትዕዛዝ";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "+NUM";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "ኃይል";
    }
    get keyboardKeyPowerOff() {
      return "ኃይል አጥፋ";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "ምረጥ";
    }
    get keyboardKeySpace() {
      return "ክፍተት";
    }
    get lastPageTooltip() {
      return "የመጨረሻው ገጽ";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 ፈቃድ";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount ፈቃዶች";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "ፈቃዶች";
    }
    get menuBarMenuLabel() {
      return "የምናሌ አሞሌ ምናሌ";
    }
    get modalBarrierDismissLabel() {
      return "አሰናብት";
    }
    get moreButtonTooltip() {
      return "ተጨማሪ";
    }
    get nextMonthTooltip() {
      return "ቀጣይ ወር";
    }
    get nextPageTooltip() {
      return "ቀጣይ ገጽ";
    }
    get okButtonLabel() {
      return "እሺ";
    }
    get openAppDrawerTooltip() {
      return "የዳሰሳ ምናሌን ክፈት";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow ከ$rowCount ውስጥ";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow ከ$rowCount ያህል ውስጥ";
    }
    get pasteButtonLabel() {
      return "ለጥፍ";
    }
    get popupMenuLabel() {
      return "የብቅ-ባይ ምናሌ";
    }
    get postMeridiemAbbreviation() {
      return "ከሰዓት";
    }
    get previousMonthTooltip() {
      return "ቀዳሚ ወር";
    }
    get previousPageTooltip() {
      return "ቀዳሚ ገጽ";
    }
    get refreshIndicatorSemanticLabel() {
      return "አድስ";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 ቁምፊ ይቀራል";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount ቁምፊዎች ይቀራሉ";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "ወደ ታች ውሰድ";
    }
    get reorderItemLeft() {
      return "ወደ ግራ ውሰድ";
    }
    get reorderItemRight() {
      return "ወደ ቀኝ ውሰድ";
    }
    get reorderItemToEnd() {
      return "ወደ መጨረሻ ውሰድ";
    }
    get reorderItemToStart() {
      return "ወደ መጀመሪያ ውሰድ";
    }
    get reorderItemUp() {
      return "ወደ ላይ ውሰድ";
    }
    get rowsPerPageTitle() {
      return "ረድፎች በገጽ፦";
    }
    get saveButtonLabel() {
      return "አስቀምጥ";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "ይፈልጉ";
    }
    get selectAllButtonLabel() {
      return "ሁሉንም ምረጥ";
    }
    get selectYearSemanticsLabel() {
      return "ዓመት ይምረጡ";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 ንጥል ተመርጧል";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount ንጥሎች ተመርጠዋል";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "መለያዎችን አሳይ";
    }
    get showMenuTooltip() {
      return "ምናሌን አሳይ";
    }
    get signedInLabel() {
      return "በመለያ ገብቷል";
    }
    get tabLabelRaw() {
      return "ትር $tabIndex ከ$tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "ጊዜ ይምረጡ";
    }
    get timePickerHourLabel() {
      return "ሰዓት";
    }
    get timePickerHourModeAnnouncement() {
      return "ሰዓታትን ምረጥ";
    }
    get timePickerInputHelpText() {
      return "ሰዓት ያስገቡ";
    }
    get timePickerMinuteLabel() {
      return "ደቂቃ";
    }
    get timePickerMinuteModeAnnouncement() {
      return "ደቂቃዎችን ይምረጡ";
    }
    get unspecifiedDate() {
      return "ቀን";
    }
    get unspecifiedDateRange() {
      return "የቀኖች ርዝመት";
    }
    get viewLicensesButtonLabel() {
      return "ፈቃዶችን ይመልከቱ";
    }
  };
  (generated_material_localizations.MaterialLocalizationAm.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "am";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationAm.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationAm.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationAm);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationAm);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationAm, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationAm.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationAm, I[2]);
  generated_material_localizations.MaterialLocalizationAr = class MaterialLocalizationAr extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationAr.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "لمحة عن \"$applicationName\"";
    }
    get alertDialogLabel() {
      return "تنبيه";
    }
    get anteMeridiemAbbreviation() {
      return "ص";
    }
    get backButtonTooltip() {
      return "رجوع";
    }
    get calendarModeButtonLabel() {
      return "التبديل إلى التقويم";
    }
    get cancelButtonLabel() {
      return "إلغاء";
    }
    get closeButtonLabel() {
      return "إغلاق";
    }
    get closeButtonTooltip() {
      return "إغلاق";
    }
    get collapsedIconTapHint() {
      return "توسيع";
    }
    get continueButtonLabel() {
      return "متابعة";
    }
    get copyButtonLabel() {
      return "نسخ";
    }
    get cutButtonLabel() {
      return "قص";
    }
    get dateHelpText() {
      return "yyyy/mm/dd";
    }
    get dateInputLabel() {
      return "إدخال التاريخ";
    }
    get dateOutOfRangeLabel() {
      return "التاريخ خارج النطاق.";
    }
    get datePickerHelpText() {
      return "اختيار التاريخ";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "تاريخ الانتهاء $fullDate";
    }
    get dateRangeEndLabel() {
      return "تاريخ الانتهاء";
    }
    get dateRangePickerHelpText() {
      return "اختيار النطاق";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "تاريخ البدء $fullDate";
    }
    get dateRangeStartLabel() {
      return "تاريخ البدء";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "حذف";
    }
    get dialModeButtonLabel() {
      return "التبديل إلى وضع \"منتقي قُرص الساعة\"";
    }
    get dialogLabel() {
      return "مربع حوار";
    }
    get drawerLabel() {
      return "قائمة تنقل";
    }
    get expandedIconTapHint() {
      return "تصغير";
    }
    get firstPageTooltip() {
      return "الصفحة الأولى";
    }
    get hideAccountsLabel() {
      return "إخفاء الحسابات";
    }
    get inputDateModeButtonLabel() {
      return "التبديل إلى الإدخال";
    }
    get inputTimeModeButtonLabel() {
      return "التبديل إلى وضع \"إدخال النص\"";
    }
    get invalidDateFormatLabel() {
      return "التنسيق غير صالح.";
    }
    get invalidDateRangeLabel() {
      return "النطاق غير صالح.";
    }
    get invalidTimeLabel() {
      return "يُرجى إدخال وقت صالح.";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "القناة التالية";
    }
    get keyboardKeyChannelUp() {
      return "القناة السابقة";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "الرقم 0";
    }
    get keyboardKeyNumpad1() {
      return "الرقم 1";
    }
    get keyboardKeyNumpad2() {
      return "الرقم 2";
    }
    get keyboardKeyNumpad3() {
      return "الرقم 3";
    }
    get keyboardKeyNumpad4() {
      return "الرقم 4";
    }
    get keyboardKeyNumpad5() {
      return "الرقم 5";
    }
    get keyboardKeyNumpad6() {
      return "الرقم 6";
    }
    get keyboardKeyNumpad7() {
      return "الرقم 7";
    }
    get keyboardKeyNumpad8() {
      return "الرقم 8";
    }
    get keyboardKeyNumpad9() {
      return "الرقم 9";
    }
    get keyboardKeyNumpadAdd() {
      return "علامة الجمع +";
    }
    get keyboardKeyNumpadComma() {
      return "الفاصلة ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "النقطة .";
    }
    get keyboardKeyNumpadDivide() {
      return "علامة القسمة /";
    }
    get keyboardKeyNumpadEnter() {
      return "المفتاح Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "علامة التساوي =";
    }
    get keyboardKeyNumpadMultiply() {
      return "علامة الضرب *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "القوس الأيسر )";
    }
    get keyboardKeyNumpadParenRight() {
      return "القوس الأيمن (";
    }
    get keyboardKeyNumpadSubtract() {
      return "علامة الطرح -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "زر التشغيل";
    }
    get keyboardKeyPowerOff() {
      return "زر الإطفاء";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "مفتاح الاختيار";
    }
    get keyboardKeySpace() {
      return "مفتاح المسافة";
    }
    get lastPageTooltip() {
      return "الصفحة الأخيرة";
    }
    get licensesPackageDetailTextFew() {
      return "$licenseCount تراخيص";
    }
    get licensesPackageDetailTextMany() {
      return "$licenseCount ترخيصًا";
    }
    get licensesPackageDetailTextOne() {
      return "ترخيص واحد";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount ترخيص";
    }
    get licensesPackageDetailTextTwo() {
      return "ترخيصان ($licenseCount)";
    }
    get licensesPackageDetailTextZero() {
      return "ما مِن تراخيص";
    }
    get licensesPageTitle() {
      return "التراخيص";
    }
    get menuBarMenuLabel() {
      return "قائمة شريط القوائم";
    }
    get modalBarrierDismissLabel() {
      return "رفض";
    }
    get moreButtonTooltip() {
      return "المزيد";
    }
    get nextMonthTooltip() {
      return "الشهر التالي";
    }
    get nextPageTooltip() {
      return "الصفحة التالية";
    }
    get okButtonLabel() {
      return "حسنًا";
    }
    get openAppDrawerTooltip() {
      return "فتح قائمة التنقل";
    }
    get pageRowsInfoTitleRaw() {
      return "من $firstRow إلى $lastRow من إجمالي $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "من $firstRow إلى $lastRow من إجمالي $rowCount تقريبًا";
    }
    get pasteButtonLabel() {
      return "لصق";
    }
    get popupMenuLabel() {
      return "قائمة منبثقة";
    }
    get postMeridiemAbbreviation() {
      return "م";
    }
    get previousMonthTooltip() {
      return "الشهر السابق";
    }
    get previousPageTooltip() {
      return "الصفحة السابقة";
    }
    get refreshIndicatorSemanticLabel() {
      return "إعادة تحميل";
    }
    get remainingTextFieldCharacterCountFew() {
      return "$remainingCount أحرف متبقية";
    }
    get remainingTextFieldCharacterCountMany() {
      return "$remainingCount حرفًا متبقيًا";
    }
    get remainingTextFieldCharacterCountOne() {
      return "حرف واحد متبقٍ";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount حرف متبقٍ";
    }
    get remainingTextFieldCharacterCountTwo() {
      return "حرفان ($remainingCount) متبقيان";
    }
    get remainingTextFieldCharacterCountZero() {
      return "لا أحرف متبقية";
    }
    get reorderItemDown() {
      return "نقل لأسفل";
    }
    get reorderItemLeft() {
      return "نقل لليمين";
    }
    get reorderItemRight() {
      return "نقل لليسار";
    }
    get reorderItemToEnd() {
      return "نقل إلى نهاية القائمة";
    }
    get reorderItemToStart() {
      return "نقل إلى بداية القائمة";
    }
    get reorderItemUp() {
      return "نقل لأعلى";
    }
    get rowsPerPageTitle() {
      return "عدد الصفوف في الصفحة:";
    }
    get saveButtonLabel() {
      return "حفظ";
    }
    get scriptCategory() {
      return typography.ScriptCategory.tall;
    }
    get searchFieldLabel() {
      return "بحث";
    }
    get selectAllButtonLabel() {
      return "اختيار الكل";
    }
    get selectYearSemanticsLabel() {
      return "اختيار العام";
    }
    get selectedRowCountTitleFew() {
      return "تم اختيار $selectedRowCount عنصر";
    }
    get selectedRowCountTitleMany() {
      return "تم اختيار $selectedRowCount عنصرًا";
    }
    get selectedRowCountTitleOne() {
      return "تم اختيار عنصر واحد";
    }
    get selectedRowCountTitleOther() {
      return "تم اختيار $selectedRowCount عنصر";
    }
    get selectedRowCountTitleTwo() {
      return "تم اختيار عنصرين ($selectedRowCount)";
    }
    get selectedRowCountTitleZero() {
      return "لم يتم اختيار أي عنصر";
    }
    get showAccountsLabel() {
      return "إظهار الحسابات";
    }
    get showMenuTooltip() {
      return "عرض القائمة";
    }
    get signedInLabel() {
      return "تم تسجيل الدخول";
    }
    get tabLabelRaw() {
      return "علامة التبويب $tabIndex من $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.h_colon_mm_space_a;
    }
    get timePickerDialHelpText() {
      return "اختيار الوقت";
    }
    get timePickerHourLabel() {
      return "ساعة";
    }
    get timePickerHourModeAnnouncement() {
      return "اختيار الساعات";
    }
    get timePickerInputHelpText() {
      return "إدخال الوقت";
    }
    get timePickerMinuteLabel() {
      return "دقيقة";
    }
    get timePickerMinuteModeAnnouncement() {
      return "اختيار الدقائق";
    }
    get unspecifiedDate() {
      return "التاريخ";
    }
    get unspecifiedDateRange() {
      return "النطاق الزمني";
    }
    get viewLicensesButtonLabel() {
      return "الاطّلاع على التراخيص";
    }
  };
  (generated_material_localizations.MaterialLocalizationAr.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "ar";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationAr.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationAr.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationAr);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationAr);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationAr, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationAr.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationAr, I[2]);
  generated_material_localizations.MaterialLocalizationAs = class MaterialLocalizationAs extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationAs.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationNameৰ বিষয়ে";
    }
    get alertDialogLabel() {
      return "সতৰ্কবাৰ্তা";
    }
    get anteMeridiemAbbreviation() {
      return "পূৰ্বাহ্ন";
    }
    get backButtonTooltip() {
      return "উভতি যাওক";
    }
    get calendarModeButtonLabel() {
      return "কেলেণ্ডাৰলৈ সলনি কৰক";
    }
    get cancelButtonLabel() {
      return "বাতিল কৰক";
    }
    get closeButtonLabel() {
      return "বন্ধ কৰক";
    }
    get closeButtonTooltip() {
      return "বন্ধ কৰক";
    }
    get collapsedIconTapHint() {
      return "বিস্তাৰ কৰক";
    }
    get continueButtonLabel() {
      return "অব্যাহত ৰাখক";
    }
    get copyButtonLabel() {
      return "প্ৰতিলিপি কৰক";
    }
    get cutButtonLabel() {
      return "কাট কৰক";
    }
    get dateHelpText() {
      return "mm/dd/yyyy";
    }
    get dateInputLabel() {
      return "তাৰিখটো দিয়ক";
    }
    get dateOutOfRangeLabel() {
      return "সীমাৰ বাহিৰত।";
    }
    get datePickerHelpText() {
      return "তাৰিখ বাছনি কৰক";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "সমাপ্তিৰ তাৰিখ $fullDate";
    }
    get dateRangeEndLabel() {
      return "সমাপ্তিৰ তাৰিখ";
    }
    get dateRangePickerHelpText() {
      return "পৰিসৰ বাছনি কৰক";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "আৰম্ভণিৰ তাৰিখ $fullDate";
    }
    get dateRangeStartLabel() {
      return "আৰম্ভণিৰ তাৰিখ";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "মচক";
    }
    get dialModeButtonLabel() {
      return "ডায়েল বাছনিকৰ্তাৰ ম’ডলৈ সলনি কৰক";
    }
    get dialogLabel() {
      return "ডায়ল'গ";
    }
    get drawerLabel() {
      return "নেভিগেশ্বন মেনু";
    }
    get expandedIconTapHint() {
      return "সংকোচন কৰক";
    }
    get firstPageTooltip() {
      return "প্রথম পৃষ্ঠা";
    }
    get hideAccountsLabel() {
      return "একাউণ্টসমূহ লুকুৱাওক";
    }
    get inputDateModeButtonLabel() {
      return "ইনপুটলৈ সলনি কৰক";
    }
    get inputTimeModeButtonLabel() {
      return "পাঠ ইনপুটৰ ম’ডলৈ সলনি কৰক";
    }
    get invalidDateFormatLabel() {
      return "অমান্য ফৰ্মেট।";
    }
    get invalidDateRangeLabel() {
      return "অমান্য পৰিসৰ।";
    }
    get invalidTimeLabel() {
      return "এটা মান্য সময় দিয়ক";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "বেকস্পেচ";
    }
    get keyboardKeyCapsLock() {
      return "কেপ্‌ছ লক";
    }
    get keyboardKeyChannelDown() {
      return "চেনেল ডাউন";
    }
    get keyboardKeyChannelUp() {
      return "চেনেল আপ";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "ইজেক্ট";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "মেটা";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "নং ০";
    }
    get keyboardKeyNumpad1() {
      return "নং ১";
    }
    get keyboardKeyNumpad2() {
      return "নং ২";
    }
    get keyboardKeyNumpad3() {
      return "নং ৩";
    }
    get keyboardKeyNumpad4() {
      return "নং ৪";
    }
    get keyboardKeyNumpad5() {
      return "নং ৫";
    }
    get keyboardKeyNumpad6() {
      return "নং ৬";
    }
    get keyboardKeyNumpad7() {
      return "নং ৭";
    }
    get keyboardKeyNumpad8() {
      return "নং ৮";
    }
    get keyboardKeyNumpad9() {
      return "নং ৯";
    }
    get keyboardKeyNumpadAdd() {
      return "নং +";
    }
    get keyboardKeyNumpadComma() {
      return "নং ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "নং .";
    }
    get keyboardKeyNumpadDivide() {
      return "নং /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "নং =";
    }
    get keyboardKeyNumpadMultiply() {
      return "নং *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "নং (";
    }
    get keyboardKeyNumpadParenRight() {
      return "নং )";
    }
    get keyboardKeyNumpadSubtract() {
      return "নং -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "পাৱাৰ";
    }
    get keyboardKeyPowerOff() {
      return "পাৱাৰ অফ";
    }
    get keyboardKeyPrintScreen() {
      return "প্ৰিণ্ট স্ক্ৰীন";
    }
    get keyboardKeyScrollLock() {
      return "স্ক্ৰ’ল লক";
    }
    get keyboardKeySelect() {
      return "ছিলেক্ট";
    }
    get keyboardKeySpace() {
      return "স্পেচ";
    }
    get lastPageTooltip() {
      return "অন্তিম পৃষ্ঠা";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "১ খন অনুজ্ঞাপত্ৰ";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount খন অনুজ্ঞাপত্ৰ";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "অনুজ্ঞাপত্ৰসমূহ";
    }
    get menuBarMenuLabel() {
      return "মেনু বাৰ মেনু";
    }
    get modalBarrierDismissLabel() {
      return "অগ্ৰাহ্য কৰক";
    }
    get moreButtonTooltip() {
      return "অধিক";
    }
    get nextMonthTooltip() {
      return "পৰৱৰ্তী মাহ";
    }
    get nextPageTooltip() {
      return "পৰৱৰ্তী পৃষ্ঠা";
    }
    get okButtonLabel() {
      return "ঠিক আছে";
    }
    get openAppDrawerTooltip() {
      return "নেভিগেশ্বন মেনু খোলক";
    }
    get pageRowsInfoTitleRaw() {
      return "$rowCountৰ $firstRow–$lastRow";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$rowCountৰ $firstRow–$lastRow";
    }
    get pasteButtonLabel() {
      return "পে'ষ্ট কৰক";
    }
    get popupMenuLabel() {
      return "প'পআপ মেনু";
    }
    get postMeridiemAbbreviation() {
      return "অপৰাহ্ন";
    }
    get previousMonthTooltip() {
      return "পূৰ্বৱৰ্তী মাহ";
    }
    get previousPageTooltip() {
      return "পূৰ্বৱৰ্তী পৃষ্ঠা";
    }
    get refreshIndicatorSemanticLabel() {
      return "ৰিফ্ৰেশ্ব কৰক";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "১টা বর্ণ বাকী আছে";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCountটা বর্ণ বাকী আছে";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "তললৈ স্থানান্তৰ কৰক";
    }
    get reorderItemLeft() {
      return "বাওঁফাললৈ স্থানান্তৰ কৰক";
    }
    get reorderItemRight() {
      return "সোঁফাললৈ স্থানান্তৰ কৰক";
    }
    get reorderItemToEnd() {
      return "শেষলৈ স্থানান্তৰ কৰক";
    }
    get reorderItemToStart() {
      return "আৰম্ভণিলৈ স্থানান্তৰ কৰক";
    }
    get reorderItemUp() {
      return "ওপৰলৈ নিয়ক";
    }
    get rowsPerPageTitle() {
      return "প্ৰতিটো পৃষ্ঠাত থকা শাৰী:";
    }
    get saveButtonLabel() {
      return "ছেভ কৰক";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "সন্ধান কৰক";
    }
    get selectAllButtonLabel() {
      return "সকলো বাছনি কৰক";
    }
    get selectYearSemanticsLabel() {
      return "বছৰ বাছনি কৰক";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "১টা বস্তু বাছনি কৰা হ'ল";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCountটা বস্তু বাছনি কৰা হ’ল";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "একাউণ্টসমূহ দেখুৱাওক";
    }
    get showMenuTooltip() {
      return "মেনুখন দেখুৱাওক";
    }
    get signedInLabel() {
      return "ছাইন ইন কৰা হ’ল";
    }
    get tabLabelRaw() {
      return "$tabCountৰ $tabIndexটা টেব";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "সময় বাছনি কৰক";
    }
    get timePickerHourLabel() {
      return "ঘণ্টা";
    }
    get timePickerHourModeAnnouncement() {
      return "সময় বাছনি কৰক";
    }
    get timePickerInputHelpText() {
      return "সময় দিয়ক";
    }
    get timePickerMinuteLabel() {
      return "মিনিট";
    }
    get timePickerMinuteModeAnnouncement() {
      return "মিনিট বাছনি কৰক";
    }
    get unspecifiedDate() {
      return "তাৰিখ";
    }
    get unspecifiedDateRange() {
      return "তাৰিখৰ পৰিসৰ";
    }
    get viewLicensesButtonLabel() {
      return "অনুজ্ঞাপত্ৰসমূহ চাওক";
    }
  };
  (generated_material_localizations.MaterialLocalizationAs.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "as";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationAs.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationAs.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationAs);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationAs);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationAs, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationAs.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationAs, I[2]);
  generated_material_localizations.MaterialLocalizationAz = class MaterialLocalizationAz extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationAz.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName haqqında";
    }
    get alertDialogLabel() {
      return "Bildiriş";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "Geri";
    }
    get calendarModeButtonLabel() {
      return "Təqvimə keçin";
    }
    get cancelButtonLabel() {
      return "LƏĞV EDİN";
    }
    get closeButtonLabel() {
      return "BAĞLAYIN";
    }
    get closeButtonTooltip() {
      return "Bağlayın";
    }
    get collapsedIconTapHint() {
      return "Genişləndirin";
    }
    get continueButtonLabel() {
      return "DAVAM EDİN";
    }
    get copyButtonLabel() {
      return "Kopyalayın";
    }
    get cutButtonLabel() {
      return "Kəsin";
    }
    get dateHelpText() {
      return "aa.gg.iiii";
    }
    get dateInputLabel() {
      return "Tarix daxil edin";
    }
    get dateOutOfRangeLabel() {
      return "Aralıqdan kənar.";
    }
    get datePickerHelpText() {
      return "TARİX SEÇİN";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Bitmə tarixi: $fullDate";
    }
    get dateRangeEndLabel() {
      return "Bitmə tarixi";
    }
    get dateRangePickerHelpText() {
      return "ARALIQ SEÇİN";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Başlama tarixi: $fullDate";
    }
    get dateRangeStartLabel() {
      return "Başlama tarixi";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Silin";
    }
    get dialModeButtonLabel() {
      return "Yığım seçici rejiminə keçin";
    }
    get dialogLabel() {
      return "Dialoq";
    }
    get drawerLabel() {
      return "Naviqasiya menyusu";
    }
    get expandedIconTapHint() {
      return "Yığcamlaşdırın";
    }
    get firstPageTooltip() {
      return "Birinci səhifə";
    }
    get hideAccountsLabel() {
      return "Hesabları gizlədin";
    }
    get inputDateModeButtonLabel() {
      return "Daxiletməyə keçin";
    }
    get inputTimeModeButtonLabel() {
      return "Mətn daxiletmə rejiminə keçin";
    }
    get invalidDateFormatLabel() {
      return "Yanlış format.";
    }
    get invalidDateRangeLabel() {
      return "Yanlış aralıq.";
    }
    get invalidTimeLabel() {
      return "Düzgün vaxt daxil edin";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Böyük Hərf";
    }
    get keyboardKeyChannelDown() {
      return "Aşağıdakı kanala keçin";
    }
    get keyboardKeyChannelUp() {
      return "Yuxarıdakı kanala keçin";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Çıxarın";
    }
    get keyboardKeyEnd() {
      return "Son";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Əsas səhifə";
    }
    get keyboardKeyInsert() {
      return "Daxil edin";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Əmr";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Rəqəm";
    }
    get keyboardKeyNumpad0() {
      return "Rəq 0";
    }
    get keyboardKeyNumpad1() {
      return "Rəq 1";
    }
    get keyboardKeyNumpad2() {
      return "Rəq 2";
    }
    get keyboardKeyNumpad3() {
      return "Rəq 3";
    }
    get keyboardKeyNumpad4() {
      return "Rəq 4";
    }
    get keyboardKeyNumpad5() {
      return "Rəq 5";
    }
    get keyboardKeyNumpad6() {
      return "Rəq 6";
    }
    get keyboardKeyNumpad7() {
      return "Rəq 7";
    }
    get keyboardKeyNumpad8() {
      return "Rəq 8";
    }
    get keyboardKeyNumpad9() {
      return "Rəq 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Rəq +";
    }
    get keyboardKeyNumpadComma() {
      return "Rəq ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Rəq .";
    }
    get keyboardKeyNumpadDivide() {
      return "Rəq /";
    }
    get keyboardKeyNumpadEnter() {
      return "Rəqəm Daxiletmə";
    }
    get keyboardKeyNumpadEqual() {
      return "Rəq =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Rəq *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Rəq (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Rəq )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Rəq -";
    }
    get keyboardKeyPageDown() {
      return "Aşağı Səhifə";
    }
    get keyboardKeyPageUp() {
      return "Yuxarı Səhifə";
    }
    get keyboardKeyPower() {
      return "Qidalanma";
    }
    get keyboardKeyPowerOff() {
      return "Söndürmə";
    }
    get keyboardKeyPrintScreen() {
      return "Ekran Çapı";
    }
    get keyboardKeyScrollLock() {
      return "Sürüşdürmə";
    }
    get keyboardKeySelect() {
      return "Seçin";
    }
    get keyboardKeySpace() {
      return "Boşluq";
    }
    get lastPageTooltip() {
      return "Son səhifə";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 lisenziya";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount lisenziya";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Lisenziyalar";
    }
    get menuBarMenuLabel() {
      return "Menyu paneli menyusu";
    }
    get modalBarrierDismissLabel() {
      return "İmtina edin";
    }
    get moreButtonTooltip() {
      return "Daha çox";
    }
    get nextMonthTooltip() {
      return "Növbəti ay";
    }
    get nextPageTooltip() {
      return "Növbəti səhifə";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Naviqasiya menyusunu açın";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow/$rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow/ təxminən $rowCount";
    }
    get pasteButtonLabel() {
      return "Yerləşdirin";
    }
    get popupMenuLabel() {
      return "Popap menyusu";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "Keçən ay";
    }
    get previousPageTooltip() {
      return "Əvvəlki səhifə";
    }
    get refreshIndicatorSemanticLabel() {
      return "Yeniləyin";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 simvol qalır";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount simvol qalır";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "Aşağı köçürün";
    }
    get reorderItemLeft() {
      return "Sola köçürün";
    }
    get reorderItemRight() {
      return "Sağa köçürün";
    }
    get reorderItemToEnd() {
      return "Sona köçürün";
    }
    get reorderItemToStart() {
      return "Əvvələ köçürün";
    }
    get reorderItemUp() {
      return "Yuxarı köçürün";
    }
    get rowsPerPageTitle() {
      return "Hər səhifə üzrə sıra:";
    }
    get saveButtonLabel() {
      return "YADDA SAXLAYIN";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Axtarın";
    }
    get selectAllButtonLabel() {
      return "Hamısını seçin";
    }
    get selectYearSemanticsLabel() {
      return "İl seçin";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 element seçildi";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount element seçildi";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Hesabları göstərin";
    }
    get showMenuTooltip() {
      return "Menyunu göstərin";
    }
    get signedInLabel() {
      return "Daxil olundu";
    }
    get tabLabelRaw() {
      return "$tabIndex/$tabCount tab";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "VAXT SEÇİN";
    }
    get timePickerHourLabel() {
      return "Saat";
    }
    get timePickerHourModeAnnouncement() {
      return "Saat seçin";
    }
    get timePickerInputHelpText() {
      return "VAXTI DAXİL EDİN";
    }
    get timePickerMinuteLabel() {
      return "Dəqiqə";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Dəqiqə seçin";
    }
    get unspecifiedDate() {
      return "Tarix";
    }
    get unspecifiedDateRange() {
      return "Tarix aralığı";
    }
    get viewLicensesButtonLabel() {
      return "LİSENZİYALARA BAXIN";
    }
  };
  (generated_material_localizations.MaterialLocalizationAz.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "az";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationAz.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationAz.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationAz);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationAz);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationAz, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationAz.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationAz, I[2]);
  generated_material_localizations.MaterialLocalizationBe = class MaterialLocalizationBe extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationBe.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Інфармацыя пра праграму \"$applicationName\"";
    }
    get alertDialogLabel() {
      return "Абвестка";
    }
    get anteMeridiemAbbreviation() {
      return "раніцы";
    }
    get backButtonTooltip() {
      return "Назад";
    }
    get calendarModeButtonLabel() {
      return "Пераключыцца на каляндар";
    }
    get cancelButtonLabel() {
      return "СКАСАВАЦЬ";
    }
    get closeButtonLabel() {
      return "ЗАКРЫЦЬ";
    }
    get closeButtonTooltip() {
      return "Закрыць";
    }
    get collapsedIconTapHint() {
      return "Разгарнуць";
    }
    get continueButtonLabel() {
      return "ПРАЦЯГНУЦЬ";
    }
    get copyButtonLabel() {
      return "Капіраваць";
    }
    get cutButtonLabel() {
      return "Выразаць";
    }
    get dateHelpText() {
      return "дд.мм.гггг";
    }
    get dateInputLabel() {
      return "Увядзіце дату";
    }
    get dateOutOfRangeLabel() {
      return "Па-за межамі дыяпазону.";
    }
    get datePickerHelpText() {
      return "ВЫБАР ДАТЫ";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Дата заканчэння: $fullDate";
    }
    get dateRangeEndLabel() {
      return "Дата заканчэння";
    }
    get dateRangePickerHelpText() {
      return "ВЫБАР ДЫЯПАЗОНУ";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Дата пачатку: $fullDate";
    }
    get dateRangeStartLabel() {
      return "Дата пачатку";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Выдаліць";
    }
    get dialModeButtonLabel() {
      return "Пераход у рэжым выбару часу";
    }
    get dialogLabel() {
      return "Дыялогавае акно";
    }
    get drawerLabel() {
      return "Меню навігацыі";
    }
    get expandedIconTapHint() {
      return "Згарнуць";
    }
    get firstPageTooltip() {
      return "На першую старонку";
    }
    get hideAccountsLabel() {
      return "Схаваць уліковыя запісы";
    }
    get inputDateModeButtonLabel() {
      return "Пераключыцца на ўвод тэксту";
    }
    get inputTimeModeButtonLabel() {
      return "Пераход у рэжым уводу тэксту";
    }
    get invalidDateFormatLabel() {
      return "Няправільны фармат.";
    }
    get invalidDateRangeLabel() {
      return "Няправільны дыяпазон.";
    }
    get invalidTimeLabel() {
      return "Увядзіце дапушчальны час";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Наступны канал";
    }
    get keyboardKeyChannelUp() {
      return "Папярэдні канал";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Выняць";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Сілкаванне";
    }
    get keyboardKeyPowerOff() {
      return "Выключыць";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Выбраць";
    }
    get keyboardKeySpace() {
      return "Прабел";
    }
    get lastPageTooltip() {
      return "На апошнюю старонку";
    }
    get licensesPackageDetailTextFew() {
      return "$licenseCount ліцэнзіі";
    }
    get licensesPackageDetailTextMany() {
      return "$licenseCount ліцэнзій";
    }
    get licensesPackageDetailTextOne() {
      return "1 ліцэнзія";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount ліцэнзіі";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Ліцэнзіі";
    }
    get menuBarMenuLabel() {
      return "Меню \"Панэль меню\"";
    }
    get modalBarrierDismissLabel() {
      return "Адхіліць";
    }
    get moreButtonTooltip() {
      return "Яшчэ";
    }
    get nextMonthTooltip() {
      return "Наступны месяц";
    }
    get nextPageTooltip() {
      return "Наступная старонка";
    }
    get okButtonLabel() {
      return "ОК";
    }
    get openAppDrawerTooltip() {
      return "Адкрыць меню навігацыі";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow з $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow з прыблізна $rowCount";
    }
    get pasteButtonLabel() {
      return "Уставіць";
    }
    get popupMenuLabel() {
      return "Меню ўсплывальнага акна";
    }
    get postMeridiemAbbreviation() {
      return "вечара";
    }
    get previousMonthTooltip() {
      return "Папярэдні месяц";
    }
    get previousPageTooltip() {
      return "Папярэдняя старонка";
    }
    get refreshIndicatorSemanticLabel() {
      return "Абнавіць";
    }
    get remainingTextFieldCharacterCountFew() {
      return "Засталося $remainingCount сімвалы";
    }
    get remainingTextFieldCharacterCountMany() {
      return "Засталося $remainingCount сімвалаў";
    }
    get remainingTextFieldCharacterCountOne() {
      return "Застаўся 1 сімвал";
    }
    get remainingTextFieldCharacterCountOther() {
      return "Засталося $remainingCount сімвала";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "Перамясціць уніз";
    }
    get reorderItemLeft() {
      return "Перамясціць улева";
    }
    get reorderItemRight() {
      return "Перамясціць управа";
    }
    get reorderItemToEnd() {
      return "Перамясціць у канец";
    }
    get reorderItemToStart() {
      return "Перамясціць у пачатак";
    }
    get reorderItemUp() {
      return "Перамясціць уверх";
    }
    get rowsPerPageTitle() {
      return "Радкоў на старонку:";
    }
    get saveButtonLabel() {
      return "ЗАХАВАЦЬ";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Пошук";
    }
    get selectAllButtonLabel() {
      return "Выбраць усе";
    }
    get selectYearSemanticsLabel() {
      return "Выберыце год";
    }
    get selectedRowCountTitleFew() {
      return "Выбрана $selectedRowCount элементы";
    }
    get selectedRowCountTitleMany() {
      return "Выбрана $selectedRowCount элементаў";
    }
    get selectedRowCountTitleOne() {
      return "Выбраны 1 элемент";
    }
    get selectedRowCountTitleOther() {
      return "Выбрана $selectedRowCount элемента";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Паказаць уліковыя запісы";
    }
    get showMenuTooltip() {
      return "Паказаць меню";
    }
    get signedInLabel() {
      return "Уваход выкананы";
    }
    get tabLabelRaw() {
      return "Укладка $tabIndex з $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "ВЫБЕРЫЦЕ ЧАС";
    }
    get timePickerHourLabel() {
      return "Гадзіна";
    }
    get timePickerHourModeAnnouncement() {
      return "Выберыце гадзіны";
    }
    get timePickerInputHelpText() {
      return "УВЯДЗІЦЕ ЧАС";
    }
    get timePickerMinuteLabel() {
      return "Хвіліна";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Выберыце хвіліны";
    }
    get unspecifiedDate() {
      return "Дата";
    }
    get unspecifiedDateRange() {
      return "Дыяпазон дат";
    }
    get viewLicensesButtonLabel() {
      return "ПАКАЗАЦЬ ЛІЦЭНЗІІ";
    }
  };
  (generated_material_localizations.MaterialLocalizationBe.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "be";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationBe.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationBe.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationBe);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationBe);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationBe, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationBe.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationBe, I[2]);
  generated_material_localizations.MaterialLocalizationBg = class MaterialLocalizationBg extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationBg.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Всичко за $applicationName";
    }
    get alertDialogLabel() {
      return "Сигнал";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "Назад";
    }
    get calendarModeButtonLabel() {
      return "Превключване към календара";
    }
    get cancelButtonLabel() {
      return "ОТКАЗ";
    }
    get closeButtonLabel() {
      return "ЗАТВАРЯНЕ";
    }
    get closeButtonTooltip() {
      return "Затваряне";
    }
    get collapsedIconTapHint() {
      return "Разгъване";
    }
    get continueButtonLabel() {
      return "НАПРЕД";
    }
    get copyButtonLabel() {
      return "Копиране";
    }
    get cutButtonLabel() {
      return "Изрязване";
    }
    get dateHelpText() {
      return "дд.мм.гггг";
    }
    get dateInputLabel() {
      return "Въвеждане на дата";
    }
    get dateOutOfRangeLabel() {
      return "Извън валидния период от време.";
    }
    get datePickerHelpText() {
      return "ИЗБИРАНЕ НА ДАТА";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Крайна дата: $fullDate";
    }
    get dateRangeEndLabel() {
      return "Крайна дата";
    }
    get dateRangePickerHelpText() {
      return "ИЗБИРАНЕ НА ПЕРИОД ОТ ВРЕМЕ";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Начална дата: $fullDate";
    }
    get dateRangeStartLabel() {
      return "Начална дата";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Изтриване";
    }
    get dialModeButtonLabel() {
      return "Превключване към режим за избор на циферблат";
    }
    get dialogLabel() {
      return "Диалогов прозорец";
    }
    get drawerLabel() {
      return "Меню за навигация";
    }
    get expandedIconTapHint() {
      return "Свиване";
    }
    get firstPageTooltip() {
      return "Първа страница";
    }
    get hideAccountsLabel() {
      return "Скриване на профилите";
    }
    get inputDateModeButtonLabel() {
      return "Превключване към въвеждане";
    }
    get inputTimeModeButtonLabel() {
      return "Превключване към режим за въвеждане на текст";
    }
    get invalidDateFormatLabel() {
      return "Невалиден формат.";
    }
    get invalidDateRangeLabel() {
      return "Невалиден период от време.";
    }
    get invalidTimeLabel() {
      return "Въведете валиден час";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "Power Off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "Последна страница";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 лиценз";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount лиценза";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Лицензи";
    }
    get menuBarMenuLabel() {
      return "Меню на лентата с менюта";
    }
    get modalBarrierDismissLabel() {
      return "Отхвърляне";
    }
    get moreButtonTooltip() {
      return "Още";
    }
    get nextMonthTooltip() {
      return "Следващият месец";
    }
    get nextPageTooltip() {
      return "Следващата страница";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Отваряне на менюто за навигация";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow – $lastRow от $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow – $lastRow от около $rowCount";
    }
    get pasteButtonLabel() {
      return "Поставяне";
    }
    get popupMenuLabel() {
      return "Изскачащо меню";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "Предишният месец";
    }
    get previousPageTooltip() {
      return "Предишната страница";
    }
    get refreshIndicatorSemanticLabel() {
      return "Опресняване";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "Остава 1 знак";
    }
    get remainingTextFieldCharacterCountOther() {
      return "Остават $remainingCount знака";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Преместване надолу";
    }
    get reorderItemLeft() {
      return "Преместване наляво";
    }
    get reorderItemRight() {
      return "Преместване надясно";
    }
    get reorderItemToEnd() {
      return "Преместване в края";
    }
    get reorderItemToStart() {
      return "Преместване в началото";
    }
    get reorderItemUp() {
      return "Преместване нагоре";
    }
    get rowsPerPageTitle() {
      return "Редове на страница:";
    }
    get saveButtonLabel() {
      return "ЗАПАЗВАНЕ";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Търсене";
    }
    get selectAllButtonLabel() {
      return "Избиране на всички";
    }
    get selectYearSemanticsLabel() {
      return "Избиране на година";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "Избран е 1 елемент";
    }
    get selectedRowCountTitleOther() {
      return "Избрани са $selectedRowCount елемента";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Показване на профилите";
    }
    get showMenuTooltip() {
      return "Показване на менюто";
    }
    get signedInLabel() {
      return "В профила си сте";
    }
    get tabLabelRaw() {
      return "Раздел $tabIndex от $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "ИЗБЕРЕТЕ ЧАС";
    }
    get timePickerHourLabel() {
      return "Час";
    }
    get timePickerHourModeAnnouncement() {
      return "Избиране на часове";
    }
    get timePickerInputHelpText() {
      return "ВЪВЕДЕТЕ ЧАС";
    }
    get timePickerMinuteLabel() {
      return "Минута";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Избиране на минути";
    }
    get unspecifiedDate() {
      return "Дата";
    }
    get unspecifiedDateRange() {
      return "Период от време";
    }
    get viewLicensesButtonLabel() {
      return "ПРЕГЛЕД НА ЛИЦЕНЗИТЕ";
    }
  };
  (generated_material_localizations.MaterialLocalizationBg.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "bg";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationBg.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationBg.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationBg);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationBg);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationBg, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationBg.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationBg, I[2]);
  generated_material_localizations.MaterialLocalizationBn = class MaterialLocalizationBn extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationBn.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName সম্পর্কে";
    }
    get alertDialogLabel() {
      return "সতর্কতা";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "ফিরে যান";
    }
    get calendarModeButtonLabel() {
      return "ক্যালেন্ডার মোডে বদল করুন";
    }
    get cancelButtonLabel() {
      return "বাতিল করুন";
    }
    get closeButtonLabel() {
      return "বন্ধ করুন";
    }
    get closeButtonTooltip() {
      return "বন্ধ করুন";
    }
    get collapsedIconTapHint() {
      return "বড় করুন";
    }
    get continueButtonLabel() {
      return "চালিয়ে যান";
    }
    get copyButtonLabel() {
      return "কপি করুন";
    }
    get cutButtonLabel() {
      return "কাট করুন";
    }
    get dateHelpText() {
      return "dd/mm/yyyy";
    }
    get dateInputLabel() {
      return "তারিখ লিখুন";
    }
    get dateOutOfRangeLabel() {
      return "তারিখের ব্যাপ্তির বাইরে।";
    }
    get datePickerHelpText() {
      return "তারিখ বেছে নিন";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "শেষ হওয়ার তারিখ $fullDate";
    }
    get dateRangeEndLabel() {
      return "শেষ হওয়ার তারিখ";
    }
    get dateRangePickerHelpText() {
      return "তারিখের ব্যাপ্তি বেছে নিন";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "শুরুর তারিখ $fullDate";
    }
    get dateRangeStartLabel() {
      return "শুরুর তারিখ";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "মুছে দিন";
    }
    get dialModeButtonLabel() {
      return "ডায়াল বেছে নেওয়ার মোডে পাল্টান";
    }
    get dialogLabel() {
      return "ডায়ালগ";
    }
    get drawerLabel() {
      return "নেভিগেশান মেনু";
    }
    get expandedIconTapHint() {
      return "আড়াল করুন";
    }
    get firstPageTooltip() {
      return "প্রথম পৃষ্ঠা";
    }
    get hideAccountsLabel() {
      return "অ্যাকাউন্টগুলি লুকান";
    }
    get inputDateModeButtonLabel() {
      return "ইনপুট মোডে বদল করুন";
    }
    get inputTimeModeButtonLabel() {
      return "টেক্সট ইনপুট মোডে পাল্টান";
    }
    get invalidDateFormatLabel() {
      return "ভুল ফর্ম্যাট।";
    }
    get invalidDateRangeLabel() {
      return "তারিখ সঠিক নয়।";
    }
    get invalidTimeLabel() {
      return "সঠিক সময় লিখুন";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "আগের চ্যানেলে যান";
    }
    get keyboardKeyChannelUp() {
      return "পরের চ্যানেলে যান";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "ইজেক্ট করুন";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "মেটা";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "Power Off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "বেছে নিন";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "শেষ পৃষ্ঠা";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "১টি লাইসেন্স";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCountটি লাইসেন্স";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "লাইসেন্স";
    }
    get menuBarMenuLabel() {
      return "মেনু বার মেনু";
    }
    get modalBarrierDismissLabel() {
      return "খারিজ করুন";
    }
    get moreButtonTooltip() {
      return "আরও";
    }
    get nextMonthTooltip() {
      return "পরের মাস";
    }
    get nextPageTooltip() {
      return "পরের পৃষ্ঠা";
    }
    get okButtonLabel() {
      return "ঠিক আছে";
    }
    get openAppDrawerTooltip() {
      return "নেভিগেশন মেনু খুলুন";
    }
    get pageRowsInfoTitleRaw() {
      return "$rowCountটির মধ্যে $firstRow-$lastRow";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "প্রায় $rowCountটির মধ্যে $firstRow-$lastRow নম্বর";
    }
    get pasteButtonLabel() {
      return "পেস্ট করুন";
    }
    get popupMenuLabel() {
      return "পপ-আপ মেনু";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "আগের মাস";
    }
    get previousPageTooltip() {
      return "আগের পৃষ্ঠা";
    }
    get refreshIndicatorSemanticLabel() {
      return "রিফ্রেশ করুন";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "আর ১টি অক্ষর লেখা যাবে";
    }
    get remainingTextFieldCharacterCountOther() {
      return "আর $remainingCountটি অক্ষর লেখা যাবে";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "নিচের দিকে সরান";
    }
    get reorderItemLeft() {
      return "বাঁদিকে সরান";
    }
    get reorderItemRight() {
      return "ডানদিকে সরান";
    }
    get reorderItemToEnd() {
      return "একদম শেষের দিকে যান";
    }
    get reorderItemToStart() {
      return "চালু করতে সরান";
    }
    get reorderItemUp() {
      return "উপরের দিকে সরান";
    }
    get rowsPerPageTitle() {
      return "প্রতি পৃষ্ঠায় সারির সংখ্যা:";
    }
    get saveButtonLabel() {
      return "সেভ করুন";
    }
    get scriptCategory() {
      return typography.ScriptCategory.tall;
    }
    get searchFieldLabel() {
      return "খুঁজুন";
    }
    get selectAllButtonLabel() {
      return "সব বেছে নিন";
    }
    get selectYearSemanticsLabel() {
      return "বছর বেছে নিন";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "১টি আইটেম বেছে নেওয়া হয়েছে";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCountটি আইটেম বেছে নেওয়া হয়েছে";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "অ্যাকাউন্টগুলি দেখান";
    }
    get showMenuTooltip() {
      return "মেনু দেখান";
    }
    get signedInLabel() {
      return "সাইন-ইন করা হয়েছে";
    }
    get tabLabelRaw() {
      return "$tabCount-এর মধ্যে $tabIndexটি ট্যাব";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "সময় বেছে নিন";
    }
    get timePickerHourLabel() {
      return "ঘণ্টা";
    }
    get timePickerHourModeAnnouncement() {
      return "ঘণ্টা বেছে নিন";
    }
    get timePickerInputHelpText() {
      return "সময় লিখুন";
    }
    get timePickerMinuteLabel() {
      return "মিনিট";
    }
    get timePickerMinuteModeAnnouncement() {
      return "মিনিট বেছে নিন";
    }
    get unspecifiedDate() {
      return "তারিখ";
    }
    get unspecifiedDateRange() {
      return "তারিখের ব্যাপ্তি";
    }
    get viewLicensesButtonLabel() {
      return "লাইসেন্স দেখুন";
    }
  };
  (generated_material_localizations.MaterialLocalizationBn.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "bn";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationBn.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationBn.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationBn);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationBn);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationBn, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationBn.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationBn, I[2]);
  generated_material_localizations.MaterialLocalizationBs = class MaterialLocalizationBs extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationBs.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "O aplikaciji $applicationName";
    }
    get alertDialogLabel() {
      return "Upozorenje";
    }
    get anteMeridiemAbbreviation() {
      return "prijepodne";
    }
    get backButtonTooltip() {
      return "Nazad";
    }
    get calendarModeButtonLabel() {
      return "Prebacite na kalendar";
    }
    get cancelButtonLabel() {
      return "OTKAŽI";
    }
    get closeButtonLabel() {
      return "ZATVORI";
    }
    get closeButtonTooltip() {
      return "Zatvaranje";
    }
    get collapsedIconTapHint() {
      return "Proširi";
    }
    get continueButtonLabel() {
      return "NASTAVI";
    }
    get copyButtonLabel() {
      return "Kopiraj";
    }
    get cutButtonLabel() {
      return "Izreži";
    }
    get dateHelpText() {
      return "dd. mm. gggg.";
    }
    get dateInputLabel() {
      return "Unesite datum";
    }
    get dateOutOfRangeLabel() {
      return "Izvan raspona.";
    }
    get datePickerHelpText() {
      return "ODABERITE DATUM";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Datum završetka: $fullDate";
    }
    get dateRangeEndLabel() {
      return "Datum završetka";
    }
    get dateRangePickerHelpText() {
      return "ODABERITE RASPON";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Datum početka: $fullDate";
    }
    get dateRangeStartLabel() {
      return "Datum početka";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Brisanje";
    }
    get dialModeButtonLabel() {
      return "Prebacivanje na način rada alata za biranje";
    }
    get dialogLabel() {
      return "Dijaloški okvir";
    }
    get drawerLabel() {
      return "Meni za navigaciju";
    }
    get expandedIconTapHint() {
      return "Suzi";
    }
    get firstPageTooltip() {
      return "Prva stranica";
    }
    get hideAccountsLabel() {
      return "Sakrij račune";
    }
    get inputDateModeButtonLabel() {
      return "Prebacite na unos teksta";
    }
    get inputTimeModeButtonLabel() {
      return "Prebacivanje na način rada unosa teksta";
    }
    get invalidDateFormatLabel() {
      return "Nevažeći format.";
    }
    get invalidDateRangeLabel() {
      return "Nevažeći raspon.";
    }
    get invalidTimeLabel() {
      return "Unesite ispravno vrijeme";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "Alt Gr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "prethodni kanal";
    }
    get keyboardKeyChannelUp() {
      return "sljedeći kanal";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "Pg Down";
    }
    get keyboardKeyPageUp() {
      return "Pg Up";
    }
    get keyboardKeyPower() {
      return "tipka za uključivanje";
    }
    get keyboardKeyPowerOff() {
      return "tipka za isključivanje";
    }
    get keyboardKeyPrintScreen() {
      return "Prt Sc";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "tipka za razmak";
    }
    get lastPageTooltip() {
      return "Posljednja stranica";
    }
    get licensesPackageDetailTextFew() {
      return "$licenseCount licence";
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 licenca";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licenci";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Licence";
    }
    get menuBarMenuLabel() {
      return "Meni trake menija";
    }
    get modalBarrierDismissLabel() {
      return "Odbaci";
    }
    get moreButtonTooltip() {
      return "Više";
    }
    get nextMonthTooltip() {
      return "Sljedeći mjesec";
    }
    get nextPageTooltip() {
      return "Sljedeća stranica";
    }
    get okButtonLabel() {
      return "Uredu";
    }
    get openAppDrawerTooltip() {
      return "Otvorite meni za navigaciju";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow od $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow od oko $rowCount";
    }
    get pasteButtonLabel() {
      return "Zalijepi";
    }
    get popupMenuLabel() {
      return "Skočni meni";
    }
    get postMeridiemAbbreviation() {
      return "poslijepodne";
    }
    get previousMonthTooltip() {
      return "Prethodni mjesec";
    }
    get previousPageTooltip() {
      return "Prethodna stranica";
    }
    get refreshIndicatorSemanticLabel() {
      return "Osvježi";
    }
    get remainingTextFieldCharacterCountFew() {
      return "Još $remainingCount znaka";
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "Još jedan znak";
    }
    get remainingTextFieldCharacterCountOther() {
      return "Još $remainingCount znakova";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Pomjeri nadolje";
    }
    get reorderItemLeft() {
      return "Pomjeri lijevo";
    }
    get reorderItemRight() {
      return "Pomjeri desno";
    }
    get reorderItemToEnd() {
      return "Pomjerite na kraj";
    }
    get reorderItemToStart() {
      return "Pomjerite na početak";
    }
    get reorderItemUp() {
      return "Pomjeri nagore";
    }
    get rowsPerPageTitle() {
      return "Broj redova po stranici:";
    }
    get saveButtonLabel() {
      return "SAČUVAJ";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Pretražite";
    }
    get selectAllButtonLabel() {
      return "Odaberi sve";
    }
    get selectYearSemanticsLabel() {
      return "Odaberite godinu";
    }
    get selectedRowCountTitleFew() {
      return "Odabrane su $selectedRowCount stavke";
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "Odabrana je jedna stavka";
    }
    get selectedRowCountTitleOther() {
      return "Odabrano je $selectedRowCount stavki";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Prikaži račune";
    }
    get showMenuTooltip() {
      return "Prikaži meni";
    }
    get signedInLabel() {
      return "Prijavljeni ste";
    }
    get tabLabelRaw() {
      return "$tabIndex. kartica od $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "ODABERITE VRIJEME";
    }
    get timePickerHourLabel() {
      return "Sat";
    }
    get timePickerHourModeAnnouncement() {
      return "Odaberite sat";
    }
    get timePickerInputHelpText() {
      return "UNESITE VRIJEME";
    }
    get timePickerMinuteLabel() {
      return "Minuta";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Odaberite minute";
    }
    get unspecifiedDate() {
      return "Datum";
    }
    get unspecifiedDateRange() {
      return "Raspon datuma";
    }
    get viewLicensesButtonLabel() {
      return "PRIKAŽI LICENCE";
    }
  };
  (generated_material_localizations.MaterialLocalizationBs.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "bs";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationBs.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationBs.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationBs);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationBs);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationBs, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationBs.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationBs, I[2]);
  generated_material_localizations.MaterialLocalizationCa = class MaterialLocalizationCa extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationCa.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Sobre $applicationName";
    }
    get alertDialogLabel() {
      return "Alerta";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "Enrere";
    }
    get calendarModeButtonLabel() {
      return "Canvia al calendari";
    }
    get cancelButtonLabel() {
      return "CANCEL·LA";
    }
    get closeButtonLabel() {
      return "TANCA";
    }
    get closeButtonTooltip() {
      return "Tanca";
    }
    get collapsedIconTapHint() {
      return "Desplega";
    }
    get continueButtonLabel() {
      return "CONTINUA";
    }
    get copyButtonLabel() {
      return "Copia";
    }
    get cutButtonLabel() {
      return "Retalla";
    }
    get dateHelpText() {
      return "mm/dd/aaaa";
    }
    get dateInputLabel() {
      return "Introdueix una data";
    }
    get dateOutOfRangeLabel() {
      return "Fora de l'abast.";
    }
    get datePickerHelpText() {
      return "SELECCIONA LA DATA";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Data de finalització $fullDate";
    }
    get dateRangeEndLabel() {
      return "Data de finalització";
    }
    get dateRangePickerHelpText() {
      return "SELECCIONA L'INTERVAL";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Data d'inici $fullDate";
    }
    get dateRangeStartLabel() {
      return "Data d'inici";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "Suprimeix";
    }
    get dialModeButtonLabel() {
      return "Canvia al mode de selector de dial";
    }
    get dialogLabel() {
      return "Diàleg";
    }
    get drawerLabel() {
      return "Menú de navegació";
    }
    get expandedIconTapHint() {
      return "Replega";
    }
    get firstPageTooltip() {
      return "Primera pàgina";
    }
    get hideAccountsLabel() {
      return "Amaga els comptes";
    }
    get inputDateModeButtonLabel() {
      return "Canvia a introducció de text";
    }
    get inputTimeModeButtonLabel() {
      return "Canvia al mode d'introducció de text";
    }
    get invalidDateFormatLabel() {
      return "El format no és vàlid.";
    }
    get invalidDateRangeLabel() {
      return "L'interval no és vàlid.";
    }
    get invalidTimeLabel() {
      return "Introdueix una hora vàlida";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "Alt Gr";
    }
    get keyboardKeyBackspace() {
      return "Retrocés";
    }
    get keyboardKeyCapsLock() {
      return "Bloq Maj";
    }
    get keyboardKeyChannelDown() {
      return "Canal següent";
    }
    get keyboardKeyChannelUp() {
      return "Canal anterior";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Supr";
    }
    get keyboardKeyEject() {
      return "Expulsa";
    }
    get keyboardKeyEnd() {
      return "Fi";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Inici";
    }
    get keyboardKeyInsert() {
      return "Inser";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Ordre";
    }
    get keyboardKeyMetaWindows() {
      return "Windows";
    }
    get keyboardKeyNumLock() {
      return "Bloq Núm";
    }
    get keyboardKeyNumpad0() {
      return "Núm. 0";
    }
    get keyboardKeyNumpad1() {
      return "Núm. 1";
    }
    get keyboardKeyNumpad2() {
      return "Núm. 2";
    }
    get keyboardKeyNumpad3() {
      return "Núm. 3";
    }
    get keyboardKeyNumpad4() {
      return "Núm. 4";
    }
    get keyboardKeyNumpad5() {
      return "Núm. 5";
    }
    get keyboardKeyNumpad6() {
      return "Núm. 6";
    }
    get keyboardKeyNumpad7() {
      return "Núm. 7";
    }
    get keyboardKeyNumpad8() {
      return "Núm. 8";
    }
    get keyboardKeyNumpad9() {
      return "Núm. 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Núm. +";
    }
    get keyboardKeyNumpadComma() {
      return "Núm. ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Núm. .";
    }
    get keyboardKeyNumpadDivide() {
      return "Núm. /";
    }
    get keyboardKeyNumpadEnter() {
      return "Núm. Retorn";
    }
    get keyboardKeyNumpadEqual() {
      return "Núm. =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Núm. *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Núm. (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Núm. )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Núm. -";
    }
    get keyboardKeyPageDown() {
      return "Av Pàg";
    }
    get keyboardKeyPageUp() {
      return "Re Pàg";
    }
    get keyboardKeyPower() {
      return "Engegada";
    }
    get keyboardKeyPowerOff() {
      return "Apagada";
    }
    get keyboardKeyPrintScreen() {
      return "Impr Pant";
    }
    get keyboardKeyScrollLock() {
      return "Bloq Despl";
    }
    get keyboardKeySelect() {
      return "Selecciona";
    }
    get keyboardKeySpace() {
      return "Espai";
    }
    get lastPageTooltip() {
      return "Darrera pàgina";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 llicència";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount llicències";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Llicències";
    }
    get menuBarMenuLabel() {
      return "Menú de la barra de menú";
    }
    get modalBarrierDismissLabel() {
      return "Ignora";
    }
    get moreButtonTooltip() {
      return "Més";
    }
    get nextMonthTooltip() {
      return "Mes següent";
    }
    get nextPageTooltip() {
      return "Pàgina següent";
    }
    get okButtonLabel() {
      return "D'ACORD";
    }
    get openAppDrawerTooltip() {
      return "Obre el menú de navegació";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow-$lastRow de $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow-$lastRow d'aproximadament $rowCount";
    }
    get pasteButtonLabel() {
      return "Enganxa";
    }
    get popupMenuLabel() {
      return "Menú emergent";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "Mes anterior";
    }
    get previousPageTooltip() {
      return "Pàgina anterior";
    }
    get refreshIndicatorSemanticLabel() {
      return "Actualitza";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "Queda 1 caràcter";
    }
    get remainingTextFieldCharacterCountOther() {
      return "Queden $remainingCount caràcters";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Mou avall";
    }
    get reorderItemLeft() {
      return "Mou cap a l'esquerra";
    }
    get reorderItemRight() {
      return "Mou cap a la dreta";
    }
    get reorderItemToEnd() {
      return "Mou al final";
    }
    get reorderItemToStart() {
      return "Mou al principi";
    }
    get reorderItemUp() {
      return "Mou amunt";
    }
    get rowsPerPageTitle() {
      return "Files per pàgina:";
    }
    get saveButtonLabel() {
      return "DESA";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Cerca";
    }
    get selectAllButtonLabel() {
      return "Selecciona-ho tot";
    }
    get selectYearSemanticsLabel() {
      return "Selecciona un any";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "S'ha seleccionat 1 element";
    }
    get selectedRowCountTitleOther() {
      return "S'han seleccionat $selectedRowCount elements";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Mostra els comptes";
    }
    get showMenuTooltip() {
      return "Mostra el menú";
    }
    get signedInLabel() {
      return "Sessió iniciada";
    }
    get tabLabelRaw() {
      return "Pestanya $tabIndex de $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "SELECCIONA L'HORA";
    }
    get timePickerHourLabel() {
      return "Hora";
    }
    get timePickerHourModeAnnouncement() {
      return "Selecciona les hores";
    }
    get timePickerInputHelpText() {
      return "INTRODUEIX L'HORA";
    }
    get timePickerMinuteLabel() {
      return "Minut";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Selecciona els minuts";
    }
    get unspecifiedDate() {
      return "Data";
    }
    get unspecifiedDateRange() {
      return "Interval de dates";
    }
    get viewLicensesButtonLabel() {
      return "MOSTRA LES LLICÈNCIES";
    }
  };
  (generated_material_localizations.MaterialLocalizationCa.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "ca";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationCa.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationCa.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationCa);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationCa);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationCa, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationCa.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationCa, I[2]);
  generated_material_localizations.MaterialLocalizationCs = class MaterialLocalizationCs extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationCs.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "O aplikaci $applicationName";
    }
    get alertDialogLabel() {
      return "Upozornění";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "Zpět";
    }
    get calendarModeButtonLabel() {
      return "Přepnout na kalendář";
    }
    get cancelButtonLabel() {
      return "ZRUŠIT";
    }
    get closeButtonLabel() {
      return "ZAVŘÍT";
    }
    get closeButtonTooltip() {
      return "Zavřít";
    }
    get collapsedIconTapHint() {
      return "Rozbalit";
    }
    get continueButtonLabel() {
      return "POKRAČOVAT";
    }
    get copyButtonLabel() {
      return "Kopírovat";
    }
    get cutButtonLabel() {
      return "Vyjmout";
    }
    get dateHelpText() {
      return "mm.dd.rrrr";
    }
    get dateInputLabel() {
      return "Zadejte datum";
    }
    get dateOutOfRangeLabel() {
      return "Mimo rozsah.";
    }
    get datePickerHelpText() {
      return "VYBERTE DATUM";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Datum ukončení $fullDate";
    }
    get dateRangeEndLabel() {
      return "Datum ukončení";
    }
    get dateRangePickerHelpText() {
      return "VYBERTE ROZSAH";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Datum zahájení $fullDate";
    }
    get dateRangeStartLabel() {
      return "Datum zahájení";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Smazat";
    }
    get dialModeButtonLabel() {
      return "Přepnout na režim výběru času";
    }
    get dialogLabel() {
      return "Dialogové okno";
    }
    get drawerLabel() {
      return "Navigační nabídka";
    }
    get expandedIconTapHint() {
      return "Sbalit";
    }
    get firstPageTooltip() {
      return "První stránka";
    }
    get hideAccountsLabel() {
      return "Skrýt účty";
    }
    get inputDateModeButtonLabel() {
      return "Přepnout na zadávání";
    }
    get inputTimeModeButtonLabel() {
      return "Přepnout na režim zadávání textu";
    }
    get invalidDateFormatLabel() {
      return "Neplatný formát.";
    }
    get invalidDateRangeLabel() {
      return "Neplatný rozsah.";
    }
    get invalidTimeLabel() {
      return "Zadejte platný čas";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "O kanál dolů";
    }
    get keyboardKeyChannelUp() {
      return "O kanál nahoru";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Odpojit";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Vypínač";
    }
    get keyboardKeyPowerOff() {
      return "Vypnout";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Vybrat";
    }
    get keyboardKeySpace() {
      return "Mezera";
    }
    get lastPageTooltip() {
      return "Poslední stránka";
    }
    get licensesPackageDetailTextFew() {
      return "$licenseCount licence";
    }
    get licensesPackageDetailTextMany() {
      return "$licenseCount licence";
    }
    get licensesPackageDetailTextOne() {
      return "1 licence";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licencí";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Licence";
    }
    get menuBarMenuLabel() {
      return "Nabídka na liště s nabídkou";
    }
    get modalBarrierDismissLabel() {
      return "Zavřít";
    }
    get moreButtonTooltip() {
      return "Více";
    }
    get nextMonthTooltip() {
      return "Další měsíc";
    }
    get nextPageTooltip() {
      return "Další stránka";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Otevřít navigační nabídku";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow z $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow z asi $rowCount";
    }
    get pasteButtonLabel() {
      return "Vložit";
    }
    get popupMenuLabel() {
      return "Vyskakovací nabídka";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "Předchozí měsíc";
    }
    get previousPageTooltip() {
      return "Předchozí stránka";
    }
    get refreshIndicatorSemanticLabel() {
      return "Obnovit";
    }
    get remainingTextFieldCharacterCountFew() {
      return "Zbývají $remainingCount znaky";
    }
    get remainingTextFieldCharacterCountMany() {
      return "Zbývá $remainingCount znaku";
    }
    get remainingTextFieldCharacterCountOne() {
      return "Zbývá 1 znak";
    }
    get remainingTextFieldCharacterCountOther() {
      return "Zbývá $remainingCount znaků";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Přesunout dolů";
    }
    get reorderItemLeft() {
      return "Přesunout doleva";
    }
    get reorderItemRight() {
      return "Přesunout doprava";
    }
    get reorderItemToEnd() {
      return "Přesunout na konec";
    }
    get reorderItemToStart() {
      return "Přesunout na začátek";
    }
    get reorderItemUp() {
      return "Přesunout nahoru";
    }
    get rowsPerPageTitle() {
      return "Počet řádků na stránku:";
    }
    get saveButtonLabel() {
      return "ULOŽIT";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Hledat";
    }
    get selectAllButtonLabel() {
      return "Vybrat vše";
    }
    get selectYearSemanticsLabel() {
      return "Vyberte rok";
    }
    get selectedRowCountTitleFew() {
      return "Jsou vybrány $selectedRowCount položky";
    }
    get selectedRowCountTitleMany() {
      return "Je vybráno $selectedRowCount položky";
    }
    get selectedRowCountTitleOne() {
      return "Je vybrána 1 položka";
    }
    get selectedRowCountTitleOther() {
      return "Je vybráno $selectedRowCount položek";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Zobrazit účty";
    }
    get showMenuTooltip() {
      return "Zobrazit nabídku";
    }
    get signedInLabel() {
      return "Uživatel přihlášen";
    }
    get tabLabelRaw() {
      return "Karta $tabIndex z $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "VYBERTE ČAS";
    }
    get timePickerHourLabel() {
      return "Hodina";
    }
    get timePickerHourModeAnnouncement() {
      return "Vyberte hodiny";
    }
    get timePickerInputHelpText() {
      return "ZADEJTE ČAS";
    }
    get timePickerMinuteLabel() {
      return "Minuta";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Vyberte minuty";
    }
    get unspecifiedDate() {
      return "Datum";
    }
    get unspecifiedDateRange() {
      return "Období";
    }
    get viewLicensesButtonLabel() {
      return "ZOBRAZIT LICENCE";
    }
  };
  (generated_material_localizations.MaterialLocalizationCs.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "cs";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationCs.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationCs.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationCs);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationCs);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationCs, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationCs.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationCs, I[2]);
  generated_material_localizations.MaterialLocalizationDa = class MaterialLocalizationDa extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationDa.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Om $applicationName";
    }
    get alertDialogLabel() {
      return "Underretning";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "Tilbage";
    }
    get calendarModeButtonLabel() {
      return "Skift til kalender";
    }
    get cancelButtonLabel() {
      return "ANNULLER";
    }
    get closeButtonLabel() {
      return "LUK";
    }
    get closeButtonTooltip() {
      return "Luk";
    }
    get collapsedIconTapHint() {
      return "Udvid";
    }
    get continueButtonLabel() {
      return "FORTSÆT";
    }
    get copyButtonLabel() {
      return "Kopiér";
    }
    get cutButtonLabel() {
      return "Klip";
    }
    get dateHelpText() {
      return "dd/mm/åååå";
    }
    get dateInputLabel() {
      return "Angiv en dato";
    }
    get dateOutOfRangeLabel() {
      return "Uden for rækkevidde.";
    }
    get datePickerHelpText() {
      return "VÆLG DATO";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Slutdato $fullDate";
    }
    get dateRangeEndLabel() {
      return "Slutdato";
    }
    get dateRangePickerHelpText() {
      return "VÆLG OMRÅDE";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Startdato $fullDate";
    }
    get dateRangeStartLabel() {
      return "Startdato";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Slet";
    }
    get dialModeButtonLabel() {
      return "Skift til urskivevælger";
    }
    get dialogLabel() {
      return "Dialogboks";
    }
    get drawerLabel() {
      return "Navigationsmenu";
    }
    get expandedIconTapHint() {
      return "Skjul";
    }
    get firstPageTooltip() {
      return "Første side";
    }
    get hideAccountsLabel() {
      return "Skjul konti";
    }
    get inputDateModeButtonLabel() {
      return "Skift til input";
    }
    get inputTimeModeButtonLabel() {
      return "Skift til indtastning";
    }
    get invalidDateFormatLabel() {
      return "Ugyldigt format.";
    }
    get invalidDateRangeLabel() {
      return "Ugyldigt interval.";
    }
    get invalidTimeLabel() {
      return "Angiv et gyldigt tidspunkt";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Skub ud";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDn";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Strøm";
    }
    get keyboardKeyPowerOff() {
      return "Sluk";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Vælg";
    }
    get keyboardKeySpace() {
      return "Mellemrumstasten";
    }
    get lastPageTooltip() {
      return "Sidste side";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 licens";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licenser";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Licenser";
    }
    get menuBarMenuLabel() {
      return "Menuen for menulinjen";
    }
    get modalBarrierDismissLabel() {
      return "Afvis";
    }
    get moreButtonTooltip() {
      return "Mere";
    }
    get nextMonthTooltip() {
      return "Næste måned";
    }
    get nextPageTooltip() {
      return "Næste side";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Åbn navigationsmenuen";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow-$lastRow af $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow-$lastRow af ca. $rowCount";
    }
    get pasteButtonLabel() {
      return "Indsæt";
    }
    get popupMenuLabel() {
      return "Pop op-menu";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "Forrige måned";
    }
    get previousPageTooltip() {
      return "Forrige side";
    }
    get refreshIndicatorSemanticLabel() {
      return "Opdater";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "Ét tegn tilbage";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount tegn tilbage";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Flyt ned";
    }
    get reorderItemLeft() {
      return "Flyt til venstre";
    }
    get reorderItemRight() {
      return "Flyt til højre";
    }
    get reorderItemToEnd() {
      return "Flyt til sidst på listen";
    }
    get reorderItemToStart() {
      return "Flyt til først på listen";
    }
    get reorderItemUp() {
      return "Flyt op";
    }
    get rowsPerPageTitle() {
      return "Rækker pr. side:";
    }
    get saveButtonLabel() {
      return "GEM";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Søg";
    }
    get selectAllButtonLabel() {
      return "Markér alt";
    }
    get selectYearSemanticsLabel() {
      return "Vælg år";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 element er valgt";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount elementer er valgt";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Vis konti";
    }
    get showMenuTooltip() {
      return "Vis menu";
    }
    get signedInLabel() {
      return "Logget ind";
    }
    get tabLabelRaw() {
      return "Fane $tabIndex af $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "VÆLG TIDSPUNKT";
    }
    get timePickerHourLabel() {
      return "Time";
    }
    get timePickerHourModeAnnouncement() {
      return "Vælg timer";
    }
    get timePickerInputHelpText() {
      return "ANGIV TIDSPUNKT";
    }
    get timePickerMinuteLabel() {
      return "Minut";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Vælg minutter";
    }
    get unspecifiedDate() {
      return "Dato";
    }
    get unspecifiedDateRange() {
      return "Datointerval";
    }
    get viewLicensesButtonLabel() {
      return "SE LICENSER";
    }
  };
  (generated_material_localizations.MaterialLocalizationDa.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "da";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationDa.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationDa.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationDa);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationDa);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationDa, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationDa.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationDa, I[2]);
  generated_material_localizations.MaterialLocalizationDe = class MaterialLocalizationDe extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationDe.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Über $applicationName";
    }
    get alertDialogLabel() {
      return "Benachrichtigung";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "Zurück";
    }
    get calendarModeButtonLabel() {
      return "Zum Kalender wechseln";
    }
    get cancelButtonLabel() {
      return "ABBRECHEN";
    }
    get closeButtonLabel() {
      return "SCHLIEẞEN";
    }
    get closeButtonTooltip() {
      return "Schließen";
    }
    get collapsedIconTapHint() {
      return "Maximieren";
    }
    get continueButtonLabel() {
      return "WEITER";
    }
    get copyButtonLabel() {
      return "Kopieren";
    }
    get cutButtonLabel() {
      return "Ausschneiden";
    }
    get dateHelpText() {
      return "tt.mm.jjjj";
    }
    get dateInputLabel() {
      return "Datum eingeben";
    }
    get dateOutOfRangeLabel() {
      return "Außerhalb des Zeitraums.";
    }
    get datePickerHelpText() {
      return "DATUM AUSWÄHLEN";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Enddatum $fullDate";
    }
    get dateRangeEndLabel() {
      return "Enddatum";
    }
    get dateRangePickerHelpText() {
      return "ZEITRAUM AUSWÄHLEN";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Startdatum $fullDate";
    }
    get dateRangeStartLabel() {
      return "Startdatum";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Löschen";
    }
    get dialModeButtonLabel() {
      return "Zur Uhrzeitauswahl wechseln";
    }
    get dialogLabel() {
      return "Dialogfeld";
    }
    get drawerLabel() {
      return "Navigationsmenü";
    }
    get expandedIconTapHint() {
      return "Minimieren";
    }
    get firstPageTooltip() {
      return "Erste Seite";
    }
    get hideAccountsLabel() {
      return "Konten ausblenden";
    }
    get inputDateModeButtonLabel() {
      return "Zur Texteingabe wechseln";
    }
    get inputTimeModeButtonLabel() {
      return "Zum Texteingabemodus wechseln";
    }
    get invalidDateFormatLabel() {
      return "Ungültiges Format.";
    }
    get invalidDateRangeLabel() {
      return "Ungültiger Zeitraum.";
    }
    get invalidTimeLabel() {
      return "Geben Sie eine gültige Uhrzeit ein";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Rücktaste";
    }
    get keyboardKeyCapsLock() {
      return "Feststelltaste";
    }
    get keyboardKeyChannelDown() {
      return "Vorheriger Kanal";
    }
    get keyboardKeyChannelUp() {
      return "Nächster Kanal";
    }
    get keyboardKeyControl() {
      return "Strg";
    }
    get keyboardKeyDelete() {
      return "Entf";
    }
    get keyboardKeyEject() {
      return "Auswerfen";
    }
    get keyboardKeyEnd() {
      return "Ende";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Pos1";
    }
    get keyboardKeyInsert() {
      return "Einfg";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Befehl";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Eingabetaste";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "Bild ab";
    }
    get keyboardKeyPageUp() {
      return "Bild auf";
    }
    get keyboardKeyPower() {
      return "Ein/Aus";
    }
    get keyboardKeyPowerOff() {
      return "Aus";
    }
    get keyboardKeyPrintScreen() {
      return "Druck";
    }
    get keyboardKeyScrollLock() {
      return "Rollen";
    }
    get keyboardKeySelect() {
      return "Auswählen";
    }
    get keyboardKeySpace() {
      return "Leertaste";
    }
    get lastPageTooltip() {
      return "Letzte Seite";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 Lizenz";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount Lizenzen";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Lizenzen";
    }
    get menuBarMenuLabel() {
      return "Menü in der Menüleiste";
    }
    get modalBarrierDismissLabel() {
      return "Schließen";
    }
    get moreButtonTooltip() {
      return "Mehr";
    }
    get nextMonthTooltip() {
      return "Nächster Monat";
    }
    get nextPageTooltip() {
      return "Nächste Seite";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Navigationsmenü öffnen";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow von $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow von etwa $rowCount";
    }
    get pasteButtonLabel() {
      return "Einsetzen";
    }
    get popupMenuLabel() {
      return "Pop-up-Menü";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "Vorheriger Monat";
    }
    get previousPageTooltip() {
      return "Vorherige Seite";
    }
    get refreshIndicatorSemanticLabel() {
      return "Aktualisieren";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "Noch 1 Zeichen";
    }
    get remainingTextFieldCharacterCountOther() {
      return "Noch $remainingCount Zeichen";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Nach unten verschieben";
    }
    get reorderItemLeft() {
      return "Nach links verschieben";
    }
    get reorderItemRight() {
      return "Nach rechts verschieben";
    }
    get reorderItemToEnd() {
      return "An das Ende verschieben";
    }
    get reorderItemToStart() {
      return "An den Anfang verschieben";
    }
    get reorderItemUp() {
      return "Nach oben verschieben";
    }
    get rowsPerPageTitle() {
      return "Zeilen pro Seite:";
    }
    get saveButtonLabel() {
      return "SPEICHERN";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Suchen";
    }
    get selectAllButtonLabel() {
      return "Alle auswählen";
    }
    get selectYearSemanticsLabel() {
      return "Jahr auswählen";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 Element ausgewählt";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount Elemente ausgewählt";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return "Keine Objekte ausgewählt";
    }
    get showAccountsLabel() {
      return "Konten anzeigen";
    }
    get showMenuTooltip() {
      return "Menü anzeigen";
    }
    get signedInLabel() {
      return "Angemeldet";
    }
    get tabLabelRaw() {
      return "Tab $tabIndex von $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "UHRZEIT AUSWÄHLEN";
    }
    get timePickerHourLabel() {
      return "Stunde";
    }
    get timePickerHourModeAnnouncement() {
      return "Stunden auswählen";
    }
    get timePickerInputHelpText() {
      return "ZEIT EINGEBEN";
    }
    get timePickerMinuteLabel() {
      return "Minute";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Minuten auswählen";
    }
    get unspecifiedDate() {
      return "Datum";
    }
    get unspecifiedDateRange() {
      return "Zeitraum";
    }
    get viewLicensesButtonLabel() {
      return "LIZENZEN ANZEIGEN";
    }
  };
  (generated_material_localizations.MaterialLocalizationDe.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "de";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationDe.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationDe.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationDe);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationDe);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationDe, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationDe.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationDe, I[2]);
  generated_material_localizations.MaterialLocalizationDeCh = class MaterialLocalizationDeCh extends generated_material_localizations.MaterialLocalizationDe {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationDeCh.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get invalidTimeLabel() {
      return "Gib eine gültige Uhrzeit ein";
    }
    get dateOutOfRangeLabel() {
      return "Ausserhalb des Zeitraums.";
    }
    get closeButtonTooltip() {
      return "Schliessen";
    }
    get firstPageTooltip() {
      return "First page";
    }
    get lastPageTooltip() {
      return "Last page";
    }
    get modalBarrierDismissLabel() {
      return "Schliessen";
    }
  };
  (generated_material_localizations.MaterialLocalizationDeCh.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "de_CH";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationDeCh.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationDeCh.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationDeCh);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationDeCh);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationDeCh, I[2]);
  generated_material_localizations.MaterialLocalizationEl = class MaterialLocalizationEl extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEl.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Σχετικά με την εφαρμογή $applicationName";
    }
    get alertDialogLabel() {
      return "Ειδοποίηση";
    }
    get anteMeridiemAbbreviation() {
      return "π.μ.";
    }
    get backButtonTooltip() {
      return "Πίσω";
    }
    get calendarModeButtonLabel() {
      return "Εναλλαγή σε ημερολόγιο";
    }
    get cancelButtonLabel() {
      return "ΑΚΥΡΩΣΗ";
    }
    get closeButtonLabel() {
      return "ΚΛΕΙΣΙΜΟ";
    }
    get closeButtonTooltip() {
      return "Κλείσιμο";
    }
    get collapsedIconTapHint() {
      return "Ανάπτυξη";
    }
    get continueButtonLabel() {
      return "ΣΥΝΕΧΕΙΑ";
    }
    get copyButtonLabel() {
      return "Αντιγραφή";
    }
    get cutButtonLabel() {
      return "Αποκοπή";
    }
    get dateHelpText() {
      return "μμ/ηη/εεεε";
    }
    get dateInputLabel() {
      return "Εισαγωγή ημερομηνίας";
    }
    get dateOutOfRangeLabel() {
      return "Εκτός εύρους τιμών.";
    }
    get datePickerHelpText() {
      return "ΕΠΙΛΟΓΗ ΗΜΕΡΟΜΗΝΙΑΣ";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Ημερομηνία λήξης $fullDate";
    }
    get dateRangeEndLabel() {
      return "Ημερομηνία λήξης";
    }
    get dateRangePickerHelpText() {
      return "ΕΠΙΛΟΓΗ ΕΥΡΟΥΣ";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Ημερομηνία έναρξης $fullDate";
    }
    get dateRangeStartLabel() {
      return "Ημερομηνία έναρξης";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "Διαγραφή";
    }
    get dialModeButtonLabel() {
      return "Εναλλαγή στη λειτουργία επιλογέα κλήσης";
    }
    get dialogLabel() {
      return "Παράθυρο διαλόγου";
    }
    get drawerLabel() {
      return "Μενού πλοήγησης";
    }
    get expandedIconTapHint() {
      return "Σύμπτυξη";
    }
    get firstPageTooltip() {
      return "Πρώτη σελίδα";
    }
    get hideAccountsLabel() {
      return "Απόκρυψη λογαριασμών";
    }
    get inputDateModeButtonLabel() {
      return "Εναλλαγή σε καταχώριση";
    }
    get inputTimeModeButtonLabel() {
      return "Εναλλαγή στη λειτουργία εισαγωγής κειμένου";
    }
    get invalidDateFormatLabel() {
      return "Μη έγκυρη μορφή.";
    }
    get invalidDateRangeLabel() {
      return "Μη έγκυρο εύρος.";
    }
    get invalidTimeLabel() {
      return "Εισαγάγετε μια έγκυρη ώρα";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Επόμενο κανάλι";
    }
    get keyboardKeyChannelUp() {
      return "Προηγούμενο κανάλι";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Εξαγωγή";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Ενεργοποίηση";
    }
    get keyboardKeyPowerOff() {
      return "Απενεργοποίηση";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Επιλογή";
    }
    get keyboardKeySpace() {
      return "Διάστημα";
    }
    get lastPageTooltip() {
      return "Τελευταία σελίδα";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 άδεια";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount άδειες";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Άδειες";
    }
    get menuBarMenuLabel() {
      return "Μενού γραμμής μενού";
    }
    get modalBarrierDismissLabel() {
      return "Παράβλεψη";
    }
    get moreButtonTooltip() {
      return "Περισσότερα";
    }
    get nextMonthTooltip() {
      return "Επόμενος μήνας";
    }
    get nextPageTooltip() {
      return "Επόμενη σελίδα";
    }
    get okButtonLabel() {
      return "ΟΚ";
    }
    get openAppDrawerTooltip() {
      return "Άνοιγμα μενού πλοήγησης";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow-$lastRow από $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow-$lastRow από περίπου $rowCount";
    }
    get pasteButtonLabel() {
      return "Επικόλληση";
    }
    get popupMenuLabel() {
      return "Αναδυόμενο μενού";
    }
    get postMeridiemAbbreviation() {
      return "μ.μ.";
    }
    get previousMonthTooltip() {
      return "Προηγούμενος μήνας";
    }
    get previousPageTooltip() {
      return "Προηγούμενη σελίδα";
    }
    get refreshIndicatorSemanticLabel() {
      return "Ανανέωση";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "απομένει 1 χαρακτήρας";
    }
    get remainingTextFieldCharacterCountOther() {
      return "απομένουν $remainingCount χαρακτήρες";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Μετακίνηση προς τα κάτω";
    }
    get reorderItemLeft() {
      return "Μετακίνηση αριστερά";
    }
    get reorderItemRight() {
      return "Μετακίνηση δεξιά";
    }
    get reorderItemToEnd() {
      return "Μετακίνηση στο τέλος";
    }
    get reorderItemToStart() {
      return "Μετακίνηση στην αρχή";
    }
    get reorderItemUp() {
      return "Μετακίνηση προς τα πάνω";
    }
    get rowsPerPageTitle() {
      return "Σειρές ανά σελίδα:";
    }
    get saveButtonLabel() {
      return "ΑΠΟΘΗΚΕΥΣΗ";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Αναζήτηση";
    }
    get selectAllButtonLabel() {
      return "Επιλογή όλων";
    }
    get selectYearSemanticsLabel() {
      return "Επιλογή έτους";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "Επιλέχθηκε 1 στοιχείο";
    }
    get selectedRowCountTitleOther() {
      return "Επιλέχθηκαν $selectedRowCount στοιχεία";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Εμφάνιση λογαριασμών";
    }
    get showMenuTooltip() {
      return "Εμφάνιση μενού";
    }
    get signedInLabel() {
      return "Σε σύνδεση";
    }
    get tabLabelRaw() {
      return "Καρτέλα $tabIndex από $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "ΕΠΙΛΟΓΗ ΩΡΑΣ";
    }
    get timePickerHourLabel() {
      return "Ώρα";
    }
    get timePickerHourModeAnnouncement() {
      return "Επιλογή ωρών";
    }
    get timePickerInputHelpText() {
      return "ΕΙΣΑΓΩΓΗ ΩΡΑΣ";
    }
    get timePickerMinuteLabel() {
      return "Λεπτό";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Επιλογή λεπτών";
    }
    get unspecifiedDate() {
      return "Ημερομηνία";
    }
    get unspecifiedDateRange() {
      return "Εύρος ημερομηνιών";
    }
    get viewLicensesButtonLabel() {
      return "ΠΡΟΒΟΛΗ ΑΔΕΙΩΝ";
    }
  };
  (generated_material_localizations.MaterialLocalizationEl.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "el";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEl.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEl.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEl);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEl);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationEl, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationEl.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEl, I[2]);
  generated_material_localizations.MaterialLocalizationEn = class MaterialLocalizationEn extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEn.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "About $applicationName";
    }
    get alertDialogLabel() {
      return "Alert";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "Back";
    }
    get calendarModeButtonLabel() {
      return "Switch to calendar";
    }
    get cancelButtonLabel() {
      return "CANCEL";
    }
    get closeButtonLabel() {
      return "CLOSE";
    }
    get closeButtonTooltip() {
      return "Close";
    }
    get collapsedIconTapHint() {
      return "Expand";
    }
    get continueButtonLabel() {
      return "CONTINUE";
    }
    get copyButtonLabel() {
      return "Copy";
    }
    get cutButtonLabel() {
      return "Cut";
    }
    get dateHelpText() {
      return "mm/dd/yyyy";
    }
    get dateInputLabel() {
      return "Enter Date";
    }
    get dateOutOfRangeLabel() {
      return "Out of range.";
    }
    get datePickerHelpText() {
      return "SELECT DATE";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "End date $fullDate";
    }
    get dateRangeEndLabel() {
      return "End Date";
    }
    get dateRangePickerHelpText() {
      return "SELECT RANGE";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Start date $fullDate";
    }
    get dateRangeStartLabel() {
      return "Start Date";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "Delete";
    }
    get dialModeButtonLabel() {
      return "Switch to dial picker mode";
    }
    get dialogLabel() {
      return "Dialog";
    }
    get drawerLabel() {
      return "Navigation menu";
    }
    get expandedIconTapHint() {
      return "Collapse";
    }
    get firstPageTooltip() {
      return "First page";
    }
    get hideAccountsLabel() {
      return "Hide accounts";
    }
    get inputDateModeButtonLabel() {
      return "Switch to input";
    }
    get inputTimeModeButtonLabel() {
      return "Switch to text input mode";
    }
    get invalidDateFormatLabel() {
      return "Invalid format.";
    }
    get invalidDateRangeLabel() {
      return "Invalid range.";
    }
    get invalidTimeLabel() {
      return "Enter a valid time";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "Power Off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "Last page";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 license";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licenses";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Licenses";
    }
    get menuBarMenuLabel() {
      return "Menu bar menu";
    }
    get modalBarrierDismissLabel() {
      return "Dismiss";
    }
    get moreButtonTooltip() {
      return "More";
    }
    get nextMonthTooltip() {
      return "Next month";
    }
    get nextPageTooltip() {
      return "Next page";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Open navigation menu";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow of $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow of about $rowCount";
    }
    get pasteButtonLabel() {
      return "Paste";
    }
    get popupMenuLabel() {
      return "Popup menu";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "Previous month";
    }
    get previousPageTooltip() {
      return "Previous page";
    }
    get refreshIndicatorSemanticLabel() {
      return "Refresh";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 character remaining";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount characters remaining";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "No characters remaining";
    }
    get reorderItemDown() {
      return "Move down";
    }
    get reorderItemLeft() {
      return "Move left";
    }
    get reorderItemRight() {
      return "Move right";
    }
    get reorderItemToEnd() {
      return "Move to the end";
    }
    get reorderItemToStart() {
      return "Move to the start";
    }
    get reorderItemUp() {
      return "Move up";
    }
    get rowsPerPageTitle() {
      return "Rows per page:";
    }
    get saveButtonLabel() {
      return "SAVE";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Search";
    }
    get selectAllButtonLabel() {
      return "Select all";
    }
    get selectYearSemanticsLabel() {
      return "Select year";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 item selected";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount items selected";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return "No items selected";
    }
    get showAccountsLabel() {
      return "Show accounts";
    }
    get showMenuTooltip() {
      return "Show menu";
    }
    get signedInLabel() {
      return "Signed in";
    }
    get tabLabelRaw() {
      return "Tab $tabIndex of $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.h_colon_mm_space_a;
    }
    get timePickerDialHelpText() {
      return "SELECT TIME";
    }
    get timePickerHourLabel() {
      return "Hour";
    }
    get timePickerHourModeAnnouncement() {
      return "Select hours";
    }
    get timePickerInputHelpText() {
      return "ENTER TIME";
    }
    get timePickerMinuteLabel() {
      return "Minute";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Select minutes";
    }
    get unspecifiedDate() {
      return "Date";
    }
    get unspecifiedDateRange() {
      return "Date Range";
    }
    get viewLicensesButtonLabel() {
      return "VIEW LICENSES";
    }
  };
  (generated_material_localizations.MaterialLocalizationEn.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "en";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEn.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEn.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEn);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEn);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationEn, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationEn.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEn, I[2]);
  generated_material_localizations.MaterialLocalizationEnAu = class MaterialLocalizationEnAu extends generated_material_localizations.MaterialLocalizationEn {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEnAu.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyCapsLock() {
      return "Caps lock";
    }
    get keyboardKeyChannelUp() {
      return "Channel up";
    }
    get keyboardKeyChannelDown() {
      return "Channel down";
    }
    get keyboardKeyNumLock() {
      return "Num lock";
    }
    get keyboardKeyScrollLock() {
      return "Scroll lock";
    }
    get keyboardKeyPrintScreen() {
      return "Print screen";
    }
    get keyboardKeyPowerOff() {
      return "Power off";
    }
    get keyboardKeyNumpadEnter() {
      return "Num enter";
    }
    get dateInputLabel() {
      return "Enter date";
    }
    get dateRangeEndLabel() {
      return "End date";
    }
    get dateRangeStartLabel() {
      return "Start date";
    }
    get unspecifiedDateRange() {
      return "Date range";
    }
    get licensesPageTitle() {
      return "Licences";
    }
    get licensesPackageDetailTextZero() {
      return "No licences";
    }
    get licensesPackageDetailTextOne() {
      return "1 licence";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licences";
    }
    get viewLicensesButtonLabel() {
      return "VIEW LICENCES";
    }
    get popupMenuLabel() {
      return "Pop-up menu";
    }
    get dialogLabel() {
      return "Dialogue";
    }
    get reorderItemLeft() {
      return "Move to the left";
    }
    get reorderItemRight() {
      return "Move to the right";
    }
  };
  (generated_material_localizations.MaterialLocalizationEnAu.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "en_AU";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEnAu.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEnAu.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEnAu);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEnAu);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEnAu, I[2]);
  generated_material_localizations.MaterialLocalizationEnCa = class MaterialLocalizationEnCa extends generated_material_localizations.MaterialLocalizationEn {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEnCa.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyCapsLock() {
      return "Caps lock";
    }
    get keyboardKeyChannelUp() {
      return "Channel up";
    }
    get keyboardKeyChannelDown() {
      return "Channel down";
    }
    get keyboardKeyNumLock() {
      return "Num lock";
    }
    get keyboardKeyScrollLock() {
      return "Scroll lock";
    }
    get keyboardKeyPrintScreen() {
      return "Print screen";
    }
    get keyboardKeyPowerOff() {
      return "Power off";
    }
    get keyboardKeyNumpadEnter() {
      return "Num enter";
    }
    get dateInputLabel() {
      return "Enter date";
    }
    get dateRangeEndLabel() {
      return "End date";
    }
    get dateRangeStartLabel() {
      return "Start date";
    }
    get unspecifiedDateRange() {
      return "Date range";
    }
    get licensesPageTitle() {
      return "Licences";
    }
    get licensesPackageDetailTextZero() {
      return "No licences";
    }
    get licensesPackageDetailTextOne() {
      return "1 licence";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licences";
    }
    get viewLicensesButtonLabel() {
      return "VIEW LICENCES";
    }
    get popupMenuLabel() {
      return "Pop-up menu";
    }
    get dialogLabel() {
      return "Dialogue";
    }
    get reorderItemLeft() {
      return "Move to the left";
    }
    get reorderItemRight() {
      return "Move to the right";
    }
  };
  (generated_material_localizations.MaterialLocalizationEnCa.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "en_CA";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEnCa.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEnCa.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEnCa);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEnCa);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEnCa, I[2]);
  generated_material_localizations.MaterialLocalizationEnGb = class MaterialLocalizationEnGb extends generated_material_localizations.MaterialLocalizationEn {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEnGb.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyCapsLock() {
      return "Caps lock";
    }
    get keyboardKeyChannelUp() {
      return "Channel up";
    }
    get keyboardKeyChannelDown() {
      return "Channel down";
    }
    get keyboardKeyNumLock() {
      return "Num lock";
    }
    get keyboardKeyScrollLock() {
      return "Scroll lock";
    }
    get keyboardKeyPrintScreen() {
      return "Print screen";
    }
    get keyboardKeyPowerOff() {
      return "Power off";
    }
    get keyboardKeyNumpadEnter() {
      return "Num enter";
    }
    get dateInputLabel() {
      return "Enter date";
    }
    get dateRangeEndLabel() {
      return "End date";
    }
    get dateRangeStartLabel() {
      return "Start date";
    }
    get unspecifiedDateRange() {
      return "Date range";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get viewLicensesButtonLabel() {
      return "VIEW LICENCES";
    }
    get licensesPageTitle() {
      return "Licences";
    }
    get licensesPackageDetailTextZero() {
      return "No licences";
    }
    get licensesPackageDetailTextOne() {
      return "1 licence";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licences";
    }
    get popupMenuLabel() {
      return "Pop-up menu";
    }
    get dialogLabel() {
      return "Dialogue";
    }
    get reorderItemLeft() {
      return "Move to the left";
    }
    get reorderItemRight() {
      return "Move to the right";
    }
  };
  (generated_material_localizations.MaterialLocalizationEnGb.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "en_GB";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEnGb.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEnGb.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEnGb);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEnGb);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEnGb, I[2]);
  generated_material_localizations.MaterialLocalizationEnIe = class MaterialLocalizationEnIe extends generated_material_localizations.MaterialLocalizationEn {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEnIe.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyCapsLock() {
      return "Caps lock";
    }
    get keyboardKeyChannelUp() {
      return "Channel up";
    }
    get keyboardKeyChannelDown() {
      return "Channel down";
    }
    get keyboardKeyNumLock() {
      return "Num lock";
    }
    get keyboardKeyScrollLock() {
      return "Scroll lock";
    }
    get keyboardKeyPrintScreen() {
      return "Print screen";
    }
    get keyboardKeyPowerOff() {
      return "Power off";
    }
    get keyboardKeyNumpadEnter() {
      return "Num enter";
    }
    get dateInputLabel() {
      return "Enter date";
    }
    get dateRangeEndLabel() {
      return "End date";
    }
    get dateRangeStartLabel() {
      return "Start date";
    }
    get unspecifiedDateRange() {
      return "Date range";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get viewLicensesButtonLabel() {
      return "VIEW LICENCES";
    }
    get licensesPageTitle() {
      return "Licences";
    }
    get licensesPackageDetailTextZero() {
      return "No licences";
    }
    get licensesPackageDetailTextOne() {
      return "1 licence";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licences";
    }
    get popupMenuLabel() {
      return "Pop-up menu";
    }
    get dialogLabel() {
      return "Dialogue";
    }
    get reorderItemLeft() {
      return "Move to the left";
    }
    get reorderItemRight() {
      return "Move to the right";
    }
  };
  (generated_material_localizations.MaterialLocalizationEnIe.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "en_IE";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEnIe.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEnIe.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEnIe);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEnIe);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEnIe, I[2]);
  generated_material_localizations.MaterialLocalizationEnIn = class MaterialLocalizationEnIn extends generated_material_localizations.MaterialLocalizationEn {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEnIn.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyCapsLock() {
      return "Caps lock";
    }
    get keyboardKeyChannelUp() {
      return "Channel up";
    }
    get keyboardKeyChannelDown() {
      return "Channel down";
    }
    get keyboardKeyNumLock() {
      return "Num lock";
    }
    get keyboardKeyScrollLock() {
      return "Scroll lock";
    }
    get keyboardKeyPrintScreen() {
      return "Print screen";
    }
    get keyboardKeyPowerOff() {
      return "Power off";
    }
    get keyboardKeyNumpadEnter() {
      return "Num enter";
    }
    get dateInputLabel() {
      return "Enter date";
    }
    get dateRangeEndLabel() {
      return "End date";
    }
    get dateRangeStartLabel() {
      return "Start date";
    }
    get unspecifiedDateRange() {
      return "Date range";
    }
    get licensesPageTitle() {
      return "Licences";
    }
    get licensesPackageDetailTextZero() {
      return "No licences";
    }
    get licensesPackageDetailTextOne() {
      return "1 licence";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licences";
    }
    get viewLicensesButtonLabel() {
      return "VIEW LICENCES";
    }
    get popupMenuLabel() {
      return "Pop-up menu";
    }
    get dialogLabel() {
      return "Dialogue";
    }
    get reorderItemLeft() {
      return "Move to the left";
    }
    get reorderItemRight() {
      return "Move to the right";
    }
  };
  (generated_material_localizations.MaterialLocalizationEnIn.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "en_IN";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEnIn.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEnIn.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEnIn);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEnIn);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEnIn, I[2]);
  generated_material_localizations.MaterialLocalizationEnNz = class MaterialLocalizationEnNz extends generated_material_localizations.MaterialLocalizationEn {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEnNz.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyChannelDown() {
      return "Channel down";
    }
    get keyboardKeyChannelUp() {
      return "Channel up";
    }
    get keyboardKeyCapsLock() {
      return "Caps lock";
    }
    get keyboardKeyNumLock() {
      return "Num lock";
    }
    get keyboardKeyScrollLock() {
      return "Scroll lock";
    }
    get keyboardKeyPrintScreen() {
      return "Print screen";
    }
    get keyboardKeyPowerOff() {
      return "Power off";
    }
    get keyboardKeyNumpadEnter() {
      return "Num enter";
    }
    get dateInputLabel() {
      return "Enter date";
    }
    get dateRangeEndLabel() {
      return "End date";
    }
    get dateRangeStartLabel() {
      return "Start date";
    }
    get unspecifiedDateRange() {
      return "Date range";
    }
    get licensesPageTitle() {
      return "Licences";
    }
    get licensesPackageDetailTextZero() {
      return "No licences";
    }
    get licensesPackageDetailTextOne() {
      return "1 licence";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licences";
    }
    get viewLicensesButtonLabel() {
      return "VIEW LICENCES";
    }
    get popupMenuLabel() {
      return "Pop-up menu";
    }
    get dialogLabel() {
      return "Dialogue";
    }
    get reorderItemLeft() {
      return "Move to the left";
    }
    get reorderItemRight() {
      return "Move to the right";
    }
  };
  (generated_material_localizations.MaterialLocalizationEnNz.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "en_NZ";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEnNz.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEnNz.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEnNz);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEnNz);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEnNz, I[2]);
  generated_material_localizations.MaterialLocalizationEnSg = class MaterialLocalizationEnSg extends generated_material_localizations.MaterialLocalizationEn {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEnSg.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyCapsLock() {
      return "Caps lock";
    }
    get keyboardKeyChannelUp() {
      return "Channel up";
    }
    get keyboardKeyChannelDown() {
      return "Channel down";
    }
    get keyboardKeyNumLock() {
      return "Num lock";
    }
    get keyboardKeyScrollLock() {
      return "Scroll lock";
    }
    get keyboardKeyPrintScreen() {
      return "Print screen";
    }
    get keyboardKeyPowerOff() {
      return "Power off";
    }
    get keyboardKeyNumpadEnter() {
      return "Num enter";
    }
    get dateInputLabel() {
      return "Enter date";
    }
    get dateRangeEndLabel() {
      return "End date";
    }
    get dateRangeStartLabel() {
      return "Start date";
    }
    get unspecifiedDateRange() {
      return "Date range";
    }
    get licensesPageTitle() {
      return "Licences";
    }
    get licensesPackageDetailTextZero() {
      return "No licences";
    }
    get licensesPackageDetailTextOne() {
      return "1 licence";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licences";
    }
    get viewLicensesButtonLabel() {
      return "VIEW LICENCES";
    }
    get popupMenuLabel() {
      return "Pop-up menu";
    }
    get dialogLabel() {
      return "Dialogue";
    }
    get reorderItemLeft() {
      return "Move to the left";
    }
    get reorderItemRight() {
      return "Move to the right";
    }
  };
  (generated_material_localizations.MaterialLocalizationEnSg.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "en_SG";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEnSg.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEnSg.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEnSg);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEnSg);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEnSg, I[2]);
  generated_material_localizations.MaterialLocalizationEnZa = class MaterialLocalizationEnZa extends generated_material_localizations.MaterialLocalizationEn {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEnZa.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyCapsLock() {
      return "Caps lock";
    }
    get keyboardKeyChannelUp() {
      return "Channel up";
    }
    get keyboardKeyChannelDown() {
      return "Channel down";
    }
    get keyboardKeyNumLock() {
      return "Num lock";
    }
    get keyboardKeyScrollLock() {
      return "Scroll lock";
    }
    get keyboardKeyPrintScreen() {
      return "Print screen";
    }
    get keyboardKeyPowerOff() {
      return "Power off";
    }
    get keyboardKeyNumpadEnter() {
      return "Num enter";
    }
    get dateInputLabel() {
      return "Enter date";
    }
    get dateRangeEndLabel() {
      return "End date";
    }
    get dateRangeStartLabel() {
      return "Start date";
    }
    get unspecifiedDateRange() {
      return "Date range";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get viewLicensesButtonLabel() {
      return "VIEW LICENCES";
    }
    get licensesPageTitle() {
      return "Licences";
    }
    get licensesPackageDetailTextZero() {
      return "No licences";
    }
    get licensesPackageDetailTextOne() {
      return "1 licence";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licences";
    }
    get popupMenuLabel() {
      return "Pop-up menu";
    }
    get dialogLabel() {
      return "Dialogue";
    }
    get reorderItemLeft() {
      return "Move to the left";
    }
    get reorderItemRight() {
      return "Move to the right";
    }
  };
  (generated_material_localizations.MaterialLocalizationEnZa.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "en_ZA";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEnZa.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEnZa.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEnZa);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEnZa);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEnZa, I[2]);
  generated_material_localizations.MaterialLocalizationEs = class MaterialLocalizationEs extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEs.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Sobre $applicationName";
    }
    get alertDialogLabel() {
      return "Alerta";
    }
    get anteMeridiemAbbreviation() {
      return "a. m.";
    }
    get backButtonTooltip() {
      return "Atrás";
    }
    get calendarModeButtonLabel() {
      return "Cambiar a calendario";
    }
    get cancelButtonLabel() {
      return "CANCELAR";
    }
    get closeButtonLabel() {
      return "CERRAR";
    }
    get closeButtonTooltip() {
      return "Cerrar";
    }
    get collapsedIconTapHint() {
      return "Mostrar";
    }
    get continueButtonLabel() {
      return "CONTINUAR";
    }
    get copyButtonLabel() {
      return "Copiar";
    }
    get cutButtonLabel() {
      return "Cortar";
    }
    get dateHelpText() {
      return "mm/dd/aaaa";
    }
    get dateInputLabel() {
      return "Introduce una fecha";
    }
    get dateOutOfRangeLabel() {
      return "Fuera del periodo válido.";
    }
    get datePickerHelpText() {
      return "SELECCIONAR FECHA";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Fecha de finalización $fullDate";
    }
    get dateRangeEndLabel() {
      return "Fecha de finalización";
    }
    get dateRangePickerHelpText() {
      return "SELECCIONAR PERIODO";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Fecha de inicio $fullDate";
    }
    get dateRangeStartLabel() {
      return "Fecha de inicio";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "Eliminar";
    }
    get dialModeButtonLabel() {
      return "Cambiar al modo de selección de hora";
    }
    get dialogLabel() {
      return "Cuadro de diálogo";
    }
    get drawerLabel() {
      return "Menú de navegación";
    }
    get expandedIconTapHint() {
      return "Ocultar";
    }
    get firstPageTooltip() {
      return "Primera página";
    }
    get hideAccountsLabel() {
      return "Ocultar cuentas";
    }
    get inputDateModeButtonLabel() {
      return "Cambiar a cuadro de texto";
    }
    get inputTimeModeButtonLabel() {
      return "Cambiar al modo de introducción de texto";
    }
    get invalidDateFormatLabel() {
      return "Formato no válido.";
    }
    get invalidDateRangeLabel() {
      return "Periodo no válido.";
    }
    get invalidTimeLabel() {
      return "Indica una hora válida";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "Alt Gr";
    }
    get keyboardKeyBackspace() {
      return "Retroceso";
    }
    get keyboardKeyCapsLock() {
      return "Bloq Mayús";
    }
    get keyboardKeyChannelDown() {
      return "Canal siguiente";
    }
    get keyboardKeyChannelUp() {
      return "Canal anterior";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Supr";
    }
    get keyboardKeyEject() {
      return "Expulsar";
    }
    get keyboardKeyEnd() {
      return "Fin";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Inicio";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Comando";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Bloq Num";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Intro";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "Av Pág";
    }
    get keyboardKeyPageUp() {
      return "Re Pág";
    }
    get keyboardKeyPower() {
      return "Encendido";
    }
    get keyboardKeyPowerOff() {
      return "Apagado";
    }
    get keyboardKeyPrintScreen() {
      return "Impr Pant";
    }
    get keyboardKeyScrollLock() {
      return "Bloq Despl";
    }
    get keyboardKeySelect() {
      return "Selección";
    }
    get keyboardKeySpace() {
      return "Espacio";
    }
    get lastPageTooltip() {
      return "Última página";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 licencia";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licencias";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Licencias";
    }
    get menuBarMenuLabel() {
      return "Menú de la barra de menú";
    }
    get modalBarrierDismissLabel() {
      return "Cerrar";
    }
    get moreButtonTooltip() {
      return "Más";
    }
    get nextMonthTooltip() {
      return "Mes siguiente";
    }
    get nextPageTooltip() {
      return "Página siguiente";
    }
    get okButtonLabel() {
      return "ACEPTAR";
    }
    get openAppDrawerTooltip() {
      return "Abrir el menú de navegación";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow‑$lastRow de $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow‑$lastRow de aproximadamente $rowCount";
    }
    get pasteButtonLabel() {
      return "Pegar";
    }
    get popupMenuLabel() {
      return "Menú emergente";
    }
    get postMeridiemAbbreviation() {
      return "p. m.";
    }
    get previousMonthTooltip() {
      return "Mes anterior";
    }
    get previousPageTooltip() {
      return "Página anterior";
    }
    get refreshIndicatorSemanticLabel() {
      return "Actualizar";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "Queda 1 carácter.";
    }
    get remainingTextFieldCharacterCountOther() {
      return "Quedan $remainingCount caracteres";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Mover hacia abajo";
    }
    get reorderItemLeft() {
      return "Mover hacia la izquierda";
    }
    get reorderItemRight() {
      return "Mover hacia la derecha";
    }
    get reorderItemToEnd() {
      return "Mover al final";
    }
    get reorderItemToStart() {
      return "Mover al principio";
    }
    get reorderItemUp() {
      return "Mover hacia arriba";
    }
    get rowsPerPageTitle() {
      return "Filas por página:";
    }
    get saveButtonLabel() {
      return "GUARDAR";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Buscar";
    }
    get selectAllButtonLabel() {
      return "Seleccionar todo";
    }
    get selectYearSemanticsLabel() {
      return "Seleccionar año";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 elemento seleccionado";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount elementos seleccionados";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return "No se han seleccionado elementos";
    }
    get showAccountsLabel() {
      return "Mostrar cuentas";
    }
    get showMenuTooltip() {
      return "Mostrar menú";
    }
    get signedInLabel() {
      return "Sesión iniciada";
    }
    get tabLabelRaw() {
      return "Pestaña $tabIndex de $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "SELECCIONAR HORA";
    }
    get timePickerHourLabel() {
      return "Hora";
    }
    get timePickerHourModeAnnouncement() {
      return "Seleccionar horas";
    }
    get timePickerInputHelpText() {
      return "INTRODUCIR HORA";
    }
    get timePickerMinuteLabel() {
      return "Minuto";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Seleccionar minutos";
    }
    get unspecifiedDate() {
      return "Fecha";
    }
    get unspecifiedDateRange() {
      return "Periodo";
    }
    get viewLicensesButtonLabel() {
      return "VER LICENCIAS";
    }
  };
  (generated_material_localizations.MaterialLocalizationEs.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "es";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEs.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEs.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEs);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEs);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationEs, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationEs.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEs, I[2]);
  generated_material_localizations.MaterialLocalizationEs419 = class MaterialLocalizationEs419 extends generated_material_localizations.MaterialLocalizationEs {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEs419.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyChannelDown() {
      return "Canal anterior";
    }
    get keyboardKeyChannelUp() {
      return "Canal siguiente";
    }
    get keyboardKeyCapsLock() {
      return "Bloqueo de mayúscula";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyNumLock() {
      return "Bloqueo numérico";
    }
    get keyboardKeyPageDown() {
      return "AvPág";
    }
    get keyboardKeySpace() {
      return "Barra espaciadora";
    }
    get keyboardKeyScrollLock() {
      return "Bloqueo de desplazamiento";
    }
    get keyboardKeyPrintScreen() {
      return "Imprimir pantalla";
    }
    get keyboardKeyPowerOff() {
      return "Apagar";
    }
    get keyboardKeyPower() {
      return "Encender";
    }
    get keyboardKeyPageUp() {
      return "RePág";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get licensesPackageDetailTextOne() {
      return "1 licencia";
    }
    get timePickerInputHelpText() {
      return "INGRESAR HORA";
    }
    get invalidTimeLabel() {
      return "Ingresa una hora válida";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licencias";
    }
    get inputTimeModeButtonLabel() {
      return "Cambiar al modo de entrada de texto";
    }
    get dateInputLabel() {
      return "Ingresar fecha";
    }
    get calendarModeButtonLabel() {
      return "Cambiar al calendario";
    }
    get dateRangePickerHelpText() {
      return "SELECCIONAR PERÍODO";
    }
    get dateOutOfRangeLabel() {
      return "Fuera de rango";
    }
    get invalidDateRangeLabel() {
      return "El rango no es válido.";
    }
    get invalidDateFormatLabel() {
      return "El formato no es válido.";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Fecha de finalización: $fullDate";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Fecha de inicio: $fullDate";
    }
    get inputDateModeButtonLabel() {
      return "Cambiar a modo de entrada";
    }
    get unspecifiedDateRange() {
      return "Período";
    }
    get dateHelpText() {
      return "dd/mm/aaaa";
    }
    get modalBarrierDismissLabel() {
      return "Descartar";
    }
    get signedInLabel() {
      return "Cuenta con la que accediste";
    }
    get openAppDrawerTooltip() {
      return "Abrir menú de navegación";
    }
    get deleteButtonTooltip() {
      return "Borrar";
    }
    get nextMonthTooltip() {
      return "Próximo mes";
    }
    get nextPageTooltip() {
      return "Próxima página";
    }
    get aboutListTileTitleRaw() {
      return "Acerca de $applicationName";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow de $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow de aproximadamente $rowCount";
    }
    get selectedRowCountTitleOne() {
      return "Se seleccionó 1 elemento";
    }
    get selectedRowCountTitleOther() {
      return "Se seleccionaron $selectedRowCount elementos";
    }
    get anteMeridiemAbbreviation() {
      return "a.m.";
    }
    get postMeridiemAbbreviation() {
      return "p.m.";
    }
    get dialogLabel() {
      return "Diálogo";
    }
    get reorderItemToStart() {
      return "Mover al inicio";
    }
    get expandedIconTapHint() {
      return "Contraer";
    }
    get collapsedIconTapHint() {
      return "Expandir";
    }
  };
  (generated_material_localizations.MaterialLocalizationEs419.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "es_419";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEs419.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEs419.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEs419);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEs419);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEs419, I[2]);
  generated_material_localizations.MaterialLocalizationEsAr = class MaterialLocalizationEsAr extends generated_material_localizations.MaterialLocalizationEs {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEsAr.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyChannelDown() {
      return "Canal anterior";
    }
    get keyboardKeyChannelUp() {
      return "Canal siguiente";
    }
    get keyboardKeyCapsLock() {
      return "Bloqueo de mayúscula";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyNumLock() {
      return "Bloqueo numérico";
    }
    get keyboardKeyPageDown() {
      return "AvPág";
    }
    get keyboardKeySpace() {
      return "Barra espaciadora";
    }
    get keyboardKeyScrollLock() {
      return "Bloqueo de desplazamiento";
    }
    get keyboardKeyPrintScreen() {
      return "Imprimir pantalla";
    }
    get keyboardKeyPowerOff() {
      return "Apagar";
    }
    get keyboardKeyPower() {
      return "Encender";
    }
    get keyboardKeyPageUp() {
      return "RePág";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get licensesPackageDetailTextOne() {
      return "1 licencia";
    }
    get timePickerInputHelpText() {
      return "INGRESAR HORA";
    }
    get invalidTimeLabel() {
      return "Ingresa una hora válida";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licencias";
    }
    get inputTimeModeButtonLabel() {
      return "Cambiar al modo de entrada de texto";
    }
    get dateInputLabel() {
      return "Ingresar fecha";
    }
    get calendarModeButtonLabel() {
      return "Cambiar al calendario";
    }
    get dateRangePickerHelpText() {
      return "SELECCIONAR PERÍODO";
    }
    get dateOutOfRangeLabel() {
      return "Fuera de rango";
    }
    get invalidDateRangeLabel() {
      return "El rango no es válido.";
    }
    get invalidDateFormatLabel() {
      return "El formato no es válido.";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Fecha de finalización: $fullDate";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Fecha de inicio: $fullDate";
    }
    get inputDateModeButtonLabel() {
      return "Cambiar a modo de entrada";
    }
    get unspecifiedDateRange() {
      return "Período";
    }
    get dateHelpText() {
      return "dd/mm/aaaa";
    }
    get modalBarrierDismissLabel() {
      return "Descartar";
    }
    get signedInLabel() {
      return "Cuenta con la que accediste";
    }
    get openAppDrawerTooltip() {
      return "Abrir menú de navegación";
    }
    get deleteButtonTooltip() {
      return "Borrar";
    }
    get nextMonthTooltip() {
      return "Próximo mes";
    }
    get nextPageTooltip() {
      return "Próxima página";
    }
    get aboutListTileTitleRaw() {
      return "Acerca de $applicationName";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow de $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow de aproximadamente $rowCount";
    }
    get selectedRowCountTitleOne() {
      return "Se seleccionó 1 elemento";
    }
    get selectedRowCountTitleOther() {
      return "Se seleccionaron $selectedRowCount elementos";
    }
    get anteMeridiemAbbreviation() {
      return "a.m.";
    }
    get postMeridiemAbbreviation() {
      return "p.m.";
    }
    get dialogLabel() {
      return "Diálogo";
    }
    get reorderItemToStart() {
      return "Mover al inicio";
    }
    get expandedIconTapHint() {
      return "Contraer";
    }
    get collapsedIconTapHint() {
      return "Expandir";
    }
  };
  (generated_material_localizations.MaterialLocalizationEsAr.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "es_AR";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEsAr.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEsAr.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEsAr);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEsAr);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEsAr, I[2]);
  generated_material_localizations.MaterialLocalizationEsBo = class MaterialLocalizationEsBo extends generated_material_localizations.MaterialLocalizationEs {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEsBo.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyChannelDown() {
      return "Canal anterior";
    }
    get keyboardKeyChannelUp() {
      return "Canal siguiente";
    }
    get keyboardKeyCapsLock() {
      return "Bloqueo de mayúscula";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyNumLock() {
      return "Bloqueo numérico";
    }
    get keyboardKeyPageDown() {
      return "AvPág";
    }
    get keyboardKeySpace() {
      return "Barra espaciadora";
    }
    get keyboardKeyScrollLock() {
      return "Bloqueo de desplazamiento";
    }
    get keyboardKeyPrintScreen() {
      return "Imprimir pantalla";
    }
    get keyboardKeyPowerOff() {
      return "Apagar";
    }
    get keyboardKeyPower() {
      return "Encender";
    }
    get keyboardKeyPageUp() {
      return "RePág";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get licensesPackageDetailTextOne() {
      return "1 licencia";
    }
    get timePickerInputHelpText() {
      return "INGRESAR HORA";
    }
    get invalidTimeLabel() {
      return "Ingresa una hora válida";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licencias";
    }
    get inputTimeModeButtonLabel() {
      return "Cambiar al modo de entrada de texto";
    }
    get dateInputLabel() {
      return "Ingresar fecha";
    }
    get calendarModeButtonLabel() {
      return "Cambiar al calendario";
    }
    get dateRangePickerHelpText() {
      return "SELECCIONAR PERÍODO";
    }
    get dateOutOfRangeLabel() {
      return "Fuera de rango";
    }
    get invalidDateRangeLabel() {
      return "El rango no es válido.";
    }
    get invalidDateFormatLabel() {
      return "El formato no es válido.";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Fecha de finalización: $fullDate";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Fecha de inicio: $fullDate";
    }
    get inputDateModeButtonLabel() {
      return "Cambiar a modo de entrada";
    }
    get unspecifiedDateRange() {
      return "Período";
    }
    get dateHelpText() {
      return "dd/mm/aaaa";
    }
    get reorderItemToStart() {
      return "Mover al inicio";
    }
    get modalBarrierDismissLabel() {
      return "Descartar";
    }
    get signedInLabel() {
      return "Cuenta con la que accediste";
    }
    get openAppDrawerTooltip() {
      return "Abrir menú de navegación";
    }
    get deleteButtonTooltip() {
      return "Borrar";
    }
    get nextMonthTooltip() {
      return "Próximo mes";
    }
    get nextPageTooltip() {
      return "Próxima página";
    }
    get aboutListTileTitleRaw() {
      return "Acerca de $applicationName";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow de $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow de aproximadamente $rowCount";
    }
    get selectedRowCountTitleOne() {
      return "Se seleccionó 1 elemento";
    }
    get selectedRowCountTitleOther() {
      return "Se seleccionaron $selectedRowCount elementos";
    }
    get anteMeridiemAbbreviation() {
      return "a.m.";
    }
    get postMeridiemAbbreviation() {
      return "p.m.";
    }
    get dialogLabel() {
      return "Diálogo";
    }
    get expandedIconTapHint() {
      return "Contraer";
    }
    get collapsedIconTapHint() {
      return "Expandir";
    }
  };
  (generated_material_localizations.MaterialLocalizationEsBo.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "es_BO";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEsBo.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEsBo.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEsBo);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEsBo);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEsBo, I[2]);
  generated_material_localizations.MaterialLocalizationEsCl = class MaterialLocalizationEsCl extends generated_material_localizations.MaterialLocalizationEs {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEsCl.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyChannelDown() {
      return "Canal anterior";
    }
    get keyboardKeyChannelUp() {
      return "Canal siguiente";
    }
    get keyboardKeyCapsLock() {
      return "Bloqueo de mayúscula";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyNumLock() {
      return "Bloqueo numérico";
    }
    get keyboardKeyPageDown() {
      return "AvPág";
    }
    get keyboardKeySpace() {
      return "Barra espaciadora";
    }
    get keyboardKeyScrollLock() {
      return "Bloqueo de desplazamiento";
    }
    get keyboardKeyPrintScreen() {
      return "Imprimir pantalla";
    }
    get keyboardKeyPowerOff() {
      return "Apagar";
    }
    get keyboardKeyPower() {
      return "Encender";
    }
    get keyboardKeyPageUp() {
      return "RePág";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get licensesPackageDetailTextOne() {
      return "1 licencia";
    }
    get timePickerInputHelpText() {
      return "INGRESAR HORA";
    }
    get invalidTimeLabel() {
      return "Ingresa una hora válida";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licencias";
    }
    get inputTimeModeButtonLabel() {
      return "Cambiar al modo de entrada de texto";
    }
    get dateInputLabel() {
      return "Ingresar fecha";
    }
    get calendarModeButtonLabel() {
      return "Cambiar al calendario";
    }
    get dateRangePickerHelpText() {
      return "SELECCIONAR PERÍODO";
    }
    get dateOutOfRangeLabel() {
      return "Fuera de rango";
    }
    get invalidDateRangeLabel() {
      return "El rango no es válido.";
    }
    get invalidDateFormatLabel() {
      return "El formato no es válido.";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Fecha de finalización: $fullDate";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Fecha de inicio: $fullDate";
    }
    get inputDateModeButtonLabel() {
      return "Cambiar a modo de entrada";
    }
    get unspecifiedDateRange() {
      return "Período";
    }
    get dateHelpText() {
      return "dd/mm/aaaa";
    }
    get reorderItemToStart() {
      return "Mover al inicio";
    }
    get modalBarrierDismissLabel() {
      return "Descartar";
    }
    get signedInLabel() {
      return "Cuenta con la que accediste";
    }
    get openAppDrawerTooltip() {
      return "Abrir menú de navegación";
    }
    get deleteButtonTooltip() {
      return "Borrar";
    }
    get nextMonthTooltip() {
      return "Próximo mes";
    }
    get nextPageTooltip() {
      return "Próxima página";
    }
    get aboutListTileTitleRaw() {
      return "Acerca de $applicationName";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow de $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow de aproximadamente $rowCount";
    }
    get selectedRowCountTitleOne() {
      return "Se seleccionó 1 elemento";
    }
    get selectedRowCountTitleOther() {
      return "Se seleccionaron $selectedRowCount elementos";
    }
    get anteMeridiemAbbreviation() {
      return "a.m.";
    }
    get postMeridiemAbbreviation() {
      return "p.m.";
    }
    get dialogLabel() {
      return "Diálogo";
    }
    get expandedIconTapHint() {
      return "Contraer";
    }
    get collapsedIconTapHint() {
      return "Expandir";
    }
  };
  (generated_material_localizations.MaterialLocalizationEsCl.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "es_CL";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEsCl.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEsCl.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEsCl);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEsCl);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEsCl, I[2]);
  generated_material_localizations.MaterialLocalizationEsCo = class MaterialLocalizationEsCo extends generated_material_localizations.MaterialLocalizationEs {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEsCo.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyChannelDown() {
      return "Canal anterior";
    }
    get keyboardKeyChannelUp() {
      return "Canal siguiente";
    }
    get keyboardKeyCapsLock() {
      return "Bloqueo de mayúscula";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyNumLock() {
      return "Bloqueo numérico";
    }
    get keyboardKeyPageDown() {
      return "AvPág";
    }
    get keyboardKeySpace() {
      return "Barra espaciadora";
    }
    get keyboardKeyScrollLock() {
      return "Bloqueo de desplazamiento";
    }
    get keyboardKeyPrintScreen() {
      return "Imprimir pantalla";
    }
    get keyboardKeyPowerOff() {
      return "Apagar";
    }
    get keyboardKeyPower() {
      return "Encender";
    }
    get keyboardKeyPageUp() {
      return "RePág";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get licensesPackageDetailTextOne() {
      return "1 licencia";
    }
    get timePickerInputHelpText() {
      return "INGRESAR HORA";
    }
    get invalidTimeLabel() {
      return "Ingresa una hora válida";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licencias";
    }
    get inputTimeModeButtonLabel() {
      return "Cambiar al modo de entrada de texto";
    }
    get dateInputLabel() {
      return "Ingresar fecha";
    }
    get calendarModeButtonLabel() {
      return "Cambiar al calendario";
    }
    get dateRangePickerHelpText() {
      return "SELECCIONAR PERÍODO";
    }
    get dateOutOfRangeLabel() {
      return "Fuera de rango";
    }
    get invalidDateRangeLabel() {
      return "El rango no es válido.";
    }
    get invalidDateFormatLabel() {
      return "El formato no es válido.";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Fecha de finalización: $fullDate";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Fecha de inicio: $fullDate";
    }
    get inputDateModeButtonLabel() {
      return "Cambiar a modo de entrada";
    }
    get unspecifiedDateRange() {
      return "Período";
    }
    get dateHelpText() {
      return "dd/mm/aaaa";
    }
    get reorderItemToStart() {
      return "Mover al inicio";
    }
    get modalBarrierDismissLabel() {
      return "Descartar";
    }
    get signedInLabel() {
      return "Cuenta con la que accediste";
    }
    get openAppDrawerTooltip() {
      return "Abrir menú de navegación";
    }
    get deleteButtonTooltip() {
      return "Borrar";
    }
    get nextMonthTooltip() {
      return "Próximo mes";
    }
    get nextPageTooltip() {
      return "Próxima página";
    }
    get aboutListTileTitleRaw() {
      return "Acerca de $applicationName";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow de $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow de aproximadamente $rowCount";
    }
    get selectedRowCountTitleOne() {
      return "Se seleccionó 1 elemento";
    }
    get selectedRowCountTitleOther() {
      return "Se seleccionaron $selectedRowCount elementos";
    }
    get anteMeridiemAbbreviation() {
      return "a.m.";
    }
    get postMeridiemAbbreviation() {
      return "p.m.";
    }
    get dialogLabel() {
      return "Diálogo";
    }
    get expandedIconTapHint() {
      return "Contraer";
    }
    get collapsedIconTapHint() {
      return "Expandir";
    }
  };
  (generated_material_localizations.MaterialLocalizationEsCo.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "es_CO";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEsCo.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEsCo.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEsCo);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEsCo);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEsCo, I[2]);
  generated_material_localizations.MaterialLocalizationEsCr = class MaterialLocalizationEsCr extends generated_material_localizations.MaterialLocalizationEs {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEsCr.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyChannelDown() {
      return "Canal anterior";
    }
    get keyboardKeyChannelUp() {
      return "Canal siguiente";
    }
    get keyboardKeyCapsLock() {
      return "Bloqueo de mayúscula";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyNumLock() {
      return "Bloqueo numérico";
    }
    get keyboardKeyPageDown() {
      return "AvPág";
    }
    get keyboardKeySpace() {
      return "Barra espaciadora";
    }
    get keyboardKeyScrollLock() {
      return "Bloqueo de desplazamiento";
    }
    get keyboardKeyPrintScreen() {
      return "Imprimir pantalla";
    }
    get keyboardKeyPowerOff() {
      return "Apagar";
    }
    get keyboardKeyPower() {
      return "Encender";
    }
    get keyboardKeyPageUp() {
      return "RePág";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get licensesPackageDetailTextOne() {
      return "1 licencia";
    }
    get timePickerInputHelpText() {
      return "INGRESAR HORA";
    }
    get invalidTimeLabel() {
      return "Ingresa una hora válida";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licencias";
    }
    get inputTimeModeButtonLabel() {
      return "Cambiar al modo de entrada de texto";
    }
    get dateInputLabel() {
      return "Ingresar fecha";
    }
    get calendarModeButtonLabel() {
      return "Cambiar al calendario";
    }
    get dateRangePickerHelpText() {
      return "SELECCIONAR PERÍODO";
    }
    get dateOutOfRangeLabel() {
      return "Fuera de rango";
    }
    get invalidDateRangeLabel() {
      return "El rango no es válido.";
    }
    get invalidDateFormatLabel() {
      return "El formato no es válido.";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Fecha de finalización: $fullDate";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Fecha de inicio: $fullDate";
    }
    get inputDateModeButtonLabel() {
      return "Cambiar a modo de entrada";
    }
    get unspecifiedDateRange() {
      return "Período";
    }
    get dateHelpText() {
      return "dd/mm/aaaa";
    }
    get reorderItemToStart() {
      return "Mover al inicio";
    }
    get modalBarrierDismissLabel() {
      return "Descartar";
    }
    get signedInLabel() {
      return "Cuenta con la que accediste";
    }
    get openAppDrawerTooltip() {
      return "Abrir menú de navegación";
    }
    get deleteButtonTooltip() {
      return "Borrar";
    }
    get nextMonthTooltip() {
      return "Próximo mes";
    }
    get nextPageTooltip() {
      return "Próxima página";
    }
    get aboutListTileTitleRaw() {
      return "Acerca de $applicationName";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow de $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow de aproximadamente $rowCount";
    }
    get selectedRowCountTitleOne() {
      return "Se seleccionó 1 elemento";
    }
    get selectedRowCountTitleOther() {
      return "Se seleccionaron $selectedRowCount elementos";
    }
    get anteMeridiemAbbreviation() {
      return "a.m.";
    }
    get postMeridiemAbbreviation() {
      return "p.m.";
    }
    get dialogLabel() {
      return "Diálogo";
    }
    get expandedIconTapHint() {
      return "Contraer";
    }
    get collapsedIconTapHint() {
      return "Expandir";
    }
  };
  (generated_material_localizations.MaterialLocalizationEsCr.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "es_CR";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEsCr.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEsCr.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEsCr);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEsCr);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEsCr, I[2]);
  generated_material_localizations.MaterialLocalizationEsDo = class MaterialLocalizationEsDo extends generated_material_localizations.MaterialLocalizationEs {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEsDo.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyChannelDown() {
      return "Canal anterior";
    }
    get keyboardKeyChannelUp() {
      return "Canal siguiente";
    }
    get keyboardKeyCapsLock() {
      return "Bloqueo de mayúscula";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyNumLock() {
      return "Bloqueo numérico";
    }
    get keyboardKeyPageDown() {
      return "AvPág";
    }
    get keyboardKeySpace() {
      return "Barra espaciadora";
    }
    get keyboardKeyScrollLock() {
      return "Bloqueo de desplazamiento";
    }
    get keyboardKeyPrintScreen() {
      return "Imprimir pantalla";
    }
    get keyboardKeyPowerOff() {
      return "Apagar";
    }
    get keyboardKeyPower() {
      return "Encender";
    }
    get keyboardKeyPageUp() {
      return "RePág";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get licensesPackageDetailTextOne() {
      return "1 licencia";
    }
    get timePickerInputHelpText() {
      return "INGRESAR HORA";
    }
    get invalidTimeLabel() {
      return "Ingresa una hora válida";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licencias";
    }
    get inputTimeModeButtonLabel() {
      return "Cambiar al modo de entrada de texto";
    }
    get dateInputLabel() {
      return "Ingresar fecha";
    }
    get calendarModeButtonLabel() {
      return "Cambiar al calendario";
    }
    get dateRangePickerHelpText() {
      return "SELECCIONAR PERÍODO";
    }
    get dateOutOfRangeLabel() {
      return "Fuera de rango";
    }
    get invalidDateRangeLabel() {
      return "El rango no es válido.";
    }
    get invalidDateFormatLabel() {
      return "El formato no es válido.";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Fecha de finalización: $fullDate";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Fecha de inicio: $fullDate";
    }
    get inputDateModeButtonLabel() {
      return "Cambiar a modo de entrada";
    }
    get unspecifiedDateRange() {
      return "Período";
    }
    get dateHelpText() {
      return "dd/mm/aaaa";
    }
    get reorderItemToStart() {
      return "Mover al inicio";
    }
    get modalBarrierDismissLabel() {
      return "Descartar";
    }
    get signedInLabel() {
      return "Cuenta con la que accediste";
    }
    get openAppDrawerTooltip() {
      return "Abrir menú de navegación";
    }
    get deleteButtonTooltip() {
      return "Borrar";
    }
    get nextMonthTooltip() {
      return "Próximo mes";
    }
    get nextPageTooltip() {
      return "Próxima página";
    }
    get aboutListTileTitleRaw() {
      return "Acerca de $applicationName";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow de $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow de aproximadamente $rowCount";
    }
    get selectedRowCountTitleOne() {
      return "Se seleccionó 1 elemento";
    }
    get selectedRowCountTitleOther() {
      return "Se seleccionaron $selectedRowCount elementos";
    }
    get anteMeridiemAbbreviation() {
      return "a.m.";
    }
    get postMeridiemAbbreviation() {
      return "p.m.";
    }
    get dialogLabel() {
      return "Diálogo";
    }
    get expandedIconTapHint() {
      return "Contraer";
    }
    get collapsedIconTapHint() {
      return "Expandir";
    }
  };
  (generated_material_localizations.MaterialLocalizationEsDo.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "es_DO";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEsDo.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEsDo.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEsDo);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEsDo);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEsDo, I[2]);
  generated_material_localizations.MaterialLocalizationEsEc = class MaterialLocalizationEsEc extends generated_material_localizations.MaterialLocalizationEs {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEsEc.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyChannelDown() {
      return "Canal anterior";
    }
    get keyboardKeyChannelUp() {
      return "Canal siguiente";
    }
    get keyboardKeyCapsLock() {
      return "Bloqueo de mayúscula";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyNumLock() {
      return "Bloqueo numérico";
    }
    get keyboardKeyPageDown() {
      return "AvPág";
    }
    get keyboardKeySpace() {
      return "Barra espaciadora";
    }
    get keyboardKeyScrollLock() {
      return "Bloqueo de desplazamiento";
    }
    get keyboardKeyPrintScreen() {
      return "Imprimir pantalla";
    }
    get keyboardKeyPowerOff() {
      return "Apagar";
    }
    get keyboardKeyPower() {
      return "Encender";
    }
    get keyboardKeyPageUp() {
      return "RePág";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get licensesPackageDetailTextOne() {
      return "1 licencia";
    }
    get timePickerInputHelpText() {
      return "INGRESAR HORA";
    }
    get invalidTimeLabel() {
      return "Ingresa una hora válida";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licencias";
    }
    get inputTimeModeButtonLabel() {
      return "Cambiar al modo de entrada de texto";
    }
    get dateInputLabel() {
      return "Ingresar fecha";
    }
    get calendarModeButtonLabel() {
      return "Cambiar al calendario";
    }
    get dateRangePickerHelpText() {
      return "SELECCIONAR PERÍODO";
    }
    get dateOutOfRangeLabel() {
      return "Fuera de rango";
    }
    get invalidDateRangeLabel() {
      return "El rango no es válido.";
    }
    get invalidDateFormatLabel() {
      return "El formato no es válido.";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Fecha de finalización: $fullDate";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Fecha de inicio: $fullDate";
    }
    get inputDateModeButtonLabel() {
      return "Cambiar a modo de entrada";
    }
    get unspecifiedDateRange() {
      return "Período";
    }
    get dateHelpText() {
      return "dd/mm/aaaa";
    }
    get reorderItemToStart() {
      return "Mover al inicio";
    }
    get modalBarrierDismissLabel() {
      return "Descartar";
    }
    get signedInLabel() {
      return "Cuenta con la que accediste";
    }
    get openAppDrawerTooltip() {
      return "Abrir menú de navegación";
    }
    get deleteButtonTooltip() {
      return "Borrar";
    }
    get nextMonthTooltip() {
      return "Próximo mes";
    }
    get nextPageTooltip() {
      return "Próxima página";
    }
    get aboutListTileTitleRaw() {
      return "Acerca de $applicationName";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow de $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow de aproximadamente $rowCount";
    }
    get selectedRowCountTitleOne() {
      return "Se seleccionó 1 elemento";
    }
    get selectedRowCountTitleOther() {
      return "Se seleccionaron $selectedRowCount elementos";
    }
    get anteMeridiemAbbreviation() {
      return "a.m.";
    }
    get postMeridiemAbbreviation() {
      return "p.m.";
    }
    get dialogLabel() {
      return "Diálogo";
    }
    get expandedIconTapHint() {
      return "Contraer";
    }
    get collapsedIconTapHint() {
      return "Expandir";
    }
  };
  (generated_material_localizations.MaterialLocalizationEsEc.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "es_EC";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEsEc.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEsEc.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEsEc);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEsEc);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEsEc, I[2]);
  generated_material_localizations.MaterialLocalizationEsGt = class MaterialLocalizationEsGt extends generated_material_localizations.MaterialLocalizationEs {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEsGt.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyChannelDown() {
      return "Canal anterior";
    }
    get keyboardKeyChannelUp() {
      return "Canal siguiente";
    }
    get keyboardKeyCapsLock() {
      return "Bloqueo de mayúscula";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyNumLock() {
      return "Bloqueo numérico";
    }
    get keyboardKeyPageDown() {
      return "AvPág";
    }
    get keyboardKeySpace() {
      return "Barra espaciadora";
    }
    get keyboardKeyScrollLock() {
      return "Bloqueo de desplazamiento";
    }
    get keyboardKeyPrintScreen() {
      return "Imprimir pantalla";
    }
    get keyboardKeyPowerOff() {
      return "Apagar";
    }
    get keyboardKeyPower() {
      return "Encender";
    }
    get keyboardKeyPageUp() {
      return "RePág";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get licensesPackageDetailTextOne() {
      return "1 licencia";
    }
    get timePickerInputHelpText() {
      return "INGRESAR HORA";
    }
    get invalidTimeLabel() {
      return "Ingresa una hora válida";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licencias";
    }
    get inputTimeModeButtonLabel() {
      return "Cambiar al modo de entrada de texto";
    }
    get dateInputLabel() {
      return "Ingresar fecha";
    }
    get calendarModeButtonLabel() {
      return "Cambiar al calendario";
    }
    get dateRangePickerHelpText() {
      return "SELECCIONAR PERÍODO";
    }
    get dateOutOfRangeLabel() {
      return "Fuera de rango";
    }
    get invalidDateRangeLabel() {
      return "El rango no es válido.";
    }
    get invalidDateFormatLabel() {
      return "El formato no es válido.";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Fecha de finalización: $fullDate";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Fecha de inicio: $fullDate";
    }
    get inputDateModeButtonLabel() {
      return "Cambiar a modo de entrada";
    }
    get unspecifiedDateRange() {
      return "Período";
    }
    get dateHelpText() {
      return "dd/mm/aaaa";
    }
    get reorderItemToStart() {
      return "Mover al inicio";
    }
    get modalBarrierDismissLabel() {
      return "Descartar";
    }
    get signedInLabel() {
      return "Cuenta con la que accediste";
    }
    get openAppDrawerTooltip() {
      return "Abrir menú de navegación";
    }
    get deleteButtonTooltip() {
      return "Borrar";
    }
    get nextMonthTooltip() {
      return "Próximo mes";
    }
    get nextPageTooltip() {
      return "Próxima página";
    }
    get aboutListTileTitleRaw() {
      return "Acerca de $applicationName";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow de $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow de aproximadamente $rowCount";
    }
    get selectedRowCountTitleOne() {
      return "Se seleccionó 1 elemento";
    }
    get selectedRowCountTitleOther() {
      return "Se seleccionaron $selectedRowCount elementos";
    }
    get anteMeridiemAbbreviation() {
      return "a.m.";
    }
    get postMeridiemAbbreviation() {
      return "p.m.";
    }
    get dialogLabel() {
      return "Diálogo";
    }
    get expandedIconTapHint() {
      return "Contraer";
    }
    get collapsedIconTapHint() {
      return "Expandir";
    }
  };
  (generated_material_localizations.MaterialLocalizationEsGt.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "es_GT";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEsGt.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEsGt.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEsGt);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEsGt);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEsGt, I[2]);
  generated_material_localizations.MaterialLocalizationEsHn = class MaterialLocalizationEsHn extends generated_material_localizations.MaterialLocalizationEs {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEsHn.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyChannelDown() {
      return "Canal anterior";
    }
    get keyboardKeyChannelUp() {
      return "Canal siguiente";
    }
    get keyboardKeyCapsLock() {
      return "Bloqueo de mayúscula";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyNumLock() {
      return "Bloqueo numérico";
    }
    get keyboardKeyPageDown() {
      return "AvPág";
    }
    get keyboardKeySpace() {
      return "Barra espaciadora";
    }
    get keyboardKeyScrollLock() {
      return "Bloqueo de desplazamiento";
    }
    get keyboardKeyPrintScreen() {
      return "Imprimir pantalla";
    }
    get keyboardKeyPowerOff() {
      return "Apagar";
    }
    get keyboardKeyPower() {
      return "Encender";
    }
    get keyboardKeyPageUp() {
      return "RePág";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get licensesPackageDetailTextOne() {
      return "1 licencia";
    }
    get timePickerInputHelpText() {
      return "INGRESAR HORA";
    }
    get invalidTimeLabel() {
      return "Ingresa una hora válida";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licencias";
    }
    get inputTimeModeButtonLabel() {
      return "Cambiar al modo de entrada de texto";
    }
    get dateInputLabel() {
      return "Ingresar fecha";
    }
    get calendarModeButtonLabel() {
      return "Cambiar al calendario";
    }
    get dateRangePickerHelpText() {
      return "SELECCIONAR PERÍODO";
    }
    get dateOutOfRangeLabel() {
      return "Fuera de rango";
    }
    get invalidDateRangeLabel() {
      return "El rango no es válido.";
    }
    get invalidDateFormatLabel() {
      return "El formato no es válido.";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Fecha de finalización: $fullDate";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Fecha de inicio: $fullDate";
    }
    get inputDateModeButtonLabel() {
      return "Cambiar a modo de entrada";
    }
    get unspecifiedDateRange() {
      return "Período";
    }
    get dateHelpText() {
      return "dd/mm/aaaa";
    }
    get reorderItemToStart() {
      return "Mover al inicio";
    }
    get modalBarrierDismissLabel() {
      return "Descartar";
    }
    get signedInLabel() {
      return "Cuenta con la que accediste";
    }
    get openAppDrawerTooltip() {
      return "Abrir menú de navegación";
    }
    get deleteButtonTooltip() {
      return "Borrar";
    }
    get nextMonthTooltip() {
      return "Próximo mes";
    }
    get nextPageTooltip() {
      return "Próxima página";
    }
    get aboutListTileTitleRaw() {
      return "Acerca de $applicationName";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow de $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow de aproximadamente $rowCount";
    }
    get selectedRowCountTitleOne() {
      return "Se seleccionó 1 elemento";
    }
    get selectedRowCountTitleOther() {
      return "Se seleccionaron $selectedRowCount elementos";
    }
    get anteMeridiemAbbreviation() {
      return "a.m.";
    }
    get postMeridiemAbbreviation() {
      return "p.m.";
    }
    get dialogLabel() {
      return "Diálogo";
    }
    get expandedIconTapHint() {
      return "Contraer";
    }
    get collapsedIconTapHint() {
      return "Expandir";
    }
  };
  (generated_material_localizations.MaterialLocalizationEsHn.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "es_HN";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEsHn.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEsHn.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEsHn);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEsHn);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEsHn, I[2]);
  generated_material_localizations.MaterialLocalizationEsMx = class MaterialLocalizationEsMx extends generated_material_localizations.MaterialLocalizationEs {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEsMx.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyChannelDown() {
      return "Canal anterior";
    }
    get keyboardKeyChannelUp() {
      return "Canal siguiente";
    }
    get keyboardKeyCapsLock() {
      return "Bloqueo de mayúscula";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyNumLock() {
      return "Bloqueo numérico";
    }
    get keyboardKeyPageDown() {
      return "AvPág";
    }
    get keyboardKeySpace() {
      return "Barra espaciadora";
    }
    get keyboardKeyScrollLock() {
      return "Bloqueo de desplazamiento";
    }
    get keyboardKeyPrintScreen() {
      return "Imprimir pantalla";
    }
    get keyboardKeyPowerOff() {
      return "Apagar";
    }
    get keyboardKeyPower() {
      return "Encender";
    }
    get keyboardKeyPageUp() {
      return "RePág";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get licensesPackageDetailTextOne() {
      return "1 licencia";
    }
    get timePickerInputHelpText() {
      return "INGRESAR HORA";
    }
    get invalidTimeLabel() {
      return "Ingresa una hora válida";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licencias";
    }
    get inputTimeModeButtonLabel() {
      return "Cambiar al modo de entrada de texto";
    }
    get dateInputLabel() {
      return "Ingresar fecha";
    }
    get calendarModeButtonLabel() {
      return "Cambiar al calendario";
    }
    get dateRangePickerHelpText() {
      return "SELECCIONAR PERÍODO";
    }
    get dateOutOfRangeLabel() {
      return "Fuera de rango";
    }
    get invalidDateRangeLabel() {
      return "El rango no es válido.";
    }
    get invalidDateFormatLabel() {
      return "El formato no es válido.";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Fecha de finalización: $fullDate";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Fecha de inicio: $fullDate";
    }
    get inputDateModeButtonLabel() {
      return "Cambiar a modo de entrada";
    }
    get unspecifiedDateRange() {
      return "Período";
    }
    get dateHelpText() {
      return "dd/mm/aaaa";
    }
    get reorderItemToStart() {
      return "Mover al inicio";
    }
    get modalBarrierDismissLabel() {
      return "Descartar";
    }
    get signedInLabel() {
      return "Cuenta con la que accediste";
    }
    get openAppDrawerTooltip() {
      return "Abrir menú de navegación";
    }
    get deleteButtonTooltip() {
      return "Borrar";
    }
    get nextMonthTooltip() {
      return "Próximo mes";
    }
    get nextPageTooltip() {
      return "Próxima página";
    }
    get aboutListTileTitleRaw() {
      return "Acerca de $applicationName";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow de $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow de aproximadamente $rowCount";
    }
    get selectedRowCountTitleOne() {
      return "Se seleccionó 1 elemento";
    }
    get selectedRowCountTitleOther() {
      return "Se seleccionaron $selectedRowCount elementos";
    }
    get anteMeridiemAbbreviation() {
      return "a.m.";
    }
    get postMeridiemAbbreviation() {
      return "p.m.";
    }
    get dialogLabel() {
      return "Diálogo";
    }
    get expandedIconTapHint() {
      return "Contraer";
    }
    get collapsedIconTapHint() {
      return "Expandir";
    }
  };
  (generated_material_localizations.MaterialLocalizationEsMx.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "es_MX";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEsMx.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEsMx.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEsMx);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEsMx);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEsMx, I[2]);
  generated_material_localizations.MaterialLocalizationEsNi = class MaterialLocalizationEsNi extends generated_material_localizations.MaterialLocalizationEs {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEsNi.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyChannelDown() {
      return "Canal anterior";
    }
    get keyboardKeyChannelUp() {
      return "Canal siguiente";
    }
    get keyboardKeyCapsLock() {
      return "Bloqueo de mayúscula";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyNumLock() {
      return "Bloqueo numérico";
    }
    get keyboardKeyPageDown() {
      return "AvPág";
    }
    get keyboardKeySpace() {
      return "Barra espaciadora";
    }
    get keyboardKeyScrollLock() {
      return "Bloqueo de desplazamiento";
    }
    get keyboardKeyPrintScreen() {
      return "Imprimir pantalla";
    }
    get keyboardKeyPowerOff() {
      return "Apagar";
    }
    get keyboardKeyPower() {
      return "Encender";
    }
    get keyboardKeyPageUp() {
      return "RePág";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get licensesPackageDetailTextOne() {
      return "1 licencia";
    }
    get timePickerInputHelpText() {
      return "INGRESAR HORA";
    }
    get invalidTimeLabel() {
      return "Ingresa una hora válida";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licencias";
    }
    get inputTimeModeButtonLabel() {
      return "Cambiar al modo de entrada de texto";
    }
    get dateInputLabel() {
      return "Ingresar fecha";
    }
    get calendarModeButtonLabel() {
      return "Cambiar al calendario";
    }
    get dateRangePickerHelpText() {
      return "SELECCIONAR PERÍODO";
    }
    get dateOutOfRangeLabel() {
      return "Fuera de rango";
    }
    get invalidDateRangeLabel() {
      return "El rango no es válido.";
    }
    get invalidDateFormatLabel() {
      return "El formato no es válido.";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Fecha de finalización: $fullDate";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Fecha de inicio: $fullDate";
    }
    get inputDateModeButtonLabel() {
      return "Cambiar a modo de entrada";
    }
    get unspecifiedDateRange() {
      return "Período";
    }
    get dateHelpText() {
      return "dd/mm/aaaa";
    }
    get reorderItemToStart() {
      return "Mover al inicio";
    }
    get modalBarrierDismissLabel() {
      return "Descartar";
    }
    get signedInLabel() {
      return "Cuenta con la que accediste";
    }
    get openAppDrawerTooltip() {
      return "Abrir menú de navegación";
    }
    get deleteButtonTooltip() {
      return "Borrar";
    }
    get nextMonthTooltip() {
      return "Próximo mes";
    }
    get nextPageTooltip() {
      return "Próxima página";
    }
    get aboutListTileTitleRaw() {
      return "Acerca de $applicationName";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow de $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow de aproximadamente $rowCount";
    }
    get selectedRowCountTitleOne() {
      return "Se seleccionó 1 elemento";
    }
    get selectedRowCountTitleOther() {
      return "Se seleccionaron $selectedRowCount elementos";
    }
    get anteMeridiemAbbreviation() {
      return "a.m.";
    }
    get postMeridiemAbbreviation() {
      return "p.m.";
    }
    get dialogLabel() {
      return "Diálogo";
    }
    get expandedIconTapHint() {
      return "Contraer";
    }
    get collapsedIconTapHint() {
      return "Expandir";
    }
  };
  (generated_material_localizations.MaterialLocalizationEsNi.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "es_NI";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEsNi.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEsNi.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEsNi);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEsNi);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEsNi, I[2]);
  generated_material_localizations.MaterialLocalizationEsPa = class MaterialLocalizationEsPa extends generated_material_localizations.MaterialLocalizationEs {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEsPa.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyChannelDown() {
      return "Canal anterior";
    }
    get keyboardKeyChannelUp() {
      return "Canal siguiente";
    }
    get keyboardKeyCapsLock() {
      return "Bloqueo de mayúscula";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyNumLock() {
      return "Bloqueo numérico";
    }
    get keyboardKeyPageDown() {
      return "AvPág";
    }
    get keyboardKeySpace() {
      return "Barra espaciadora";
    }
    get keyboardKeyScrollLock() {
      return "Bloqueo de desplazamiento";
    }
    get keyboardKeyPrintScreen() {
      return "Imprimir pantalla";
    }
    get keyboardKeyPowerOff() {
      return "Apagar";
    }
    get keyboardKeyPower() {
      return "Encender";
    }
    get keyboardKeyPageUp() {
      return "RePág";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get licensesPackageDetailTextOne() {
      return "1 licencia";
    }
    get timePickerInputHelpText() {
      return "INGRESAR HORA";
    }
    get invalidTimeLabel() {
      return "Ingresa una hora válida";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licencias";
    }
    get inputTimeModeButtonLabel() {
      return "Cambiar al modo de entrada de texto";
    }
    get dateInputLabel() {
      return "Ingresar fecha";
    }
    get calendarModeButtonLabel() {
      return "Cambiar al calendario";
    }
    get dateRangePickerHelpText() {
      return "SELECCIONAR PERÍODO";
    }
    get dateOutOfRangeLabel() {
      return "Fuera de rango";
    }
    get invalidDateRangeLabel() {
      return "El rango no es válido.";
    }
    get invalidDateFormatLabel() {
      return "El formato no es válido.";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Fecha de finalización: $fullDate";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Fecha de inicio: $fullDate";
    }
    get inputDateModeButtonLabel() {
      return "Cambiar a modo de entrada";
    }
    get unspecifiedDateRange() {
      return "Período";
    }
    get dateHelpText() {
      return "dd/mm/aaaa";
    }
    get reorderItemToStart() {
      return "Mover al inicio";
    }
    get modalBarrierDismissLabel() {
      return "Descartar";
    }
    get signedInLabel() {
      return "Cuenta con la que accediste";
    }
    get openAppDrawerTooltip() {
      return "Abrir menú de navegación";
    }
    get deleteButtonTooltip() {
      return "Borrar";
    }
    get nextMonthTooltip() {
      return "Próximo mes";
    }
    get nextPageTooltip() {
      return "Próxima página";
    }
    get aboutListTileTitleRaw() {
      return "Acerca de $applicationName";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow de $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow de aproximadamente $rowCount";
    }
    get selectedRowCountTitleOne() {
      return "Se seleccionó 1 elemento";
    }
    get selectedRowCountTitleOther() {
      return "Se seleccionaron $selectedRowCount elementos";
    }
    get anteMeridiemAbbreviation() {
      return "a.m.";
    }
    get postMeridiemAbbreviation() {
      return "p.m.";
    }
    get dialogLabel() {
      return "Diálogo";
    }
    get expandedIconTapHint() {
      return "Contraer";
    }
    get collapsedIconTapHint() {
      return "Expandir";
    }
  };
  (generated_material_localizations.MaterialLocalizationEsPa.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "es_PA";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEsPa.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEsPa.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEsPa);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEsPa);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEsPa, I[2]);
  generated_material_localizations.MaterialLocalizationEsPe = class MaterialLocalizationEsPe extends generated_material_localizations.MaterialLocalizationEs {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEsPe.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyChannelDown() {
      return "Canal anterior";
    }
    get keyboardKeyChannelUp() {
      return "Canal siguiente";
    }
    get keyboardKeyCapsLock() {
      return "Bloqueo de mayúscula";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyNumLock() {
      return "Bloqueo numérico";
    }
    get keyboardKeyPageDown() {
      return "AvPág";
    }
    get keyboardKeySpace() {
      return "Barra espaciadora";
    }
    get keyboardKeyScrollLock() {
      return "Bloqueo de desplazamiento";
    }
    get keyboardKeyPrintScreen() {
      return "Imprimir pantalla";
    }
    get keyboardKeyPowerOff() {
      return "Apagar";
    }
    get keyboardKeyPower() {
      return "Encender";
    }
    get keyboardKeyPageUp() {
      return "RePág";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get licensesPackageDetailTextOne() {
      return "1 licencia";
    }
    get timePickerInputHelpText() {
      return "INGRESAR HORA";
    }
    get invalidTimeLabel() {
      return "Ingresa una hora válida";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licencias";
    }
    get inputTimeModeButtonLabel() {
      return "Cambiar al modo de entrada de texto";
    }
    get dateInputLabel() {
      return "Ingresar fecha";
    }
    get calendarModeButtonLabel() {
      return "Cambiar al calendario";
    }
    get dateRangePickerHelpText() {
      return "SELECCIONAR PERÍODO";
    }
    get dateOutOfRangeLabel() {
      return "Fuera de rango";
    }
    get invalidDateRangeLabel() {
      return "El rango no es válido.";
    }
    get invalidDateFormatLabel() {
      return "El formato no es válido.";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Fecha de finalización: $fullDate";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Fecha de inicio: $fullDate";
    }
    get inputDateModeButtonLabel() {
      return "Cambiar a modo de entrada";
    }
    get unspecifiedDateRange() {
      return "Período";
    }
    get dateHelpText() {
      return "dd/mm/aaaa";
    }
    get reorderItemToStart() {
      return "Mover al inicio";
    }
    get modalBarrierDismissLabel() {
      return "Descartar";
    }
    get signedInLabel() {
      return "Cuenta con la que accediste";
    }
    get openAppDrawerTooltip() {
      return "Abrir menú de navegación";
    }
    get deleteButtonTooltip() {
      return "Borrar";
    }
    get nextMonthTooltip() {
      return "Próximo mes";
    }
    get nextPageTooltip() {
      return "Próxima página";
    }
    get aboutListTileTitleRaw() {
      return "Acerca de $applicationName";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow de $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow de aproximadamente $rowCount";
    }
    get selectedRowCountTitleOne() {
      return "Se seleccionó 1 elemento";
    }
    get selectedRowCountTitleOther() {
      return "Se seleccionaron $selectedRowCount elementos";
    }
    get anteMeridiemAbbreviation() {
      return "a.m.";
    }
    get postMeridiemAbbreviation() {
      return "p.m.";
    }
    get dialogLabel() {
      return "Diálogo";
    }
    get expandedIconTapHint() {
      return "Contraer";
    }
    get collapsedIconTapHint() {
      return "Expandir";
    }
  };
  (generated_material_localizations.MaterialLocalizationEsPe.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "es_PE";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEsPe.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEsPe.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEsPe);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEsPe);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEsPe, I[2]);
  generated_material_localizations.MaterialLocalizationEsPr = class MaterialLocalizationEsPr extends generated_material_localizations.MaterialLocalizationEs {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEsPr.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyChannelDown() {
      return "Canal anterior";
    }
    get keyboardKeyChannelUp() {
      return "Canal siguiente";
    }
    get keyboardKeyCapsLock() {
      return "Bloqueo de mayúscula";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyNumLock() {
      return "Bloqueo numérico";
    }
    get keyboardKeyPageDown() {
      return "AvPág";
    }
    get keyboardKeySpace() {
      return "Barra espaciadora";
    }
    get keyboardKeyScrollLock() {
      return "Bloqueo de desplazamiento";
    }
    get keyboardKeyPrintScreen() {
      return "Imprimir pantalla";
    }
    get keyboardKeyPowerOff() {
      return "Apagar";
    }
    get keyboardKeyPower() {
      return "Encender";
    }
    get keyboardKeyPageUp() {
      return "RePág";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get licensesPackageDetailTextOne() {
      return "1 licencia";
    }
    get timePickerInputHelpText() {
      return "INGRESAR HORA";
    }
    get invalidTimeLabel() {
      return "Ingresa una hora válida";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licencias";
    }
    get inputTimeModeButtonLabel() {
      return "Cambiar al modo de entrada de texto";
    }
    get dateInputLabel() {
      return "Ingresar fecha";
    }
    get calendarModeButtonLabel() {
      return "Cambiar al calendario";
    }
    get dateRangePickerHelpText() {
      return "SELECCIONAR PERÍODO";
    }
    get dateOutOfRangeLabel() {
      return "Fuera de rango";
    }
    get invalidDateRangeLabel() {
      return "El rango no es válido.";
    }
    get invalidDateFormatLabel() {
      return "El formato no es válido.";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Fecha de finalización: $fullDate";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Fecha de inicio: $fullDate";
    }
    get inputDateModeButtonLabel() {
      return "Cambiar a modo de entrada";
    }
    get unspecifiedDateRange() {
      return "Período";
    }
    get dateHelpText() {
      return "dd/mm/aaaa";
    }
    get reorderItemToStart() {
      return "Mover al inicio";
    }
    get modalBarrierDismissLabel() {
      return "Descartar";
    }
    get signedInLabel() {
      return "Cuenta con la que accediste";
    }
    get openAppDrawerTooltip() {
      return "Abrir menú de navegación";
    }
    get deleteButtonTooltip() {
      return "Borrar";
    }
    get nextMonthTooltip() {
      return "Próximo mes";
    }
    get nextPageTooltip() {
      return "Próxima página";
    }
    get aboutListTileTitleRaw() {
      return "Acerca de $applicationName";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow de $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow de aproximadamente $rowCount";
    }
    get selectedRowCountTitleOne() {
      return "Se seleccionó 1 elemento";
    }
    get selectedRowCountTitleOther() {
      return "Se seleccionaron $selectedRowCount elementos";
    }
    get anteMeridiemAbbreviation() {
      return "a.m.";
    }
    get postMeridiemAbbreviation() {
      return "p.m.";
    }
    get dialogLabel() {
      return "Diálogo";
    }
    get expandedIconTapHint() {
      return "Contraer";
    }
    get collapsedIconTapHint() {
      return "Expandir";
    }
  };
  (generated_material_localizations.MaterialLocalizationEsPr.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "es_PR";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEsPr.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEsPr.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEsPr);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEsPr);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEsPr, I[2]);
  generated_material_localizations.MaterialLocalizationEsPy = class MaterialLocalizationEsPy extends generated_material_localizations.MaterialLocalizationEs {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEsPy.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyChannelDown() {
      return "Canal anterior";
    }
    get keyboardKeyChannelUp() {
      return "Canal siguiente";
    }
    get keyboardKeyCapsLock() {
      return "Bloqueo de mayúscula";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyNumLock() {
      return "Bloqueo numérico";
    }
    get keyboardKeyPageDown() {
      return "AvPág";
    }
    get keyboardKeySpace() {
      return "Barra espaciadora";
    }
    get keyboardKeyScrollLock() {
      return "Bloqueo de desplazamiento";
    }
    get keyboardKeyPrintScreen() {
      return "Imprimir pantalla";
    }
    get keyboardKeyPowerOff() {
      return "Apagar";
    }
    get keyboardKeyPower() {
      return "Encender";
    }
    get keyboardKeyPageUp() {
      return "RePág";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get licensesPackageDetailTextOne() {
      return "1 licencia";
    }
    get timePickerInputHelpText() {
      return "INGRESAR HORA";
    }
    get invalidTimeLabel() {
      return "Ingresa una hora válida";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licencias";
    }
    get inputTimeModeButtonLabel() {
      return "Cambiar al modo de entrada de texto";
    }
    get dateInputLabel() {
      return "Ingresar fecha";
    }
    get calendarModeButtonLabel() {
      return "Cambiar al calendario";
    }
    get dateRangePickerHelpText() {
      return "SELECCIONAR PERÍODO";
    }
    get dateOutOfRangeLabel() {
      return "Fuera de rango";
    }
    get invalidDateRangeLabel() {
      return "El rango no es válido.";
    }
    get invalidDateFormatLabel() {
      return "El formato no es válido.";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Fecha de finalización: $fullDate";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Fecha de inicio: $fullDate";
    }
    get inputDateModeButtonLabel() {
      return "Cambiar a modo de entrada";
    }
    get unspecifiedDateRange() {
      return "Período";
    }
    get dateHelpText() {
      return "dd/mm/aaaa";
    }
    get reorderItemToStart() {
      return "Mover al inicio";
    }
    get modalBarrierDismissLabel() {
      return "Descartar";
    }
    get signedInLabel() {
      return "Cuenta con la que accediste";
    }
    get openAppDrawerTooltip() {
      return "Abrir menú de navegación";
    }
    get deleteButtonTooltip() {
      return "Borrar";
    }
    get nextMonthTooltip() {
      return "Próximo mes";
    }
    get nextPageTooltip() {
      return "Próxima página";
    }
    get aboutListTileTitleRaw() {
      return "Acerca de $applicationName";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow de $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow de aproximadamente $rowCount";
    }
    get selectedRowCountTitleOne() {
      return "Se seleccionó 1 elemento";
    }
    get selectedRowCountTitleOther() {
      return "Se seleccionaron $selectedRowCount elementos";
    }
    get anteMeridiemAbbreviation() {
      return "a.m.";
    }
    get postMeridiemAbbreviation() {
      return "p.m.";
    }
    get dialogLabel() {
      return "Diálogo";
    }
    get expandedIconTapHint() {
      return "Contraer";
    }
    get collapsedIconTapHint() {
      return "Expandir";
    }
  };
  (generated_material_localizations.MaterialLocalizationEsPy.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "es_PY";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEsPy.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEsPy.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEsPy);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEsPy);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEsPy, I[2]);
  generated_material_localizations.MaterialLocalizationEsSv = class MaterialLocalizationEsSv extends generated_material_localizations.MaterialLocalizationEs {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEsSv.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyChannelDown() {
      return "Canal anterior";
    }
    get keyboardKeyChannelUp() {
      return "Canal siguiente";
    }
    get keyboardKeyCapsLock() {
      return "Bloqueo de mayúscula";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyNumLock() {
      return "Bloqueo numérico";
    }
    get keyboardKeyPageDown() {
      return "AvPág";
    }
    get keyboardKeySpace() {
      return "Barra espaciadora";
    }
    get keyboardKeyScrollLock() {
      return "Bloqueo de desplazamiento";
    }
    get keyboardKeyPrintScreen() {
      return "Imprimir pantalla";
    }
    get keyboardKeyPowerOff() {
      return "Apagar";
    }
    get keyboardKeyPower() {
      return "Encender";
    }
    get keyboardKeyPageUp() {
      return "RePág";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get licensesPackageDetailTextOne() {
      return "1 licencia";
    }
    get timePickerInputHelpText() {
      return "INGRESAR HORA";
    }
    get invalidTimeLabel() {
      return "Ingresa una hora válida";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licencias";
    }
    get inputTimeModeButtonLabel() {
      return "Cambiar al modo de entrada de texto";
    }
    get dateInputLabel() {
      return "Ingresar fecha";
    }
    get calendarModeButtonLabel() {
      return "Cambiar al calendario";
    }
    get dateRangePickerHelpText() {
      return "SELECCIONAR PERÍODO";
    }
    get dateOutOfRangeLabel() {
      return "Fuera de rango";
    }
    get invalidDateRangeLabel() {
      return "El rango no es válido.";
    }
    get invalidDateFormatLabel() {
      return "El formato no es válido.";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Fecha de finalización: $fullDate";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Fecha de inicio: $fullDate";
    }
    get inputDateModeButtonLabel() {
      return "Cambiar a modo de entrada";
    }
    get unspecifiedDateRange() {
      return "Período";
    }
    get dateHelpText() {
      return "dd/mm/aaaa";
    }
    get reorderItemToStart() {
      return "Mover al inicio";
    }
    get modalBarrierDismissLabel() {
      return "Descartar";
    }
    get signedInLabel() {
      return "Cuenta con la que accediste";
    }
    get openAppDrawerTooltip() {
      return "Abrir menú de navegación";
    }
    get deleteButtonTooltip() {
      return "Borrar";
    }
    get nextMonthTooltip() {
      return "Próximo mes";
    }
    get nextPageTooltip() {
      return "Próxima página";
    }
    get aboutListTileTitleRaw() {
      return "Acerca de $applicationName";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow de $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow de aproximadamente $rowCount";
    }
    get selectedRowCountTitleOne() {
      return "Se seleccionó 1 elemento";
    }
    get selectedRowCountTitleOther() {
      return "Se seleccionaron $selectedRowCount elementos";
    }
    get anteMeridiemAbbreviation() {
      return "a.m.";
    }
    get postMeridiemAbbreviation() {
      return "p.m.";
    }
    get dialogLabel() {
      return "Diálogo";
    }
    get expandedIconTapHint() {
      return "Contraer";
    }
    get collapsedIconTapHint() {
      return "Expandir";
    }
  };
  (generated_material_localizations.MaterialLocalizationEsSv.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "es_SV";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEsSv.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEsSv.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEsSv);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEsSv);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEsSv, I[2]);
  generated_material_localizations.MaterialLocalizationEsUs = class MaterialLocalizationEsUs extends generated_material_localizations.MaterialLocalizationEs {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEsUs.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyChannelDown() {
      return "Canal anterior";
    }
    get keyboardKeyChannelUp() {
      return "Canal siguiente";
    }
    get keyboardKeyCapsLock() {
      return "Bloqueo de mayúscula";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyNumLock() {
      return "Bloqueo numérico";
    }
    get keyboardKeyPageDown() {
      return "AvPág";
    }
    get keyboardKeySpace() {
      return "Barra espaciadora";
    }
    get keyboardKeyScrollLock() {
      return "Bloqueo de desplazamiento";
    }
    get keyboardKeyPrintScreen() {
      return "Imprimir pantalla";
    }
    get keyboardKeyPowerOff() {
      return "Apagar";
    }
    get keyboardKeyPower() {
      return "Encender";
    }
    get keyboardKeyPageUp() {
      return "RePág";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get licensesPackageDetailTextOne() {
      return "1 licencia";
    }
    get timePickerInputHelpText() {
      return "INGRESAR HORA";
    }
    get invalidTimeLabel() {
      return "Ingresa una hora válida";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licencias";
    }
    get inputTimeModeButtonLabel() {
      return "Cambiar al modo de entrada de texto";
    }
    get dateInputLabel() {
      return "Ingresar fecha";
    }
    get calendarModeButtonLabel() {
      return "Cambiar al calendario";
    }
    get dateRangePickerHelpText() {
      return "SELECCIONAR PERÍODO";
    }
    get dateOutOfRangeLabel() {
      return "Fuera de rango";
    }
    get invalidDateRangeLabel() {
      return "El rango no es válido.";
    }
    get invalidDateFormatLabel() {
      return "El formato no es válido.";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Fecha de finalización: $fullDate";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Fecha de inicio: $fullDate";
    }
    get inputDateModeButtonLabel() {
      return "Cambiar a modo de entrada";
    }
    get unspecifiedDateRange() {
      return "Período";
    }
    get dateHelpText() {
      return "dd/mm/aaaa";
    }
    get reorderItemToStart() {
      return "Mover al inicio";
    }
    get modalBarrierDismissLabel() {
      return "Descartar";
    }
    get signedInLabel() {
      return "Cuenta con la que accediste";
    }
    get deleteButtonTooltip() {
      return "Borrar";
    }
    get nextMonthTooltip() {
      return "Próximo mes";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow de aproximadamente $rowCount";
    }
    get aboutListTileTitleRaw() {
      return "Acerca de $applicationName";
    }
    get nextPageTooltip() {
      return "Próxima página";
    }
    get openAppDrawerTooltip() {
      return "Abrir menú de navegación";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow de $rowCount";
    }
    get selectedRowCountTitleOne() {
      return "Se seleccionó 1 elemento";
    }
    get selectedRowCountTitleOther() {
      return "Se seleccionaron $selectedRowCount elementos";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.h_colon_mm_space_a;
    }
    get anteMeridiemAbbreviation() {
      return "a.m.";
    }
    get postMeridiemAbbreviation() {
      return "p.m.";
    }
    get dialogLabel() {
      return "Diálogo";
    }
    get expandedIconTapHint() {
      return "Contraer";
    }
    get collapsedIconTapHint() {
      return "Expandir";
    }
  };
  (generated_material_localizations.MaterialLocalizationEsUs.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "es_US";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEsUs.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEsUs.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEsUs);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEsUs);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEsUs, I[2]);
  generated_material_localizations.MaterialLocalizationEsUy = class MaterialLocalizationEsUy extends generated_material_localizations.MaterialLocalizationEs {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEsUy.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyChannelDown() {
      return "Canal anterior";
    }
    get keyboardKeyChannelUp() {
      return "Canal siguiente";
    }
    get keyboardKeyCapsLock() {
      return "Bloqueo de mayúscula";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyNumLock() {
      return "Bloqueo numérico";
    }
    get keyboardKeyPageDown() {
      return "AvPág";
    }
    get keyboardKeySpace() {
      return "Barra espaciadora";
    }
    get keyboardKeyScrollLock() {
      return "Bloqueo de desplazamiento";
    }
    get keyboardKeyPrintScreen() {
      return "Imprimir pantalla";
    }
    get keyboardKeyPowerOff() {
      return "Apagar";
    }
    get keyboardKeyPower() {
      return "Encender";
    }
    get keyboardKeyPageUp() {
      return "RePág";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get licensesPackageDetailTextOne() {
      return "1 licencia";
    }
    get timePickerInputHelpText() {
      return "INGRESAR HORA";
    }
    get invalidTimeLabel() {
      return "Ingresa una hora válida";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licencias";
    }
    get inputTimeModeButtonLabel() {
      return "Cambiar al modo de entrada de texto";
    }
    get dateInputLabel() {
      return "Ingresar fecha";
    }
    get calendarModeButtonLabel() {
      return "Cambiar al calendario";
    }
    get dateRangePickerHelpText() {
      return "SELECCIONAR PERÍODO";
    }
    get dateOutOfRangeLabel() {
      return "Fuera de rango";
    }
    get invalidDateRangeLabel() {
      return "El rango no es válido.";
    }
    get invalidDateFormatLabel() {
      return "El formato no es válido.";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Fecha de finalización: $fullDate";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Fecha de inicio: $fullDate";
    }
    get inputDateModeButtonLabel() {
      return "Cambiar a modo de entrada";
    }
    get unspecifiedDateRange() {
      return "Período";
    }
    get dateHelpText() {
      return "dd/mm/aaaa";
    }
    get reorderItemToStart() {
      return "Mover al inicio";
    }
    get modalBarrierDismissLabel() {
      return "Descartar";
    }
    get signedInLabel() {
      return "Cuenta con la que accediste";
    }
    get openAppDrawerTooltip() {
      return "Abrir menú de navegación";
    }
    get deleteButtonTooltip() {
      return "Borrar";
    }
    get nextMonthTooltip() {
      return "Próximo mes";
    }
    get nextPageTooltip() {
      return "Próxima página";
    }
    get aboutListTileTitleRaw() {
      return "Acerca de $applicationName";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow de $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow de aproximadamente $rowCount";
    }
    get selectedRowCountTitleOne() {
      return "Se seleccionó 1 elemento";
    }
    get selectedRowCountTitleOther() {
      return "Se seleccionaron $selectedRowCount elementos";
    }
    get anteMeridiemAbbreviation() {
      return "a.m.";
    }
    get postMeridiemAbbreviation() {
      return "p.m.";
    }
    get dialogLabel() {
      return "Diálogo";
    }
    get expandedIconTapHint() {
      return "Contraer";
    }
    get collapsedIconTapHint() {
      return "Expandir";
    }
  };
  (generated_material_localizations.MaterialLocalizationEsUy.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "es_UY";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEsUy.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEsUy.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEsUy);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEsUy);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEsUy, I[2]);
  generated_material_localizations.MaterialLocalizationEsVe = class MaterialLocalizationEsVe extends generated_material_localizations.MaterialLocalizationEs {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEsVe.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyChannelDown() {
      return "Canal anterior";
    }
    get keyboardKeyChannelUp() {
      return "Canal siguiente";
    }
    get keyboardKeyCapsLock() {
      return "Bloqueo de mayúscula";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyNumLock() {
      return "Bloqueo numérico";
    }
    get keyboardKeyPageDown() {
      return "AvPág";
    }
    get keyboardKeySpace() {
      return "Barra espaciadora";
    }
    get keyboardKeyScrollLock() {
      return "Bloqueo de desplazamiento";
    }
    get keyboardKeyPrintScreen() {
      return "Imprimir pantalla";
    }
    get keyboardKeyPowerOff() {
      return "Apagar";
    }
    get keyboardKeyPower() {
      return "Encender";
    }
    get keyboardKeyPageUp() {
      return "RePág";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get licensesPackageDetailTextOne() {
      return "1 licencia";
    }
    get timePickerInputHelpText() {
      return "INGRESAR HORA";
    }
    get invalidTimeLabel() {
      return "Ingresa una hora válida";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licencias";
    }
    get inputTimeModeButtonLabel() {
      return "Cambiar al modo de entrada de texto";
    }
    get dateInputLabel() {
      return "Ingresar fecha";
    }
    get calendarModeButtonLabel() {
      return "Cambiar al calendario";
    }
    get dateRangePickerHelpText() {
      return "SELECCIONAR PERÍODO";
    }
    get dateOutOfRangeLabel() {
      return "Fuera de rango";
    }
    get invalidDateRangeLabel() {
      return "El rango no es válido.";
    }
    get invalidDateFormatLabel() {
      return "El formato no es válido.";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Fecha de finalización: $fullDate";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Fecha de inicio: $fullDate";
    }
    get inputDateModeButtonLabel() {
      return "Cambiar a modo de entrada";
    }
    get unspecifiedDateRange() {
      return "Período";
    }
    get dateHelpText() {
      return "dd/mm/aaaa";
    }
    get reorderItemToStart() {
      return "Mover al inicio";
    }
    get modalBarrierDismissLabel() {
      return "Descartar";
    }
    get signedInLabel() {
      return "Cuenta con la que accediste";
    }
    get openAppDrawerTooltip() {
      return "Abrir menú de navegación";
    }
    get deleteButtonTooltip() {
      return "Borrar";
    }
    get nextMonthTooltip() {
      return "Próximo mes";
    }
    get nextPageTooltip() {
      return "Próxima página";
    }
    get aboutListTileTitleRaw() {
      return "Acerca de $applicationName";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow de $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow de aproximadamente $rowCount";
    }
    get selectedRowCountTitleOne() {
      return "Se seleccionó 1 elemento";
    }
    get selectedRowCountTitleOther() {
      return "Se seleccionaron $selectedRowCount elementos";
    }
    get anteMeridiemAbbreviation() {
      return "a.m.";
    }
    get postMeridiemAbbreviation() {
      return "p.m.";
    }
    get dialogLabel() {
      return "Diálogo";
    }
    get expandedIconTapHint() {
      return "Contraer";
    }
    get collapsedIconTapHint() {
      return "Expandir";
    }
  };
  (generated_material_localizations.MaterialLocalizationEsVe.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "es_VE";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEsVe.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEsVe.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEsVe);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEsVe);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEsVe, I[2]);
  generated_material_localizations.MaterialLocalizationEt = class MaterialLocalizationEt extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEt.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Teave rakenduse $applicationName kohta";
    }
    get alertDialogLabel() {
      return "Märguanne";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "Tagasi";
    }
    get calendarModeButtonLabel() {
      return "Kalendrile lülitumine";
    }
    get cancelButtonLabel() {
      return "TÜHISTA";
    }
    get closeButtonLabel() {
      return "SULE";
    }
    get closeButtonTooltip() {
      return "Sule";
    }
    get collapsedIconTapHint() {
      return "Laienda";
    }
    get continueButtonLabel() {
      return "JÄTKA";
    }
    get copyButtonLabel() {
      return "Kopeeri";
    }
    get cutButtonLabel() {
      return "Lõika";
    }
    get dateHelpText() {
      return "pp.kk.aaaa";
    }
    get dateInputLabel() {
      return "Sisestage kuupäev";
    }
    get dateOutOfRangeLabel() {
      return "Vahemikust väljas.";
    }
    get datePickerHelpText() {
      return "VALIGE KUUPÄEV";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Lõppkuupäev: $fullDate";
    }
    get dateRangeEndLabel() {
      return "Lõppkuupäev";
    }
    get dateRangePickerHelpText() {
      return "VALIGE VAHEMIK";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Alguskuupäev: $fullDate";
    }
    get dateRangeStartLabel() {
      return "Alguskuupäev";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Kustuta";
    }
    get dialModeButtonLabel() {
      return "Lülitumine valikuketta režiimile";
    }
    get dialogLabel() {
      return "Dialoog";
    }
    get drawerLabel() {
      return "Navigeerimismenüü";
    }
    get expandedIconTapHint() {
      return "Ahenda";
    }
    get firstPageTooltip() {
      return "Esimene leht";
    }
    get hideAccountsLabel() {
      return "Peida kontod";
    }
    get inputDateModeButtonLabel() {
      return "Sisestusrežiimile lülitumine";
    }
    get inputTimeModeButtonLabel() {
      return "Lülitumine tekstisisestusrežiimile";
    }
    get invalidDateFormatLabel() {
      return "Sobimatu vorming.";
    }
    get invalidDateRangeLabel() {
      return "Sobimatu vahemik.";
    }
    get invalidTimeLabel() {
      return "Sisestage sobiv kellaaeg";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Tagasilüke";
    }
    get keyboardKeyCapsLock() {
      return "Suurtähelukk";
    }
    get keyboardKeyChannelDown() {
      return "Kanal madalamale";
    }
    get keyboardKeyChannelUp() {
      return "Kanal kõrgemale";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Väljuta";
    }
    get keyboardKeyEnd() {
      return "Lõpp";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Avaleht";
    }
    get keyboardKeyInsert() {
      return "Sisesta";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Käsk";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Numbrilukk";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "Lehe võrra alla";
    }
    get keyboardKeyPageUp() {
      return "Lehe võrra üles";
    }
    get keyboardKeyPower() {
      return "Toide";
    }
    get keyboardKeyPowerOff() {
      return "Väljalülitamine";
    }
    get keyboardKeyPrintScreen() {
      return "Jäädvusta ekraanikuva";
    }
    get keyboardKeyScrollLock() {
      return "Kerimislukk";
    }
    get keyboardKeySelect() {
      return "Vali";
    }
    get keyboardKeySpace() {
      return "Tühik";
    }
    get lastPageTooltip() {
      return "Viimane leht";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 litsents";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount litsentsi";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Litsentsid";
    }
    get menuBarMenuLabel() {
      return "Menüüriba menüü";
    }
    get modalBarrierDismissLabel() {
      return "Loobu";
    }
    get moreButtonTooltip() {
      return "Rohkem";
    }
    get nextMonthTooltip() {
      return "Järgmine kuu";
    }
    get nextPageTooltip() {
      return "Järgmine leht";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Ava navigeerimismenüü";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow $rowCount-st";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow umbes $rowCount-st";
    }
    get pasteButtonLabel() {
      return "Kleebi";
    }
    get popupMenuLabel() {
      return "Hüpikmenüü";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "Eelmine kuu";
    }
    get previousPageTooltip() {
      return "Eelmine leht";
    }
    get refreshIndicatorSemanticLabel() {
      return "Värskendamine";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "Jäänud on 1 tähemärk";
    }
    get remainingTextFieldCharacterCountOther() {
      return "Jäänud on $remainingCount tähemärki";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Teisalda alla";
    }
    get reorderItemLeft() {
      return "Teisalda vasakule";
    }
    get reorderItemRight() {
      return "Teisalda paremale";
    }
    get reorderItemToEnd() {
      return "Teisalda lõppu";
    }
    get reorderItemToStart() {
      return "Teisalda algusesse";
    }
    get reorderItemUp() {
      return "Teisalda üles";
    }
    get rowsPerPageTitle() {
      return "Ridu lehe kohta:";
    }
    get saveButtonLabel() {
      return "SALVESTA";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Otsing";
    }
    get selectAllButtonLabel() {
      return "Vali kõik";
    }
    get selectYearSemanticsLabel() {
      return "Valige aasta";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "Valitud on 1 üksus";
    }
    get selectedRowCountTitleOther() {
      return "Valitud on $selectedRowCount üksust";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Kuva kontod";
    }
    get showMenuTooltip() {
      return "Kuva menüü";
    }
    get signedInLabel() {
      return "Sisse logitud";
    }
    get tabLabelRaw() {
      return "$tabIndex. vahekaart $tabCount-st";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "VALIGE AEG";
    }
    get timePickerHourLabel() {
      return "Tund";
    }
    get timePickerHourModeAnnouncement() {
      return "Tundide valimine";
    }
    get timePickerInputHelpText() {
      return "SISESTAGE AEG";
    }
    get timePickerMinuteLabel() {
      return "Minut";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Minutite valimine";
    }
    get unspecifiedDate() {
      return "Kuupäev";
    }
    get unspecifiedDateRange() {
      return "Kuupäevavahemik";
    }
    get viewLicensesButtonLabel() {
      return "KUVA LITSENTSID";
    }
  };
  (generated_material_localizations.MaterialLocalizationEt.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "et";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEt.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEt.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEt);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEt);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationEt, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationEt.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEt, I[2]);
  generated_material_localizations.MaterialLocalizationEu = class MaterialLocalizationEu extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationEu.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName aplikazioari buruz";
    }
    get alertDialogLabel() {
      return "Alerta";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "Atzera";
    }
    get calendarModeButtonLabel() {
      return "Aldatu egutegiaren modura";
    }
    get cancelButtonLabel() {
      return "UTZI";
    }
    get closeButtonLabel() {
      return "ITXI";
    }
    get closeButtonTooltip() {
      return "Itxi";
    }
    get collapsedIconTapHint() {
      return "Zabaldu";
    }
    get continueButtonLabel() {
      return "EGIN AURRERA";
    }
    get copyButtonLabel() {
      return "Kopiatu";
    }
    get cutButtonLabel() {
      return "Ebaki";
    }
    get dateHelpText() {
      return "uuuu/hh/ee";
    }
    get dateInputLabel() {
      return "Idatzi data";
    }
    get dateOutOfRangeLabel() {
      return "Barrutitik kanpo.";
    }
    get datePickerHelpText() {
      return "HAUTATU DATA";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Amaiera-data: $fullDate";
    }
    get dateRangeEndLabel() {
      return "Amaiera-data";
    }
    get dateRangePickerHelpText() {
      return "HAUTATU BARRUTIA";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Hasiera-data: $fullDate";
    }
    get dateRangeStartLabel() {
      return "Hasiera-data";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "Ezabatu";
    }
    get dialModeButtonLabel() {
      return "Aldatu esfera hautatzeko modura";
    }
    get dialogLabel() {
      return "Leihoa";
    }
    get drawerLabel() {
      return "Nabigazio-menua";
    }
    get expandedIconTapHint() {
      return "Tolestu";
    }
    get firstPageTooltip() {
      return "Lehenengo orria";
    }
    get hideAccountsLabel() {
      return "Ezkutatu kontuak";
    }
    get inputDateModeButtonLabel() {
      return "Aldatu datak aukeratzeko modura";
    }
    get inputTimeModeButtonLabel() {
      return "Aldatu testua idazteko modura";
    }
    get invalidDateFormatLabel() {
      return "Formatuak ez du balio.";
    }
    get invalidDateRangeLabel() {
      return "Tarteak ez du balio.";
    }
    get invalidTimeLabel() {
      return "Idatzi balio duen ordu bat";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "Alt Gr";
    }
    get keyboardKeyBackspace() {
      return "Atzera tekla";
    }
    get keyboardKeyCapsLock() {
      return "Blok Maius";
    }
    get keyboardKeyChannelDown() {
      return "Jaitsi kanal bat";
    }
    get keyboardKeyChannelUp() {
      return "Igo kanal bat";
    }
    get keyboardKeyControl() {
      return "Ktrl";
    }
    get keyboardKeyDelete() {
      return "Ezab";
    }
    get keyboardKeyEject() {
      return "Kanporatu";
    }
    get keyboardKeyEnd() {
      return "Amaiera";
    }
    get keyboardKeyEscape() {
      return "Ihes";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Hasi";
    }
    get keyboardKeyInsert() {
      return "Txertatu";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Komandoa";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Blok Zenb";
    }
    get keyboardKeyNumpad0() {
      return "Zenbakizko teklatuko 0";
    }
    get keyboardKeyNumpad1() {
      return "Zenbakizko teklatuko 1";
    }
    get keyboardKeyNumpad2() {
      return "Zenbakizko teklatuko 2";
    }
    get keyboardKeyNumpad3() {
      return "Zenbakizko teklatuko 3";
    }
    get keyboardKeyNumpad4() {
      return "Zenbakizko teklatuko 4";
    }
    get keyboardKeyNumpad5() {
      return "Zenbakizko teklatuko 5";
    }
    get keyboardKeyNumpad6() {
      return "Zenbakizko teklatuko 6";
    }
    get keyboardKeyNumpad7() {
      return "Zenbakizko teklatuko 7";
    }
    get keyboardKeyNumpad8() {
      return "Zenbakizko teklatuko 8";
    }
    get keyboardKeyNumpad9() {
      return "Zenbakizko teklatuko 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Zenbakizko teklatuko +";
    }
    get keyboardKeyNumpadComma() {
      return "Zenbakizko teklatuko ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Zenbakizko teklatuko .";
    }
    get keyboardKeyNumpadDivide() {
      return "Zenbakizko teklatuko /";
    }
    get keyboardKeyNumpadEnter() {
      return "Zenbakizko teklatuko Sartu";
    }
    get keyboardKeyNumpadEqual() {
      return "Zenbakizko teklatuko =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Zenbakizko teklatuko *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Zenbakizko teklatuko (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Zenbakizko teklatuko )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Zenbakizko teklatuko -";
    }
    get keyboardKeyPageDown() {
      return "OrBeh";
    }
    get keyboardKeyPageUp() {
      return "OrGo";
    }
    get keyboardKeyPower() {
      return "Piztu/Itzali";
    }
    get keyboardKeyPowerOff() {
      return "Itzali";
    }
    get keyboardKeyPrintScreen() {
      return "Inp pant";
    }
    get keyboardKeyScrollLock() {
      return "Blok Korr";
    }
    get keyboardKeySelect() {
      return "Hautatu";
    }
    get keyboardKeySpace() {
      return "Zuriune-barra";
    }
    get lastPageTooltip() {
      return "Azken orria";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 lizentzia";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount lizentzia";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Lizentziak";
    }
    get menuBarMenuLabel() {
      return "Menu-barraren menua";
    }
    get modalBarrierDismissLabel() {
      return "Baztertu";
    }
    get moreButtonTooltip() {
      return "Gehiago";
    }
    get nextMonthTooltip() {
      return "Hurrengo hilabetea";
    }
    get nextPageTooltip() {
      return "Hurrengo orria";
    }
    get okButtonLabel() {
      return "Ados";
    }
    get openAppDrawerTooltip() {
      return "Ireki nabigazio-menua";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow - $lastRow / $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow - $lastRow / $rowCount";
    }
    get pasteButtonLabel() {
      return "Itsatsi";
    }
    get popupMenuLabel() {
      return "Menu gainerakorra";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "Aurreko hilabetea";
    }
    get previousPageTooltip() {
      return "Aurreko orria";
    }
    get refreshIndicatorSemanticLabel() {
      return "Freskatu";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 karaktere geratzen da";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount karaktere geratzen dira";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "Eraman behera";
    }
    get reorderItemLeft() {
      return "Eraman ezkerrera";
    }
    get reorderItemRight() {
      return "Eraman eskuinera";
    }
    get reorderItemToEnd() {
      return "Eraman amaierara";
    }
    get reorderItemToStart() {
      return "Eraman hasierara";
    }
    get reorderItemUp() {
      return "Eraman gora";
    }
    get rowsPerPageTitle() {
      return "Errenkadak orriko:";
    }
    get saveButtonLabel() {
      return "GORDE";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Bilatu";
    }
    get selectAllButtonLabel() {
      return "Hautatu guztiak";
    }
    get selectYearSemanticsLabel() {
      return "Hautatu urtea";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 elementu hautatu da";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount elementu hautatu dira";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Erakutsi kontuak";
    }
    get showMenuTooltip() {
      return "Erakutsi menua";
    }
    get signedInLabel() {
      return "Hasi da saioa";
    }
    get tabLabelRaw() {
      return "$tabIndex/$tabCount fitxa";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "HAUTATU ORDUA";
    }
    get timePickerHourLabel() {
      return "Ordua";
    }
    get timePickerHourModeAnnouncement() {
      return "Hautatu orduak";
    }
    get timePickerInputHelpText() {
      return "IDATZI ORDUA";
    }
    get timePickerMinuteLabel() {
      return "Minutua";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Hautatu minutuak";
    }
    get unspecifiedDate() {
      return "Data";
    }
    get unspecifiedDateRange() {
      return "Data tartea";
    }
    get viewLicensesButtonLabel() {
      return "IKUSI LIZENTZIAK";
    }
  };
  (generated_material_localizations.MaterialLocalizationEu.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "eu";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationEu.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationEu.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationEu);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationEu);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationEu, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationEu.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationEu, I[2]);
  generated_material_localizations.MaterialLocalizationFa = class MaterialLocalizationFa extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationFa.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "درباره $applicationName";
    }
    get alertDialogLabel() {
      return "هشدار";
    }
    get anteMeridiemAbbreviation() {
      return "ق.ظ.";
    }
    get backButtonTooltip() {
      return "برگشت";
    }
    get calendarModeButtonLabel() {
      return "رفتن به تقویم";
    }
    get cancelButtonLabel() {
      return "لغو";
    }
    get closeButtonLabel() {
      return "بستن";
    }
    get closeButtonTooltip() {
      return "بستن";
    }
    get collapsedIconTapHint() {
      return "بزرگ کردن";
    }
    get continueButtonLabel() {
      return "ادامه";
    }
    get copyButtonLabel() {
      return "کپی";
    }
    get cutButtonLabel() {
      return "برش";
    }
    get dateHelpText() {
      return "روز/ماه/سال";
    }
    get dateInputLabel() {
      return "تاریخ را وارد کنید";
    }
    get dateOutOfRangeLabel() {
      return "خارج از محدوده.";
    }
    get datePickerHelpText() {
      return "انتخاب تاریخ";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "تاریخ پایان $fullDate";
    }
    get dateRangeEndLabel() {
      return "تاریخ پایان";
    }
    get dateRangePickerHelpText() {
      return "انتخاب محدوده";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "تاریخ شروع $fullDate";
    }
    get dateRangeStartLabel() {
      return "تاریخ شروع";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "حذف";
    }
    get dialModeButtonLabel() {
      return "رفتن به حالت انتخابگر صفحه ساعت";
    }
    get dialogLabel() {
      return "کادر گفتگو";
    }
    get drawerLabel() {
      return "منوی پیمایش";
    }
    get expandedIconTapHint() {
      return "کوچک کردن";
    }
    get firstPageTooltip() {
      return "صفحه اول";
    }
    get hideAccountsLabel() {
      return "پنهان کردن حساب‌ها";
    }
    get inputDateModeButtonLabel() {
      return "رفتن به ورودی";
    }
    get inputTimeModeButtonLabel() {
      return "رفتن به حالت ورودی نوشتاری";
    }
    get invalidDateFormatLabel() {
      return "قالب نامعتبر است.";
    }
    get invalidDateRangeLabel() {
      return "محدوده نامعتبر است.";
    }
    get invalidTimeLabel() {
      return "زمان معتبری وارد کنید";
    }
    get keyboardKeyAlt() {
      return "دگرساز";
    }
    get keyboardKeyAltGraph() {
      return "دگرساز راست";
    }
    get keyboardKeyBackspace() {
      return "پس‌بَر";
    }
    get keyboardKeyCapsLock() {
      return "حالت حروف بزرگ";
    }
    get keyboardKeyChannelDown() {
      return "کانال پایین";
    }
    get keyboardKeyChannelUp() {
      return "کانال بالا";
    }
    get keyboardKeyControl() {
      return "مهار";
    }
    get keyboardKeyDelete() {
      return "حذف";
    }
    get keyboardKeyEject() {
      return "خارج کردن";
    }
    get keyboardKeyEnd() {
      return "پایان";
    }
    get keyboardKeyEscape() {
      return "گریز";
    }
    get keyboardKeyFn() {
      return "عملکرد";
    }
    get keyboardKeyHome() {
      return "صفحه اصلی";
    }
    get keyboardKeyInsert() {
      return "درج";
    }
    get keyboardKeyMeta() {
      return "متا";
    }
    get keyboardKeyMetaMacOs() {
      return "فرمان";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "قفل اعداد";
    }
    get keyboardKeyNumpad0() {
      return "عدد ۰";
    }
    get keyboardKeyNumpad1() {
      return "عدد ۱";
    }
    get keyboardKeyNumpad2() {
      return "عدد ۲";
    }
    get keyboardKeyNumpad3() {
      return "عدد ۳";
    }
    get keyboardKeyNumpad4() {
      return "عدد ۴";
    }
    get keyboardKeyNumpad5() {
      return "عدد ۵";
    }
    get keyboardKeyNumpad6() {
      return "عدد ۶";
    }
    get keyboardKeyNumpad7() {
      return "عدد ۷";
    }
    get keyboardKeyNumpad8() {
      return "عدد ۸";
    }
    get keyboardKeyNumpad9() {
      return "عدد ۹";
    }
    get keyboardKeyNumpadAdd() {
      return "عدد +";
    }
    get keyboardKeyNumpadComma() {
      return "عدد ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "عدد .";
    }
    get keyboardKeyNumpadDivide() {
      return "عدد /";
    }
    get keyboardKeyNumpadEnter() {
      return "ورود اعداد";
    }
    get keyboardKeyNumpadEqual() {
      return "عدد =";
    }
    get keyboardKeyNumpadMultiply() {
      return "عدد *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "عدد (";
    }
    get keyboardKeyNumpadParenRight() {
      return "عدد )";
    }
    get keyboardKeyNumpadSubtract() {
      return "عدد -";
    }
    get keyboardKeyPageDown() {
      return "صفحه پایین";
    }
    get keyboardKeyPageUp() {
      return "صفحه بالا";
    }
    get keyboardKeyPower() {
      return "روشن/ خاموش";
    }
    get keyboardKeyPowerOff() {
      return "خاموش کردن";
    }
    get keyboardKeyPrintScreen() {
      return "چاپ صفحه";
    }
    get keyboardKeyScrollLock() {
      return "قفل پیمایش";
    }
    get keyboardKeySelect() {
      return "انتخاب";
    }
    get keyboardKeySpace() {
      return "فاصله";
    }
    get lastPageTooltip() {
      return "صفحه آخر";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "۱ پروانه";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount پروانه";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "مجوزها";
    }
    get menuBarMenuLabel() {
      return "منوی نوار منو";
    }
    get modalBarrierDismissLabel() {
      return "نپذیرفتن";
    }
    get moreButtonTooltip() {
      return "بیشتر";
    }
    get nextMonthTooltip() {
      return "ماه بعد";
    }
    get nextPageTooltip() {
      return "صفحه بعد";
    }
    get okButtonLabel() {
      return "تأیید";
    }
    get openAppDrawerTooltip() {
      return "باز کردن منوی پیمایش";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow از $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow از حدود $rowCount";
    }
    get pasteButtonLabel() {
      return "جای‌گذاری";
    }
    get popupMenuLabel() {
      return "منوی بازشو";
    }
    get postMeridiemAbbreviation() {
      return "ب.ظ.";
    }
    get previousMonthTooltip() {
      return "ماه قبل";
    }
    get previousPageTooltip() {
      return "صفحه قبل";
    }
    get refreshIndicatorSemanticLabel() {
      return "بازخوانی";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "۱ نویسه باقی مانده است";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount نویسه باقی مانده است";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "انتقال به پایین";
    }
    get reorderItemLeft() {
      return "انتقال به راست";
    }
    get reorderItemRight() {
      return "انتقال به چپ";
    }
    get reorderItemToEnd() {
      return "انتقال به انتها";
    }
    get reorderItemToStart() {
      return "انتقال به ابتدا";
    }
    get reorderItemUp() {
      return "انتقال به بالا";
    }
    get rowsPerPageTitle() {
      return "ردیف در هر صفحه:";
    }
    get saveButtonLabel() {
      return "ذخیره";
    }
    get scriptCategory() {
      return typography.ScriptCategory.tall;
    }
    get searchFieldLabel() {
      return "جستجو";
    }
    get selectAllButtonLabel() {
      return "انتخاب همه";
    }
    get selectYearSemanticsLabel() {
      return "انتخاب سال";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "۱ مورد انتخاب شد";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount مورد انتخاب شدند";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "نشان دادن حساب‌ها";
    }
    get showMenuTooltip() {
      return "نمایش منو";
    }
    get signedInLabel() {
      return "واردشده به سیستم";
    }
    get tabLabelRaw() {
      return "برگه $tabIndex از $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "انتخاب زمان";
    }
    get timePickerHourLabel() {
      return "ساعت";
    }
    get timePickerHourModeAnnouncement() {
      return "انتخاب ساعت";
    }
    get timePickerInputHelpText() {
      return "زمان را وارد کنید";
    }
    get timePickerMinuteLabel() {
      return "دقیقه";
    }
    get timePickerMinuteModeAnnouncement() {
      return "انتخاب دقیقه";
    }
    get unspecifiedDate() {
      return "تاریخ";
    }
    get unspecifiedDateRange() {
      return "محدوده تاریخ";
    }
    get viewLicensesButtonLabel() {
      return "مشاهده مجوزها";
    }
  };
  (generated_material_localizations.MaterialLocalizationFa.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "fa";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationFa.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationFa.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationFa);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationFa);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationFa, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationFa.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationFa, I[2]);
  generated_material_localizations.MaterialLocalizationFi = class MaterialLocalizationFi extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationFi.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Tietoja: $applicationName";
    }
    get alertDialogLabel() {
      return "Ilmoitus";
    }
    get anteMeridiemAbbreviation() {
      return "ap";
    }
    get backButtonTooltip() {
      return "Takaisin";
    }
    get calendarModeButtonLabel() {
      return "Vaihda kalenteriin";
    }
    get cancelButtonLabel() {
      return "PERUUTA";
    }
    get closeButtonLabel() {
      return "SULJE";
    }
    get closeButtonTooltip() {
      return "Sulje";
    }
    get collapsedIconTapHint() {
      return "Laajenna";
    }
    get continueButtonLabel() {
      return "JATKA";
    }
    get copyButtonLabel() {
      return "Kopioi";
    }
    get cutButtonLabel() {
      return "Leikkaa";
    }
    get dateHelpText() {
      return "pp/kk/vvvv";
    }
    get dateInputLabel() {
      return "Lisää päivämäärä";
    }
    get dateOutOfRangeLabel() {
      return "Päivämäärä ei kelpaa";
    }
    get datePickerHelpText() {
      return "VALITSE PÄIVÄMÄÄRÄ";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Päättymispäivä $fullDate";
    }
    get dateRangeEndLabel() {
      return "Päättymispäivä";
    }
    get dateRangePickerHelpText() {
      return "VALITSE PÄIVÄMÄÄRÄVÄLI";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Alkamispäivä $fullDate";
    }
    get dateRangeStartLabel() {
      return "Alkamispäivä";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "Poista";
    }
    get dialModeButtonLabel() {
      return "Valitse kellotauluvalitsin";
    }
    get dialogLabel() {
      return "Valintaikkuna";
    }
    get drawerLabel() {
      return "Navigointivalikko";
    }
    get expandedIconTapHint() {
      return "Tiivistä";
    }
    get firstPageTooltip() {
      return "Ensimmäinen sivu";
    }
    get hideAccountsLabel() {
      return "Piilota tilit";
    }
    get inputDateModeButtonLabel() {
      return "Vaihda tekstinsyöttöön";
    }
    get inputTimeModeButtonLabel() {
      return "Valitse syöttötavaksi teksti";
    }
    get invalidDateFormatLabel() {
      return "Virheellinen muoto";
    }
    get invalidDateRangeLabel() {
      return "Virheellinen päivämääräväli";
    }
    get invalidTimeLabel() {
      return "Lisää kelvollinen aika";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Askelpalautin";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Edellinen kanava";
    }
    get keyboardKeyChannelUp() {
      return "Seuraava kanava";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Poista";
    }
    get keyboardKeyEnd() {
      return "Lopeta";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Etusivu";
    }
    get keyboardKeyInsert() {
      return "Lisää";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Komento";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Virta";
    }
    get keyboardKeyPowerOff() {
      return "Virta pois";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Valitse";
    }
    get keyboardKeySpace() {
      return "Välilyönti";
    }
    get lastPageTooltip() {
      return "Viimeinen sivu";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 lisenssi";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount lisenssiä";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Lisenssit";
    }
    get menuBarMenuLabel() {
      return "Valikkopalkki";
    }
    get modalBarrierDismissLabel() {
      return "Ohita";
    }
    get moreButtonTooltip() {
      return "Lisää";
    }
    get nextMonthTooltip() {
      return "Seuraava kuukausi";
    }
    get nextPageTooltip() {
      return "Seuraava sivu";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Avaa navigointivalikko";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow/$rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow/~$rowCount";
    }
    get pasteButtonLabel() {
      return "Liitä";
    }
    get popupMenuLabel() {
      return "Ponnahdusvalikko";
    }
    get postMeridiemAbbreviation() {
      return "ip";
    }
    get previousMonthTooltip() {
      return "Edellinen kuukausi";
    }
    get previousPageTooltip() {
      return "Edellinen sivu";
    }
    get refreshIndicatorSemanticLabel() {
      return "Päivitys";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 merkki jäljellä";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount merkkiä jäljellä";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Siirrä alas";
    }
    get reorderItemLeft() {
      return "Siirrä vasemmalle";
    }
    get reorderItemRight() {
      return "Siirrä oikealle";
    }
    get reorderItemToEnd() {
      return "Siirrä loppuun";
    }
    get reorderItemToStart() {
      return "Siirrä alkuun";
    }
    get reorderItemUp() {
      return "Siirrä ylös";
    }
    get rowsPerPageTitle() {
      return "Riviä/sivu:";
    }
    get saveButtonLabel() {
      return "TALLENNA";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Haku";
    }
    get selectAllButtonLabel() {
      return "Valitse kaikki";
    }
    get selectYearSemanticsLabel() {
      return "Valitse vuosi";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 kohde valittu";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount kohdetta valittu";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Näytä tilit";
    }
    get showMenuTooltip() {
      return "Näytä valikko";
    }
    get signedInLabel() {
      return "Kirjautunut sisään";
    }
    get tabLabelRaw() {
      return "Välilehti $tabIndex/$tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "VALITSE AIKA";
    }
    get timePickerHourLabel() {
      return "Tunti";
    }
    get timePickerHourModeAnnouncement() {
      return "Valitse tunnit";
    }
    get timePickerInputHelpText() {
      return "LISÄÄ AIKA";
    }
    get timePickerMinuteLabel() {
      return "Minuutti";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Valitse minuutit";
    }
    get unspecifiedDate() {
      return "Päivämäärä";
    }
    get unspecifiedDateRange() {
      return "Ajanjakso";
    }
    get viewLicensesButtonLabel() {
      return "NÄYTÄ KÄYTTÖOIKEUDET";
    }
  };
  (generated_material_localizations.MaterialLocalizationFi.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "fi";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationFi.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationFi.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationFi);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationFi);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationFi, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationFi.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationFi, I[2]);
  generated_material_localizations.MaterialLocalizationFil = class MaterialLocalizationFil extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationFil.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Tungkol sa $applicationName";
    }
    get alertDialogLabel() {
      return "Alerto";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "Bumalik";
    }
    get calendarModeButtonLabel() {
      return "Lumipat sa kalendaryo";
    }
    get cancelButtonLabel() {
      return "KANSELAHIN";
    }
    get closeButtonLabel() {
      return "ISARA";
    }
    get closeButtonTooltip() {
      return "Isara";
    }
    get collapsedIconTapHint() {
      return "I-expand";
    }
    get continueButtonLabel() {
      return "MAGPATULOY";
    }
    get copyButtonLabel() {
      return "Kopyahin";
    }
    get cutButtonLabel() {
      return "I-cut";
    }
    get dateHelpText() {
      return "mm/dd/yyyy";
    }
    get dateInputLabel() {
      return "Ilagay ang Petsa";
    }
    get dateOutOfRangeLabel() {
      return "Wala sa hanay.";
    }
    get datePickerHelpText() {
      return "PUMILI NG PETSA";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Petsa ng pagtatapos $fullDate";
    }
    get dateRangeEndLabel() {
      return "Petsa ng Pagtatapos";
    }
    get dateRangePickerHelpText() {
      return "PUMILI NG HANAY";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Petsa ng pagsisimula $fullDate";
    }
    get dateRangeStartLabel() {
      return "Petsa ng Pagsisimula";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "I-delete";
    }
    get dialModeButtonLabel() {
      return "Lumipat sa dial picker mode";
    }
    get dialogLabel() {
      return "Dialog";
    }
    get drawerLabel() {
      return "Menu ng navigation";
    }
    get expandedIconTapHint() {
      return "I-collapse";
    }
    get firstPageTooltip() {
      return "Unang page";
    }
    get hideAccountsLabel() {
      return "Itago ang mga account";
    }
    get inputDateModeButtonLabel() {
      return "Lumipat sa input";
    }
    get inputTimeModeButtonLabel() {
      return "Lumipat sa text input mode";
    }
    get invalidDateFormatLabel() {
      return "Invalid ang format.";
    }
    get invalidDateRangeLabel() {
      return "Invalid ang hanay.";
    }
    get invalidTimeLabel() {
      return "Maglagay ng valid na oras";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "I-off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Piliin";
    }
    get keyboardKeySpace() {
      return "Puwang";
    }
    get lastPageTooltip() {
      return "Huling page";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 lisensya";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount na lisensya";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Mga Lisensya";
    }
    get menuBarMenuLabel() {
      return "Menu sa menu bar";
    }
    get modalBarrierDismissLabel() {
      return "I-dismiss";
    }
    get moreButtonTooltip() {
      return "Higit Pa";
    }
    get nextMonthTooltip() {
      return "Susunod na buwan";
    }
    get nextPageTooltip() {
      return "Susunod na page";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Buksan ang menu ng navigation";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow ng $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow ng humigit kumulang $rowCount";
    }
    get pasteButtonLabel() {
      return "I-paste";
    }
    get popupMenuLabel() {
      return "Popup na menu";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "Nakaraang buwan";
    }
    get previousPageTooltip() {
      return "Nakaraang page";
    }
    get refreshIndicatorSemanticLabel() {
      return "Nagre-refresh";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 character ang natitira";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount na character ang natitira";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Ilipat pababa";
    }
    get reorderItemLeft() {
      return "Ilipat pakaliwa";
    }
    get reorderItemRight() {
      return "Ilipat pakanan";
    }
    get reorderItemToEnd() {
      return "Ilipat sa dulo";
    }
    get reorderItemToStart() {
      return "Ilipat sa simula";
    }
    get reorderItemUp() {
      return "Ilipat pataas";
    }
    get rowsPerPageTitle() {
      return "Mga row bawat page:";
    }
    get saveButtonLabel() {
      return "I-SAVE";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Maghanap";
    }
    get selectAllButtonLabel() {
      return "Piliin lahat";
    }
    get selectYearSemanticsLabel() {
      return "Pumili ng taon";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 item ang napili";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount na item ang napili";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Ipakita ang mga account";
    }
    get showMenuTooltip() {
      return "Ipakita ang menu";
    }
    get signedInLabel() {
      return "Naka-sign in";
    }
    get tabLabelRaw() {
      return "Tab $tabIndex ng $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "PUMILI NG ORAS";
    }
    get timePickerHourLabel() {
      return "Oras";
    }
    get timePickerHourModeAnnouncement() {
      return "Pumili ng mga oras";
    }
    get timePickerInputHelpText() {
      return "MAGLAGAY NG ORAS";
    }
    get timePickerMinuteLabel() {
      return "Minuto";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Pumili ng mga minuto";
    }
    get unspecifiedDate() {
      return "Petsa";
    }
    get unspecifiedDateRange() {
      return "Hanay ng Petsa";
    }
    get viewLicensesButtonLabel() {
      return "TINGNAN ANG MGA LISENSYA";
    }
  };
  (generated_material_localizations.MaterialLocalizationFil.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "fil";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationFil.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationFil.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationFil);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationFil);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationFil, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationFil.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationFil, I[2]);
  generated_material_localizations.MaterialLocalizationFr = class MaterialLocalizationFr extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationFr.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "À propos de $applicationName";
    }
    get alertDialogLabel() {
      return "Alerte";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "Retour";
    }
    get calendarModeButtonLabel() {
      return "Passer à l'agenda";
    }
    get cancelButtonLabel() {
      return "ANNULER";
    }
    get closeButtonLabel() {
      return "FERMER";
    }
    get closeButtonTooltip() {
      return "Fermer";
    }
    get collapsedIconTapHint() {
      return "Développer";
    }
    get continueButtonLabel() {
      return "CONTINUER";
    }
    get copyButtonLabel() {
      return "Copier";
    }
    get cutButtonLabel() {
      return "Couper";
    }
    get dateHelpText() {
      return "jj/mm/aaaa";
    }
    get dateInputLabel() {
      return "Saisir une date";
    }
    get dateOutOfRangeLabel() {
      return "Hors de portée.";
    }
    get datePickerHelpText() {
      return "SÉLECTIONNER UNE DATE";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Date de fin : $fullDate";
    }
    get dateRangeEndLabel() {
      return "Date de fin";
    }
    get dateRangePickerHelpText() {
      return "SÉLECTIONNER UNE PLAGE";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Date de début : $fullDate";
    }
    get dateRangeStartLabel() {
      return "Date de début";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "Supprimer";
    }
    get dialModeButtonLabel() {
      return "Passer au mode de sélection via le cadran";
    }
    get dialogLabel() {
      return "Boîte de dialogue";
    }
    get drawerLabel() {
      return "Menu de navigation";
    }
    get expandedIconTapHint() {
      return "Réduire";
    }
    get firstPageTooltip() {
      return "Première page";
    }
    get hideAccountsLabel() {
      return "Masquer les comptes";
    }
    get inputDateModeButtonLabel() {
      return "Passer à la saisie";
    }
    get inputTimeModeButtonLabel() {
      return "Passer au mode de saisie au format texte";
    }
    get invalidDateFormatLabel() {
      return "Format non valide.";
    }
    get invalidDateRangeLabel() {
      return "Plage non valide.";
    }
    get invalidTimeLabel() {
      return "Veuillez indiquer une heure valide";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "Alt Gr";
    }
    get keyboardKeyBackspace() {
      return "Retour arrière";
    }
    get keyboardKeyCapsLock() {
      return "Verr Maj";
    }
    get keyboardKeyChannelDown() {
      return "Chaîne suivante";
    }
    get keyboardKeyChannelUp() {
      return "Chaîne précédente";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Suppr";
    }
    get keyboardKeyEject() {
      return "Éjecter";
    }
    get keyboardKeyEnd() {
      return "Fin";
    }
    get keyboardKeyEscape() {
      return "Échap";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Accueil";
    }
    get keyboardKeyInsert() {
      return "Insérer";
    }
    get keyboardKeyMeta() {
      return "Méta";
    }
    get keyboardKeyMetaMacOs() {
      return "Commande";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Verr Num";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Entrée";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgSuiv";
    }
    get keyboardKeyPageUp() {
      return "PgPréc";
    }
    get keyboardKeyPower() {
      return "Puissance";
    }
    get keyboardKeyPowerOff() {
      return "Éteindre";
    }
    get keyboardKeyPrintScreen() {
      return "Impr. écran";
    }
    get keyboardKeyScrollLock() {
      return "Arrêt défil";
    }
    get keyboardKeySelect() {
      return "Sélectionner";
    }
    get keyboardKeySpace() {
      return "Espace";
    }
    get lastPageTooltip() {
      return "Dernière page";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 licence";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licences";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Licences";
    }
    get menuBarMenuLabel() {
      return "Menu de la barre de menu";
    }
    get modalBarrierDismissLabel() {
      return "Ignorer";
    }
    get moreButtonTooltip() {
      return "Plus";
    }
    get nextMonthTooltip() {
      return "Mois suivant";
    }
    get nextPageTooltip() {
      return "Page suivante";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Ouvrir le menu de navigation";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow – $lastRow sur $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow – $lastRow sur environ $rowCount";
    }
    get pasteButtonLabel() {
      return "Coller";
    }
    get popupMenuLabel() {
      return "Menu contextuel";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "Mois précédent";
    }
    get previousPageTooltip() {
      return "Page précédente";
    }
    get refreshIndicatorSemanticLabel() {
      return "Actualiser";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 caractère restant";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount caractères restants";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Déplacer vers le bas";
    }
    get reorderItemLeft() {
      return "Déplacer vers la gauche";
    }
    get reorderItemRight() {
      return "Déplacer vers la droite";
    }
    get reorderItemToEnd() {
      return "Déplacer vers la fin";
    }
    get reorderItemToStart() {
      return "Déplacer vers le début";
    }
    get reorderItemUp() {
      return "Déplacer vers le haut";
    }
    get rowsPerPageTitle() {
      return "Lignes par page :";
    }
    get saveButtonLabel() {
      return "ENREGISTRER";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Rechercher";
    }
    get selectAllButtonLabel() {
      return "Tout sélectionner";
    }
    get selectYearSemanticsLabel() {
      return "Sélectionner une année";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 élément sélectionné";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount éléments sélectionnés";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return "Aucun élément sélectionné";
    }
    get showAccountsLabel() {
      return "Afficher les comptes";
    }
    get showMenuTooltip() {
      return "Afficher le menu";
    }
    get signedInLabel() {
      return "Connecté";
    }
    get tabLabelRaw() {
      return "Onglet $tabIndex sur $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "SÉLECTIONNER UNE HEURE";
    }
    get timePickerHourLabel() {
      return "Heure";
    }
    get timePickerHourModeAnnouncement() {
      return "Sélectionner une heure";
    }
    get timePickerInputHelpText() {
      return "SAISIR UNE HEURE";
    }
    get timePickerMinuteLabel() {
      return "Minute";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Sélectionner des minutes";
    }
    get unspecifiedDate() {
      return "Date";
    }
    get unspecifiedDateRange() {
      return "Plage de dates";
    }
    get viewLicensesButtonLabel() {
      return "AFFICHER LES LICENCES";
    }
  };
  (generated_material_localizations.MaterialLocalizationFr.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "fr";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationFr.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationFr.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationFr);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationFr);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationFr, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationFr.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationFr, I[2]);
  generated_material_localizations.MaterialLocalizationFrCa = class MaterialLocalizationFrCa extends generated_material_localizations.MaterialLocalizationFr {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationFrCa.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get keyboardKeyChannelDown() {
      return "Chaîne préc.";
    }
    get keyboardKeyCapsLock() {
      return "Verr. maj.";
    }
    get keyboardKeyNumLock() {
      return "Verr. num.";
    }
    get keyboardKeyPrintScreen() {
      return "Impression de l'écran";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Entrée";
    }
    get keyboardKeyInsert() {
      return "Insér.";
    }
    get keyboardKeyEscape() {
      return "Échapp.";
    }
    get keyboardKeyEject() {
      return "Éject.";
    }
    get keyboardKeyChannelUp() {
      return "Chaîne suiv.";
    }
    get keyboardKeyPower() {
      return "Alimentation";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeySelect() {
      return "Sélect.";
    }
    get keyboardKeyScrollLock() {
      return "Arrêt défilement";
    }
    get keyboardKeyPageUp() {
      return "Bas page";
    }
    get keyboardKeyPageDown() {
      return "Haut page";
    }
    get invalidTimeLabel() {
      return "Entrez une heure valide";
    }
    get timePickerDialHelpText() {
      return "SÉLECTIONNER L'HEURE";
    }
    get timePickerInputHelpText() {
      return "ENTRER L'HEURE";
    }
    get timePickerMinuteLabel() {
      return "Minutes";
    }
    get dialModeButtonLabel() {
      return "Passer au mode de sélection du cadran";
    }
    get inputTimeModeButtonLabel() {
      return "Passer au mode d'entrée Texte";
    }
    get dateRangePickerHelpText() {
      return "SÉLECTIONNER LA PLAGE";
    }
    get datePickerHelpText() {
      return "SÉLECTIONNER LA DATE";
    }
    get invalidDateRangeLabel() {
      return "Plage incorrecte.";
    }
    get invalidDateFormatLabel() {
      return "Format incorrect";
    }
    get inputDateModeButtonLabel() {
      return "Passer à l'entrée";
    }
    get dateInputLabel() {
      return "Entrer une date";
    }
    get unspecifiedDateRange() {
      return "Période";
    }
    get dateHelpText() {
      return "jj-mm-aaaa";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow à $lastRow sur $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow à $lastRow sur environ $rowCount";
    }
    get tabLabelRaw() {
      return "Onglet $tabIndex sur $tabCount";
    }
    get anteMeridiemAbbreviation() {
      return "am";
    }
    get postMeridiemAbbreviation() {
      return "pm";
    }
    get timePickerHourModeAnnouncement() {
      return "Sélectionnez les heures";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Sélectionnez les minutes";
    }
    get reorderItemToStart() {
      return "Déplacer au début";
    }
    get reorderItemToEnd() {
      return "Déplacer à la fin";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.frenchCanadian;
    }
  };
  (generated_material_localizations.MaterialLocalizationFrCa.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "fr_CA";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationFrCa.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationFrCa.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationFrCa);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationFrCa);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationFrCa, I[2]);
  generated_material_localizations.MaterialLocalizationGl = class MaterialLocalizationGl extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationGl.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Acerca de: $applicationName";
    }
    get alertDialogLabel() {
      return "Alerta";
    }
    get anteMeridiemAbbreviation() {
      return "a.m.";
    }
    get backButtonTooltip() {
      return "Atrás";
    }
    get calendarModeButtonLabel() {
      return "Cambiar ao modo de calendario";
    }
    get cancelButtonLabel() {
      return "CANCELAR";
    }
    get closeButtonLabel() {
      return "PECHAR";
    }
    get closeButtonTooltip() {
      return "Pechar";
    }
    get collapsedIconTapHint() {
      return "Despregar";
    }
    get continueButtonLabel() {
      return "CONTINUAR";
    }
    get copyButtonLabel() {
      return "Copiar";
    }
    get cutButtonLabel() {
      return "Cortar";
    }
    get dateHelpText() {
      return "mm/dd/aaaa";
    }
    get dateInputLabel() {
      return "Introduce a data";
    }
    get dateOutOfRangeLabel() {
      return "A data está fóra do intervalo.";
    }
    get datePickerHelpText() {
      return "SELECCIONAR UNHA DATA";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Data de finalización: $fullDate";
    }
    get dateRangeEndLabel() {
      return "Data de finalización";
    }
    get dateRangePickerHelpText() {
      return "SELECCIONAR UN INTERVALO DE DATAS";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Data de inicio: $fullDate";
    }
    get dateRangeStartLabel() {
      return "Data de inicio";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "Eliminar";
    }
    get dialModeButtonLabel() {
      return "Cambiar a modo de selector en esfera";
    }
    get dialogLabel() {
      return "Cadro de diálogo";
    }
    get drawerLabel() {
      return "Menú de navegación";
    }
    get expandedIconTapHint() {
      return "Contraer";
    }
    get firstPageTooltip() {
      return "Primeira páxina";
    }
    get hideAccountsLabel() {
      return "Ocultar contas";
    }
    get inputDateModeButtonLabel() {
      return "Cambiar ao modo de introdución de texto";
    }
    get inputTimeModeButtonLabel() {
      return "Cambiar ao modo de escritura dos números";
    }
    get invalidDateFormatLabel() {
      return "O formato non é válido.";
    }
    get invalidDateRangeLabel() {
      return "O intervalo de datas non é válido.";
    }
    get invalidTimeLabel() {
      return "Escribe unha hora válida";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "Alt Gr";
    }
    get keyboardKeyBackspace() {
      return "Retroceso";
    }
    get keyboardKeyCapsLock() {
      return "Bloq Maiús";
    }
    get keyboardKeyChannelDown() {
      return "Canle abaixo";
    }
    get keyboardKeyChannelUp() {
      return "Canle arriba";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Supr";
    }
    get keyboardKeyEject() {
      return "Expulsar";
    }
    get keyboardKeyEnd() {
      return "Fin";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Inicio";
    }
    get keyboardKeyInsert() {
      return "Inserir";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Comando";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Bloq Num";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Intro";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "AvPáx";
    }
    get keyboardKeyPageUp() {
      return "RePáx";
    }
    get keyboardKeyPower() {
      return "Acender";
    }
    get keyboardKeyPowerOff() {
      return "Apagar";
    }
    get keyboardKeyPrintScreen() {
      return "Imprimir pantalla";
    }
    get keyboardKeyScrollLock() {
      return "Bloq Despr";
    }
    get keyboardKeySelect() {
      return "Seleccionar";
    }
    get keyboardKeySpace() {
      return "Espazo";
    }
    get lastPageTooltip() {
      return "Última páxina";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 licenza";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licenzas";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Licenzas";
    }
    get menuBarMenuLabel() {
      return "Menú da barra de menú";
    }
    get modalBarrierDismissLabel() {
      return "Ignorar";
    }
    get moreButtonTooltip() {
      return "Máis";
    }
    get nextMonthTooltip() {
      return "Mes seguinte";
    }
    get nextPageTooltip() {
      return "Páxina seguinte";
    }
    get okButtonLabel() {
      return "Aceptar";
    }
    get openAppDrawerTooltip() {
      return "Abrir menú de navegación";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow-$lastRow de $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow-$lastRow de aproximadamente $rowCount";
    }
    get pasteButtonLabel() {
      return "Pegar";
    }
    get popupMenuLabel() {
      return "Menú emerxente";
    }
    get postMeridiemAbbreviation() {
      return "p.m.";
    }
    get previousMonthTooltip() {
      return "Mes anterior";
    }
    get previousPageTooltip() {
      return "Páxina anterior";
    }
    get refreshIndicatorSemanticLabel() {
      return "Actualizar";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 carácter restante";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount caracteres restantes";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Mover cara abaixo";
    }
    get reorderItemLeft() {
      return "Mover cara á esquerda";
    }
    get reorderItemRight() {
      return "Mover cara á dereita";
    }
    get reorderItemToEnd() {
      return "Mover ao final";
    }
    get reorderItemToStart() {
      return "Mover ao inicio";
    }
    get reorderItemUp() {
      return "Mover cara arriba";
    }
    get rowsPerPageTitle() {
      return "Filas por páxina:";
    }
    get saveButtonLabel() {
      return "GARDAR";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Buscar";
    }
    get selectAllButtonLabel() {
      return "Seleccionar todo";
    }
    get selectYearSemanticsLabel() {
      return "Seleccionar ano";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "Seleccionouse 1 elemento";
    }
    get selectedRowCountTitleOther() {
      return "Seleccionáronse $selectedRowCount elementos";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return "Non se seleccionaron elementos";
    }
    get showAccountsLabel() {
      return "Mostrar contas";
    }
    get showMenuTooltip() {
      return "Mostrar menú";
    }
    get signedInLabel() {
      return "Sesión iniciada";
    }
    get tabLabelRaw() {
      return "Pestana $tabIndex de $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "SELECCIONA A HORA";
    }
    get timePickerHourLabel() {
      return "Hora";
    }
    get timePickerHourModeAnnouncement() {
      return "Seleccionar horas";
    }
    get timePickerInputHelpText() {
      return "INDICA A HORA";
    }
    get timePickerMinuteLabel() {
      return "Minuto";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Seleccionar minutos";
    }
    get unspecifiedDate() {
      return "Data";
    }
    get unspecifiedDateRange() {
      return "Intervalo de datas";
    }
    get viewLicensesButtonLabel() {
      return "VER LICENZAS";
    }
  };
  (generated_material_localizations.MaterialLocalizationGl.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "gl";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationGl.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationGl.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationGl);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationGl);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationGl, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationGl.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationGl, I[2]);
  generated_material_localizations.MaterialLocalizationGsw = class MaterialLocalizationGsw extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationGsw.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Über $applicationName";
    }
    get alertDialogLabel() {
      return "Benachrichtigung";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "Zurück";
    }
    get calendarModeButtonLabel() {
      return "Zum Kalender wechseln";
    }
    get cancelButtonLabel() {
      return "ABBRECHEN";
    }
    get closeButtonLabel() {
      return "SCHLIEẞEN";
    }
    get closeButtonTooltip() {
      return "Schließen";
    }
    get collapsedIconTapHint() {
      return "Maximieren";
    }
    get continueButtonLabel() {
      return "WEITER";
    }
    get copyButtonLabel() {
      return "Kopieren";
    }
    get cutButtonLabel() {
      return "Ausschneiden";
    }
    get dateHelpText() {
      return "tt.mm.jjjj";
    }
    get dateInputLabel() {
      return "Datum eingeben";
    }
    get dateOutOfRangeLabel() {
      return "Außerhalb des Zeitraums.";
    }
    get datePickerHelpText() {
      return "DATUM AUSWÄHLEN";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Enddatum $fullDate";
    }
    get dateRangeEndLabel() {
      return "Enddatum";
    }
    get dateRangePickerHelpText() {
      return "ZEITRAUM AUSWÄHLEN";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Startdatum $fullDate";
    }
    get dateRangeStartLabel() {
      return "Startdatum";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Löschen";
    }
    get dialModeButtonLabel() {
      return "Zur Uhrzeitauswahl wechseln";
    }
    get dialogLabel() {
      return "Dialogfeld";
    }
    get drawerLabel() {
      return "Navigationsmenü";
    }
    get expandedIconTapHint() {
      return "Minimieren";
    }
    get firstPageTooltip() {
      return "Erste Seite";
    }
    get hideAccountsLabel() {
      return "Konten ausblenden";
    }
    get inputDateModeButtonLabel() {
      return "Zur Texteingabe wechseln";
    }
    get inputTimeModeButtonLabel() {
      return "Zum Texteingabemodus wechseln";
    }
    get invalidDateFormatLabel() {
      return "Ungültiges Format.";
    }
    get invalidDateRangeLabel() {
      return "Ungültiger Zeitraum.";
    }
    get invalidTimeLabel() {
      return "Geben Sie eine gültige Uhrzeit ein";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Rücktaste";
    }
    get keyboardKeyCapsLock() {
      return "Feststelltaste";
    }
    get keyboardKeyChannelDown() {
      return "Vorheriger Kanal";
    }
    get keyboardKeyChannelUp() {
      return "Nächster Kanal";
    }
    get keyboardKeyControl() {
      return "Strg";
    }
    get keyboardKeyDelete() {
      return "Entf";
    }
    get keyboardKeyEject() {
      return "Auswerfen";
    }
    get keyboardKeyEnd() {
      return "Ende";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Pos1";
    }
    get keyboardKeyInsert() {
      return "Einfg";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Befehl";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Eingabetaste";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "Bild ab";
    }
    get keyboardKeyPageUp() {
      return "Bild auf";
    }
    get keyboardKeyPower() {
      return "Ein/Aus";
    }
    get keyboardKeyPowerOff() {
      return "Aus";
    }
    get keyboardKeyPrintScreen() {
      return "Druck";
    }
    get keyboardKeyScrollLock() {
      return "Rollen";
    }
    get keyboardKeySelect() {
      return "Auswählen";
    }
    get keyboardKeySpace() {
      return "Leertaste";
    }
    get lastPageTooltip() {
      return "Letzte Seite";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 Lizenz";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount Lizenzen";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Lizenzen";
    }
    get menuBarMenuLabel() {
      return "Menü in der Menüleiste";
    }
    get modalBarrierDismissLabel() {
      return "Schließen";
    }
    get moreButtonTooltip() {
      return "Mehr";
    }
    get nextMonthTooltip() {
      return "Nächster Monat";
    }
    get nextPageTooltip() {
      return "Nächste Seite";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Navigationsmenü öffnen";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow von $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow von etwa $rowCount";
    }
    get pasteButtonLabel() {
      return "Einsetzen";
    }
    get popupMenuLabel() {
      return "Pop-up-Menü";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "Vorheriger Monat";
    }
    get previousPageTooltip() {
      return "Vorherige Seite";
    }
    get refreshIndicatorSemanticLabel() {
      return "Aktualisieren";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "Noch 1 Zeichen";
    }
    get remainingTextFieldCharacterCountOther() {
      return "Noch $remainingCount Zeichen";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Nach unten verschieben";
    }
    get reorderItemLeft() {
      return "Nach links verschieben";
    }
    get reorderItemRight() {
      return "Nach rechts verschieben";
    }
    get reorderItemToEnd() {
      return "An das Ende verschieben";
    }
    get reorderItemToStart() {
      return "An den Anfang verschieben";
    }
    get reorderItemUp() {
      return "Nach oben verschieben";
    }
    get rowsPerPageTitle() {
      return "Zeilen pro Seite:";
    }
    get saveButtonLabel() {
      return "SPEICHERN";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Suchen";
    }
    get selectAllButtonLabel() {
      return "Alle auswählen";
    }
    get selectYearSemanticsLabel() {
      return "Jahr auswählen";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 Element ausgewählt";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount Elemente ausgewählt";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Konten anzeigen";
    }
    get showMenuTooltip() {
      return "Menü anzeigen";
    }
    get signedInLabel() {
      return "Angemeldet";
    }
    get tabLabelRaw() {
      return "Tab $tabIndex von $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "UHRZEIT AUSWÄHLEN";
    }
    get timePickerHourLabel() {
      return "Stunde";
    }
    get timePickerHourModeAnnouncement() {
      return "Stunden auswählen";
    }
    get timePickerInputHelpText() {
      return "ZEIT EINGEBEN";
    }
    get timePickerMinuteLabel() {
      return "Minute";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Minuten auswählen";
    }
    get unspecifiedDate() {
      return "Datum";
    }
    get unspecifiedDateRange() {
      return "Zeitraum";
    }
    get viewLicensesButtonLabel() {
      return "LIZENZEN ANZEIGEN";
    }
  };
  (generated_material_localizations.MaterialLocalizationGsw.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "gsw";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationGsw.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationGsw.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationGsw);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationGsw);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationGsw, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationGsw.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationGsw, I[2]);
  generated_material_localizations.MaterialLocalizationGu = class MaterialLocalizationGu extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationGu.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName વિશે";
    }
    get alertDialogLabel() {
      return "અલર્ટ";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "પાછળ";
    }
    get calendarModeButtonLabel() {
      return "કૅલેન્ડર મોડ પર સ્વિચ કરો";
    }
    get cancelButtonLabel() {
      return "રદ કરો";
    }
    get closeButtonLabel() {
      return "બંધ કરો";
    }
    get closeButtonTooltip() {
      return "બંધ કરો";
    }
    get collapsedIconTapHint() {
      return "વિસ્તૃત કરો";
    }
    get continueButtonLabel() {
      return "ચાલુ રાખો";
    }
    get copyButtonLabel() {
      return "કૉપિ કરો";
    }
    get cutButtonLabel() {
      return "કાપો";
    }
    get dateHelpText() {
      return "dd/mm/yyyy";
    }
    get dateInputLabel() {
      return "તારીખ દાખલ કરો";
    }
    get dateOutOfRangeLabel() {
      return "રેંજમાં નથી.";
    }
    get datePickerHelpText() {
      return "તારીખ પસંદ કરો";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "સમાપ્તિની તારીખ $fullDate";
    }
    get dateRangeEndLabel() {
      return "સમાપ્તિની તારીખ";
    }
    get dateRangePickerHelpText() {
      return "રેંજ પસંદ કરો";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "શરૂ કરવાની તારીખ $fullDate";
    }
    get dateRangeStartLabel() {
      return "શરૂ કરવાની તારીખ";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "ડિલીટ કરો";
    }
    get dialModeButtonLabel() {
      return "ડાયલ પિકર મોડ પર સ્વિચ કરો";
    }
    get dialogLabel() {
      return "સંવાદ";
    }
    get drawerLabel() {
      return "નૅવિગેશન મેનૂ";
    }
    get expandedIconTapHint() {
      return "સંકુચિત કરો";
    }
    get firstPageTooltip() {
      return "પહેલું પેજ";
    }
    get hideAccountsLabel() {
      return "એકાઉન્ટ છુપાવો";
    }
    get inputDateModeButtonLabel() {
      return "ઇનપુટ મોડ પર સ્વિચ કરો";
    }
    get inputTimeModeButtonLabel() {
      return "ટેક્સ્ટ ઇનપુટ મોડ પર સ્વિચ કરો";
    }
    get invalidDateFormatLabel() {
      return "અમાન્ય ફોર્મેટ.";
    }
    get invalidDateRangeLabel() {
      return "અમાન્ય રેંજ.";
    }
    get invalidTimeLabel() {
      return "માન્ય સમય દાખલ કરો";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "Power Off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "છેલ્લું પેજ";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 લાઇસન્સ";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount લાઇસન્સ";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "લાઇસન્સ";
    }
    get menuBarMenuLabel() {
      return "મેનૂ બાર મેનૂ";
    }
    get modalBarrierDismissLabel() {
      return "છોડી દો";
    }
    get moreButtonTooltip() {
      return "વધુ";
    }
    get nextMonthTooltip() {
      return "આગલો મહિનો";
    }
    get nextPageTooltip() {
      return "આગલું પેજ";
    }
    get okButtonLabel() {
      return "ઓકે";
    }
    get openAppDrawerTooltip() {
      return "નૅવિગેશન મેનૂ ખોલો";
    }
    get pageRowsInfoTitleRaw() {
      return "$rowCountમાંથી $firstRow–$lastRow";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "આશરે $rowCountમાંથી $firstRow–$lastRow";
    }
    get pasteButtonLabel() {
      return "પેસ્ટ કરો";
    }
    get popupMenuLabel() {
      return "પૉપઅપ મેનૂ";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "પાછલો મહિનો";
    }
    get previousPageTooltip() {
      return "પાછલું પેજ";
    }
    get refreshIndicatorSemanticLabel() {
      return "રિફ્રેશ કરો";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 અક્ષર બાકી";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount અક્ષર બાકી";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "નીચે ખસેડો";
    }
    get reorderItemLeft() {
      return "ડાબે ખસેડો";
    }
    get reorderItemRight() {
      return "જમણે ખસેડો";
    }
    get reorderItemToEnd() {
      return "અંતમાં ખસેડો";
    }
    get reorderItemToStart() {
      return "પ્રારંભમાં ખસેડો";
    }
    get reorderItemUp() {
      return "ઉપર ખસેડો";
    }
    get rowsPerPageTitle() {
      return "પેજ દીઠ પંક્તિઓ:";
    }
    get saveButtonLabel() {
      return "સાચવો";
    }
    get scriptCategory() {
      return typography.ScriptCategory.tall;
    }
    get searchFieldLabel() {
      return "શોધો";
    }
    get selectAllButtonLabel() {
      return "બધા પસંદ કરો";
    }
    get selectYearSemanticsLabel() {
      return "વર્ષ પસંદ કરો";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 આઇટમ પસંદ કરી";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount આઇટમ પસંદ કરી";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "એકાઉન્ટ બતાવો";
    }
    get showMenuTooltip() {
      return "મેનૂ બતાવો";
    }
    get signedInLabel() {
      return "આમાં સાઇન ઇન કર્યું છે";
    }
    get tabLabelRaw() {
      return "$tabCountમાંથી $tabIndex ટૅબ";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "સમય પસંદ કરો";
    }
    get timePickerHourLabel() {
      return "કલાક";
    }
    get timePickerHourModeAnnouncement() {
      return "કલાક પસંદ કરો";
    }
    get timePickerInputHelpText() {
      return "સમય દાખલ કરો";
    }
    get timePickerMinuteLabel() {
      return "મિનિટ";
    }
    get timePickerMinuteModeAnnouncement() {
      return "મિનિટ પસંદ કરો";
    }
    get unspecifiedDate() {
      return "તારીખ";
    }
    get unspecifiedDateRange() {
      return "તારીખ રેંજ";
    }
    get viewLicensesButtonLabel() {
      return "લાઇસન્સ જુઓ";
    }
  };
  (generated_material_localizations.MaterialLocalizationGu.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "gu";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationGu.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationGu.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationGu);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationGu);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationGu, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationGu.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationGu, I[2]);
  generated_material_localizations.MaterialLocalizationHe = class MaterialLocalizationHe extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationHe.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "מידע על $applicationName";
    }
    get alertDialogLabel() {
      return "התראה";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "הקודם";
    }
    get calendarModeButtonLabel() {
      return "מעבר למצב היומן";
    }
    get cancelButtonLabel() {
      return "ביטול";
    }
    get closeButtonLabel() {
      return "סגירה";
    }
    get closeButtonTooltip() {
      return "סגירה";
    }
    get collapsedIconTapHint() {
      return "הרחבה";
    }
    get continueButtonLabel() {
      return "המשך";
    }
    get copyButtonLabel() {
      return "העתקה";
    }
    get cutButtonLabel() {
      return "גזירה";
    }
    get dateHelpText() {
      return "dd.mm.yyyy";
    }
    get dateInputLabel() {
      return "יש להזין תאריך";
    }
    get dateOutOfRangeLabel() {
      return "מחוץ לטווח.";
    }
    get datePickerHelpText() {
      return "בחירת תאריך";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "תאריך סיום: $fullDate";
    }
    get dateRangeEndLabel() {
      return "תאריך סיום";
    }
    get dateRangePickerHelpText() {
      return "בחירת טווח";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "תאריך התחלה: $fullDate";
    }
    get dateRangeStartLabel() {
      return "תאריך התחלה";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "מחיקה";
    }
    get dialModeButtonLabel() {
      return "מעבר לבחירה באמצעות חוגה";
    }
    get dialogLabel() {
      return "תיבת דו-שיח";
    }
    get drawerLabel() {
      return "תפריט ניווט";
    }
    get expandedIconTapHint() {
      return "כיווץ";
    }
    get firstPageTooltip() {
      return "לדף הראשון";
    }
    get hideAccountsLabel() {
      return "הסתרת החשבונות";
    }
    get inputDateModeButtonLabel() {
      return "מעבר למצב הקלט";
    }
    get inputTimeModeButtonLabel() {
      return "מעבר להזנת טקסט";
    }
    get invalidDateFormatLabel() {
      return "פורמט לא חוקי.";
    }
    get invalidDateRangeLabel() {
      return "טווח לא תקף.";
    }
    get invalidTimeLabel() {
      return "יש להזין שעה תקינה";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "+ ‏Num";
    }
    get keyboardKeyNumpadComma() {
      return ", ‏Num";
    }
    get keyboardKeyNumpadDecimal() {
      return ". ‏Num";
    }
    get keyboardKeyNumpadDivide() {
      return "/ ‏Num";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "= ‏Num";
    }
    get keyboardKeyNumpadMultiply() {
      return "* ‏Num";
    }
    get keyboardKeyNumpadParenLeft() {
      return ") ‏Num";
    }
    get keyboardKeyNumpadParenRight() {
      return "( ‏Num";
    }
    get keyboardKeyNumpadSubtract() {
      return "- ‏Num";
    }
    get keyboardKeyPageDown() {
      return "Page Down";
    }
    get keyboardKeyPageUp() {
      return "Page Up";
    }
    get keyboardKeyPower() {
      return "הפעלה";
    }
    get keyboardKeyPowerOff() {
      return "כיבוי";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "רווח";
    }
    get lastPageTooltip() {
      return "לדף האחרון";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return "$licenseCount רישיונות";
    }
    get licensesPackageDetailTextOne() {
      return "רישיון אחד";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount רישיונות";
    }
    get licensesPackageDetailTextTwo() {
      return "$licenseCount רישיונות";
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "רישיונות";
    }
    get menuBarMenuLabel() {
      return "תפריט בסרגל התפריטים";
    }
    get modalBarrierDismissLabel() {
      return "סגירה";
    }
    get moreButtonTooltip() {
      return "עוד";
    }
    get nextMonthTooltip() {
      return "החודש הבא";
    }
    get nextPageTooltip() {
      return "הדף הבא";
    }
    get okButtonLabel() {
      return "אישור";
    }
    get openAppDrawerTooltip() {
      return "פתיחה של תפריט הניווט";
    }
    get pageRowsInfoTitleRaw() {
      return "$lastRow–$firstRow מתוך $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$lastRow–$firstRow מתוך כ-$rowCount";
    }
    get pasteButtonLabel() {
      return "הדבקה";
    }
    get popupMenuLabel() {
      return "תפריט קופץ";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "החודש הקודם";
    }
    get previousPageTooltip() {
      return "הדף הקודם";
    }
    get refreshIndicatorSemanticLabel() {
      return "רענון";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return "נותרו $remainingCount תווים";
    }
    get remainingTextFieldCharacterCountOne() {
      return "נותר תו אחד";
    }
    get remainingTextFieldCharacterCountOther() {
      return "נותרו $remainingCount תווים";
    }
    get remainingTextFieldCharacterCountTwo() {
      return "נותרו $remainingCount תווים";
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "העברה למטה";
    }
    get reorderItemLeft() {
      return "העברה שמאלה";
    }
    get reorderItemRight() {
      return "העברה ימינה";
    }
    get reorderItemToEnd() {
      return "העברה לסוף";
    }
    get reorderItemToStart() {
      return "העברה להתחלה";
    }
    get reorderItemUp() {
      return "העברה למעלה";
    }
    get rowsPerPageTitle() {
      return "שורות בכל דף:";
    }
    get saveButtonLabel() {
      return "שמירה";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "חיפוש";
    }
    get selectAllButtonLabel() {
      return "בחירת הכול";
    }
    get selectYearSemanticsLabel() {
      return "בחירת שנה";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return "$selectedRowCount פריטים נבחרו";
    }
    get selectedRowCountTitleOne() {
      return "פריט אחד נבחר";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount פריטים נבחרו";
    }
    get selectedRowCountTitleTwo() {
      return "$selectedRowCount פריטים נבחרו";
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "הצגת החשבונות";
    }
    get showMenuTooltip() {
      return "הצגת התפריט";
    }
    get signedInLabel() {
      return "מחובר";
    }
    get tabLabelRaw() {
      return "כרטיסייה $tabIndex מתוך $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "בחירת שעה";
    }
    get timePickerHourLabel() {
      return "שעה";
    }
    get timePickerHourModeAnnouncement() {
      return "בחירת שעות";
    }
    get timePickerInputHelpText() {
      return "הזנת שעה";
    }
    get timePickerMinuteLabel() {
      return "דקות";
    }
    get timePickerMinuteModeAnnouncement() {
      return "בחירת דקות";
    }
    get unspecifiedDate() {
      return "תאריך";
    }
    get unspecifiedDateRange() {
      return "טווח תאריכים";
    }
    get viewLicensesButtonLabel() {
      return "הצגת הרישיונות";
    }
  };
  (generated_material_localizations.MaterialLocalizationHe.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "he";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationHe.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationHe.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationHe);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationHe);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationHe, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationHe.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationHe, I[2]);
  generated_material_localizations.MaterialLocalizationHi = class MaterialLocalizationHi extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationHi.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName के बारे में जानकारी";
    }
    get alertDialogLabel() {
      return "अलर्ट";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "वापस जाएं";
    }
    get calendarModeButtonLabel() {
      return "कैलेंडर पर जाएं";
    }
    get cancelButtonLabel() {
      return "रद्द करें";
    }
    get closeButtonLabel() {
      return "बंद करें";
    }
    get closeButtonTooltip() {
      return "बंद करें";
    }
    get collapsedIconTapHint() {
      return "बड़ा करें";
    }
    get continueButtonLabel() {
      return "जारी रखें";
    }
    get copyButtonLabel() {
      return "कॉपी करें";
    }
    get cutButtonLabel() {
      return "काटें";
    }
    get dateHelpText() {
      return "dd/mm/yyyy";
    }
    get dateInputLabel() {
      return "तारीख डालें";
    }
    get dateOutOfRangeLabel() {
      return "सीमा से ज़्यादा.";
    }
    get datePickerHelpText() {
      return "तारीख चुनें";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "खत्म होने की तारीख $fullDate";
    }
    get dateRangeEndLabel() {
      return "खत्म होने की तारीख";
    }
    get dateRangePickerHelpText() {
      return "सीमा चुनें";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "शुरू होने की तारीख $fullDate";
    }
    get dateRangeStartLabel() {
      return "शुरू होने की तारीख";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "मिटाएं";
    }
    get dialModeButtonLabel() {
      return "डायल पिकर मोड पर स्विच करें";
    }
    get dialogLabel() {
      return "संवाद";
    }
    get drawerLabel() {
      return "नेविगेशन मेन्यू";
    }
    get expandedIconTapHint() {
      return "छोटा करें";
    }
    get firstPageTooltip() {
      return "पहला पेज";
    }
    get hideAccountsLabel() {
      return "खाते छिपाएं";
    }
    get inputDateModeButtonLabel() {
      return "इनपुट पर जाएं";
    }
    get inputTimeModeButtonLabel() {
      return "टेक्स्ट के इनपुट मोड पर स्विच करें";
    }
    get invalidDateFormatLabel() {
      return "अमान्य फ़ॉर्मैट.";
    }
    get invalidDateRangeLabel() {
      return "तारीख की अमान्य सीमा.";
    }
    get invalidTimeLabel() {
      return "मान्य समय डालें";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "Power Off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "आखिरी पेज";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 लाइसेंस";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount लाइसेंस";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "लाइसेंस";
    }
    get menuBarMenuLabel() {
      return "मेन्यू बार का मेन्यू";
    }
    get modalBarrierDismissLabel() {
      return "खारिज करें";
    }
    get moreButtonTooltip() {
      return "ज़्यादा";
    }
    get nextMonthTooltip() {
      return "अगला महीना";
    }
    get nextPageTooltip() {
      return "अगला पेज";
    }
    get okButtonLabel() {
      return "ठीक है";
    }
    get openAppDrawerTooltip() {
      return "नेविगेशन मेन्यू खोलें";
    }
    get pageRowsInfoTitleRaw() {
      return "$rowCount का $firstRow–$lastRow";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$rowCount में से करीब $firstRow–$lastRow";
    }
    get pasteButtonLabel() {
      return "चिपकाएं";
    }
    get popupMenuLabel() {
      return "पॉपअप मेन्यू";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "पिछला महीना";
    }
    get previousPageTooltip() {
      return "पिछला पेज";
    }
    get refreshIndicatorSemanticLabel() {
      return "रीफ़्रेश करें";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "एक वर्ण आैर डाला जा सकता है";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount वर्ण आैर डाले जा सकते हैं";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "नीचे ले जाएं";
    }
    get reorderItemLeft() {
      return "बाएं ले जाएं";
    }
    get reorderItemRight() {
      return "दाएं ले जाएं";
    }
    get reorderItemToEnd() {
      return "आखिर में ले जाएं";
    }
    get reorderItemToStart() {
      return "शुरुआत पर ले जाएं";
    }
    get reorderItemUp() {
      return "ऊपर ले जाएं";
    }
    get rowsPerPageTitle() {
      return "हर पेज में पंक्तियों की संख्या:";
    }
    get saveButtonLabel() {
      return "सेव करें";
    }
    get scriptCategory() {
      return typography.ScriptCategory.dense;
    }
    get searchFieldLabel() {
      return "खोजें";
    }
    get selectAllButtonLabel() {
      return "सभी को चुनें";
    }
    get selectYearSemanticsLabel() {
      return "साल चुनें";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 चीज़ चुनी गई";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount चीज़ें चुनी गईं";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "खाते दिखाएं";
    }
    get showMenuTooltip() {
      return "मेन्यू दिखाएं";
    }
    get signedInLabel() {
      return "साइन इन किया हुआ है";
    }
    get tabLabelRaw() {
      return "$tabCount का टैब $tabIndex";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.a_space_h_colon_mm;
    }
    get timePickerDialHelpText() {
      return "समय क्षेत्र चुनें";
    }
    get timePickerHourLabel() {
      return "घंटा";
    }
    get timePickerHourModeAnnouncement() {
      return "घंटे के हिसाब से समय चुनें";
    }
    get timePickerInputHelpText() {
      return "समय डालें";
    }
    get timePickerMinuteLabel() {
      return "मिनट";
    }
    get timePickerMinuteModeAnnouncement() {
      return "मिनट के हिसाब से समय चुनें";
    }
    get unspecifiedDate() {
      return "तारीख";
    }
    get unspecifiedDateRange() {
      return "तारीख की सीमा";
    }
    get viewLicensesButtonLabel() {
      return "लाइसेंस देखें";
    }
  };
  (generated_material_localizations.MaterialLocalizationHi.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "hi";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationHi.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationHi.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationHi);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationHi);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationHi, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationHi.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationHi, I[2]);
  generated_material_localizations.MaterialLocalizationHr = class MaterialLocalizationHr extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationHr.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "O aplikaciji $applicationName";
    }
    get alertDialogLabel() {
      return "Upozorenje";
    }
    get anteMeridiemAbbreviation() {
      return "prijepodne";
    }
    get backButtonTooltip() {
      return "Natrag";
    }
    get calendarModeButtonLabel() {
      return "Prijeđite na kalendar";
    }
    get cancelButtonLabel() {
      return "ODUSTANI";
    }
    get closeButtonLabel() {
      return "ZATVORI";
    }
    get closeButtonTooltip() {
      return "Zatvaranje";
    }
    get collapsedIconTapHint() {
      return "Proširi";
    }
    get continueButtonLabel() {
      return "NASTAVI";
    }
    get copyButtonLabel() {
      return "Kopiraj";
    }
    get cutButtonLabel() {
      return "Izreži";
    }
    get dateHelpText() {
      return "dd. mm. gggg.";
    }
    get dateInputLabel() {
      return "Unesite datum";
    }
    get dateOutOfRangeLabel() {
      return "Izvan raspona.";
    }
    get datePickerHelpText() {
      return "ODABERITE DATUM";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Datum završetka $fullDate";
    }
    get dateRangeEndLabel() {
      return "Datum završetka";
    }
    get dateRangePickerHelpText() {
      return "ODABERITE RASPON";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Datum početka $fullDate";
    }
    get dateRangeStartLabel() {
      return "Datum početka";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Brisanje";
    }
    get dialModeButtonLabel() {
      return "Prijelaz na način alata za odabir biranja";
    }
    get dialogLabel() {
      return "Dijalog";
    }
    get drawerLabel() {
      return "Navigacijski izbornik";
    }
    get expandedIconTapHint() {
      return "Sažmi";
    }
    get firstPageTooltip() {
      return "Prva stranica";
    }
    get hideAccountsLabel() {
      return "Sakrijte račune";
    }
    get inputDateModeButtonLabel() {
      return "Prijeđite na unos";
    }
    get inputTimeModeButtonLabel() {
      return "Prijelaz na način unosa teksta";
    }
    get invalidDateFormatLabel() {
      return "Format nije važeći.";
    }
    get invalidDateRangeLabel() {
      return "Raspon nije važeći.";
    }
    get invalidTimeLabel() {
      return "Unesite važeće vrijeme";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Kanal prema dolje";
    }
    get keyboardKeyChannelUp() {
      return "Kanal prema gore";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Izbaci";
    }
    get keyboardKeyEnd() {
      return "Kraj";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Umetni";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Naredba";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Broj 0";
    }
    get keyboardKeyNumpad1() {
      return "Broj 1";
    }
    get keyboardKeyNumpad2() {
      return "Broj 2";
    }
    get keyboardKeyNumpad3() {
      return "Broj 3";
    }
    get keyboardKeyNumpad4() {
      return "Broj 4";
    }
    get keyboardKeyNumpad5() {
      return "Broj 5";
    }
    get keyboardKeyNumpad6() {
      return "Broj 6";
    }
    get keyboardKeyNumpad7() {
      return "Broj 7";
    }
    get keyboardKeyNumpad8() {
      return "Broj 8";
    }
    get keyboardKeyNumpad9() {
      return "Broj 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Broj +";
    }
    get keyboardKeyNumpadComma() {
      return "Broj ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Broj .";
    }
    get keyboardKeyNumpadDivide() {
      return "Broj /";
    }
    get keyboardKeyNumpadEnter() {
      return "Broj Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Broj =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Broj *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Broj (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Broj )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Broj -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Napajanje";
    }
    get keyboardKeyPowerOff() {
      return "Isključivanje";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Odaberi";
    }
    get keyboardKeySpace() {
      return "Razmaknica";
    }
    get lastPageTooltip() {
      return "Posljednja stranica";
    }
    get licensesPackageDetailTextFew() {
      return "$licenseCount licence";
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 licenca";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licenci";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Licence";
    }
    get menuBarMenuLabel() {
      return "Izbornik trake izbornika";
    }
    get modalBarrierDismissLabel() {
      return "Odbaci";
    }
    get moreButtonTooltip() {
      return "Više";
    }
    get nextMonthTooltip() {
      return "Sljedeći mjesec";
    }
    get nextPageTooltip() {
      return "Sljedeća stranica";
    }
    get okButtonLabel() {
      return "U REDU";
    }
    get openAppDrawerTooltip() {
      return "Otvaranje izbornika za navigaciju";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow – $lastRow od $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow – $lastRow od otprilike $rowCount";
    }
    get pasteButtonLabel() {
      return "Zalijepi";
    }
    get popupMenuLabel() {
      return "Skočni izbornik";
    }
    get postMeridiemAbbreviation() {
      return "popodne";
    }
    get previousMonthTooltip() {
      return "Prethodni mjesec";
    }
    get previousPageTooltip() {
      return "Prethodna stranica";
    }
    get refreshIndicatorSemanticLabel() {
      return "Osvježi";
    }
    get remainingTextFieldCharacterCountFew() {
      return "Preostala su $remainingCount znaka";
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "Preostao je 1 znak";
    }
    get remainingTextFieldCharacterCountOther() {
      return "Preostalo je $remainingCount znakova";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Pomakni prema dolje";
    }
    get reorderItemLeft() {
      return "Pomakni ulijevo";
    }
    get reorderItemRight() {
      return "Pomakni udesno";
    }
    get reorderItemToEnd() {
      return "Premjesti na kraj";
    }
    get reorderItemToStart() {
      return "Premjesti na početak";
    }
    get reorderItemUp() {
      return "Pomakni prema gore";
    }
    get rowsPerPageTitle() {
      return "Redaka po stranici:";
    }
    get saveButtonLabel() {
      return "SPREMI";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Pretražite";
    }
    get selectAllButtonLabel() {
      return "Odaberi sve";
    }
    get selectYearSemanticsLabel() {
      return "Odaberite godinu";
    }
    get selectedRowCountTitleFew() {
      return "Odabrane su $selectedRowCount stavke";
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "Odabrana je jedna stavka";
    }
    get selectedRowCountTitleOther() {
      return "Odabrano je $selectedRowCount stavki";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Prikažite račune";
    }
    get showMenuTooltip() {
      return "Prikaz izbornika";
    }
    get signedInLabel() {
      return "Prijavljeni korisnik";
    }
    get tabLabelRaw() {
      return "Kartica $tabIndex od $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "ODABERITE VRIJEME";
    }
    get timePickerHourLabel() {
      return "Sat";
    }
    get timePickerHourModeAnnouncement() {
      return "Odaberite sate";
    }
    get timePickerInputHelpText() {
      return "UNESITE VRIJEME";
    }
    get timePickerMinuteLabel() {
      return "Minuta";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Odaberite minute";
    }
    get unspecifiedDate() {
      return "Datum";
    }
    get unspecifiedDateRange() {
      return "Datumski raspon";
    }
    get viewLicensesButtonLabel() {
      return "PRIKAŽI LICENCE";
    }
  };
  (generated_material_localizations.MaterialLocalizationHr.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "hr";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationHr.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationHr.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationHr);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationHr);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationHr, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationHr.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationHr, I[2]);
  generated_material_localizations.MaterialLocalizationHu = class MaterialLocalizationHu extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationHu.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "A(z) $applicationName névjegye";
    }
    get alertDialogLabel() {
      return "Értesítés";
    }
    get anteMeridiemAbbreviation() {
      return "de.";
    }
    get backButtonTooltip() {
      return "Vissza";
    }
    get calendarModeButtonLabel() {
      return "Váltás naptárra";
    }
    get cancelButtonLabel() {
      return "MÉGSE";
    }
    get closeButtonLabel() {
      return "BEZÁRÁS";
    }
    get closeButtonTooltip() {
      return "Bezárás";
    }
    get collapsedIconTapHint() {
      return "Kibontás";
    }
    get continueButtonLabel() {
      return "TOVÁBB";
    }
    get copyButtonLabel() {
      return "Másolás";
    }
    get cutButtonLabel() {
      return "Kivágás";
    }
    get dateHelpText() {
      return "éééé. hh. nn.";
    }
    get dateInputLabel() {
      return "Adja meg a dátumot";
    }
    get dateOutOfRangeLabel() {
      return "Tartományon kívül.";
    }
    get datePickerHelpText() {
      return "DÁTUM KIVÁLASZTÁSA";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Befejezés dátuma: $fullDate";
    }
    get dateRangeEndLabel() {
      return "Befejezés dátuma";
    }
    get dateRangePickerHelpText() {
      return "TARTOMÁNY KIJELÖLÉSE";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Kezdés dátuma: $fullDate";
    }
    get dateRangeStartLabel() {
      return "Kezdés dátuma";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Törlés";
    }
    get dialModeButtonLabel() {
      return "Váltás időpontválasztó módra";
    }
    get dialogLabel() {
      return "Párbeszédablak";
    }
    get drawerLabel() {
      return "Navigációs menü";
    }
    get expandedIconTapHint() {
      return "Összecsukás";
    }
    get firstPageTooltip() {
      return "Első oldal";
    }
    get hideAccountsLabel() {
      return "Fiókok elrejtése";
    }
    get inputDateModeButtonLabel() {
      return "Váltás bevitelre";
    }
    get inputTimeModeButtonLabel() {
      return "Váltás szövegbeviteli módra";
    }
    get invalidDateFormatLabel() {
      return "Érvénytelen formátum.";
    }
    get invalidDateRangeLabel() {
      return "Érvénytelen tartomány.";
    }
    get invalidTimeLabel() {
      return "Érvényes formátumban adja meg az időt";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Csatorna – le";
    }
    get keyboardKeyChannelUp() {
      return "Csatorna – fel";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Kiadás";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Bekapcsolás";
    }
    get keyboardKeyPowerOff() {
      return "Kikapcsolás";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Kiválasztás";
    }
    get keyboardKeySpace() {
      return "Szóköz";
    }
    get lastPageTooltip() {
      return "Utolsó oldal";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 licenc";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licenc";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Licencek";
    }
    get menuBarMenuLabel() {
      return "Menüsor menüje";
    }
    get modalBarrierDismissLabel() {
      return "Elvetés";
    }
    get moreButtonTooltip() {
      return "Több";
    }
    get nextMonthTooltip() {
      return "Következő hónap";
    }
    get nextPageTooltip() {
      return "Következő oldal";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Navigációs menü megnyitása";
    }
    get pageRowsInfoTitleRaw() {
      return "$rowCount/$firstRow–$lastRow.";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "Körülbelül $rowCount/$firstRow–$lastRow.";
    }
    get pasteButtonLabel() {
      return "Beillesztés";
    }
    get popupMenuLabel() {
      return "Előugró menü";
    }
    get postMeridiemAbbreviation() {
      return "du.";
    }
    get previousMonthTooltip() {
      return "Előző hónap";
    }
    get previousPageTooltip() {
      return "Előző oldal";
    }
    get refreshIndicatorSemanticLabel() {
      return "Frissítés";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 karakter maradt";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount karakter maradt";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Áthelyezés lefelé";
    }
    get reorderItemLeft() {
      return "Áthelyezés balra";
    }
    get reorderItemRight() {
      return "Áthelyezés jobbra";
    }
    get reorderItemToEnd() {
      return "Áthelyezés a végére";
    }
    get reorderItemToStart() {
      return "Áthelyezés az elejére";
    }
    get reorderItemUp() {
      return "Áthelyezés felfelé";
    }
    get rowsPerPageTitle() {
      return "Oldalankénti sorszám:";
    }
    get saveButtonLabel() {
      return "MENTÉS";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Keresés";
    }
    get selectAllButtonLabel() {
      return "Összes kijelölése";
    }
    get selectYearSemanticsLabel() {
      return "Válassza ki az évet";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 elem kiválasztva";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount elem kiválasztva";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Fiókok megjelenítése";
    }
    get showMenuTooltip() {
      return "Menü megjelenítése";
    }
    get signedInLabel() {
      return "Bejelentkezve";
    }
    get tabLabelRaw() {
      return "$tabCount/$tabIndex. lap";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "IDŐPONT KIVÁLASZTÁSA";
    }
    get timePickerHourLabel() {
      return "Óra";
    }
    get timePickerHourModeAnnouncement() {
      return "Óra kiválasztása";
    }
    get timePickerInputHelpText() {
      return "IDŐPONT MEGADÁSA";
    }
    get timePickerMinuteLabel() {
      return "Perc";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Perc kiválasztása";
    }
    get unspecifiedDate() {
      return "Dátum";
    }
    get unspecifiedDateRange() {
      return "Dátumtartomány";
    }
    get viewLicensesButtonLabel() {
      return "LICENCEK MEGTEKINTÉSE";
    }
  };
  (generated_material_localizations.MaterialLocalizationHu.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "hu";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationHu.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationHu.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationHu);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationHu);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationHu, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationHu.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationHu, I[2]);
  generated_material_localizations.MaterialLocalizationHy = class MaterialLocalizationHy extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationHy.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName հավելվածի մասին";
    }
    get alertDialogLabel() {
      return "Ծանուցում";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "Հետ";
    }
    get calendarModeButtonLabel() {
      return "Անցնել օրացույցին";
    }
    get cancelButtonLabel() {
      return "ՉԵՂԱՐԿԵԼ";
    }
    get closeButtonLabel() {
      return "ՓԱԿԵԼ";
    }
    get closeButtonTooltip() {
      return "Փակել";
    }
    get collapsedIconTapHint() {
      return "Ծավալել";
    }
    get continueButtonLabel() {
      return "ՇԱՐՈՒՆԱԿԵԼ";
    }
    get copyButtonLabel() {
      return "Պատճենել";
    }
    get cutButtonLabel() {
      return "Կտրել";
    }
    get dateHelpText() {
      return "օօ.աա.տտտտ";
    }
    get dateInputLabel() {
      return "Մուտքագրել ամսաթիվ";
    }
    get dateOutOfRangeLabel() {
      return "Թույլատրելի ընդգրկույթից դուրս է։";
    }
    get datePickerHelpText() {
      return "ԸՆՏՐԵԼ ԱՄՍԱԹԻՎ";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Ավարտի ամսաթիվը՝ $fullDate";
    }
    get dateRangeEndLabel() {
      return "Ավարտի ամսաթիվը";
    }
    get dateRangePickerHelpText() {
      return "ԸՆՏՐԵԼ ԺԱՄԱՆԱԿԱՀԱՏՎԱԾ";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Մեկնարկի ամսաթիվը՝ $fullDate";
    }
    get dateRangeStartLabel() {
      return "Մեկնարկի ամսաթիվը";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Ջնջել";
    }
    get dialModeButtonLabel() {
      return "Անցնել թվերի ընտրման ռեժիմին";
    }
    get dialogLabel() {
      return "Երկխոսության պատուհան";
    }
    get drawerLabel() {
      return "Նավիգացիայի ընտրացանկ";
    }
    get expandedIconTapHint() {
      return "Ծալել";
    }
    get firstPageTooltip() {
      return "Առաջին էջ";
    }
    get hideAccountsLabel() {
      return "Թաքցնել հաշիվները";
    }
    get inputDateModeButtonLabel() {
      return "Անցնել ներածման ռեժիմին";
    }
    get inputTimeModeButtonLabel() {
      return "Անցնել տեքստի մուտքագրման ռեժիմին";
    }
    get invalidDateFormatLabel() {
      return "Ձևաչափն անվավեր է։";
    }
    get invalidDateRangeLabel() {
      return "Ժամանակահատվածն անվավեր է:";
    }
    get invalidTimeLabel() {
      return "Մուտքագրեք վավեր ժամ";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Հաջորդ ալիքը";
    }
    get keyboardKeyChannelUp() {
      return "Նախորդ ալիքը";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Սնուցում";
    }
    get keyboardKeyPowerOff() {
      return "Անջատել";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Ընտրել";
    }
    get keyboardKeySpace() {
      return "Բացատ";
    }
    get lastPageTooltip() {
      return "Վերջին էջ";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 լիցենզիա";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount լիցենզիա";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Արտոնագրեր";
    }
    get menuBarMenuLabel() {
      return "Ընտրացանկի գոտու ընտրացանկ";
    }
    get modalBarrierDismissLabel() {
      return "Փակել";
    }
    get moreButtonTooltip() {
      return "Այլ";
    }
    get nextMonthTooltip() {
      return "Հաջորդ ամիս";
    }
    get nextPageTooltip() {
      return "Հաջորդ էջ";
    }
    get okButtonLabel() {
      return "Եղավ";
    }
    get openAppDrawerTooltip() {
      return "Բացել նավիգացիայի ընտրացանկը";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow $rowCount-ից";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow մոտավորապես $rowCount-ից";
    }
    get pasteButtonLabel() {
      return "Տեղադրել";
    }
    get popupMenuLabel() {
      return "Ելնող ընտրացանկ";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "Նախորդ ամիս";
    }
    get previousPageTooltip() {
      return "Նախորդ էջ";
    }
    get refreshIndicatorSemanticLabel() {
      return "Թարմացնել";
    }
    get remainingTextFieldCharacterCountFew() {
      return "Մնաց $remainingCount նիշ";
    }
    get remainingTextFieldCharacterCountMany() {
      return "Մնաց $remainingCount նիշ";
    }
    get remainingTextFieldCharacterCountOne() {
      return "Մնացել է 1 նիշ";
    }
    get remainingTextFieldCharacterCountOther() {
      return "Մնացել է $remainingCount նիշ";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "Նիշի հնարավորություն չկա";
    }
    get reorderItemDown() {
      return "Տեղափոխել ներքև";
    }
    get reorderItemLeft() {
      return "Տեղափոխել ձախ";
    }
    get reorderItemRight() {
      return "Տեղափոխել աջ";
    }
    get reorderItemToEnd() {
      return "Տեղափոխել վերջ";
    }
    get reorderItemToStart() {
      return "Տեղափոխել սկիզբ";
    }
    get reorderItemUp() {
      return "Տեղափոխել վերև";
    }
    get rowsPerPageTitle() {
      return "Մեկ էջի տողերը՝";
    }
    get saveButtonLabel() {
      return "ՊԱՀԵԼ";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Որոնել";
    }
    get selectAllButtonLabel() {
      return "Նշել բոլորը";
    }
    get selectYearSemanticsLabel() {
      return "Ընտրել տարին";
    }
    get selectedRowCountTitleFew() {
      return "Ընտրված է $selectedRowCount օբյեկտ";
    }
    get selectedRowCountTitleMany() {
      return "Ընտրված է $selectedRowCount օբյեկտ";
    }
    get selectedRowCountTitleOne() {
      return "Ընտրվել է 1 տարր";
    }
    get selectedRowCountTitleOther() {
      return "Ընտրվել է $selectedRowCount տարր";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return "Տողերը ընտրված չեն";
    }
    get showAccountsLabel() {
      return "Ցույց տալ հաշիվները";
    }
    get showMenuTooltip() {
      return "Ցույց տալ ընտրացանկը";
    }
    get signedInLabel() {
      return "Դուք մուտք եք գործել";
    }
    get tabLabelRaw() {
      return "Ներդիր $tabIndex՝ $tabCount-ից";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "ԸՆՏՐԵՔ ԺԱՄԸ";
    }
    get timePickerHourLabel() {
      return "Ժամ";
    }
    get timePickerHourModeAnnouncement() {
      return "Ընտրեք ժամը";
    }
    get timePickerInputHelpText() {
      return "ՄՈՒՏՔԱԳՐԵՔ ԺԱՄԸ";
    }
    get timePickerMinuteLabel() {
      return "Րոպե";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Ընտրեք րոպեները";
    }
    get unspecifiedDate() {
      return "Ամսաթիվ";
    }
    get unspecifiedDateRange() {
      return "Ժամանակահատված";
    }
    get viewLicensesButtonLabel() {
      return "ԴԻՏԵԼ ԱՐՏՈՆԱԳՐԵՐԸ";
    }
  };
  (generated_material_localizations.MaterialLocalizationHy.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "hy";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationHy.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationHy.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationHy);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationHy);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationHy, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationHy.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationHy, I[2]);
  generated_material_localizations.MaterialLocalizationId = class MaterialLocalizationId extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationId.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Tentang $applicationName";
    }
    get alertDialogLabel() {
      return "Notifikasi";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "Kembali";
    }
    get calendarModeButtonLabel() {
      return "Beralih ke kalender";
    }
    get cancelButtonLabel() {
      return "BATAL";
    }
    get closeButtonLabel() {
      return "TUTUP";
    }
    get closeButtonTooltip() {
      return "Tutup";
    }
    get collapsedIconTapHint() {
      return "Luaskan";
    }
    get continueButtonLabel() {
      return "LANJUTKAN";
    }
    get copyButtonLabel() {
      return "Salin";
    }
    get cutButtonLabel() {
      return "Potong";
    }
    get dateHelpText() {
      return "hh/bb/tttt";
    }
    get dateInputLabel() {
      return "Masukkan Tanggal";
    }
    get dateOutOfRangeLabel() {
      return "Di luar rentang.";
    }
    get datePickerHelpText() {
      return "PILIH TANGGAL";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Tanggal akhir $fullDate";
    }
    get dateRangeEndLabel() {
      return "Tanggal Akhir";
    }
    get dateRangePickerHelpText() {
      return "PILIH RENTANG";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Tanggal mulai $fullDate";
    }
    get dateRangeStartLabel() {
      return "Tanggal Mulai";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "Hapus";
    }
    get dialModeButtonLabel() {
      return "Beralih ke mode tampilan jam";
    }
    get dialogLabel() {
      return "Dialog";
    }
    get drawerLabel() {
      return "Menu navigasi";
    }
    get expandedIconTapHint() {
      return "Ciutkan";
    }
    get firstPageTooltip() {
      return "Halaman pertama";
    }
    get hideAccountsLabel() {
      return "Sembunyikan akun";
    }
    get inputDateModeButtonLabel() {
      return "Beralih ke masukan";
    }
    get inputTimeModeButtonLabel() {
      return "Beralih ke mode input teks";
    }
    get invalidDateFormatLabel() {
      return "Format tidak valid.";
    }
    get invalidDateRangeLabel() {
      return "Rentang tidak valid.";
    }
    get invalidTimeLabel() {
      return "Masukkan waktu yang valid";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "Power Off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "Halaman terakhir";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 lisensi";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount lisensi";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Lisensi";
    }
    get menuBarMenuLabel() {
      return "Menu panel menu";
    }
    get modalBarrierDismissLabel() {
      return "Tutup";
    }
    get moreButtonTooltip() {
      return "Lainnya";
    }
    get nextMonthTooltip() {
      return "Bulan berikutnya";
    }
    get nextPageTooltip() {
      return "Halaman berikutnya";
    }
    get okButtonLabel() {
      return "OKE";
    }
    get openAppDrawerTooltip() {
      return "Buka menu navigasi";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow dari $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow dari kira-kira $rowCount";
    }
    get pasteButtonLabel() {
      return "Tempel";
    }
    get popupMenuLabel() {
      return "Menu pop-up";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "Bulan sebelumnya";
    }
    get previousPageTooltip() {
      return "Halaman sebelumnya";
    }
    get refreshIndicatorSemanticLabel() {
      return "Memuat ulang";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "Sisa 1 karakter";
    }
    get remainingTextFieldCharacterCountOther() {
      return "Sisa $remainingCount karakter";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Turunkan";
    }
    get reorderItemLeft() {
      return "Pindahkan ke kiri";
    }
    get reorderItemRight() {
      return "Pindahkan ke kanan";
    }
    get reorderItemToEnd() {
      return "Pindahkan ke akhir";
    }
    get reorderItemToStart() {
      return "Pindahkan ke awal";
    }
    get reorderItemUp() {
      return "Naikkan";
    }
    get rowsPerPageTitle() {
      return "Baris per halaman:";
    }
    get saveButtonLabel() {
      return "SIMPAN";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Telusuri";
    }
    get selectAllButtonLabel() {
      return "Pilih semua";
    }
    get selectYearSemanticsLabel() {
      return "Pilih tahun";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 item dipilih";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount item dipilih";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Tampilkan akun";
    }
    get showMenuTooltip() {
      return "Tampilkan menu";
    }
    get signedInLabel() {
      return "Telah login";
    }
    get tabLabelRaw() {
      return "Tab $tabIndex dari $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_dot_mm;
    }
    get timePickerDialHelpText() {
      return "PILIH WAKTU";
    }
    get timePickerHourLabel() {
      return "Jam";
    }
    get timePickerHourModeAnnouncement() {
      return "Pilih jam";
    }
    get timePickerInputHelpText() {
      return "MASUKKAN WAKTU";
    }
    get timePickerMinuteLabel() {
      return "Menit";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Pilih menit";
    }
    get unspecifiedDate() {
      return "Tanggal";
    }
    get unspecifiedDateRange() {
      return "Rentang tanggal";
    }
    get viewLicensesButtonLabel() {
      return "LIHAT LISENSI";
    }
  };
  (generated_material_localizations.MaterialLocalizationId.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "id";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationId.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationId.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationId);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationId);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationId, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationId.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationId, I[2]);
  generated_material_localizations.MaterialLocalizationIs = class MaterialLocalizationIs extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationIs.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Um $applicationName";
    }
    get alertDialogLabel() {
      return "Tilkynning";
    }
    get anteMeridiemAbbreviation() {
      return "f.h.";
    }
    get backButtonTooltip() {
      return "Til baka";
    }
    get calendarModeButtonLabel() {
      return "Skipta yfir í dagatal";
    }
    get cancelButtonLabel() {
      return "HÆTTA";
    }
    get closeButtonLabel() {
      return "LOKA";
    }
    get closeButtonTooltip() {
      return "Loka";
    }
    get collapsedIconTapHint() {
      return "Stækka";
    }
    get continueButtonLabel() {
      return "HALDA ÁFRAM";
    }
    get copyButtonLabel() {
      return "Afrita";
    }
    get cutButtonLabel() {
      return "Klippa";
    }
    get dateHelpText() {
      return "dd.mm.áááá";
    }
    get dateInputLabel() {
      return "Slá inn dagsetningu";
    }
    get dateOutOfRangeLabel() {
      return "Utan sviðs.";
    }
    get datePickerHelpText() {
      return "VELJA DAGSETNINGU";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Lokadagur $fullDate";
    }
    get dateRangeEndLabel() {
      return "Lokadagur";
    }
    get dateRangePickerHelpText() {
      return "VELJA SVIÐ";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Upphafsdagur $fullDate";
    }
    get dateRangeStartLabel() {
      return "Upphafsdagur";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "Eyða";
    }
    get dialModeButtonLabel() {
      return "Skiptu yfir í skífuval";
    }
    get dialogLabel() {
      return "Gluggi";
    }
    get drawerLabel() {
      return "Yfirlitsvalmynd";
    }
    get expandedIconTapHint() {
      return "Draga saman";
    }
    get firstPageTooltip() {
      return "Fyrsta síða";
    }
    get hideAccountsLabel() {
      return "Fela reikninga";
    }
    get inputDateModeButtonLabel() {
      return "Skipta yfir í innslátt";
    }
    get inputTimeModeButtonLabel() {
      return "Skiptu yfir í textainnslátt";
    }
    get invalidDateFormatLabel() {
      return "Ógilt snið.";
    }
    get invalidDateRangeLabel() {
      return "Ógilt svið.";
    }
    get invalidTimeLabel() {
      return "Færðu inn gildan tíma";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Bakklykill";
    }
    get keyboardKeyCapsLock() {
      return "Hástafalás";
    }
    get keyboardKeyChannelDown() {
      return "Niður um rás";
    }
    get keyboardKeyChannelUp() {
      return "Upp um rás";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Fjarlægja";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Aflrofi";
    }
    get keyboardKeyPowerOff() {
      return "Slökkva";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Velja";
    }
    get keyboardKeySpace() {
      return "Bil";
    }
    get lastPageTooltip() {
      return "Síðasta síða";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 leyfi";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount leyfi";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Leyfi";
    }
    get menuBarMenuLabel() {
      return "Valmyndarstika";
    }
    get modalBarrierDismissLabel() {
      return "Hunsa";
    }
    get moreButtonTooltip() {
      return "Meira";
    }
    get nextMonthTooltip() {
      return "Næsti mánuður";
    }
    get nextPageTooltip() {
      return "Næsta síða";
    }
    get okButtonLabel() {
      return "Í lagi";
    }
    get openAppDrawerTooltip() {
      return "Opna yfirlitsvalmynd";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow – $lastRow af $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow – $lastRow af um það bil $rowCount";
    }
    get pasteButtonLabel() {
      return "Líma";
    }
    get popupMenuLabel() {
      return "Sprettivalmynd";
    }
    get postMeridiemAbbreviation() {
      return "e.h.";
    }
    get previousMonthTooltip() {
      return "Fyrri mánuður";
    }
    get previousPageTooltip() {
      return "Fyrri síða";
    }
    get refreshIndicatorSemanticLabel() {
      return "Endurnýja";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 stafur eftir";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount stafir eftir";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "Færa niður";
    }
    get reorderItemLeft() {
      return "Færa til vinstri";
    }
    get reorderItemRight() {
      return "Færa til hægri";
    }
    get reorderItemToEnd() {
      return "Færa aftast";
    }
    get reorderItemToStart() {
      return "Færa fremst";
    }
    get reorderItemUp() {
      return "Færa upp";
    }
    get rowsPerPageTitle() {
      return "Línur á síðu:";
    }
    get saveButtonLabel() {
      return "VISTA";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Leit";
    }
    get selectAllButtonLabel() {
      return "Velja allt";
    }
    get selectYearSemanticsLabel() {
      return "Velja ár";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 atriði valið";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount atriði valin";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Sýna reikninga";
    }
    get showMenuTooltip() {
      return "Sýna valmynd";
    }
    get signedInLabel() {
      return "Innskráð(ur)";
    }
    get tabLabelRaw() {
      return "Flipi $tabIndex af $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "VELJA TÍMA";
    }
    get timePickerHourLabel() {
      return "Klukkustund";
    }
    get timePickerHourModeAnnouncement() {
      return "Velja klukkustundir";
    }
    get timePickerInputHelpText() {
      return "FÆRA INN TÍMA";
    }
    get timePickerMinuteLabel() {
      return "Mínúta";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Velja mínútur";
    }
    get unspecifiedDate() {
      return "Dagsetning";
    }
    get unspecifiedDateRange() {
      return "Tímabil";
    }
    get viewLicensesButtonLabel() {
      return "SKOÐA LEYFI";
    }
  };
  (generated_material_localizations.MaterialLocalizationIs.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "is";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationIs.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationIs.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationIs);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationIs);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationIs, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationIs.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationIs, I[2]);
  generated_material_localizations.MaterialLocalizationIt = class MaterialLocalizationIt extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationIt.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Informazioni su $applicationName";
    }
    get alertDialogLabel() {
      return "Avviso";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "Indietro";
    }
    get calendarModeButtonLabel() {
      return "Passa al calendario";
    }
    get cancelButtonLabel() {
      return "ANNULLA";
    }
    get closeButtonLabel() {
      return "CHIUDI";
    }
    get closeButtonTooltip() {
      return "Chiudi";
    }
    get collapsedIconTapHint() {
      return "Espandi";
    }
    get continueButtonLabel() {
      return "CONTINUA";
    }
    get copyButtonLabel() {
      return "Copia";
    }
    get cutButtonLabel() {
      return "Taglia";
    }
    get dateHelpText() {
      return "mm/gg/aaaa";
    }
    get dateInputLabel() {
      return "Inserisci data";
    }
    get dateOutOfRangeLabel() {
      return "Fuori intervallo.";
    }
    get datePickerHelpText() {
      return "SELEZIONA DATA";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Data di fine $fullDate";
    }
    get dateRangeEndLabel() {
      return "Data di fine";
    }
    get dateRangePickerHelpText() {
      return "SELEZIONA INTERVALLO";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Data di inizio $fullDate";
    }
    get dateRangeStartLabel() {
      return "Data di inizio";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "Elimina";
    }
    get dialModeButtonLabel() {
      return "Passa alla modalità selettore del quadrante";
    }
    get dialogLabel() {
      return "Finestra di dialogo";
    }
    get drawerLabel() {
      return "Menu di navigazione";
    }
    get expandedIconTapHint() {
      return "Comprimi";
    }
    get firstPageTooltip() {
      return "Prima pagina";
    }
    get hideAccountsLabel() {
      return "Nascondi account";
    }
    get inputDateModeButtonLabel() {
      return "Passa alla modalità di immissione";
    }
    get inputTimeModeButtonLabel() {
      return "Passa alla modalità immissione testo";
    }
    get invalidDateFormatLabel() {
      return "Formato non valido.";
    }
    get invalidDateRangeLabel() {
      return "Intervallo non valido.";
    }
    get invalidTimeLabel() {
      return "Inserisci un orario valido";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "Alt Gr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Bloc Maiusc";
    }
    get keyboardKeyChannelDown() {
      return "Canale giù";
    }
    get keyboardKeyChannelUp() {
      return "Canale su";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Canc";
    }
    get keyboardKeyEject() {
      return "Espelli";
    }
    get keyboardKeyEnd() {
      return "Fine";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Ins";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Comando";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Bloc Num";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Invio";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "Pag giù";
    }
    get keyboardKeyPageUp() {
      return "Pag su";
    }
    get keyboardKeyPower() {
      return "Spegni/Accendi";
    }
    get keyboardKeyPowerOff() {
      return "Spegni";
    }
    get keyboardKeyPrintScreen() {
      return "Stamp";
    }
    get keyboardKeyScrollLock() {
      return "Bloc Scorr";
    }
    get keyboardKeySelect() {
      return "Seleziona";
    }
    get keyboardKeySpace() {
      return "Barra spaziatrice";
    }
    get lastPageTooltip() {
      return "Ultima pagina";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 licenza";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licenze";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Licenze";
    }
    get menuBarMenuLabel() {
      return "Menu barra dei menu";
    }
    get modalBarrierDismissLabel() {
      return "Ignora";
    }
    get moreButtonTooltip() {
      return "Altro";
    }
    get nextMonthTooltip() {
      return "Mese successivo";
    }
    get nextPageTooltip() {
      return "Pagina successiva";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Apri il menu di navigazione";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow-$lastRow di $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow-$lastRow di circa $rowCount";
    }
    get pasteButtonLabel() {
      return "Incolla";
    }
    get popupMenuLabel() {
      return "Menu popup";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "Mese precedente";
    }
    get previousPageTooltip() {
      return "Pagina precedente";
    }
    get refreshIndicatorSemanticLabel() {
      return "Aggiorna";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 carattere rimanente";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount caratteri rimanenti";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Sposta giù";
    }
    get reorderItemLeft() {
      return "Sposta a sinistra";
    }
    get reorderItemRight() {
      return "Sposta a destra";
    }
    get reorderItemToEnd() {
      return "Sposta alla fine";
    }
    get reorderItemToStart() {
      return "Sposta all'inizio";
    }
    get reorderItemUp() {
      return "Sposta su";
    }
    get rowsPerPageTitle() {
      return "Righe per pagina:";
    }
    get saveButtonLabel() {
      return "SALVA";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Cerca";
    }
    get selectAllButtonLabel() {
      return "Seleziona tutto";
    }
    get selectYearSemanticsLabel() {
      return "Seleziona anno";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 elemento selezionato";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount elementi selezionati";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Mostra account";
    }
    get showMenuTooltip() {
      return "Mostra il menu";
    }
    get signedInLabel() {
      return "Connesso";
    }
    get tabLabelRaw() {
      return "Scheda $tabIndex di $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "SELEZIONA L'ORA";
    }
    get timePickerHourLabel() {
      return "Ora";
    }
    get timePickerHourModeAnnouncement() {
      return "Seleziona le ore";
    }
    get timePickerInputHelpText() {
      return "INSERISCI L'ORA";
    }
    get timePickerMinuteLabel() {
      return "Minuto";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Seleziona i minuti";
    }
    get unspecifiedDate() {
      return "Data";
    }
    get unspecifiedDateRange() {
      return "Intervallo di date";
    }
    get viewLicensesButtonLabel() {
      return "VISUALIZZA LICENZE";
    }
  };
  (generated_material_localizations.MaterialLocalizationIt.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "it";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationIt.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationIt.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationIt);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationIt);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationIt, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationIt.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationIt, I[2]);
  generated_material_localizations.MaterialLocalizationJa = class MaterialLocalizationJa extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationJa.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName について";
    }
    get alertDialogLabel() {
      return "通知";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "戻る";
    }
    get calendarModeButtonLabel() {
      return "カレンダーに切り替え";
    }
    get cancelButtonLabel() {
      return "キャンセル";
    }
    get closeButtonLabel() {
      return "閉じる";
    }
    get closeButtonTooltip() {
      return "閉じる";
    }
    get collapsedIconTapHint() {
      return "展開";
    }
    get continueButtonLabel() {
      return "続行";
    }
    get copyButtonLabel() {
      return "コピー";
    }
    get cutButtonLabel() {
      return "切り取り";
    }
    get dateHelpText() {
      return "yyyy/mm/dd";
    }
    get dateInputLabel() {
      return "日付を入力";
    }
    get dateOutOfRangeLabel() {
      return "範囲外です。";
    }
    get datePickerHelpText() {
      return "日付の選択";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "終了日 $fullDate";
    }
    get dateRangeEndLabel() {
      return "終了日";
    }
    get dateRangePickerHelpText() {
      return "期間の選択";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "開始日 $fullDate";
    }
    get dateRangeStartLabel() {
      return "開始日";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "削除";
    }
    get dialModeButtonLabel() {
      return "ダイヤル選択ツール モードに切り替えます";
    }
    get dialogLabel() {
      return "ダイアログ";
    }
    get drawerLabel() {
      return "ナビゲーション メニュー";
    }
    get expandedIconTapHint() {
      return "折りたたむ";
    }
    get firstPageTooltip() {
      return "最初のページ";
    }
    get hideAccountsLabel() {
      return "アカウントを非表示";
    }
    get inputDateModeButtonLabel() {
      return "入力に切り替え";
    }
    get inputTimeModeButtonLabel() {
      return "テキスト入力モードに切り替えます";
    }
    get invalidDateFormatLabel() {
      return "形式が無効です。";
    }
    get invalidDateRangeLabel() {
      return "範囲が無効です。";
    }
    get invalidTimeLabel() {
      return "有効な時刻を入力してください";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "CapsLock";
    }
    get keyboardKeyChannelDown() {
      return "次のチャンネル";
    }
    get keyboardKeyChannelUp() {
      return "前のチャンネル";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "NumLock";
    }
    get keyboardKeyNumpad0() {
      return "テンキー 0";
    }
    get keyboardKeyNumpad1() {
      return "テンキー 1";
    }
    get keyboardKeyNumpad2() {
      return "テンキー 2";
    }
    get keyboardKeyNumpad3() {
      return "テンキー 3";
    }
    get keyboardKeyNumpad4() {
      return "テンキー 4";
    }
    get keyboardKeyNumpad5() {
      return "テンキー 5";
    }
    get keyboardKeyNumpad6() {
      return "テンキー 6";
    }
    get keyboardKeyNumpad7() {
      return "テンキー 7";
    }
    get keyboardKeyNumpad8() {
      return "テンキー 8";
    }
    get keyboardKeyNumpad9() {
      return "テンキー 9";
    }
    get keyboardKeyNumpadAdd() {
      return "テンキー +";
    }
    get keyboardKeyNumpadComma() {
      return "テンキー ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "テンキー .";
    }
    get keyboardKeyNumpadDivide() {
      return "テンキー /";
    }
    get keyboardKeyNumpadEnter() {
      return "テンキー Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "テンキー =";
    }
    get keyboardKeyNumpadMultiply() {
      return "テンキー *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "テンキー (";
    }
    get keyboardKeyNumpadParenRight() {
      return "テンキー )";
    }
    get keyboardKeyNumpadSubtract() {
      return "テンキー -";
    }
    get keyboardKeyPageDown() {
      return "PageDown";
    }
    get keyboardKeyPageUp() {
      return "PageUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "Power Off";
    }
    get keyboardKeyPrintScreen() {
      return "Printscreen";
    }
    get keyboardKeyScrollLock() {
      return "ScrollLock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "最後のページ";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "ライセンス: 1 件";
    }
    get licensesPackageDetailTextOther() {
      return "ライセンス: $licenseCount 件";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "ライセンス";
    }
    get menuBarMenuLabel() {
      return "メニューバーのメニュー";
    }
    get modalBarrierDismissLabel() {
      return "閉じる";
    }
    get moreButtonTooltip() {
      return "その他";
    }
    get nextMonthTooltip() {
      return "来月";
    }
    get nextPageTooltip() {
      return "次のページ";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "ナビゲーション メニューを開く";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow - $lastRow 行（合計 $rowCount 行）";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow – $lastRow 行（合計約 $rowCount 行）";
    }
    get pasteButtonLabel() {
      return "貼り付け";
    }
    get popupMenuLabel() {
      return "ポップアップ メニュー";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "前月";
    }
    get previousPageTooltip() {
      return "前のページ";
    }
    get refreshIndicatorSemanticLabel() {
      return "更新";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "残り 1 文字（半角相当）";
    }
    get remainingTextFieldCharacterCountOther() {
      return "残り $remainingCount 文字（半角相当）";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "下に移動";
    }
    get reorderItemLeft() {
      return "左に移動";
    }
    get reorderItemRight() {
      return "右に移動";
    }
    get reorderItemToEnd() {
      return "最後に移動";
    }
    get reorderItemToStart() {
      return "先頭に移動";
    }
    get reorderItemUp() {
      return "上に移動";
    }
    get rowsPerPageTitle() {
      return "ページあたりの行数:";
    }
    get saveButtonLabel() {
      return "保存";
    }
    get scriptCategory() {
      return typography.ScriptCategory.dense;
    }
    get searchFieldLabel() {
      return "検索";
    }
    get selectAllButtonLabel() {
      return "すべて選択";
    }
    get selectYearSemanticsLabel() {
      return "年を選択";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 件のアイテムを選択中";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount 件のアイテムを選択中";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "アカウントを表示";
    }
    get showMenuTooltip() {
      return "メニューを表示";
    }
    get signedInLabel() {
      return "ログイン中";
    }
    get tabLabelRaw() {
      return "タブ: $tabIndex/$tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "時刻の選択";
    }
    get timePickerHourLabel() {
      return "時";
    }
    get timePickerHourModeAnnouncement() {
      return "時間を選択";
    }
    get timePickerInputHelpText() {
      return "時刻の入力";
    }
    get timePickerMinuteLabel() {
      return "分";
    }
    get timePickerMinuteModeAnnouncement() {
      return "分を選択";
    }
    get unspecifiedDate() {
      return "日付";
    }
    get unspecifiedDateRange() {
      return "期間";
    }
    get viewLicensesButtonLabel() {
      return "ライセンスを表示";
    }
  };
  (generated_material_localizations.MaterialLocalizationJa.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "ja";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationJa.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationJa.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationJa);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationJa);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationJa, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationJa.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationJa, I[2]);
  generated_material_localizations.MaterialLocalizationKa = class MaterialLocalizationKa extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationKa.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName-ის შესახებ";
    }
    get alertDialogLabel() {
      return "გაფრთხილება";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "უკან";
    }
    get calendarModeButtonLabel() {
      return "კალენდარზე გადართვა";
    }
    get cancelButtonLabel() {
      return "გაუქმება";
    }
    get closeButtonLabel() {
      return "დახურვა";
    }
    get closeButtonTooltip() {
      return "დახურვა";
    }
    get collapsedIconTapHint() {
      return "გაშლა";
    }
    get continueButtonLabel() {
      return "გაგრძელება";
    }
    get copyButtonLabel() {
      return "კოპირება";
    }
    get cutButtonLabel() {
      return "ამოჭრა";
    }
    get dateHelpText() {
      return "დდ.თთ.წწწწ";
    }
    get dateInputLabel() {
      return "შეიყვანეთ თარიღი";
    }
    get dateOutOfRangeLabel() {
      return "დიაპაზონს მიღმაა.";
    }
    get datePickerHelpText() {
      return "აირჩიეთ თარიღი";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "დასრულების თარიღია $fullDate";
    }
    get dateRangeEndLabel() {
      return "დასრულების თარიღი";
    }
    get dateRangePickerHelpText() {
      return "აირჩიეთ დიაპაზონი";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "დაწყების თარიღია $fullDate";
    }
    get dateRangeStartLabel() {
      return "დაწყების თარიღი";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "წაშლა";
    }
    get dialModeButtonLabel() {
      return "ციფერბლატის რეჟიმზე გადართვა";
    }
    get dialogLabel() {
      return "დიალოგი";
    }
    get drawerLabel() {
      return "ნავიგაციის მენიუ";
    }
    get expandedIconTapHint() {
      return "ჩაკეცვა";
    }
    get firstPageTooltip() {
      return "პირველი გვერდი";
    }
    get hideAccountsLabel() {
      return "ანგარიშების დამალვა";
    }
    get inputDateModeButtonLabel() {
      return "შეყვანაზე გადართვა";
    }
    get inputTimeModeButtonLabel() {
      return "ტექსტის შეყვანის რეჟიმზე გადართვა";
    }
    get invalidDateFormatLabel() {
      return "ფორმატი არასწორია.";
    }
    get invalidDateRangeLabel() {
      return "დიაპაზონი არასწორია.";
    }
    get invalidTimeLabel() {
      return "შეიყვანეთ სწორი დრო";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "ჩართვა";
    }
    get keyboardKeyPowerOff() {
      return "გამორთვა";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "ბოლო გვერდი";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 ლიცენზია";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount ლიცენზია";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "ლიცენზიები";
    }
    get menuBarMenuLabel() {
      return "მენიუს ზოლის მენიუ";
    }
    get modalBarrierDismissLabel() {
      return "დახურვა";
    }
    get moreButtonTooltip() {
      return "მეტი";
    }
    get nextMonthTooltip() {
      return "შემდეგი თვე";
    }
    get nextPageTooltip() {
      return "შემდეგი გვერდი";
    }
    get okButtonLabel() {
      return "კარგი";
    }
    get openAppDrawerTooltip() {
      return "სანავიგაციო მენიუს გახსნა";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow-$lastRow / $rowCount-დან";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow-$lastRow / დაახლოებით $rowCount-დან";
    }
    get pasteButtonLabel() {
      return "ჩასმა";
    }
    get popupMenuLabel() {
      return "ამომხტარი მენიუ";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "წინა თვე";
    }
    get previousPageTooltip() {
      return "წინა გვერდი";
    }
    get refreshIndicatorSemanticLabel() {
      return "განახლება";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "დარჩა 1 სიმბოლო";
    }
    get remainingTextFieldCharacterCountOther() {
      return "დარჩა $remainingCount სიმბოლო";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "ქვემოთ გადატანა";
    }
    get reorderItemLeft() {
      return "მარცხნივ გადატანა";
    }
    get reorderItemRight() {
      return "მარჯვნივ გადატანა";
    }
    get reorderItemToEnd() {
      return "ბოლოში გადატანა";
    }
    get reorderItemToStart() {
      return "დასაწყისში გადატანა";
    }
    get reorderItemUp() {
      return "ზემოთ გადატანა";
    }
    get rowsPerPageTitle() {
      return "მწკრივი გვერდზე:";
    }
    get saveButtonLabel() {
      return "შენახვა";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "ძიება";
    }
    get selectAllButtonLabel() {
      return "ყველას არჩევა";
    }
    get selectYearSemanticsLabel() {
      return "აირჩიეთ წელი";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "არჩეულია 1 ერთეული";
    }
    get selectedRowCountTitleOther() {
      return "არჩეულია $selectedRowCount ერთეული";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "ანგარიშების ჩვენება";
    }
    get showMenuTooltip() {
      return "მენიუს ჩვენება";
    }
    get signedInLabel() {
      return "შესული";
    }
    get tabLabelRaw() {
      return "ჩანართი $tabIndex / $tabCount-დან";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "აირჩიეთ დრო";
    }
    get timePickerHourLabel() {
      return "საათი";
    }
    get timePickerHourModeAnnouncement() {
      return "აირჩიეთ საათები";
    }
    get timePickerInputHelpText() {
      return "შეიყვანეთ დრო";
    }
    get timePickerMinuteLabel() {
      return "წუთი";
    }
    get timePickerMinuteModeAnnouncement() {
      return "აირჩიეთ წუთები";
    }
    get unspecifiedDate() {
      return "თარიღი";
    }
    get unspecifiedDateRange() {
      return "თარიღების დიაპაზონი";
    }
    get viewLicensesButtonLabel() {
      return "ლიცენზიების ნახვა";
    }
  };
  (generated_material_localizations.MaterialLocalizationKa.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "ka";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationKa.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationKa.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationKa);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationKa);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationKa, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationKa.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationKa, I[2]);
  generated_material_localizations.MaterialLocalizationKk = class MaterialLocalizationKk extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationKk.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName туралы";
    }
    get alertDialogLabel() {
      return "Дабыл";
    }
    get anteMeridiemAbbreviation() {
      return "түстен кейін";
    }
    get backButtonTooltip() {
      return "Артқа";
    }
    get calendarModeButtonLabel() {
      return "Күнтізбеге ауысу";
    }
    get cancelButtonLabel() {
      return "БАС ТАРТУ";
    }
    get closeButtonLabel() {
      return "ЖАБУ";
    }
    get closeButtonTooltip() {
      return "Жабу";
    }
    get collapsedIconTapHint() {
      return "Жаю";
    }
    get continueButtonLabel() {
      return "ЖАЛҒАСТЫРУ";
    }
    get copyButtonLabel() {
      return "Көшіру";
    }
    get cutButtonLabel() {
      return "Қию";
    }
    get dateHelpText() {
      return "кк.аа.жжжж";
    }
    get dateInputLabel() {
      return "Күнді енгізу";
    }
    get dateOutOfRangeLabel() {
      return "Ауқымнан тыc.";
    }
    get datePickerHelpText() {
      return "КҮНДІ ТАҢДАУ";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Аяқталу күні $fullDate";
    }
    get dateRangeEndLabel() {
      return "Аяқталу күні";
    }
    get dateRangePickerHelpText() {
      return "АУҚЫМДЫ ТАҢДАУ";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Басталу күні $fullDate";
    }
    get dateRangeStartLabel() {
      return "Басталу күні";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Жою";
    }
    get dialModeButtonLabel() {
      return "Таңдау режиміне ауысу";
    }
    get dialogLabel() {
      return "Диалогтық терезе";
    }
    get drawerLabel() {
      return "Навигация мәзірі";
    }
    get expandedIconTapHint() {
      return "Жию";
    }
    get firstPageTooltip() {
      return "Бірінші бет";
    }
    get hideAccountsLabel() {
      return "Аккаунттарды жасыру";
    }
    get inputDateModeButtonLabel() {
      return "Мәтін енгізуге ауысу";
    }
    get inputTimeModeButtonLabel() {
      return "Мәтін енгізу режиміне ауысу";
    }
    get invalidDateFormatLabel() {
      return "Формат жарамсыз.";
    }
    get invalidDateRangeLabel() {
      return "Ауқым жарамсыз.";
    }
    get invalidTimeLabel() {
      return "Жарамды уақыт мәліметін енгізіңіз.";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Келесі арна";
    }
    get keyboardKeyChannelUp() {
      return "Алдыңғы арна";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Қуат";
    }
    get keyboardKeyPowerOff() {
      return "Қуатты өшіру";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Бос орын";
    }
    get lastPageTooltip() {
      return "Соңғы бет";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 лицензия";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount лицензия";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Лицензиялар";
    }
    get menuBarMenuLabel() {
      return "Мәзір жолағының мәзірі";
    }
    get modalBarrierDismissLabel() {
      return "Жабу";
    }
    get moreButtonTooltip() {
      return "Жаю";
    }
    get nextMonthTooltip() {
      return "Келесі ай";
    }
    get nextPageTooltip() {
      return "Келесі бет";
    }
    get okButtonLabel() {
      return "Иә";
    }
    get openAppDrawerTooltip() {
      return "Навигация мәзірін ашу";
    }
    get pageRowsInfoTitleRaw() {
      return "$rowCount ішінен $firstRow–$lastRow";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "Шамамен $rowCount ішінен $firstRow–$lastRow";
    }
    get pasteButtonLabel() {
      return "Қою";
    }
    get popupMenuLabel() {
      return "Қалқымалы терезе мәзірі";
    }
    get postMeridiemAbbreviation() {
      return "түстен кейін";
    }
    get previousMonthTooltip() {
      return "Өткен ай";
    }
    get previousPageTooltip() {
      return "Алдыңғы бет";
    }
    get refreshIndicatorSemanticLabel() {
      return "Жаңарту";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 таңба қалды.";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount таңба қалды.";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "Таңбалар қалмады";
    }
    get reorderItemDown() {
      return "Төменге жылжыту";
    }
    get reorderItemLeft() {
      return "Солға жылжыту";
    }
    get reorderItemRight() {
      return "Оңға жылжыту";
    }
    get reorderItemToEnd() {
      return "Соңына өту";
    }
    get reorderItemToStart() {
      return "Басына өту";
    }
    get reorderItemUp() {
      return "Жоғарыға жылжыту";
    }
    get rowsPerPageTitle() {
      return "Әр беттегі жолдар саны:";
    }
    get saveButtonLabel() {
      return "САҚТАУ";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Іздеу";
    }
    get selectAllButtonLabel() {
      return "Барлығын таңдау";
    }
    get selectYearSemanticsLabel() {
      return "Жылды таңдау";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 элемент таңдалды.";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount элемент таңдалды.";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return "Тармақ таңдалмаған";
    }
    get showAccountsLabel() {
      return "Аккаунттарды көрсету";
    }
    get showMenuTooltip() {
      return "Мәзірді көрсету";
    }
    get signedInLabel() {
      return "Аккаунтқа кірген";
    }
    get tabLabelRaw() {
      return "$tabCount/$tabIndex қойынды";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "УАҚЫТТЫ ТАҢДАҢЫЗ";
    }
    get timePickerHourLabel() {
      return "Сағат";
    }
    get timePickerHourModeAnnouncement() {
      return "Сағаттарды таңдаңыз";
    }
    get timePickerInputHelpText() {
      return "УАҚЫТТЫ ЕНГІЗІҢІЗ";
    }
    get timePickerMinuteLabel() {
      return "Mинут";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Минуттарды таңдаңыз";
    }
    get unspecifiedDate() {
      return "Күн";
    }
    get unspecifiedDateRange() {
      return "Күндер ауқымы";
    }
    get viewLicensesButtonLabel() {
      return "ЛИЦЕНЗИЯЛАРДЫ КӨРУ";
    }
  };
  (generated_material_localizations.MaterialLocalizationKk.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "kk";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationKk.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationKk.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationKk);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationKk);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationKk, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationKk.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationKk, I[2]);
  generated_material_localizations.MaterialLocalizationKm = class MaterialLocalizationKm extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationKm.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "អំពី $applicationName";
    }
    get alertDialogLabel() {
      return "ជូនដំណឹង";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "ថយក្រោយ";
    }
    get calendarModeButtonLabel() {
      return "ប្ដូរទៅ​ប្រតិទិន";
    }
    get cancelButtonLabel() {
      return "បោះបង់";
    }
    get closeButtonLabel() {
      return "បិទ";
    }
    get closeButtonTooltip() {
      return "បិទ";
    }
    get collapsedIconTapHint() {
      return "ពង្រីក";
    }
    get continueButtonLabel() {
      return "បន្ត";
    }
    get copyButtonLabel() {
      return "ចម្លង";
    }
    get cutButtonLabel() {
      return "កាត់";
    }
    get dateHelpText() {
      return "ថ្ងៃ/ខែ/ឆ្នាំ";
    }
    get dateInputLabel() {
      return "បញ្ចូល​កាលបរិច្ឆេទ";
    }
    get dateOutOfRangeLabel() {
      return "ក្រៅចន្លោះ។";
    }
    get datePickerHelpText() {
      return "ជ្រើសរើស​កាល​បរិច្ឆេទ";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "កាលបរិច្ឆេទ​បញ្ចប់ $fullDate";
    }
    get dateRangeEndLabel() {
      return "កាលបរិច្ឆេទ​បញ្ចប់";
    }
    get dateRangePickerHelpText() {
      return "ជ្រើស​រើស​ចន្លោះ";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "កាលបរិច្ឆេទ​ចាប់ផ្ដើម $fullDate";
    }
    get dateRangeStartLabel() {
      return "កាលបរិច្ឆេទ​ចាប់ផ្ដើម";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "លុប";
    }
    get dialModeButtonLabel() {
      return "ប្ដូរទៅមុខងារផ្ទាំង​ជ្រើសរើសលេខ";
    }
    get dialogLabel() {
      return "ប្រអប់";
    }
    get drawerLabel() {
      return "ម៉ឺនុយរុករក";
    }
    get expandedIconTapHint() {
      return "បង្រួម";
    }
    get firstPageTooltip() {
      return "ទំព័រ​ដំបូង";
    }
    get hideAccountsLabel() {
      return "លាក់គណនី";
    }
    get inputDateModeButtonLabel() {
      return "ប្ដូរទៅ​ការបញ្ចូល";
    }
    get inputTimeModeButtonLabel() {
      return "ប្ដូរទៅ​មុខងារ​បញ្ចូល​អក្សរ";
    }
    get invalidDateFormatLabel() {
      return "ទម្រង់មិន​ត្រឹមត្រូវទេ។";
    }
    get invalidDateRangeLabel() {
      return "ចន្លោះ​មិនត្រឹមត្រូវទេ។";
    }
    get invalidTimeLabel() {
      return "បញ្ចូលពេលវេលា​ដែល​ត្រឹមត្រូវ";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "Power Off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "ទំព័រ​ចុង​ក្រោយ";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "អាជ្ញាបណ្ណ 1";
    }
    get licensesPackageDetailTextOther() {
      return "អាជ្ញាបណ្ណ $licenseCount";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "អាជ្ញាបណ្ណ";
    }
    get menuBarMenuLabel() {
      return "ម៉ឺនុយរបារម៉ឺនុយ";
    }
    get modalBarrierDismissLabel() {
      return "ច្រាន​ចោល";
    }
    get moreButtonTooltip() {
      return "ច្រើន​ទៀត";
    }
    get nextMonthTooltip() {
      return "ខែ​​ក្រោយ";
    }
    get nextPageTooltip() {
      return "ទំព័របន្ទាប់";
    }
    get okButtonLabel() {
      return "យល់ព្រម";
    }
    get openAppDrawerTooltip() {
      return "បើក​ម៉ឺនុយរុករក";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow ក្នុង​ចំណោម​ $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow ក្នុង​ចំណោម​ប្រហែល $rowCount";
    }
    get pasteButtonLabel() {
      return "ដាក់​ចូល";
    }
    get popupMenuLabel() {
      return "​ម៉ឺនុយ​លោត​ឡើង";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "ខែមុន";
    }
    get previousPageTooltip() {
      return "ទំព័រមុន";
    }
    get refreshIndicatorSemanticLabel() {
      return "ផ្ទុកឡើងវិញ";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "នៅសល់​ 1 តួ​ទៀត";
    }
    get remainingTextFieldCharacterCountOther() {
      return "នៅសល់ $remainingCount តួ​ទៀត";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "ផ្លាស់ទី​ចុះ​ក្រោម";
    }
    get reorderItemLeft() {
      return "ផ្លាស់ទី​ទៅ​ឆ្វេង";
    }
    get reorderItemRight() {
      return "ផ្លាស់ទីទៅ​ស្តាំ";
    }
    get reorderItemToEnd() {
      return "ផ្លាស់ទីទៅ​ចំណុចបញ្ចប់";
    }
    get reorderItemToStart() {
      return "ផ្លាស់ទីទៅ​ចំណុច​ចាប់ផ្ដើម";
    }
    get reorderItemUp() {
      return "ផ្លាស់ទី​ឡើង​លើ";
    }
    get rowsPerPageTitle() {
      return "ជួរ​ដេក​ក្នុង​មួយ​ទំព័រ៖";
    }
    get saveButtonLabel() {
      return "រក្សាទុក";
    }
    get scriptCategory() {
      return typography.ScriptCategory.dense;
    }
    get searchFieldLabel() {
      return "ស្វែងរក";
    }
    get selectAllButtonLabel() {
      return "ជ្រើសរើស​ទាំងអស់";
    }
    get selectYearSemanticsLabel() {
      return "ជ្រើសរើសឆ្នាំ";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "បាន​ជ្រើស​រើស​ធាតុ 1";
    }
    get selectedRowCountTitleOther() {
      return "បាន​ជ្រើស​រើស​ធាតុ $selectedRowCount";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "បង្ហាញគណនី";
    }
    get showMenuTooltip() {
      return "បង្ហាញ​ម៉ឺនុយ";
    }
    get signedInLabel() {
      return "បានចូល​គណនី";
    }
    get tabLabelRaw() {
      return "ផ្ទាំង $tabIndex ក្នុង​ចំណោម​ $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.h_colon_mm_space_a;
    }
    get timePickerDialHelpText() {
      return "ជ្រើសរើស​ពេលវេលា";
    }
    get timePickerHourLabel() {
      return "ម៉ោង";
    }
    get timePickerHourModeAnnouncement() {
      return "ជ្រើសរើស​ម៉ោង";
    }
    get timePickerInputHelpText() {
      return "បញ្ចូលពេលវេលា";
    }
    get timePickerMinuteLabel() {
      return "នាទី​";
    }
    get timePickerMinuteModeAnnouncement() {
      return "ជ្រើសរើស​នាទី";
    }
    get unspecifiedDate() {
      return "កាលបរិច្ឆេទ";
    }
    get unspecifiedDateRange() {
      return "ចន្លោះ​កាលបរិច្ឆេទ";
    }
    get viewLicensesButtonLabel() {
      return "មើលអាជ្ញាបណ្ណ";
    }
  };
  (generated_material_localizations.MaterialLocalizationKm.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "km";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationKm.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationKm.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationKm);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationKm);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationKm, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationKm.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationKm, I[2]);
  generated_material_localizations.MaterialLocalizationKn = class MaterialLocalizationKn extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationKn.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName ಬಗ್ಗೆ";
    }
    get alertDialogLabel() {
      return "ಎಚ್ಚರಿಕೆ";
    }
    get anteMeridiemAbbreviation() {
      return "ಬೆಳಿಗ್ಗೆ";
    }
    get backButtonTooltip() {
      return "ಹಿಂತಿರುಗಿ";
    }
    get calendarModeButtonLabel() {
      return "ಕ್ಯಾಲೆಂಡರ್‌ಗೆ ಬದಲಿಸಿ";
    }
    get cancelButtonLabel() {
      return "ರದ್ದುಮಾಡಿ";
    }
    get closeButtonLabel() {
      return "ಮುಚ್ಚಿರಿ";
    }
    get closeButtonTooltip() {
      return "ಮುಚ್ಚಿರಿ";
    }
    get collapsedIconTapHint() {
      return "ವಿಸ್ತರಿಸಿ";
    }
    get continueButtonLabel() {
      return "ಮುಂದುವರಿಸಿ";
    }
    get copyButtonLabel() {
      return "ನಕಲಿಸಿ";
    }
    get cutButtonLabel() {
      return "ಕತ್ತರಿಸಿ";
    }
    get dateHelpText() {
      return "mm/dd/yyyy";
    }
    get dateInputLabel() {
      return "ದಿನಾಂಕ ನಮೂದಿಸಿ";
    }
    get dateOutOfRangeLabel() {
      return "ವ್ಯಾಪ್ತಿಯ ಹೊರಗಿದೆ";
    }
    get datePickerHelpText() {
      return "ದಿನಾಂಕವನ್ನು ಆಯ್ಕೆಮಾಡಿ";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "ಮುಕ್ತಾಯ ದಿನಾಂಕ $fullDate";
    }
    get dateRangeEndLabel() {
      return "ಅಂತಿಮ ದಿನಾಂಕ";
    }
    get dateRangePickerHelpText() {
      return "ಶ್ರೇಣಿಯನ್ನು ಆಯ್ಕೆಮಾಡಿ";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "ಪ್ರಾರಂಭ ದಿನಾಂಕ $fullDate";
    }
    get dateRangeStartLabel() {
      return "ಪ್ರಾರಂಭ ದಿನಾಂಕ";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "ಅಳಿಸಿ";
    }
    get dialModeButtonLabel() {
      return "ಡಯಲ್ ಪಿಕರ್‌ ಮೋಡ್‌ಗೆ ಬದಲಾಯಿಸಿ";
    }
    get dialogLabel() {
      return "ಡೈಲಾಗ್";
    }
    get drawerLabel() {
      return "ನ್ಯಾವಿಗೇಶನ್‌ ಮೆನು";
    }
    get expandedIconTapHint() {
      return "ಕುಗ್ಗಿಸಿ";
    }
    get firstPageTooltip() {
      return "ಮೊದಲ ಪುಟ";
    }
    get hideAccountsLabel() {
      return "ಖಾತೆಗಳನ್ನು ಮರೆಮಾಡಿ";
    }
    get inputDateModeButtonLabel() {
      return "ಇನ್‌ಪುಟ್‌ಗೆ ಬದಲಿಸಿ";
    }
    get inputTimeModeButtonLabel() {
      return "ಪಠ್ಯ ಇನ್‌ಪುಟ್ ಮೋಡ್‌ಗೆ ಬದಲಾಯಿಸಿ";
    }
    get invalidDateFormatLabel() {
      return "ಅಮಾನ್ಯವಾದ ಫಾರ್ಮ್ಯಾಟ್.";
    }
    get invalidDateRangeLabel() {
      return "ಅಮಾನ್ಯ ಶ್ರೇಣಿ.";
    }
    get invalidTimeLabel() {
      return "ಮಾನ್ಯವಾದ ಸಮಯವನ್ನು ನಮೂದಿಸಿ";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "Power Off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "ಕೊನೆಯ ಪುಟ";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 ಪರವಾನಗಿ";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount ಪರವಾನಗಿಗಳು";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "ಪರವಾನಗಿಗಳು";
    }
    get menuBarMenuLabel() {
      return "ಮೆನು ಬಾರ್‌ ಮೆನು";
    }
    get modalBarrierDismissLabel() {
      return "ವಜಾಗೊಳಿಸಿ";
    }
    get moreButtonTooltip() {
      return "ಇನ್ನಷ್ಟು";
    }
    get nextMonthTooltip() {
      return "ಮುಂದಿನ ತಿಂಗಳು";
    }
    get nextPageTooltip() {
      return "ಮುಂದಿನ ಪುಟ";
    }
    get okButtonLabel() {
      return "ಸರಿ";
    }
    get openAppDrawerTooltip() {
      return "ನ್ಯಾವಿಗೇಶನ್‌ ಮೆನು ತೆರೆಯಿರಿ";
    }
    get pageRowsInfoTitleRaw() {
      return "$rowCount ರಲ್ಲಿ $firstRow–$lastRow";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$rowCount ರಲ್ಲಿ $firstRow–$lastRow";
    }
    get pasteButtonLabel() {
      return "ಅಂಟಿಸಿ";
    }
    get popupMenuLabel() {
      return "ಪಾಪ್ಅಪ್ ಮೆನು";
    }
    get postMeridiemAbbreviation() {
      return "ಸಂಜೆ";
    }
    get previousMonthTooltip() {
      return "ಹಿಂದಿನ ತಿಂಗಳು";
    }
    get previousPageTooltip() {
      return "ಹಿಂದಿನ ಪುಟ";
    }
    get refreshIndicatorSemanticLabel() {
      return "ರಿಫ್ರೆಶ್ ಮಾಡಿ";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 ಅಕ್ಷರ ಉಳಿದಿದೆ";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount ಅಕ್ಷರಗಳು ಉಳಿದಿವೆ";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "ಕೆಳಗೆ ಸರಿಸಿ";
    }
    get reorderItemLeft() {
      return "ಎಡಕ್ಕೆ ಸರಿಸಿ";
    }
    get reorderItemRight() {
      return "ಬಲಕ್ಕೆ ಸರಿಸಿ";
    }
    get reorderItemToEnd() {
      return "ಕೊನೆಗೆ ಸರಿಸಿ";
    }
    get reorderItemToStart() {
      return "ಪ್ರಾರಂಭಕ್ಕೆ ಸರಿಸಿ";
    }
    get reorderItemUp() {
      return "ಮೇಲೆ ಸರಿಸಿ";
    }
    get rowsPerPageTitle() {
      return "ಪ್ರತಿ ಪುಟಕ್ಕೆ ಸಾಲುಗಳು:";
    }
    get saveButtonLabel() {
      return "ಉಳಿಸಿ";
    }
    get scriptCategory() {
      return typography.ScriptCategory.tall;
    }
    get searchFieldLabel() {
      return "ಹುಡುಕಿ";
    }
    get selectAllButtonLabel() {
      return "ಎಲ್ಲವನ್ನೂ ಆಯ್ಕೆ ಮಾಡಿ";
    }
    get selectYearSemanticsLabel() {
      return "ವರ್ಷವನ್ನು ಆಯ್ಕೆಮಾಡಿ";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 ಐಟಂ ಆಯ್ಕೆ ಮಾಡಲಾಗಿದೆ";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount ಐಟಂಗಳನ್ನು ಆಯ್ಕೆ ಮಾಡಲಾಗಿದೆ";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "ಖಾತೆಗಳನ್ನು ತೋರಿಸಿ";
    }
    get showMenuTooltip() {
      return "ಮೆನು ತೋರಿಸಿ";
    }
    get signedInLabel() {
      return "ಸೈನ್ ಇನ್ ಮಾಡಲಾಗಿದೆ";
    }
    get tabLabelRaw() {
      return "$tabCount ರಲ್ಲಿನ $tabIndex ಟ್ಯಾಬ್";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "ಸಮಯವನ್ನು ಆಯ್ಕೆಮಾಡಿ";
    }
    get timePickerHourLabel() {
      return "ಗಂಟೆ";
    }
    get timePickerHourModeAnnouncement() {
      return "ಗಂಟೆಗಳನ್ನು ಆಯ್ಕೆಮಾಡಿ";
    }
    get timePickerInputHelpText() {
      return "ಸಮಯವನ್ನು ನಮೂದಿಸಿ";
    }
    get timePickerMinuteLabel() {
      return "ನಿಮಿಷ";
    }
    get timePickerMinuteModeAnnouncement() {
      return "ನಿಮಿಷಗಳನ್ನು ಆಯ್ಕೆಮಾಡಿ";
    }
    get unspecifiedDate() {
      return "ದಿನಾಂಕ";
    }
    get unspecifiedDateRange() {
      return "ದಿನಾಂಕ ವ್ಯಾಪ್ತಿ";
    }
    get viewLicensesButtonLabel() {
      return "ಪರವಾನಗಿಗಳನ್ನು ವೀಕ್ಷಿಸಿ";
    }
  };
  (generated_material_localizations.MaterialLocalizationKn.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "kn";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationKn.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationKn.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationKn);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationKn);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationKn, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationKn.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationKn, I[2]);
  generated_material_localizations.MaterialLocalizationKo = class MaterialLocalizationKo extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationKo.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName 정보";
    }
    get alertDialogLabel() {
      return "알림";
    }
    get anteMeridiemAbbreviation() {
      return "오전";
    }
    get backButtonTooltip() {
      return "뒤로";
    }
    get calendarModeButtonLabel() {
      return "캘린더 모드로 전환";
    }
    get cancelButtonLabel() {
      return "취소";
    }
    get closeButtonLabel() {
      return "닫기";
    }
    get closeButtonTooltip() {
      return "닫기";
    }
    get collapsedIconTapHint() {
      return "펼치기";
    }
    get continueButtonLabel() {
      return "계속";
    }
    get copyButtonLabel() {
      return "복사";
    }
    get cutButtonLabel() {
      return "잘라냄";
    }
    get dateHelpText() {
      return "yyyy.mm.dd";
    }
    get dateInputLabel() {
      return "날짜 입력";
    }
    get dateOutOfRangeLabel() {
      return "범위를 벗어났습니다.";
    }
    get datePickerHelpText() {
      return "날짜 선택";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "종료일 $fullDate";
    }
    get dateRangeEndLabel() {
      return "종료일";
    }
    get dateRangePickerHelpText() {
      return "범위 선택";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "시작일 $fullDate";
    }
    get dateRangeStartLabel() {
      return "시작일";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "삭제";
    }
    get dialModeButtonLabel() {
      return "다이얼 선택 모드로 전환";
    }
    get dialogLabel() {
      return "대화상자";
    }
    get drawerLabel() {
      return "탐색 메뉴";
    }
    get expandedIconTapHint() {
      return "접기";
    }
    get firstPageTooltip() {
      return "첫 페이지";
    }
    get hideAccountsLabel() {
      return "계정 숨기기";
    }
    get inputDateModeButtonLabel() {
      return "입력 모드로 전환";
    }
    get inputTimeModeButtonLabel() {
      return "텍스트 입력 모드로 전환";
    }
    get invalidDateFormatLabel() {
      return "형식이 잘못되었습니다.";
    }
    get invalidDateRangeLabel() {
      return "날짜 범위가 잘못되었습니다.";
    }
    get invalidTimeLabel() {
      return "유효한 시간을 입력하세요.";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "백스페이스";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "채널 아래로";
    }
    get keyboardKeyChannelUp() {
      return "채널 위로";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "꺼내기";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "메타";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PageUp";
    }
    get keyboardKeyPower() {
      return "전원";
    }
    get keyboardKeyPowerOff() {
      return "종료";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "선택";
    }
    get keyboardKeySpace() {
      return "스페이스";
    }
    get lastPageTooltip() {
      return "마지막 페이지";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "라이선스 1개";
    }
    get licensesPackageDetailTextOther() {
      return "라이선스 $licenseCount개";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "라이선스";
    }
    get menuBarMenuLabel() {
      return "메뉴 바 메뉴";
    }
    get modalBarrierDismissLabel() {
      return "닫기";
    }
    get moreButtonTooltip() {
      return "더보기";
    }
    get nextMonthTooltip() {
      return "다음 달";
    }
    get nextPageTooltip() {
      return "다음 페이지";
    }
    get okButtonLabel() {
      return "확인";
    }
    get openAppDrawerTooltip() {
      return "탐색 메뉴 열기";
    }
    get pageRowsInfoTitleRaw() {
      return "$rowCount행 중 $firstRow~$lastRow행";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "약 $rowCount행 중 $firstRow~$lastRow행";
    }
    get pasteButtonLabel() {
      return "붙여넣기";
    }
    get popupMenuLabel() {
      return "팝업 메뉴";
    }
    get postMeridiemAbbreviation() {
      return "오후";
    }
    get previousMonthTooltip() {
      return "지난달";
    }
    get previousPageTooltip() {
      return "이전 페이지";
    }
    get refreshIndicatorSemanticLabel() {
      return "새로고침";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1자 남음";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount자 남음";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "아래로 이동";
    }
    get reorderItemLeft() {
      return "왼쪽으로 이동";
    }
    get reorderItemRight() {
      return "오른쪽으로 이동";
    }
    get reorderItemToEnd() {
      return "끝으로 이동";
    }
    get reorderItemToStart() {
      return "시작으로 이동";
    }
    get reorderItemUp() {
      return "위로 이동";
    }
    get rowsPerPageTitle() {
      return "페이지당 행 수:";
    }
    get saveButtonLabel() {
      return "저장";
    }
    get scriptCategory() {
      return typography.ScriptCategory.dense;
    }
    get searchFieldLabel() {
      return "검색";
    }
    get selectAllButtonLabel() {
      return "전체 선택";
    }
    get selectYearSemanticsLabel() {
      return "연도 선택";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "항목 1개 선택됨";
    }
    get selectedRowCountTitleOther() {
      return "항목 $selectedRowCount개 선택됨";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "계정 표시";
    }
    get showMenuTooltip() {
      return "메뉴 표시";
    }
    get signedInLabel() {
      return "로그인됨";
    }
    get tabLabelRaw() {
      return "탭 $tabCount개 중 $tabIndex번째";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.a_space_h_colon_mm;
    }
    get timePickerDialHelpText() {
      return "시간 선택";
    }
    get timePickerHourLabel() {
      return "시간";
    }
    get timePickerHourModeAnnouncement() {
      return "시간 선택";
    }
    get timePickerInputHelpText() {
      return "시간 입력";
    }
    get timePickerMinuteLabel() {
      return "분";
    }
    get timePickerMinuteModeAnnouncement() {
      return "분 선택";
    }
    get unspecifiedDate() {
      return "날짜";
    }
    get unspecifiedDateRange() {
      return "기간";
    }
    get viewLicensesButtonLabel() {
      return "라이선스 보기";
    }
  };
  (generated_material_localizations.MaterialLocalizationKo.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "ko";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationKo.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationKo.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationKo);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationKo);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationKo, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationKo.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationKo, I[2]);
  generated_material_localizations.MaterialLocalizationKy = class MaterialLocalizationKy extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationKy.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName каналы жөнүндө";
    }
    get alertDialogLabel() {
      return "Эскертүү";
    }
    get anteMeridiemAbbreviation() {
      return "түшкө чейин";
    }
    get backButtonTooltip() {
      return "Артка";
    }
    get calendarModeButtonLabel() {
      return "Жылнаамага которулуңуз";
    }
    get cancelButtonLabel() {
      return "ЖОККО ЧЫГАРУУ";
    }
    get closeButtonLabel() {
      return "ЖАБУУ";
    }
    get closeButtonTooltip() {
      return "Жабуу";
    }
    get collapsedIconTapHint() {
      return "Жайып көрсөтүү";
    }
    get continueButtonLabel() {
      return "УЛАНТУУ";
    }
    get copyButtonLabel() {
      return "Көчүрүү";
    }
    get cutButtonLabel() {
      return "Кесүү";
    }
    get dateHelpText() {
      return "кк.аа.жжжж";
    }
    get dateInputLabel() {
      return "Күндү киргизүү";
    }
    get dateOutOfRangeLabel() {
      return "Аракет чегинен тышкары.";
    }
    get datePickerHelpText() {
      return "КҮНДҮ ТАНДОО";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Аяктоо күнү $fullDate";
    }
    get dateRangeEndLabel() {
      return "Аяктоо күнү";
    }
    get dateRangePickerHelpText() {
      return "ДИАПАЗОНДУ ТАНДОО";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Баштоо күнү $fullDate";
    }
    get dateRangeStartLabel() {
      return "Баштоо күнү";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Жок кылуу";
    }
    get dialModeButtonLabel() {
      return "Терүүнү тандагыч режимине которулуу";
    }
    get dialogLabel() {
      return "Диалог";
    }
    get drawerLabel() {
      return "Чабыттоо менюсу";
    }
    get expandedIconTapHint() {
      return "Жыйыштыруу";
    }
    get firstPageTooltip() {
      return "Биринчи бет";
    }
    get hideAccountsLabel() {
      return "Аккаунттарды жашыруу";
    }
    get inputDateModeButtonLabel() {
      return "Терип киргизүү режимине которулуңуз";
    }
    get inputTimeModeButtonLabel() {
      return "Текст киргизүү режимине которулуу";
    }
    get invalidDateFormatLabel() {
      return "Жараксыз формат.";
    }
    get invalidDateRangeLabel() {
      return "Жараксыз диапазон.";
    }
    get invalidTimeLabel() {
      return "Убакытты туура көрсөтүңүз";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Мета";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "Power Off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Тандоо";
    }
    get keyboardKeySpace() {
      return "Боштук";
    }
    get lastPageTooltip() {
      return "Акыркы бет";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 уруксаттама";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount уруксаттама";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Уруксаттамалар";
    }
    get menuBarMenuLabel() {
      return "Меню тилкеси менюсу";
    }
    get modalBarrierDismissLabel() {
      return "Жабуу";
    }
    get moreButtonTooltip() {
      return "Дагы";
    }
    get nextMonthTooltip() {
      return "Кийинки ай";
    }
    get nextPageTooltip() {
      return "Кийинки бет";
    }
    get okButtonLabel() {
      return "Макул";
    }
    get openAppDrawerTooltip() {
      return "Чабыттоо менюсун ачуу";
    }
    get pageRowsInfoTitleRaw() {
      return "$rowCount ичинен $firstRow–$lastRow";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "Болжол менен $rowCount ичинен $firstRow–$lastRow";
    }
    get pasteButtonLabel() {
      return "Чаптоо";
    }
    get popupMenuLabel() {
      return "Калкып чыгуучу меню";
    }
    get postMeridiemAbbreviation() {
      return "түштөн кийин";
    }
    get previousMonthTooltip() {
      return "Мурунку ай";
    }
    get previousPageTooltip() {
      return "Мурунку бет";
    }
    get refreshIndicatorSemanticLabel() {
      return "Жаңыртуу";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 белги калды";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount белги калды";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "Төмөн жылдыруу";
    }
    get reorderItemLeft() {
      return "Солго жылдыруу";
    }
    get reorderItemRight() {
      return "Оңго жылдыруу";
    }
    get reorderItemToEnd() {
      return "Аягына жылдыруу";
    }
    get reorderItemToStart() {
      return "Башына жылдыруу";
    }
    get reorderItemUp() {
      return "Жогору жылдыруу";
    }
    get rowsPerPageTitle() {
      return "Бир бетте көрсөтүлүүчү саптардын саны:";
    }
    get saveButtonLabel() {
      return "САКТОО";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Издөө";
    }
    get selectAllButtonLabel() {
      return "Баарын тандоо";
    }
    get selectYearSemanticsLabel() {
      return "Жылды тандоо";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 нерсе тандалды";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount нерсе тандалды";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Аккаунттарды көрсөтүү";
    }
    get showMenuTooltip() {
      return "Менюну көрсөтүү";
    }
    get signedInLabel() {
      return "Аккаунтуңузга кирдиңиз";
    }
    get tabLabelRaw() {
      return "$tabCount кыналма ичинен $tabIndex";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "УБАКЫТ ТАНДОО";
    }
    get timePickerHourLabel() {
      return "Саат";
    }
    get timePickerHourModeAnnouncement() {
      return "Саатты тандаңыз";
    }
    get timePickerInputHelpText() {
      return "УБАКЫТ КИРГИЗҮҮ";
    }
    get timePickerMinuteLabel() {
      return "Мүнөт";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Мүнөттөрдү тандаңыз";
    }
    get unspecifiedDate() {
      return "Күн";
    }
    get unspecifiedDateRange() {
      return "Даталар диапазону";
    }
    get viewLicensesButtonLabel() {
      return "УРУКСАТТАМАЛАРДЫ КӨРҮҮ";
    }
  };
  (generated_material_localizations.MaterialLocalizationKy.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "ky";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationKy.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationKy.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationKy);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationKy);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationKy, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationKy.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationKy, I[2]);
  generated_material_localizations.MaterialLocalizationLo = class MaterialLocalizationLo extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationLo.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "ກ່ຽວກັບ $applicationName";
    }
    get alertDialogLabel() {
      return "ການເຕືອນ";
    }
    get anteMeridiemAbbreviation() {
      return "ກ່ອນທ່ຽງ";
    }
    get backButtonTooltip() {
      return "ກັບຄືນ";
    }
    get calendarModeButtonLabel() {
      return "ສະຫຼັບໄປປະຕິທິນ";
    }
    get cancelButtonLabel() {
      return "ຍົກເລີກ";
    }
    get closeButtonLabel() {
      return "ປິດ";
    }
    get closeButtonTooltip() {
      return "ປິດ";
    }
    get collapsedIconTapHint() {
      return "ຂະຫຍາຍ";
    }
    get continueButtonLabel() {
      return "ສືບຕໍ່";
    }
    get copyButtonLabel() {
      return "ສຳເນົາ";
    }
    get cutButtonLabel() {
      return "ຕັດ";
    }
    get dateHelpText() {
      return "ດດ/ວວ/ປປປປ";
    }
    get dateInputLabel() {
      return "ໃສ່ວັນທີ";
    }
    get dateOutOfRangeLabel() {
      return "ຢູ່ນອກໄລຍະ.";
    }
    get datePickerHelpText() {
      return "ເລືອກວັນທີ";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "ວັນທີສິ້ນສຸດ $fullDate";
    }
    get dateRangeEndLabel() {
      return "ວັນທີສິ້ນສຸດ";
    }
    get dateRangePickerHelpText() {
      return "ເລືອກໄລຍະ";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "ວັນທີເລີ່ມຕົ້ນ $fullDate";
    }
    get dateRangeStartLabel() {
      return "ວັນທີເລີ່ມຕົ້ນ";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "ລຶບ";
    }
    get dialModeButtonLabel() {
      return "ສະຫຼັບໄປໃຊ້ໂໝດເລືອກຕົວເລກ";
    }
    get dialogLabel() {
      return "ຂໍ້ຄວາມ";
    }
    get drawerLabel() {
      return "ເມນູນຳທາງ";
    }
    get expandedIconTapHint() {
      return "ຫຍໍ້ເຂົ້າ";
    }
    get firstPageTooltip() {
      return "ໜ້າທຳອິດ";
    }
    get hideAccountsLabel() {
      return "ເຊື່ອງບັນຊີ";
    }
    get inputDateModeButtonLabel() {
      return "ສະຫຼັບໄປການປ້ອນຂໍ້ມູນ";
    }
    get inputTimeModeButtonLabel() {
      return "ສະຫຼັບໄປໃຊ້ໂໝດປ້ອນຂໍ້ຄວາມ";
    }
    get invalidDateFormatLabel() {
      return "ຮູບແບບບໍ່ຖືກຕ້ອງ.";
    }
    get invalidDateRangeLabel() {
      return "ໄລຍະບໍ່ຖືກຕ້ອງ.";
    }
    get invalidTimeLabel() {
      return "ລະບຸເວລາທີ່ຖືກຕ້ອງ";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "ເລກ 0";
    }
    get keyboardKeyNumpad1() {
      return "ເລກ 1";
    }
    get keyboardKeyNumpad2() {
      return "ເລກ 2";
    }
    get keyboardKeyNumpad3() {
      return "ເລກ 3";
    }
    get keyboardKeyNumpad4() {
      return "ເລກ 4";
    }
    get keyboardKeyNumpad5() {
      return "ເລກ 5";
    }
    get keyboardKeyNumpad6() {
      return "ເລກ 6";
    }
    get keyboardKeyNumpad7() {
      return "ເລກ 7";
    }
    get keyboardKeyNumpad8() {
      return "ເລກ 8";
    }
    get keyboardKeyNumpad9() {
      return "ເລກ 9";
    }
    get keyboardKeyNumpadAdd() {
      return "ປຸ່ມ +";
    }
    get keyboardKeyNumpadComma() {
      return "ປຸ່ມ ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "ປຸ່ມ .";
    }
    get keyboardKeyNumpadDivide() {
      return "ປຸ່ມ /";
    }
    get keyboardKeyNumpadEnter() {
      return "ປຸ່ມ Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "ປຸ່ມ =";
    }
    get keyboardKeyNumpadMultiply() {
      return "ປຸ່ມ *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "ປຸ່ມ (";
    }
    get keyboardKeyNumpadParenRight() {
      return "ປຸ່ມ )";
    }
    get keyboardKeyNumpadSubtract() {
      return "ປຸ່ມ -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "ເປີດປິດ";
    }
    get keyboardKeyPowerOff() {
      return "ປິດເຄື່ອງ";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "ໜ້າສຸດທ້າຍ";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 ໃບອະນຸຍາດ";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount ໃບອະນຸຍາດ";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "ໃບອະນຸຍາດ";
    }
    get menuBarMenuLabel() {
      return "ເມນູແຖບເມນູ";
    }
    get modalBarrierDismissLabel() {
      return "ປິດໄວ້";
    }
    get moreButtonTooltip() {
      return "ເພີ່ມເຕີມ";
    }
    get nextMonthTooltip() {
      return "ເດືອນໜ້າ";
    }
    get nextPageTooltip() {
      return "ໜ້າຕໍ່ໄປ";
    }
    get okButtonLabel() {
      return "ຕົກລົງ";
    }
    get openAppDrawerTooltip() {
      return "ເປີດເມນູການນຳທາງ";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow ຈາກທັງໝົດ $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow ຈາກປະມານ $rowCount";
    }
    get pasteButtonLabel() {
      return "ວາງ";
    }
    get popupMenuLabel() {
      return "ເມນູປັອບອັບ";
    }
    get postMeridiemAbbreviation() {
      return "ຫຼັງທ່ຽງ";
    }
    get previousMonthTooltip() {
      return "ເດືອນແລ້ວ";
    }
    get previousPageTooltip() {
      return "ໜ້າກ່ອນໜ້າ";
    }
    get refreshIndicatorSemanticLabel() {
      return "ໂຫຼດຄືນໃໝ່";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "ຍັງອີກ 1 ຕົວອັກສອນ";
    }
    get remainingTextFieldCharacterCountOther() {
      return "ຍັງອີກ $remainingCount ຕົວອັກສອນ";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "ຍ້າຍລົງ";
    }
    get reorderItemLeft() {
      return "ຍ້າຍໄປຊ້າຍ";
    }
    get reorderItemRight() {
      return "ຍ້າຍໄປຂວາ";
    }
    get reorderItemToEnd() {
      return "ຍ້າຍໄປສິ້ນສຸດ";
    }
    get reorderItemToStart() {
      return "ຍ້າຍໄປເລີ່ມຕົ້ນ";
    }
    get reorderItemUp() {
      return "ຍ້າຍຂຶ້ນ";
    }
    get rowsPerPageTitle() {
      return "ແຖວຕໍ່ໜ້າ:";
    }
    get saveButtonLabel() {
      return "ບັນທຶກ";
    }
    get scriptCategory() {
      return typography.ScriptCategory.tall;
    }
    get searchFieldLabel() {
      return "ຊອກຫາ";
    }
    get selectAllButtonLabel() {
      return "ເລືອກທັງໝົດ";
    }
    get selectYearSemanticsLabel() {
      return "ເລືອກ​ປີ";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "ເລືອກ 1 ລາຍການແລ້ວ";
    }
    get selectedRowCountTitleOther() {
      return "ເລືອກ $selectedRowCount ລາຍການແລ້ວ";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "ສະແດງບັນຊີ";
    }
    get showMenuTooltip() {
      return "ສະແດງເມນູ";
    }
    get signedInLabel() {
      return "ເຂົ້າສູ່ລະບົບແລ້ວ";
    }
    get tabLabelRaw() {
      return "ແຖບທີ $tabIndex ຈາກທັງໝົດ $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "ເລືອກເວລາ";
    }
    get timePickerHourLabel() {
      return "ຊົ່ວໂມງ";
    }
    get timePickerHourModeAnnouncement() {
      return "ເລືອກໂມງ";
    }
    get timePickerInputHelpText() {
      return "ລະບຸເວລາ";
    }
    get timePickerMinuteLabel() {
      return "ນາທີ";
    }
    get timePickerMinuteModeAnnouncement() {
      return "ເລືອກນາທີ";
    }
    get unspecifiedDate() {
      return "ວັນທີ";
    }
    get unspecifiedDateRange() {
      return "ຊ່ວງວັນທີ";
    }
    get viewLicensesButtonLabel() {
      return "ເບິ່ງໃບອະນຸຍາດ";
    }
  };
  (generated_material_localizations.MaterialLocalizationLo.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "lo";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationLo.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationLo.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationLo);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationLo);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationLo, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationLo.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationLo, I[2]);
  generated_material_localizations.MaterialLocalizationLt = class MaterialLocalizationLt extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationLt.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Apie „$applicationName“";
    }
    get alertDialogLabel() {
      return "Įspėjimas";
    }
    get anteMeridiemAbbreviation() {
      return "priešpiet";
    }
    get backButtonTooltip() {
      return "Atgal";
    }
    get calendarModeButtonLabel() {
      return "Perjungti į kalendorių";
    }
    get cancelButtonLabel() {
      return "ATŠAUKTI";
    }
    get closeButtonLabel() {
      return "UŽDARYTI";
    }
    get closeButtonTooltip() {
      return "Uždaryti";
    }
    get collapsedIconTapHint() {
      return "Išskleisti";
    }
    get continueButtonLabel() {
      return "TĘSTI";
    }
    get copyButtonLabel() {
      return "Kopijuoti";
    }
    get cutButtonLabel() {
      return "Iškirpti";
    }
    get dateHelpText() {
      return "yyyy/mm/dd/";
    }
    get dateInputLabel() {
      return "Įveskite datą";
    }
    get dateOutOfRangeLabel() {
      return "Nepatenka į diapazoną.";
    }
    get datePickerHelpText() {
      return "PASIRINKITE DATĄ";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Pabaigos data: $fullDate";
    }
    get dateRangeEndLabel() {
      return "Pabaigos data";
    }
    get dateRangePickerHelpText() {
      return "PASIRINKITE DIAPAZONĄ";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Pradžios data: $fullDate";
    }
    get dateRangeStartLabel() {
      return "Pradžios data";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Ištrinti";
    }
    get dialModeButtonLabel() {
      return "Perjungti į ciferblato parinkiklio režimą";
    }
    get dialogLabel() {
      return "Dialogo langas";
    }
    get drawerLabel() {
      return "Naršymo meniu";
    }
    get expandedIconTapHint() {
      return "Sutraukti";
    }
    get firstPageTooltip() {
      return "Pirmas puslapis";
    }
    get hideAccountsLabel() {
      return "Slėpti paskyras";
    }
    get inputDateModeButtonLabel() {
      return "Perjungti į įvestį";
    }
    get inputTimeModeButtonLabel() {
      return "Perjungti į teksto įvesties režimą";
    }
    get invalidDateFormatLabel() {
      return "Netinkamas formatas.";
    }
    get invalidDateRangeLabel() {
      return "Netinkamas diapazonas.";
    }
    get invalidTimeLabel() {
      return "Įveskite tinkamą laiką";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Naikinimo klavišas";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Ankstesnis kanalas";
    }
    get keyboardKeyChannelUp() {
      return "Kitas kanalas";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Išimti";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Skaitm 0";
    }
    get keyboardKeyNumpad1() {
      return "Skaitm 1";
    }
    get keyboardKeyNumpad2() {
      return "Skaitm 2";
    }
    get keyboardKeyNumpad3() {
      return "Skaitm 3";
    }
    get keyboardKeyNumpad4() {
      return "Skaitm 4";
    }
    get keyboardKeyNumpad5() {
      return "Skaitm 5";
    }
    get keyboardKeyNumpad6() {
      return "Skaitm 6";
    }
    get keyboardKeyNumpad7() {
      return "Skaitm 7";
    }
    get keyboardKeyNumpad8() {
      return "Skaitm 8";
    }
    get keyboardKeyNumpad9() {
      return "Skaitm 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Skaitm +";
    }
    get keyboardKeyNumpadComma() {
      return "Skaitm ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Skaitm .";
    }
    get keyboardKeyNumpadDivide() {
      return "Skaitm /";
    }
    get keyboardKeyNumpadEnter() {
      return "Skaitm „Enter“";
    }
    get keyboardKeyNumpadEqual() {
      return "Skaitm =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Skaitm *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Skaitm (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Skaitm )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Skaitm -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Maitinimas";
    }
    get keyboardKeyPowerOff() {
      return "Išjungti";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Tarpas";
    }
    get lastPageTooltip() {
      return "Paskutinis puslapis";
    }
    get licensesPackageDetailTextFew() {
      return "$licenseCount licencijos";
    }
    get licensesPackageDetailTextMany() {
      return "$licenseCount licencijos";
    }
    get licensesPackageDetailTextOne() {
      return "1 licencija";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licencijų";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Licencijos";
    }
    get menuBarMenuLabel() {
      return "Meniu juostos meniu";
    }
    get modalBarrierDismissLabel() {
      return "Atsisakyti";
    }
    get moreButtonTooltip() {
      return "Daugiau";
    }
    get nextMonthTooltip() {
      return "Kitas mėnuo";
    }
    get nextPageTooltip() {
      return "Kitas puslapis";
    }
    get okButtonLabel() {
      return "GERAI";
    }
    get openAppDrawerTooltip() {
      return "Atidaryti naršymo meniu";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow iš $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow iš maždaug $rowCount";
    }
    get pasteButtonLabel() {
      return "Įklijuoti";
    }
    get popupMenuLabel() {
      return "Iššokantysis meniu";
    }
    get postMeridiemAbbreviation() {
      return "popiet";
    }
    get previousMonthTooltip() {
      return "Ankstesnis mėnuo";
    }
    get previousPageTooltip() {
      return "Ankstesnis puslapis";
    }
    get refreshIndicatorSemanticLabel() {
      return "Atnaujinti";
    }
    get remainingTextFieldCharacterCountFew() {
      return "Liko $remainingCount simboliai";
    }
    get remainingTextFieldCharacterCountMany() {
      return "Liko $remainingCount simbolio";
    }
    get remainingTextFieldCharacterCountOne() {
      return "Liko 1 simbolis";
    }
    get remainingTextFieldCharacterCountOther() {
      return "Liko $remainingCount simbolių";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Perkelti žemyn";
    }
    get reorderItemLeft() {
      return "Perkelti kairėn";
    }
    get reorderItemRight() {
      return "Perkelti dešinėn";
    }
    get reorderItemToEnd() {
      return "Perkelti į pabaigą";
    }
    get reorderItemToStart() {
      return "Perkelti į pradžią";
    }
    get reorderItemUp() {
      return "Perkelti aukštyn";
    }
    get rowsPerPageTitle() {
      return "Eilučių puslapyje:";
    }
    get saveButtonLabel() {
      return "IŠSAUGOTI";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Paieška";
    }
    get selectAllButtonLabel() {
      return "Pasirinkti viską";
    }
    get selectYearSemanticsLabel() {
      return "Pasirinkite metus";
    }
    get selectedRowCountTitleFew() {
      return "Pasirinkti $selectedRowCount elementai";
    }
    get selectedRowCountTitleMany() {
      return "Pasirinkta $selectedRowCount elemento";
    }
    get selectedRowCountTitleOne() {
      return "Pasirinktas 1 elementas";
    }
    get selectedRowCountTitleOther() {
      return "Pasirinkta $selectedRowCount elementų";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Rodyti paskyras";
    }
    get showMenuTooltip() {
      return "Rodyti meniu";
    }
    get signedInLabel() {
      return "Prisijungta";
    }
    get tabLabelRaw() {
      return "$tabIndex skirtukas iš $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "PASIRINKITE LAIKĄ";
    }
    get timePickerHourLabel() {
      return "Valandos";
    }
    get timePickerHourModeAnnouncement() {
      return "Pasirinkite valandas";
    }
    get timePickerInputHelpText() {
      return "ĮVESKITE LAIKĄ";
    }
    get timePickerMinuteLabel() {
      return "Minutės";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Pasirinkite minutes";
    }
    get unspecifiedDate() {
      return "Data";
    }
    get unspecifiedDateRange() {
      return "Dienų seka";
    }
    get viewLicensesButtonLabel() {
      return "PERŽIŪRĖTI LICENCIJAS";
    }
  };
  (generated_material_localizations.MaterialLocalizationLt.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "lt";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationLt.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationLt.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationLt);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationLt);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationLt, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationLt.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationLt, I[2]);
  generated_material_localizations.MaterialLocalizationLv = class MaterialLocalizationLv extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationLv.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Par $applicationName";
    }
    get alertDialogLabel() {
      return "Brīdinājums";
    }
    get anteMeridiemAbbreviation() {
      return "priekšpusdienā";
    }
    get backButtonTooltip() {
      return "Atpakaļ";
    }
    get calendarModeButtonLabel() {
      return "Pārslēgties uz kalendāru";
    }
    get cancelButtonLabel() {
      return "ATCELT";
    }
    get closeButtonLabel() {
      return "AIZVĒRT";
    }
    get closeButtonTooltip() {
      return "Aizvērt";
    }
    get collapsedIconTapHint() {
      return "Izvērst";
    }
    get continueButtonLabel() {
      return "TURPINĀT";
    }
    get copyButtonLabel() {
      return "Kopēt";
    }
    get cutButtonLabel() {
      return "Izgriezt";
    }
    get dateHelpText() {
      return "dd/mm/gggg";
    }
    get dateInputLabel() {
      return "Ievadiet datumu";
    }
    get dateOutOfRangeLabel() {
      return "Ārpus diapazona.";
    }
    get datePickerHelpText() {
      return "ATLASIET DATUMU";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Beigu datums: $fullDate";
    }
    get dateRangeEndLabel() {
      return "Beigu datums";
    }
    get dateRangePickerHelpText() {
      return "ATLASIET DIAPAZONU";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Sākuma datums: $fullDate";
    }
    get dateRangeStartLabel() {
      return "Sākuma datums";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Dzēst";
    }
    get dialModeButtonLabel() {
      return "Pārslēgties uz ciparnīcas atlasītāja režīmu";
    }
    get dialogLabel() {
      return "Dialoglodziņš";
    }
    get drawerLabel() {
      return "Navigācijas izvēlne";
    }
    get expandedIconTapHint() {
      return "Sakļaut";
    }
    get firstPageTooltip() {
      return "Pirmā lapa";
    }
    get hideAccountsLabel() {
      return "Slēpt kontus";
    }
    get inputDateModeButtonLabel() {
      return "Pārslēgties uz ievadi";
    }
    get inputTimeModeButtonLabel() {
      return "Pārslēgties uz teksta ievades režīmu";
    }
    get invalidDateFormatLabel() {
      return "Nederīgs formāts.";
    }
    get invalidDateRangeLabel() {
      return "Nederīgs diapazons.";
    }
    get invalidTimeLabel() {
      return "Ievadiet derīgu laiku.";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Nākamais kanāls";
    }
    get keyboardKeyChannelUp() {
      return "Iepriekšējais kanāls";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Izstumt";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Windows";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Ieslēgt";
    }
    get keyboardKeyPowerOff() {
      return "Izslēgt";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Atlasīt";
    }
    get keyboardKeySpace() {
      return "Atstarpes taustiņš";
    }
    get lastPageTooltip() {
      return "Pēdējā lapa";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 licence";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licences";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "Nav licenču";
    }
    get licensesPageTitle() {
      return "Licences";
    }
    get menuBarMenuLabel() {
      return "Izvēļņu joslas izvēlne";
    }
    get modalBarrierDismissLabel() {
      return "Nerādīt";
    }
    get moreButtonTooltip() {
      return "Vairāk";
    }
    get nextMonthTooltip() {
      return "Nākamais mēnesis";
    }
    get nextPageTooltip() {
      return "Nākamā lapa";
    }
    get okButtonLabel() {
      return "LABI";
    }
    get openAppDrawerTooltip() {
      return "Atvērt navigācijas izvēlni";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow.–$lastRow. no $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow.–$lastRow. no aptuveni $rowCount";
    }
    get pasteButtonLabel() {
      return "Ielīmēt";
    }
    get popupMenuLabel() {
      return "Uznirstošā izvēlne";
    }
    get postMeridiemAbbreviation() {
      return "pēcpusdienā";
    }
    get previousMonthTooltip() {
      return "Iepriekšējais mēnesis";
    }
    get previousPageTooltip() {
      return "Iepriekšējā lapa";
    }
    get refreshIndicatorSemanticLabel() {
      return "Atsvaidzināt";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "Atlikusi 1 rakstzīme.";
    }
    get remainingTextFieldCharacterCountOther() {
      return "Atlikušas $remainingCount rakstzīmes.";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "Nav atlikusi neviena rakstzīme.";
    }
    get reorderItemDown() {
      return "Pārvietot uz leju";
    }
    get reorderItemLeft() {
      return "Pārvietot pa kreisi";
    }
    get reorderItemRight() {
      return "Pārvietot pa labi";
    }
    get reorderItemToEnd() {
      return "Pārvietot uz beigām";
    }
    get reorderItemToStart() {
      return "Pārvietot uz sākumu";
    }
    get reorderItemUp() {
      return "Pārvietot uz augšu";
    }
    get rowsPerPageTitle() {
      return "Rindas lapā:";
    }
    get saveButtonLabel() {
      return "SAGLABĀT";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Meklēt";
    }
    get selectAllButtonLabel() {
      return "Atlasīt visu";
    }
    get selectYearSemanticsLabel() {
      return "Atlasiet gadu";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "Atlasīts 1 vienums";
    }
    get selectedRowCountTitleOther() {
      return "Atlasīti $selectedRowCount vienumi";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return "Nav atlasītu vienumu";
    }
    get showAccountsLabel() {
      return "Rādīt kontus";
    }
    get showMenuTooltip() {
      return "Rādīt izvēlni";
    }
    get signedInLabel() {
      return "Esat pierakstījies";
    }
    get tabLabelRaw() {
      return "$tabIndex. cilne no $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "ATLASIET LAIKU";
    }
    get timePickerHourLabel() {
      return "Stunda";
    }
    get timePickerHourModeAnnouncement() {
      return "Atlasiet stundas";
    }
    get timePickerInputHelpText() {
      return "IEVADIET LAIKU";
    }
    get timePickerMinuteLabel() {
      return "Minūte";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Atlasiet minūtes";
    }
    get unspecifiedDate() {
      return "Datums";
    }
    get unspecifiedDateRange() {
      return "Datumu diapazons";
    }
    get viewLicensesButtonLabel() {
      return "SKATĪT LICENCES";
    }
  };
  (generated_material_localizations.MaterialLocalizationLv.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "lv";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationLv.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationLv.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationLv);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationLv);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationLv, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationLv.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationLv, I[2]);
  generated_material_localizations.MaterialLocalizationMk = class MaterialLocalizationMk extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationMk.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "За $applicationName";
    }
    get alertDialogLabel() {
      return "Предупредување";
    }
    get anteMeridiemAbbreviation() {
      return "ПРЕТПЛАДНЕ";
    }
    get backButtonTooltip() {
      return "Назад";
    }
    get calendarModeButtonLabel() {
      return "Префрли на календар";
    }
    get cancelButtonLabel() {
      return "ОТКАЖИ";
    }
    get closeButtonLabel() {
      return "ЗАТВОРИ";
    }
    get closeButtonTooltip() {
      return "Затвори";
    }
    get collapsedIconTapHint() {
      return "Прошири";
    }
    get continueButtonLabel() {
      return "ПРОДОЛЖИ";
    }
    get copyButtonLabel() {
      return "Копирај";
    }
    get cutButtonLabel() {
      return "Исечи";
    }
    get dateHelpText() {
      return "dd.mm.yyyy";
    }
    get dateInputLabel() {
      return "Внесете датум";
    }
    get dateOutOfRangeLabel() {
      return "Надвор од опсег.";
    }
    get datePickerHelpText() {
      return "ИЗБЕРЕТЕ ДАТУМ";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Краен датум $fullDate";
    }
    get dateRangeEndLabel() {
      return "Краен датум";
    }
    get dateRangePickerHelpText() {
      return "ИЗБЕРЕТЕ ОПСЕГ";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Датум на започнување $fullDate";
    }
    get dateRangeStartLabel() {
      return "Датум на започнување";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Избриши";
    }
    get dialModeButtonLabel() {
      return "Префрлете се на режим на избирач";
    }
    get dialogLabel() {
      return "Дијалог";
    }
    get drawerLabel() {
      return "Мени за навигација";
    }
    get expandedIconTapHint() {
      return "Собери";
    }
    get firstPageTooltip() {
      return "Прва страница";
    }
    get hideAccountsLabel() {
      return "Сокриј сметки";
    }
    get inputDateModeButtonLabel() {
      return "Префрли на внесување";
    }
    get inputTimeModeButtonLabel() {
      return "Префрлете се на режим за внесување текст";
    }
    get invalidDateFormatLabel() {
      return "Неважечки формат.";
    }
    get invalidDateRangeLabel() {
      return "Погрешен опсег.";
    }
    get invalidTimeLabel() {
      return "Внесете важечко време";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "Power Off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "Последна страница";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 лиценца";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount лиценци";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Лиценци";
    }
    get menuBarMenuLabel() {
      return "Мени на лентата со мени";
    }
    get modalBarrierDismissLabel() {
      return "Отфрли";
    }
    get moreButtonTooltip() {
      return "Уште";
    }
    get nextMonthTooltip() {
      return "Следниот месец";
    }
    get nextPageTooltip() {
      return "Следна страница";
    }
    get okButtonLabel() {
      return "Во ред";
    }
    get openAppDrawerTooltip() {
      return "Отворете го менито за навигација";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow - $lastRow од $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow - $lastRow од приближно $rowCount";
    }
    get pasteButtonLabel() {
      return "Залепи";
    }
    get popupMenuLabel() {
      return "Скокачко мени";
    }
    get postMeridiemAbbreviation() {
      return "ПОПЛАДНЕ";
    }
    get previousMonthTooltip() {
      return "Претходниот месец";
    }
    get previousPageTooltip() {
      return "Претходна страница";
    }
    get refreshIndicatorSemanticLabel() {
      return "Освежи";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "Преостанува уште 1 знак";
    }
    get remainingTextFieldCharacterCountOther() {
      return "Преостануваат уште $remainingCount знаци";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "Преместете надолу";
    }
    get reorderItemLeft() {
      return "Преместете налево";
    }
    get reorderItemRight() {
      return "Преместете надесно";
    }
    get reorderItemToEnd() {
      return "Преместете на крајот";
    }
    get reorderItemToStart() {
      return "Преместете на почеток";
    }
    get reorderItemUp() {
      return "Преместете нагоре";
    }
    get rowsPerPageTitle() {
      return "Редови на страница:";
    }
    get saveButtonLabel() {
      return "ЗАЧУВАЈ";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Пребарувајте";
    }
    get selectAllButtonLabel() {
      return "Избери ги сите";
    }
    get selectYearSemanticsLabel() {
      return "Изберете година";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "Избрана е 1 ставка";
    }
    get selectedRowCountTitleOther() {
      return "Избрани се $selectedRowCount ставки";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Прикажи сметки";
    }
    get showMenuTooltip() {
      return "Прикажи мени";
    }
    get signedInLabel() {
      return "Најавени сте";
    }
    get tabLabelRaw() {
      return "Картичка $tabIndex од $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "ИЗБЕРЕТЕ ВРЕМЕ";
    }
    get timePickerHourLabel() {
      return "Час";
    }
    get timePickerHourModeAnnouncement() {
      return "Изберете часови";
    }
    get timePickerInputHelpText() {
      return "ВНЕСЕТЕ ВРЕМЕ";
    }
    get timePickerMinuteLabel() {
      return "Минута";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Изберете минути";
    }
    get unspecifiedDate() {
      return "Датум";
    }
    get unspecifiedDateRange() {
      return "Временски период";
    }
    get viewLicensesButtonLabel() {
      return "ПРИКАЖИ ЛИЦЕНЦИ";
    }
  };
  (generated_material_localizations.MaterialLocalizationMk.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "mk";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationMk.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationMk.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationMk);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationMk);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationMk, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationMk.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationMk, I[2]);
  generated_material_localizations.MaterialLocalizationMl = class MaterialLocalizationMl extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationMl.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName എന്നതിനെക്കുറിച്ച്";
    }
    get alertDialogLabel() {
      return "മുന്നറിയിപ്പ്";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "മടങ്ങുക";
    }
    get calendarModeButtonLabel() {
      return "കലണ്ടറിലേക്ക് മാറുക";
    }
    get cancelButtonLabel() {
      return "റദ്ദാക്കുക";
    }
    get closeButtonLabel() {
      return "അടയ്‌ക്കുക";
    }
    get closeButtonTooltip() {
      return "അടയ്‌ക്കുക";
    }
    get collapsedIconTapHint() {
      return "വികസിപ്പിക്കുക";
    }
    get continueButtonLabel() {
      return "തുടരുക";
    }
    get copyButtonLabel() {
      return "പകർത്തുക";
    }
    get cutButtonLabel() {
      return "മുറിക്കുക";
    }
    get dateHelpText() {
      return "mm/dd/yyyy";
    }
    get dateInputLabel() {
      return "തീയതി നൽകുക";
    }
    get dateOutOfRangeLabel() {
      return "സാധുവായ ശ്രേണിക്ക് പുറത്താണ്.";
    }
    get datePickerHelpText() {
      return "തീയതി തിരഞ്ഞെടുക്കുക";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "അവസാനിക്കുന്ന തീയതി $fullDate";
    }
    get dateRangeEndLabel() {
      return "അവസാനിക്കുന്ന തീയതി";
    }
    get dateRangePickerHelpText() {
      return "ശ്രേണി തിരഞ്ഞെടുക്കുക";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "ആരംഭിക്കുന്ന തീയതി $fullDate";
    }
    get dateRangeStartLabel() {
      return "ആരംഭിക്കുന്ന തീയതി";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "ഇല്ലാതാക്കുക";
    }
    get dialModeButtonLabel() {
      return "ഡയൽ പിക്കർ മോഡിലേക്ക് മാറുക";
    }
    get dialogLabel() {
      return "ഡയലോഗ്";
    }
    get drawerLabel() {
      return "നാവിഗേഷൻ മെനു";
    }
    get expandedIconTapHint() {
      return "ചുരുക്കുക";
    }
    get firstPageTooltip() {
      return "ആദ്യ പേജ്";
    }
    get hideAccountsLabel() {
      return "അക്കൗണ്ടുകൾ മറയ്‌ക്കുക";
    }
    get inputDateModeButtonLabel() {
      return "ഇൻപുട്ടിലേക്ക് മാറുക";
    }
    get inputTimeModeButtonLabel() {
      return "ടെക്‌സ്‌റ്റ് ഇൻപുട്ട് മോഡിലേക്ക് മാറുക";
    }
    get invalidDateFormatLabel() {
      return "തെറ്റായ ഫോർമാറ്റ്.";
    }
    get invalidDateRangeLabel() {
      return "തെറ്റായ ശ്രേണി.";
    }
    get invalidTimeLabel() {
      return "സാധുവായ സമയം നൽകുക";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "Power Off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "അവസാന പേജ്";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "ഒരു ലൈസൻസ്";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount ലൈസൻസുകൾ";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "ലൈസൻസുകൾ";
    }
    get menuBarMenuLabel() {
      return "മെനു ബാർ മെനു";
    }
    get modalBarrierDismissLabel() {
      return "നിരസിക്കുക";
    }
    get moreButtonTooltip() {
      return "കൂടുതൽ";
    }
    get nextMonthTooltip() {
      return "അടുത്ത മാസം";
    }
    get nextPageTooltip() {
      return "അടുത്ത പേജ്";
    }
    get okButtonLabel() {
      return "ശരി";
    }
    get openAppDrawerTooltip() {
      return "നാവിഗേഷൻ മെനു തുറക്കുക";
    }
    get pageRowsInfoTitleRaw() {
      return "$rowCount-ൽ $firstRow –$lastRow";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "ഏകദേശം $rowCount-ൽ $firstRow –$lastRow";
    }
    get pasteButtonLabel() {
      return "ഒട്ടിക്കുക";
    }
    get popupMenuLabel() {
      return "പോപ്പ് അപ്പ് മെനു";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "മുമ്പത്തെ മാസം";
    }
    get previousPageTooltip() {
      return "മുമ്പത്തെ പേജ്";
    }
    get refreshIndicatorSemanticLabel() {
      return "റീഫ്രഷ് ചെയ്യുക";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "ഒരു പ്രതീകം ശേഷിക്കുന്നു";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount പ്രതീകങ്ങൾ ശേഷിക്കുന്നു";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "താഴോട്ട് നീക്കുക";
    }
    get reorderItemLeft() {
      return "ഇടത്തോട്ട് നീക്കുക";
    }
    get reorderItemRight() {
      return "വലത്തോട്ട് നീക്കുക";
    }
    get reorderItemToEnd() {
      return "അവസാന ഭാഗത്തേക്ക് പോവുക";
    }
    get reorderItemToStart() {
      return "തുടക്കത്തിലേക്ക് പോവുക";
    }
    get reorderItemUp() {
      return "മുകളിലോട്ട് നീക്കുക";
    }
    get rowsPerPageTitle() {
      return "ഓരോ പേജിലുമുള്ള വരികൾ:";
    }
    get saveButtonLabel() {
      return "സംരക്ഷിക്കുക";
    }
    get scriptCategory() {
      return typography.ScriptCategory.tall;
    }
    get searchFieldLabel() {
      return "തിരയുക";
    }
    get selectAllButtonLabel() {
      return "എല്ലാം തിരഞ്ഞെടുക്കുക";
    }
    get selectYearSemanticsLabel() {
      return "വർഷം തിരഞ്ഞെടുക്കുക";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "ഒരു ഇനം തിരഞ്ഞെടുത്തു";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount ഇനങ്ങൾ തിരഞ്ഞെടുത്തു";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "അക്കൗണ്ടുകൾ കാണിക്കുക";
    }
    get showMenuTooltip() {
      return "മെനു കാണിക്കുക";
    }
    get signedInLabel() {
      return "സൈൻ ഇൻ ചെയ്‌തു";
    }
    get tabLabelRaw() {
      return "$tabCount-ൽ $tabIndex";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "സമയം തിരഞ്ഞെടുക്കുക";
    }
    get timePickerHourLabel() {
      return "മണിക്കൂർ";
    }
    get timePickerHourModeAnnouncement() {
      return "മണിക്കൂർ തിരഞ്ഞെടുക്കുക";
    }
    get timePickerInputHelpText() {
      return "സമയം നൽകുക";
    }
    get timePickerMinuteLabel() {
      return "മിനിറ്റ്";
    }
    get timePickerMinuteModeAnnouncement() {
      return "മിനിറ്റ് തിരഞ്ഞെടുക്കുക";
    }
    get unspecifiedDate() {
      return "തീയതി";
    }
    get unspecifiedDateRange() {
      return "തീയതി ശ്രേണി";
    }
    get viewLicensesButtonLabel() {
      return "ലൈസൻസുകൾ കാണുക";
    }
  };
  (generated_material_localizations.MaterialLocalizationMl.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "ml";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationMl.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationMl.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationMl);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationMl);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationMl, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationMl.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationMl, I[2]);
  generated_material_localizations.MaterialLocalizationMn = class MaterialLocalizationMn extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationMn.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName-н тухай";
    }
    get alertDialogLabel() {
      return "Сэрэмжлүүлэг";
    }
    get anteMeridiemAbbreviation() {
      return "ӨГЛӨӨ";
    }
    get backButtonTooltip() {
      return "Буцах";
    }
    get calendarModeButtonLabel() {
      return "Календарь луу сэлгэх";
    }
    get cancelButtonLabel() {
      return "БОЛИХ";
    }
    get closeButtonLabel() {
      return "ХААХ";
    }
    get closeButtonTooltip() {
      return "Хаах";
    }
    get collapsedIconTapHint() {
      return "Дэлгэх";
    }
    get continueButtonLabel() {
      return "ҮРГЭЛЖЛҮҮЛЭХ";
    }
    get copyButtonLabel() {
      return "Хуулах";
    }
    get cutButtonLabel() {
      return "Таслах";
    }
    get dateHelpText() {
      return "жжжж.сс.өө";
    }
    get dateInputLabel() {
      return "Огноо оруулах";
    }
    get dateOutOfRangeLabel() {
      return "Интервалаас гадуур байна.";
    }
    get datePickerHelpText() {
      return "ОГНОО СОНГОХ";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Дуусах огноо $fullDate";
    }
    get dateRangeEndLabel() {
      return "Дуусах огноо";
    }
    get dateRangePickerHelpText() {
      return "ИНТЕРВАЛ СОНГОХ";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Эхлэх огноо $fullDate";
    }
    get dateRangeStartLabel() {
      return "Эхлэх огноо";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Устгах";
    }
    get dialModeButtonLabel() {
      return "Цаг сонгогч горим руу сэлгэх";
    }
    get dialogLabel() {
      return "Харилцах цонх";
    }
    get drawerLabel() {
      return "Навигацын цэс";
    }
    get expandedIconTapHint() {
      return "Буулгах";
    }
    get firstPageTooltip() {
      return "Эхний хуудас";
    }
    get hideAccountsLabel() {
      return "Бүртгэлүүдийг нуух";
    }
    get inputDateModeButtonLabel() {
      return "Оролт руу сэлгэх";
    }
    get inputTimeModeButtonLabel() {
      return "Текст оруулах горим руу сэлгэх";
    }
    get invalidDateFormatLabel() {
      return "Буруу формат байна.";
    }
    get invalidDateRangeLabel() {
      return "Буруу интервал байна.";
    }
    get invalidTimeLabel() {
      return "Цагийг зөв оруулна уу";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Гэр";
    }
    get keyboardKeyInsert() {
      return "Оруулах";
    }
    get keyboardKeyMeta() {
      return "Мета";
    }
    get keyboardKeyMetaMacOs() {
      return "Тушаал";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Асаах/унтраах товч";
    }
    get keyboardKeyPowerOff() {
      return "Унтраах";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Сонгох";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "Сүүлийн хуудас";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 лиценз";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount лиценз";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Лиценз";
    }
    get menuBarMenuLabel() {
      return "Цэсний талбарын цэс";
    }
    get modalBarrierDismissLabel() {
      return "Үл хэрэгсэх";
    }
    get moreButtonTooltip() {
      return "Бусад";
    }
    get nextMonthTooltip() {
      return "Дараах сар";
    }
    get nextPageTooltip() {
      return "Дараах хуудас";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Навигацын цэсийг нээх";
    }
    get pageRowsInfoTitleRaw() {
      return "$rowCount-н $firstRow–$lastRow";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "Ойролцоогоор $rowCount-н $firstRow–$lastRow";
    }
    get pasteButtonLabel() {
      return "Буулгах";
    }
    get popupMenuLabel() {
      return "Попап цэс";
    }
    get postMeridiemAbbreviation() {
      return "ОРОЙ";
    }
    get previousMonthTooltip() {
      return "Өмнөх сар";
    }
    get previousPageTooltip() {
      return "Өмнөх хуудас";
    }
    get refreshIndicatorSemanticLabel() {
      return "Сэргээх";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 тэмдэгт үлдсэн";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount тэмдэгт үлдсэн";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "No characters remaining";
    }
    get reorderItemDown() {
      return "Доош зөөх";
    }
    get reorderItemLeft() {
      return "Зүүн тийш зөөх";
    }
    get reorderItemRight() {
      return "Баруун тийш зөөх";
    }
    get reorderItemToEnd() {
      return "Төгсгөл рүү зөөх";
    }
    get reorderItemToStart() {
      return "Эхлэл рүү зөөх";
    }
    get reorderItemUp() {
      return "Дээш зөөх";
    }
    get rowsPerPageTitle() {
      return "Хуудсан дахь мөрийн тоо:";
    }
    get saveButtonLabel() {
      return "ХАДГАЛАХ";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Хайх";
    }
    get selectAllButtonLabel() {
      return "Бүгдийг сонгох";
    }
    get selectYearSemanticsLabel() {
      return "Жил сонгох";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 зүйл сонгосон";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount зүйл сонгосон";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return "Бичлэг сонгоогүй байна";
    }
    get showAccountsLabel() {
      return "Бүртгэлүүдийг харуулах";
    }
    get showMenuTooltip() {
      return "Цэсийг харуулах";
    }
    get signedInLabel() {
      return "Нэвтэрсэн";
    }
    get tabLabelRaw() {
      return "$tabCount-н $tabIndex-р таб";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "ЦАГ СОНГОХ";
    }
    get timePickerHourLabel() {
      return "Цаг";
    }
    get timePickerHourModeAnnouncement() {
      return "Цаг сонгоно уу";
    }
    get timePickerInputHelpText() {
      return "ЦАГ ОРУУЛАХ";
    }
    get timePickerMinuteLabel() {
      return "Минут";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Минут сонгоно уу";
    }
    get unspecifiedDate() {
      return "Огноо";
    }
    get unspecifiedDateRange() {
      return "Хугацааны интервал";
    }
    get viewLicensesButtonLabel() {
      return "ЛИЦЕНЗИЙГ ХАРАХ";
    }
  };
  (generated_material_localizations.MaterialLocalizationMn.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "mn";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationMn.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationMn.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationMn);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationMn);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationMn, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationMn.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationMn, I[2]);
  generated_material_localizations.MaterialLocalizationMr = class MaterialLocalizationMr extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationMr.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName बद्दल";
    }
    get alertDialogLabel() {
      return "सूचना";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "मागे";
    }
    get calendarModeButtonLabel() {
      return "कॅलेंडरवर स्विच करा";
    }
    get cancelButtonLabel() {
      return "रद्द करा";
    }
    get closeButtonLabel() {
      return "बंद करा";
    }
    get closeButtonTooltip() {
      return "बंद करा";
    }
    get collapsedIconTapHint() {
      return "विस्तार करा";
    }
    get continueButtonLabel() {
      return "सुरू ठेवा";
    }
    get copyButtonLabel() {
      return "कॉपी करा";
    }
    get cutButtonLabel() {
      return "कट करा";
    }
    get dateHelpText() {
      return "dd/mm/yyyy";
    }
    get dateInputLabel() {
      return "तारीख एंटर करा";
    }
    get dateOutOfRangeLabel() {
      return "श्रेणीच्या बाहेर आहे.";
    }
    get datePickerHelpText() {
      return "तारीख निवडा";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "संपण्याची तारीख $fullDate";
    }
    get dateRangeEndLabel() {
      return "संपण्याची तारीख";
    }
    get dateRangePickerHelpText() {
      return "श्रेणी निवडा";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "सुरू होण्याची तारीख $fullDate";
    }
    get dateRangeStartLabel() {
      return "सुरू होण्याची तारीख";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "हटवा";
    }
    get dialModeButtonLabel() {
      return "डायल पिकर मोडवर स्विच करा";
    }
    get dialogLabel() {
      return "डायलॉग";
    }
    get drawerLabel() {
      return "नेव्हिगेशन मेनू";
    }
    get expandedIconTapHint() {
      return "कोलॅप्स करा";
    }
    get firstPageTooltip() {
      return "पहिले पेज";
    }
    get hideAccountsLabel() {
      return "खाती लपवा";
    }
    get inputDateModeButtonLabel() {
      return "इनपुटवर स्विच करा";
    }
    get inputTimeModeButtonLabel() {
      return "मजकूर इनपुट मोडवर स्विच करा";
    }
    get invalidDateFormatLabel() {
      return "फॉरमॅट चुकीचा आहे.";
    }
    get invalidDateRangeLabel() {
      return "श्रेणी चुकीची आहे.";
    }
    get invalidTimeLabel() {
      return "योग्य वेळ एंटर करा";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "बॅकस्पेस";
    }
    get keyboardKeyCapsLock() {
      return "कॅप्स लॉक";
    }
    get keyboardKeyChannelDown() {
      return "चॅनल डाउन";
    }
    get keyboardKeyChannelUp() {
      return "चॅनल अप";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "इजेक्ट";
    }
    get keyboardKeyEnd() {
      return "एंड";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "होम";
    }
    get keyboardKeyInsert() {
      return "इन्सर्ट";
    }
    get keyboardKeyMeta() {
      return "मेटा";
    }
    get keyboardKeyMetaMacOs() {
      return "कमांड";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "पॉवर";
    }
    get keyboardKeyPowerOff() {
      return "पॉवर ऑफ";
    }
    get keyboardKeyPrintScreen() {
      return "प्रिंट स्क्रीन";
    }
    get keyboardKeyScrollLock() {
      return "स्क्रोल लॉक";
    }
    get keyboardKeySelect() {
      return "निवडा";
    }
    get keyboardKeySpace() {
      return "स्पेस";
    }
    get lastPageTooltip() {
      return "शेवटचे पेज";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "एक परवाना";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount परवाने";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "परवाने";
    }
    get menuBarMenuLabel() {
      return "मेनू बार मेनू";
    }
    get modalBarrierDismissLabel() {
      return "डिसमिस करा";
    }
    get moreButtonTooltip() {
      return "आणखी";
    }
    get nextMonthTooltip() {
      return "पुढील महिना";
    }
    get nextPageTooltip() {
      return "पुढील पेज";
    }
    get okButtonLabel() {
      return "ओके";
    }
    get openAppDrawerTooltip() {
      return "नेव्हिगेशन मेनू उघडा";
    }
    get pageRowsInfoTitleRaw() {
      return "$rowCount पैकी $firstRow–$lastRow";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$rowCount च्या बद्दल $firstRow–$lastRow";
    }
    get pasteButtonLabel() {
      return "पेस्ट करा";
    }
    get popupMenuLabel() {
      return "पॉपअप मेनू";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "मागील महिना";
    }
    get previousPageTooltip() {
      return "मागील पेज";
    }
    get refreshIndicatorSemanticLabel() {
      return "रिफ्रेश करा";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "एक वर्ण शिल्लक";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount वर्ण शिल्लक";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "कोणतेही वर्ण शिल्लक नाहीत";
    }
    get reorderItemDown() {
      return "खाली हलवा";
    }
    get reorderItemLeft() {
      return "डावीकडे हलवा";
    }
    get reorderItemRight() {
      return "उजवीकडे हलवा";
    }
    get reorderItemToEnd() {
      return "शेवटाकडे हलवा";
    }
    get reorderItemToStart() {
      return "सुरुवातीला हलवा";
    }
    get reorderItemUp() {
      return "वर हलवा";
    }
    get rowsPerPageTitle() {
      return "प्रति पेज पंक्ती:";
    }
    get saveButtonLabel() {
      return "सेव्ह करा";
    }
    get scriptCategory() {
      return typography.ScriptCategory.dense;
    }
    get searchFieldLabel() {
      return "शोध";
    }
    get selectAllButtonLabel() {
      return "सर्व निवडा";
    }
    get selectYearSemanticsLabel() {
      return "वर्ष निवडा";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "एक आयटम निवडला";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount आयटम निवडले";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return "कोणतेही आयटम निवडलेले नाहीत";
    }
    get showAccountsLabel() {
      return "खाती दर्शवा";
    }
    get showMenuTooltip() {
      return "मेनू दाखवा";
    }
    get signedInLabel() {
      return "साइन इन केले आहे";
    }
    get tabLabelRaw() {
      return "$tabCount पैकी $tabIndex टॅब";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.h_colon_mm_space_a;
    }
    get timePickerDialHelpText() {
      return "वेळ निवडा";
    }
    get timePickerHourLabel() {
      return "तास";
    }
    get timePickerHourModeAnnouncement() {
      return "तास निवडा";
    }
    get timePickerInputHelpText() {
      return "वेळ एंटर करा";
    }
    get timePickerMinuteLabel() {
      return "मिनिट";
    }
    get timePickerMinuteModeAnnouncement() {
      return "मिनिटे निवडा";
    }
    get unspecifiedDate() {
      return "तारीख";
    }
    get unspecifiedDateRange() {
      return "तारीख श्रेणी";
    }
    get viewLicensesButtonLabel() {
      return "परवाने पहा";
    }
  };
  (generated_material_localizations.MaterialLocalizationMr.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "mr";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationMr.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationMr.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationMr);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationMr);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationMr, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationMr.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationMr, I[2]);
  generated_material_localizations.MaterialLocalizationMs = class MaterialLocalizationMs extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationMs.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Perihal $applicationName";
    }
    get alertDialogLabel() {
      return "Makluman";
    }
    get anteMeridiemAbbreviation() {
      return "PG";
    }
    get backButtonTooltip() {
      return "Kembali";
    }
    get calendarModeButtonLabel() {
      return "Tukar kepada kalendar";
    }
    get cancelButtonLabel() {
      return "BATAL";
    }
    get closeButtonLabel() {
      return "TUTUP";
    }
    get closeButtonTooltip() {
      return "Tutup";
    }
    get collapsedIconTapHint() {
      return "Kembangkan";
    }
    get continueButtonLabel() {
      return "TERUSKAN";
    }
    get copyButtonLabel() {
      return "Salin";
    }
    get cutButtonLabel() {
      return "Potong";
    }
    get dateHelpText() {
      return "bb/hh/tttt";
    }
    get dateInputLabel() {
      return "Masukkan Tarikh";
    }
    get dateOutOfRangeLabel() {
      return "Di luar julat.";
    }
    get datePickerHelpText() {
      return "PILIH TARIKH";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Tarikh tamat ialah $fullDate";
    }
    get dateRangeEndLabel() {
      return "Tarikh Tamat";
    }
    get dateRangePickerHelpText() {
      return "PILIH JULAT";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Tarikh mula ialah $fullDate";
    }
    get dateRangeStartLabel() {
      return "Tarikh Mula";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "Padam";
    }
    get dialModeButtonLabel() {
      return "Beralih kepada mod pemilih dail";
    }
    get dialogLabel() {
      return "Dialog";
    }
    get drawerLabel() {
      return "Menu navigasi";
    }
    get expandedIconTapHint() {
      return "Runtuhkan";
    }
    get firstPageTooltip() {
      return "Halaman pertama";
    }
    get hideAccountsLabel() {
      return "Sembunyikan akaun";
    }
    get inputDateModeButtonLabel() {
      return "Tukar kepada input";
    }
    get inputTimeModeButtonLabel() {
      return "Beralih kepada mod input teks";
    }
    get invalidDateFormatLabel() {
      return "Format tidak sah.";
    }
    get invalidDateRangeLabel() {
      return "Julat tidak sah.";
    }
    get invalidTimeLabel() {
      return "Masukkan masa yang sah";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Saluran Bawah";
    }
    get keyboardKeyChannelUp() {
      return "Saluran ke Atas";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Keluarkan";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Perintah";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Kuasa";
    }
    get keyboardKeyPowerOff() {
      return "Matikan";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Pilih";
    }
    get keyboardKeySpace() {
      return "Ruang";
    }
    get lastPageTooltip() {
      return "Halaman terakhir";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 lesen";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount lesen";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Lesen";
    }
    get menuBarMenuLabel() {
      return "Menu bar menu";
    }
    get modalBarrierDismissLabel() {
      return "Tolak";
    }
    get moreButtonTooltip() {
      return "Lagi";
    }
    get nextMonthTooltip() {
      return "Bulan depan";
    }
    get nextPageTooltip() {
      return "Halaman seterusnya";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Buka menu navigasi";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow dari $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow dari kira-kira $rowCount";
    }
    get pasteButtonLabel() {
      return "Tampal";
    }
    get popupMenuLabel() {
      return "Menu pop timbul";
    }
    get postMeridiemAbbreviation() {
      return "PTG";
    }
    get previousMonthTooltip() {
      return "Bulan sebelumnya";
    }
    get previousPageTooltip() {
      return "Halaman sebelumnya";
    }
    get refreshIndicatorSemanticLabel() {
      return "Muat semula";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 aksara lagi";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount aksara lagi";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Alih ke bawah";
    }
    get reorderItemLeft() {
      return "Alih ke kiri";
    }
    get reorderItemRight() {
      return "Alih ke kanan";
    }
    get reorderItemToEnd() {
      return "Alih ke penghujung";
    }
    get reorderItemToStart() {
      return "Alih ke permulaan";
    }
    get reorderItemUp() {
      return "Alih ke atas";
    }
    get rowsPerPageTitle() {
      return "Baris setiap halaman:";
    }
    get saveButtonLabel() {
      return "SIMPAN";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Cari";
    }
    get selectAllButtonLabel() {
      return "Pilih semua";
    }
    get selectYearSemanticsLabel() {
      return "Pilih tahun";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 item dipilih";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount item dipilih";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return "Tiada item dipilih";
    }
    get showAccountsLabel() {
      return "Tunjukkan akaun";
    }
    get showMenuTooltip() {
      return "Tunjukkan menu";
    }
    get signedInLabel() {
      return "Dilog masuk";
    }
    get tabLabelRaw() {
      return "Tab $tabIndex dari $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.h_colon_mm_space_a;
    }
    get timePickerDialHelpText() {
      return "PILIH MASA";
    }
    get timePickerHourLabel() {
      return "Jam";
    }
    get timePickerHourModeAnnouncement() {
      return "Pilih jam";
    }
    get timePickerInputHelpText() {
      return "MASUKKAN MASA";
    }
    get timePickerMinuteLabel() {
      return "Minit";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Pilih minit";
    }
    get unspecifiedDate() {
      return "Tarikh";
    }
    get unspecifiedDateRange() {
      return "Julat Tarikh";
    }
    get viewLicensesButtonLabel() {
      return "LIHAT LESEN";
    }
  };
  (generated_material_localizations.MaterialLocalizationMs.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "ms";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationMs.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationMs.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationMs);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationMs);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationMs, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationMs.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationMs, I[2]);
  generated_material_localizations.MaterialLocalizationMy = class MaterialLocalizationMy extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationMy.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName အကြောင်း";
    }
    get alertDialogLabel() {
      return "သတိပေးချက်";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "နောက်သို့";
    }
    get calendarModeButtonLabel() {
      return "ပြက္ခဒိန်သို့ ပြောင်းရန်";
    }
    get cancelButtonLabel() {
      return "မလုပ်တော့";
    }
    get closeButtonLabel() {
      return "ပိတ်ရန်";
    }
    get closeButtonTooltip() {
      return "ပိတ်ရန်";
    }
    get collapsedIconTapHint() {
      return "ချဲ့ရန်";
    }
    get continueButtonLabel() {
      return "ရှေ့ဆက်ရန်";
    }
    get copyButtonLabel() {
      return "မိတ္တူကူးရန်";
    }
    get cutButtonLabel() {
      return "ဖြတ်ယူရန်";
    }
    get dateHelpText() {
      return "dd-mm-yyyy";
    }
    get dateInputLabel() {
      return "ရက်စွဲ ထည့်ရန်";
    }
    get dateOutOfRangeLabel() {
      return "အပိုင်းအခြား ပြင်ပတွင်ဖြစ်နေသည်။";
    }
    get datePickerHelpText() {
      return "ရက်စွဲရွေးပါ";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "ပြီးဆုံးရက်စွဲ $fullDate";
    }
    get dateRangeEndLabel() {
      return "ပြီးဆုံးရက်စွဲ";
    }
    get dateRangePickerHelpText() {
      return "အပိုင်းအခြား ရွေးရန်";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "စတင်သည့် ရက်စွဲ $fullDate";
    }
    get dateRangeStartLabel() {
      return "စတင်သည့် ရက်စွဲ";
    }
    get dateSeparator() {
      return "-";
    }
    get deleteButtonTooltip() {
      return "ဖျက်ရန်";
    }
    get dialModeButtonLabel() {
      return "နံပါတ်ရွေးချယ်ခြင်းမုဒ်သို့ ပြောင်းရန်";
    }
    get dialogLabel() {
      return "ဒိုင်ယာလော့";
    }
    get drawerLabel() {
      return "လမ်းညွှန် မီနူး";
    }
    get expandedIconTapHint() {
      return "လျှော့ပြရန်";
    }
    get firstPageTooltip() {
      return "ပထမ စာမျက်နှာ";
    }
    get hideAccountsLabel() {
      return "အကောင့်များကို ဝှက်ရန်";
    }
    get inputDateModeButtonLabel() {
      return "ထည့်သွင်းမှုသို့ ပြောင်းရန်";
    }
    get inputTimeModeButtonLabel() {
      return "စာသား ထည့်သွင်းမှုမုဒ်သို့ ပြောင်းရန်";
    }
    get invalidDateFormatLabel() {
      return "ဖော်မက် မမှန်ကန်ပါ။";
    }
    get invalidDateRangeLabel() {
      return "အပိုင်းအခြား မမှန်ပါ။";
    }
    get invalidTimeLabel() {
      return "မှန်ကန်သည့်အချိန် ထည့်ပါ";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "နောက်ပြန်ခလုတ်";
    }
    get keyboardKeyCapsLock() {
      return "စားလုံးကြီးလော့ခ်";
    }
    get keyboardKeyChannelDown() {
      return "ချန်နယ်အောက်";
    }
    get keyboardKeyChannelUp() {
      return "ချန်နယ်အပေါ်";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "ထုတ်ရန်";
    }
    get keyboardKeyEnd() {
      return "အဆုံး";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "ပင်မခလုတ်";
    }
    get keyboardKeyInsert() {
      return "ထည့်သွင်းခလုတ်";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "ကွန်မန်း";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "နံပါတ်လော့ခ်";
    }
    get keyboardKeyNumpad0() {
      return "နံပါတ် ၀";
    }
    get keyboardKeyNumpad1() {
      return "နံပါတ် ၁";
    }
    get keyboardKeyNumpad2() {
      return "နံပါတ် ၂";
    }
    get keyboardKeyNumpad3() {
      return "နံပါတ် ၃";
    }
    get keyboardKeyNumpad4() {
      return "နံပါတ် ၄";
    }
    get keyboardKeyNumpad5() {
      return "နံပါတ် ၅";
    }
    get keyboardKeyNumpad6() {
      return "နံပါတ် ၆";
    }
    get keyboardKeyNumpad7() {
      return "နံပါတ် ၇";
    }
    get keyboardKeyNumpad8() {
      return "နံပါတ် ၈";
    }
    get keyboardKeyNumpad9() {
      return "နံပါတ် ၉";
    }
    get keyboardKeyNumpadAdd() {
      return "နံပါတ် +";
    }
    get keyboardKeyNumpadComma() {
      return "နံပါတ် ၊";
    }
    get keyboardKeyNumpadDecimal() {
      return "နံပါတ် ။";
    }
    get keyboardKeyNumpadDivide() {
      return "နံပါတ် /";
    }
    get keyboardKeyNumpadEnter() {
      return "နံပါတ် Enter ခလုတ်";
    }
    get keyboardKeyNumpadEqual() {
      return "နံပါတ် =";
    }
    get keyboardKeyNumpadMultiply() {
      return "နံပါတ် *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "နံပါတ် (";
    }
    get keyboardKeyNumpadParenRight() {
      return "နံပါတ် )";
    }
    get keyboardKeyNumpadSubtract() {
      return "နံပါတ် -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "ပါဝါခလုတ်";
    }
    get keyboardKeyPowerOff() {
      return "စက်ပိတ်ရန်";
    }
    get keyboardKeyPrintScreen() {
      return "ပရင့်စခရင်";
    }
    get keyboardKeyScrollLock() {
      return "လှိမ့်သည့်လော့ခ်";
    }
    get keyboardKeySelect() {
      return "ရွေးရန်";
    }
    get keyboardKeySpace() {
      return "နေရာခြားခလုတ်";
    }
    get lastPageTooltip() {
      return "နောက်ဆုံး စာမျက်နှာ";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "လိုင်စင် 1 ခု";
    }
    get licensesPackageDetailTextOther() {
      return "လိုင်စင် $licenseCount ခု";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "လိုင်စင်များ";
    }
    get menuBarMenuLabel() {
      return "မီနူးဘား မီနူး";
    }
    get modalBarrierDismissLabel() {
      return "ပယ်ရန်";
    }
    get moreButtonTooltip() {
      return "နောက်ထပ်";
    }
    get nextMonthTooltip() {
      return "နောက်လ";
    }
    get nextPageTooltip() {
      return "နောက်စာမျက်နှာ";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "လမ်းညွှန်မီနူးကို ဖွင့်ရန်";
    }
    get pageRowsInfoTitleRaw() {
      return "$rowCount အနက် $firstRow–$lastRow";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$rowCount ခန့်မှ $firstRow–$lastRow";
    }
    get pasteButtonLabel() {
      return "ကူးထည့်ရန်";
    }
    get popupMenuLabel() {
      return "ပေါ့ပ်အပ်မီနူး";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "ယခင်လ";
    }
    get previousPageTooltip() {
      return "ယခင်စာမျက်နှာ";
    }
    get refreshIndicatorSemanticLabel() {
      return "ပြန်လည်စတင်ရန်";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "အက္ခရာ ၁ လုံးကျန်သည်";
    }
    get remainingTextFieldCharacterCountOther() {
      return "အက္ခရာ $remainingCount လုံးကျန်သည်";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "အောက်သို့ရွှေ့ရန်";
    }
    get reorderItemLeft() {
      return "ဘယ်ဘက်သို့ရွှေ့ရန်";
    }
    get reorderItemRight() {
      return "ညာဘက်သို့ရွှေ့ရန်";
    }
    get reorderItemToEnd() {
      return "အဆုံးသို့ ‌ရွှေ့ရန်";
    }
    get reorderItemToStart() {
      return "အစသို့ ရွှေ့ရန်";
    }
    get reorderItemUp() {
      return "အပေါ်သို့ ရွှေ့ရန်";
    }
    get rowsPerPageTitle() {
      return "စာတစ်မျက်နှာပါ လိုင်းအရေအတွက်−";
    }
    get saveButtonLabel() {
      return "သိမ်းရန်";
    }
    get scriptCategory() {
      return typography.ScriptCategory.tall;
    }
    get searchFieldLabel() {
      return "ရှာဖွေရန်";
    }
    get selectAllButtonLabel() {
      return "အားလုံး ရွေးရန်";
    }
    get selectYearSemanticsLabel() {
      return "ခုနှစ် ရွေးရန်";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "၁ ခု ရွေးထားသည်";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount ခု ရွေးထားသည်";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "အကောင့်များကို ပြရန်";
    }
    get showMenuTooltip() {
      return "မီနူး ပြရန်";
    }
    get signedInLabel() {
      return "လက်မှတ်ထိုး ဝင်ထားသည်";
    }
    get tabLabelRaw() {
      return "တဘ် $tabCount အနက် $tabIndex ခု";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "အချိန်ရွေးရန်";
    }
    get timePickerHourLabel() {
      return "နာရီ";
    }
    get timePickerHourModeAnnouncement() {
      return "နာရီကို ရွေးပါ";
    }
    get timePickerInputHelpText() {
      return "အချိန်ထည့်ရန်";
    }
    get timePickerMinuteLabel() {
      return "မိနစ်";
    }
    get timePickerMinuteModeAnnouncement() {
      return "မိနစ်ကို ရွေးပါ";
    }
    get unspecifiedDate() {
      return "ရက်စွဲ";
    }
    get unspecifiedDateRange() {
      return "ရက်အပိုင်းအခြား";
    }
    get viewLicensesButtonLabel() {
      return "လိုင်စင်များကို ကြည့်ရန်";
    }
  };
  (generated_material_localizations.MaterialLocalizationMy.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "my";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationMy.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationMy.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationMy);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationMy);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationMy, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationMy.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationMy, I[2]);
  generated_material_localizations.MaterialLocalizationNb = class MaterialLocalizationNb extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationNb.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Om $applicationName";
    }
    get alertDialogLabel() {
      return "Varsel";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "Tilbake";
    }
    get calendarModeButtonLabel() {
      return "Bytt til kalender";
    }
    get cancelButtonLabel() {
      return "AVBRYT";
    }
    get closeButtonLabel() {
      return "LUKK";
    }
    get closeButtonTooltip() {
      return "Lukk";
    }
    get collapsedIconTapHint() {
      return "Vis";
    }
    get continueButtonLabel() {
      return "FORTSETT";
    }
    get copyButtonLabel() {
      return "Kopiér";
    }
    get cutButtonLabel() {
      return "Klipp ut";
    }
    get dateHelpText() {
      return "dd.mm.åååå";
    }
    get dateInputLabel() {
      return "Skriv inn datoen";
    }
    get dateOutOfRangeLabel() {
      return "Utenfor perioden.";
    }
    get datePickerHelpText() {
      return "VELG DATOEN";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Sluttdato $fullDate";
    }
    get dateRangeEndLabel() {
      return "Sluttdato";
    }
    get dateRangePickerHelpText() {
      return "VELG PERIODEN";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Startdato $fullDate";
    }
    get dateRangeStartLabel() {
      return "Startdato";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Slett";
    }
    get dialModeButtonLabel() {
      return "Bytt til modus for valg fra urskive";
    }
    get dialogLabel() {
      return "Dialogboks";
    }
    get drawerLabel() {
      return "Navigasjonsmeny";
    }
    get expandedIconTapHint() {
      return "Skjul";
    }
    get firstPageTooltip() {
      return "Første side";
    }
    get hideAccountsLabel() {
      return "Skjul kontoer";
    }
    get inputDateModeButtonLabel() {
      return "Bytt til innskriving";
    }
    get inputTimeModeButtonLabel() {
      return "Bytt til tekstinndatamodus";
    }
    get invalidDateFormatLabel() {
      return "Ugyldig format.";
    }
    get invalidDateRangeLabel() {
      return "Ugyldig periode.";
    }
    get invalidTimeLabel() {
      return "Angi et gyldig klokkeslett";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "Alt Gr";
    }
    get keyboardKeyBackspace() {
      return "Tilbaketast";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Forrige kanal";
    }
    get keyboardKeyChannelUp() {
      return "Neste kanal";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Løs ut";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Kommando";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Av/på";
    }
    get keyboardKeyPowerOff() {
      return "Slå av";
    }
    get keyboardKeyPrintScreen() {
      return "PrtScn";
    }
    get keyboardKeyScrollLock() {
      return "ScrLk";
    }
    get keyboardKeySelect() {
      return "Velg";
    }
    get keyboardKeySpace() {
      return "Mellomrom";
    }
    get lastPageTooltip() {
      return "Siste side";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 lisens";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount lisenser";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return null;
    }
    get licensesPageTitle() {
      return "Lisenser";
    }
    get menuBarMenuLabel() {
      return "Meny med menylinje";
    }
    get modalBarrierDismissLabel() {
      return "Avvis";
    }
    get moreButtonTooltip() {
      return "Mer";
    }
    get nextMonthTooltip() {
      return "Neste måned";
    }
    get nextPageTooltip() {
      return "Neste side";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Åpne navigasjonsmenyen";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow av $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow av omtrent $rowCount";
    }
    get pasteButtonLabel() {
      return "Lim inn";
    }
    get popupMenuLabel() {
      return "Forgrunnsmeny";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "Forrige måned";
    }
    get previousPageTooltip() {
      return "Forrige side";
    }
    get refreshIndicatorSemanticLabel() {
      return "Laster inn på nytt";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 tegn gjenstår";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount tegn gjenstår";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "Flytt ned";
    }
    get reorderItemLeft() {
      return "Flytt til venstre";
    }
    get reorderItemRight() {
      return "Flytt til høyre";
    }
    get reorderItemToEnd() {
      return "Flytt til slutten";
    }
    get reorderItemToStart() {
      return "Flytt til starten";
    }
    get reorderItemUp() {
      return "Flytt opp";
    }
    get rowsPerPageTitle() {
      return "Rader per side:";
    }
    get saveButtonLabel() {
      return "LAGRE";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Søk";
    }
    get selectAllButtonLabel() {
      return "Velg alle";
    }
    get selectYearSemanticsLabel() {
      return "Velg året";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 element er valgt";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount elementer er valgt";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Vis kontoer";
    }
    get showMenuTooltip() {
      return "Vis meny";
    }
    get signedInLabel() {
      return "Pålogget";
    }
    get tabLabelRaw() {
      return "Fane $tabIndex av $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "VELG KLOKKESLETT";
    }
    get timePickerHourLabel() {
      return "Time";
    }
    get timePickerHourModeAnnouncement() {
      return "Angi timer";
    }
    get timePickerInputHelpText() {
      return "ANGI ET KLOKKESLETT";
    }
    get timePickerMinuteLabel() {
      return "Minutt";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Angi minutter";
    }
    get unspecifiedDate() {
      return "Dato";
    }
    get unspecifiedDateRange() {
      return "Datoperiode";
    }
    get viewLicensesButtonLabel() {
      return "SE LISENSER";
    }
  };
  (generated_material_localizations.MaterialLocalizationNb.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "nb";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationNb.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationNb.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationNb);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationNb);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationNb, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationNb.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationNb, I[2]);
  generated_material_localizations.MaterialLocalizationNe = class MaterialLocalizationNe extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationNe.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName बारे";
    }
    get alertDialogLabel() {
      return "अलर्ट";
    }
    get anteMeridiemAbbreviation() {
      return "पूर्वाह्न";
    }
    get backButtonTooltip() {
      return "पछाडि जानुहोस्";
    }
    get calendarModeButtonLabel() {
      return "पात्रो मोड प्रयोग गर्नुहोस्";
    }
    get cancelButtonLabel() {
      return "रद्द गर्नुहोस्";
    }
    get closeButtonLabel() {
      return "बन्द गर्नुहोस्";
    }
    get closeButtonTooltip() {
      return "बन्द गर्नुहोस्";
    }
    get collapsedIconTapHint() {
      return "विस्तार गर्नुहोस्";
    }
    get continueButtonLabel() {
      return "जारी राख्नुहोस्";
    }
    get copyButtonLabel() {
      return "प्रतिलिपि गर्नुहोस्";
    }
    get cutButtonLabel() {
      return "काट्नुहोस्";
    }
    get dateHelpText() {
      return "yyyy/mm/dd";
    }
    get dateInputLabel() {
      return "मिति प्रविष्टि गर्नुहोस्";
    }
    get dateOutOfRangeLabel() {
      return "दायराभन्दा बाहिर";
    }
    get datePickerHelpText() {
      return "मिति चयन गर्नुहोस्";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "समाप्त हुने मिति $fullDate";
    }
    get dateRangeEndLabel() {
      return "समाप्त हुने मिति";
    }
    get dateRangePickerHelpText() {
      return "दायरा चयन गर्नुहोस्";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "सुरु हुने मिति $fullDate";
    }
    get dateRangeStartLabel() {
      return "सुरु हुने मिति";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "मेट्नुहोस्";
    }
    get dialModeButtonLabel() {
      return "डायल चयनकर्ता मोड प्रयोग गर्नुहोस्";
    }
    get dialogLabel() {
      return "संवाद";
    }
    get drawerLabel() {
      return "नेभिगेसन मेनु";
    }
    get expandedIconTapHint() {
      return "संक्षिप्त गर्नुहोस्";
    }
    get firstPageTooltip() {
      return "प्रथम पेज";
    }
    get hideAccountsLabel() {
      return "खाताहरू लुकाउनुहोस्";
    }
    get inputDateModeButtonLabel() {
      return "इनपुट मोड प्रयोग गर्नुहोस्";
    }
    get inputTimeModeButtonLabel() {
      return "पाठ इनपुट मोड प्रयोग गर्नुहोस्";
    }
    get invalidDateFormatLabel() {
      return "अवैध ढाँचा।";
    }
    get invalidDateRangeLabel() {
      return "अवैध दायरा।";
    }
    get invalidTimeLabel() {
      return "वैध समय प्रविष्टि गर्नुहोस्";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "Power Off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "अन्तिम पेज";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "एउटा इजाजतपत्र";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount वटा इजाजतपत्र";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "इजाजतपत्रहरू";
    }
    get menuBarMenuLabel() {
      return "\"मेनु बार\" मेनु";
    }
    get modalBarrierDismissLabel() {
      return "खारेज गर्नुहोस्";
    }
    get moreButtonTooltip() {
      return "थप";
    }
    get nextMonthTooltip() {
      return "अर्को महिना";
    }
    get nextPageTooltip() {
      return "अर्को पृष्ठ";
    }
    get okButtonLabel() {
      return "ठिक छ";
    }
    get openAppDrawerTooltip() {
      return "नेभिगेसन मेनु खोल्नुहोस्";
    }
    get pageRowsInfoTitleRaw() {
      return "$rowCount मध्ये $firstRow–$lastRow";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "लगभग $rowCount को $firstRow–$lastRow";
    }
    get pasteButtonLabel() {
      return "टाँस्नुहोस्";
    }
    get popupMenuLabel() {
      return "पपअप मेनु";
    }
    get postMeridiemAbbreviation() {
      return "अपराह्न";
    }
    get previousMonthTooltip() {
      return "अघिल्लो महिना";
    }
    get previousPageTooltip() {
      return "अघिल्लो पृष्ठ";
    }
    get refreshIndicatorSemanticLabel() {
      return "पुनः ताजा गर्नुहोस्";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "१ वर्ण बाँकी";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount वर्णहरू बाँकी";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "तल सार्नुहोस्";
    }
    get reorderItemLeft() {
      return "बायाँ सार्नुहोस्";
    }
    get reorderItemRight() {
      return "दायाँ सार्नुहोस्";
    }
    get reorderItemToEnd() {
      return "अन्त्यमा जानुहोस्";
    }
    get reorderItemToStart() {
      return "सुरुमा सार्नुहोस्";
    }
    get reorderItemUp() {
      return "माथि सार्नुहोस्";
    }
    get rowsPerPageTitle() {
      return "प्रत्येक पृष्ठमा रहेका पङ्क्तिहरूको सङ्ख्या:";
    }
    get saveButtonLabel() {
      return "सेभ गर्नुहोस्";
    }
    get scriptCategory() {
      return typography.ScriptCategory.tall;
    }
    get searchFieldLabel() {
      return "खोज्नुहोस्";
    }
    get selectAllButtonLabel() {
      return "सबै बटनहरू चयन गर्नुहोस्";
    }
    get selectYearSemanticsLabel() {
      return "वर्ष छान्नुहोस्";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "१ वस्तु चयन गरियो";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount वस्तुहरू चयन गरिए";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "खाताहरू देखाउनुहोस्";
    }
    get showMenuTooltip() {
      return "मेनु देखाउनुहोस्";
    }
    get signedInLabel() {
      return "साइन इन गरियो";
    }
    get tabLabelRaw() {
      return "$tabCount मध्ये $tabIndex ट्याब";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "समय चयन गर्नुहोस्";
    }
    get timePickerHourLabel() {
      return "घन्टा";
    }
    get timePickerHourModeAnnouncement() {
      return "घन्टा चयन गर्नुहोस्";
    }
    get timePickerInputHelpText() {
      return "समय प्रविष्टि गर्नुहोस्";
    }
    get timePickerMinuteLabel() {
      return "मिनेट";
    }
    get timePickerMinuteModeAnnouncement() {
      return "मिनेट चयन गर्नुहोस्";
    }
    get unspecifiedDate() {
      return "मिति";
    }
    get unspecifiedDateRange() {
      return "मितिको दायरा";
    }
    get viewLicensesButtonLabel() {
      return "इजाजतपत्रहरू हेर्नुहोस्";
    }
  };
  (generated_material_localizations.MaterialLocalizationNe.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "ne";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationNe.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationNe.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationNe);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationNe);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationNe, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationNe.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationNe, I[2]);
  generated_material_localizations.MaterialLocalizationNl = class MaterialLocalizationNl extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationNl.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Over $applicationName";
    }
    get alertDialogLabel() {
      return "Melding";
    }
    get anteMeridiemAbbreviation() {
      return "am";
    }
    get backButtonTooltip() {
      return "Terug";
    }
    get calendarModeButtonLabel() {
      return "Overschakelen naar kalender";
    }
    get cancelButtonLabel() {
      return "ANNULEREN";
    }
    get closeButtonLabel() {
      return "SLUITEN";
    }
    get closeButtonTooltip() {
      return "Sluiten";
    }
    get collapsedIconTapHint() {
      return "Uitvouwen";
    }
    get continueButtonLabel() {
      return "DOORGAAN";
    }
    get copyButtonLabel() {
      return "Kopiëren";
    }
    get cutButtonLabel() {
      return "Knippen";
    }
    get dateHelpText() {
      return "dd-mm-jjjj";
    }
    get dateInputLabel() {
      return "Datum opgeven";
    }
    get dateOutOfRangeLabel() {
      return "Buiten bereik.";
    }
    get datePickerHelpText() {
      return "DATUM SELECTEREN";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Einddatum $fullDate";
    }
    get dateRangeEndLabel() {
      return "Einddatum";
    }
    get dateRangePickerHelpText() {
      return "PERIODE SELECTEREN";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Startdatum $fullDate";
    }
    get dateRangeStartLabel() {
      return "Startdatum";
    }
    get dateSeparator() {
      return "-";
    }
    get deleteButtonTooltip() {
      return "Verwijderen";
    }
    get dialModeButtonLabel() {
      return "Overschakelen naar klok";
    }
    get dialogLabel() {
      return "Dialoogvenster";
    }
    get drawerLabel() {
      return "Navigatiemenu";
    }
    get expandedIconTapHint() {
      return "Samenvouwen";
    }
    get firstPageTooltip() {
      return "Eerste pagina";
    }
    get hideAccountsLabel() {
      return "Accounts verbergen";
    }
    get inputDateModeButtonLabel() {
      return "Overschakelen naar invoer";
    }
    get inputTimeModeButtonLabel() {
      return "Overschakelen naar tekstinvoer";
    }
    get invalidDateFormatLabel() {
      return "Ongeldige indeling.";
    }
    get invalidDateRangeLabel() {
      return "Ongeldige periode.";
    }
    get invalidTimeLabel() {
      return "Geef een geldige tijd op";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Kanaal omlaag";
    }
    get keyboardKeyChannelUp() {
      return "Kanaal omhoog";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Uitwerpen";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Aan/uit";
    }
    get keyboardKeyPowerOff() {
      return "Uit";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Selecteren";
    }
    get keyboardKeySpace() {
      return "Spatie";
    }
    get lastPageTooltip() {
      return "Laatste pagina";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 licentie";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licenties";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Licenties";
    }
    get menuBarMenuLabel() {
      return "Menu van menubalk";
    }
    get modalBarrierDismissLabel() {
      return "Sluiten";
    }
    get moreButtonTooltip() {
      return "Meer";
    }
    get nextMonthTooltip() {
      return "Volgende maand";
    }
    get nextPageTooltip() {
      return "Volgende pagina";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Navigatiemenu openen";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow-$lastRow van $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow-$lastRow van ongeveer $rowCount";
    }
    get pasteButtonLabel() {
      return "Plakken";
    }
    get popupMenuLabel() {
      return "Pop-upmenu";
    }
    get postMeridiemAbbreviation() {
      return "pm";
    }
    get previousMonthTooltip() {
      return "Vorige maand";
    }
    get previousPageTooltip() {
      return "Vorige pagina";
    }
    get refreshIndicatorSemanticLabel() {
      return "Vernieuwen";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 teken resterend";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount tekens resterend";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Omlaag verplaatsen";
    }
    get reorderItemLeft() {
      return "Naar links verplaatsen";
    }
    get reorderItemRight() {
      return "Naar rechts verplaatsen";
    }
    get reorderItemToEnd() {
      return "Naar het einde verplaatsen";
    }
    get reorderItemToStart() {
      return "Naar het begin verplaatsen";
    }
    get reorderItemUp() {
      return "Omhoog verplaatsen";
    }
    get rowsPerPageTitle() {
      return "Rijen per pagina:";
    }
    get saveButtonLabel() {
      return "OPSLAAN";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Zoeken";
    }
    get selectAllButtonLabel() {
      return "Alles selecteren";
    }
    get selectYearSemanticsLabel() {
      return "Jaar selecteren";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 item geselecteerd";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount items geselecteerd";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Accounts tonen";
    }
    get showMenuTooltip() {
      return "Menu tonen";
    }
    get signedInLabel() {
      return "Ingelogd";
    }
    get tabLabelRaw() {
      return "Tabblad $tabIndex van $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "TIJD SELECTEREN";
    }
    get timePickerHourLabel() {
      return "Uur";
    }
    get timePickerHourModeAnnouncement() {
      return "Uren selecteren";
    }
    get timePickerInputHelpText() {
      return "TIJD OPGEVEN";
    }
    get timePickerMinuteLabel() {
      return "Minuut";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Minuten selecteren";
    }
    get unspecifiedDate() {
      return "Datum";
    }
    get unspecifiedDateRange() {
      return "Periode";
    }
    get viewLicensesButtonLabel() {
      return "LICENTIES BEKIJKEN";
    }
  };
  (generated_material_localizations.MaterialLocalizationNl.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "nl";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationNl.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationNl.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationNl);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationNl);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationNl, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationNl.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationNl, I[2]);
  generated_material_localizations.MaterialLocalizationNo = class MaterialLocalizationNo extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationNo.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Om $applicationName";
    }
    get alertDialogLabel() {
      return "Varsel";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "Tilbake";
    }
    get calendarModeButtonLabel() {
      return "Bytt til kalender";
    }
    get cancelButtonLabel() {
      return "AVBRYT";
    }
    get closeButtonLabel() {
      return "LUKK";
    }
    get closeButtonTooltip() {
      return "Lukk";
    }
    get collapsedIconTapHint() {
      return "Vis";
    }
    get continueButtonLabel() {
      return "FORTSETT";
    }
    get copyButtonLabel() {
      return "Kopiér";
    }
    get cutButtonLabel() {
      return "Klipp ut";
    }
    get dateHelpText() {
      return "dd.mm.åååå";
    }
    get dateInputLabel() {
      return "Skriv inn datoen";
    }
    get dateOutOfRangeLabel() {
      return "Utenfor perioden.";
    }
    get datePickerHelpText() {
      return "VELG DATOEN";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Sluttdato $fullDate";
    }
    get dateRangeEndLabel() {
      return "Sluttdato";
    }
    get dateRangePickerHelpText() {
      return "VELG PERIODEN";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Startdato $fullDate";
    }
    get dateRangeStartLabel() {
      return "Startdato";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Slett";
    }
    get dialModeButtonLabel() {
      return "Bytt til modus for valg fra urskive";
    }
    get dialogLabel() {
      return "Dialogboks";
    }
    get drawerLabel() {
      return "Navigasjonsmeny";
    }
    get expandedIconTapHint() {
      return "Skjul";
    }
    get firstPageTooltip() {
      return "Første side";
    }
    get hideAccountsLabel() {
      return "Skjul kontoer";
    }
    get inputDateModeButtonLabel() {
      return "Bytt til innskriving";
    }
    get inputTimeModeButtonLabel() {
      return "Bytt til tekstinndatamodus";
    }
    get invalidDateFormatLabel() {
      return "Ugyldig format.";
    }
    get invalidDateRangeLabel() {
      return "Ugyldig periode.";
    }
    get invalidTimeLabel() {
      return "Angi et gyldig klokkeslett";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "Alt Gr";
    }
    get keyboardKeyBackspace() {
      return "Tilbaketast";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Forrige kanal";
    }
    get keyboardKeyChannelUp() {
      return "Neste kanal";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Løs ut";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Kommando";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Av/på";
    }
    get keyboardKeyPowerOff() {
      return "Slå av";
    }
    get keyboardKeyPrintScreen() {
      return "PrtScn";
    }
    get keyboardKeyScrollLock() {
      return "ScrLk";
    }
    get keyboardKeySelect() {
      return "Velg";
    }
    get keyboardKeySpace() {
      return "Mellomrom";
    }
    get lastPageTooltip() {
      return "Siste side";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 lisens";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount lisenser";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return null;
    }
    get licensesPageTitle() {
      return "Lisenser";
    }
    get menuBarMenuLabel() {
      return "Meny med menylinje";
    }
    get modalBarrierDismissLabel() {
      return "Avvis";
    }
    get moreButtonTooltip() {
      return "Mer";
    }
    get nextMonthTooltip() {
      return "Neste måned";
    }
    get nextPageTooltip() {
      return "Neste side";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Åpne navigasjonsmenyen";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow av $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow av omtrent $rowCount";
    }
    get pasteButtonLabel() {
      return "Lim inn";
    }
    get popupMenuLabel() {
      return "Forgrunnsmeny";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "Forrige måned";
    }
    get previousPageTooltip() {
      return "Forrige side";
    }
    get refreshIndicatorSemanticLabel() {
      return "Laster inn på nytt";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 tegn gjenstår";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount tegn gjenstår";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "Flytt ned";
    }
    get reorderItemLeft() {
      return "Flytt til venstre";
    }
    get reorderItemRight() {
      return "Flytt til høyre";
    }
    get reorderItemToEnd() {
      return "Flytt til slutten";
    }
    get reorderItemToStart() {
      return "Flytt til starten";
    }
    get reorderItemUp() {
      return "Flytt opp";
    }
    get rowsPerPageTitle() {
      return "Rader per side:";
    }
    get saveButtonLabel() {
      return "LAGRE";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Søk";
    }
    get selectAllButtonLabel() {
      return "Velg alle";
    }
    get selectYearSemanticsLabel() {
      return "Velg året";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 element er valgt";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount elementer er valgt";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Vis kontoer";
    }
    get showMenuTooltip() {
      return "Vis meny";
    }
    get signedInLabel() {
      return "Pålogget";
    }
    get tabLabelRaw() {
      return "Fane $tabIndex av $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "VELG KLOKKESLETT";
    }
    get timePickerHourLabel() {
      return "Time";
    }
    get timePickerHourModeAnnouncement() {
      return "Angi timer";
    }
    get timePickerInputHelpText() {
      return "ANGI ET KLOKKESLETT";
    }
    get timePickerMinuteLabel() {
      return "Minutt";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Angi minutter";
    }
    get unspecifiedDate() {
      return "Dato";
    }
    get unspecifiedDateRange() {
      return "Datoperiode";
    }
    get viewLicensesButtonLabel() {
      return "SE LISENSER";
    }
  };
  (generated_material_localizations.MaterialLocalizationNo.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "no";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationNo.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationNo.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationNo);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationNo);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationNo, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationNo.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationNo, I[2]);
  generated_material_localizations.MaterialLocalizationOr = class MaterialLocalizationOr extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationOr.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName ବିଷୟରେ";
    }
    get alertDialogLabel() {
      return "ଆଲର୍ଟ";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "ପଛକୁ ଫେରନ୍ତୁ";
    }
    get calendarModeButtonLabel() {
      return "କ୍ୟାଲେଣ୍ଡରକୁ ସ୍ୱିଚ୍ କରନ୍ତୁ";
    }
    get cancelButtonLabel() {
      return "ବାତିଲ୍ କରନ୍ତୁ";
    }
    get closeButtonLabel() {
      return "ବନ୍ଦ କରନ୍ତୁ";
    }
    get closeButtonTooltip() {
      return "ବନ୍ଦ କରନ୍ତୁ";
    }
    get collapsedIconTapHint() {
      return "ପ୍ରସାରିତ କରନ୍ତୁ";
    }
    get continueButtonLabel() {
      return "ଜାରି ରଖନ୍ତୁ";
    }
    get copyButtonLabel() {
      return "କପି କରନ୍ତୁ";
    }
    get cutButtonLabel() {
      return "କଟ୍ କରନ୍ତୁ";
    }
    get dateHelpText() {
      return "mm/dd/yyyy";
    }
    get dateInputLabel() {
      return "ତାରିଖ ଲେଖନ୍ତୁ";
    }
    get dateOutOfRangeLabel() {
      return "ସୀମା ବାହାରେ।";
    }
    get datePickerHelpText() {
      return "ତାରିଖ ଚୟନ କରନ୍ତୁ";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "ଶେଷ ତାରିଖ $fullDate";
    }
    get dateRangeEndLabel() {
      return "ଶେଷ ତାରିଖ";
    }
    get dateRangePickerHelpText() {
      return "ସୀମା ଚୟନ କରନ୍ତୁ";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "ଆରମ୍ଭ ତାରିଖ $fullDate";
    }
    get dateRangeStartLabel() {
      return "ଆରମ୍ଭ ତାରିଖ";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "ଡିଲିଟ୍ କରନ୍ତୁ";
    }
    get dialModeButtonLabel() {
      return "ଡାଏଲ୍ ପିକର୍ ମୋଡକୁ ସ୍ୱିଚ୍ କରନ୍ତୁ";
    }
    get dialogLabel() {
      return "ଡାୟଲଗ୍";
    }
    get drawerLabel() {
      return "ନେଭିଗେସନ୍ ମେନୁ";
    }
    get expandedIconTapHint() {
      return "ସଙ୍କୁଚିତ କରନ୍ତୁ";
    }
    get firstPageTooltip() {
      return "ପ୍ରଥମ ପୃଷ୍ଠା";
    }
    get hideAccountsLabel() {
      return "ଆକାଉଣ୍ଟଗୁଡ଼ିକୁ ଲୁଚାନ୍ତୁ";
    }
    get inputDateModeButtonLabel() {
      return "ଇନପୁଟକୁ ସ୍ୱିଚ୍ କରନ୍ତୁ";
    }
    get inputTimeModeButtonLabel() {
      return "ଟେକ୍ସଟ୍ ଇନପୁଟ୍ ମୋଡକୁ ସ୍ୱିଚ୍ କରନ୍ତୁ";
    }
    get invalidDateFormatLabel() {
      return "ଅବୈଧ ଫର୍ମାଟ୍।";
    }
    get invalidDateRangeLabel() {
      return "ଅବୈଧ ସୀମା।";
    }
    get invalidTimeLabel() {
      return "ଏକ ବୈଧ ସମୟ ଲେଖନ୍ତୁ";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "Power Off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "ଶେଷ ପୃଷ୍ଠା";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1ଟି ଲାଇସେନ୍ସ";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCountଟି ଲାଇସେନ୍ସ";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "ଲାଇସେନ୍ସଗୁଡ଼କ";
    }
    get menuBarMenuLabel() {
      return "ମେନୁ ବାର ମେନୁ";
    }
    get modalBarrierDismissLabel() {
      return "ଖାରଜ କରନ୍ତୁ";
    }
    get moreButtonTooltip() {
      return "ଅଧିକ";
    }
    get nextMonthTooltip() {
      return "ପରବର୍ତ୍ତୀ ମାସ";
    }
    get nextPageTooltip() {
      return "ପରବର୍ତ୍ତୀ ପେଜ୍";
    }
    get okButtonLabel() {
      return "ଠିକ୍ ଅଛି";
    }
    get openAppDrawerTooltip() {
      return "ନାଭିଗେସନ୍ ମେନୁ ଖୋଲନ୍ତୁ";
    }
    get pageRowsInfoTitleRaw() {
      return "$rowCountର $firstRow–$lastRow";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "ପାଖାପାଖି $rowCountର $firstRow–$lastRow";
    }
    get pasteButtonLabel() {
      return "ପେଷ୍ଟ କରନ୍ତୁ";
    }
    get popupMenuLabel() {
      return "ପପ୍-ଅପ୍ ମେନୁ";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "ପୂର୍ବ ମାସ";
    }
    get previousPageTooltip() {
      return "ପୂର୍ବବର୍ତ୍ତୀ ପେଜ୍";
    }
    get refreshIndicatorSemanticLabel() {
      return "ରିଫ୍ରେସ୍ କରନ୍ତୁ";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1ଟି ଅକ୍ଷର ବାକି ଅଛି";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCountଟି ଅକ୍ଷର ବାକି ଅଛି";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "ତଳକୁ ଯାଆନ୍ତୁ";
    }
    get reorderItemLeft() {
      return "ବାମକୁ ଯାଆନ୍ତୁ";
    }
    get reorderItemRight() {
      return "ଡାହାଣକୁ ଯାଆନ୍ତୁ";
    }
    get reorderItemToEnd() {
      return "ଶେଷକୁ ଯାଆନ୍ତୁ";
    }
    get reorderItemToStart() {
      return "ଆରମ୍ଭକୁ ଯାଆନ୍ତୁ";
    }
    get reorderItemUp() {
      return "ଉପରକୁ ନିଅନ୍ତୁ";
    }
    get rowsPerPageTitle() {
      return "ପୃଷ୍ଠା ପିଛା ଧାଡ଼ି:";
    }
    get saveButtonLabel() {
      return "ସେଭ୍ କରନ୍ତୁ";
    }
    get scriptCategory() {
      return typography.ScriptCategory.tall;
    }
    get searchFieldLabel() {
      return "ସନ୍ଧାନ କରନ୍ତୁ";
    }
    get selectAllButtonLabel() {
      return "ସବୁ ଚୟନ କରନ୍ତୁ";
    }
    get selectYearSemanticsLabel() {
      return "ବର୍ଷ ଚୟନ କରନ୍ତୁ";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1ଟି ଆଇଟମ୍ ଚୟନ କରାଯାଇଛି";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCountଟି ଆଇଟମ୍ ଚୟନ କରାଯାଇଛି";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "ଆକାଉଣ୍ଟ ଦେଖାନ୍ତୁ";
    }
    get showMenuTooltip() {
      return "ମେନୁ ଦେଖାନ୍ତୁ";
    }
    get signedInLabel() {
      return "ସାଇନ୍ ଇନ୍ କରାଯାଇଛି";
    }
    get tabLabelRaw() {
      return "$tabCountର $tabIndex ଟାବ୍";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "ସମୟ ଚୟନ କରନ୍ତୁ";
    }
    get timePickerHourLabel() {
      return "ଘଣ୍ଟା";
    }
    get timePickerHourModeAnnouncement() {
      return "ଘଣ୍ଟା ଚୟନ କରନ୍ତୁ";
    }
    get timePickerInputHelpText() {
      return "ସମୟ ଲେଖନ୍ତୁ";
    }
    get timePickerMinuteLabel() {
      return "ମିନିଟ୍";
    }
    get timePickerMinuteModeAnnouncement() {
      return "ମିନିଟ୍ ଚୟନ କରନ୍ତୁ";
    }
    get unspecifiedDate() {
      return "ତାରିଖ";
    }
    get unspecifiedDateRange() {
      return "ତାରିଖ ସୀମା";
    }
    get viewLicensesButtonLabel() {
      return "ଲାଇସେନ୍ସ ଦେଖାନ୍ତୁ";
    }
  };
  (generated_material_localizations.MaterialLocalizationOr.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "or";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationOr.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationOr.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationOr);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationOr);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationOr, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationOr.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationOr, I[2]);
  generated_material_localizations.MaterialLocalizationPa = class MaterialLocalizationPa extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationPa.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName ਬਾਰੇ";
    }
    get alertDialogLabel() {
      return "ਸੁਚੇਤਨਾ";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "ਪਿੱਛੇ";
    }
    get calendarModeButtonLabel() {
      return "ਕੈਲੰਡਰ 'ਤੇ ਜਾਓ";
    }
    get cancelButtonLabel() {
      return "ਰੱਦ ਕਰੋ";
    }
    get closeButtonLabel() {
      return "ਬੰਦ ਕਰੋ";
    }
    get closeButtonTooltip() {
      return "ਬੰਦ ਕਰੋ";
    }
    get collapsedIconTapHint() {
      return "ਵਿਸਤਾਰ ਕਰੋ";
    }
    get continueButtonLabel() {
      return "ਜਾਰੀ ਰੱਖੋ";
    }
    get copyButtonLabel() {
      return "ਕਾਪੀ ਕਰੋ";
    }
    get cutButtonLabel() {
      return "ਕੱਟ ਕਰੋ";
    }
    get dateHelpText() {
      return "mm/dd/yyyy";
    }
    get dateInputLabel() {
      return "ਤਾਰੀਖ ਦਾਖਲ ਕਰੋ";
    }
    get dateOutOfRangeLabel() {
      return "ਰੇਂਜ-ਤੋਂ-ਬਾਹਰ।";
    }
    get datePickerHelpText() {
      return "ਤਾਰੀਖ ਚੁਣੋ";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "ਸਮਾਪਤੀ ਦੀ ਤਾਰੀਖ $fullDate";
    }
    get dateRangeEndLabel() {
      return "ਸਮਾਪਤੀ ਦੀ ਤਾਰੀਖ";
    }
    get dateRangePickerHelpText() {
      return "ਰੇਂਜ ਚੁਣੋ";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "ਸ਼ੁਰੂਆਤੀ ਤਾਰੀਖ $fullDate";
    }
    get dateRangeStartLabel() {
      return "ਸ਼ੁਰੂਆਤੀ ਤਾਰੀਖ";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "ਮਿਟਾਓ";
    }
    get dialModeButtonLabel() {
      return "ਡਾਇਲ ਚੋਣਕਾਰ ਮੋਡ 'ਤੇ ਜਾਓ";
    }
    get dialogLabel() {
      return "ਵਿੰਡੋ";
    }
    get drawerLabel() {
      return "ਨੈਵੀਗੇਸ਼ਨ ਮੀਨੂ";
    }
    get expandedIconTapHint() {
      return "ਸਮੇਟੋ";
    }
    get firstPageTooltip() {
      return "ਪਹਿਲਾ ਪੰਨਾ";
    }
    get hideAccountsLabel() {
      return "ਖਾਤੇ ਲੁਕਾਓ";
    }
    get inputDateModeButtonLabel() {
      return "ਇਨਪੁੱਟ 'ਤੇ ਜਾਓ";
    }
    get inputTimeModeButtonLabel() {
      return "ਲਿਖਤ ਇਨਪੁੱਟ ਮੋਡ 'ਤੇ ਜਾਓ";
    }
    get invalidDateFormatLabel() {
      return "ਅਵੈਧ ਫਾਰਮੈਟ।";
    }
    get invalidDateRangeLabel() {
      return "ਅਵੈਧ ਰੇਂਜ।";
    }
    get invalidTimeLabel() {
      return "ਵੈਧ ਸਮਾਂ ਦਾਖਲ ਕਰੋ";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "Power Off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "ਆਖਰੀ ਪੰਨਾ";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 ਲਾਇਸੰਸ";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount ਲਾਇਸੰਸ";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "ਲਾਇਸੰਸ";
    }
    get menuBarMenuLabel() {
      return "ਮੀਨੂ ਬਾਰ ਮੀਨੂ";
    }
    get modalBarrierDismissLabel() {
      return "ਖਾਰਜ ਕਰੋ";
    }
    get moreButtonTooltip() {
      return "ਹੋਰ";
    }
    get nextMonthTooltip() {
      return "ਅਗਲਾ ਮਹੀਨਾ";
    }
    get nextPageTooltip() {
      return "ਅਗਲਾ ਪੰਨਾ";
    }
    get okButtonLabel() {
      return "ਠੀਕ ਹੈ";
    }
    get openAppDrawerTooltip() {
      return "ਨੈਵੀਗੇਸ਼ਨ ਮੀਨੂ ਖੋਲ੍ਹੋ";
    }
    get pageRowsInfoTitleRaw() {
      return "$rowCount ਵਿੱਚੋਂ $firstRow–$lastRow";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "ਲਗਭਗ $rowCount ਵਿੱਚੋਂ $firstRow–$lastRow";
    }
    get pasteButtonLabel() {
      return "ਪੇਸਟ ਕਰੋ";
    }
    get popupMenuLabel() {
      return "ਪੌਪਅੱਪ ਮੀਨੂ";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "ਪਿਛਲਾ ਮਹੀਨਾ";
    }
    get previousPageTooltip() {
      return "ਪਿਛਲਾ ਪੰਨਾ";
    }
    get refreshIndicatorSemanticLabel() {
      return "ਰਿਫ੍ਰੈਸ਼ ਕਰੋ";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 ਅੱਖਰ-ਚਿੰਨ੍ਹ ਬਾਕੀ";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount ਅੱਖਰ-ਚਿੰਨ੍ਹ ਬਾਕੀ";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "ਹੇਠਾਂ ਲਿਜਾਓ";
    }
    get reorderItemLeft() {
      return "ਖੱਬੇ ਲਿਜਾਓ";
    }
    get reorderItemRight() {
      return "ਸੱਜੇ ਲਿਜਾਓ";
    }
    get reorderItemToEnd() {
      return "ਅੰਤ ਵਿੱਚ ਲਿਜਾਓ";
    }
    get reorderItemToStart() {
      return "ਸ਼ੁਰੂ ਵਿੱਚ ਲਿਜਾਓ";
    }
    get reorderItemUp() {
      return "ਉੱਪਰ ਲਿਜਾਓ";
    }
    get rowsPerPageTitle() {
      return "ਹਰ ਪੰਨੇ 'ਤੇ ਕਤਾਰਾਂ:";
    }
    get saveButtonLabel() {
      return "ਰੱਖਿਅਤ ਕਰੋ";
    }
    get scriptCategory() {
      return typography.ScriptCategory.tall;
    }
    get searchFieldLabel() {
      return "ਖੋਜੋ";
    }
    get selectAllButtonLabel() {
      return "ਸਭ ਚੁਣੋ";
    }
    get selectYearSemanticsLabel() {
      return "ਸਾਲ ਚੁਣੋ";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 ਆਈਟਮ ਚੁਣੀ ਗਈ";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount ਆਈਟਮਾਂ ਚੁਣੀਆਂ ਗਈਆਂ";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "ਖਾਤੇ ਦਿਖਾਓ";
    }
    get showMenuTooltip() {
      return "ਮੀਨੂ ਦਿਖਾਓ";
    }
    get signedInLabel() {
      return "ਸਾਈਨ-ਇਨ ਕੀਤਾ ਗਿਆ";
    }
    get tabLabelRaw() {
      return "$tabCount ਵਿੱਚੋਂ $tabIndex ਟੈਬ";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "ਸਮਾਂ ਚੁਣੋ";
    }
    get timePickerHourLabel() {
      return "ਘੰਟਾ";
    }
    get timePickerHourModeAnnouncement() {
      return "ਘੰਟੇ ਚੁਣੋ";
    }
    get timePickerInputHelpText() {
      return "ਸਮਾਂ ਦਾਖਲ ਕਰੋ";
    }
    get timePickerMinuteLabel() {
      return "ਮਿੰਟ";
    }
    get timePickerMinuteModeAnnouncement() {
      return "ਮਿੰਟ ਚੁਣੋ";
    }
    get unspecifiedDate() {
      return "ਤਾਰੀਖ";
    }
    get unspecifiedDateRange() {
      return "ਤਾਰੀਖ ਦੀ ਰੇਂਜ";
    }
    get viewLicensesButtonLabel() {
      return "ਲਾਇਸੰਸ ਦੇਖੋ";
    }
  };
  (generated_material_localizations.MaterialLocalizationPa.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "pa";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationPa.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationPa.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationPa);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationPa);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationPa, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationPa.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationPa, I[2]);
  generated_material_localizations.MaterialLocalizationPl = class MaterialLocalizationPl extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationPl.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName – informacje";
    }
    get alertDialogLabel() {
      return "Alert";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "Wstecz";
    }
    get calendarModeButtonLabel() {
      return "Przełącz na kalendarz";
    }
    get cancelButtonLabel() {
      return "ANULUJ";
    }
    get closeButtonLabel() {
      return "ZAMKNIJ";
    }
    get closeButtonTooltip() {
      return "Zamknij";
    }
    get collapsedIconTapHint() {
      return "Rozwiń";
    }
    get continueButtonLabel() {
      return "DALEJ";
    }
    get copyButtonLabel() {
      return "Kopiuj";
    }
    get cutButtonLabel() {
      return "Wytnij";
    }
    get dateHelpText() {
      return "dd.mm.rrrr";
    }
    get dateInputLabel() {
      return "Wpisz datę";
    }
    get dateOutOfRangeLabel() {
      return "Poza zakresem.";
    }
    get datePickerHelpText() {
      return "WYBIERZ DATĘ";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Data zakończenia: $fullDate";
    }
    get dateRangeEndLabel() {
      return "Data zakończenia";
    }
    get dateRangePickerHelpText() {
      return "WYBIERZ ZAKRES";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Data rozpoczęcia: $fullDate";
    }
    get dateRangeStartLabel() {
      return "Data rozpoczęcia";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Usuń";
    }
    get dialModeButtonLabel() {
      return "Włącz tryb selektora";
    }
    get dialogLabel() {
      return "Okno dialogowe";
    }
    get drawerLabel() {
      return "Menu nawigacyjne";
    }
    get expandedIconTapHint() {
      return "Zwiń";
    }
    get firstPageTooltip() {
      return "Pierwsza strona";
    }
    get hideAccountsLabel() {
      return "Ukryj konta";
    }
    get inputDateModeButtonLabel() {
      return "Przełącz na wpisywanie";
    }
    get inputTimeModeButtonLabel() {
      return "Włącz tryb wprowadzania tekstu";
    }
    get invalidDateFormatLabel() {
      return "Nieprawidłowy format.";
    }
    get invalidDateRangeLabel() {
      return "Nieprawidłowy zakres.";
    }
    get invalidTimeLabel() {
      return "Wpisz prawidłową godzinę";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Poprzedni kanał";
    }
    get keyboardKeyChannelUp() {
      return "Następny kanał";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Wysuń";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDn";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Zasilanie";
    }
    get keyboardKeyPowerOff() {
      return "Wyłącz zasilanie";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Spacja";
    }
    get lastPageTooltip() {
      return "Ostatnia strona";
    }
    get licensesPackageDetailTextFew() {
      return "$licenseCount licencje";
    }
    get licensesPackageDetailTextMany() {
      return "$licenseCount licencji";
    }
    get licensesPackageDetailTextOne() {
      return "1 licencja";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licencji";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Licencje";
    }
    get menuBarMenuLabel() {
      return "Pasek menu";
    }
    get modalBarrierDismissLabel() {
      return "Zamknij";
    }
    get moreButtonTooltip() {
      return "Więcej";
    }
    get nextMonthTooltip() {
      return "Następny miesiąc";
    }
    get nextPageTooltip() {
      return "Następna strona";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Otwórz menu nawigacyjne";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow z $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow z około $rowCount";
    }
    get pasteButtonLabel() {
      return "Wklej";
    }
    get popupMenuLabel() {
      return "Menu kontekstowe";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "Poprzedni miesiąc";
    }
    get previousPageTooltip() {
      return "Poprzednia strona";
    }
    get refreshIndicatorSemanticLabel() {
      return "Odśwież";
    }
    get remainingTextFieldCharacterCountFew() {
      return "Pozostały $remainingCount znaki";
    }
    get remainingTextFieldCharacterCountMany() {
      return "Pozostało $remainingCount znaków";
    }
    get remainingTextFieldCharacterCountOne() {
      return "Jeszcze 1 znak";
    }
    get remainingTextFieldCharacterCountOther() {
      return "Pozostało $remainingCount znaków";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Przenieś w dół";
    }
    get reorderItemLeft() {
      return "Przenieś w lewo";
    }
    get reorderItemRight() {
      return "Przenieś w prawo";
    }
    get reorderItemToEnd() {
      return "Przenieś na koniec";
    }
    get reorderItemToStart() {
      return "Przenieś na początek";
    }
    get reorderItemUp() {
      return "Przenieś w górę";
    }
    get rowsPerPageTitle() {
      return "Wiersze na stronie:";
    }
    get saveButtonLabel() {
      return "ZAPISZ";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Szukaj";
    }
    get selectAllButtonLabel() {
      return "Zaznacz wszystko";
    }
    get selectYearSemanticsLabel() {
      return "Wybierz rok";
    }
    get selectedRowCountTitleFew() {
      return "$selectedRowCount wybrane elementy";
    }
    get selectedRowCountTitleMany() {
      return "$selectedRowCount wybranych elementów";
    }
    get selectedRowCountTitleOne() {
      return "1 wybrany element";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount wybranych elementów";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Pokaż konta";
    }
    get showMenuTooltip() {
      return "Pokaż menu";
    }
    get signedInLabel() {
      return "Zalogowani użytkownicy";
    }
    get tabLabelRaw() {
      return "Karta $tabIndex z $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "WYBIERZ GODZINĘ";
    }
    get timePickerHourLabel() {
      return "Godzina";
    }
    get timePickerHourModeAnnouncement() {
      return "Wybierz godziny";
    }
    get timePickerInputHelpText() {
      return "WPISZ GODZINĘ";
    }
    get timePickerMinuteLabel() {
      return "Minuta";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Wybierz minuty";
    }
    get unspecifiedDate() {
      return "Data";
    }
    get unspecifiedDateRange() {
      return "Zakres dat";
    }
    get viewLicensesButtonLabel() {
      return "WYŚWIETL LICENCJE";
    }
  };
  (generated_material_localizations.MaterialLocalizationPl.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "pl";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationPl.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationPl.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationPl);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationPl);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationPl, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationPl.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationPl, I[2]);
  generated_material_localizations.MaterialLocalizationPs = class MaterialLocalizationPs extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationPs.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "د $applicationName په اړه";
    }
    get alertDialogLabel() {
      return "خبرتیا";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "شاته";
    }
    get calendarModeButtonLabel() {
      return "Switch to calendar";
    }
    get cancelButtonLabel() {
      return "لغوه کول";
    }
    get closeButtonLabel() {
      return "تړل";
    }
    get closeButtonTooltip() {
      return "بنده";
    }
    get collapsedIconTapHint() {
      return "Expand";
    }
    get continueButtonLabel() {
      return "منځپانګې";
    }
    get copyButtonLabel() {
      return "کاپی";
    }
    get cutButtonLabel() {
      return "کم کړئ";
    }
    get dateHelpText() {
      return "mm/dd/yyyy";
    }
    get dateInputLabel() {
      return "Enter Date";
    }
    get dateOutOfRangeLabel() {
      return "Out of range.";
    }
    get datePickerHelpText() {
      return "SELECT DATE";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "End date $fullDate";
    }
    get dateRangeEndLabel() {
      return "End Date";
    }
    get dateRangePickerHelpText() {
      return "SELECT RANGE";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Start date $fullDate";
    }
    get dateRangeStartLabel() {
      return "Start Date";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "";
    }
    get dialModeButtonLabel() {
      return "Switch to dial picker mode";
    }
    get dialogLabel() {
      return "خبرې اترې";
    }
    get drawerLabel() {
      return "د نیویگیشن مینو";
    }
    get expandedIconTapHint() {
      return "Collapse";
    }
    get firstPageTooltip() {
      return "First page";
    }
    get hideAccountsLabel() {
      return "حسابونه پټ کړئ";
    }
    get inputDateModeButtonLabel() {
      return "Switch to input";
    }
    get inputTimeModeButtonLabel() {
      return "Switch to text input mode";
    }
    get invalidDateFormatLabel() {
      return "Invalid format.";
    }
    get invalidDateRangeLabel() {
      return "Invalid range.";
    }
    get invalidTimeLabel() {
      return "Enter a valid time";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "Power Off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "Last page";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 license";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licenses";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "جوازونه";
    }
    get menuBarMenuLabel() {
      return "Menu bar menu";
    }
    get modalBarrierDismissLabel() {
      return "رد کړه";
    }
    get moreButtonTooltip() {
      return "More";
    }
    get nextMonthTooltip() {
      return "بله میاشت";
    }
    get nextPageTooltip() {
      return "بله پاڼه";
    }
    get okButtonLabel() {
      return "سمه ده";
    }
    get openAppDrawerTooltip() {
      return "د پرانیستی نیینګ مینو";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow د $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow څخه $rowCount د";
    }
    get pasteButtonLabel() {
      return "پیټ کړئ";
    }
    get popupMenuLabel() {
      return "د پاپ اپ مینو";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "تیره میاشت";
    }
    get previousPageTooltip() {
      return "مخکینی مخ";
    }
    get refreshIndicatorSemanticLabel() {
      return "Refresh";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 character remaining";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount characters remaining";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "No characters remaining";
    }
    get reorderItemDown() {
      return "Move down";
    }
    get reorderItemLeft() {
      return "Move left";
    }
    get reorderItemRight() {
      return "Move right";
    }
    get reorderItemToEnd() {
      return "Move to the end";
    }
    get reorderItemToStart() {
      return "Move to the start";
    }
    get reorderItemUp() {
      return "Move up";
    }
    get rowsPerPageTitle() {
      return "د هرې پاڼې پاڼې:";
    }
    get saveButtonLabel() {
      return "SAVE";
    }
    get scriptCategory() {
      return typography.ScriptCategory.tall;
    }
    get searchFieldLabel() {
      return "لټون";
    }
    get selectAllButtonLabel() {
      return "غوره کړئ";
    }
    get selectYearSemanticsLabel() {
      return "Select year";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return null;
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount توکي غوره شوي";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "حسابونه ښکاره کړئ";
    }
    get showMenuTooltip() {
      return "غورنۍ ښودل";
    }
    get signedInLabel() {
      return "ننوتل";
    }
    get tabLabelRaw() {
      return "$tabIndex د $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "SELECT TIME";
    }
    get timePickerHourLabel() {
      return "Hour";
    }
    get timePickerHourModeAnnouncement() {
      return "وختونه وټاکئ";
    }
    get timePickerInputHelpText() {
      return "ENTER TIME";
    }
    get timePickerMinuteLabel() {
      return "Minute";
    }
    get timePickerMinuteModeAnnouncement() {
      return "منې غوره کړئ";
    }
    get unspecifiedDate() {
      return "Date";
    }
    get unspecifiedDateRange() {
      return "Date Range";
    }
    get viewLicensesButtonLabel() {
      return "لیدلس وګورئ";
    }
  };
  (generated_material_localizations.MaterialLocalizationPs.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "ps";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationPs.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationPs.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationPs);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationPs);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationPs, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationPs.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationPs, I[2]);
  generated_material_localizations.MaterialLocalizationPt = class MaterialLocalizationPt extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationPt.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Sobre o app $applicationName";
    }
    get alertDialogLabel() {
      return "Alerta";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "Voltar";
    }
    get calendarModeButtonLabel() {
      return "Mudar para agenda";
    }
    get cancelButtonLabel() {
      return "CANCELAR";
    }
    get closeButtonLabel() {
      return "FECHAR";
    }
    get closeButtonTooltip() {
      return "Fechar";
    }
    get collapsedIconTapHint() {
      return "Abrir";
    }
    get continueButtonLabel() {
      return "CONTINUAR";
    }
    get copyButtonLabel() {
      return "Copiar";
    }
    get cutButtonLabel() {
      return "Cortar";
    }
    get dateHelpText() {
      return "dd/mm/aaaa";
    }
    get dateInputLabel() {
      return "Inserir data";
    }
    get dateOutOfRangeLabel() {
      return "Fora de alcance.";
    }
    get datePickerHelpText() {
      return "SELECIONAR DATA";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Data de término $fullDate";
    }
    get dateRangeEndLabel() {
      return "Data de término";
    }
    get dateRangePickerHelpText() {
      return "SELECIONAR INTERVALO";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Data de início $fullDate";
    }
    get dateRangeStartLabel() {
      return "Data de início";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "Excluir";
    }
    get dialModeButtonLabel() {
      return "Alternar para o modo de seleção de discagem";
    }
    get dialogLabel() {
      return "Caixa de diálogo";
    }
    get drawerLabel() {
      return "Menu de navegação";
    }
    get expandedIconTapHint() {
      return "Recolher";
    }
    get firstPageTooltip() {
      return "Primeira página";
    }
    get hideAccountsLabel() {
      return "Ocultar contas";
    }
    get inputDateModeButtonLabel() {
      return "Mudar para modo de entrada";
    }
    get inputTimeModeButtonLabel() {
      return "Alternar para o modo de entrada de texto";
    }
    get invalidDateFormatLabel() {
      return "Formato inválido.";
    }
    get invalidDateRangeLabel() {
      return "Intervalo inválido.";
    }
    get invalidTimeLabel() {
      return "Insira um horário válido";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Canais para baixo";
    }
    get keyboardKeyChannelUp() {
      return "Canais para cima";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Ejetar";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Liga/desliga";
    }
    get keyboardKeyPowerOff() {
      return "Desligar";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Selecionar";
    }
    get keyboardKeySpace() {
      return "Espaço";
    }
    get lastPageTooltip() {
      return "Última página";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 licença";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licenças";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Licenças";
    }
    get menuBarMenuLabel() {
      return "Menu da barra de menus";
    }
    get modalBarrierDismissLabel() {
      return "Dispensar";
    }
    get moreButtonTooltip() {
      return "Mais";
    }
    get nextMonthTooltip() {
      return "Próximo mês";
    }
    get nextPageTooltip() {
      return "Próxima página";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Abrir menu de navegação";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow – $lastRow de $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow – $lastRow de aproximadamente $rowCount";
    }
    get pasteButtonLabel() {
      return "Colar";
    }
    get popupMenuLabel() {
      return "Menu pop-up";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "Mês anterior";
    }
    get previousPageTooltip() {
      return "Página anterior";
    }
    get refreshIndicatorSemanticLabel() {
      return "Atualizar";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 caractere restante";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount caracteres restantes";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Mover para baixo";
    }
    get reorderItemLeft() {
      return "Mover para a esquerda";
    }
    get reorderItemRight() {
      return "Mover para a direita";
    }
    get reorderItemToEnd() {
      return "Mover para o final";
    }
    get reorderItemToStart() {
      return "Mover para o início";
    }
    get reorderItemUp() {
      return "Mover para cima";
    }
    get rowsPerPageTitle() {
      return "Linhas por página:";
    }
    get saveButtonLabel() {
      return "SALVAR";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Pesquisa";
    }
    get selectAllButtonLabel() {
      return "Selecionar tudo";
    }
    get selectYearSemanticsLabel() {
      return "Selecione o ano";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 item selecionado";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount itens selecionados";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Mostrar contas";
    }
    get showMenuTooltip() {
      return "Mostrar menu";
    }
    get signedInLabel() {
      return "Conectado a";
    }
    get tabLabelRaw() {
      return "Guia $tabIndex de $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "SELECIONAR HORÁRIO";
    }
    get timePickerHourLabel() {
      return "Hora";
    }
    get timePickerHourModeAnnouncement() {
      return "Selecione as horas";
    }
    get timePickerInputHelpText() {
      return "INSERIR HORÁRIO";
    }
    get timePickerMinuteLabel() {
      return "Minuto";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Selecione os minutos";
    }
    get unspecifiedDate() {
      return "Data";
    }
    get unspecifiedDateRange() {
      return "Período";
    }
    get viewLicensesButtonLabel() {
      return "VER LICENÇAS";
    }
  };
  (generated_material_localizations.MaterialLocalizationPt.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "pt";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationPt.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationPt.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationPt);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationPt);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationPt, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationPt.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationPt, I[2]);
  generated_material_localizations.MaterialLocalizationPtPt = class MaterialLocalizationPtPt extends generated_material_localizations.MaterialLocalizationPt {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationPtPt.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get menuBarMenuLabel() {
      return "Menu da barra de menu";
    }
    get keyboardKeyChannelDown() {
      return "Canal anterior";
    }
    get keyboardKeyBackspace() {
      return "Retrocesso";
    }
    get keyboardKeyInsert() {
      return "Inserir";
    }
    get keyboardKeyHome() {
      return "Início";
    }
    get keyboardKeyEnd() {
      return "Fim";
    }
    get keyboardKeyChannelUp() {
      return "Canal seguinte";
    }
    get keyboardKeyPower() {
      return "Alimentação";
    }
    get dialModeButtonLabel() {
      return "Mude para o modo de seletor de mostrador";
    }
    get timePickerDialHelpText() {
      return "SELECIONAR HORA";
    }
    get timePickerInputHelpText() {
      return "INTRODUZIR HORA";
    }
    get invalidTimeLabel() {
      return "Introduza uma hora válida.";
    }
    get inputTimeModeButtonLabel() {
      return "Mude para o método de introdução de texto";
    }
    get dateInputLabel() {
      return "Introduzir data";
    }
    get calendarModeButtonLabel() {
      return "Mude para o calendário";
    }
    get saveButtonLabel() {
      return "GUARDAR";
    }
    get dateOutOfRangeLabel() {
      return "Fora do intervalo.";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Data de conclusão: $fullDate";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Data de início: $fullDate";
    }
    get dateRangeEndLabel() {
      return "Data de conclusão";
    }
    get inputDateModeButtonLabel() {
      return "Mude para a introdução";
    }
    get unspecifiedDateRange() {
      return "Intervalo de datas";
    }
    get selectYearSemanticsLabel() {
      return "Selecionar ano";
    }
    get tabLabelRaw() {
      return "Separador $tabIndex de $tabCount";
    }
    get signedInLabel() {
      return "Com sessão iniciada";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Selecionar minutos";
    }
    get timePickerHourModeAnnouncement() {
      return "Selecionar horas";
    }
    get deleteButtonTooltip() {
      return "Eliminar";
    }
    get nextMonthTooltip() {
      return "Mês seguinte";
    }
    get nextPageTooltip() {
      return "Página seguinte";
    }
    get aboutListTileTitleRaw() {
      return "Acerca de $applicationName";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow a $lastRow de $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow a $lastRow de cerca de $rowCount";
    }
    get modalBarrierDismissLabel() {
      return "Ignorar";
    }
    get searchFieldLabel() {
      return "Pesquisar";
    }
    get reorderItemToEnd() {
      return "Mover para o fim";
    }
    get expandedIconTapHint() {
      return "Reduzir";
    }
    get collapsedIconTapHint() {
      return "Expandir";
    }
    get remainingTextFieldCharacterCountOne() {
      return "Resta 1 caráter";
    }
    get remainingTextFieldCharacterCountOther() {
      return "Restam $remainingCount carateres";
    }
  };
  (generated_material_localizations.MaterialLocalizationPtPt.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "pt_PT";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationPtPt.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationPtPt.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationPtPt);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationPtPt);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationPtPt, I[2]);
  generated_material_localizations.MaterialLocalizationRo = class MaterialLocalizationRo extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationRo.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Despre $applicationName";
    }
    get alertDialogLabel() {
      return "Alertă";
    }
    get anteMeridiemAbbreviation() {
      return "a.m.";
    }
    get backButtonTooltip() {
      return "Înapoi";
    }
    get calendarModeButtonLabel() {
      return "Comutați la calendar";
    }
    get cancelButtonLabel() {
      return "ANULAȚI";
    }
    get closeButtonLabel() {
      return "ÎNCHIDEȚI";
    }
    get closeButtonTooltip() {
      return "Închideți";
    }
    get collapsedIconTapHint() {
      return "Extindeți";
    }
    get continueButtonLabel() {
      return "CONTINUAȚI";
    }
    get copyButtonLabel() {
      return "Copiați";
    }
    get cutButtonLabel() {
      return "Decupați";
    }
    get dateHelpText() {
      return "zz.ll.aaaa";
    }
    get dateInputLabel() {
      return "Introduceți data";
    }
    get dateOutOfRangeLabel() {
      return "Fără acoperire.";
    }
    get datePickerHelpText() {
      return "SELECTAȚI DATA";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Data de încheiere: $fullDate";
    }
    get dateRangeEndLabel() {
      return "Data de încheiere";
    }
    get dateRangePickerHelpText() {
      return "SELECTAȚI UN INTERVAL";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Data de începere: $fullDate";
    }
    get dateRangeStartLabel() {
      return "Data de începere";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Ștergeți";
    }
    get dialModeButtonLabel() {
      return "Comutați la modul selector cadran";
    }
    get dialogLabel() {
      return "Casetă de dialog";
    }
    get drawerLabel() {
      return "Meniu de navigare";
    }
    get expandedIconTapHint() {
      return "Restrângeți";
    }
    get firstPageTooltip() {
      return "Prima pagină";
    }
    get hideAccountsLabel() {
      return "Ascundeți conturile";
    }
    get inputDateModeButtonLabel() {
      return "Comutați la introducerea textului";
    }
    get inputTimeModeButtonLabel() {
      return "Comutați la modul de introducere a textului";
    }
    get invalidDateFormatLabel() {
      return "Format nevalid.";
    }
    get invalidDateRangeLabel() {
      return "Interval nevalid.";
    }
    get invalidTimeLabel() {
      return "Introduceți o oră validă";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Înapoi";
    }
    get keyboardKeyChannelUp() {
      return "Înainte";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "0 de pe tastatura numerică";
    }
    get keyboardKeyNumpad1() {
      return "1 de pe tastatura numerică";
    }
    get keyboardKeyNumpad2() {
      return "2 de pe tastatura numerică";
    }
    get keyboardKeyNumpad3() {
      return "3 de pe tastatura numerică";
    }
    get keyboardKeyNumpad4() {
      return "4 de pe tastatura numerică";
    }
    get keyboardKeyNumpad5() {
      return "5 de pe tastatura numerică";
    }
    get keyboardKeyNumpad6() {
      return "6 de pe tastatura numerică";
    }
    get keyboardKeyNumpad7() {
      return "7 de pe tastatura numerică";
    }
    get keyboardKeyNumpad8() {
      return "8 de pe tastatura numerică";
    }
    get keyboardKeyNumpad9() {
      return "9 de pe tastatura numerică";
    }
    get keyboardKeyNumpadAdd() {
      return "+ de pe tastatura numerică";
    }
    get keyboardKeyNumpadComma() {
      return ", de pe tastatura numerică";
    }
    get keyboardKeyNumpadDecimal() {
      return ". de pe tastatura numerică";
    }
    get keyboardKeyNumpadDivide() {
      return "/ de pe tastatura numerică";
    }
    get keyboardKeyNumpadEnter() {
      return "Enter de pe tastatura numerică";
    }
    get keyboardKeyNumpadEqual() {
      return "= de pe tastatura numerică";
    }
    get keyboardKeyNumpadMultiply() {
      return "* de pe tastatura numerică";
    }
    get keyboardKeyNumpadParenLeft() {
      return "( de pe tastatura numerică";
    }
    get keyboardKeyNumpadParenRight() {
      return ") de pe tastatura numerică";
    }
    get keyboardKeyNumpadSubtract() {
      return "- de pe tastatura numerică";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "Power Off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Spațiu";
    }
    get lastPageTooltip() {
      return "Ultima pagină";
    }
    get licensesPackageDetailTextFew() {
      return "$licenseCount licențe";
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "O licență";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount de licențe";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Licențe";
    }
    get menuBarMenuLabel() {
      return "Bară de meniu";
    }
    get modalBarrierDismissLabel() {
      return "Închideți";
    }
    get moreButtonTooltip() {
      return "Mai multe";
    }
    get nextMonthTooltip() {
      return "Luna viitoare";
    }
    get nextPageTooltip() {
      return "Pagina următoare";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Deschideți meniul de navigare";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow din $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow din aproximativ $rowCount";
    }
    get pasteButtonLabel() {
      return "Inserați";
    }
    get popupMenuLabel() {
      return "Meniu pop-up";
    }
    get postMeridiemAbbreviation() {
      return "p.m.";
    }
    get previousMonthTooltip() {
      return "Luna trecută";
    }
    get previousPageTooltip() {
      return "Pagina anterioară";
    }
    get refreshIndicatorSemanticLabel() {
      return "Actualizați";
    }
    get remainingTextFieldCharacterCountFew() {
      return "$remainingCount caractere rămase";
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "un caracter rămas";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount de caractere rămase";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Mutați în jos";
    }
    get reorderItemLeft() {
      return "Mutați la stânga";
    }
    get reorderItemRight() {
      return "Mutați la dreapta";
    }
    get reorderItemToEnd() {
      return "Mutați la sfârșit";
    }
    get reorderItemToStart() {
      return "Mutați la început";
    }
    get reorderItemUp() {
      return "Mutați în sus";
    }
    get rowsPerPageTitle() {
      return "Rânduri pe pagină:";
    }
    get saveButtonLabel() {
      return "SALVAȚI";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Căutați";
    }
    get selectAllButtonLabel() {
      return "Selectați tot";
    }
    get selectYearSemanticsLabel() {
      return "Selectați anul";
    }
    get selectedRowCountTitleFew() {
      return "$selectedRowCount articole selectate";
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "Un articol selectat";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount de articole selectate";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return "Nu există elemente selectate";
    }
    get showAccountsLabel() {
      return "Afișați conturile";
    }
    get showMenuTooltip() {
      return "Afișați meniul";
    }
    get signedInLabel() {
      return "V-ați conectat";
    }
    get tabLabelRaw() {
      return "Fila $tabIndex din $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "SELECTAȚI ORA";
    }
    get timePickerHourLabel() {
      return "Oră";
    }
    get timePickerHourModeAnnouncement() {
      return "Selectați orele";
    }
    get timePickerInputHelpText() {
      return "INTRODUCEȚI ORA";
    }
    get timePickerMinuteLabel() {
      return "Minut";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Selectați minutele";
    }
    get unspecifiedDate() {
      return "Data";
    }
    get unspecifiedDateRange() {
      return "Interval de date";
    }
    get viewLicensesButtonLabel() {
      return "VEDEȚI LICENȚELE";
    }
  };
  (generated_material_localizations.MaterialLocalizationRo.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "ro";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationRo.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationRo.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationRo);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationRo);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationRo, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationRo.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationRo, I[2]);
  generated_material_localizations.MaterialLocalizationRu = class MaterialLocalizationRu extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationRu.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName: сведения";
    }
    get alertDialogLabel() {
      return "Оповещение";
    }
    get anteMeridiemAbbreviation() {
      return "АМ";
    }
    get backButtonTooltip() {
      return "Назад";
    }
    get calendarModeButtonLabel() {
      return "Переключиться на календарь";
    }
    get cancelButtonLabel() {
      return "ОТМЕНА";
    }
    get closeButtonLabel() {
      return "ЗАКРЫТЬ";
    }
    get closeButtonTooltip() {
      return "Закрыть";
    }
    get collapsedIconTapHint() {
      return "Развернуть";
    }
    get continueButtonLabel() {
      return "ПРОДОЛЖИТЬ";
    }
    get copyButtonLabel() {
      return "Копировать";
    }
    get cutButtonLabel() {
      return "Вырезать";
    }
    get dateHelpText() {
      return "дд.мм.гггг";
    }
    get dateInputLabel() {
      return "Введите дату";
    }
    get dateOutOfRangeLabel() {
      return "Дата находится вне допустимого диапазона.";
    }
    get datePickerHelpText() {
      return "ВЫБЕРИТЕ ДАТУ";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Дата окончания: $fullDate";
    }
    get dateRangeEndLabel() {
      return "Дата окончания";
    }
    get dateRangePickerHelpText() {
      return "ВЫБЕРИТЕ ДИАПАЗОН ДАТ";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Дата начала: $fullDate";
    }
    get dateRangeStartLabel() {
      return "Дата начала";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Удалить";
    }
    get dialModeButtonLabel() {
      return "Перейти в режим выбора времени";
    }
    get dialogLabel() {
      return "Диалоговое окно";
    }
    get drawerLabel() {
      return "Меню навигации";
    }
    get expandedIconTapHint() {
      return "Свернуть";
    }
    get firstPageTooltip() {
      return "Первая страница";
    }
    get hideAccountsLabel() {
      return "Скрыть аккаунты";
    }
    get inputDateModeButtonLabel() {
      return "Переключиться на ручной ввод";
    }
    get inputTimeModeButtonLabel() {
      return "Перейти в режим ввода текста";
    }
    get invalidDateFormatLabel() {
      return "Недопустимый формат даты.";
    }
    get invalidDateRangeLabel() {
      return "Недопустимый диапазон.";
    }
    get invalidTimeLabel() {
      return "Указано недопустимое время.";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Следующий канал";
    }
    get keyboardKeyChannelUp() {
      return "Предыдущий канал";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Извлечь";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Ввод";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Питание";
    }
    get keyboardKeyPowerOff() {
      return "Отключить питание";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Выбрать";
    }
    get keyboardKeySpace() {
      return "Пробел";
    }
    get lastPageTooltip() {
      return "Последняя страница";
    }
    get licensesPackageDetailTextFew() {
      return "$licenseCount лицензии";
    }
    get licensesPackageDetailTextMany() {
      return "$licenseCount лицензий";
    }
    get licensesPackageDetailTextOne() {
      return "1 лицензия";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount лицензии";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Лицензии";
    }
    get menuBarMenuLabel() {
      return "Строка меню";
    }
    get modalBarrierDismissLabel() {
      return "Закрыть";
    }
    get moreButtonTooltip() {
      return "Ещё";
    }
    get nextMonthTooltip() {
      return "Следующий месяц";
    }
    get nextPageTooltip() {
      return "Следующая страница";
    }
    get okButtonLabel() {
      return "ОК";
    }
    get openAppDrawerTooltip() {
      return "Открыть меню навигации";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow из $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow из примерно $rowCount";
    }
    get pasteButtonLabel() {
      return "Вставить";
    }
    get popupMenuLabel() {
      return "Всплывающее меню";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "Предыдущий месяц";
    }
    get previousPageTooltip() {
      return "Предыдущая страница";
    }
    get refreshIndicatorSemanticLabel() {
      return "Обновление";
    }
    get remainingTextFieldCharacterCountFew() {
      return "Осталось $remainingCount символа";
    }
    get remainingTextFieldCharacterCountMany() {
      return "Осталось $remainingCount символов";
    }
    get remainingTextFieldCharacterCountOne() {
      return "Остался 1 символ";
    }
    get remainingTextFieldCharacterCountOther() {
      return "Осталось $remainingCount символа";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Переместить вниз";
    }
    get reorderItemLeft() {
      return "Переместить влево";
    }
    get reorderItemRight() {
      return "Переместить вправо";
    }
    get reorderItemToEnd() {
      return "Переместить в конец";
    }
    get reorderItemToStart() {
      return "Переместить в начало";
    }
    get reorderItemUp() {
      return "Переместить вверх";
    }
    get rowsPerPageTitle() {
      return "Строк на странице:";
    }
    get saveButtonLabel() {
      return "СОХРАНИТЬ";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Поиск";
    }
    get selectAllButtonLabel() {
      return "Выбрать все";
    }
    get selectYearSemanticsLabel() {
      return "Выберите год";
    }
    get selectedRowCountTitleFew() {
      return "Выбрано $selectedRowCount объекта";
    }
    get selectedRowCountTitleMany() {
      return "Выбрано $selectedRowCount объектов";
    }
    get selectedRowCountTitleOne() {
      return "Выбран 1 объект";
    }
    get selectedRowCountTitleOther() {
      return "Выбрано $selectedRowCount объекта";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return "Строки не выбраны";
    }
    get showAccountsLabel() {
      return "Показать аккаунты";
    }
    get showMenuTooltip() {
      return "Показать меню";
    }
    get signedInLabel() {
      return "Вход выполнен";
    }
    get tabLabelRaw() {
      return "Вкладка $tabIndex из $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "ВЫБЕРИТЕ ВРЕМЯ";
    }
    get timePickerHourLabel() {
      return "Часы";
    }
    get timePickerHourModeAnnouncement() {
      return "Выберите часы";
    }
    get timePickerInputHelpText() {
      return "ВВЕДИТЕ ВРЕМЯ";
    }
    get timePickerMinuteLabel() {
      return "Минуты";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Выберите минуты";
    }
    get unspecifiedDate() {
      return "Дата";
    }
    get unspecifiedDateRange() {
      return "Диапазон дат";
    }
    get viewLicensesButtonLabel() {
      return "ЛИЦЕНЗИИ";
    }
  };
  (generated_material_localizations.MaterialLocalizationRu.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "ru";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationRu.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationRu.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationRu);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationRu);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationRu, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationRu.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationRu, I[2]);
  generated_material_localizations.MaterialLocalizationSi = class MaterialLocalizationSi extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationSi.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName ගැන";
    }
    get alertDialogLabel() {
      return "ඇඟවීම";
    }
    get anteMeridiemAbbreviation() {
      return "පෙ.ව.";
    }
    get backButtonTooltip() {
      return "ආපසු";
    }
    get calendarModeButtonLabel() {
      return "දින දර්ශනය වෙත මාරු වන්න";
    }
    get cancelButtonLabel() {
      return "අවලංගු කරන්න";
    }
    get closeButtonLabel() {
      return "වසන්න";
    }
    get closeButtonTooltip() {
      return "වසන්න";
    }
    get collapsedIconTapHint() {
      return "දිග හරින්න";
    }
    get continueButtonLabel() {
      return "ඉදිරියට";
    }
    get copyButtonLabel() {
      return "පිටපත් කරන්න";
    }
    get cutButtonLabel() {
      return "කපන්න";
    }
    get dateHelpText() {
      return "mm.dd.yyyy";
    }
    get dateInputLabel() {
      return "දිනය ඇතුළු කරන්න";
    }
    get dateOutOfRangeLabel() {
      return "පරාසයෙන් පිටත.";
    }
    get datePickerHelpText() {
      return "දිනය තෝරන්න";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "අවසන් වන දිනය $fullDate";
    }
    get dateRangeEndLabel() {
      return "අවසන් වන දිනය";
    }
    get dateRangePickerHelpText() {
      return "පරාසය තෝරන්න";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "ආරම්භක දිනය $fullDate";
    }
    get dateRangeStartLabel() {
      return "ආරම්භක දිනය";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "මකන්න";
    }
    get dialModeButtonLabel() {
      return "ඩයලන තෝරක ප්‍රකාරයට මාරු කරන්න";
    }
    get dialogLabel() {
      return "සංවාදය";
    }
    get drawerLabel() {
      return "සංචාලන මෙනුව";
    }
    get expandedIconTapHint() {
      return "හකුළන්න";
    }
    get firstPageTooltip() {
      return "පළමු පිටුව";
    }
    get hideAccountsLabel() {
      return "ගිණුම් සඟවන්න";
    }
    get inputDateModeButtonLabel() {
      return "ආදානය වෙත මාරු වන්න";
    }
    get inputTimeModeButtonLabel() {
      return "පෙළ ආදාන ප්‍රකාරයට මාරු කරන්න";
    }
    get invalidDateFormatLabel() {
      return "අවලංගු ආකෘතියකි.";
    }
    get invalidDateRangeLabel() {
      return "අවලංගු පරාසයකි.";
    }
    get invalidTimeLabel() {
      return "වලංගු වේලාවක් ඇතුළු කරන්න";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "Power Off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "අවසන් පිටුව";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "බලපත්‍ර 1";
    }
    get licensesPackageDetailTextOther() {
      return "බලපත්‍ර $licenseCount";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "බලපත්‍ර";
    }
    get menuBarMenuLabel() {
      return "මෙනු තීරු මෙනුව";
    }
    get modalBarrierDismissLabel() {
      return "ඉවත ලන්න";
    }
    get moreButtonTooltip() {
      return "තව";
    }
    get nextMonthTooltip() {
      return "ඊළඟ මාසය";
    }
    get nextPageTooltip() {
      return "ඊළඟ පිටුව";
    }
    get okButtonLabel() {
      return "හරි";
    }
    get openAppDrawerTooltip() {
      return "සංචාලන මෙනුව විවෘත කරන්න";
    }
    get pageRowsInfoTitleRaw() {
      return "$rowCountන් $firstRow–$lastRow";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$rowCountකින් පමණ $firstRow–$lastRow";
    }
    get pasteButtonLabel() {
      return "අලවන්න";
    }
    get popupMenuLabel() {
      return "උත්පතන මෙනුව";
    }
    get postMeridiemAbbreviation() {
      return "ප.ව.";
    }
    get previousMonthTooltip() {
      return "පෙර මාසය";
    }
    get previousPageTooltip() {
      return "පෙර පිටුව";
    }
    get refreshIndicatorSemanticLabel() {
      return "නැවුම් කරන්න";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "අනුලකුණු 1ක් ඉතිරිය";
    }
    get remainingTextFieldCharacterCountOther() {
      return "අනුලකුණු $remainingCountක් ඉතිරිය";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "පහළට ගෙන යන්න";
    }
    get reorderItemLeft() {
      return "වමට ගෙන යන්න";
    }
    get reorderItemRight() {
      return "දකුණට ගෙන යන්න";
    }
    get reorderItemToEnd() {
      return "අවසානයට යන්න";
    }
    get reorderItemToStart() {
      return "ආරම්භය වෙත යන්න";
    }
    get reorderItemUp() {
      return "ඉහළට ගෙන යන්න";
    }
    get rowsPerPageTitle() {
      return "පිටුවකට පේළි:";
    }
    get saveButtonLabel() {
      return "සුරකින්න";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "සෙවීම";
    }
    get selectAllButtonLabel() {
      return "සියල්ල තෝරන්න";
    }
    get selectYearSemanticsLabel() {
      return "වර්ෂය තෝරන්න";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "අයිතම 1ක් තෝරන ලදී";
    }
    get selectedRowCountTitleOther() {
      return "අයිතම $selectedRowCountක් තෝරන ලදී";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "ගිණුම් පෙන්වන්න";
    }
    get showMenuTooltip() {
      return "මෙනුව පෙන්වන්න";
    }
    get signedInLabel() {
      return "පුරන ලදී";
    }
    get tabLabelRaw() {
      return "ටැබ $tabIndexකින් $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "වේලාව තෝරන්න";
    }
    get timePickerHourLabel() {
      return "පැය";
    }
    get timePickerHourModeAnnouncement() {
      return "පැය ගණන තෝරන්න";
    }
    get timePickerInputHelpText() {
      return "දිනය ඇතුළු කරන්න";
    }
    get timePickerMinuteLabel() {
      return "මිනිත්තු";
    }
    get timePickerMinuteModeAnnouncement() {
      return "මිනිත්තු ගණන තෝරන්න";
    }
    get unspecifiedDate() {
      return "දිනය";
    }
    get unspecifiedDateRange() {
      return "දින පරාසය";
    }
    get viewLicensesButtonLabel() {
      return "බලපත්‍ර බලන්න";
    }
  };
  (generated_material_localizations.MaterialLocalizationSi.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "si";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationSi.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationSi.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationSi);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationSi);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationSi, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationSi.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationSi, I[2]);
  generated_material_localizations.MaterialLocalizationSk = class MaterialLocalizationSk extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationSk.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName – informácie";
    }
    get alertDialogLabel() {
      return "Upozornenie";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "Späť";
    }
    get calendarModeButtonLabel() {
      return "Prepnúť na kalendár";
    }
    get cancelButtonLabel() {
      return "ZRUŠIŤ";
    }
    get closeButtonLabel() {
      return "ZAVRIEŤ";
    }
    get closeButtonTooltip() {
      return "Zavrieť";
    }
    get collapsedIconTapHint() {
      return "Rozbaliť";
    }
    get continueButtonLabel() {
      return "POKRAČOVAŤ";
    }
    get copyButtonLabel() {
      return "Kopírovať";
    }
    get cutButtonLabel() {
      return "Vystrihnúť";
    }
    get dateHelpText() {
      return "mm.dd.yyyy";
    }
    get dateInputLabel() {
      return "Zadajte dátum";
    }
    get dateOutOfRangeLabel() {
      return "Mimo rozsahu.";
    }
    get datePickerHelpText() {
      return "VYBERTE DÁTUM";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Dátum ukončenia $fullDate";
    }
    get dateRangeEndLabel() {
      return "Dátum ukončenia";
    }
    get dateRangePickerHelpText() {
      return "VYBERTE ROZSAH";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Dátum začatia $fullDate";
    }
    get dateRangeStartLabel() {
      return "Dátum začatia";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Odstrániť";
    }
    get dialModeButtonLabel() {
      return "Prepnúť na režim výberu času";
    }
    get dialogLabel() {
      return "Dialógové okno";
    }
    get drawerLabel() {
      return "Navigačná ponuka";
    }
    get expandedIconTapHint() {
      return "Zbaliť";
    }
    get firstPageTooltip() {
      return "Prvá strana";
    }
    get hideAccountsLabel() {
      return "Skryť účty";
    }
    get inputDateModeButtonLabel() {
      return "Prepnúť na zadávanie";
    }
    get inputTimeModeButtonLabel() {
      return "Prepnúť na textový režim vstupu";
    }
    get invalidDateFormatLabel() {
      return "Neplatný formát.";
    }
    get invalidDateRangeLabel() {
      return "Neplatný rozsah.";
    }
    get invalidTimeLabel() {
      return "Zadajte platný čas";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "O kanál nižšie";
    }
    get keyboardKeyChannelUp() {
      return "O kanál vyššie";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Odpojiť";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Vypínač";
    }
    get keyboardKeyPowerOff() {
      return "Vypnúť";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Medzerník";
    }
    get lastPageTooltip() {
      return "Posledná strana";
    }
    get licensesPackageDetailTextFew() {
      return "$licenseCount licencie";
    }
    get licensesPackageDetailTextMany() {
      return "$licenseCount licenses";
    }
    get licensesPackageDetailTextOne() {
      return "1 licencia";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licencií";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Licencie";
    }
    get menuBarMenuLabel() {
      return "Ponuka panela s ponukami";
    }
    get modalBarrierDismissLabel() {
      return "Odmietnuť";
    }
    get moreButtonTooltip() {
      return "Viac";
    }
    get nextMonthTooltip() {
      return "Budúci mesiac";
    }
    get nextPageTooltip() {
      return "Ďalšia strana";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Otvoriť navigačnú ponuku";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow – $lastRow z $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow – $lastRow z približne $rowCount";
    }
    get pasteButtonLabel() {
      return "Prilepiť";
    }
    get popupMenuLabel() {
      return "Kontextová ponuka";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "Predošlý mesiac";
    }
    get previousPageTooltip() {
      return "Predchádzajúca stránka";
    }
    get refreshIndicatorSemanticLabel() {
      return "Obnoviť";
    }
    get remainingTextFieldCharacterCountFew() {
      return "Zostávajú $remainingCount znaky";
    }
    get remainingTextFieldCharacterCountMany() {
      return "$remainingCount characters remaining";
    }
    get remainingTextFieldCharacterCountOne() {
      return "Zostáva 1 znak";
    }
    get remainingTextFieldCharacterCountOther() {
      return "Zostáva $remainingCount znakov";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Presunúť nadol";
    }
    get reorderItemLeft() {
      return "Presunúť doľava";
    }
    get reorderItemRight() {
      return "Presunúť doprava";
    }
    get reorderItemToEnd() {
      return "Presunúť na koniec";
    }
    get reorderItemToStart() {
      return "Presunúť na začiatok";
    }
    get reorderItemUp() {
      return "Presunúť nahor";
    }
    get rowsPerPageTitle() {
      return "Počet riadkov na stránku:";
    }
    get saveButtonLabel() {
      return "ULOŽIŤ";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Hľadať";
    }
    get selectAllButtonLabel() {
      return "Vybrať všetko";
    }
    get selectYearSemanticsLabel() {
      return "Vyberte rok";
    }
    get selectedRowCountTitleFew() {
      return "$selectedRowCount vybraté položky";
    }
    get selectedRowCountTitleMany() {
      return "$selectedRowCount items selected";
    }
    get selectedRowCountTitleOne() {
      return "1 vybratá položka";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount vybratých položiek";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Zobraziť účty";
    }
    get showMenuTooltip() {
      return "Zobraziť ponuku";
    }
    get signedInLabel() {
      return "Prihlásili ste sa";
    }
    get tabLabelRaw() {
      return "Karta $tabIndex z $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "VYBERTE ČAS";
    }
    get timePickerHourLabel() {
      return "Hodina";
    }
    get timePickerHourModeAnnouncement() {
      return "Vybrať hodiny";
    }
    get timePickerInputHelpText() {
      return "ZADAJTE ČAS";
    }
    get timePickerMinuteLabel() {
      return "Minúta";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Vybrať minúty";
    }
    get unspecifiedDate() {
      return "Dátum";
    }
    get unspecifiedDateRange() {
      return "Obdobie";
    }
    get viewLicensesButtonLabel() {
      return "ZOBRAZIŤ LICENCIE";
    }
  };
  (generated_material_localizations.MaterialLocalizationSk.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "sk";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationSk.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationSk.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationSk);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationSk);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationSk, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationSk.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationSk, I[2]);
  generated_material_localizations.MaterialLocalizationSl = class MaterialLocalizationSl extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationSl.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "O aplikaciji $applicationName";
    }
    get alertDialogLabel() {
      return "Opozorilo";
    }
    get anteMeridiemAbbreviation() {
      return "DOP.";
    }
    get backButtonTooltip() {
      return "Nazaj";
    }
    get calendarModeButtonLabel() {
      return "Preklop na koledar";
    }
    get cancelButtonLabel() {
      return "PREKLIČI";
    }
    get closeButtonLabel() {
      return "ZAPRI";
    }
    get closeButtonTooltip() {
      return "Zapiranje";
    }
    get collapsedIconTapHint() {
      return "Razširiti";
    }
    get continueButtonLabel() {
      return "NAPREJ";
    }
    get copyButtonLabel() {
      return "Kopiraj";
    }
    get cutButtonLabel() {
      return "Izreži";
    }
    get dateHelpText() {
      return "dd. mm. llll";
    }
    get dateInputLabel() {
      return "Vnesite datum";
    }
    get dateOutOfRangeLabel() {
      return "Zunaj dovoljenega obdobja";
    }
    get datePickerHelpText() {
      return "IZBIRA DATUMA";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Končni datum $fullDate";
    }
    get dateRangeEndLabel() {
      return "Končni datum";
    }
    get dateRangePickerHelpText() {
      return "IZBIRA OBDOBJA";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Začetni datum $fullDate";
    }
    get dateRangeStartLabel() {
      return "Začetni datum";
    }
    get dateSeparator() {
      return ". ";
    }
    get deleteButtonTooltip() {
      return "Brisanje";
    }
    get dialModeButtonLabel() {
      return "Preklop na način izbirnika s številčnico";
    }
    get dialogLabel() {
      return "Pogovorno okno";
    }
    get drawerLabel() {
      return "Meni za krmarjenje";
    }
    get expandedIconTapHint() {
      return "Strniti";
    }
    get firstPageTooltip() {
      return "Prva stran";
    }
    get hideAccountsLabel() {
      return "Skrivanje računov";
    }
    get inputDateModeButtonLabel() {
      return "Preklop na vnos";
    }
    get inputTimeModeButtonLabel() {
      return "Preklop na način vnosa besedila";
    }
    get invalidDateFormatLabel() {
      return "Neveljavna oblika";
    }
    get invalidDateRangeLabel() {
      return "Neveljavno obdobje";
    }
    get invalidTimeLabel() {
      return "Vnesite veljaven čas";
    }
    get keyboardKeyAlt() {
      return "Alt.";
    }
    get keyboardKeyAltGraph() {
      return "Alt. gr.";
    }
    get keyboardKeyBackspace() {
      return "Vračalka";
    }
    get keyboardKeyCapsLock() {
      return "Velike črke";
    }
    get keyboardKeyChannelDown() {
      return "Kanal dol";
    }
    get keyboardKeyChannelUp() {
      return "Kanal gor";
    }
    get keyboardKeyControl() {
      return "Ktrl";
    }
    get keyboardKeyDelete() {
      return "Odstrani";
    }
    get keyboardKeyEject() {
      return "Izvrzi";
    }
    get keyboardKeyEnd() {
      return "Konec";
    }
    get keyboardKeyEscape() {
      return "Izhod";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Začetek";
    }
    get keyboardKeyInsert() {
      return "Vstavi";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Vklopi štev.";
    }
    get keyboardKeyNumpad0() {
      return "Štev. 0";
    }
    get keyboardKeyNumpad1() {
      return "Štev. 1";
    }
    get keyboardKeyNumpad2() {
      return "Štev. 2";
    }
    get keyboardKeyNumpad3() {
      return "Štev. 3";
    }
    get keyboardKeyNumpad4() {
      return "Štev. 4";
    }
    get keyboardKeyNumpad5() {
      return "Štev. 5";
    }
    get keyboardKeyNumpad6() {
      return "Štev. 6";
    }
    get keyboardKeyNumpad7() {
      return "Štev. 7";
    }
    get keyboardKeyNumpad8() {
      return "Štev. 8";
    }
    get keyboardKeyNumpad9() {
      return "Štev. 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Štev. +";
    }
    get keyboardKeyNumpadComma() {
      return "Štev. ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Štev. .";
    }
    get keyboardKeyNumpadDivide() {
      return "Štev. /";
    }
    get keyboardKeyNumpadEnter() {
      return "Štev. Vnos";
    }
    get keyboardKeyNumpadEqual() {
      return "Štev. =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Štev. *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Štev. (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Štev. )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Štev. -";
    }
    get keyboardKeyPageDown() {
      return "Stran dol";
    }
    get keyboardKeyPageUp() {
      return "Stran gor";
    }
    get keyboardKeyPower() {
      return "Vklop";
    }
    get keyboardKeyPowerOff() {
      return "Izklop";
    }
    get keyboardKeyPrintScreen() {
      return "Zajem zaslona";
    }
    get keyboardKeyScrollLock() {
      return "Vklopi drsenje";
    }
    get keyboardKeySelect() {
      return "Izberi";
    }
    get keyboardKeySpace() {
      return "Preslednica";
    }
    get lastPageTooltip() {
      return "Zadnja stran";
    }
    get licensesPackageDetailTextFew() {
      return "$licenseCount licence";
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 licenca";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licenc";
    }
    get licensesPackageDetailTextTwo() {
      return "$licenseCount licenci";
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Licence";
    }
    get menuBarMenuLabel() {
      return "Meni menijske vrstice";
    }
    get modalBarrierDismissLabel() {
      return "Opusti";
    }
    get moreButtonTooltip() {
      return "Več";
    }
    get nextMonthTooltip() {
      return "Naslednji mesec";
    }
    get nextPageTooltip() {
      return "Naslednja stran";
    }
    get okButtonLabel() {
      return "V REDU";
    }
    get openAppDrawerTooltip() {
      return "Odpiranje menija za krmarjenje";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow od $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow od približno $rowCount";
    }
    get pasteButtonLabel() {
      return "Prilepi";
    }
    get popupMenuLabel() {
      return "Pojavni meni";
    }
    get postMeridiemAbbreviation() {
      return "POP.";
    }
    get previousMonthTooltip() {
      return "Prejšnji mesec";
    }
    get previousPageTooltip() {
      return "Prejšnja stran";
    }
    get refreshIndicatorSemanticLabel() {
      return "Osveži";
    }
    get remainingTextFieldCharacterCountFew() {
      return "Še $remainingCount znaki";
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "Še 1 znak";
    }
    get remainingTextFieldCharacterCountOther() {
      return "Še $remainingCount znakov";
    }
    get remainingTextFieldCharacterCountTwo() {
      return "Še $remainingCount znaka";
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Premakni navzdol";
    }
    get reorderItemLeft() {
      return "Premakni levo";
    }
    get reorderItemRight() {
      return "Premakni desno";
    }
    get reorderItemToEnd() {
      return "Premakni na konec";
    }
    get reorderItemToStart() {
      return "Premakni na začetek";
    }
    get reorderItemUp() {
      return "Premakni navzgor";
    }
    get rowsPerPageTitle() {
      return "Vrstice na stran:";
    }
    get saveButtonLabel() {
      return "SHRANI";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Iskanje";
    }
    get selectAllButtonLabel() {
      return "Izberi vse";
    }
    get selectYearSemanticsLabel() {
      return "Izberite leto";
    }
    get selectedRowCountTitleFew() {
      return "Izbrani so $selectedRowCount elementi";
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "Izbran je 1 element";
    }
    get selectedRowCountTitleOther() {
      return "Izbranih je $selectedRowCount elementov";
    }
    get selectedRowCountTitleTwo() {
      return "Izbrana sta $selectedRowCount elementa";
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Prikaz računov";
    }
    get showMenuTooltip() {
      return "Prikaz menija";
    }
    get signedInLabel() {
      return "Prijavljen";
    }
    get tabLabelRaw() {
      return "Zavihek $tabIndex od $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "IZBERITE ČAS";
    }
    get timePickerHourLabel() {
      return "Ura";
    }
    get timePickerHourModeAnnouncement() {
      return "Izberite ure";
    }
    get timePickerInputHelpText() {
      return "VNESITE ČAS";
    }
    get timePickerMinuteLabel() {
      return "Minuta";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Izberite minute";
    }
    get unspecifiedDate() {
      return "Datum";
    }
    get unspecifiedDateRange() {
      return "Časovno obdobje";
    }
    get viewLicensesButtonLabel() {
      return "PRIKAŽI LICENCE";
    }
  };
  (generated_material_localizations.MaterialLocalizationSl.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "sl";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationSl.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationSl.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationSl);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationSl);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationSl, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationSl.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationSl, I[2]);
  generated_material_localizations.MaterialLocalizationSq = class MaterialLocalizationSq extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationSq.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Rreth $applicationName";
    }
    get alertDialogLabel() {
      return "Sinjalizim";
    }
    get anteMeridiemAbbreviation() {
      return "paradite";
    }
    get backButtonTooltip() {
      return "Prapa";
    }
    get calendarModeButtonLabel() {
      return "Kalo te kalendari";
    }
    get cancelButtonLabel() {
      return "ANULO";
    }
    get closeButtonLabel() {
      return "MBYLL";
    }
    get closeButtonTooltip() {
      return "Mbyll";
    }
    get collapsedIconTapHint() {
      return "Zgjero";
    }
    get continueButtonLabel() {
      return "VAZHDO";
    }
    get copyButtonLabel() {
      return "Kopjo";
    }
    get cutButtonLabel() {
      return "Prit";
    }
    get dateHelpText() {
      return "dd.mm.yyyy";
    }
    get dateInputLabel() {
      return "Vendos datën";
    }
    get dateOutOfRangeLabel() {
      return "Jashtë rrezes.";
    }
    get datePickerHelpText() {
      return "ZGJIDH DATËN";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Data e mbarimit: $fullDate";
    }
    get dateRangeEndLabel() {
      return "Data e mbarimit";
    }
    get dateRangePickerHelpText() {
      return "ZGJIDH GAMËN";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Data e fillimit: $fullDate";
    }
    get dateRangeStartLabel() {
      return "Data e fillimit";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Fshi";
    }
    get dialModeButtonLabel() {
      return "Kalo te modaliteti i zgjedhësit të orës";
    }
    get dialogLabel() {
      return "Dialogu";
    }
    get drawerLabel() {
      return "Menyja e navigimit";
    }
    get expandedIconTapHint() {
      return "Palos";
    }
    get firstPageTooltip() {
      return "Faqja e parë";
    }
    get hideAccountsLabel() {
      return "Fshih llogaritë";
    }
    get inputDateModeButtonLabel() {
      return "Kalo te hyrja";
    }
    get inputTimeModeButtonLabel() {
      return "Kalo te modaliteti i hyrjes së tekstit";
    }
    get invalidDateFormatLabel() {
      return "Format i pavlefshëm.";
    }
    get invalidDateRangeLabel() {
      return "Gamë e pavlefshme.";
    }
    get invalidTimeLabel() {
      return "Fut një kohë të vlefshme";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Delete";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "Power Off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "Faqja e fundit";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 licencë";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licenca";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Licencat";
    }
    get menuBarMenuLabel() {
      return "Menyja e shiritit të menysë";
    }
    get modalBarrierDismissLabel() {
      return "Hiq";
    }
    get moreButtonTooltip() {
      return "Më shumë";
    }
    get nextMonthTooltip() {
      return "Muaji i ardhshëm";
    }
    get nextPageTooltip() {
      return "Faqja tjetër";
    }
    get okButtonLabel() {
      return "Në rregull";
    }
    get openAppDrawerTooltip() {
      return "Hap menynë e navigimit";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow nga $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow nga rreth $rowCount";
    }
    get pasteButtonLabel() {
      return "Ngjit";
    }
    get popupMenuLabel() {
      return "Menyja kërcyese";
    }
    get postMeridiemAbbreviation() {
      return "pasdite";
    }
    get previousMonthTooltip() {
      return "Muaji i mëparshëm";
    }
    get previousPageTooltip() {
      return "Faqja e mëparshme";
    }
    get refreshIndicatorSemanticLabel() {
      return "Rifresko";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 karakter i mbetur";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount karaktere të mbetura";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "Lëvize poshtë";
    }
    get reorderItemLeft() {
      return "Lëvize majtas";
    }
    get reorderItemRight() {
      return "Lëvize djathtas";
    }
    get reorderItemToEnd() {
      return "Lëvize në fund";
    }
    get reorderItemToStart() {
      return "Lëvize në fillim";
    }
    get reorderItemUp() {
      return "Lëvize lart";
    }
    get rowsPerPageTitle() {
      return "Rreshtat për faqe:";
    }
    get saveButtonLabel() {
      return "RUAJ";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Kërko";
    }
    get selectAllButtonLabel() {
      return "Zgjidh të gjitha";
    }
    get selectYearSemanticsLabel() {
      return "Zgjidh vitin";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "U zgjodh 1 artikull";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount artikuj u zgjodhën";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Shfaq llogaritë";
    }
    get showMenuTooltip() {
      return "Shfaq menynë";
    }
    get signedInLabel() {
      return "Je identifikuar";
    }
    get tabLabelRaw() {
      return "Skeda $tabIndex nga $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "ZGJIDH ORËN";
    }
    get timePickerHourLabel() {
      return "Ora";
    }
    get timePickerHourModeAnnouncement() {
      return "Zgjidh orët";
    }
    get timePickerInputHelpText() {
      return "VENDOS ORËN";
    }
    get timePickerMinuteLabel() {
      return "Minuta";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Zgjidh minutat";
    }
    get unspecifiedDate() {
      return "Data";
    }
    get unspecifiedDateRange() {
      return "Gama e datave";
    }
    get viewLicensesButtonLabel() {
      return "SHIKO LICENCAT";
    }
  };
  (generated_material_localizations.MaterialLocalizationSq.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "sq";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationSq.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationSq.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationSq);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationSq);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationSq, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationSq.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationSq, I[2]);
  generated_material_localizations.MaterialLocalizationSr = class MaterialLocalizationSr extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationSr.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "О апликацији $applicationName";
    }
    get alertDialogLabel() {
      return "Обавештење";
    }
    get anteMeridiemAbbreviation() {
      return "пре подне";
    }
    get backButtonTooltip() {
      return "Назад";
    }
    get calendarModeButtonLabel() {
      return "Пређите на календар";
    }
    get cancelButtonLabel() {
      return "ОТКАЖИ";
    }
    get closeButtonLabel() {
      return "ЗАТВОРИ";
    }
    get closeButtonTooltip() {
      return "Затворите";
    }
    get collapsedIconTapHint() {
      return "Прошири";
    }
    get continueButtonLabel() {
      return "НАСТАВИ";
    }
    get copyButtonLabel() {
      return "Копирај";
    }
    get cutButtonLabel() {
      return "Исеци";
    }
    get dateHelpText() {
      return "дд.мм.гггг.";
    }
    get dateInputLabel() {
      return "Унесите датум";
    }
    get dateOutOfRangeLabel() {
      return "Изван периода.";
    }
    get datePickerHelpText() {
      return "ИЗАБЕРИТЕ ДАТУМ";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Датум завршетка: $fullDate";
    }
    get dateRangeEndLabel() {
      return "Датум завршетка";
    }
    get dateRangePickerHelpText() {
      return "ИЗАБЕРИТЕ ПЕРИОД";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Датум почетка: $fullDate";
    }
    get dateRangeStartLabel() {
      return "Датум почетка";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Избришите";
    }
    get dialModeButtonLabel() {
      return "Пређите на режим бирача бројчаника";
    }
    get dialogLabel() {
      return "Дијалог";
    }
    get drawerLabel() {
      return "Мени за навигацију";
    }
    get expandedIconTapHint() {
      return "Скупи";
    }
    get firstPageTooltip() {
      return "Прва страница";
    }
    get hideAccountsLabel() {
      return "Сакриј налоге";
    }
    get inputDateModeButtonLabel() {
      return "Пређите на унос";
    }
    get inputTimeModeButtonLabel() {
      return "Пређите на режим уноса текста";
    }
    get invalidDateFormatLabel() {
      return "Формат је неважећи.";
    }
    get invalidDateRangeLabel() {
      return "Период је неважећи.";
    }
    get invalidTimeLabel() {
      return "Унесите важеће време";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Претходни канал";
    }
    get keyboardKeyChannelUp() {
      return "Следећи канал";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Дугме за укључивање";
    }
    get keyboardKeyPowerOff() {
      return "Дугме за искључивање";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Тастер за размак";
    }
    get lastPageTooltip() {
      return "Последња страница";
    }
    get licensesPackageDetailTextFew() {
      return "$licenseCount лиценце";
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 лиценца";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount лиценци";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Лиценце";
    }
    get menuBarMenuLabel() {
      return "Мени трака менија";
    }
    get modalBarrierDismissLabel() {
      return "Одбаци";
    }
    get moreButtonTooltip() {
      return "Још";
    }
    get nextMonthTooltip() {
      return "Следећи месец";
    }
    get nextPageTooltip() {
      return "Следећа страница";
    }
    get okButtonLabel() {
      return "Потврди";
    }
    get openAppDrawerTooltip() {
      return "Отворите мени за навигацију";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow – $lastRow oд $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow – $lastRow oд приближно $rowCount";
    }
    get pasteButtonLabel() {
      return "Налепи";
    }
    get popupMenuLabel() {
      return "Искачући мени";
    }
    get postMeridiemAbbreviation() {
      return "по подне";
    }
    get previousMonthTooltip() {
      return "Претходни месец";
    }
    get previousPageTooltip() {
      return "Претходна страница";
    }
    get refreshIndicatorSemanticLabel() {
      return "Освежи";
    }
    get remainingTextFieldCharacterCountFew() {
      return "Преостала су $remainingCount знака";
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "Преостао је 1 знак";
    }
    get remainingTextFieldCharacterCountOther() {
      return "Преостало је $remainingCount знакова";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Померите надоле";
    }
    get reorderItemLeft() {
      return "Померите улево";
    }
    get reorderItemRight() {
      return "Померите удесно";
    }
    get reorderItemToEnd() {
      return "Померите на крај";
    }
    get reorderItemToStart() {
      return "Померите на почетак";
    }
    get reorderItemUp() {
      return "Померите нагоре";
    }
    get rowsPerPageTitle() {
      return "Редова по страници:";
    }
    get saveButtonLabel() {
      return "САЧУВАЈ";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Претражите";
    }
    get selectAllButtonLabel() {
      return "Изабери све";
    }
    get selectYearSemanticsLabel() {
      return "Изаберите годину";
    }
    get selectedRowCountTitleFew() {
      return "Изабране су $selectedRowCount ставке";
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "Изабрана је 1 ставка";
    }
    get selectedRowCountTitleOther() {
      return "Изабрано је $selectedRowCount ставки";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Прикажи налоге";
    }
    get showMenuTooltip() {
      return "Прикажи мени";
    }
    get signedInLabel() {
      return "Пријављени сте";
    }
    get tabLabelRaw() {
      return "$tabIndex. картица од $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "ИЗАБЕРИТЕ ВРЕМЕ";
    }
    get timePickerHourLabel() {
      return "Сат";
    }
    get timePickerHourModeAnnouncement() {
      return "Изаберите сате";
    }
    get timePickerInputHelpText() {
      return "УНЕСИТЕ ВРЕМЕ";
    }
    get timePickerMinuteLabel() {
      return "Минут";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Изаберите минуте";
    }
    get unspecifiedDate() {
      return "Датум";
    }
    get unspecifiedDateRange() {
      return "Период";
    }
    get viewLicensesButtonLabel() {
      return "ПРИКАЖИ ЛИЦЕНЦЕ";
    }
  };
  (generated_material_localizations.MaterialLocalizationSr.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "sr";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationSr.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationSr.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationSr);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationSr);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationSr, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationSr.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationSr, I[2]);
  generated_material_localizations.MaterialLocalizationSrCyrl = class MaterialLocalizationSrCyrl extends generated_material_localizations.MaterialLocalizationSr {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationSrCyrl.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
  };
  (generated_material_localizations.MaterialLocalizationSrCyrl.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "sr_Cyrl";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationSrCyrl.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationSrCyrl.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationSrCyrl);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationSrCyrl);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationSrCyrl, I[2]);
  generated_material_localizations.MaterialLocalizationSrLatn = class MaterialLocalizationSrLatn extends generated_material_localizations.MaterialLocalizationSr {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationSrLatn.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "O aplikaciji $applicationName";
    }
    get alertDialogLabel() {
      return "Obaveštenje";
    }
    get anteMeridiemAbbreviation() {
      return "pre podne";
    }
    get backButtonTooltip() {
      return "Nazad";
    }
    get calendarModeButtonLabel() {
      return "Pređite na kalendar";
    }
    get cancelButtonLabel() {
      return "OTKAŽI";
    }
    get closeButtonLabel() {
      return "ZATVORI";
    }
    get closeButtonTooltip() {
      return "Zatvorite";
    }
    get collapsedIconTapHint() {
      return "Proširi";
    }
    get continueButtonLabel() {
      return "NASTAVI";
    }
    get copyButtonLabel() {
      return "Kopiraj";
    }
    get cutButtonLabel() {
      return "Iseci";
    }
    get dateHelpText() {
      return "dd.mm.gggg.";
    }
    get dateInputLabel() {
      return "Unesite datum";
    }
    get dateOutOfRangeLabel() {
      return "Izvan perioda.";
    }
    get datePickerHelpText() {
      return "IZABERITE DATUM";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Datum završetka: $fullDate";
    }
    get dateRangeEndLabel() {
      return "Datum završetka";
    }
    get dateRangePickerHelpText() {
      return "IZABERITE PERIOD";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Datum početka: $fullDate";
    }
    get dateRangeStartLabel() {
      return "Datum početka";
    }
    get deleteButtonTooltip() {
      return "Izbrišite";
    }
    get dialModeButtonLabel() {
      return "Pređite na režim birača brojčanika";
    }
    get dialogLabel() {
      return "Dijalog";
    }
    get drawerLabel() {
      return "Meni za navigaciju";
    }
    get expandedIconTapHint() {
      return "Skupi";
    }
    get firstPageTooltip() {
      return "Prva stranica";
    }
    get hideAccountsLabel() {
      return "Sakrij naloge";
    }
    get inputDateModeButtonLabel() {
      return "Pređite na unos";
    }
    get inputTimeModeButtonLabel() {
      return "Pređite na režim unosa teksta";
    }
    get invalidDateFormatLabel() {
      return "Format je nevažeći.";
    }
    get invalidDateRangeLabel() {
      return "Period je nevažeći.";
    }
    get invalidTimeLabel() {
      return "Unesite važeće vreme";
    }
    get keyboardKeyChannelDown() {
      return "Prethodni kanal";
    }
    get keyboardKeyChannelUp() {
      return "Sledeći kanal";
    }
    get keyboardKeyPower() {
      return "Dugme za uključivanje";
    }
    get keyboardKeyPowerOff() {
      return "Dugme za isključivanje";
    }
    get keyboardKeySpace() {
      return "Taster za razmak";
    }
    get lastPageTooltip() {
      return "Poslednja stranica";
    }
    get licensesPackageDetailTextFew() {
      return "$licenseCount licence";
    }
    get licensesPackageDetailTextOne() {
      return "1 licenca";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licenci";
    }
    get licensesPageTitle() {
      return "Licence";
    }
    get menuBarMenuLabel() {
      return "Meni traka menija";
    }
    get modalBarrierDismissLabel() {
      return "Odbaci";
    }
    get moreButtonTooltip() {
      return "Još";
    }
    get nextMonthTooltip() {
      return "Sledeći mesec";
    }
    get nextPageTooltip() {
      return "Sledeća stranica";
    }
    get okButtonLabel() {
      return "Potvrdi";
    }
    get openAppDrawerTooltip() {
      return "Otvorite meni za navigaciju";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow – $lastRow od $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow – $lastRow od približno $rowCount";
    }
    get pasteButtonLabel() {
      return "Nalepi";
    }
    get popupMenuLabel() {
      return "Iskačući meni";
    }
    get postMeridiemAbbreviation() {
      return "po podne";
    }
    get previousMonthTooltip() {
      return "Prethodni mesec";
    }
    get previousPageTooltip() {
      return "Prethodna stranica";
    }
    get refreshIndicatorSemanticLabel() {
      return "Osveži";
    }
    get remainingTextFieldCharacterCountFew() {
      return "Preostala su $remainingCount znaka";
    }
    get remainingTextFieldCharacterCountOne() {
      return "Preostao je 1 znak";
    }
    get remainingTextFieldCharacterCountOther() {
      return "Preostalo je $remainingCount znakova";
    }
    get reorderItemDown() {
      return "Pomerite nadole";
    }
    get reorderItemLeft() {
      return "Pomerite ulevo";
    }
    get reorderItemRight() {
      return "Pomerite udesno";
    }
    get reorderItemToEnd() {
      return "Pomerite na kraj";
    }
    get reorderItemToStart() {
      return "Pomerite na početak";
    }
    get reorderItemUp() {
      return "Pomerite nagore";
    }
    get rowsPerPageTitle() {
      return "Redova po stranici:";
    }
    get saveButtonLabel() {
      return "SAČUVAJ";
    }
    get searchFieldLabel() {
      return "Pretražite";
    }
    get selectAllButtonLabel() {
      return "Izaberi sve";
    }
    get selectYearSemanticsLabel() {
      return "Izaberite godinu";
    }
    get selectedRowCountTitleFew() {
      return "Izabrane su $selectedRowCount stavke";
    }
    get selectedRowCountTitleOne() {
      return "Izabrana je 1 stavka";
    }
    get selectedRowCountTitleOther() {
      return "Izabrano je $selectedRowCount stavki";
    }
    get showAccountsLabel() {
      return "Prikaži naloge";
    }
    get showMenuTooltip() {
      return "Prikaži meni";
    }
    get signedInLabel() {
      return "Prijavljeni ste";
    }
    get tabLabelRaw() {
      return "$tabIndex. kartica od $tabCount";
    }
    get timePickerDialHelpText() {
      return "IZABERITE VREME";
    }
    get timePickerHourLabel() {
      return "Sat";
    }
    get timePickerHourModeAnnouncement() {
      return "Izaberite sate";
    }
    get timePickerInputHelpText() {
      return "UNESITE VREME";
    }
    get timePickerMinuteLabel() {
      return "Minut";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Izaberite minute";
    }
    get unspecifiedDate() {
      return "Datum";
    }
    get unspecifiedDateRange() {
      return "Period";
    }
    get viewLicensesButtonLabel() {
      return "PRIKAŽI LICENCE";
    }
  };
  (generated_material_localizations.MaterialLocalizationSrLatn.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "sr_Latn";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationSrLatn.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationSrLatn.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationSrLatn);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationSrLatn);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationSrLatn, I[2]);
  generated_material_localizations.MaterialLocalizationSv = class MaterialLocalizationSv extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationSv.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Om $applicationName";
    }
    get alertDialogLabel() {
      return "Varning";
    }
    get anteMeridiemAbbreviation() {
      return "FM";
    }
    get backButtonTooltip() {
      return "Tillbaka";
    }
    get calendarModeButtonLabel() {
      return "Byt till kalender";
    }
    get cancelButtonLabel() {
      return "AVBRYT";
    }
    get closeButtonLabel() {
      return "STÄNG";
    }
    get closeButtonTooltip() {
      return "Stäng";
    }
    get collapsedIconTapHint() {
      return "Utöka";
    }
    get continueButtonLabel() {
      return "FORTSÄTT";
    }
    get copyButtonLabel() {
      return "Kopiera";
    }
    get cutButtonLabel() {
      return "Klipp ut";
    }
    get dateHelpText() {
      return "åååå-mm-dd";
    }
    get dateInputLabel() {
      return "Ange datum";
    }
    get dateOutOfRangeLabel() {
      return "Utanför intervallet.";
    }
    get datePickerHelpText() {
      return "VÄLJ DATUM";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Slutdatum $fullDate";
    }
    get dateRangeEndLabel() {
      return "Slutdatum";
    }
    get dateRangePickerHelpText() {
      return "VÄLJ INTERVALL";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Startdatum $fullDate";
    }
    get dateRangeStartLabel() {
      return "Startdatum";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Radera";
    }
    get dialModeButtonLabel() {
      return "Byt till läget urtavleväljare";
    }
    get dialogLabel() {
      return "Dialogruta";
    }
    get drawerLabel() {
      return "Navigeringsmeny";
    }
    get expandedIconTapHint() {
      return "Dölj";
    }
    get firstPageTooltip() {
      return "Första sidan";
    }
    get hideAccountsLabel() {
      return "Dölj konton";
    }
    get inputDateModeButtonLabel() {
      return "Byt till inmatning";
    }
    get inputTimeModeButtonLabel() {
      return "Byt till text som inmatningsläge";
    }
    get invalidDateFormatLabel() {
      return "Ogiltigt format.";
    }
    get invalidDateRangeLabel() {
      return "Ogiltigt intervall.";
    }
    get invalidTimeLabel() {
      return "Ange en giltig tid";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backsteg";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Byt kanal nedåt";
    }
    get keyboardKeyChannelUp() {
      return "Byt kanal uppåt";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Mata ut";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Hem";
    }
    get keyboardKeyInsert() {
      return "Infoga";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Kommando";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Strömbrytare";
    }
    get keyboardKeyPowerOff() {
      return "Stäng av";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Välj";
    }
    get keyboardKeySpace() {
      return "Blanksteg";
    }
    get lastPageTooltip() {
      return "Sista sidan";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 licens";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount licenser";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Licenser";
    }
    get menuBarMenuLabel() {
      return "Menyrad";
    }
    get modalBarrierDismissLabel() {
      return "Stäng";
    }
    get moreButtonTooltip() {
      return "Mer";
    }
    get nextMonthTooltip() {
      return "Nästa månad";
    }
    get nextPageTooltip() {
      return "Nästa sida";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Öppna navigeringsmenyn";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow av $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow av ungefär $rowCount";
    }
    get pasteButtonLabel() {
      return "Klistra in";
    }
    get popupMenuLabel() {
      return "Popup-meny";
    }
    get postMeridiemAbbreviation() {
      return "EM";
    }
    get previousMonthTooltip() {
      return "Föregående månad";
    }
    get previousPageTooltip() {
      return "Föregående sida";
    }
    get refreshIndicatorSemanticLabel() {
      return "Uppdatera";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 tecken kvar";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount tecken kvar";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Flytta nedåt";
    }
    get reorderItemLeft() {
      return "Flytta åt vänster";
    }
    get reorderItemRight() {
      return "Flytta åt höger";
    }
    get reorderItemToEnd() {
      return "Flytta till slutet";
    }
    get reorderItemToStart() {
      return "Flytta till början";
    }
    get reorderItemUp() {
      return "Flytta uppåt";
    }
    get rowsPerPageTitle() {
      return "Rader per sida:";
    }
    get saveButtonLabel() {
      return "SPARA";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Sök";
    }
    get selectAllButtonLabel() {
      return "Markera allt";
    }
    get selectYearSemanticsLabel() {
      return "Välj år";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 objekt har markerats";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount objekt har markerats";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Visa konton";
    }
    get showMenuTooltip() {
      return "Visa meny";
    }
    get signedInLabel() {
      return "Inloggad";
    }
    get tabLabelRaw() {
      return "Flik $tabIndex av $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "VÄLJ TID";
    }
    get timePickerHourLabel() {
      return "Timme";
    }
    get timePickerHourModeAnnouncement() {
      return "Välj timmar";
    }
    get timePickerInputHelpText() {
      return "ANGE TID";
    }
    get timePickerMinuteLabel() {
      return "Minut";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Välj minuter";
    }
    get unspecifiedDate() {
      return "Datum";
    }
    get unspecifiedDateRange() {
      return "Datumintervall";
    }
    get viewLicensesButtonLabel() {
      return "VISA LICENSER";
    }
  };
  (generated_material_localizations.MaterialLocalizationSv.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "sv";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationSv.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationSv.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationSv);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationSv);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationSv, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationSv.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationSv, I[2]);
  generated_material_localizations.MaterialLocalizationSw = class MaterialLocalizationSw extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationSw.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Kuhusu $applicationName";
    }
    get alertDialogLabel() {
      return "Arifa";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "Rudi Nyuma";
    }
    get calendarModeButtonLabel() {
      return "Badili utumie hali ya kalenda";
    }
    get cancelButtonLabel() {
      return "GHAIRI";
    }
    get closeButtonLabel() {
      return "FUNGA";
    }
    get closeButtonTooltip() {
      return "Funga";
    }
    get collapsedIconTapHint() {
      return "Panua";
    }
    get continueButtonLabel() {
      return "ENDELEA";
    }
    get copyButtonLabel() {
      return "Nakili";
    }
    get cutButtonLabel() {
      return "Kata";
    }
    get dateHelpText() {
      return "dd/mm/yyyy";
    }
    get dateInputLabel() {
      return "Weka Tarehe";
    }
    get dateOutOfRangeLabel() {
      return "Umechagua tarehe iliyo nje ya kipindi.";
    }
    get datePickerHelpText() {
      return "CHAGUA TAREHE";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Tarehe ya kumalizika $fullDate";
    }
    get dateRangeEndLabel() {
      return "Tarehe ya Kumalizika";
    }
    get dateRangePickerHelpText() {
      return "CHAGUA KIPINDI";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Tarehe ya kuanza $fullDate";
    }
    get dateRangeStartLabel() {
      return "Tarehe ya Kuanza";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "Futa";
    }
    get dialModeButtonLabel() {
      return "Badilisha ili utumie hali ya kiteuzi cha kupiga simu";
    }
    get dialogLabel() {
      return "Kidirisha";
    }
    get drawerLabel() {
      return "Menyu ya kusogeza";
    }
    get expandedIconTapHint() {
      return "Kunja";
    }
    get firstPageTooltip() {
      return "Ukurasa wa kwanza";
    }
    get hideAccountsLabel() {
      return "Ficha akaunti";
    }
    get inputDateModeButtonLabel() {
      return "Badili utumie hali ya kuweka maandishi";
    }
    get inputTimeModeButtonLabel() {
      return "Tumia programu ya kuingiza data ya maandishi";
    }
    get invalidDateFormatLabel() {
      return "Muundo si sahihi.";
    }
    get invalidDateRangeLabel() {
      return "Kipindi si sahihi.";
    }
    get invalidTimeLabel() {
      return "Weka saa sahihi";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "Pg-down";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "Power Off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "Ukurasa wa mwisho";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "Leseni moja";
    }
    get licensesPackageDetailTextOther() {
      return "Leseni $licenseCount";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Leseni";
    }
    get menuBarMenuLabel() {
      return "Menyu ya upau wa menyu";
    }
    get modalBarrierDismissLabel() {
      return "Ondoa";
    }
    get moreButtonTooltip() {
      return "Zaidi";
    }
    get nextMonthTooltip() {
      return "Mwezi ujao";
    }
    get nextPageTooltip() {
      return "Ukurasa unaofuata";
    }
    get okButtonLabel() {
      return "Sawa";
    }
    get openAppDrawerTooltip() {
      return "Fungua menyu ya kusogeza";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow hadi $lastRow kati ya $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow hadi $lastRow kati ya takriban $rowCount";
    }
    get pasteButtonLabel() {
      return "Bandika";
    }
    get popupMenuLabel() {
      return "Menyu ibukizi";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "Mwezi uliopita";
    }
    get previousPageTooltip() {
      return "Ukurasa uliotangulia";
    }
    get refreshIndicatorSemanticLabel() {
      return "Onyesha upya";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "Imesalia herufi 1";
    }
    get remainingTextFieldCharacterCountOther() {
      return "Zimesalia herufi $remainingCount";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "Hapana herufi zilizo baki";
    }
    get reorderItemDown() {
      return "Sogeza chini";
    }
    get reorderItemLeft() {
      return "Sogeza kushoto";
    }
    get reorderItemRight() {
      return "Sogeza kulia";
    }
    get reorderItemToEnd() {
      return "Sogeza hadi mwisho";
    }
    get reorderItemToStart() {
      return "Sogeza hadi mwanzo";
    }
    get reorderItemUp() {
      return "Sogeza juu";
    }
    get rowsPerPageTitle() {
      return "Safu mlalo kwa kila ukurasa:";
    }
    get saveButtonLabel() {
      return "HIFADHI";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Tafuta";
    }
    get selectAllButtonLabel() {
      return "Chagua vyote";
    }
    get selectYearSemanticsLabel() {
      return "Chagua mwaka";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "Umechagua kipengee 1";
    }
    get selectedRowCountTitleOther() {
      return "Umechagua vipengee $selectedRowCount";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return "Hamna kilicho chaguliwa";
    }
    get showAccountsLabel() {
      return "Onyesha akaunti";
    }
    get showMenuTooltip() {
      return "Onyesha menyu";
    }
    get signedInLabel() {
      return "Umeingia katika akaunti";
    }
    get tabLabelRaw() {
      return "Kichupo cha $tabIndex kati ya $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.h_colon_mm_space_a;
    }
    get timePickerDialHelpText() {
      return "CHAGUA SAA";
    }
    get timePickerHourLabel() {
      return "Saa";
    }
    get timePickerHourModeAnnouncement() {
      return "Chagua saa";
    }
    get timePickerInputHelpText() {
      return "WEKA SAA";
    }
    get timePickerMinuteLabel() {
      return "Dakika";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Chagua dakika";
    }
    get unspecifiedDate() {
      return "Tarehe";
    }
    get unspecifiedDateRange() {
      return "Kipindi";
    }
    get viewLicensesButtonLabel() {
      return "ANGALIA LESENI";
    }
  };
  (generated_material_localizations.MaterialLocalizationSw.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "sw";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationSw.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationSw.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationSw);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationSw);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationSw, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationSw.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationSw, I[2]);
  generated_material_localizations.MaterialLocalizationTa = class MaterialLocalizationTa extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationTa.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName பற்றி";
    }
    get alertDialogLabel() {
      return "விழிப்பூட்டல்";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "முந்தைய பக்கம்";
    }
    get calendarModeButtonLabel() {
      return "கேலெண்டருக்கு மாற்று";
    }
    get cancelButtonLabel() {
      return "ரத்துசெய்";
    }
    get closeButtonLabel() {
      return "மூடுக";
    }
    get closeButtonTooltip() {
      return "மூடுக";
    }
    get collapsedIconTapHint() {
      return "விரிக்கும்";
    }
    get continueButtonLabel() {
      return "தொடர்க";
    }
    get copyButtonLabel() {
      return "நகலெடு";
    }
    get cutButtonLabel() {
      return "வெட்டு";
    }
    get dateHelpText() {
      return "mm/dd/yyyy";
    }
    get dateInputLabel() {
      return "தேதியை உள்ளிடுக";
    }
    get dateOutOfRangeLabel() {
      return "வரம்பிற்கு வெளியே உள்ளது.";
    }
    get datePickerHelpText() {
      return "தேதியைத் தேர்ந்தெடுக்கவும்";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "முடிவுத் தேதி $fullDate";
    }
    get dateRangeEndLabel() {
      return "முடிவுத் தேதி";
    }
    get dateRangePickerHelpText() {
      return "வரம்பைத் தேர்ந்தெடுக்கவும்";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "தொடங்கும் தேதி $fullDate";
    }
    get dateRangeStartLabel() {
      return "தொடங்கும் தேதி";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "நீக்கு";
    }
    get dialModeButtonLabel() {
      return "டயல் தேர்வுக் கருவி பயன்முறைக்கு மாற்றும்";
    }
    get dialogLabel() {
      return "உரையாடல்";
    }
    get drawerLabel() {
      return "வழிசெலுத்தல் மெனு";
    }
    get expandedIconTapHint() {
      return "சுருக்கும்";
    }
    get firstPageTooltip() {
      return "முதல் பக்கத்திற்குச் செல்லும்";
    }
    get hideAccountsLabel() {
      return "கணக்குகளை மறைக்கும்";
    }
    get inputDateModeButtonLabel() {
      return "உள்ளீட்டுக்கு மாற்று";
    }
    get inputTimeModeButtonLabel() {
      return "உரை உள்ளீட்டு முறைக்கு மாற்றும்";
    }
    get invalidDateFormatLabel() {
      return "தவறான வடிவம்.";
    }
    get invalidDateRangeLabel() {
      return "தவறான வரம்பு.";
    }
    get invalidTimeLabel() {
      return "சரியான நேரத்தை உள்ளிடவும்";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "Power Off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "கடைசிப் பக்கத்திற்குச் செல்லும்";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 உரிமம்";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount உரிமங்கள்";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "உரிமங்கள்";
    }
    get menuBarMenuLabel() {
      return "மெனு பட்டியின் மெனு";
    }
    get modalBarrierDismissLabel() {
      return "நிராகரிக்கும்";
    }
    get moreButtonTooltip() {
      return "மேலும்";
    }
    get nextMonthTooltip() {
      return "அடுத்த மாதம்";
    }
    get nextPageTooltip() {
      return "அடுத்த பக்கம்";
    }
    get okButtonLabel() {
      return "சரி";
    }
    get openAppDrawerTooltip() {
      return "வழிசெலுத்தல் மெனுவைத் திற";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow / $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow / $rowCount";
    }
    get pasteButtonLabel() {
      return "ஒட்டு";
    }
    get popupMenuLabel() {
      return "பாப்-அப் மெனு";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "முந்தைய மாதம்";
    }
    get previousPageTooltip() {
      return "முந்தைய பக்கம்";
    }
    get refreshIndicatorSemanticLabel() {
      return "ரெஃப்ரெஷ் செய்யும்";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 எழுத்து மீதமுள்ளது";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount எழுத்துகள் மீதமுள்ளன";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "எழுத்துக்கள் எதுவும் இல்லை";
    }
    get reorderItemDown() {
      return "கீழே நகர்த்தவும்";
    }
    get reorderItemLeft() {
      return "இடப்புறம் நகர்த்தவும்";
    }
    get reorderItemRight() {
      return "வலப்புறம் நகர்த்தவும்";
    }
    get reorderItemToEnd() {
      return "இறுதிக்கு நகர்த்தவும்";
    }
    get reorderItemToStart() {
      return "தொடக்கத்திற்கு நகர்த்தவும்";
    }
    get reorderItemUp() {
      return "மேலே நகர்த்தவும்";
    }
    get rowsPerPageTitle() {
      return "ஒரு பக்கத்திற்கான வரிசைகள்:";
    }
    get saveButtonLabel() {
      return "சேமி";
    }
    get scriptCategory() {
      return typography.ScriptCategory.dense;
    }
    get searchFieldLabel() {
      return "தேடல்";
    }
    get selectAllButtonLabel() {
      return "அனைத்தையும் தேர்ந்தெடு";
    }
    get selectYearSemanticsLabel() {
      return "ஆண்டைத் தேர்ந்தெடுக்கவும்";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 வரிசை தேர்ந்தெடுக்கப்பட்டது";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount வரிசைகள் தேர்ந்தெடுக்கப்பட்டன";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return "எந்த வரிசையும் தேர்ந்தெடுக்கவில்லை";
    }
    get showAccountsLabel() {
      return "கணக்குகளைக் காட்டும்";
    }
    get showMenuTooltip() {
      return "மெனுவைக் காட்டு";
    }
    get signedInLabel() {
      return "உள்நுழைந்துள்ளீர்கள்";
    }
    get tabLabelRaw() {
      return "தாவல் $tabIndex / $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.a_space_h_colon_mm;
    }
    get timePickerDialHelpText() {
      return "நேரத்தைத் தேர்வுசெய்க";
    }
    get timePickerHourLabel() {
      return "மணிநேரம்";
    }
    get timePickerHourModeAnnouncement() {
      return "மணிநேரத்தைத் தேர்ந்தெடுக்கவும்";
    }
    get timePickerInputHelpText() {
      return "நேரத்தை உள்ளிடுக";
    }
    get timePickerMinuteLabel() {
      return "நிமிடம்";
    }
    get timePickerMinuteModeAnnouncement() {
      return "நிமிடங்களைத் தேர்ந்தெடுக்கவும்";
    }
    get unspecifiedDate() {
      return "தேதி";
    }
    get unspecifiedDateRange() {
      return "தேதி வரம்பு";
    }
    get viewLicensesButtonLabel() {
      return "உரிமங்களைக் காட்டு";
    }
  };
  (generated_material_localizations.MaterialLocalizationTa.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "ta";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationTa.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationTa.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationTa);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationTa);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationTa, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationTa.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationTa, I[2]);
  generated_material_localizations.MaterialLocalizationTe = class MaterialLocalizationTe extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationTe.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName గురించి";
    }
    get alertDialogLabel() {
      return "అలర్ట్";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "వెనుకకు";
    }
    get calendarModeButtonLabel() {
      return "క్యాలెండర్‌కు మారండి";
    }
    get cancelButtonLabel() {
      return "రద్దు చేయి";
    }
    get closeButtonLabel() {
      return "మూసివేయి";
    }
    get closeButtonTooltip() {
      return "మూసివేయి";
    }
    get collapsedIconTapHint() {
      return "విస్తరించు";
    }
    get continueButtonLabel() {
      return "కొనసాగించు";
    }
    get copyButtonLabel() {
      return "కాపీ చేయి";
    }
    get cutButtonLabel() {
      return "కత్తిరించు";
    }
    get dateHelpText() {
      return "mm/dd/yyyy";
    }
    get dateInputLabel() {
      return "తేదీని ఎంటర్ చేయండి";
    }
    get dateOutOfRangeLabel() {
      return "పరిధి వెలుపల ఉంది.";
    }
    get datePickerHelpText() {
      return "తేదీని ఎంచుకోండి";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "ముగింపు తేదీ $fullDate";
    }
    get dateRangeEndLabel() {
      return "ముగింపు తేదీ";
    }
    get dateRangePickerHelpText() {
      return "పరిధిని ఎంచుకోండి";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "ప్రారంభ తేదీ $fullDate";
    }
    get dateRangeStartLabel() {
      return "ప్రారంభ తేదీ";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "తొలగించు";
    }
    get dialModeButtonLabel() {
      return "డయల్ పికర్ మోడ్‌కు మారుస్తుంది";
    }
    get dialogLabel() {
      return "డైలాగ్";
    }
    get drawerLabel() {
      return "నావిగేషన్ మెనూ";
    }
    get expandedIconTapHint() {
      return "కుదించు";
    }
    get firstPageTooltip() {
      return "మొదటి పేజీ";
    }
    get hideAccountsLabel() {
      return "ఖాతాలను దాచు";
    }
    get inputDateModeButtonLabel() {
      return "ఇన్‌పుట్‌కు మారండి";
    }
    get inputTimeModeButtonLabel() {
      return "టెక్స్ట్ ఇన్‌పుట్ మోడ్‌కు మారుస్తుంది";
    }
    get invalidDateFormatLabel() {
      return "ఫార్మాట్ చెల్లదు.";
    }
    get invalidDateRangeLabel() {
      return "పరిధి చెల్లదు.";
    }
    get invalidTimeLabel() {
      return "చెల్లుబాటు అయ్యే సమయాన్ని ఎంటర్ చేయండి";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "Power Off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "చివరి పేజీ";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 లైసెన్స్";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount లైసెన్స్‌లు";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "లైసెన్స్‌లు";
    }
    get menuBarMenuLabel() {
      return "మెనూ బార్ మెనూ";
    }
    get modalBarrierDismissLabel() {
      return "విస్మరించు";
    }
    get moreButtonTooltip() {
      return "మరిన్ని";
    }
    get nextMonthTooltip() {
      return "తర్వాత నెల";
    }
    get nextPageTooltip() {
      return "తర్వాత పేజీ";
    }
    get okButtonLabel() {
      return "సరే";
    }
    get openAppDrawerTooltip() {
      return "నావిగేషన్ మెనూను తెరువు";
    }
    get pageRowsInfoTitleRaw() {
      return "$rowCountలో $firstRow - $lastRow";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$rowCountలో $firstRow–$lastRow";
    }
    get pasteButtonLabel() {
      return "అతికించు";
    }
    get popupMenuLabel() {
      return "పాప్‌అప్ మెనూ";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "మునుపటి నెల";
    }
    get previousPageTooltip() {
      return "మునుపటి పేజీ";
    }
    get refreshIndicatorSemanticLabel() {
      return "రిఫ్రెష్ చేయి";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 అక్షరం మిగిలి ఉంది";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount అక్షరాలు మిగిలి ఉన్నాయి";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "కిందికు జరుపు";
    }
    get reorderItemLeft() {
      return "ఎడమవైపుగా జరపండి";
    }
    get reorderItemRight() {
      return "కుడివైపుగా జరపండి";
    }
    get reorderItemToEnd() {
      return "చివరకు తరలించండి";
    }
    get reorderItemToStart() {
      return "ప్రారంభానికి తరలించండి";
    }
    get reorderItemUp() {
      return "పైకి జరపండి";
    }
    get rowsPerPageTitle() {
      return "పేజీకి ఉండే అడ్డు వరుసలు:";
    }
    get saveButtonLabel() {
      return "సేవ్ చేయి";
    }
    get scriptCategory() {
      return typography.ScriptCategory.tall;
    }
    get searchFieldLabel() {
      return "వెతుకు";
    }
    get selectAllButtonLabel() {
      return "అన్నింటినీ ఎంచుకోండి";
    }
    get selectYearSemanticsLabel() {
      return "సంవత్సరాన్ని ఎంచుకోండి";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 అంశం ఎంచుకోబడింది";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount అంశాలు ఎంచుకోబడ్డాయి";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "ఖాతాలను చూపు";
    }
    get showMenuTooltip() {
      return "మెనూను చూపు";
    }
    get signedInLabel() {
      return "సైన్ ఇన్ చేశారు";
    }
    get tabLabelRaw() {
      return "$tabCountలో $tabIndexవ ట్యాబ్";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "సమయాన్ని ఎంచుకోండి";
    }
    get timePickerHourLabel() {
      return "గంట";
    }
    get timePickerHourModeAnnouncement() {
      return "గంటలను ఎంచుకోండి";
    }
    get timePickerInputHelpText() {
      return "సమయాన్ని ఎంటర్ చేయండి";
    }
    get timePickerMinuteLabel() {
      return "నిమిషం";
    }
    get timePickerMinuteModeAnnouncement() {
      return "నిమిషాలను ఎంచుకోండి";
    }
    get unspecifiedDate() {
      return "తేదీ";
    }
    get unspecifiedDateRange() {
      return "తేదీల పరిధి";
    }
    get viewLicensesButtonLabel() {
      return "లైసెన్స్‌లను చూడండి";
    }
  };
  (generated_material_localizations.MaterialLocalizationTe.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "te";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationTe.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationTe.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationTe);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationTe);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationTe, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationTe.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationTe, I[2]);
  generated_material_localizations.MaterialLocalizationTh = class MaterialLocalizationTh extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationTh.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "เกี่ยวกับ $applicationName";
    }
    get alertDialogLabel() {
      return "การแจ้งเตือน";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "กลับ";
    }
    get calendarModeButtonLabel() {
      return "เปลี่ยนเป็นปฏิทิน";
    }
    get cancelButtonLabel() {
      return "ยกเลิก";
    }
    get closeButtonLabel() {
      return "ปิด";
    }
    get closeButtonTooltip() {
      return "ปิด";
    }
    get collapsedIconTapHint() {
      return "ขยาย";
    }
    get continueButtonLabel() {
      return "ต่อไป";
    }
    get copyButtonLabel() {
      return "คัดลอก";
    }
    get cutButtonLabel() {
      return "ตัด";
    }
    get dateHelpText() {
      return "ดด/วว/ปปปป";
    }
    get dateInputLabel() {
      return "ป้อนวันที่";
    }
    get dateOutOfRangeLabel() {
      return "ไม่อยู่ในช่วง";
    }
    get datePickerHelpText() {
      return "เลือกวันที่";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "วันที่สิ้นสุด $fullDate";
    }
    get dateRangeEndLabel() {
      return "วันที่สิ้นสุด";
    }
    get dateRangePickerHelpText() {
      return "เลือกช่วง";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "วันที่เริ่มต้น $fullDate";
    }
    get dateRangeStartLabel() {
      return "วันที่เริ่มต้น";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "ลบ";
    }
    get dialModeButtonLabel() {
      return "สลับไปใช้โหมดเครื่องมือเลือกแบบหมุน";
    }
    get dialogLabel() {
      return "กล่องโต้ตอบ";
    }
    get drawerLabel() {
      return "เมนูการนำทาง";
    }
    get expandedIconTapHint() {
      return "ยุบ";
    }
    get firstPageTooltip() {
      return "หน้าแรก";
    }
    get hideAccountsLabel() {
      return "ซ่อนบัญชี";
    }
    get inputDateModeButtonLabel() {
      return "เปลี่ยนเป็นโหมดป้อนข้อความ";
    }
    get inputTimeModeButtonLabel() {
      return "สลับไปใช้โหมดป้อนข้อมูลข้อความ";
    }
    get invalidDateFormatLabel() {
      return "รูปแบบไม่ถูกต้อง";
    }
    get invalidDateRangeLabel() {
      return "ช่วงไม่ถูกต้อง";
    }
    get invalidTimeLabel() {
      return "ป้อนเวลาที่ถูกต้อง";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "เลข 0";
    }
    get keyboardKeyNumpad1() {
      return "เลข 1";
    }
    get keyboardKeyNumpad2() {
      return "เลข 2";
    }
    get keyboardKeyNumpad3() {
      return "เลข 3";
    }
    get keyboardKeyNumpad4() {
      return "เลข 4";
    }
    get keyboardKeyNumpad5() {
      return "เลข 5";
    }
    get keyboardKeyNumpad6() {
      return "เลข 6";
    }
    get keyboardKeyNumpad7() {
      return "เลข 7";
    }
    get keyboardKeyNumpad8() {
      return "เลข 8";
    }
    get keyboardKeyNumpad9() {
      return "เลข 9";
    }
    get keyboardKeyNumpadAdd() {
      return "เลข +";
    }
    get keyboardKeyNumpadComma() {
      return "เลข ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "เลข .";
    }
    get keyboardKeyNumpadDivide() {
      return "เลข /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "เลข =";
    }
    get keyboardKeyNumpadMultiply() {
      return "เลข *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "เลข (";
    }
    get keyboardKeyNumpadParenRight() {
      return "เลข )";
    }
    get keyboardKeyNumpadSubtract() {
      return "เลข -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "เปิด/ปิด";
    }
    get keyboardKeyPowerOff() {
      return "ปิดเครื่อง";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "หน้าสุดท้าย";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "ใบอนุญาต 1 ใบ";
    }
    get licensesPackageDetailTextOther() {
      return "ใบอนุญาต $licenseCount ใบ";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "ใบอนุญาต";
    }
    get menuBarMenuLabel() {
      return "เมนูในแถบเมนู";
    }
    get modalBarrierDismissLabel() {
      return "ปิด";
    }
    get moreButtonTooltip() {
      return "เพิ่มเติม";
    }
    get nextMonthTooltip() {
      return "เดือนหน้า";
    }
    get nextPageTooltip() {
      return "หน้าถัดไป";
    }
    get okButtonLabel() {
      return "ตกลง";
    }
    get openAppDrawerTooltip() {
      return "เปิดเมนูการนำทาง";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow-$lastRow จาก $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow จากประมาณ $rowCount";
    }
    get pasteButtonLabel() {
      return "วาง";
    }
    get popupMenuLabel() {
      return "เมนูป๊อปอัป";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "เดือนที่แล้ว";
    }
    get previousPageTooltip() {
      return "หน้าก่อน";
    }
    get refreshIndicatorSemanticLabel() {
      return "รีเฟรช";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "เหลือ 1 อักขระ";
    }
    get remainingTextFieldCharacterCountOther() {
      return "เหลือ $remainingCount อักขระ";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "ย้ายลง";
    }
    get reorderItemLeft() {
      return "ย้ายไปทางซ้าย";
    }
    get reorderItemRight() {
      return "ย้ายไปทางขวา";
    }
    get reorderItemToEnd() {
      return "ย้ายไปท้ายรายการ";
    }
    get reorderItemToStart() {
      return "ย้ายไปต้นรายการ";
    }
    get reorderItemUp() {
      return "ย้ายขึ้น";
    }
    get rowsPerPageTitle() {
      return "แถวต่อหน้า:";
    }
    get saveButtonLabel() {
      return "บันทึก";
    }
    get scriptCategory() {
      return typography.ScriptCategory.tall;
    }
    get searchFieldLabel() {
      return "ค้นหา";
    }
    get selectAllButtonLabel() {
      return "เลือกทั้งหมด";
    }
    get selectYearSemanticsLabel() {
      return "เลือกปี";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "เลือกแล้ว 1 รายการ";
    }
    get selectedRowCountTitleOther() {
      return "เลือกแล้ว $selectedRowCount รายการ";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "แสดงบัญชี";
    }
    get showMenuTooltip() {
      return "แสดงเมนู";
    }
    get signedInLabel() {
      return "ลงชื่อเข้าใช้";
    }
    get tabLabelRaw() {
      return "แท็บที่ $tabIndex จาก $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.a_space_h_colon_mm;
    }
    get timePickerDialHelpText() {
      return "เลือกเวลา";
    }
    get timePickerHourLabel() {
      return "ชั่วโมง";
    }
    get timePickerHourModeAnnouncement() {
      return "เลือกชั่วโมง";
    }
    get timePickerInputHelpText() {
      return "ป้อนเวลา";
    }
    get timePickerMinuteLabel() {
      return "นาที";
    }
    get timePickerMinuteModeAnnouncement() {
      return "เลือกนาที";
    }
    get unspecifiedDate() {
      return "วันที่";
    }
    get unspecifiedDateRange() {
      return "ช่วงวันที่";
    }
    get viewLicensesButtonLabel() {
      return "ดูใบอนุญาต";
    }
  };
  (generated_material_localizations.MaterialLocalizationTh.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "th";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationTh.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationTh.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationTh);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationTh);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationTh, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationTh.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationTh, I[2]);
  generated_material_localizations.MaterialLocalizationTl = class MaterialLocalizationTl extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationTl.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Tungkol sa $applicationName";
    }
    get alertDialogLabel() {
      return "Alerto";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "Bumalik";
    }
    get calendarModeButtonLabel() {
      return "Lumipat sa kalendaryo";
    }
    get cancelButtonLabel() {
      return "KANSELAHIN";
    }
    get closeButtonLabel() {
      return "ISARA";
    }
    get closeButtonTooltip() {
      return "Isara";
    }
    get collapsedIconTapHint() {
      return "I-expand";
    }
    get continueButtonLabel() {
      return "MAGPATULOY";
    }
    get copyButtonLabel() {
      return "Kopyahin";
    }
    get cutButtonLabel() {
      return "I-cut";
    }
    get dateHelpText() {
      return "mm/dd/yyyy";
    }
    get dateInputLabel() {
      return "Ilagay ang Petsa";
    }
    get dateOutOfRangeLabel() {
      return "Wala sa hanay.";
    }
    get datePickerHelpText() {
      return "PUMILI NG PETSA";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Petsa ng pagtatapos $fullDate";
    }
    get dateRangeEndLabel() {
      return "Petsa ng Pagtatapos";
    }
    get dateRangePickerHelpText() {
      return "PUMILI NG HANAY";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Petsa ng pagsisimula $fullDate";
    }
    get dateRangeStartLabel() {
      return "Petsa ng Pagsisimula";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "I-delete";
    }
    get dialModeButtonLabel() {
      return "Lumipat sa dial picker mode";
    }
    get dialogLabel() {
      return "Dialog";
    }
    get drawerLabel() {
      return "Menu ng navigation";
    }
    get expandedIconTapHint() {
      return "I-collapse";
    }
    get firstPageTooltip() {
      return "Unang page";
    }
    get hideAccountsLabel() {
      return "Itago ang mga account";
    }
    get inputDateModeButtonLabel() {
      return "Lumipat sa input";
    }
    get inputTimeModeButtonLabel() {
      return "Lumipat sa text input mode";
    }
    get invalidDateFormatLabel() {
      return "Invalid ang format.";
    }
    get invalidDateRangeLabel() {
      return "Invalid ang hanay.";
    }
    get invalidTimeLabel() {
      return "Maglagay ng valid na oras";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "I-off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Piliin";
    }
    get keyboardKeySpace() {
      return "Puwang";
    }
    get lastPageTooltip() {
      return "Huling page";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 lisensya";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount na lisensya";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Mga Lisensya";
    }
    get menuBarMenuLabel() {
      return "Menu sa menu bar";
    }
    get modalBarrierDismissLabel() {
      return "I-dismiss";
    }
    get moreButtonTooltip() {
      return "Higit Pa";
    }
    get nextMonthTooltip() {
      return "Susunod na buwan";
    }
    get nextPageTooltip() {
      return "Susunod na page";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Buksan ang menu ng navigation";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow ng $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow ng humigit kumulang $rowCount";
    }
    get pasteButtonLabel() {
      return "I-paste";
    }
    get popupMenuLabel() {
      return "Popup na menu";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "Nakaraang buwan";
    }
    get previousPageTooltip() {
      return "Nakaraang page";
    }
    get refreshIndicatorSemanticLabel() {
      return "Nagre-refresh";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 character ang natitira";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount na character ang natitira";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Ilipat pababa";
    }
    get reorderItemLeft() {
      return "Ilipat pakaliwa";
    }
    get reorderItemRight() {
      return "Ilipat pakanan";
    }
    get reorderItemToEnd() {
      return "Ilipat sa dulo";
    }
    get reorderItemToStart() {
      return "Ilipat sa simula";
    }
    get reorderItemUp() {
      return "Ilipat pataas";
    }
    get rowsPerPageTitle() {
      return "Mga row bawat page:";
    }
    get saveButtonLabel() {
      return "I-SAVE";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Maghanap";
    }
    get selectAllButtonLabel() {
      return "Piliin lahat";
    }
    get selectYearSemanticsLabel() {
      return "Pumili ng taon";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 item ang napili";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount na item ang napili";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Ipakita ang mga account";
    }
    get showMenuTooltip() {
      return "Ipakita ang menu";
    }
    get signedInLabel() {
      return "Naka-sign in";
    }
    get tabLabelRaw() {
      return "Tab $tabIndex ng $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "PUMILI NG ORAS";
    }
    get timePickerHourLabel() {
      return "Oras";
    }
    get timePickerHourModeAnnouncement() {
      return "Pumili ng mga oras";
    }
    get timePickerInputHelpText() {
      return "MAGLAGAY NG ORAS";
    }
    get timePickerMinuteLabel() {
      return "Minuto";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Pumili ng mga minuto";
    }
    get unspecifiedDate() {
      return "Petsa";
    }
    get unspecifiedDateRange() {
      return "Hanay ng Petsa";
    }
    get viewLicensesButtonLabel() {
      return "TINGNAN ANG MGA LISENSYA";
    }
  };
  (generated_material_localizations.MaterialLocalizationTl.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "tl";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationTl.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationTl.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationTl);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationTl);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationTl, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationTl.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationTl, I[2]);
  generated_material_localizations.MaterialLocalizationTr = class MaterialLocalizationTr extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationTr.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName Hakkında";
    }
    get alertDialogLabel() {
      return "Uyarı";
    }
    get anteMeridiemAbbreviation() {
      return "ÖÖ";
    }
    get backButtonTooltip() {
      return "Geri";
    }
    get calendarModeButtonLabel() {
      return "Takvime geç";
    }
    get cancelButtonLabel() {
      return "İPTAL";
    }
    get closeButtonLabel() {
      return "KAPAT";
    }
    get closeButtonTooltip() {
      return "Kapat";
    }
    get collapsedIconTapHint() {
      return "Genişlet";
    }
    get continueButtonLabel() {
      return "DEVAM";
    }
    get copyButtonLabel() {
      return "Kopyala";
    }
    get cutButtonLabel() {
      return "Kes";
    }
    get dateHelpText() {
      return "gg.aa.yyyy";
    }
    get dateInputLabel() {
      return "Tarih Girin";
    }
    get dateOutOfRangeLabel() {
      return "Kapsama alanı dışında.";
    }
    get datePickerHelpText() {
      return "TARİH SEÇİN";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Bitiş tarihi $fullDate";
    }
    get dateRangeEndLabel() {
      return "Bitiş Tarihi";
    }
    get dateRangePickerHelpText() {
      return "ARALIK SEÇİN";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Başlangıç tarihi $fullDate";
    }
    get dateRangeStartLabel() {
      return "Başlangıç Tarihi";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Sil";
    }
    get dialModeButtonLabel() {
      return "Dairesel seçici moduna geç";
    }
    get dialogLabel() {
      return "İletişim kutusu";
    }
    get drawerLabel() {
      return "Gezinme menüsü";
    }
    get expandedIconTapHint() {
      return "Daralt";
    }
    get firstPageTooltip() {
      return "İlk sayfa";
    }
    get hideAccountsLabel() {
      return "Hesapları gizle";
    }
    get inputDateModeButtonLabel() {
      return "Girişe geç";
    }
    get inputTimeModeButtonLabel() {
      return "Metin giriş moduna geç";
    }
    get invalidDateFormatLabel() {
      return "Geçersiz biçim.";
    }
    get invalidDateRangeLabel() {
      return "Geçersiz aralık.";
    }
    get invalidTimeLabel() {
      return "Geçerli bir saat girin";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Geri Tuşu";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Kanal Aşağı";
    }
    get keyboardKeyChannelUp() {
      return "Kanal Yukarı";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Çıkar";
    }
    get keyboardKeyEnd() {
      return "Son";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Komut";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Güç";
    }
    get keyboardKeyPowerOff() {
      return "Kapat";
    }
    get keyboardKeyPrintScreen() {
      return "Ekranı Yazdır";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Seç";
    }
    get keyboardKeySpace() {
      return "Boşluk";
    }
    get lastPageTooltip() {
      return "Son sayfa";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 lisans";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount lisans";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Lisanslar";
    }
    get menuBarMenuLabel() {
      return "Menü çubuğu menüsü";
    }
    get modalBarrierDismissLabel() {
      return "Kapat";
    }
    get moreButtonTooltip() {
      return "Diğer";
    }
    get nextMonthTooltip() {
      return "Gelecek ay";
    }
    get nextPageTooltip() {
      return "Sonraki sayfa";
    }
    get okButtonLabel() {
      return "Tamam";
    }
    get openAppDrawerTooltip() {
      return "Gezinme menüsünü aç";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow-$lastRow / $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow-$lastRow / $rowCount";
    }
    get pasteButtonLabel() {
      return "Yapıştır";
    }
    get popupMenuLabel() {
      return "Popup menü";
    }
    get postMeridiemAbbreviation() {
      return "ÖS";
    }
    get previousMonthTooltip() {
      return "Önceki ay";
    }
    get previousPageTooltip() {
      return "Önceki sayfa";
    }
    get refreshIndicatorSemanticLabel() {
      return "Yenile";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 karakter kaldı";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount karakter kaldı";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Aşağı taşı";
    }
    get reorderItemLeft() {
      return "Sola taşı";
    }
    get reorderItemRight() {
      return "Sağa taşı";
    }
    get reorderItemToEnd() {
      return "Sona taşı";
    }
    get reorderItemToStart() {
      return "Başa taşı";
    }
    get reorderItemUp() {
      return "Yukarı taşı";
    }
    get rowsPerPageTitle() {
      return "Sayfa başına satır sayısı:";
    }
    get saveButtonLabel() {
      return "KAYDET";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Ara";
    }
    get selectAllButtonLabel() {
      return "Tümünü seç";
    }
    get selectYearSemanticsLabel() {
      return "Yılı seçin";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 öğe seçildi";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount öğe seçildi";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Hesapları göster";
    }
    get showMenuTooltip() {
      return "Menüyü göster";
    }
    get signedInLabel() {
      return "Oturum açıldı";
    }
    get tabLabelRaw() {
      return "Sekme $tabIndex / $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "SAATİ SEÇİN";
    }
    get timePickerHourLabel() {
      return "Saat";
    }
    get timePickerHourModeAnnouncement() {
      return "Saati seçin";
    }
    get timePickerInputHelpText() {
      return "SAATİ GİRİN";
    }
    get timePickerMinuteLabel() {
      return "Dakika";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Dakikayı seçin";
    }
    get unspecifiedDate() {
      return "Tarih";
    }
    get unspecifiedDateRange() {
      return "Tarih Aralığı";
    }
    get viewLicensesButtonLabel() {
      return "LİSANSLARI GÖSTER";
    }
  };
  (generated_material_localizations.MaterialLocalizationTr.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "tr";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationTr.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationTr.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationTr);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationTr);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationTr, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationTr.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationTr, I[2]);
  generated_material_localizations.MaterialLocalizationUk = class MaterialLocalizationUk extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationUk.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Про додаток $applicationName";
    }
    get alertDialogLabel() {
      return "Сповіщення";
    }
    get anteMeridiemAbbreviation() {
      return "дп";
    }
    get backButtonTooltip() {
      return "Назад";
    }
    get calendarModeButtonLabel() {
      return "Перейти до календаря";
    }
    get cancelButtonLabel() {
      return "СКАСУВАТИ";
    }
    get closeButtonLabel() {
      return "ЗАКРИТИ";
    }
    get closeButtonTooltip() {
      return "Закрити";
    }
    get collapsedIconTapHint() {
      return "Розгорнути";
    }
    get continueButtonLabel() {
      return "ПРОДОВЖИТИ";
    }
    get copyButtonLabel() {
      return "Копіювати";
    }
    get cutButtonLabel() {
      return "Вирізати";
    }
    get dateHelpText() {
      return "дд.мм.рррр";
    }
    get dateInputLabel() {
      return "Введіть дату";
    }
    get dateOutOfRangeLabel() {
      return "За межами діапазону.";
    }
    get datePickerHelpText() {
      return "ВИБРАТИ ДАТУ";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Дата завершення $fullDate";
    }
    get dateRangeEndLabel() {
      return "Дата завершення";
    }
    get dateRangePickerHelpText() {
      return "ВИБРАТИ ДІАПАЗОН";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Дата початку $fullDate";
    }
    get dateRangeStartLabel() {
      return "Дата початку";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Видалити";
    }
    get dialModeButtonLabel() {
      return "Перейти в режим вибору на циферблаті";
    }
    get dialogLabel() {
      return "Вікно";
    }
    get drawerLabel() {
      return "Меню навігації";
    }
    get expandedIconTapHint() {
      return "Згорнути";
    }
    get firstPageTooltip() {
      return "Перша сторінка";
    }
    get hideAccountsLabel() {
      return "Сховати облікові записи";
    }
    get inputDateModeButtonLabel() {
      return "Ввести вручну";
    }
    get inputTimeModeButtonLabel() {
      return "Перейти в режим введення цифр";
    }
    get invalidDateFormatLabel() {
      return "Недійсний формат.";
    }
    get invalidDateRangeLabel() {
      return "Недійсний діапазон.";
    }
    get invalidTimeLabel() {
      return "Введіть дійсний час";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Канал униз";
    }
    get keyboardKeyChannelUp() {
      return "Канал угору";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Вийняти";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Кнопка живлення";
    }
    get keyboardKeyPowerOff() {
      return "Вимкнути живлення";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Пробіл";
    }
    get lastPageTooltip() {
      return "Остання сторінка";
    }
    get licensesPackageDetailTextFew() {
      return "$licenseCount ліцензії";
    }
    get licensesPackageDetailTextMany() {
      return "$licenseCount ліцензій";
    }
    get licensesPackageDetailTextOne() {
      return "1 ліцензія";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount ліцензії";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Ліцензії";
    }
    get menuBarMenuLabel() {
      return "Панель меню";
    }
    get modalBarrierDismissLabel() {
      return "Закрити";
    }
    get moreButtonTooltip() {
      return "Інші";
    }
    get nextMonthTooltip() {
      return "Наступний місяць";
    }
    get nextPageTooltip() {
      return "Наступна сторінка";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Відкрити меню навігації";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow з $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow з приблизно $rowCount";
    }
    get pasteButtonLabel() {
      return "Вставити";
    }
    get popupMenuLabel() {
      return "Спливаюче меню";
    }
    get postMeridiemAbbreviation() {
      return "пп";
    }
    get previousMonthTooltip() {
      return "Попередній місяць";
    }
    get previousPageTooltip() {
      return "Попередня сторінка";
    }
    get refreshIndicatorSemanticLabel() {
      return "Оновити";
    }
    get remainingTextFieldCharacterCountFew() {
      return "Залишилося $remainingCount символи";
    }
    get remainingTextFieldCharacterCountMany() {
      return "Залишилося $remainingCount символів";
    }
    get remainingTextFieldCharacterCountOne() {
      return "Залишився 1 символ";
    }
    get remainingTextFieldCharacterCountOther() {
      return "Залишилося $remainingCount символу";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Перемістити вниз";
    }
    get reorderItemLeft() {
      return "Перемістити ліворуч";
    }
    get reorderItemRight() {
      return "Перемістити праворуч";
    }
    get reorderItemToEnd() {
      return "Перемістити в кінець";
    }
    get reorderItemToStart() {
      return "Перемістити на початок";
    }
    get reorderItemUp() {
      return "Перемістити вгору";
    }
    get rowsPerPageTitle() {
      return "Рядків на сторінці:";
    }
    get saveButtonLabel() {
      return "ЗБЕРЕГТИ";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Пошук";
    }
    get selectAllButtonLabel() {
      return "Вибрати всі";
    }
    get selectYearSemanticsLabel() {
      return "Виберіть рік";
    }
    get selectedRowCountTitleFew() {
      return "Вибрано $selectedRowCount елементи";
    }
    get selectedRowCountTitleMany() {
      return "Вибрано $selectedRowCount елементів";
    }
    get selectedRowCountTitleOne() {
      return "Вибрано 1 елемент";
    }
    get selectedRowCountTitleOther() {
      return "Вибрано $selectedRowCount елемента";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Показати облікові записи";
    }
    get showMenuTooltip() {
      return "Показати меню";
    }
    get signedInLabel() {
      return "Ви ввійшли";
    }
    get tabLabelRaw() {
      return "Вкладка $tabIndex з $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "ВИБЕРІТЬ ЧАС";
    }
    get timePickerHourLabel() {
      return "Години";
    }
    get timePickerHourModeAnnouncement() {
      return "Виберіть години";
    }
    get timePickerInputHelpText() {
      return "ВВЕДІТЬ ЧАС";
    }
    get timePickerMinuteLabel() {
      return "Хвилини";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Виберіть хвилини";
    }
    get unspecifiedDate() {
      return "Дата";
    }
    get unspecifiedDateRange() {
      return "Діапазон дат";
    }
    get viewLicensesButtonLabel() {
      return "ПЕРЕГЛЯНУТИ ЛІЦЕНЗІЇ";
    }
  };
  (generated_material_localizations.MaterialLocalizationUk.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "uk";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationUk.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationUk.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationUk);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationUk);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationUk, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationUk.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationUk, I[2]);
  generated_material_localizations.MaterialLocalizationUr = class MaterialLocalizationUr extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationUr.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName کے بارے میں";
    }
    get alertDialogLabel() {
      return "الرٹ";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "پیچھے";
    }
    get calendarModeButtonLabel() {
      return "کیلنڈر پر سوئچ کریں";
    }
    get cancelButtonLabel() {
      return "منسوخ کریں";
    }
    get closeButtonLabel() {
      return "بند کریں";
    }
    get closeButtonTooltip() {
      return "بند کریں";
    }
    get collapsedIconTapHint() {
      return "پھیلائیں";
    }
    get continueButtonLabel() {
      return "جاری رکھیں";
    }
    get copyButtonLabel() {
      return "کاپی کریں";
    }
    get cutButtonLabel() {
      return "کٹ کریں";
    }
    get dateHelpText() {
      return "dd/mm/yyyy";
    }
    get dateInputLabel() {
      return "تاریخ درج کریں";
    }
    get dateOutOfRangeLabel() {
      return "حد سے باہر۔";
    }
    get datePickerHelpText() {
      return "تاریخ منتخب کریں";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "تاریخ اختتام $fullDate";
    }
    get dateRangeEndLabel() {
      return "تاریخ اختتام";
    }
    get dateRangePickerHelpText() {
      return "حد منتخب کریں";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "تاریخ آغاز $fullDate";
    }
    get dateRangeStartLabel() {
      return "تاریخ آغاز";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "حذف کریں";
    }
    get dialModeButtonLabel() {
      return "ڈائل منتخب کنندہ وضع پر سوئچ کریں";
    }
    get dialogLabel() {
      return "ڈائلاگ";
    }
    get drawerLabel() {
      return "نیویگیشن مینو";
    }
    get expandedIconTapHint() {
      return "سکیڑیں";
    }
    get firstPageTooltip() {
      return "پہلا صفحہ";
    }
    get hideAccountsLabel() {
      return "اکاؤنٹس چھپائیں";
    }
    get inputDateModeButtonLabel() {
      return "ان پٹ پر سوئچ کریں";
    }
    get inputTimeModeButtonLabel() {
      return "ٹیکسٹ ان پٹ وضع پر سوئچ کریں";
    }
    get invalidDateFormatLabel() {
      return "غلط فارمیٹ۔";
    }
    get invalidDateRangeLabel() {
      return "غلط رینج۔";
    }
    get invalidTimeLabel() {
      return "درست وقت درج کریں";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "+ Num";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,‎";
    }
    get keyboardKeyNumpadDecimal() {
      return ". Num";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /‎";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =‎";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *‎";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (‎";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )‎";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -‎";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "Power Off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "آخری صفحہ";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 لائسنس";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount لائسنسز";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "لائسنسز";
    }
    get menuBarMenuLabel() {
      return "مینو بار کا مینو";
    }
    get modalBarrierDismissLabel() {
      return "برخاست کریں";
    }
    get moreButtonTooltip() {
      return "مزید";
    }
    get nextMonthTooltip() {
      return "اگلا مہینہ";
    }
    get nextPageTooltip() {
      return "اگلا صفحہ";
    }
    get okButtonLabel() {
      return "ٹھیک ہے";
    }
    get openAppDrawerTooltip() {
      return "نیویگیشن مینو کھولیں";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow از $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow $rowCount میں سے تقریباً";
    }
    get pasteButtonLabel() {
      return "پیسٹ کریں";
    }
    get popupMenuLabel() {
      return "پاپ اپ مینو";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "پچھلا مہینہ";
    }
    get previousPageTooltip() {
      return "گزشتہ صفحہ";
    }
    get refreshIndicatorSemanticLabel() {
      return "ریفریش کریں";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 حرف باقی ہے";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount حروف باقی ہیں";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "نیچے منتقل کریں";
    }
    get reorderItemLeft() {
      return "بائیں منتقل کریں";
    }
    get reorderItemRight() {
      return "دائیں منتقل کریں";
    }
    get reorderItemToEnd() {
      return "آخر میں منتقل کریں";
    }
    get reorderItemToStart() {
      return "شروع میں منتقل کریں";
    }
    get reorderItemUp() {
      return "اوپر منتقل کریں";
    }
    get rowsPerPageTitle() {
      return "قطاریں فی صفحہ:";
    }
    get saveButtonLabel() {
      return "محفوظ کریں";
    }
    get scriptCategory() {
      return typography.ScriptCategory.tall;
    }
    get searchFieldLabel() {
      return "تلاش";
    }
    get selectAllButtonLabel() {
      return "سبھی کو منتخب کریں";
    }
    get selectYearSemanticsLabel() {
      return "سال منتخب کریں";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 آئٹم منتخب کیا گیا";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount آئٹمز منتخب کیے گئے";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "اکاؤنٹس دکھائیں";
    }
    get showMenuTooltip() {
      return "مینو دکھائیں";
    }
    get signedInLabel() {
      return "سائن ان کردہ ہے";
    }
    get tabLabelRaw() {
      return "$tabCount میں سے $tabIndex ٹیب";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.h_colon_mm_space_a;
    }
    get timePickerDialHelpText() {
      return "وقت منتخب کریں";
    }
    get timePickerHourLabel() {
      return "گھنٹہ";
    }
    get timePickerHourModeAnnouncement() {
      return "گھنٹے منتخب کریں";
    }
    get timePickerInputHelpText() {
      return "وقت درج کریں";
    }
    get timePickerMinuteLabel() {
      return "منٹ";
    }
    get timePickerMinuteModeAnnouncement() {
      return "منٹ منتخب کریں";
    }
    get unspecifiedDate() {
      return "تاریخ";
    }
    get unspecifiedDateRange() {
      return "تاریخ کی حد";
    }
    get viewLicensesButtonLabel() {
      return "لائسنسز دیکھیں";
    }
  };
  (generated_material_localizations.MaterialLocalizationUr.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "ur";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationUr.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationUr.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationUr);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationUr);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationUr, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationUr.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationUr, I[2]);
  generated_material_localizations.MaterialLocalizationUz = class MaterialLocalizationUz extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationUz.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "$applicationName haqida";
    }
    get alertDialogLabel() {
      return "Ogohlantirish";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "Orqaga";
    }
    get calendarModeButtonLabel() {
      return "Taqvimda ochish";
    }
    get cancelButtonLabel() {
      return "BEKOR QILISH";
    }
    get closeButtonLabel() {
      return "YOPISH";
    }
    get closeButtonTooltip() {
      return "Yopish";
    }
    get collapsedIconTapHint() {
      return "Yoyish";
    }
    get continueButtonLabel() {
      return "DAVOM ETISH";
    }
    get copyButtonLabel() {
      return "Nusxa olish";
    }
    get cutButtonLabel() {
      return "Kesib olish";
    }
    get dateHelpText() {
      return "mm/dd/yyyy";
    }
    get dateInputLabel() {
      return "Sanani kiriting";
    }
    get dateOutOfRangeLabel() {
      return "Diapazondan tashqarida.";
    }
    get datePickerHelpText() {
      return "SANANI TANLANG";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Tugash sanasi: $fullDate";
    }
    get dateRangeEndLabel() {
      return "Tugash sanasi";
    }
    get dateRangePickerHelpText() {
      return "ORALIQNI TANLANG";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Boshlanish sanasi: $fullDate";
    }
    get dateRangeStartLabel() {
      return "Boshlanish sanasi";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "Olib tashlash";
    }
    get dialModeButtonLabel() {
      return "Vaqtni burab tanlash rejimi";
    }
    get dialogLabel() {
      return "Muloqot oynasi";
    }
    get drawerLabel() {
      return "Navigatsiya menyusi";
    }
    get expandedIconTapHint() {
      return "Kichraytirish";
    }
    get firstPageTooltip() {
      return "Birinchi sahifa";
    }
    get hideAccountsLabel() {
      return "Hisoblarni berkitish";
    }
    get inputDateModeButtonLabel() {
      return "Mustaqil kiritish";
    }
    get inputTimeModeButtonLabel() {
      return "Vaqtni yozib tanlash rejimi";
    }
    get invalidDateFormatLabel() {
      return "Yaroqsiz format.";
    }
    get invalidDateRangeLabel() {
      return "Yaroqsiz oraliq.";
    }
    get invalidTimeLabel() {
      return "Vaqt xato kiritildi";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Keyingi kanal";
    }
    get keyboardKeyChannelUp() {
      return "Avvalgi kanal";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Power";
    }
    get keyboardKeyPowerOff() {
      return "Power Off";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Boʻsh joy";
    }
    get lastPageTooltip() {
      return "Oxirgi sahifa";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 ta litsenziya";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount ta litsenziya";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Litsenziyalar";
    }
    get menuBarMenuLabel() {
      return "Menyu paneli";
    }
    get modalBarrierDismissLabel() {
      return "Yopish";
    }
    get moreButtonTooltip() {
      return "Yana";
    }
    get nextMonthTooltip() {
      return "Keyingi oy";
    }
    get nextPageTooltip() {
      return "Keyingi sahifa";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Navigatsiya menyusini ochish";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow, jami: $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow, jami: $rowCount";
    }
    get pasteButtonLabel() {
      return "Joylash";
    }
    get popupMenuLabel() {
      return "Pop-ap menyusi";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "Avvalgi oy";
    }
    get previousPageTooltip() {
      return "Avvalgi sahifa";
    }
    get refreshIndicatorSemanticLabel() {
      return "Yangilash";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 ta belgi qoldi";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount ta belgi qoldi";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "Pastga siljitish";
    }
    get reorderItemLeft() {
      return "Chapga siljitish";
    }
    get reorderItemRight() {
      return "Oʻngga siljitish";
    }
    get reorderItemToEnd() {
      return "Oxiriga siljitish";
    }
    get reorderItemToStart() {
      return "Boshiga siljitish";
    }
    get reorderItemUp() {
      return "Tepaga siljitish";
    }
    get rowsPerPageTitle() {
      return "Har bir sahifadagi qatorlar soni:";
    }
    get saveButtonLabel() {
      return "SAQLASH";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Qidirish";
    }
    get selectAllButtonLabel() {
      return "Hammasi";
    }
    get selectYearSemanticsLabel() {
      return "Yilni tanlang";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 ta element tanlandi";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount ta element tanlandi";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Hisoblarni koʻrsatish";
    }
    get showMenuTooltip() {
      return "Menyuni koʻrsatish";
    }
    get signedInLabel() {
      return "Hisobingizga kirgansiz";
    }
    get tabLabelRaw() {
      return "$tabCount varaqdan $tabIndex";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "VAQTNI TANLANG";
    }
    get timePickerHourLabel() {
      return "Soat";
    }
    get timePickerHourModeAnnouncement() {
      return "Soatni tanlang";
    }
    get timePickerInputHelpText() {
      return "VAQTNI KIRITING";
    }
    get timePickerMinuteLabel() {
      return "Daqiqa";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Daqiqani tanlang";
    }
    get unspecifiedDate() {
      return "Sana";
    }
    get unspecifiedDateRange() {
      return "Sana oraligʻi";
    }
    get viewLicensesButtonLabel() {
      return "Litsenziyalarni koʻrish";
    }
  };
  (generated_material_localizations.MaterialLocalizationUz.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "uz";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationUz.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationUz.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationUz);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationUz);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationUz, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationUz.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationUz, I[2]);
  generated_material_localizations.MaterialLocalizationVi = class MaterialLocalizationVi extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationVi.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Giới thiệu về $applicationName";
    }
    get alertDialogLabel() {
      return "Thông báo";
    }
    get anteMeridiemAbbreviation() {
      return "SÁNG";
    }
    get backButtonTooltip() {
      return "Quay lại";
    }
    get calendarModeButtonLabel() {
      return "Chuyển sang lịch";
    }
    get cancelButtonLabel() {
      return "HỦY";
    }
    get closeButtonLabel() {
      return "ĐÓNG";
    }
    get closeButtonTooltip() {
      return "Đóng";
    }
    get collapsedIconTapHint() {
      return "Mở rộng";
    }
    get continueButtonLabel() {
      return "TIẾP TỤC";
    }
    get copyButtonLabel() {
      return "Sao chép";
    }
    get cutButtonLabel() {
      return "Cắt";
    }
    get dateHelpText() {
      return "mm/dd/yyyy";
    }
    get dateInputLabel() {
      return "Nhập ngày";
    }
    get dateOutOfRangeLabel() {
      return "Ngoài phạm vi.";
    }
    get datePickerHelpText() {
      return "CHỌN NGÀY";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Ngày kết thúc $fullDate";
    }
    get dateRangeEndLabel() {
      return "Ngày kết thúc";
    }
    get dateRangePickerHelpText() {
      return "CHỌN PHẠM VI";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Ngày bắt đầu $fullDate";
    }
    get dateRangeStartLabel() {
      return "Ngày bắt đầu";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "Xóa";
    }
    get dialModeButtonLabel() {
      return "Chuyển sang chế độ chọn mặt đồng hồ";
    }
    get dialogLabel() {
      return "Hộp thoại";
    }
    get drawerLabel() {
      return "Menu di chuyển";
    }
    get expandedIconTapHint() {
      return "Thu gọn";
    }
    get firstPageTooltip() {
      return "Trang đầu";
    }
    get hideAccountsLabel() {
      return "Ẩn tài khoản";
    }
    get inputDateModeButtonLabel() {
      return "Chuyển sang chế độ nhập";
    }
    get inputTimeModeButtonLabel() {
      return "Chuyển sang chế độ nhập văn bản";
    }
    get invalidDateFormatLabel() {
      return "Định dạng không hợp lệ.";
    }
    get invalidDateRangeLabel() {
      return "Phạm vi không hợp lệ.";
    }
    get invalidTimeLabel() {
      return "Nhập thời gian hợp lệ";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Giảm kênh";
    }
    get keyboardKeyChannelUp() {
      return "Tăng kênh";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Phím số 0";
    }
    get keyboardKeyNumpad1() {
      return "Phím số 1";
    }
    get keyboardKeyNumpad2() {
      return "Phím số 2";
    }
    get keyboardKeyNumpad3() {
      return "Phím số 3";
    }
    get keyboardKeyNumpad4() {
      return "Phím số 4";
    }
    get keyboardKeyNumpad5() {
      return "Phím số 5";
    }
    get keyboardKeyNumpad6() {
      return "Phím số 6";
    }
    get keyboardKeyNumpad7() {
      return "Phím số 7";
    }
    get keyboardKeyNumpad8() {
      return "Phím số 8";
    }
    get keyboardKeyNumpad9() {
      return "Phím số 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Phím +";
    }
    get keyboardKeyNumpadComma() {
      return "Phím ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Phím .";
    }
    get keyboardKeyNumpadDivide() {
      return "Phím /";
    }
    get keyboardKeyNumpadEnter() {
      return "Phím Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Phím =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Phím *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Phím (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Phím )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Phím -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Nguồn";
    }
    get keyboardKeyPowerOff() {
      return "Tắt nguồn";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "Phím cách";
    }
    get lastPageTooltip() {
      return "Trang cuối";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 giấy phép";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount giấy phép";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Giấy phép";
    }
    get menuBarMenuLabel() {
      return "Trình đơn của thanh trình đơn";
    }
    get modalBarrierDismissLabel() {
      return "Bỏ qua";
    }
    get moreButtonTooltip() {
      return "Thêm";
    }
    get nextMonthTooltip() {
      return "Tháng sau";
    }
    get nextPageTooltip() {
      return "Trang tiếp theo";
    }
    get okButtonLabel() {
      return "OK";
    }
    get openAppDrawerTooltip() {
      return "Mở menu di chuyển";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow trong tổng số $rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow trong tổng số khoảng $rowCount";
    }
    get pasteButtonLabel() {
      return "Dán";
    }
    get popupMenuLabel() {
      return "Menu bật lên";
    }
    get postMeridiemAbbreviation() {
      return "CHIỀU";
    }
    get previousMonthTooltip() {
      return "Tháng trước";
    }
    get previousPageTooltip() {
      return "Trang trước";
    }
    get refreshIndicatorSemanticLabel() {
      return "Làm mới";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "Còn lại 1 ký tự";
    }
    get remainingTextFieldCharacterCountOther() {
      return "Còn lại $remainingCount ký tự";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "Di chuyển xuống";
    }
    get reorderItemLeft() {
      return "Di chuyển sang trái";
    }
    get reorderItemRight() {
      return "Di chuyển sang phải";
    }
    get reorderItemToEnd() {
      return "Di chuyển xuống cuối danh sách";
    }
    get reorderItemToStart() {
      return "Di chuyển lên đầu danh sách";
    }
    get reorderItemUp() {
      return "Di chuyển lên";
    }
    get rowsPerPageTitle() {
      return "Số hàng mỗi trang:";
    }
    get saveButtonLabel() {
      return "LƯU";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Tìm kiếm";
    }
    get selectAllButtonLabel() {
      return "Chọn tất cả";
    }
    get selectYearSemanticsLabel() {
      return "Chọn năm";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "Đã chọn 1 mục";
    }
    get selectedRowCountTitleOther() {
      return "Đã chọn $selectedRowCount mục";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Hiển thị tài khoản";
    }
    get showMenuTooltip() {
      return "Hiển thị menu";
    }
    get signedInLabel() {
      return "Đã đăng nhập";
    }
    get tabLabelRaw() {
      return "Tab $tabIndex trong tổng số $tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.HH_colon_mm;
    }
    get timePickerDialHelpText() {
      return "CHỌN THỜI GIAN";
    }
    get timePickerHourLabel() {
      return "Giờ";
    }
    get timePickerHourModeAnnouncement() {
      return "Chọn giờ";
    }
    get timePickerInputHelpText() {
      return "NHẬP THỜI GIAN";
    }
    get timePickerMinuteLabel() {
      return "Phút";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Chọn phút";
    }
    get unspecifiedDate() {
      return "Ngày";
    }
    get unspecifiedDateRange() {
      return "Phạm vi ngày";
    }
    get viewLicensesButtonLabel() {
      return "XEM GIẤY PHÉP";
    }
  };
  (generated_material_localizations.MaterialLocalizationVi.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "vi";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationVi.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationVi.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationVi);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationVi);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationVi, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationVi.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationVi, I[2]);
  generated_material_localizations.MaterialLocalizationZh = class MaterialLocalizationZh extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationZh.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "关于$applicationName";
    }
    get alertDialogLabel() {
      return "提醒";
    }
    get anteMeridiemAbbreviation() {
      return "上午";
    }
    get backButtonTooltip() {
      return "返回";
    }
    get calendarModeButtonLabel() {
      return "切换到日历模式";
    }
    get cancelButtonLabel() {
      return "取消";
    }
    get closeButtonLabel() {
      return "关闭";
    }
    get closeButtonTooltip() {
      return "关闭";
    }
    get collapsedIconTapHint() {
      return "展开";
    }
    get continueButtonLabel() {
      return "继续";
    }
    get copyButtonLabel() {
      return "复制";
    }
    get cutButtonLabel() {
      return "剪切";
    }
    get dateHelpText() {
      return "yyyy/mm/dd";
    }
    get dateInputLabel() {
      return "输入日期";
    }
    get dateOutOfRangeLabel() {
      return "超出范围。";
    }
    get datePickerHelpText() {
      return "选择日期";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "结束日期为 $fullDate";
    }
    get dateRangeEndLabel() {
      return "结束日期";
    }
    get dateRangePickerHelpText() {
      return "选择范围";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "开始日期为 $fullDate";
    }
    get dateRangeStartLabel() {
      return "开始日期";
    }
    get dateSeparator() {
      return "/";
    }
    get deleteButtonTooltip() {
      return "删除";
    }
    get dialModeButtonLabel() {
      return "切换到表盘选择器模式";
    }
    get dialogLabel() {
      return "对话框";
    }
    get drawerLabel() {
      return "导航菜单";
    }
    get expandedIconTapHint() {
      return "收起";
    }
    get firstPageTooltip() {
      return "第一页";
    }
    get hideAccountsLabel() {
      return "隐藏帐号";
    }
    get inputDateModeButtonLabel() {
      return "切换到输入模式";
    }
    get inputTimeModeButtonLabel() {
      return "切换到文本输入模式";
    }
    get invalidDateFormatLabel() {
      return "格式无效。";
    }
    get invalidDateRangeLabel() {
      return "范围无效。";
    }
    get invalidTimeLabel() {
      return "请输入有效的时间";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "退格键";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "弹出";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "⌘";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "数字键盘 0";
    }
    get keyboardKeyNumpad1() {
      return "数字键盘 1";
    }
    get keyboardKeyNumpad2() {
      return "数字键盘 2";
    }
    get keyboardKeyNumpad3() {
      return "数字键盘 3";
    }
    get keyboardKeyNumpad4() {
      return "数字键盘 4";
    }
    get keyboardKeyNumpad5() {
      return "数字键盘 5";
    }
    get keyboardKeyNumpad6() {
      return "数字键盘 6";
    }
    get keyboardKeyNumpad7() {
      return "数字键盘 7";
    }
    get keyboardKeyNumpad8() {
      return "数字键盘 8";
    }
    get keyboardKeyNumpad9() {
      return "数字键盘 9";
    }
    get keyboardKeyNumpadAdd() {
      return "数字键盘 +";
    }
    get keyboardKeyNumpadComma() {
      return "数字键盘 ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "数字键盘 .";
    }
    get keyboardKeyNumpadDivide() {
      return "数字键盘 /";
    }
    get keyboardKeyNumpadEnter() {
      return "数字键盘 Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "数字键盘 =";
    }
    get keyboardKeyNumpadMultiply() {
      return "数字键盘 *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "数字键盘 (";
    }
    get keyboardKeyNumpadParenRight() {
      return "数字键盘 )";
    }
    get keyboardKeyNumpadSubtract() {
      return "数字键盘 -";
    }
    get keyboardKeyPageDown() {
      return "PgDn";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "电源";
    }
    get keyboardKeyPowerOff() {
      return "关机";
    }
    get keyboardKeyPrintScreen() {
      return "Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "选择";
    }
    get keyboardKeySpace() {
      return "空格键";
    }
    get lastPageTooltip() {
      return "最后一页";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "1 份许可";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount 份许可";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "许可";
    }
    get menuBarMenuLabel() {
      return "菜单栏的菜单";
    }
    get modalBarrierDismissLabel() {
      return "关闭";
    }
    get moreButtonTooltip() {
      return "更多";
    }
    get nextMonthTooltip() {
      return "下个月";
    }
    get nextPageTooltip() {
      return "下一页";
    }
    get okButtonLabel() {
      return "确定";
    }
    get openAppDrawerTooltip() {
      return "打开导航菜单";
    }
    get pageRowsInfoTitleRaw() {
      return "第 $firstRow-$lastRow 行（共 $rowCount 行）";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "第 $firstRow-$lastRow 行（共约 $rowCount 行）";
    }
    get pasteButtonLabel() {
      return "粘贴";
    }
    get popupMenuLabel() {
      return "弹出菜单";
    }
    get postMeridiemAbbreviation() {
      return "下午";
    }
    get previousMonthTooltip() {
      return "上个月";
    }
    get previousPageTooltip() {
      return "上一页";
    }
    get refreshIndicatorSemanticLabel() {
      return "刷新";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "还可输入 1 个字符";
    }
    get remainingTextFieldCharacterCountOther() {
      return "还可输入 $remainingCount 个字符";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return "TBD";
    }
    get reorderItemDown() {
      return "下移";
    }
    get reorderItemLeft() {
      return "左移";
    }
    get reorderItemRight() {
      return "右移";
    }
    get reorderItemToEnd() {
      return "移到末尾";
    }
    get reorderItemToStart() {
      return "移到开头";
    }
    get reorderItemUp() {
      return "上移";
    }
    get rowsPerPageTitle() {
      return "每页行数：";
    }
    get saveButtonLabel() {
      return "保存";
    }
    get scriptCategory() {
      return typography.ScriptCategory.dense;
    }
    get searchFieldLabel() {
      return "搜索";
    }
    get selectAllButtonLabel() {
      return "全选";
    }
    get selectYearSemanticsLabel() {
      return "选择年份";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "已选择 1 项内容";
    }
    get selectedRowCountTitleOther() {
      return "已选择 $selectedRowCount 项内容";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "显示帐号";
    }
    get showMenuTooltip() {
      return "显示菜单";
    }
    get signedInLabel() {
      return "已登录";
    }
    get tabLabelRaw() {
      return "第 $tabIndex 个标签，共 $tabCount 个";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.a_space_h_colon_mm;
    }
    get timePickerDialHelpText() {
      return "选择时间";
    }
    get timePickerHourLabel() {
      return "小时";
    }
    get timePickerHourModeAnnouncement() {
      return "选择小时";
    }
    get timePickerInputHelpText() {
      return "输入时间";
    }
    get timePickerMinuteLabel() {
      return "分钟";
    }
    get timePickerMinuteModeAnnouncement() {
      return "选择分钟";
    }
    get unspecifiedDate() {
      return "日期";
    }
    get unspecifiedDateRange() {
      return "日期范围";
    }
    get viewLicensesButtonLabel() {
      return "查看许可";
    }
  };
  (generated_material_localizations.MaterialLocalizationZh.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "zh";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationZh.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationZh.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationZh);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationZh);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationZh, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationZh.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationZh, I[2]);
  generated_material_localizations.MaterialLocalizationZhHans = class MaterialLocalizationZhHans extends generated_material_localizations.MaterialLocalizationZh {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationZhHans.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
  };
  (generated_material_localizations.MaterialLocalizationZhHans.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "zh_Hans";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationZhHans.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationZhHans.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationZhHans);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationZhHans);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationZhHans, I[2]);
  generated_material_localizations.MaterialLocalizationZhHant = class MaterialLocalizationZhHant extends generated_material_localizations.MaterialLocalizationZh {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationZhHant.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "關於$applicationName";
    }
    get alertDialogLabel() {
      return "通知";
    }
    get calendarModeButtonLabel() {
      return "切換至日曆";
    }
    get closeButtonLabel() {
      return "關閉";
    }
    get closeButtonTooltip() {
      return "關閉";
    }
    get collapsedIconTapHint() {
      return "展開";
    }
    get continueButtonLabel() {
      return "繼續";
    }
    get copyButtonLabel() {
      return "複製";
    }
    get cutButtonLabel() {
      return "剪下";
    }
    get dateHelpText() {
      return "dd/mm/yyyy";
    }
    get dateInputLabel() {
      return "輸入日期";
    }
    get dateOutOfRangeLabel() {
      return "超出範圍。";
    }
    get datePickerHelpText() {
      return "選取日期";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "結束日期係 $fullDate";
    }
    get dateRangeEndLabel() {
      return "結束日期";
    }
    get dateRangePickerHelpText() {
      return "選取範圍";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "開始日期係 $fullDate";
    }
    get dateRangeStartLabel() {
      return "開始日期";
    }
    get deleteButtonTooltip() {
      return "刪除";
    }
    get dialModeButtonLabel() {
      return "切換至鐘面點選器模式";
    }
    get dialogLabel() {
      return "對話方塊";
    }
    get drawerLabel() {
      return "導覽選單";
    }
    get expandedIconTapHint() {
      return "收合";
    }
    get firstPageTooltip() {
      return "第一頁";
    }
    get hideAccountsLabel() {
      return "隱藏帳戶";
    }
    get inputDateModeButtonLabel() {
      return "切換至輸入";
    }
    get inputTimeModeButtonLabel() {
      return "切換至文字輸入模式";
    }
    get invalidDateFormatLabel() {
      return "格式無效。";
    }
    get invalidDateRangeLabel() {
      return "範圍無效。";
    }
    get invalidTimeLabel() {
      return "請輸入有效的時間";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyChannelDown() {
      return "下一個頻道";
    }
    get keyboardKeyChannelUp() {
      return "上一個頻道";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyNumpad0() {
      return "數字鍵盤 0";
    }
    get keyboardKeyNumpad1() {
      return "數字鍵盤 1";
    }
    get keyboardKeyNumpad2() {
      return "數字鍵盤 2";
    }
    get keyboardKeyNumpad3() {
      return "數字鍵盤 3";
    }
    get keyboardKeyNumpad4() {
      return "數字鍵盤 4";
    }
    get keyboardKeyNumpad5() {
      return "數字鍵盤 5";
    }
    get keyboardKeyNumpad6() {
      return "數字鍵盤 6";
    }
    get keyboardKeyNumpad7() {
      return "數字鍵盤 7";
    }
    get keyboardKeyNumpad8() {
      return "數字鍵盤 8";
    }
    get keyboardKeyNumpad9() {
      return "數字鍵盤 9";
    }
    get keyboardKeyNumpadAdd() {
      return "數字鍵盤 +";
    }
    get keyboardKeyNumpadComma() {
      return "數字鍵盤 ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "數字鍵盤 .";
    }
    get keyboardKeyNumpadDivide() {
      return "數字鍵盤 /";
    }
    get keyboardKeyNumpadEnter() {
      return "數字鍵盤 Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "數字鍵盤 =";
    }
    get keyboardKeyNumpadMultiply() {
      return "數字鍵盤 *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "數字鍵盤 (";
    }
    get keyboardKeyNumpadParenRight() {
      return "數字鍵盤 )";
    }
    get keyboardKeyNumpadSubtract() {
      return "數字鍵盤 -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPower() {
      return "電源";
    }
    get keyboardKeyPowerOff() {
      return "關機";
    }
    get keyboardKeySelect() {
      return "Select";
    }
    get keyboardKeySpace() {
      return "空格";
    }
    get lastPageTooltip() {
      return "最後一頁";
    }
    get licensesPackageDetailTextOne() {
      return "1 項授權";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount 項授權";
    }
    get licensesPageTitle() {
      return "授權";
    }
    get menuBarMenuLabel() {
      return "選單列選單";
    }
    get modalBarrierDismissLabel() {
      return "拒絕";
    }
    get nextMonthTooltip() {
      return "下個月";
    }
    get nextPageTooltip() {
      return "下一頁";
    }
    get okButtonLabel() {
      return "確定";
    }
    get openAppDrawerTooltip() {
      return "開啟導覽選單";
    }
    get pageRowsInfoTitleRaw() {
      return "第 $firstRow 至 $lastRow 列，共 $rowCount 列";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "第 $firstRow 至 $lastRow 列，共約 $rowCount 列";
    }
    get pasteButtonLabel() {
      return "貼上";
    }
    get popupMenuLabel() {
      return "彈出式選單";
    }
    get previousMonthTooltip() {
      return "上個月";
    }
    get previousPageTooltip() {
      return "上一頁";
    }
    get refreshIndicatorSemanticLabel() {
      return "重新整理";
    }
    get remainingTextFieldCharacterCountOne() {
      return "尚餘 1 個字元";
    }
    get remainingTextFieldCharacterCountOther() {
      return "尚餘 $remainingCount 個字元";
    }
    get reorderItemDown() {
      return "向下移";
    }
    get reorderItemLeft() {
      return "向左移";
    }
    get reorderItemRight() {
      return "向右移";
    }
    get reorderItemToEnd() {
      return "移到最後";
    }
    get reorderItemToStart() {
      return "移到開頭";
    }
    get reorderItemUp() {
      return "向上移";
    }
    get rowsPerPageTitle() {
      return "每頁列數：";
    }
    get saveButtonLabel() {
      return "儲存";
    }
    get searchFieldLabel() {
      return "搜尋";
    }
    get selectAllButtonLabel() {
      return "全部選取";
    }
    get selectYearSemanticsLabel() {
      return "揀年份";
    }
    get selectedRowCountTitleOne() {
      return "已選取 1 個項目";
    }
    get selectedRowCountTitleOther() {
      return "已選取 $selectedRowCount 個項目";
    }
    get showAccountsLabel() {
      return "顯示帳戶";
    }
    get showMenuTooltip() {
      return "顯示選單";
    }
    get signedInLabel() {
      return "已登入";
    }
    get tabLabelRaw() {
      return "第 $tabIndex 個標籤，總共 $tabCount 個";
    }
    get timePickerDialHelpText() {
      return "選取時間";
    }
    get timePickerHourLabel() {
      return "小時";
    }
    get timePickerHourModeAnnouncement() {
      return "揀選小時";
    }
    get timePickerInputHelpText() {
      return "輸入時間";
    }
    get timePickerMinuteLabel() {
      return "分鐘";
    }
    get timePickerMinuteModeAnnouncement() {
      return "揀選分鐘";
    }
    get unspecifiedDateRange() {
      return "日期範圍";
    }
    get viewLicensesButtonLabel() {
      return "查看授權";
    }
  };
  (generated_material_localizations.MaterialLocalizationZhHant.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "zh_Hant";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationZhHant.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationZhHant.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationZhHant);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationZhHant);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationZhHant, I[2]);
  generated_material_localizations.MaterialLocalizationZhHantHk = class MaterialLocalizationZhHantHk extends generated_material_localizations.MaterialLocalizationZhHant {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationZhHantHk.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
  };
  (generated_material_localizations.MaterialLocalizationZhHantHk.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "zh_Hant_HK";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationZhHantHk.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationZhHantHk.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationZhHantHk);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationZhHantHk);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationZhHantHk, I[2]);
  generated_material_localizations.MaterialLocalizationZhHantTw = class MaterialLocalizationZhHantTw extends generated_material_localizations.MaterialLocalizationZhHant {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationZhHantTw.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get dialModeButtonLabel() {
      return "切換至鐘面挑選器模式";
    }
    get licensesPackageDetailTextOne() {
      return "1 個授權";
    }
    get timePickerHourLabel() {
      return "時";
    }
    get timePickerMinuteLabel() {
      return "分";
    }
    get licensesPackageDetailTextOther() {
      return "$licenseCount 個授權";
    }
    get calendarModeButtonLabel() {
      return "切換到日曆模式";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "結束日期為 $fullDate";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "開始日期為 $fullDate";
    }
    get inputDateModeButtonLabel() {
      return "切換到輸入模式";
    }
    get selectYearSemanticsLabel() {
      return "選取年份";
    }
    get dateHelpText() {
      return "yyyy/mm/dd";
    }
    get tabLabelRaw() {
      return "第 $tabIndex 個分頁 (共 $tabCount 個)";
    }
    get modalBarrierDismissLabel() {
      return "關閉";
    }
    get signedInLabel() {
      return "已登入帳戶";
    }
    get aboutListTileTitleRaw() {
      return "關於「$applicationName」";
    }
    get pageRowsInfoTitleRaw() {
      return "第 $firstRow - $lastRow 列 (總共 $rowCount 列)";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "第 $firstRow - $lastRow 列 (總共約 $rowCount 列)";
    }
    get selectAllButtonLabel() {
      return "全選";
    }
    get timePickerHourModeAnnouncement() {
      return "選取小時數";
    }
    get timePickerMinuteModeAnnouncement() {
      return "選取分鐘數";
    }
    get alertDialogLabel() {
      return "快訊";
    }
    get reorderItemToStart() {
      return "移至開頭";
    }
    get reorderItemToEnd() {
      return "移至結尾";
    }
    get remainingTextFieldCharacterCountOne() {
      return "還可輸入 1 個字元";
    }
    get remainingTextFieldCharacterCountOther() {
      return "還可輸入 $remainingCount 個字元";
    }
  };
  (generated_material_localizations.MaterialLocalizationZhHantTw.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "zh_Hant_TW";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationZhHantTw.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationZhHantTw.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationZhHantTw);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationZhHantTw);
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationZhHantTw, I[2]);
  generated_material_localizations.MaterialLocalizationZu = class MaterialLocalizationZu extends material_localizations$.GlobalMaterialLocalizations {
    static ['_#new#tearOff'](opts) {
      let localeName = opts && 'localeName' in opts ? opts.localeName : null;
      let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
      let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
      let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
      let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
      let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
      let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
      let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
      let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
      let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
      return new generated_material_localizations.MaterialLocalizationZu.new({localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    }
    get aboutListTileTitleRaw() {
      return "Mayelana no-$applicationName";
    }
    get alertDialogLabel() {
      return "Isexwayiso";
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get backButtonTooltip() {
      return "Emuva";
    }
    get calendarModeButtonLabel() {
      return "Shintshela kukhalenda";
    }
    get cancelButtonLabel() {
      return "KHANSELA";
    }
    get closeButtonLabel() {
      return "VALA";
    }
    get closeButtonTooltip() {
      return "Vala";
    }
    get collapsedIconTapHint() {
      return "Nweba";
    }
    get continueButtonLabel() {
      return "QHUBEKA";
    }
    get copyButtonLabel() {
      return "Kopisha";
    }
    get cutButtonLabel() {
      return "Sika";
    }
    get dateHelpText() {
      return "mm/dd/yyyy";
    }
    get dateInputLabel() {
      return "Faka idethi";
    }
    get dateOutOfRangeLabel() {
      return "Ikude kubanga.";
    }
    get datePickerHelpText() {
      return "KHETHA IDETHI";
    }
    get dateRangeEndDateSemanticLabelRaw() {
      return "Idethi yokuphela umhla ka-$fullDate";
    }
    get dateRangeEndLabel() {
      return "Idethi yokugcina";
    }
    get dateRangePickerHelpText() {
      return "KHETHA IBANGA";
    }
    get dateRangeStartDateSemanticLabelRaw() {
      return "Idethi yokuqala umhla ka-$fullDate";
    }
    get dateRangeStartLabel() {
      return "Idethi yokuqala";
    }
    get dateSeparator() {
      return ".";
    }
    get deleteButtonTooltip() {
      return "Susa";
    }
    get dialModeButtonLabel() {
      return "Shintshela kwimodi yesikhi sokudayela";
    }
    get dialogLabel() {
      return "Ingxoxo";
    }
    get drawerLabel() {
      return "Imenyu yokuzulazula";
    }
    get expandedIconTapHint() {
      return "Goqa";
    }
    get firstPageTooltip() {
      return "Ikhasi lokuqala";
    }
    get hideAccountsLabel() {
      return "Fihla ama-akhawunti";
    }
    get inputDateModeButtonLabel() {
      return "Shintshela kokokufaka";
    }
    get inputTimeModeButtonLabel() {
      return "Shintshela kwimodi yokufaka yombhalo";
    }
    get invalidDateFormatLabel() {
      return "Ifomethi engavumelekile.";
    }
    get invalidDateRangeLabel() {
      return "Ibanga elingavumelekile.";
    }
    get invalidTimeLabel() {
      return "Faka igama elivumelekile";
    }
    get keyboardKeyAlt() {
      return "Alt";
    }
    get keyboardKeyAltGraph() {
      return "AltGr";
    }
    get keyboardKeyBackspace() {
      return "Backspace";
    }
    get keyboardKeyCapsLock() {
      return "Caps Lock";
    }
    get keyboardKeyChannelDown() {
      return "I-Channel Down";
    }
    get keyboardKeyChannelUp() {
      return "I-Channel Up";
    }
    get keyboardKeyControl() {
      return "Ctrl";
    }
    get keyboardKeyDelete() {
      return "Del";
    }
    get keyboardKeyEject() {
      return "Eject";
    }
    get keyboardKeyEnd() {
      return "End";
    }
    get keyboardKeyEscape() {
      return "Esc";
    }
    get keyboardKeyFn() {
      return "Fn";
    }
    get keyboardKeyHome() {
      return "Home";
    }
    get keyboardKeyInsert() {
      return "Insert";
    }
    get keyboardKeyMeta() {
      return "I-Meta";
    }
    get keyboardKeyMetaMacOs() {
      return "Command";
    }
    get keyboardKeyMetaWindows() {
      return "Win";
    }
    get keyboardKeyNumLock() {
      return "Num Lock";
    }
    get keyboardKeyNumpad0() {
      return "Num 0";
    }
    get keyboardKeyNumpad1() {
      return "Num 1";
    }
    get keyboardKeyNumpad2() {
      return "Num 2";
    }
    get keyboardKeyNumpad3() {
      return "Num 3";
    }
    get keyboardKeyNumpad4() {
      return "Num 4";
    }
    get keyboardKeyNumpad5() {
      return "Num 5";
    }
    get keyboardKeyNumpad6() {
      return "Num 6";
    }
    get keyboardKeyNumpad7() {
      return "Num 7";
    }
    get keyboardKeyNumpad8() {
      return "Num 8";
    }
    get keyboardKeyNumpad9() {
      return "Num 9";
    }
    get keyboardKeyNumpadAdd() {
      return "Num +";
    }
    get keyboardKeyNumpadComma() {
      return "Num ,";
    }
    get keyboardKeyNumpadDecimal() {
      return "Num .";
    }
    get keyboardKeyNumpadDivide() {
      return "Num /";
    }
    get keyboardKeyNumpadEnter() {
      return "Num Enter";
    }
    get keyboardKeyNumpadEqual() {
      return "Num =";
    }
    get keyboardKeyNumpadMultiply() {
      return "Num *";
    }
    get keyboardKeyNumpadParenLeft() {
      return "Num (";
    }
    get keyboardKeyNumpadParenRight() {
      return "Num )";
    }
    get keyboardKeyNumpadSubtract() {
      return "Num -";
    }
    get keyboardKeyPageDown() {
      return "PgDown";
    }
    get keyboardKeyPageUp() {
      return "PgUp";
    }
    get keyboardKeyPower() {
      return "Amandla";
    }
    get keyboardKeyPowerOff() {
      return "Cisha";
    }
    get keyboardKeyPrintScreen() {
      return "-Print Screen";
    }
    get keyboardKeyScrollLock() {
      return "Scroll Lock";
    }
    get keyboardKeySelect() {
      return "Khetha";
    }
    get keyboardKeySpace() {
      return "Space";
    }
    get lastPageTooltip() {
      return "Ikhasi lokugcina";
    }
    get licensesPackageDetailTextFew() {
      return null;
    }
    get licensesPackageDetailTextMany() {
      return null;
    }
    get licensesPackageDetailTextOne() {
      return "ilayisense e-1";
    }
    get licensesPackageDetailTextOther() {
      return "amalayisense angu-$licenseCount";
    }
    get licensesPackageDetailTextTwo() {
      return null;
    }
    get licensesPackageDetailTextZero() {
      return "No licenses";
    }
    get licensesPageTitle() {
      return "Amalayisense";
    }
    get menuBarMenuLabel() {
      return "Imenyu yebha yemenyu";
    }
    get modalBarrierDismissLabel() {
      return "Cashisa";
    }
    get moreButtonTooltip() {
      return "Okuningi";
    }
    get nextMonthTooltip() {
      return "Inyanga ezayo";
    }
    get nextPageTooltip() {
      return "Ikhasi elilandelayo";
    }
    get okButtonLabel() {
      return "KULUNGILE";
    }
    get openAppDrawerTooltip() {
      return "Vula imenyu yokuzulazula";
    }
    get pageRowsInfoTitleRaw() {
      return "$firstRow–$lastRow kokungu-$rowCount";
    }
    get pageRowsInfoTitleApproximateRaw() {
      return "$firstRow–$lastRow cishe kokungu-$rowCount";
    }
    get pasteButtonLabel() {
      return "Namathisela";
    }
    get popupMenuLabel() {
      return "Imenyu ye-popup";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get previousMonthTooltip() {
      return "Inyanga edlule";
    }
    get previousPageTooltip() {
      return "Ikhasi elidlule";
    }
    get refreshIndicatorSemanticLabel() {
      return "Vuselela";
    }
    get remainingTextFieldCharacterCountFew() {
      return null;
    }
    get remainingTextFieldCharacterCountMany() {
      return null;
    }
    get remainingTextFieldCharacterCountOne() {
      return "1 uhlamvu olusele";
    }
    get remainingTextFieldCharacterCountOther() {
      return "$remainingCount izinhlamvu ezisele";
    }
    get remainingTextFieldCharacterCountTwo() {
      return null;
    }
    get remainingTextFieldCharacterCountZero() {
      return null;
    }
    get reorderItemDown() {
      return "Iya phansi";
    }
    get reorderItemLeft() {
      return "Hambisa kwesokunxele";
    }
    get reorderItemRight() {
      return "Yisa kwesokudla";
    }
    get reorderItemToEnd() {
      return "Yisa ekugcineni";
    }
    get reorderItemToStart() {
      return "Yisa ekuqaleni";
    }
    get reorderItemUp() {
      return "Iya phezulu";
    }
    get rowsPerPageTitle() {
      return "Imigqa ekhasini ngalinye:";
    }
    get saveButtonLabel() {
      return "LONDOLOZA";
    }
    get scriptCategory() {
      return typography.ScriptCategory.englishLike;
    }
    get searchFieldLabel() {
      return "Sesha";
    }
    get selectAllButtonLabel() {
      return "Khetha konke";
    }
    get selectYearSemanticsLabel() {
      return "Khetha unyaka";
    }
    get selectedRowCountTitleFew() {
      return null;
    }
    get selectedRowCountTitleMany() {
      return null;
    }
    get selectedRowCountTitleOne() {
      return "1 into ekhethiwe";
    }
    get selectedRowCountTitleOther() {
      return "$selectedRowCount izinto ezikhethiwe";
    }
    get selectedRowCountTitleTwo() {
      return null;
    }
    get selectedRowCountTitleZero() {
      return null;
    }
    get showAccountsLabel() {
      return "Bonisa ama-akhawunti";
    }
    get showMenuTooltip() {
      return "Bonisa imenyu";
    }
    get signedInLabel() {
      return "Ungene ngemvume";
    }
    get tabLabelRaw() {
      return "Ithebhu $tabIndex kwangu-$tabCount";
    }
    get timeOfDayFormatRaw() {
      return time.TimeOfDayFormat.H_colon_mm;
    }
    get timePickerDialHelpText() {
      return "KHETHA ISIKHATHI";
    }
    get timePickerHourLabel() {
      return "Ihora";
    }
    get timePickerHourModeAnnouncement() {
      return "Khetha amahora";
    }
    get timePickerInputHelpText() {
      return "FAKA ISIKHATHI";
    }
    get timePickerMinuteLabel() {
      return "Iminithi";
    }
    get timePickerMinuteModeAnnouncement() {
      return "Khetha amaminithi";
    }
    get unspecifiedDate() {
      return "Idethi";
    }
    get unspecifiedDateRange() {
      return "Ibanga ledethi";
    }
    get viewLicensesButtonLabel() {
      return "Buka amalayisense";
    }
  };
  (generated_material_localizations.MaterialLocalizationZu.new = function(opts) {
    let localeName = opts && 'localeName' in opts ? opts.localeName : "zu";
    let fullYearFormat = opts && 'fullYearFormat' in opts ? opts.fullYearFormat : null;
    let compactDateFormat = opts && 'compactDateFormat' in opts ? opts.compactDateFormat : null;
    let shortDateFormat = opts && 'shortDateFormat' in opts ? opts.shortDateFormat : null;
    let mediumDateFormat = opts && 'mediumDateFormat' in opts ? opts.mediumDateFormat : null;
    let longDateFormat = opts && 'longDateFormat' in opts ? opts.longDateFormat : null;
    let yearMonthFormat = opts && 'yearMonthFormat' in opts ? opts.yearMonthFormat : null;
    let shortMonthDayFormat = opts && 'shortMonthDayFormat' in opts ? opts.shortMonthDayFormat : null;
    let decimalFormat = opts && 'decimalFormat' in opts ? opts.decimalFormat : null;
    let twoDigitZeroPaddedFormat = opts && 'twoDigitZeroPaddedFormat' in opts ? opts.twoDigitZeroPaddedFormat : null;
    generated_material_localizations.MaterialLocalizationZu.__proto__.new.call(this, {localeName: localeName, fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
    ;
  }).prototype = generated_material_localizations.MaterialLocalizationZu.prototype;
  dart.addTypeTests(generated_material_localizations.MaterialLocalizationZu);
  dart.addTypeCaches(generated_material_localizations.MaterialLocalizationZu);
  dart.setGetterSignature(generated_material_localizations.MaterialLocalizationZu, () => ({
    __proto__: dart.getGetters(generated_material_localizations.MaterialLocalizationZu.__proto__),
    aboutListTileTitleRaw: core.String,
    alertDialogLabel: core.String,
    anteMeridiemAbbreviation: core.String,
    backButtonTooltip: core.String,
    calendarModeButtonLabel: core.String,
    cancelButtonLabel: core.String,
    closeButtonLabel: core.String,
    closeButtonTooltip: core.String,
    collapsedIconTapHint: core.String,
    continueButtonLabel: core.String,
    copyButtonLabel: core.String,
    cutButtonLabel: core.String,
    dateHelpText: core.String,
    dateInputLabel: core.String,
    dateOutOfRangeLabel: core.String,
    datePickerHelpText: core.String,
    dateRangeEndDateSemanticLabelRaw: core.String,
    dateRangeEndLabel: core.String,
    dateRangePickerHelpText: core.String,
    dateRangeStartDateSemanticLabelRaw: core.String,
    dateRangeStartLabel: core.String,
    dateSeparator: core.String,
    deleteButtonTooltip: core.String,
    dialModeButtonLabel: core.String,
    dialogLabel: core.String,
    drawerLabel: core.String,
    expandedIconTapHint: core.String,
    firstPageTooltip: core.String,
    hideAccountsLabel: core.String,
    inputDateModeButtonLabel: core.String,
    inputTimeModeButtonLabel: core.String,
    invalidDateFormatLabel: core.String,
    invalidDateRangeLabel: core.String,
    invalidTimeLabel: core.String,
    keyboardKeyAlt: core.String,
    keyboardKeyAltGraph: core.String,
    keyboardKeyBackspace: core.String,
    keyboardKeyCapsLock: core.String,
    keyboardKeyChannelDown: core.String,
    keyboardKeyChannelUp: core.String,
    keyboardKeyControl: core.String,
    keyboardKeyDelete: core.String,
    keyboardKeyEject: core.String,
    keyboardKeyEnd: core.String,
    keyboardKeyEscape: core.String,
    keyboardKeyFn: core.String,
    keyboardKeyHome: core.String,
    keyboardKeyInsert: core.String,
    keyboardKeyMeta: core.String,
    keyboardKeyMetaMacOs: core.String,
    keyboardKeyMetaWindows: core.String,
    keyboardKeyNumLock: core.String,
    keyboardKeyNumpad0: core.String,
    keyboardKeyNumpad1: core.String,
    keyboardKeyNumpad2: core.String,
    keyboardKeyNumpad3: core.String,
    keyboardKeyNumpad4: core.String,
    keyboardKeyNumpad5: core.String,
    keyboardKeyNumpad6: core.String,
    keyboardKeyNumpad7: core.String,
    keyboardKeyNumpad8: core.String,
    keyboardKeyNumpad9: core.String,
    keyboardKeyNumpadAdd: core.String,
    keyboardKeyNumpadComma: core.String,
    keyboardKeyNumpadDecimal: core.String,
    keyboardKeyNumpadDivide: core.String,
    keyboardKeyNumpadEnter: core.String,
    keyboardKeyNumpadEqual: core.String,
    keyboardKeyNumpadMultiply: core.String,
    keyboardKeyNumpadParenLeft: core.String,
    keyboardKeyNumpadParenRight: core.String,
    keyboardKeyNumpadSubtract: core.String,
    keyboardKeyPageDown: core.String,
    keyboardKeyPageUp: core.String,
    keyboardKeyPower: core.String,
    keyboardKeyPowerOff: core.String,
    keyboardKeyPrintScreen: core.String,
    keyboardKeyScrollLock: core.String,
    keyboardKeySelect: core.String,
    keyboardKeySpace: core.String,
    lastPageTooltip: core.String,
    licensesPackageDetailTextOther: core.String,
    licensesPageTitle: core.String,
    menuBarMenuLabel: core.String,
    modalBarrierDismissLabel: core.String,
    moreButtonTooltip: core.String,
    nextMonthTooltip: core.String,
    nextPageTooltip: core.String,
    okButtonLabel: core.String,
    openAppDrawerTooltip: core.String,
    pageRowsInfoTitleRaw: core.String,
    pageRowsInfoTitleApproximateRaw: core.String,
    pasteButtonLabel: core.String,
    popupMenuLabel: core.String,
    postMeridiemAbbreviation: core.String,
    previousMonthTooltip: core.String,
    previousPageTooltip: core.String,
    refreshIndicatorSemanticLabel: core.String,
    remainingTextFieldCharacterCountOther: core.String,
    reorderItemDown: core.String,
    reorderItemLeft: core.String,
    reorderItemRight: core.String,
    reorderItemToEnd: core.String,
    reorderItemToStart: core.String,
    reorderItemUp: core.String,
    rowsPerPageTitle: core.String,
    saveButtonLabel: core.String,
    scriptCategory: typography.ScriptCategory,
    searchFieldLabel: core.String,
    selectAllButtonLabel: core.String,
    selectYearSemanticsLabel: core.String,
    selectedRowCountTitleOther: core.String,
    showAccountsLabel: core.String,
    showMenuTooltip: core.String,
    signedInLabel: core.String,
    tabLabelRaw: core.String,
    timeOfDayFormatRaw: time.TimeOfDayFormat,
    timePickerDialHelpText: core.String,
    timePickerHourLabel: core.String,
    timePickerHourModeAnnouncement: core.String,
    timePickerInputHelpText: core.String,
    timePickerMinuteLabel: core.String,
    timePickerMinuteModeAnnouncement: core.String,
    unspecifiedDate: core.String,
    unspecifiedDateRange: core.String,
    viewLicensesButtonLabel: core.String
  }));
  dart.setLibraryUri(generated_material_localizations.MaterialLocalizationZu, I[2]);
  generated_material_localizations.getMaterialTranslation = function getMaterialTranslation(locale, fullYearFormat, compactDateFormat, shortDateFormat, mediumDateFormat, longDateFormat, yearMonthFormat, shortMonthDayFormat, decimalFormat, twoDigitZeroPaddedFormat) {
    switch (locale.languageCode) {
      case "af":
        {
          return new generated_material_localizations.MaterialLocalizationAf.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "am":
        {
          return new generated_material_localizations.MaterialLocalizationAm.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "ar":
        {
          return new generated_material_localizations.MaterialLocalizationAr.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "as":
        {
          return new generated_material_localizations.MaterialLocalizationAs.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "az":
        {
          return new generated_material_localizations.MaterialLocalizationAz.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "be":
        {
          return new generated_material_localizations.MaterialLocalizationBe.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "bg":
        {
          return new generated_material_localizations.MaterialLocalizationBg.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "bn":
        {
          return new generated_material_localizations.MaterialLocalizationBn.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "bs":
        {
          return new generated_material_localizations.MaterialLocalizationBs.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "ca":
        {
          return new generated_material_localizations.MaterialLocalizationCa.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "cs":
        {
          return new generated_material_localizations.MaterialLocalizationCs.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "da":
        {
          return new generated_material_localizations.MaterialLocalizationDa.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "de":
        {
          {
            switch (locale.countryCode) {
              case "CH":
                {
                  return new generated_material_localizations.MaterialLocalizationDeCh.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
            }
            return new generated_material_localizations.MaterialLocalizationDe.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
          }
        }
      case "el":
        {
          return new generated_material_localizations.MaterialLocalizationEl.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "en":
        {
          {
            switch (locale.countryCode) {
              case "AU":
                {
                  return new generated_material_localizations.MaterialLocalizationEnAu.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "CA":
                {
                  return new generated_material_localizations.MaterialLocalizationEnCa.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "GB":
                {
                  return new generated_material_localizations.MaterialLocalizationEnGb.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "IE":
                {
                  return new generated_material_localizations.MaterialLocalizationEnIe.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "IN":
                {
                  return new generated_material_localizations.MaterialLocalizationEnIn.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "NZ":
                {
                  return new generated_material_localizations.MaterialLocalizationEnNz.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "SG":
                {
                  return new generated_material_localizations.MaterialLocalizationEnSg.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "ZA":
                {
                  return new generated_material_localizations.MaterialLocalizationEnZa.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
            }
            return new generated_material_localizations.MaterialLocalizationEn.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
          }
        }
      case "es":
        {
          {
            switch (locale.countryCode) {
              case "419":
                {
                  return new generated_material_localizations.MaterialLocalizationEs419.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "AR":
                {
                  return new generated_material_localizations.MaterialLocalizationEsAr.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "BO":
                {
                  return new generated_material_localizations.MaterialLocalizationEsBo.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "CL":
                {
                  return new generated_material_localizations.MaterialLocalizationEsCl.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "CO":
                {
                  return new generated_material_localizations.MaterialLocalizationEsCo.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "CR":
                {
                  return new generated_material_localizations.MaterialLocalizationEsCr.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "DO":
                {
                  return new generated_material_localizations.MaterialLocalizationEsDo.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "EC":
                {
                  return new generated_material_localizations.MaterialLocalizationEsEc.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "GT":
                {
                  return new generated_material_localizations.MaterialLocalizationEsGt.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "HN":
                {
                  return new generated_material_localizations.MaterialLocalizationEsHn.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "MX":
                {
                  return new generated_material_localizations.MaterialLocalizationEsMx.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "NI":
                {
                  return new generated_material_localizations.MaterialLocalizationEsNi.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "PA":
                {
                  return new generated_material_localizations.MaterialLocalizationEsPa.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "PE":
                {
                  return new generated_material_localizations.MaterialLocalizationEsPe.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "PR":
                {
                  return new generated_material_localizations.MaterialLocalizationEsPr.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "PY":
                {
                  return new generated_material_localizations.MaterialLocalizationEsPy.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "SV":
                {
                  return new generated_material_localizations.MaterialLocalizationEsSv.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "US":
                {
                  return new generated_material_localizations.MaterialLocalizationEsUs.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "UY":
                {
                  return new generated_material_localizations.MaterialLocalizationEsUy.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "VE":
                {
                  return new generated_material_localizations.MaterialLocalizationEsVe.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
            }
            return new generated_material_localizations.MaterialLocalizationEs.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
          }
        }
      case "et":
        {
          return new generated_material_localizations.MaterialLocalizationEt.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "eu":
        {
          return new generated_material_localizations.MaterialLocalizationEu.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "fa":
        {
          return new generated_material_localizations.MaterialLocalizationFa.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "fi":
        {
          return new generated_material_localizations.MaterialLocalizationFi.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "fil":
        {
          return new generated_material_localizations.MaterialLocalizationFil.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "fr":
        {
          {
            switch (locale.countryCode) {
              case "CA":
                {
                  return new generated_material_localizations.MaterialLocalizationFrCa.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
            }
            return new generated_material_localizations.MaterialLocalizationFr.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
          }
        }
      case "gl":
        {
          return new generated_material_localizations.MaterialLocalizationGl.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "gsw":
        {
          return new generated_material_localizations.MaterialLocalizationGsw.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "gu":
        {
          return new generated_material_localizations.MaterialLocalizationGu.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "he":
        {
          return new generated_material_localizations.MaterialLocalizationHe.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "hi":
        {
          return new generated_material_localizations.MaterialLocalizationHi.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "hr":
        {
          return new generated_material_localizations.MaterialLocalizationHr.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "hu":
        {
          return new generated_material_localizations.MaterialLocalizationHu.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "hy":
        {
          return new generated_material_localizations.MaterialLocalizationHy.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "id":
        {
          return new generated_material_localizations.MaterialLocalizationId.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "is":
        {
          return new generated_material_localizations.MaterialLocalizationIs.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "it":
        {
          return new generated_material_localizations.MaterialLocalizationIt.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "ja":
        {
          return new generated_material_localizations.MaterialLocalizationJa.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "ka":
        {
          return new generated_material_localizations.MaterialLocalizationKa.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "kk":
        {
          return new generated_material_localizations.MaterialLocalizationKk.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "km":
        {
          return new generated_material_localizations.MaterialLocalizationKm.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "kn":
        {
          return new generated_material_localizations.MaterialLocalizationKn.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "ko":
        {
          return new generated_material_localizations.MaterialLocalizationKo.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "ky":
        {
          return new generated_material_localizations.MaterialLocalizationKy.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "lo":
        {
          return new generated_material_localizations.MaterialLocalizationLo.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "lt":
        {
          return new generated_material_localizations.MaterialLocalizationLt.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "lv":
        {
          return new generated_material_localizations.MaterialLocalizationLv.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "mk":
        {
          return new generated_material_localizations.MaterialLocalizationMk.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "ml":
        {
          return new generated_material_localizations.MaterialLocalizationMl.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "mn":
        {
          return new generated_material_localizations.MaterialLocalizationMn.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "mr":
        {
          return new generated_material_localizations.MaterialLocalizationMr.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "ms":
        {
          return new generated_material_localizations.MaterialLocalizationMs.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "my":
        {
          return new generated_material_localizations.MaterialLocalizationMy.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "nb":
        {
          return new generated_material_localizations.MaterialLocalizationNb.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "ne":
        {
          return new generated_material_localizations.MaterialLocalizationNe.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "nl":
        {
          return new generated_material_localizations.MaterialLocalizationNl.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "no":
        {
          return new generated_material_localizations.MaterialLocalizationNo.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "or":
        {
          return new generated_material_localizations.MaterialLocalizationOr.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "pa":
        {
          return new generated_material_localizations.MaterialLocalizationPa.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "pl":
        {
          return new generated_material_localizations.MaterialLocalizationPl.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "ps":
        {
          return new generated_material_localizations.MaterialLocalizationPs.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "pt":
        {
          {
            switch (locale.countryCode) {
              case "PT":
                {
                  return new generated_material_localizations.MaterialLocalizationPtPt.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
            }
            return new generated_material_localizations.MaterialLocalizationPt.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
          }
        }
      case "ro":
        {
          return new generated_material_localizations.MaterialLocalizationRo.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "ru":
        {
          return new generated_material_localizations.MaterialLocalizationRu.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "si":
        {
          return new generated_material_localizations.MaterialLocalizationSi.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "sk":
        {
          return new generated_material_localizations.MaterialLocalizationSk.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "sl":
        {
          return new generated_material_localizations.MaterialLocalizationSl.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "sq":
        {
          return new generated_material_localizations.MaterialLocalizationSq.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "sr":
        {
          {
            switch (locale.scriptCode) {
              case "Cyrl":
                {
                  {
                    return new generated_material_localizations.MaterialLocalizationSrCyrl.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                  }
                }
              case "Latn":
                {
                  {
                    return new generated_material_localizations.MaterialLocalizationSrLatn.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                  }
                }
            }
            return new generated_material_localizations.MaterialLocalizationSr.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
          }
        }
      case "sv":
        {
          return new generated_material_localizations.MaterialLocalizationSv.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "sw":
        {
          return new generated_material_localizations.MaterialLocalizationSw.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "ta":
        {
          return new generated_material_localizations.MaterialLocalizationTa.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "te":
        {
          return new generated_material_localizations.MaterialLocalizationTe.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "th":
        {
          return new generated_material_localizations.MaterialLocalizationTh.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "tl":
        {
          return new generated_material_localizations.MaterialLocalizationTl.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "tr":
        {
          return new generated_material_localizations.MaterialLocalizationTr.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "uk":
        {
          return new generated_material_localizations.MaterialLocalizationUk.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "ur":
        {
          return new generated_material_localizations.MaterialLocalizationUr.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "uz":
        {
          return new generated_material_localizations.MaterialLocalizationUz.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "vi":
        {
          return new generated_material_localizations.MaterialLocalizationVi.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
      case "zh":
        {
          {
            switch (locale.scriptCode) {
              case "Hans":
                {
                  {
                    return new generated_material_localizations.MaterialLocalizationZhHans.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                  }
                }
              case "Hant":
                {
                  {
                    switch (locale.countryCode) {
                      case "HK":
                        {
                          return new generated_material_localizations.MaterialLocalizationZhHantHk.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                        }
                      case "TW":
                        {
                          return new generated_material_localizations.MaterialLocalizationZhHantTw.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                        }
                    }
                    return new generated_material_localizations.MaterialLocalizationZhHant.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                  }
                }
            }
            switch (locale.countryCode) {
              case "HK":
                {
                  return new generated_material_localizations.MaterialLocalizationZhHantHk.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
              case "TW":
                {
                  return new generated_material_localizations.MaterialLocalizationZhHantTw.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
                }
            }
            return new generated_material_localizations.MaterialLocalizationZh.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
          }
        }
      case "zu":
        {
          return new generated_material_localizations.MaterialLocalizationZu.new({fullYearFormat: fullYearFormat, compactDateFormat: compactDateFormat, shortDateFormat: shortDateFormat, mediumDateFormat: mediumDateFormat, longDateFormat: longDateFormat, yearMonthFormat: yearMonthFormat, shortMonthDayFormat: shortMonthDayFormat, decimalFormat: decimalFormat, twoDigitZeroPaddedFormat: twoDigitZeroPaddedFormat});
        }
    }
    if (!false) dart.assertFailed("getMaterialTranslation() called for unsupported locale \"" + dart.str(locale) + "\"", I[3], 39905, 10, "false");
    return null;
  };
  dart.defineLazy(generated_material_localizations, {
    /*generated_material_localizations.kMaterialSupportedLanguages*/get kMaterialSupportedLanguages() {
      return T.HashSetOfString().from(C[15] || CT.C15);
    }
  }, false);
  dart.trackLibraries("packages/flutter_localizations/src/material_localizations.dart", {
    "package:flutter_localizations/src/material_localizations.dart": material_localizations$,
    "package:flutter_localizations/src/l10n/generated_material_localizations.dart": generated_material_localizations
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["material_localizations.dart","l10n/generated_material_localizations.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAwHe;;;;;;IACS;;;;;;IACA;;;;;;IACA;;;;;;IACA;;;;;;IACA;;;;;;IACA;;;;;;IACA;;;;;;IACE;;;;;;IACA;;;;;;eAGI;UAAkB;AAC5C,cAAQ,qBAAe,6CAAuC,qBAAqB;;;AAE/E,kBAAO,AAA0B,yCAAO,AAAU,SAAD;;;;AAEjD,kBAAO,oBAAc,AAAU,SAAD;;;;AAEpB,uBAAO,AAAU,SAAD;AAC1B,kBAAO,oBAAc,AAAK,IAAD,KAAI,IAAI,KAAK,IAAI;;;IAEhD;iBAG8B;AAC5B,YAAO,AAA0B,yCAAO,AAAU,SAAD;IACnD;eAG2B;AACzB,YAAO,AAAgB,+BAAO,IAAI;IACpC;sBAGkC;AAChC,YAAO,AAAmB,kCAAO,IAAI;IACvC;oBAGgC;AAC9B,YAAO,AAAiB,gCAAO,IAAI;IACrC;qBAGiC;AAC/B,YAAO,AAAkB,iCAAO,IAAI;IACtC;mBAG+B;AAC7B,YAAO,AAAgB,+BAAO,IAAI;IACpC;oBAGgC;AAC9B,YAAO,AAAiB,gCAAO,IAAI;IACrC;wBAGoC;AAClC,YAAO,AAAqB,oCAAO,IAAI;IACzC;qBAGmC;AACjC;AACE,cAAO,AAAY,YAAD,WAAW,AAAmB,sCAAY,WAAW,IAAI;;;AAC3E;AACA,gBAAO;;;;IAEX;;AAIE,YAAO,AAAgB,AAAY;IACrC;;AAG+B,YAAiD,EAAhD,AAAgB,AAAY,AAAe,oDAAE,YAAK;IAAC;kBAG1D;AACvB,YAAO,AAAe,8BAAO,MAAM;IACrC;oBAGiC;UAAkB;AASpC,iBAAO,gBAAW,SAAS,0BAAyB,qBAAqB;AACzE,mBAAS,kBAAa,SAAS;AAC5C,cAAQ,6CAAuC,qBAAqB;;;AAEhE,kBAAS,AAA6C,KAAzC,SAAE,MAAM,SAA8B,eAA3B,uBAAiB,SAAS;;;;;AAGlD,kBAAS,AAAa,KAAT,SAAE,MAAM;;;;AAErB,kBAAS,AAAa,KAAT,SAAE,MAAM;;;;AAErB,kBAAqC,AAAiB,gBAA5C,uBAAiB,SAAS,KAAG,MAAE,IAAI,SAAE,MAAM;;;;AAErD,kBAAS,AAAe,KAAX,WAAI,MAAM;;;IAE7B;uBAEmC;AACjC,cAAQ,AAAU,SAAD;;;AAEb,kBAAO;;;;AAEP,kBAAO;;;IAEb;oCAQ8C;AAC5C,YAAO,AAAmC,wDAAa,aAAc,aAAa;IACpF;kCAQ4C;AAC1C,YAAO,AAAiC,sDAAa,aAAc,aAAa;IAClF;uBAQiC;AAClB,iBAAO;AACpB,YAAO,AAAK,KAAD,gBAAc,oBAAqB,eAAe;IAC/D;sBAe6B,UAAc,SAAa,UAAe;AAC7D,iBAAO,qBAAqB,GAAG,uCAAkC,IAArC;AACP,MAA7B,AAAK,IAAD,WAAJ,OAAS,4BAAJ;AACL,YAAO,AAAK,IAAD,6BAAU,AAAiG,OAA7F,qBAAW;AACpC,YAAO,AACJ,AACA,AACA,KAHQ,gBACK,aAAc,mBAAc,QAAQ,kBACpC,YAAa,mBAAc,OAAO,kBAClC,aAAc,mBAAc,QAAQ;IACtD;;UAQ+B;UAAuB;AACpD,YAAO,AAAS,QAAD,IAAI;AACnB,YAAO,AAAS,QAAD,IAAI;AACN,qBAAW;AACxB,YAAO,AACJ,AACA,SAFY,gBACC,aAAc,mBAAc,QAAQ,kBACpC,aAAc,mBAAc,QAAQ;IACtD;;AAeyC;IAAI;;AAeL;IAAI;;AAeJ;IAAI;;AAeJ;IAAI;;AAeH;IAAI;0BAkBZ;AAC/B,YAAiB,AASf,oCARA,gBAAgB,SACV,qCACD,oCACA,oCACA,qCACC,uCACC,yCACC,oCACK,qBAAsB,mBAAc,gBAAgB;IACrE;;UAuBuC;AACrC,YAAO,AAAsB,qBAAD;AAC5B,UAAI,qBAAqB;AACvB,cAAO,6CAAoB;;AAE7B,YAAO;IACT;;AAgB6C;IAAI;;AAeL;IAAI;;AAgBJ;IAAI;;AAgBH;IAAI;;AAgBL;IAAI;8BAmBX;AACnC,YAAiB,AASf,oCARA,YAAY,SACN,yCACD,wCACA,yCACC,yCACD,0CACE,6CACC,oCACK,iBAAkB,mBAAc,YAAY;IAC7D;;AAgBoD;IAAI;;AAeL;IAAI;;AAgBJ;IAAI;;AAgBH;IAAI;;AAgBL;IAAI;qCAmBX;AAC1C,YAAiB,AASf,oCARA,SAAS,SACH,gDACD,+CACA,gDACC,gDACD,iDACE,oDACC,oCACK,mBAAoB,mBAAc,SAAS;IAC5D;;;QA3jBkB;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACE;QACA;UACjB,AAAW,UAAD;IACL,oBAAE,UAAU;UACjB,AAAe,cAAD;IACL,wBAAE,cAAc;UACzB,AAAkB,iBAAD;IACL,2BAAE,iBAAiB;UAC/B,AAAgB,eAAD;IACL,yBAAE,eAAe;UAC3B,AAAiB,gBAAD;IACL,0BAAE,gBAAgB;UAC7B,AAAe,cAAD;IACL,wBAAE,cAAc;UACzB,AAAgB,eAAD;IACL,yBAAE,eAAe;UAC3B,AAAoB,mBAAD;IACL,6BAAE,mBAAmB;UACnC,AAAc,aAAD;IACL,uBAAE,aAAa;UACvB,AAAyB,wBAAD;IACL,kCAAE,wBAAwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAwiBC,4DAAQ;;;MAuBhB,6DAAS;;;;;;;;gBA2BnC;AAAW,YAAA,AAA4B,uEAAS,AAAO,MAAD;IAAc;SAKlD;AACxC,WAAO,iBAAY,MAAM;AACzB,YAAO,AAAoB,0FAAY,MAAM,EAAE;AACX,QAA7B;AAEQ,yBAAuB,8BAAoB,AAAO,MAAD;AAC9D,cACE,AAAO,AAAW,MAAZ,gBAAe,UAAU,qBAC/B,oEAAwD,MAAM,iBAC9D,cAAW,UAAU;AAGP;AACA;AACA;AACA;AACA;AACA;AACA;AAChB,YAAoB,oCAAa,UAAU;AACK,UAA9C,iBAAiC,6BAAE,UAAU;AACM,UAAnD,oBAAoC,+BAAI,UAAU;AACC,UAAnD,kBAAkC,iCAAM,UAAU;AACE,UAApD,mBAAmC,iCAAM,UAAU;AACI,UAAvD,iBAAiC,sCAAW,UAAU;AACH,UAAnD,kBAAkC,iCAAM,UAAU;AACI,UAAtD,sBAAsC,gCAAK,UAAU;cAChD,KAAoB,oCAAa,AAAO,MAAD;AACW,UAAvD,iBAAiC,6BAAE,AAAO,MAAD;AACmB,UAA5D,oBAAoC,+BAAI,AAAO,MAAD;AACc,UAA5D,kBAAkC,iCAAM,AAAO,MAAD;AACe,UAA7D,mBAAmC,iCAAM,AAAO,MAAD;AACiB,UAAhE,iBAAiC,sCAAW,AAAO,MAAD;AACU,UAA5D,kBAAkC,iCAAM,AAAO,MAAD;AACiB,UAA/D,sBAAsC,gCAAK,AAAO,MAAD;;AAEb,UAApC,iBAAiC;AACQ,UAAzC,oBAAoC;AACK,UAAzC,kBAAkC;AACQ,UAA1C,mBAAmC;AACU,UAA7C,iBAAiC;AACQ,UAAzC,kBAAkC;AACU,UAA5C,sBAAsC;;AAGtB;AACA;AAClB,YAAsB,wCAAa,UAAU;AACiB,UAA5D,gBAAkC,0CAAe,UAAU;AACG,UAA9D,2BAAgC,+BAAa,MAAM,UAAU;cACxD,KAAsB,wCAAa,AAAO,MAAD;AACuB,UAArE,gBAAkC,0CAAe,AAAO,MAAD;AACgB,UAAvE,2BAAgC,+BAAa,MAAM,AAAO,MAAD;;AAEP,UAAlD,gBAAkC;AACgB,UAAlD,2BAAgC,+BAAa;;AAG/C,cAAO,wDAWN,eAX+C,wDAC9C,MAAM,EACN,cAAc,EACd,iBAAiB,EACjB,eAAe,EACf,gBAAgB,EAChB,cAAc,EACd,eAAe,EACf,mBAAmB,EACnB,aAAa,EACb,wBAAwB;;IAG9B;iBAGiD;;AAAQ;IAAK;;AAGzC,YAAA,AAAqF,oDAA7C,AAA4B,yEAAO;IAAU;;;AArFpG;;EAAgC;;;;;;;;;;;;;MAKkB,0EAAmB;YAA0C;;;6EAnBnE;AAClD,YAAQ,QAAQ;;;;;;AAKZ,gBAAO,SAAQ;;;;;AAGf,gBAAuB;;;EAE7B;;;;;;;;;;;;;;;;ACjqBsC;IAA4B;;AAGjC;IAAY;;AAGJ;IAAK;;AAGZ;IAAO;;AAGD;IAAwB;;AAG9B;IAAY;;AAGb;IAAU;;AAGR;IAAU;;AAGR;IAAS;;AAGV;IAAY;;AAGhB;IAAS;;AAGV;IAAM;;AAGR;IAAY;;AAGV;IAAe;;AAGV;IAAc;;AAGf;IAAY;;AAGE;IAAsB;;AAGrC;IAAW;;AAGL;IAAY;;AAGD;IAAuB;;AAGtC;IAAY;;AAGlB;IAAG;;AAGG;IAAS;;AAGT;IAAqC;;AAG7C;IAAS;;AAGT;IAAkB;;AAGV;IAAQ;;AAGX;IAAe;;AAGd;IAAoB;;AAGb;IAAsB;;AAGtB;IAA+B;;AAGjC;IAAoB;;AAGrB;IAAkB;;AAGvB;IAAwB;;AAG1B;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAQ;;AAGT;IAAe;;AAGD;IAAI;;AAGH;IAAI;;AAGL;IAAY;;AAGX;IAA0B;;AAG3B;IAAI;;AAGH;IAAa;;AAG1B;IAAW;;AAGZ;IAAoB;;AAGZ;IAAU;;AAGjB;IAAK;;AAGN;IAAgB;;AAGjB;IAAiB;;AAGnB;IAAI;;AAGG;IAA2B;;AAG3B;IAAmC;;AAGxB;IAA4C;;AAG3D;IAAM;;AAGR;IAAiB;;AAGP;IAAK;;AAGT;IAAc;;AAGf;IAAe;;AAGL;IAAS;;AAGF;IAAI;;AAGH;IAAI;;AAGL;IAAgB;;AAGf;IAAgC;;AAGjC;IAAI;;AAGH;IAAI;;AAG1B;IAAU;;AAGV;IAAgB;;AAGf;IAAe;;AAGf;IAAoB;;AAGlB;IAAoB;;AAGzB;IAAU;;AAGP;IAAiB;;AAGlB;IAAO;;AAGA,YAAe;IAAW;;AAGhC;IAAM;;AAGF;IAAY;;AAGR;IAAW;;AAGV;IAAI;;AAGH;IAAI;;AAGL;IAAkB;;AAGjB;IAAoC;;AAGrC;IAAI;;AAGH;IAAI;;AAGb;IAAe;;AAGjB;IAAa;;AAGf;IAAW;;AAGb;IAAkC;;AAGlB,YAAgB;IAAU;;AAG/B;IAAU;;AAGb;IAAK;;AAGM;IAAU;;AAGjB;IAAa;;AAGf;IAAQ;;AAGG;IAAa;;AAG9B;IAAO;;AAGF;IAAY;;AAGT;IAAiB;;;QAjb/C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAsB;;AAG3B;IAAM;;AAGE;IAAK;;AAGZ;IAAM;;AAGA;IAAkB;;AAGxB;IAAK;;AAGN;IAAI;;AAGF;IAAI;;AAGF;IAAK;;AAGN;IAAK;;AAGT;IAAI;;AAGL;IAAK;;AAGP;IAAY;;AAGV;IAAS;;AAGJ;IAAU;;AAGX;IAAS;;AAGK;IAAqB;;AAGpC;IAAU;;AAGJ;IAAU;;AAGC;IAAsB;;AAGrC;IAAW;;AAGjB;IAAG;;AAGG;IAAK;;AAGL;IAAqB;;AAG7B;IAAM;;AAGN;IAAU;;AAGF;IAAM;;AAGT;IAAY;;AAGX;IAAY;;AAGL;IAAY;;AAGZ;IAAoB;;AAGtB;IAAe;;AAGhB;IAAc;;AAGnB;IAAe;;AAGjB;IAAK;;AAGA;IAAO;;AAGN;IAAY;;AAGb;IAAW;;AAGR;IAAW;;AAGb;IAAW;;AAGb;IAAM;;AAGP;IAAK;;AAGN;IAAM;;AAGR;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAK;;AAGH;IAAM;;AAGR;IAAI;;AAGC;IAAM;;AAGJ;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAM;;AAGP;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAK;;AAGF;IAAS;;AAGN;IAAc;;AAGf;IAAa;;AAGjB;IAAK;;AAGN;IAAM;;AAGP;IAAW;;AAGG;IAAI;;AAGH;IAAI;;AAGL;IAAO;;AAGN;IAAqB;;AAGtB;IAAI;;AAGH;IAAa;;AAG1B;IAAM;;AAGP;IAAc;;AAGN;IAAO;;AAGd;IAAM;;AAGP;IAAQ;;AAGT;IAAQ;;AAGV;IAAI;;AAGG;IAAe;;AAGf;IAAoC;;AAGzB;IAAwC;;AAGvD;IAAK;;AAGP;IAAY;;AAGF;IAAM;;AAGV;IAAQ;;AAGT;IAAQ;;AAGE;IAAK;;AAGE;IAAI;;AAGH;IAAI;;AAGL;IAAY;;AAGX;IAA6B;;AAG9B;IAAI;;AAGH;IAAI;;AAG1B;IAAW;;AAGX;IAAW;;AAGV;IAAW;;AAGX;IAAa;;AAGX;IAAc;;AAGnB;IAAW;;AAGR;IAAW;;AAGZ;IAAO;;AAGA,YAAe;IAAW;;AAGhC;IAAM;;AAGF;IAAU;;AAGN;IAAU;;AAGT;IAAI;;AAGH;IAAI;;AAGL;IAAa;;AAGZ;IAAgC;;AAGjC;IAAI;;AAGH;IAAI;;AAGb;IAAY;;AAGd;IAAU;;AAGZ;IAAW;;AAGb;IAA0B;;AAGV,YAAgB;IAAU;;AAG/B;IAAS;;AAGZ;IAAK;;AAGM;IAAW;;AAGlB;IAAU;;AAGZ;IAAK;;AAGM;IAAa;;AAG9B;IAAI;;AAGC;IAAW;;AAGR;IAAa;;;QAjb3C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA6B;;AAGlC;IAAO;;AAGC;IAAG;;AAGV;IAAM;;AAGA;IAAqB;;AAG3B;IAAO;;AAGR;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAQ;;AAGZ;IAAK;;AAGN;IAAI;;AAGN;IAAY;;AAGV;IAAe;;AAGV;IAAsB;;AAGvB;IAAgB;;AAGF;IAA2B;;AAG1C;IAAgB;;AAGV;IAAe;;AAGJ;IAAwB;;AAGvC;IAAa;;AAGnB;IAAG;;AAGG;IAAK;;AAGL;IAAqC;;AAG7C;IAAW;;AAGX;IAAY;;AAGJ;IAAO;;AAGV;IAAe;;AAGd;IAAgB;;AAGT;IAAqB;;AAGrB;IAA8B;;AAGhC;IAAmB;;AAGpB;IAAkB;;AAGvB;IAAuB;;AAGzB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAgB;;AAGlB;IAAgB;;AAGlB;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAS;;AAGT;IAAS;;AAGT;IAAS;;AAGT;IAAS;;AAGT;IAAS;;AAGT;IAAS;;AAGT;IAAS;;AAGT;IAAS;;AAGT;IAAS;;AAGT;IAAS;;AAGP;IAAe;;AAGb;IAAW;;AAGT;IAAU;;AAGX;IAAgB;;AAGjB;IAAe;;AAGf;IAAiB;;AAGd;IAAe;;AAGd;IAAgB;;AAGf;IAAgB;;AAGlB;IAAe;;AAGrB;IAAQ;;AAGV;IAAM;;AAGP;IAAY;;AAGT;IAAY;;AAGT;IAAc;;AAGf;IAAa;;AAGjB;IAAgB;;AAGjB;IAAe;;AAGhB;IAAgB;;AAGF;IAAuB;;AAGtB;IAAwB;;AAGzB;IAAY;;AAGX;IAAsB;;AAGvB;IAA0B;;AAGzB;IAAe;;AAG5B;IAAU;;AAGX;IAAoB;;AAGZ;IAAK;;AAGZ;IAAQ;;AAGT;IAAc;;AAGf;IAAgB;;AAGlB;IAAO;;AAGA;IAAkB;;AAGlB;IAAgD;;AAGrC;IAAwD;;AAGvE;IAAK;;AAGP;IAAc;;AAGJ;IAAG;;AAGP;IAAc;;AAGf;IAAgB;;AAGN;IAAa;;AAGN;IAA8B;;AAG7B;IAAgC;;AAGjC;IAAgB;;AAGf;IAA4B;;AAG7B;IAAkC;;AAGjC;IAAgB;;AAGtC;IAAW;;AAGX;IAAY;;AAGX;IAAY;;AAGZ;IAAuB;;AAGrB;IAAuB;;AAG5B;IAAW;;AAGR;IAAuB;;AAGxB;IAAK;;AAGE,YAAe;IAAI;;AAGzB;IAAK;;AAGD;IAAa;;AAGT;IAAc;;AAGb;IAAmC;;AAGlC;IAAqC;;AAGtC;IAAqB;;AAGpB;IAAmC;;AAGpC;IAAuC;;AAGtC;IAAuB;;AAGhC;IAAgB;;AAGlB;IAAa;;AAGf;IAAiB;;AAGnB;IAAuC;;AAGvB,YAAgB;IAAkB;;AAGvC;IAAc;;AAGjB;IAAM;;AAGK;IAAgB;;AAGvB;IAAa;;AAGf;IAAO;;AAGI;IAAgB;;AAGjC;IAAS;;AAGJ;IAAe;;AAGZ;IAAuB;;;QAjbrD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA0B;;AAG/B;IAAa;;AAGL;IAAW;;AAGlB;IAAW;;AAGL;IAAsB;;AAG5B;IAAW;;AAGZ;IAAU;;AAGR;IAAU;;AAGR;IAAa;;AAGd;IAAc;;AAGlB;IAAe;;AAGhB;IAAS;;AAGX;IAAY;;AAGV;IAAc;;AAGT;IAAe;;AAGhB;IAAiB;;AAGH;IAA2B;;AAG1C;IAAgB;;AAGV;IAAiB;;AAGN;IAA2B;;AAG1C;IAAgB;;AAGtB;IAAG;;AAGG;IAAK;;AAGL;IAAkC;;AAG1C;IAAQ;;AAGR;IAAiB;;AAGT;IAAY;;AAGf;IAAc;;AAGb;IAAsB;;AAGf;IAAkB;;AAGlB;IAA2B;;AAG7B;IAAgB;;AAGjB;IAAe;;AAGpB;IAAoB;;AAGtB;IAAK;;AAGA;IAAO;;AAGN;IAAU;;AAGX;IAAW;;AAGR;IAAY;;AAGd;IAAU;;AAGZ;IAAM;;AAGP;IAAK;;AAGN;IAAQ;;AAGV;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAM;;AAGN;IAAM;;AAGN;IAAM;;AAGN;IAAM;;AAGN;IAAM;;AAGN;IAAM;;AAGN;IAAM;;AAGN;IAAM;;AAGN;IAAM;;AAGN;IAAM;;AAGJ;IAAM;;AAGJ;IAAM;;AAGJ;IAAM;;AAGP;IAAM;;AAGP;IAAW;;AAGX;IAAM;;AAGH;IAAM;;AAGL;IAAM;;AAGL;IAAM;;AAGR;IAAM;;AAGZ;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAU;;AAGP;IAAiB;;AAGlB;IAAY;;AAGhB;IAAS;;AAGV;IAAO;;AAGR;IAAe;;AAGD;IAAI;;AAGH;IAAI;;AAGL;IAAkB;;AAGjB;IAA+B;;AAGhC;IAAI;;AAGH;IAAa;;AAG1B;IAAiB;;AAGlB;IAAe;;AAGP;IAAc;;AAGrB;IAAM;;AAGP;IAAa;;AAGd;IAAgB;;AAGlB;IAAS;;AAGF;IAAsB;;AAGtB;IAAgC;;AAGrB;IAAgC;;AAG/C;IAAY;;AAGd;IAAY;;AAGF;IAAS;;AAGb;IAAgB;;AAGjB;IAAmB;;AAGT;IAAe;;AAGR;IAAI;;AAGH;IAAI;;AAGL;IAAmB;;AAGlB;IAAkC;;AAGnC;IAAI;;AAGH;IAAI;;AAG1B;IAAqB;;AAGrB;IAA0B;;AAGzB;IAAyB;;AAGzB;IAAsB;;AAGpB;IAA0B;;AAG/B;IAAY;;AAGT;IAA2B;;AAG5B;IAAS;;AAGF,YAAe;IAAW;;AAGhC;IAAY;;AAGR;IAAgB;;AAGZ;IAAe;;AAGd;IAAI;;AAGH;IAAI;;AAGL;IAAyB;;AAGxB;IAA0C;;AAG3C;IAAI;;AAGH;IAAI;;AAGb;IAAsB;;AAGxB;IAAiB;;AAGnB;IAAiB;;AAGnB;IAA6B;;AAGb,YAAgB;IAAU;;AAG/B;IAAe;;AAGlB;IAAO;;AAGI;IAAe;;AAGtB;IAAU;;AAGZ;IAAO;;AAGI;IAAiB;;AAGlC;IAAO;;AAGF;IAAc;;AAGX;IAAsB;;;QAjbpD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA4B;;AAGjC;IAAU;;AAGF;IAAI;;AAGX;IAAM;;AAGA;IAAe;;AAGrB;IAAW;;AAGZ;IAAU;;AAGR;IAAU;;AAGR;IAAe;;AAGhB;IAAY;;AAGhB;IAAY;;AAGb;IAAO;;AAGT;IAAY;;AAGV;IAAkB;;AAGb;IAAkB;;AAGnB;IAAa;;AAGC;IAA0B;;AAGzC;IAAc;;AAGR;IAAc;;AAGH;IAA4B;;AAG3C;IAAgB;;AAGtB;IAAG;;AAGG;IAAO;;AAGP;IAA6B;;AAGrC;IAAQ;;AAGR;IAAoB;;AAGZ;IAAgB;;AAGnB;IAAgB;;AAGf;IAAoB;;AAGb;IAAmB;;AAGnB;IAA+B;;AAGjC;IAAgB;;AAGjB;IAAgB;;AAGrB;IAAwB;;AAG1B;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAY;;AAGT;IAAwB;;AAG1B;IAAyB;;AAG3B;IAAM;;AAGP;IAAK;;AAGN;IAAS;;AAGX;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAa;;AAGX;IAAY;;AAGd;IAAM;;AAGD;IAAK;;AAGH;IAAK;;AAGT;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAiB;;AAGjB;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAc;;AAGhB;IAAe;;AAGhB;IAAW;;AAGR;IAAU;;AAGP;IAAY;;AAGb;IAAY;;AAGhB;IAAO;;AAGR;IAAQ;;AAGT;IAAY;;AAGE;IAAI;;AAGH;IAAI;;AAGL;IAAa;;AAGZ;IAA0B;;AAG3B;IAAI;;AAGH;IAAa;;AAG1B;IAAc;;AAGf;IAAsB;;AAGd;IAAa;;AAGpB;IAAU;;AAGX;IAAY;;AAGb;IAAgB;;AAGlB;IAAI;;AAGG;IAA2B;;AAG3B;IAA+B;;AAGpB;IAAyC;;AAGxD;IAAa;;AAGf;IAAe;;AAGL;IAAI;;AAGR;IAAU;;AAGX;IAAgB;;AAGN;IAAW;;AAGJ;IAAI;;AAGH;IAAI;;AAGL;IAAgB;;AAGf;IAA+B;;AAGhC;IAAI;;AAGH;IAAI;;AAG1B;IAAe;;AAGf;IAAc;;AAGb;IAAc;;AAGd;IAAc;;AAGZ;IAAgB;;AAGrB;IAAgB;;AAGb;IAAuB;;AAGxB;IAAgB;;AAGT,YAAe;IAAW;;AAGhC;IAAS;;AAGL;IAAgB;;AAGZ;IAAU;;AAGT;IAAI;;AAGH;IAAI;;AAGL;IAAmB;;AAGlB;IAAoC;;AAGrC;IAAI;;AAGH;IAAI;;AAGb;IAAoB;;AAGtB;IAAkB;;AAGpB;IAAc;;AAGhB;IAA0B;;AAGV,YAAgB;IAAU;;AAG/B;IAAY;;AAGf;IAAM;;AAGK;IAAY;;AAGnB;IAAkB;;AAGpB;IAAQ;;AAGG;IAAc;;AAG/B;IAAO;;AAGF;IAAe;;AAGZ;IAAqB;;;QAjbnD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA6C;;AAGlD;IAAU;;AAGF;IAAQ;;AAGf;IAAO;;AAGD;IAA0B;;AAGhC;IAAW;;AAGZ;IAAS;;AAGP;IAAS;;AAGP;IAAY;;AAGb;IAAY;;AAGhB;IAAY;;AAGb;IAAU;;AAGZ;IAAY;;AAGV;IAAe;;AAGV;IAAyB;;AAG1B;IAAY;;AAGE;IAA6B;;AAG5C;IAAiB;;AAGX;IAAiB;;AAGN;IAA0B;;AAGzC;IAAc;;AAGpB;IAAG;;AAGG;IAAU;;AAGV;IAA6B;;AAGrC;IAAiB;;AAGjB;IAAgB;;AAGR;IAAU;;AAGb;IAAoB;;AAGnB;IAAyB;;AAGlB;IAA6B;;AAG7B;IAA8B;;AAGhC;IAAqB;;AAGtB;IAAuB;;AAG5B;IAA0B;;AAG5B;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAgB;;AAGlB;IAAiB;;AAGnB;IAAM;;AAGP;IAAK;;AAGN;IAAQ;;AAGV;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAY;;AAGT;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAS;;AAGV;IAAQ;;AAGT;IAAqB;;AAGP;IAAyB;;AAGxB;IAAyB;;AAG1B;IAAY;;AAGX;IAAyB;;AAG1B;IAAI;;AAGH;IAAa;;AAG1B;IAAU;;AAGX;IAAoB;;AAGZ;IAAU;;AAGjB;IAAM;;AAGP;IAAgB;;AAGjB;IAAoB;;AAGtB;IAAI;;AAGG;IAAwB;;AAGxB;IAAiC;;AAGtB;IAA2C;;AAG1D;IAAU;;AAGZ;IAAyB;;AAGf;IAAQ;;AAGZ;IAAiB;;AAGlB;IAAqB;;AAGX;IAAU;;AAGH;IAAoC;;AAGnC;IAAqC;;AAGtC;IAAmB;;AAGlB;IAAoC;;AAGrC;IAAI;;AAGH;IAAI;;AAG1B;IAAkB;;AAGlB;IAAmB;;AAGlB;IAAoB;;AAGpB;IAAqB;;AAGnB;IAAuB;;AAG5B;IAAmB;;AAGhB;IAAqB;;AAGtB;IAAU;;AAGH,YAAe;IAAW;;AAGhC;IAAO;;AAGH;IAAa;;AAGT;IAAc;;AAGb;IAAqC;;AAGpC;IAAsC;;AAGvC;IAAmB;;AAGlB;IAAqC;;AAGtC;IAAI;;AAGH;IAAI;;AAGb;IAA0B;;AAG5B;IAAe;;AAGjB;IAAiB;;AAGnB;IAAgC;;AAGhB,YAAgB;IAAU;;AAG/B;IAAc;;AAGjB;IAAS;;AAGE;IAAkB;;AAGzB;IAAc;;AAGhB;IAAS;;AAGE;IAAkB;;AAGnC;IAAM;;AAGD;IAAc;;AAGX;IAAmB;;;QAjbjD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA6B;;AAGlC;IAAQ;;AAGA;IAAI;;AAGX;IAAO;;AAGD;IAA4B;;AAGlC;IAAO;;AAGR;IAAW;;AAGT;IAAW;;AAGT;IAAW;;AAGZ;IAAQ;;AAGZ;IAAU;;AAGX;IAAW;;AAGb;IAAY;;AAGV;IAAmB;;AAGd;IAAiC;;AAGlC;IAAkB;;AAGJ;IAAyB;;AAGxC;IAAa;;AAGP;IAA6B;;AAGlB;IAA0B;;AAGzC;IAAc;;AAGpB;IAAG;;AAGG;IAAW;;AAGX;IAA8C;;AAGtD;IAAmB;;AAGnB;IAAmB;;AAGX;IAAS;;AAGZ;IAAgB;;AAGf;IAAuB;;AAGhB;IAA4B;;AAG5B;IAA8C;;AAGhD;IAAmB;;AAGpB;IAA4B;;AAGjC;IAAsB;;AAGxB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAO;;AAGR;IAAmB;;AAGL;IAAI;;AAGH;IAAI;;AAGL;IAAU;;AAGT;IAAwB;;AAGzB;IAAI;;AAGH;IAAa;;AAG1B;IAAS;;AAGV;IAA0B;;AAGlB;IAAY;;AAGnB;IAAK;;AAGN;IAAkB;;AAGnB;IAAqB;;AAGvB;IAAI;;AAGG;IAAiC;;AAGjC;IAAoC;;AAGzB;IAA0C;;AAGzD;IAAW;;AAGb;IAAgB;;AAGN;IAAI;;AAGR;IAAkB;;AAGnB;IAAqB;;AAGX;IAAa;;AAGN;IAAI;;AAGH;IAAI;;AAGL;IAAe;;AAGd;IAAgC;;AAGjC;IAAI;;AAGH;IAAK;;AAG3B;IAAoB;;AAGpB;IAAoB;;AAGnB;IAAqB;;AAGrB;IAAoB;;AAGlB;IAAwB;;AAG7B;IAAoB;;AAGjB;IAAqB;;AAGtB;IAAW;;AAGJ,YAAe;IAAW;;AAGhC;IAAS;;AAGL;IAAoB;;AAGhB;IAAoB;;AAGnB;IAAI;;AAGH;IAAI;;AAGL;IAAoB;;AAGnB;IAAwC;;AAGzC;IAAI;;AAGH;IAAI;;AAGb;IAAwB;;AAG1B;IAAqB;;AAGvB;IAAkB;;AAGpB;IAAgC;;AAGhB,YAAgB;IAAW;;AAGhC;IAAc;;AAGjB;IAAK;;AAGM;IAAoB;;AAG3B;IAAc;;AAGhB;IAAQ;;AAGG;IAAoB;;AAGrC;IAAM;;AAGD;IAAiB;;AAGd;IAAsB;;;QAjbpD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA4B;;AAGjC;IAAS;;AAGD;IAAI;;AAGX;IAAU;;AAGJ;IAA4B;;AAGlC;IAAY;;AAGb;IAAW;;AAGT;IAAW;;AAGT;IAAS;;AAGV;IAAY;;AAGhB;IAAU;;AAGX;IAAU;;AAGZ;IAAY;;AAGV;IAAa;;AAGR;IAA0B;;AAG3B;IAAgB;;AAGF;IAA4B;;AAG3C;IAAiB;;AAGX;IAA2B;;AAGhB;IAAwB;;AAGvC;IAAa;;AAGnB;IAAG;;AAGG;IAAU;;AAGV;IAAgC;;AAGxC;IAAQ;;AAGR;IAAgB;;AAGR;IAAW;;AAGd;IAAc;;AAGb;IAAsB;;AAGf;IAAsB;;AAGtB;IAA2B;;AAG7B;IAAe;;AAGhB;IAAgB;;AAGrB;IAAgB;;AAGlB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAmB;;AAGrB;IAAmB;;AAGrB;IAAM;;AAGP;IAAK;;AAGN;IAAa;;AAGf;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAU;;AAGX;IAAO;;AAGR;IAAY;;AAGE;IAAI;;AAGH;IAAI;;AAGL;IAAc;;AAGb;IAA2B;;AAG5B;IAAI;;AAGH;IAAa;;AAG1B;IAAU;;AAGX;IAAe;;AAGP;IAAY;;AAGnB;IAAK;;AAGN;IAAU;;AAGX;IAAa;;AAGf;IAAS;;AAGF;IAAqB;;AAGrB;IAAwC;;AAG7B;IAAoD;;AAGnE;IAAY;;AAGd;IAAY;;AAGF;IAAI;;AAGR;IAAU;;AAGX;IAAa;;AAGH;IAAc;;AAGP;IAAI;;AAGH;IAAI;;AAGL;IAAwB;;AAGvB;IAAuC;;AAGxC;IAAI;;AAGH;IAAI;;AAG1B;IAAiB;;AAGjB;IAAc;;AAGb;IAAc;;AAGd;IAAqB;;AAGnB;IAAgB;;AAGrB;IAAiB;;AAGd;IAA6B;;AAG9B;IAAU;;AAGH,YAAe;IAAI;;AAGzB;IAAQ;;AAGJ;IAAa;;AAGT;IAAc;;AAGb;IAAI;;AAGH;IAAI;;AAGL;IAA4B;;AAG3B;IAA6C;;AAG9C;IAAI;;AAGH;IAAI;;AAGb;IAAsB;;AAGxB;IAAY;;AAGd;IAAmB;;AAGrB;IAAuC;;AAGvB,YAAgB;IAAU;;AAG/B;IAAc;;AAGjB;IAAO;;AAGI;IAAgB;;AAGvB;IAAW;;AAGb;IAAO;;AAGI;IAAgB;;AAGjC;IAAO;;AAGF;IAAkB;;AAGf;IAAgB;;;QAjb9C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAgC;;AAGrC;IAAY;;AAGJ;IAAY;;AAGnB;IAAO;;AAGD;IAAuB;;AAG7B;IAAQ;;AAGT;IAAS;;AAGP;IAAY;;AAGV;IAAS;;AAGV;IAAS;;AAGb;IAAS;;AAGV;IAAQ;;AAGV;IAAe;;AAGb;IAAe;;AAGV;IAAgB;;AAGjB;IAAiB;;AAGH;IAA6B;;AAG5C;IAAiB;;AAGX;IAAkB;;AAGP;IAA2B;;AAG1C;IAAe;;AAGrB;IAAG;;AAGG;IAAU;;AAGV;IAA6C;;AAGrD;IAAiB;;AAGjB;IAAoB;;AAGZ;IAAM;;AAGT;IAAe;;AAGd;IAAe;;AAGR;IAA0B;;AAG1B;IAAyC;;AAG3C;IAAkB;;AAGnB;IAAkB;;AAGvB;IAA0B;;AAG5B;IAAK;;AAGA;IAAQ;;AAGP;IAAW;;AAGZ;IAAW;;AAGR;IAAiB;;AAGnB;IAAgB;;AAGlB;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAS;;AAGX;IAAO;;AAGR;IAAuB;;AAGpB;IAAwB;;AAGrB;IAAQ;;AAGT;IAAa;;AAGjB;IAAQ;;AAGT;IAAiB;;AAGlB;IAAqB;;AAGP;IAAwB;;AAGvB;IAAI;;AAGL;IAAW;;AAGV;IAAwB;;AAGzB;IAAI;;AAGH;IAAa;;AAG1B;IAAS;;AAGV;IAAmB;;AAGX;IAAQ;;AAGf;IAAM;;AAGP;IAAiB;;AAGlB;IAAmB;;AAGrB;IAAO;;AAGA;IAA6B;;AAG7B;IAAkC;;AAGvB;IAAsC;;AAGrD;IAAU;;AAGZ;IAAa;;AAGH;IAAc;;AAGlB;IAAkB;;AAGnB;IAAoB;;AAGV;IAAS;;AAGF;IAA4B;;AAG3B;IAAI;;AAGL;IAAgB;;AAGf;IAA8B;;AAG/B;IAAI;;AAGH;IAAK;;AAG3B;IAAiB;;AAGjB;IAAgB;;AAGf;IAAe;;AAGf;IAAmB;;AAGjB;IAAsB;;AAG3B;IAAgB;;AAGb;IAA0B;;AAG3B;IAAS;;AAGF,YAAe;IAAW;;AAGhC;IAAY;;AAGR;IAAa;;AAGT;IAAkB;;AAGjB;IAAuC;;AAGtC;IAAI;;AAGL;IAA0B;;AAGzB;IAAuC;;AAGxC;IAAI;;AAGH;IAAI;;AAGb;IAAgB;;AAGlB;IAAc;;AAGhB;IAAiB;;AAGnB;IAAkC;;AAGlB,YAAgB;IAAW;;AAGhC;IAAmB;;AAGtB;IAAK;;AAGM;IAAe;;AAGtB;IAAiB;;AAGnB;IAAQ;;AAGG;IAAkB;;AAGnC;IAAO;;AAGF;IAAe;;AAGZ;IAAiB;;;QAjb/C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAyB;;AAG9B;IAAQ;;AAGA;IAAI;;AAGX;IAAQ;;AAGF;IAAqB;;AAG3B;IAAW;;AAGZ;IAAO;;AAGL;IAAO;;AAGL;IAAU;;AAGX;IAAU;;AAGd;IAAO;;AAGR;IAAS;;AAGX;IAAY;;AAGV;IAAqB;;AAGhB;IAAkB;;AAGnB;IAAoB;;AAGN;IAAiC;;AAGhD;IAAsB;;AAGhB;IAAuB;;AAGZ;IAAyB;;AAGxC;IAAc;;AAGpB;IAAG;;AAGG;IAAW;;AAGX;IAAoC;;AAG5C;IAAQ;;AAGR;IAAmB;;AAGX;IAAS;;AAGZ;IAAgB;;AAGf;IAAmB;;AAGZ;IAA8B;;AAG9B;IAAsC;;AAGxC;IAAwB;;AAGzB;IAAyB;;AAG9B;IAA4B;;AAG9B;IAAK;;AAGA;IAAQ;;AAGP;IAAU;;AAGX;IAAU;;AAGP;IAAe;;AAGjB;IAAgB;;AAGlB;IAAM;;AAGP;IAAM;;AAGP;IAAS;;AAGX;IAAI;;AAGD;IAAK;;AAGT;IAAI;;AAGF;IAAO;;AAGL;IAAO;;AAGT;IAAM;;AAGD;IAAO;;AAGL;IAAS;;AAGb;IAAU;;AAGV;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGN;IAAQ;;AAGN;IAAQ;;AAGN;IAAQ;;AAGT;IAAQ;;AAGT;IAAa;;AAGb;IAAQ;;AAGL;IAAQ;;AAGP;IAAQ;;AAGP;IAAQ;;AAGV;IAAQ;;AAGd;IAAQ;;AAGV;IAAQ;;AAGT;IAAU;;AAGP;IAAS;;AAGN;IAAW;;AAGZ;IAAY;;AAGhB;IAAY;;AAGb;IAAO;;AAGR;IAAgB;;AAGF;IAAI;;AAGH;IAAI;;AAGL;IAAa;;AAGZ;IAA2B;;AAG5B;IAAI;;AAGH;IAAa;;AAG1B;IAAY;;AAGb;IAA0B;;AAGlB;IAAQ;;AAGf;IAAK;;AAGN;IAAa;;AAGd;IAAgB;;AAGlB;IAAS;;AAGF;IAA2B;;AAG3B;IAAkC;;AAGvB;IAAgD;;AAG/D;IAAS;;AAGX;IAAe;;AAGL;IAAI;;AAGR;IAAc;;AAGf;IAAiB;;AAGP;IAAY;;AAGL;IAAI;;AAGH;IAAI;;AAGL;IAAkB;;AAGjB;IAAmC;;AAGpC;IAAI;;AAGH;IAAK;;AAG3B;IAAW;;AAGX;IAAsB;;AAGrB;IAAoB;;AAGpB;IAAc;;AAGZ;IAAiB;;AAGtB;IAAW;;AAGR;IAAmB;;AAGpB;IAAM;;AAGC,YAAe;IAAW;;AAGhC;IAAO;;AAGH;IAAmB;;AAGf;IAAmB;;AAGlB;IAAI;;AAGH;IAAI;;AAGL;IAA4B;;AAG3B;IAA+C;;AAGhD;IAAI;;AAGH;IAAI;;AAGb;IAAoB;;AAGtB;IAAgB;;AAGlB;IAAiB;;AAGnB;IAAkC;;AAGlB,YAAgB;IAAW;;AAGhC;IAAmB;;AAGtB;IAAM;;AAGK;IAAsB;;AAG7B;IAAmB;;AAGrB;IAAO;;AAGI;IAAuB;;AAGxC;IAAM;;AAGD;IAAmB;;AAGhB;IAAuB;;;QAjbrD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA8B;;AAGnC;IAAY;;AAGJ;IAAI;;AAGX;IAAM;;AAGA;IAAsB;;AAG5B;IAAQ;;AAGT;IAAQ;;AAGN;IAAQ;;AAGN;IAAU;;AAGX;IAAY;;AAGhB;IAAW;;AAGZ;IAAS;;AAGX;IAAY;;AAGV;IAAe;;AAGV;IAAc;;AAGf;IAAe;;AAGD;IAA2B;;AAG1C;IAAgB;;AAGV;IAAgB;;AAGL;IAA2B;;AAG1C;IAAgB;;AAGtB;IAAG;;AAGG;IAAQ;;AAGR;IAA+B;;AAGvC;IAAgB;;AAGhB;IAAmB;;AAGX;IAAQ;;AAGX;IAAe;;AAGd;IAAY;;AAGL;IAAsB;;AAGtB;IAAkC;;AAGpC;IAAkB;;AAGnB;IAAkB;;AAGvB;IAAoB;;AAGtB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAgB;;AAGlB;IAAM;;AAGP;IAAK;;AAGN;IAAS;;AAGX;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAS;;AAGN;IAAS;;AAGN;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAQ;;AAGT;IAAkB;;AAGJ;IAAwB;;AAGvB;IAAwB;;AAGzB;IAAW;;AAGV;IAAwB;;AAGzB;IAAI;;AAGH;IAAa;;AAG1B;IAAS;;AAGV;IAA6B;;AAGrB;IAAQ;;AAGf;IAAM;;AAGP;IAAa;;AAGd;IAAe;;AAGjB;IAAI;;AAGG;IAA2B;;AAG3B;IAAiC;;AAGtB;IAAqC;;AAGpD;IAAQ;;AAGV;IAAqB;;AAGX;IAAI;;AAGR;IAAiB;;AAGlB;IAAmB;;AAGT;IAAS;;AAGF;IAAgC;;AAG/B;IAA8B;;AAG/B;IAAc;;AAGb;IAA8B;;AAG/B;IAAI;;AAGH;IAAK;;AAG3B;IAAgB;;AAGhB;IAAkB;;AAGjB;IAAmB;;AAGnB;IAAoB;;AAGlB;IAAsB;;AAG3B;IAAkB;;AAGf;IAAyB;;AAG1B;IAAQ;;AAGD,YAAe;IAAW;;AAGhC;IAAQ;;AAGJ;IAAY;;AAGR;IAAa;;AAGZ;IAAyC;;AAGxC;IAAuC;;AAGxC;IAAsB;;AAGrB;IAAuC;;AAGxC;IAAI;;AAGH;IAAI;;AAGb;IAAe;;AAGjB;IAAkB;;AAGpB;IAAoB;;AAGtB;IAA8B;;AAGd,YAAgB;IAAW;;AAGhC;IAAa;;AAGhB;IAAQ;;AAGG;IAAgB;;AAGvB;IAAa;;AAGf;IAAQ;;AAGG;IAAgB;;AAGjC;IAAO;;AAGF;IAAQ;;AAGL;IAAkB;;;QAjbhD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAsB;;AAG3B;IAAc;;AAGN;IAAI;;AAGX;IAAS;;AAGH;IAAoB;;AAG1B;IAAU;;AAGX;IAAK;;AAGH;IAAK;;AAGH;IAAO;;AAGR;IAAS;;AAGb;IAAQ;;AAGT;IAAM;;AAGR;IAAY;;AAGV;IAAe;;AAGV;IAAsB;;AAGvB;IAAW;;AAGG;IAAqB;;AAGpC;IAAU;;AAGJ;IAAa;;AAGF;IAAsB;;AAGrC;IAAW;;AAGjB;IAAG;;AAGG;IAAM;;AAGN;IAAyB;;AAGjC;IAAY;;AAGZ;IAAiB;;AAGT;IAAO;;AAGV;IAAa;;AAGZ;IAAa;;AAGN;IAAiB;;AAGjB;IAAuB;;AAGzB;IAAkB;;AAGnB;IAAoB;;AAGzB;IAA4B;;AAG9B;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAS;;AAGX;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAM;;AAGR;IAAM;;AAGP;IAAO;;AAGJ;IAAM;;AAGH;IAAc;;AAGf;IAAa;;AAGjB;IAAM;;AAGP;IAAkB;;AAGnB;IAAa;;AAGC;IAAI;;AAGH;IAAI;;AAGL;IAAU;;AAGT;IAAyB;;AAG1B;IAAI;;AAGH;IAAa;;AAG1B;IAAU;;AAGX;IAAuB;;AAGf;IAAO;;AAGd;IAAM;;AAGP;IAAa;;AAGd;IAAY;;AAGd;IAAI;;AAGG;IAAuB;;AAGvB;IAAkC;;AAGvB;IAAsC;;AAGrD;IAAQ;;AAGV;IAAa;;AAGH;IAAI;;AAGR;IAAe;;AAGhB;IAAc;;AAGJ;IAAS;;AAGF;IAAI;;AAGH;IAAI;;AAGL;IAAiB;;AAGhB;IAA+B;;AAGhC;IAAI;;AAGH;IAAK;;AAG3B;IAAU;;AAGV;IAAkB;;AAGjB;IAAgB;;AAGhB;IAA0B;;AAGxB;IAA0B;;AAG/B;IAAS;;AAGN;IAAkB;;AAGnB;IAAK;;AAGE,YAAe;IAAW;;AAGhC;IAAK;;AAGD;IAAY;;AAGR;IAAS;;AAGR;IAAI;;AAGH;IAAI;;AAGL;IAAoB;;AAGnB;IAAuC;;AAGxC;IAAI;;AAGH;IAAI;;AAGb;IAAW;;AAGb;IAAU;;AAGZ;IAAY;;AAGd;IAA8B;;AAGd,YAAgB;IAAW;;AAGhC;IAAgB;;AAGnB;IAAM;;AAGK;IAAY;;AAGnB;IAAiB;;AAGnB;IAAO;;AAGI;IAAe;;AAGhC;IAAM;;AAGD;IAAc;;AAGX;IAAa;;;QAjb3C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAwB;;AAG7B;IAAkB;;AAGV;IAAI;;AAGX;IAAQ;;AAGF;IAAuB;;AAG7B;IAAW;;AAGZ;IAAW;;AAGT;IAAW;;AAGT;IAAY;;AAGb;IAAQ;;AAGZ;IAAU;;AAGX;IAAc;;AAGhB;IAAY;;AAGV;IAAgB;;AAGX;IAA0B;;AAG3B;IAAiB;;AAGH;IAAqB;;AAGpC;IAAU;;AAGJ;IAAoB;;AAGT;IAAuB;;AAGtC;IAAY;;AAGlB;IAAG;;AAGG;IAAS;;AAGT;IAA6B;;AAGrC;IAAY;;AAGZ;IAAiB;;AAGT;IAAY;;AAGf;IAAa;;AAGZ;IAAmB;;AAGZ;IAA0B;;AAG1B;IAA+B;;AAGjC;IAAoB;;AAGrB;IAAsB;;AAG3B;IAAoC;;AAGtC;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAgB;;AAGb;IAAkB;;AAGpB;IAAgB;;AAGlB;IAAM;;AAGP;IAAM;;AAGP;IAAW;;AAGb;IAAM;;AAGH;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAO;;AAGT;IAAM;;AAGD;IAAQ;;AAGN;IAAK;;AAGT;IAAK;;AAGL;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAkB;;AAGlB;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAS;;AAGX;IAAU;;AAGX;IAAS;;AAGN;IAAK;;AAGF;IAAO;;AAGR;IAAQ;;AAGZ;IAAW;;AAGZ;IAAW;;AAGZ;IAAc;;AAGA;IAAI;;AAGH;IAAI;;AAGL;IAAU;;AAGT;IAAyB;;AAG1B;IAAI;;AAGH;IAAa;;AAG1B;IAAU;;AAGX;IAAwB;;AAGhB;IAAW;;AAGlB;IAAM;;AAGP;IAAgB;;AAGjB;IAAe;;AAGjB;IAAI;;AAGG;IAAwB;;AAGxB;IAAmC;;AAGxB;IAAwC;;AAGvD;IAAW;;AAGb;IAAa;;AAGH;IAAI;;AAGR;IAAkB;;AAGnB;IAAiB;;AAGP;IAAe;;AAGR;IAAI;;AAGH;IAAI;;AAGL;IAAgB;;AAGf;IAA+B;;AAGhC;IAAI;;AAGH;IAAK;;AAG3B;IAAwB;;AAGxB;IAAwB;;AAGvB;IAAyB;;AAGzB;IAAyB;;AAGvB;IAA2B;;AAGhC;IAAuB;;AAGpB;IAAmB;;AAGpB;IAAW;;AAGJ,YAAe;IAAW;;AAGhC;IAAQ;;AAGJ;IAAgB;;AAGZ;IAAgB;;AAGf;IAAI;;AAGH;IAAI;;AAGL;IAAsB;;AAGrB;IAAwC;;AAGzC;IAAI;;AAGH;IAA0B;;AAGnC;IAAiB;;AAGnB;IAAe;;AAGjB;IAAY;;AAGd;IAA8B;;AAGd,YAAgB;IAAW;;AAGhC;IAAmB;;AAGtB;IAAQ;;AAGG;IAAmB;;AAG1B;IAAe;;AAGjB;IAAQ;;AAGG;IAAmB;;AAGpC;IAAO;;AAGF;IAAU;;AAGP;IAAmB;;;QAjbjD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6b6B;IAA8B;;AAG3B;IAA2B;;AAG5B;IAAY;;AAGd;IAAY;;AAGb;IAAW;;AAGF;IAAY;;;QA5B3C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAwCkC;IAA2C;;AAGhD;IAAY;;AAGJ;IAAM;;AAGb;IAAM;;AAGA;IAAwB;;AAG9B;IAAS;;AAGV;IAAU;;AAGR;IAAU;;AAGR;IAAU;;AAGX;IAAU;;AAGd;IAAW;;AAGZ;IAAS;;AAGX;IAAY;;AAGV;IAAsB;;AAGjB;IAAqB;;AAGtB;IAAqB;;AAGP;IAA6B;;AAG5C;IAAkB;;AAGZ;IAAgB;;AAGL;IAA+B;;AAG9C;IAAoB;;AAG1B;IAAG;;AAGG;IAAU;;AAGV;IAAyC;;AAGjD;IAAmB;;AAGnB;IAAiB;;AAGT;IAAU;;AAGb;IAAc;;AAGb;IAAsB;;AAGf;IAAwB;;AAGxB;IAA4C;;AAG9C;IAAkB;;AAGnB;IAAkB;;AAGvB;IAA2B;;AAG7B;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAgB;;AAGlB;IAAoB;;AAGtB;IAAM;;AAGP;IAAK;;AAGN;IAAS;;AAGX;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAc;;AAGX;IAAgB;;AAGb;IAAc;;AAGf;IAAa;;AAGjB;IAAS;;AAGV;IAAU;;AAGX;IAAkB;;AAGJ;IAAI;;AAGH;IAAI;;AAGL;IAAS;;AAGR;IAAuB;;AAGxB;IAAI;;AAGH;IAAa;;AAG1B;IAAQ;;AAGT;IAAqB;;AAGb;IAAW;;AAGlB;IAAa;;AAGd;IAAgB;;AAGjB;IAAgB;;AAGlB;IAAI;;AAGG;IAAyB;;AAGzB;IAAmC;;AAGxB;IAA2C;;AAG1D;IAAY;;AAGd;IAAkB;;AAGR;IAAM;;AAGV;IAAoB;;AAGrB;IAAoB;;AAGV;IAAU;;AAGH;IAAI;;AAGH;IAAI;;AAGL;IAAuB;;AAGtB;IAAuC;;AAGxC;IAAI;;AAGH;IAAK;;AAG3B;IAAyB;;AAGzB;IAAqB;;AAGpB;IAAkB;;AAGlB;IAAsB;;AAGpB;IAAsB;;AAG3B;IAAyB;;AAGtB;IAAoB;;AAGrB;IAAY;;AAGL,YAAe;IAAW;;AAGhC;IAAW;;AAGP;IAAc;;AAGV;IAAe;;AAGd;IAAI;;AAGH;IAAI;;AAGL;IAAuB;;AAGtB;IAAyC;;AAG1C;IAAI;;AAGH;IAAI;;AAGb;IAAsB;;AAGxB;IAAgB;;AAGlB;IAAY;;AAGd;IAAkC;;AAGlB,YAAgB;IAAW;;AAGhC;IAAc;;AAGjB;IAAK;;AAGM;IAAc;;AAGrB;IAAe;;AAGjB;IAAO;;AAGI;IAAgB;;AAGjC;IAAY;;AAGP;IAAmB;;AAGhB;IAAgB;;;QAjb9C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAyB;;AAG9B;IAAO;;AAGC;IAAI;;AAGX;IAAM;;AAGA;IAAoB;;AAG1B;IAAQ;;AAGT;IAAO;;AAGL;IAAO;;AAGL;IAAQ;;AAGT;IAAU;;AAGd;IAAM;;AAGP;IAAK;;AAGP;IAAY;;AAGV;IAAY;;AAGP;IAAe;;AAGhB;IAAa;;AAGC;IAAqB;;AAGpC;IAAU;;AAGJ;IAAc;;AAGH;IAAuB;;AAGtC;IAAY;;AAGlB;IAAG;;AAGG;IAAQ;;AAGR;IAA4B;;AAGpC;IAAQ;;AAGR;IAAiB;;AAGT;IAAU;;AAGb;IAAY;;AAGX;IAAe;;AAGR;IAAiB;;AAGjB;IAA2B;;AAG7B;IAAiB;;AAGlB;IAAgB;;AAGrB;IAAoB;;AAGtB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAO;;AAGR;IAAW;;AAGG;IAAI;;AAGH;IAAI;;AAGL;IAAW;;AAGV;IAAyB;;AAG1B;IAAI;;AAGH;IAAa;;AAG1B;IAAU;;AAGX;IAAe;;AAGP;IAAS;;AAGhB;IAAM;;AAGP;IAAY;;AAGb;IAAW;;AAGb;IAAI;;AAGG;IAAsB;;AAGtB;IAAkC;;AAGvB;IAAwC;;AAGvD;IAAO;;AAGT;IAAY;;AAGF;IAAI;;AAGR;IAAgB;;AAGjB;IAAe;;AAGL;IAAS;;AAGF;IAAI;;AAGH;IAAI;;AAGL;IAAuB;;AAGtB;IAAuC;;AAGxC;IAAI;;AAGH;IAAyB;;AAG/C;IAAW;;AAGX;IAAW;;AAGV;IAAY;;AAGZ;IAAiB;;AAGf;IAAmB;;AAGxB;IAAS;;AAGN;IAAgB;;AAGjB;IAAM;;AAGC,YAAe;IAAW;;AAGhC;IAAQ;;AAGJ;IAAY;;AAGR;IAAa;;AAGZ;IAAI;;AAGH;IAAI;;AAGL;IAAiB;;AAGhB;IAAmC;;AAGpC;IAAI;;AAGH;IAAmB;;AAG5B;IAAe;;AAGjB;IAAW;;AAGb;IAAW;;AAGb;IAA6B;;AAGb,YAAgB;IAAkB;;AAGvC;IAAa;;AAGhB;IAAM;;AAGK;IAAc;;AAGrB;IAAY;;AAGd;IAAQ;;AAGG;IAAgB;;AAGjC;IAAM;;AAGD;IAAY;;AAGT;IAAe;;;QAjb7C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bgC;IAAW;;AAGV;IAAY;;AAGV;IAAc;;AAGlB;IAAU;;AAGP;IAAa;;AAGZ;IAAc;;AAGjB;IAAW;;AAGR;IAAW;;AAGnB;IAAY;;AAGT;IAAU;;AAGR;IAAY;;AAGX;IAAY;;AAGf;IAAU;;AAGG;IAAa;;AAGd;IAAW;;AAGV;IAAyB;;AAGhC;IAAe;;AAGxB;IAAa;;AAGhB;IAAU;;AAGN;IAAkB;;AAGjB;IAAmB;;;QAzE1C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAqFgC;IAAW;;AAGV;IAAY;;AAGV;IAAc;;AAGlB;IAAU;;AAGP;IAAa;;AAGZ;IAAc;;AAGjB;IAAW;;AAGR;IAAW;;AAGnB;IAAY;;AAGT;IAAU;;AAGR;IAAY;;AAGX;IAAY;;AAGf;IAAU;;AAGG;IAAa;;AAGd;IAAW;;AAGV;IAAyB;;AAGhC;IAAe;;AAGxB;IAAa;;AAGhB;IAAU;;AAGN;IAAkB;;AAGjB;IAAmB;;;QAzE1C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAqFgC;IAAW;;AAGV;IAAY;;AAGV;IAAc;;AAGlB;IAAU;;AAGP;IAAa;;AAGZ;IAAc;;AAGjB;IAAW;;AAGR;IAAW;;AAGnB;IAAY;;AAGT;IAAU;;AAGR;IAAY;;AAGX;IAAY;;AAGL,YAAgB;IAAW;;AAG/B;IAAe;;AAGrB;IAAU;;AAGG;IAAa;;AAGd;IAAW;;AAGV;IAAyB;;AAGzC;IAAa;;AAGhB;IAAU;;AAGN;IAAkB;;AAGjB;IAAmB;;;QA5E1C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAwFgC;IAAW;;AAGV;IAAY;;AAGV;IAAc;;AAGlB;IAAU;;AAGP;IAAa;;AAGZ;IAAc;;AAGjB;IAAW;;AAGR;IAAW;;AAGnB;IAAY;;AAGT;IAAU;;AAGR;IAAY;;AAGX;IAAY;;AAGL,YAAgB;IAAW;;AAG/B;IAAe;;AAGrB;IAAU;;AAGG;IAAa;;AAGd;IAAW;;AAGV;IAAyB;;AAGzC;IAAa;;AAGhB;IAAU;;AAGN;IAAkB;;AAGjB;IAAmB;;;QA5E1C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAwFgC;IAAW;;AAGV;IAAY;;AAGV;IAAc;;AAGlB;IAAU;;AAGP;IAAa;;AAGZ;IAAc;;AAGjB;IAAW;;AAGR;IAAW;;AAGnB;IAAY;;AAGT;IAAU;;AAGR;IAAY;;AAGX;IAAY;;AAGf;IAAU;;AAGG;IAAa;;AAGd;IAAW;;AAGV;IAAyB;;AAGhC;IAAe;;AAGxB;IAAa;;AAGhB;IAAU;;AAGN;IAAkB;;AAGjB;IAAmB;;;QAzE1C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAqFmC;IAAc;;AAGhB;IAAY;;AAGb;IAAW;;AAGZ;IAAU;;AAGP;IAAa;;AAGZ;IAAc;;AAGjB;IAAW;;AAGR;IAAW;;AAGnB;IAAY;;AAGT;IAAU;;AAGR;IAAY;;AAGX;IAAY;;AAGf;IAAU;;AAGG;IAAa;;AAGd;IAAW;;AAGV;IAAyB;;AAGhC;IAAe;;AAGxB;IAAa;;AAGhB;IAAU;;AAGN;IAAkB;;AAGjB;IAAmB;;;QAzE1C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAqFgC;IAAW;;AAGV;IAAY;;AAGV;IAAc;;AAGlB;IAAU;;AAGP;IAAa;;AAGZ;IAAc;;AAGjB;IAAW;;AAGR;IAAW;;AAGnB;IAAY;;AAGT;IAAU;;AAGR;IAAY;;AAGX;IAAY;;AAGf;IAAU;;AAGG;IAAa;;AAGd;IAAW;;AAGV;IAAyB;;AAGhC;IAAe;;AAGxB;IAAa;;AAGhB;IAAU;;AAGN;IAAkB;;AAGjB;IAAmB;;;QAzE1C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAqFgC;IAAW;;AAGV;IAAY;;AAGV;IAAc;;AAGlB;IAAU;;AAGP;IAAa;;AAGZ;IAAc;;AAGjB;IAAW;;AAGR;IAAW;;AAGnB;IAAY;;AAGT;IAAU;;AAGR;IAAY;;AAGX;IAAY;;AAGL,YAAgB;IAAW;;AAG/B;IAAe;;AAGrB;IAAU;;AAGG;IAAa;;AAGd;IAAW;;AAGV;IAAyB;;AAGzC;IAAa;;AAGhB;IAAU;;AAGN;IAAkB;;AAGjB;IAAmB;;;QA5E1C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAwFkC;IAAyB;;AAG9B;IAAQ;;AAGA;IAAO;;AAGd;IAAO;;AAGD;IAAsB;;AAG5B;IAAU;;AAGX;IAAQ;;AAGN;IAAQ;;AAGN;IAAS;;AAGV;IAAW;;AAGf;IAAQ;;AAGT;IAAQ;;AAGV;IAAY;;AAGV;IAAqB;;AAGhB;IAA2B;;AAG5B;IAAmB;;AAGL;IAAkC;;AAGjD;IAAuB;;AAGjB;IAAqB;;AAGV;IAA4B;;AAG3C;IAAiB;;AAGvB;IAAG;;AAGG;IAAU;;AAGV;IAAsC;;AAG9C;IAAmB;;AAGnB;IAAoB;;AAGZ;IAAS;;AAGZ;IAAgB;;AAGf;IAAiB;;AAGV;IAA2B;;AAG3B;IAA0C;;AAG5C;IAAoB;;AAGrB;IAAoB;;AAGzB;IAAwB;;AAG1B;IAAK;;AAGA;IAAQ;;AAGP;IAAW;;AAGZ;IAAY;;AAGT;IAAiB;;AAGnB;IAAgB;;AAGlB;IAAM;;AAGP;IAAM;;AAGP;IAAU;;AAGZ;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAQ;;AAGN;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAQ;;AAGT;IAAW;;AAGR;IAAS;;AAGN;IAAW;;AAGZ;IAAY;;AAGhB;IAAW;;AAGZ;IAAS;;AAGV;IAAe;;AAGD;IAAI;;AAGH;IAAI;;AAGL;IAAY;;AAGX;IAA0B;;AAG3B;IAAI;;AAGH;IAAa;;AAG1B;IAAW;;AAGZ;IAA0B;;AAGlB;IAAQ;;AAGf;IAAK;;AAGN;IAAe;;AAGhB;IAAkB;;AAGpB;IAAS;;AAGF;IAA6B;;AAG7B;IAAkC;;AAGvB;IAAkD;;AAGjE;IAAO;;AAGT;IAAgB;;AAGN;IAAO;;AAGX;IAAc;;AAGf;IAAiB;;AAGP;IAAY;;AAGL;IAAI;;AAGH;IAAI;;AAGL;IAAmB;;AAGlB;IAAoC;;AAGrC;IAAI;;AAGH;IAAK;;AAG3B;IAAmB;;AAGnB;IAA0B;;AAGzB;IAAwB;;AAGxB;IAAgB;;AAGd;IAAoB;;AAGzB;IAAoB;;AAGjB;IAAmB;;AAGpB;IAAS;;AAGF,YAAe;IAAW;;AAGhC;IAAQ;;AAGJ;IAAkB;;AAGd;IAAiB;;AAGhB;IAAI;;AAGH;IAAI;;AAGL;IAAyB;;AAGxB;IAA4C;;AAG7C;IAAI;;AAGH;IAAkC;;AAG3C;IAAiB;;AAGnB;IAAc;;AAGhB;IAAiB;;AAGnB;IAAiC;;AAGjB,YAAgB;IAAU;;AAG/B;IAAkB;;AAGrB;IAAM;;AAGK;IAAmB;;AAG1B;IAAiB;;AAGnB;IAAQ;;AAGG;IAAqB;;AAGtC;IAAO;;AAGF;IAAS;;AAGN;IAAe;;;QAjb7C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bmC;IAAgB;;AAGlB;IAAiB;;AAGlB;IAAsB;;AAGxB;IAAQ;;AAGN;IAAO;;AAGR;IAAkB;;AAGjB;IAAO;;AAGV;IAAmB;;AAGd;IAA2B;;AAG1B;IAAmB;;AAGtB;IAAQ;;AAGX;IAAU;;AAGT;IAAO;;AAGF;IAAW;;AAGJ;IAAY;;AAGlB;IAAe;;AAGtB;IAAyB;;AAGX;IAA0B;;AAGhC;IAAqC;;AAG/C;IAAgB;;AAGP;IAAuB;;AAGvB;IAAqB;;AAGzB;IAAgB;;AAGd;IAAwB;;AAGvB;IAA0B;;AAGhB;IAAmC;;AAGjC;IAA6B;;AAGvC;IAA2B;;AAG/B;IAAS;;AAGjB;IAAY;;AAGA;IAAW;;AAGtB;IAA6B;;AAGtB;IAA0B;;AAG3B;IAAQ;;AAGX;IAAa;;AAGd;IAAgB;;AAGV;IAA6B;;AAG9B;IAAkC;;AAGvB;IAAkD;;AAGxD;IAA0B;;AAGzB;IAA+C;;AAGjD;IAAM;;AAGN;IAAM;;AAGnB;IAAS;;AAGF;IAAiB;;AAGhB;IAAU;;AAGT;IAAU;;;QAvJrC;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,qGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAmKmC;IAAgB;;AAGlB;IAAiB;;AAGlB;IAAsB;;AAGxB;IAAQ;;AAGN;IAAO;;AAGR;IAAkB;;AAGjB;IAAO;;AAGV;IAAmB;;AAGd;IAA2B;;AAG1B;IAAmB;;AAGtB;IAAQ;;AAGX;IAAU;;AAGT;IAAO;;AAGF;IAAW;;AAGJ;IAAY;;AAGlB;IAAe;;AAGtB;IAAyB;;AAGX;IAA0B;;AAGhC;IAAqC;;AAG/C;IAAgB;;AAGP;IAAuB;;AAGvB;IAAqB;;AAGzB;IAAgB;;AAGd;IAAwB;;AAGvB;IAA0B;;AAGhB;IAAmC;;AAGjC;IAA6B;;AAGvC;IAA2B;;AAG/B;IAAS;;AAGjB;IAAY;;AAGA;IAAW;;AAGtB;IAA6B;;AAGtB;IAA0B;;AAG3B;IAAQ;;AAGX;IAAa;;AAGd;IAAgB;;AAGV;IAA6B;;AAG9B;IAAkC;;AAGvB;IAAkD;;AAGxD;IAA0B;;AAGzB;IAA+C;;AAGjD;IAAM;;AAGN;IAAM;;AAGnB;IAAS;;AAGF;IAAiB;;AAGhB;IAAU;;AAGT;IAAU;;;QAvJrC;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAmKmC;IAAgB;;AAGlB;IAAiB;;AAGlB;IAAsB;;AAGxB;IAAQ;;AAGN;IAAO;;AAGR;IAAkB;;AAGjB;IAAO;;AAGV;IAAmB;;AAGd;IAA2B;;AAG1B;IAAmB;;AAGtB;IAAQ;;AAGX;IAAU;;AAGT;IAAO;;AAGF;IAAW;;AAGJ;IAAY;;AAGlB;IAAe;;AAGtB;IAAyB;;AAGX;IAA0B;;AAGhC;IAAqC;;AAG/C;IAAgB;;AAGP;IAAuB;;AAGvB;IAAqB;;AAGzB;IAAgB;;AAGd;IAAwB;;AAGvB;IAA0B;;AAGhB;IAAmC;;AAGjC;IAA6B;;AAGvC;IAA2B;;AAG/B;IAAS;;AAGjB;IAAY;;AAGN;IAAiB;;AAGX;IAAW;;AAGtB;IAA6B;;AAGtB;IAA0B;;AAG3B;IAAQ;;AAGX;IAAa;;AAGd;IAAgB;;AAGV;IAA6B;;AAG9B;IAAkC;;AAGvB;IAAkD;;AAGxD;IAA0B;;AAGzB;IAA+C;;AAGjD;IAAM;;AAGN;IAAM;;AAGnB;IAAS;;AAGD;IAAU;;AAGT;IAAU;;;QAvJrC;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAmKmC;IAAgB;;AAGlB;IAAiB;;AAGlB;IAAsB;;AAGxB;IAAQ;;AAGN;IAAO;;AAGR;IAAkB;;AAGjB;IAAO;;AAGV;IAAmB;;AAGd;IAA2B;;AAG1B;IAAmB;;AAGtB;IAAQ;;AAGX;IAAU;;AAGT;IAAO;;AAGF;IAAW;;AAGJ;IAAY;;AAGlB;IAAe;;AAGtB;IAAyB;;AAGX;IAA0B;;AAGhC;IAAqC;;AAG/C;IAAgB;;AAGP;IAAuB;;AAGvB;IAAqB;;AAGzB;IAAgB;;AAGd;IAAwB;;AAGvB;IAA0B;;AAGhB;IAAmC;;AAGjC;IAA6B;;AAGvC;IAA2B;;AAG/B;IAAS;;AAGjB;IAAY;;AAGN;IAAiB;;AAGX;IAAW;;AAGtB;IAA6B;;AAGtB;IAA0B;;AAG3B;IAAQ;;AAGX;IAAa;;AAGd;IAAgB;;AAGV;IAA6B;;AAG9B;IAAkC;;AAGvB;IAAkD;;AAGxD;IAA0B;;AAGzB;IAA+C;;AAGjD;IAAM;;AAGN;IAAM;;AAGnB;IAAS;;AAGD;IAAU;;AAGT;IAAU;;;QAvJrC;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAmKmC;IAAgB;;AAGlB;IAAiB;;AAGlB;IAAsB;;AAGxB;IAAQ;;AAGN;IAAO;;AAGR;IAAkB;;AAGjB;IAAO;;AAGV;IAAmB;;AAGd;IAA2B;;AAG1B;IAAmB;;AAGtB;IAAQ;;AAGX;IAAU;;AAGT;IAAO;;AAGF;IAAW;;AAGJ;IAAY;;AAGlB;IAAe;;AAGtB;IAAyB;;AAGX;IAA0B;;AAGhC;IAAqC;;AAG/C;IAAgB;;AAGP;IAAuB;;AAGvB;IAAqB;;AAGzB;IAAgB;;AAGd;IAAwB;;AAGvB;IAA0B;;AAGhB;IAAmC;;AAGjC;IAA6B;;AAGvC;IAA2B;;AAG/B;IAAS;;AAGjB;IAAY;;AAGN;IAAiB;;AAGX;IAAW;;AAGtB;IAA6B;;AAGtB;IAA0B;;AAG3B;IAAQ;;AAGX;IAAa;;AAGd;IAAgB;;AAGV;IAA6B;;AAG9B;IAAkC;;AAGvB;IAAkD;;AAGxD;IAA0B;;AAGzB;IAA+C;;AAGjD;IAAM;;AAGN;IAAM;;AAGnB;IAAS;;AAGD;IAAU;;AAGT;IAAU;;;QAvJrC;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAmKmC;IAAgB;;AAGlB;IAAiB;;AAGlB;IAAsB;;AAGxB;IAAQ;;AAGN;IAAO;;AAGR;IAAkB;;AAGjB;IAAO;;AAGV;IAAmB;;AAGd;IAA2B;;AAG1B;IAAmB;;AAGtB;IAAQ;;AAGX;IAAU;;AAGT;IAAO;;AAGF;IAAW;;AAGJ;IAAY;;AAGlB;IAAe;;AAGtB;IAAyB;;AAGX;IAA0B;;AAGhC;IAAqC;;AAG/C;IAAgB;;AAGP;IAAuB;;AAGvB;IAAqB;;AAGzB;IAAgB;;AAGd;IAAwB;;AAGvB;IAA0B;;AAGhB;IAAmC;;AAGjC;IAA6B;;AAGvC;IAA2B;;AAG/B;IAAS;;AAGjB;IAAY;;AAGN;IAAiB;;AAGX;IAAW;;AAGtB;IAA6B;;AAGtB;IAA0B;;AAG3B;IAAQ;;AAGX;IAAa;;AAGd;IAAgB;;AAGV;IAA6B;;AAG9B;IAAkC;;AAGvB;IAAkD;;AAGxD;IAA0B;;AAGzB;IAA+C;;AAGjD;IAAM;;AAGN;IAAM;;AAGnB;IAAS;;AAGD;IAAU;;AAGT;IAAU;;;QAvJrC;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAmKmC;IAAgB;;AAGlB;IAAiB;;AAGlB;IAAsB;;AAGxB;IAAQ;;AAGN;IAAO;;AAGR;IAAkB;;AAGjB;IAAO;;AAGV;IAAmB;;AAGd;IAA2B;;AAG1B;IAAmB;;AAGtB;IAAQ;;AAGX;IAAU;;AAGT;IAAO;;AAGF;IAAW;;AAGJ;IAAY;;AAGlB;IAAe;;AAGtB;IAAyB;;AAGX;IAA0B;;AAGhC;IAAqC;;AAG/C;IAAgB;;AAGP;IAAuB;;AAGvB;IAAqB;;AAGzB;IAAgB;;AAGd;IAAwB;;AAGvB;IAA0B;;AAGhB;IAAmC;;AAGjC;IAA6B;;AAGvC;IAA2B;;AAG/B;IAAS;;AAGjB;IAAY;;AAGN;IAAiB;;AAGX;IAAW;;AAGtB;IAA6B;;AAGtB;IAA0B;;AAG3B;IAAQ;;AAGX;IAAa;;AAGd;IAAgB;;AAGV;IAA6B;;AAG9B;IAAkC;;AAGvB;IAAkD;;AAGxD;IAA0B;;AAGzB;IAA+C;;AAGjD;IAAM;;AAGN;IAAM;;AAGnB;IAAS;;AAGD;IAAU;;AAGT;IAAU;;;QAvJrC;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAmKmC;IAAgB;;AAGlB;IAAiB;;AAGlB;IAAsB;;AAGxB;IAAQ;;AAGN;IAAO;;AAGR;IAAkB;;AAGjB;IAAO;;AAGV;IAAmB;;AAGd;IAA2B;;AAG1B;IAAmB;;AAGtB;IAAQ;;AAGX;IAAU;;AAGT;IAAO;;AAGF;IAAW;;AAGJ;IAAY;;AAGlB;IAAe;;AAGtB;IAAyB;;AAGX;IAA0B;;AAGhC;IAAqC;;AAG/C;IAAgB;;AAGP;IAAuB;;AAGvB;IAAqB;;AAGzB;IAAgB;;AAGd;IAAwB;;AAGvB;IAA0B;;AAGhB;IAAmC;;AAGjC;IAA6B;;AAGvC;IAA2B;;AAG/B;IAAS;;AAGjB;IAAY;;AAGN;IAAiB;;AAGX;IAAW;;AAGtB;IAA6B;;AAGtB;IAA0B;;AAG3B;IAAQ;;AAGX;IAAa;;AAGd;IAAgB;;AAGV;IAA6B;;AAG9B;IAAkC;;AAGvB;IAAkD;;AAGxD;IAA0B;;AAGzB;IAA+C;;AAGjD;IAAM;;AAGN;IAAM;;AAGnB;IAAS;;AAGD;IAAU;;AAGT;IAAU;;;QAvJrC;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAmKmC;IAAgB;;AAGlB;IAAiB;;AAGlB;IAAsB;;AAGxB;IAAQ;;AAGN;IAAO;;AAGR;IAAkB;;AAGjB;IAAO;;AAGV;IAAmB;;AAGd;IAA2B;;AAG1B;IAAmB;;AAGtB;IAAQ;;AAGX;IAAU;;AAGT;IAAO;;AAGF;IAAW;;AAGJ;IAAY;;AAGlB;IAAe;;AAGtB;IAAyB;;AAGX;IAA0B;;AAGhC;IAAqC;;AAG/C;IAAgB;;AAGP;IAAuB;;AAGvB;IAAqB;;AAGzB;IAAgB;;AAGd;IAAwB;;AAGvB;IAA0B;;AAGhB;IAAmC;;AAGjC;IAA6B;;AAGvC;IAA2B;;AAG/B;IAAS;;AAGjB;IAAY;;AAGN;IAAiB;;AAGX;IAAW;;AAGtB;IAA6B;;AAGtB;IAA0B;;AAG3B;IAAQ;;AAGX;IAAa;;AAGd;IAAgB;;AAGV;IAA6B;;AAG9B;IAAkC;;AAGvB;IAAkD;;AAGxD;IAA0B;;AAGzB;IAA+C;;AAGjD;IAAM;;AAGN;IAAM;;AAGnB;IAAS;;AAGD;IAAU;;AAGT;IAAU;;;QAvJrC;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAmKmC;IAAgB;;AAGlB;IAAiB;;AAGlB;IAAsB;;AAGxB;IAAQ;;AAGN;IAAO;;AAGR;IAAkB;;AAGjB;IAAO;;AAGV;IAAmB;;AAGd;IAA2B;;AAG1B;IAAmB;;AAGtB;IAAQ;;AAGX;IAAU;;AAGT;IAAO;;AAGF;IAAW;;AAGJ;IAAY;;AAGlB;IAAe;;AAGtB;IAAyB;;AAGX;IAA0B;;AAGhC;IAAqC;;AAG/C;IAAgB;;AAGP;IAAuB;;AAGvB;IAAqB;;AAGzB;IAAgB;;AAGd;IAAwB;;AAGvB;IAA0B;;AAGhB;IAAmC;;AAGjC;IAA6B;;AAGvC;IAA2B;;AAG/B;IAAS;;AAGjB;IAAY;;AAGN;IAAiB;;AAGX;IAAW;;AAGtB;IAA6B;;AAGtB;IAA0B;;AAG3B;IAAQ;;AAGX;IAAa;;AAGd;IAAgB;;AAGV;IAA6B;;AAG9B;IAAkC;;AAGvB;IAAkD;;AAGxD;IAA0B;;AAGzB;IAA+C;;AAGjD;IAAM;;AAGN;IAAM;;AAGnB;IAAS;;AAGD;IAAU;;AAGT;IAAU;;;QAvJrC;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAmKmC;IAAgB;;AAGlB;IAAiB;;AAGlB;IAAsB;;AAGxB;IAAQ;;AAGN;IAAO;;AAGR;IAAkB;;AAGjB;IAAO;;AAGV;IAAmB;;AAGd;IAA2B;;AAG1B;IAAmB;;AAGtB;IAAQ;;AAGX;IAAU;;AAGT;IAAO;;AAGF;IAAW;;AAGJ;IAAY;;AAGlB;IAAe;;AAGtB;IAAyB;;AAGX;IAA0B;;AAGhC;IAAqC;;AAG/C;IAAgB;;AAGP;IAAuB;;AAGvB;IAAqB;;AAGzB;IAAgB;;AAGd;IAAwB;;AAGvB;IAA0B;;AAGhB;IAAmC;;AAGjC;IAA6B;;AAGvC;IAA2B;;AAG/B;IAAS;;AAGjB;IAAY;;AAGN;IAAiB;;AAGX;IAAW;;AAGtB;IAA6B;;AAGtB;IAA0B;;AAG3B;IAAQ;;AAGX;IAAa;;AAGd;IAAgB;;AAGV;IAA6B;;AAG9B;IAAkC;;AAGvB;IAAkD;;AAGxD;IAA0B;;AAGzB;IAA+C;;AAGjD;IAAM;;AAGN;IAAM;;AAGnB;IAAS;;AAGD;IAAU;;AAGT;IAAU;;;QAvJrC;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAmKmC;IAAgB;;AAGlB;IAAiB;;AAGlB;IAAsB;;AAGxB;IAAQ;;AAGN;IAAO;;AAGR;IAAkB;;AAGjB;IAAO;;AAGV;IAAmB;;AAGd;IAA2B;;AAG1B;IAAmB;;AAGtB;IAAQ;;AAGX;IAAU;;AAGT;IAAO;;AAGF;IAAW;;AAGJ;IAAY;;AAGlB;IAAe;;AAGtB;IAAyB;;AAGX;IAA0B;;AAGhC;IAAqC;;AAG/C;IAAgB;;AAGP;IAAuB;;AAGvB;IAAqB;;AAGzB;IAAgB;;AAGd;IAAwB;;AAGvB;IAA0B;;AAGhB;IAAmC;;AAGjC;IAA6B;;AAGvC;IAA2B;;AAG/B;IAAS;;AAGjB;IAAY;;AAGN;IAAiB;;AAGX;IAAW;;AAGtB;IAA6B;;AAGtB;IAA0B;;AAG3B;IAAQ;;AAGX;IAAa;;AAGd;IAAgB;;AAGV;IAA6B;;AAG9B;IAAkC;;AAGvB;IAAkD;;AAGxD;IAA0B;;AAGzB;IAA+C;;AAGjD;IAAM;;AAGN;IAAM;;AAGnB;IAAS;;AAGD;IAAU;;AAGT;IAAU;;;QAvJrC;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAmKmC;IAAgB;;AAGlB;IAAiB;;AAGlB;IAAsB;;AAGxB;IAAQ;;AAGN;IAAO;;AAGR;IAAkB;;AAGjB;IAAO;;AAGV;IAAmB;;AAGd;IAA2B;;AAG1B;IAAmB;;AAGtB;IAAQ;;AAGX;IAAU;;AAGT;IAAO;;AAGF;IAAW;;AAGJ;IAAY;;AAGlB;IAAe;;AAGtB;IAAyB;;AAGX;IAA0B;;AAGhC;IAAqC;;AAG/C;IAAgB;;AAGP;IAAuB;;AAGvB;IAAqB;;AAGzB;IAAgB;;AAGd;IAAwB;;AAGvB;IAA0B;;AAGhB;IAAmC;;AAGjC;IAA6B;;AAGvC;IAA2B;;AAG/B;IAAS;;AAGjB;IAAY;;AAGN;IAAiB;;AAGX;IAAW;;AAGtB;IAA6B;;AAGtB;IAA0B;;AAG3B;IAAQ;;AAGX;IAAa;;AAGd;IAAgB;;AAGV;IAA6B;;AAG9B;IAAkC;;AAGvB;IAAkD;;AAGxD;IAA0B;;AAGzB;IAA+C;;AAGjD;IAAM;;AAGN;IAAM;;AAGnB;IAAS;;AAGD;IAAU;;AAGT;IAAU;;;QAvJrC;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAmKmC;IAAgB;;AAGlB;IAAiB;;AAGlB;IAAsB;;AAGxB;IAAQ;;AAGN;IAAO;;AAGR;IAAkB;;AAGjB;IAAO;;AAGV;IAAmB;;AAGd;IAA2B;;AAG1B;IAAmB;;AAGtB;IAAQ;;AAGX;IAAU;;AAGT;IAAO;;AAGF;IAAW;;AAGJ;IAAY;;AAGlB;IAAe;;AAGtB;IAAyB;;AAGX;IAA0B;;AAGhC;IAAqC;;AAG/C;IAAgB;;AAGP;IAAuB;;AAGvB;IAAqB;;AAGzB;IAAgB;;AAGd;IAAwB;;AAGvB;IAA0B;;AAGhB;IAAmC;;AAGjC;IAA6B;;AAGvC;IAA2B;;AAG/B;IAAS;;AAGjB;IAAY;;AAGN;IAAiB;;AAGX;IAAW;;AAGtB;IAA6B;;AAGtB;IAA0B;;AAG3B;IAAQ;;AAGX;IAAa;;AAGd;IAAgB;;AAGV;IAA6B;;AAG9B;IAAkC;;AAGvB;IAAkD;;AAGxD;IAA0B;;AAGzB;IAA+C;;AAGjD;IAAM;;AAGN;IAAM;;AAGnB;IAAS;;AAGD;IAAU;;AAGT;IAAU;;;QAvJrC;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAmKmC;IAAgB;;AAGlB;IAAiB;;AAGlB;IAAsB;;AAGxB;IAAQ;;AAGN;IAAO;;AAGR;IAAkB;;AAGjB;IAAO;;AAGV;IAAmB;;AAGd;IAA2B;;AAG1B;IAAmB;;AAGtB;IAAQ;;AAGX;IAAU;;AAGT;IAAO;;AAGF;IAAW;;AAGJ;IAAY;;AAGlB;IAAe;;AAGtB;IAAyB;;AAGX;IAA0B;;AAGhC;IAAqC;;AAG/C;IAAgB;;AAGP;IAAuB;;AAGvB;IAAqB;;AAGzB;IAAgB;;AAGd;IAAwB;;AAGvB;IAA0B;;AAGhB;IAAmC;;AAGjC;IAA6B;;AAGvC;IAA2B;;AAG/B;IAAS;;AAGjB;IAAY;;AAGN;IAAiB;;AAGX;IAAW;;AAGtB;IAA6B;;AAGtB;IAA0B;;AAG3B;IAAQ;;AAGX;IAAa;;AAGd;IAAgB;;AAGV;IAA6B;;AAG9B;IAAkC;;AAGvB;IAAkD;;AAGxD;IAA0B;;AAGzB;IAA+C;;AAGjD;IAAM;;AAGN;IAAM;;AAGnB;IAAS;;AAGD;IAAU;;AAGT;IAAU;;;QAvJrC;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAmKmC;IAAgB;;AAGlB;IAAiB;;AAGlB;IAAsB;;AAGxB;IAAQ;;AAGN;IAAO;;AAGR;IAAkB;;AAGjB;IAAO;;AAGV;IAAmB;;AAGd;IAA2B;;AAG1B;IAAmB;;AAGtB;IAAQ;;AAGX;IAAU;;AAGT;IAAO;;AAGF;IAAW;;AAGJ;IAAY;;AAGlB;IAAe;;AAGtB;IAAyB;;AAGX;IAA0B;;AAGhC;IAAqC;;AAG/C;IAAgB;;AAGP;IAAuB;;AAGvB;IAAqB;;AAGzB;IAAgB;;AAGd;IAAwB;;AAGvB;IAA0B;;AAGhB;IAAmC;;AAGjC;IAA6B;;AAGvC;IAA2B;;AAG/B;IAAS;;AAGjB;IAAY;;AAGN;IAAiB;;AAGX;IAAW;;AAGtB;IAA6B;;AAGtB;IAA0B;;AAG3B;IAAQ;;AAGX;IAAa;;AAGd;IAAgB;;AAGV;IAA6B;;AAG9B;IAAkC;;AAGvB;IAAkD;;AAGxD;IAA0B;;AAGzB;IAA+C;;AAGjD;IAAM;;AAGN;IAAM;;AAGnB;IAAS;;AAGD;IAAU;;AAGT;IAAU;;;QAvJrC;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAmKmC;IAAgB;;AAGlB;IAAiB;;AAGlB;IAAsB;;AAGxB;IAAQ;;AAGN;IAAO;;AAGR;IAAkB;;AAGjB;IAAO;;AAGV;IAAmB;;AAGd;IAA2B;;AAG1B;IAAmB;;AAGtB;IAAQ;;AAGX;IAAU;;AAGT;IAAO;;AAGF;IAAW;;AAGJ;IAAY;;AAGlB;IAAe;;AAGtB;IAAyB;;AAGX;IAA0B;;AAGhC;IAAqC;;AAG/C;IAAgB;;AAGP;IAAuB;;AAGvB;IAAqB;;AAGzB;IAAgB;;AAGd;IAAwB;;AAGvB;IAA0B;;AAGhB;IAAmC;;AAGjC;IAA6B;;AAGvC;IAA2B;;AAG/B;IAAS;;AAGjB;IAAY;;AAGN;IAAiB;;AAGX;IAAW;;AAGtB;IAA6B;;AAGtB;IAA0B;;AAG3B;IAAQ;;AAGX;IAAa;;AAGd;IAAgB;;AAGV;IAA6B;;AAG9B;IAAkC;;AAGvB;IAAkD;;AAGxD;IAA0B;;AAGzB;IAA+C;;AAGjD;IAAM;;AAGN;IAAM;;AAGnB;IAAS;;AAGD;IAAU;;AAGT;IAAU;;;QAvJrC;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAmKmC;IAAgB;;AAGlB;IAAiB;;AAGlB;IAAsB;;AAGxB;IAAQ;;AAGN;IAAO;;AAGR;IAAkB;;AAGjB;IAAO;;AAGV;IAAmB;;AAGd;IAA2B;;AAG1B;IAAmB;;AAGtB;IAAQ;;AAGX;IAAU;;AAGT;IAAO;;AAGF;IAAW;;AAGJ;IAAY;;AAGlB;IAAe;;AAGtB;IAAyB;;AAGX;IAA0B;;AAGhC;IAAqC;;AAG/C;IAAgB;;AAGP;IAAuB;;AAGvB;IAAqB;;AAGzB;IAAgB;;AAGd;IAAwB;;AAGvB;IAA0B;;AAGhB;IAAmC;;AAGjC;IAA6B;;AAGvC;IAA2B;;AAG/B;IAAS;;AAGjB;IAAY;;AAGN;IAAiB;;AAGX;IAAW;;AAGtB;IAA6B;;AAGvB;IAAQ;;AAGX;IAAa;;AAGE;IAAkD;;AAG5D;IAA6B;;AAGnC;IAAgB;;AAGX;IAA0B;;AAG1B;IAAkC;;AAG7B;IAA0B;;AAGzB;IAA+C;;AAG9C,YAAgB;IAAkB;;AAGrC;IAAM;;AAGN;IAAM;;AAGnB;IAAS;;AAGD;IAAU;;AAGT;IAAU;;;QA1JrC;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAsKmC;IAAgB;;AAGlB;IAAiB;;AAGlB;IAAsB;;AAGxB;IAAQ;;AAGN;IAAO;;AAGR;IAAkB;;AAGjB;IAAO;;AAGV;IAAmB;;AAGd;IAA2B;;AAG1B;IAAmB;;AAGtB;IAAQ;;AAGX;IAAU;;AAGT;IAAO;;AAGF;IAAW;;AAGJ;IAAY;;AAGlB;IAAe;;AAGtB;IAAyB;;AAGX;IAA0B;;AAGhC;IAAqC;;AAG/C;IAAgB;;AAGP;IAAuB;;AAGvB;IAAqB;;AAGzB;IAAgB;;AAGd;IAAwB;;AAGvB;IAA0B;;AAGhB;IAAmC;;AAGjC;IAA6B;;AAGvC;IAA2B;;AAG/B;IAAS;;AAGjB;IAAY;;AAGN;IAAiB;;AAGX;IAAW;;AAGtB;IAA6B;;AAGtB;IAA0B;;AAG3B;IAAQ;;AAGX;IAAa;;AAGd;IAAgB;;AAGV;IAA6B;;AAG9B;IAAkC;;AAGvB;IAAkD;;AAGxD;IAA0B;;AAGzB;IAA+C;;AAGjD;IAAM;;AAGN;IAAM;;AAGnB;IAAS;;AAGD;IAAU;;AAGT;IAAU;;;QAvJrC;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAmKmC;IAAgB;;AAGlB;IAAiB;;AAGlB;IAAsB;;AAGxB;IAAQ;;AAGN;IAAO;;AAGR;IAAkB;;AAGjB;IAAO;;AAGV;IAAmB;;AAGd;IAA2B;;AAG1B;IAAmB;;AAGtB;IAAQ;;AAGX;IAAU;;AAGT;IAAO;;AAGF;IAAW;;AAGJ;IAAY;;AAGlB;IAAe;;AAGtB;IAAyB;;AAGX;IAA0B;;AAGhC;IAAqC;;AAG/C;IAAgB;;AAGP;IAAuB;;AAGvB;IAAqB;;AAGzB;IAAgB;;AAGd;IAAwB;;AAGvB;IAA0B;;AAGhB;IAAmC;;AAGjC;IAA6B;;AAGvC;IAA2B;;AAG/B;IAAS;;AAGjB;IAAY;;AAGN;IAAiB;;AAGX;IAAW;;AAGtB;IAA6B;;AAGtB;IAA0B;;AAG3B;IAAQ;;AAGX;IAAa;;AAGd;IAAgB;;AAGV;IAA6B;;AAG9B;IAAkC;;AAGvB;IAAkD;;AAGxD;IAA0B;;AAGzB;IAA+C;;AAGjD;IAAM;;AAGN;IAAM;;AAGnB;IAAS;;AAGD;IAAU;;AAGT;IAAU;;;QAvJrC;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAmKkC;IAAyC;;AAG9C;IAAW;;AAGH;IAAI;;AAGX;IAAQ;;AAGF;IAAuB;;AAG7B;IAAS;;AAGV;IAAM;;AAGJ;IAAM;;AAGJ;IAAS;;AAGV;IAAO;;AAGX;IAAS;;AAGV;IAAO;;AAGT;IAAY;;AAGV;IAAmB;;AAGd;IAAoB;;AAGrB;IAAgB;;AAGF;IAAyB;;AAGxC;IAAa;;AAGP;IAAgB;;AAGL;IAA0B;;AAGzC;IAAc;;AAGpB;IAAG;;AAGG;IAAS;;AAGT;IAAkC;;AAG1C;IAAS;;AAGT;IAAmB;;AAGX;IAAQ;;AAGX;IAAc;;AAGb;IAAc;;AAGP;IAA8B;;AAG9B;IAAoC;;AAGtC;IAAmB;;AAGpB;IAAmB;;AAGxB;IAA0B;;AAG5B;IAAK;;AAGA;IAAO;;AAGN;IAAY;;AAGb;IAAc;;AAGX;IAAkB;;AAGpB;IAAiB;;AAGnB;IAAM;;AAGP;IAAK;;AAGN;IAAS;;AAGX;IAAM;;AAGH;IAAK;;AAGT;IAAI;;AAGF;IAAS;;AAGP;IAAS;;AAGX;IAAM;;AAGD;IAAM;;AAGJ;IAAK;;AAGT;IAAY;;AAGZ;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAiB;;AAGnB;IAAiB;;AAGlB;IAAO;;AAGJ;IAAiB;;AAGd;IAAuB;;AAGxB;IAAa;;AAGjB;IAAM;;AAGP;IAAO;;AAGR;IAAc;;AAGA;IAAI;;AAGH;IAAI;;AAGL;IAAY;;AAGX;IAA0B;;AAG3B;IAAI;;AAGH;IAAa;;AAG1B;IAAY;;AAGb;IAAiB;;AAGT;IAAO;;AAGd;IAAQ;;AAGT;IAAc;;AAGf;IAAe;;AAGjB;IAAI;;AAGG;IAAuB;;AAGvB;IAAkC;;AAGvB;IAAwC;;AAGvD;IAAQ;;AAGV;IAAY;;AAGF;IAAI;;AAGR;IAAa;;AAGd;IAAc;;AAGJ;IAAe;;AAGR;IAAI;;AAGH;IAAI;;AAGL;IAAsB;;AAGrB;IAAsC;;AAGvC;IAAI;;AAGH;IAAK;;AAG3B;IAAe;;AAGf;IAAmB;;AAGlB;IAAmB;;AAGnB;IAAgB;;AAGd;IAAoB;;AAGzB;IAAe;;AAGZ;IAAkB;;AAGnB;IAAU;;AAGH,YAAe;IAAW;;AAGhC;IAAQ;;AAGJ;IAAW;;AAGP;IAAc;;AAGb;IAAI;;AAGH;IAAI;;AAGL;IAAoB;;AAGnB;IAAsC;;AAGvC;IAAI;;AAGH;IAAI;;AAGb;IAAa;;AAGf;IAAY;;AAGd;IAAe;;AAGjB;IAAoC;;AAGpB,YAAgB;IAAW;;AAGhC;IAAY;;AAGf;IAAM;;AAGK;IAAkB;;AAGzB;IAAe;;AAGjB;IAAO;;AAGI;IAAmB;;AAGpC;IAAS;;AAGJ;IAAiB;;AAGd;IAAiB;;;QAjb/C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAsC;;AAG3C;IAAQ;;AAGA;IAAI;;AAGX;IAAQ;;AAGF;IAA2B;;AAGjC;IAAM;;AAGP;IAAM;;AAGJ;IAAM;;AAGJ;IAAS;;AAGV;IAAc;;AAGlB;IAAS;;AAGV;IAAO;;AAGT;IAAY;;AAGV;IAAa;;AAGR;IAAmB;;AAGpB;IAAc;;AAGA;IAA0B;;AAGzC;IAAc;;AAGR;IAAkB;;AAGP;IAA0B;;AAGzC;IAAc;;AAGpB;IAAG;;AAGG;IAAS;;AAGT;IAAiC;;AAGzC;IAAQ;;AAGR;IAAiB;;AAGT;IAAS;;AAGZ;IAAiB;;AAGhB;IAAkB;;AAGX;IAAiC;;AAGjC;IAA+B;;AAGjC;IAAwB;;AAGzB;IAAsB;;AAG3B;IAA4B;;AAG9B;IAAK;;AAGA;IAAQ;;AAGP;IAAc;;AAGf;IAAY;;AAGT;IAAkB;;AAGpB;IAAe;;AAGjB;IAAM;;AAGP;IAAM;;AAGP;IAAW;;AAGb;IAAS;;AAGN;IAAM;;AAGV;IAAI;;AAGF;IAAM;;AAGJ;IAAU;;AAGZ;IAAM;;AAGD;IAAU;;AAGR;IAAK;;AAGT;IAAW;;AAGX;IAAwB;;AAGxB;IAAwB;;AAGxB;IAAwB;;AAGxB;IAAwB;;AAGxB;IAAwB;;AAGxB;IAAwB;;AAGxB;IAAwB;;AAGxB;IAAwB;;AAGxB;IAAwB;;AAGxB;IAAwB;;AAGtB;IAAwB;;AAGtB;IAAwB;;AAGtB;IAAwB;;AAGzB;IAAwB;;AAGzB;IAA4B;;AAG5B;IAAwB;;AAGrB;IAAwB;;AAGvB;IAAwB;;AAGvB;IAAwB;;AAG1B;IAAwB;;AAG9B;IAAO;;AAGT;IAAM;;AAGP;IAAc;;AAGX;IAAQ;;AAGL;IAAU;;AAGX;IAAW;;AAGf;IAAS;;AAGV;IAAe;;AAGhB;IAAa;;AAGC;IAAI;;AAGH;IAAI;;AAGL;IAAa;;AAGZ;IAA0B;;AAG3B;IAAI;;AAGH;IAAa;;AAG1B;IAAY;;AAGb;IAAqB;;AAGb;IAAU;;AAGjB;IAAS;;AAGV;IAAoB;;AAGrB;IAAgB;;AAGlB;IAAM;;AAGC;IAAuB;;AAGvB;IAAmC;;AAGxB;IAAmC;;AAGlD;IAAS;;AAGX;IAAmB;;AAGT;IAAI;;AAGR;IAAmB;;AAGpB;IAAe;;AAGL;IAAU;;AAGH;IAAI;;AAGH;IAAI;;AAGL;IAAyB;;AAGxB;IAA0C;;AAG3C;IAAI;;AAGH;IAAI;;AAG1B;IAAe;;AAGf;IAAkB;;AAGjB;IAAkB;;AAGlB;IAAkB;;AAGhB;IAAkB;;AAGvB;IAAa;;AAGV;IAAoB;;AAGrB;IAAO;;AAGA,YAAe;IAAW;;AAGhC;IAAQ;;AAGJ;IAAiB;;AAGb;IAAe;;AAGd;IAAI;;AAGH;IAAI;;AAGL;IAAuB;;AAGtB;IAA0C;;AAG3C;IAAI;;AAGH;IAAI;;AAGb;IAAkB;;AAGpB;IAAgB;;AAGlB;IAAe;;AAGjB;IAA4B;;AAGZ,YAAgB;IAAU;;AAG/B;IAAe;;AAGlB;IAAO;;AAGI;IAAgB;;AAGvB;IAAc;;AAGhB;IAAS;;AAGE;IAAkB;;AAGnC;IAAM;;AAGD;IAAa;;AAGV;IAAkB;;;QAjbhD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA0B;;AAG/B;IAAO;;AAGC;IAAM;;AAGb;IAAO;;AAGD;IAAe;;AAGrB;IAAK;;AAGN;IAAM;;AAGJ;IAAM;;AAGJ;IAAW;;AAGZ;IAAO;;AAGX;IAAK;;AAGN;IAAK;;AAGP;IAAa;;AAGX;IAAoB;;AAGf;IAAiB;;AAGlB;IAAc;;AAGA;IAAwB;;AAGvC;IAAa;;AAGP;IAAe;;AAGJ;IAAuB;;AAGtC;IAAY;;AAGlB;IAAG;;AAGG;IAAK;;AAGL;IAAiC;;AAGzC;IAAY;;AAGZ;IAAa;;AAGL;IAAW;;AAGd;IAAU;;AAGT;IAAoB;;AAGb;IAAe;;AAGf;IAA4B;;AAG9B;IAAmB;;AAGpB;IAAqB;;AAG1B;IAAuB;;AAGzB;IAAQ;;AAGH;IAAa;;AAGZ;IAAQ;;AAGT;IAAgB;;AAGb;IAAa;;AAGf;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAW;;AAGb;IAAO;;AAGJ;IAAM;;AAGV;IAAQ;;AAGN;IAAW;;AAGT;IAAK;;AAGP;IAAK;;AAGA;IAAO;;AAGL;IAAK;;AAGT;IAAW;;AAGX;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAY;;AAGZ;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAY;;AAGd;IAAW;;AAGZ;IAAa;;AAGV;IAAY;;AAGT;IAAU;;AAGX;IAAY;;AAGhB;IAAQ;;AAGT;IAAO;;AAGR;IAAU;;AAGI;IAAI;;AAGH;IAAI;;AAGL;IAAU;;AAGT;IAAuB;;AAGxB;IAAI;;AAGH;IAAa;;AAG1B;IAAQ;;AAGT;IAAe;;AAGP;IAAU;;AAGjB;IAAO;;AAGR;IAAS;;AAGV;IAAU;;AAGZ;IAAO;;AAGA;IAAsB;;AAGtB;IAAkC;;AAGvB;IAAuC;;AAGtD;IAAW;;AAGb;IAAY;;AAGF;IAAM;;AAGV;IAAS;;AAGV;IAAU;;AAGA;IAAU;;AAGH;IAAI;;AAGH;IAAI;;AAGL;IAAwB;;AAGvB;IAAuC;;AAGxC;IAAI;;AAGH;IAAK;;AAG3B;IAAiB;;AAGjB;IAAgB;;AAGf;IAAc;;AAGd;IAAiB;;AAGf;IAAiB;;AAGtB;IAAgB;;AAGb;IAAkB;;AAGnB;IAAO;;AAGA,YAAe;IAAI;;AAGzB;IAAO;;AAGH;IAAY;;AAGR;IAAY;;AAGX;IAAI;;AAGH;IAAI;;AAGL;IAAkB;;AAGjB;IAAqC;;AAGtC;IAAI;;AAGH;IAAI;;AAGb;IAAmB;;AAGrB;IAAW;;AAGb;IAAkB;;AAGpB;IAA8B;;AAGd,YAAgB;IAAU;;AAG/B;IAAa;;AAGhB;IAAM;;AAGK;IAAa;;AAGpB;IAAmB;;AAGrB;IAAO;;AAGI;IAAc;;AAG/B;IAAO;;AAGF;IAAc;;AAGX;IAAe;;;QAjb7C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA4B;;AAGjC;IAAU;;AAGF;IAAI;;AAGX;IAAU;;AAGJ;IAAoB;;AAG1B;IAAS;;AAGV;IAAO;;AAGL;IAAO;;AAGL;IAAU;;AAGX;IAAO;;AAGX;IAAQ;;AAGT;IAAS;;AAGX;IAAY;;AAGV;IAAkB;;AAGb;IAAsB;;AAGvB;IAAoB;;AAGN;IAA2B;;AAG1C;IAAgB;;AAGV;IAAwB;;AAGb;IAAyB;;AAGxC;IAAc;;AAGpB;IAAG;;AAGG;IAAQ;;AAGR;IAA4B;;AAGpC;IAAe;;AAGf;IAAmB;;AAGX;IAAU;;AAGb;IAAkB;;AAGjB;IAAe;;AAGR;IAAwB;;AAGxB;IAA8B;;AAGhC;IAAoB;;AAGrB;IAA6B;;AAGlC;IAAwB;;AAG1B;IAAK;;AAGA;IAAO;;AAGN;IAAe;;AAGhB;IAAW;;AAGR;IAAkB;;AAGpB;IAAiB;;AAGnB;IAAM;;AAGP;IAAK;;AAGN;IAAQ;;AAGV;IAAQ;;AAGL;IAAK;;AAGT;IAAI;;AAGF;IAAS;;AAGP;IAAO;;AAGT;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAY;;AAGT;IAAc;;AAGf;IAAa;;AAGjB;IAAS;;AAGV;IAAY;;AAGb;IAAgB;;AAGF;IAAI;;AAGH;IAAI;;AAGL;IAAY;;AAGX;IAA0B;;AAG3B;IAAI;;AAGH;IAAa;;AAG1B;IAAW;;AAGZ;IAAe;;AAGP;IAAO;;AAGd;IAAO;;AAGR;IAAmB;;AAGpB;IAAe;;AAGjB;IAAI;;AAGG;IAAwB;;AAGxB;IAA+B;;AAGpB;IAAgC;;AAG/C;IAAO;;AAGT;IAAkB;;AAGR;IAAI;;AAGR;IAAoB;;AAGrB;IAAgB;;AAGN;IAAU;;AAGH;IAAI;;AAGH;IAAI;;AAGL;IAAmB;;AAGlB;IAAmC;;AAGpC;IAAI;;AAGH;IAAK;;AAG3B;IAAa;;AAGb;IAAmB;;AAGlB;IAAiB;;AAGjB;IAAgB;;AAGd;IAAe;;AAGpB;IAAa;;AAGV;IAAa;;AAGd;IAAU;;AAGH,YAAe;IAAW;;AAGhC;IAAM;;AAGF;IAAgB;;AAGZ;IAAe;;AAGd;IAAI;;AAGH;IAAI;;AAGL;IAAiB;;AAGhB;IAAqC;;AAGtC;IAAI;;AAGH;IAAI;;AAGb;IAAa;;AAGf;IAAe;;AAGjB;IAAoB;;AAGtB;IAAgC;;AAGhB,YAAgB;IAAW;;AAGhC;IAAc;;AAGjB;IAAO;;AAGI;IAAgB;;AAGvB;IAAY;;AAGd;IAAU;;AAGC;IAAkB;;AAGnC;IAAY;;AAGP;IAAW;;AAGR;IAAsB;;;QAjbpD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA8B;;AAGnC;IAAQ;;AAGA;IAAI;;AAGX;IAAS;;AAGH;IAAuB;;AAG7B;IAAY;;AAGb;IAAO;;AAGL;IAAO;;AAGL;IAAU;;AAGX;IAAY;;AAGhB;IAAU;;AAGX;IAAO;;AAGT;IAAY;;AAGV;IAAkB;;AAGb;IAAgB;;AAGjB;IAAiB;;AAGH;IAAgC;;AAG/C;IAAqB;;AAGf;IAAiB;;AAGN;IAAiC;;AAGhD;IAAsB;;AAG5B;IAAG;;AAGG;IAAU;;AAGV;IAA6B;;AAGrC;IAAQ;;AAGR;IAAoB;;AAGZ;IAAY;;AAGf;IAAY;;AAGX;IAAuB;;AAGhB;IAAkB;;AAGlB;IAA4B;;AAG9B;IAAqB;;AAGtB;IAAoB;;AAGzB;IAA2B;;AAG7B;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAO;;AAGJ;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAQ;;AAGT;IAAa;;AAGC;IAAI;;AAGH;IAAI;;AAGL;IAAY;;AAGX;IAA4B;;AAG7B;IAAI;;AAGH;IAAa;;AAG1B;IAAc;;AAGf;IAAkB;;AAGV;IAAW;;AAGlB;IAAU;;AAGX;IAAkB;;AAGnB;IAAiB;;AAGnB;IAAI;;AAGG;IAA+B;;AAG/B;IAAkC;;AAGvB;IAAmD;;AAGlE;IAAS;;AAGX;IAAe;;AAGL;IAAI;;AAGR;IAAiB;;AAGlB;IAAgB;;AAGN;IAAe;;AAGR;IAAI;;AAGH;IAAI;;AAGL;IAA0B;;AAGzB;IAA4C;;AAG7C;IAAI;;AAGH;IAAK;;AAG3B;IAAe;;AAGf;IAAiB;;AAGhB;IAAgB;;AAGhB;IAAgB;;AAGd;IAAkB;;AAGvB;IAAe;;AAGZ;IAAqB;;AAGtB;IAAQ;;AAGD,YAAe;IAAW;;AAGhC;IAAU;;AAGN;IAAc;;AAGV;IAAgB;;AAGf;IAAI;;AAGH;IAAI;;AAGL;IAAmB;;AAGlB;IAAuC;;AAGxC;IAAI;;AAGH;IAAI;;AAGb;IAAyB;;AAG3B;IAAkB;;AAGpB;IAAc;;AAGhB;IAA6B;;AAGb,YAAgB;IAAW;;AAGhC;IAAgB;;AAGnB;IAAM;;AAGK;IAAoB;;AAG3B;IAAkB;;AAGpB;IAAQ;;AAGG;IAAsB;;AAGvC;IAAO;;AAGF;IAAgB;;AAGb;IAA0B;;;QAjbxD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,mGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA+B;;AAGpC;IAAQ;;AAGA;IAAI;;AAGX;IAAQ;;AAGF;IAAmB;;AAGzB;IAAS;;AAGV;IAAQ;;AAGN;IAAQ;;AAGN;IAAY;;AAGb;IAAW;;AAGf;IAAQ;;AAGT;IAAQ;;AAGV;IAAY;;AAGV;IAAiB;;AAGZ;IAAiB;;AAGlB;IAAuB;;AAGT;IAA0B;;AAGzC;IAAa;;AAGP;IAAwB;;AAGb;IAA4B;;AAG3C;IAAe;;AAGrB;IAAG;;AAGG;IAAW;;AAGX;IAA2C;;AAGnD;IAAmB;;AAGnB;IAAoB;;AAGZ;IAAS;;AAGZ;IAAe;;AAGd;IAAqB;;AAGd;IAAoB;;AAGpB;IAA0C;;AAG5C;IAAoB;;AAGrB;IAAmB;;AAGxB;IAAoC;;AAGtC;IAAK;;AAGA;IAAQ;;AAGP;IAAgB;;AAGjB;IAAU;;AAGP;IAAiB;;AAGnB;IAAmB;;AAGrB;IAAM;;AAGP;IAAO;;AAGR;IAAS;;AAGX;IAAK;;AAGF;IAAO;;AAGX;IAAI;;AAGF;IAAS;;AAGP;IAAS;;AAGX;IAAM;;AAGD;IAAU;;AAGR;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAY;;AAGZ;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAQ;;AAGT;IAAW;;AAGR;IAAU;;AAGP;IAAa;;AAGd;IAAa;;AAGjB;IAAc;;AAGf;IAAQ;;AAGT;IAAe;;AAGD;IAAI;;AAGH;IAAI;;AAGL;IAAW;;AAGV;IAAyB;;AAG1B;IAAI;;AAGH;IAAa;;AAG1B;IAAU;;AAGX;IAA0B;;AAGlB;IAAS;;AAGhB;IAAM;;AAGP;IAAc;;AAGf;IAAe;;AAGjB;IAAI;;AAGG;IAA8B;;AAG9B;IAAqC;;AAG1B;IAA6C;;AAG5D;IAAQ;;AAGV;IAAiB;;AAGP;IAAI;;AAGR;IAAgB;;AAGjB;IAAiB;;AAGP;IAAY;;AAGL;IAAI;;AAGH;IAAI;;AAGL;IAAqB;;AAGpB;IAAsC;;AAGvC;IAAI;;AAGH;IAAK;;AAG3B;IAAsB;;AAGtB;IAAyB;;AAGxB;IAAyB;;AAGzB;IAAsB;;AAGpB;IAAwB;;AAG7B;IAAuB;;AAGpB;IAAmB;;AAGpB;IAAa;;AAGN,YAAe;IAAW;;AAGhC;IAAY;;AAGR;IAAmB;;AAGf;IAAwB;;AAGvB;IAAI;;AAGH;IAAI;;AAGL;IAAuB;;AAGtB;IAA0C;;AAG3C;IAAI;;AAGH;IAA2B;;AAGpC;IAAsB;;AAGxB;IAAkB;;AAGpB;IAAU;;AAGZ;IAAiC;;AAGjB,YAAgB;IAAW;;AAGhC;IAAwB;;AAG3B;IAAO;;AAGI;IAAwB;;AAG/B;IAAkB;;AAGpB;IAAQ;;AAGG;IAA0B;;AAG3C;IAAM;;AAGD;IAAgB;;AAGb;IAAuB;;;QAjbrD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bmC;IAAc;;AAGjB;IAAY;;AAGb;IAAY;;AAGR;IAAuB;;AAGvB;IAAY;;AAGjB;IAAQ;;AAGR;IAAS;;AAGV;IAAQ;;AAGJ;IAAc;;AAGlB;IAAc;;AAGX;IAAO;;AAGT;IAAS;;AAGL;IAAkB;;AAGtB;IAAU;;AAGR;IAAW;;AAGd;IAAyB;;AAGnB;IAAsB;;AAGrB;IAAgB;;AAGlB;IAAS;;AAGX;IAAuC;;AAGlC;IAA+B;;AAGhC;IAAuB;;AAG5B;IAAsB;;AAGnB;IAAmB;;AAGlB;IAAkB;;AAGhB;IAAmB;;AAG7B;IAAiB;;AAGX;IAAS;;AAGjB;IAAY;;AAGJ;IAAqC;;AAG1B;IAA6C;;AAGjE;IAAiC;;AAGpB;IAAI;;AAGJ;IAAI;;AAGE;IAAyB;;AAGvB;IAA0B;;AAGxC;IAAmB;;AAGrB;IAAmB;;AAGR,YAAgB;IAAc;;;QA/HhE;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AA2IkC;IAA8B;;AAGnC;IAAQ;;AAGA;IAAM;;AAGb;IAAO;;AAGD;IAA+B;;AAGrC;IAAU;;AAGX;IAAQ;;AAGN;IAAQ;;AAGN;IAAW;;AAGZ;IAAW;;AAGf;IAAQ;;AAGT;IAAQ;;AAGV;IAAY;;AAGV;IAAkB;;AAGb;IAAgC;;AAGjC;IAAuB;;AAGT;IAAkC;;AAGjD;IAAsB;;AAGhB;IAAmC;;AAGxB;IAA4B;;AAG3C;IAAgB;;AAGtB;IAAG;;AAGG;IAAU;;AAGV;IAAsC;;AAG9C;IAAkB;;AAGlB;IAAoB;;AAGZ;IAAU;;AAGb;IAAiB;;AAGhB;IAAgB;;AAGT;IAAyC;;AAGzC;IAA0C;;AAG5C;IAAyB;;AAG1B;IAAoC;;AAGzC;IAA0B;;AAG5B;IAAK;;AAGA;IAAQ;;AAGP;IAAW;;AAGZ;IAAY;;AAGT;IAAc;;AAGhB;IAAc;;AAGhB;IAAM;;AAGP;IAAM;;AAGP;IAAU;;AAGZ;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAQ;;AAGN;IAAS;;AAGX;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAO;;AAGT;IAAO;;AAGR;IAAS;;AAGN;IAAQ;;AAGL;IAAmB;;AAGpB;IAAY;;AAGhB;IAAa;;AAGd;IAAQ;;AAGT;IAAe;;AAGD;IAAI;;AAGH;IAAI;;AAGL;IAAW;;AAGV;IAAyB;;AAG1B;IAAI;;AAGH;IAAa;;AAG1B;IAAU;;AAGX;IAAuB;;AAGf;IAAS;;AAGhB;IAAM;;AAGP;IAAc;;AAGf;IAAiB;;AAGnB;IAAS;;AAGF;IAA0B;;AAG1B;IAAkC;;AAGvB;IAAkD;;AAGjE;IAAO;;AAGT;IAAgB;;AAGN;IAAM;;AAGV;IAAc;;AAGf;IAAiB;;AAGP;IAAY;;AAGL;IAAI;;AAGH;IAAI;;AAGL;IAAqB;;AAGpB;IAAuC;;AAGxC;IAAI;;AAGH;IAAK;;AAG3B;IAAmB;;AAGnB;IAAuB;;AAGtB;IAAsB;;AAGtB;IAAgB;;AAGd;IAAiB;;AAGtB;IAAmB;;AAGhB;IAAmB;;AAGpB;IAAQ;;AAGD,YAAe;IAAW;;AAGhC;IAAQ;;AAGJ;IAAkB;;AAGd;IAAiB;;AAGhB;IAAI;;AAGH;IAAI;;AAGL;IAA0B;;AAGzB;IAA8C;;AAG/C;IAAI;;AAGH;IAAgC;;AAGzC;IAAgB;;AAGlB;IAAc;;AAGhB;IAAiB;;AAGnB;IAAiC;;AAGjB,YAAgB;IAAU;;AAG/B;IAAmB;;AAGtB;IAAM;;AAGK;IAAmB;;AAG1B;IAAe;;AAGjB;IAAQ;;AAGG;IAAqB;;AAGtC;IAAM;;AAGD;IAAoB;;AAGjB;IAAc;;;QAjb5C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAwB;;AAG7B;IAAkB;;AAGV;IAAI;;AAGX;IAAQ;;AAGF;IAAuB;;AAG7B;IAAW;;AAGZ;IAAW;;AAGT;IAAW;;AAGT;IAAY;;AAGb;IAAQ;;AAGZ;IAAU;;AAGX;IAAc;;AAGhB;IAAY;;AAGV;IAAgB;;AAGX;IAA0B;;AAG3B;IAAiB;;AAGH;IAAqB;;AAGpC;IAAU;;AAGJ;IAAoB;;AAGT;IAAuB;;AAGtC;IAAY;;AAGlB;IAAG;;AAGG;IAAS;;AAGT;IAA6B;;AAGrC;IAAY;;AAGZ;IAAiB;;AAGT;IAAY;;AAGf;IAAa;;AAGZ;IAAmB;;AAGZ;IAA0B;;AAG1B;IAA+B;;AAGjC;IAAoB;;AAGrB;IAAsB;;AAG3B;IAAoC;;AAGtC;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAgB;;AAGb;IAAkB;;AAGpB;IAAgB;;AAGlB;IAAM;;AAGP;IAAM;;AAGP;IAAW;;AAGb;IAAM;;AAGH;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAO;;AAGT;IAAM;;AAGD;IAAQ;;AAGN;IAAK;;AAGT;IAAK;;AAGL;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAkB;;AAGlB;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAS;;AAGX;IAAU;;AAGX;IAAS;;AAGN;IAAK;;AAGF;IAAO;;AAGR;IAAQ;;AAGZ;IAAW;;AAGZ;IAAW;;AAGZ;IAAc;;AAGA;IAAI;;AAGH;IAAI;;AAGL;IAAU;;AAGT;IAAyB;;AAG1B;IAAI;;AAGH;IAAa;;AAG1B;IAAU;;AAGX;IAAwB;;AAGhB;IAAW;;AAGlB;IAAM;;AAGP;IAAgB;;AAGjB;IAAe;;AAGjB;IAAI;;AAGG;IAAwB;;AAGxB;IAAmC;;AAGxB;IAAwC;;AAGvD;IAAW;;AAGb;IAAa;;AAGH;IAAI;;AAGR;IAAkB;;AAGnB;IAAiB;;AAGP;IAAe;;AAGR;IAAI;;AAGH;IAAI;;AAGL;IAAgB;;AAGf;IAA+B;;AAGhC;IAAI;;AAGH;IAAK;;AAG3B;IAAwB;;AAGxB;IAAwB;;AAGvB;IAAyB;;AAGzB;IAAyB;;AAGvB;IAA2B;;AAGhC;IAAuB;;AAGpB;IAAmB;;AAGpB;IAAW;;AAGJ,YAAe;IAAW;;AAGhC;IAAQ;;AAGJ;IAAgB;;AAGZ;IAAgB;;AAGf;IAAI;;AAGH;IAAI;;AAGL;IAAsB;;AAGrB;IAAwC;;AAGzC;IAAI;;AAGH;IAAI;;AAGb;IAAiB;;AAGnB;IAAe;;AAGjB;IAAY;;AAGd;IAA8B;;AAGd,YAAgB;IAAW;;AAGhC;IAAmB;;AAGtB;IAAQ;;AAGG;IAAmB;;AAG1B;IAAe;;AAGjB;IAAQ;;AAGG;IAAmB;;AAGpC;IAAO;;AAGF;IAAU;;AAGP;IAAmB;;;QAjbjD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,mGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAwB;;AAG7B;IAAO;;AAGC;IAAI;;AAGX;IAAM;;AAGA;IAA2B;;AAGjC;IAAQ;;AAGT;IAAS;;AAGP;IAAS;;AAGP;IAAa;;AAGd;IAAW;;AAGf;IAAU;;AAGX;IAAM;;AAGR;IAAY;;AAGV;IAAgB;;AAGX;IAAc;;AAGf;IAAgB;;AAGF;IAA4B;;AAG3C;IAAiB;;AAGX;IAAe;;AAGJ;IAA6B;;AAG5C;IAAkB;;AAGxB;IAAG;;AAGG;IAAW;;AAGX;IAA4B;;AAGpC;IAAO;;AAGP;IAAe;;AAGP;IAAa;;AAGhB;IAAY;;AAGX;IAAgB;;AAGT;IAAwB;;AAGxB;IAAgC;;AAGlC;IAAiB;;AAGlB;IAAc;;AAGnB;IAAoB;;AAGtB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAO;;AAGR;IAAa;;AAGC;IAAI;;AAGH;IAAI;;AAGL;IAAW;;AAGV;IAAwB;;AAGzB;IAAI;;AAGH;IAAa;;AAG1B;IAAS;;AAGV;IAAe;;AAGP;IAAS;;AAGhB;IAAK;;AAGN;IAAY;;AAGb;IAAW;;AAGb;IAAK;;AAGE;IAAoB;;AAGpB;IAAoC;;AAGzB;IAAyC;;AAGxD;IAAW;;AAGb;IAAY;;AAGF;IAAI;;AAGR;IAAa;;AAGd;IAAY;;AAGF;IAAa;;AAGN;IAAI;;AAGH;IAAI;;AAGL;IAAc;;AAGb;IAA6B;;AAG9B;IAAI;;AAGH;IAAI;;AAG1B;IAAY;;AAGZ;IAAY;;AAGX;IAAY;;AAGZ;IAAc;;AAGZ;IAAkB;;AAGvB;IAAW;;AAGR;IAAkB;;AAGnB;IAAO;;AAGA,YAAe;IAAI;;AAGzB;IAAM;;AAGF;IAAc;;AAGV;IAAe;;AAGd;IAAI;;AAGH;IAAI;;AAGL;IAAiB;;AAGhB;IAAkC;;AAGnC;IAAI;;AAGH;IAAI;;AAGb;IAAe;;AAGjB;IAAY;;AAGd;IAAwB;;AAG1B;IAA+B;;AAGf,YAAgB;IAAU;;AAG/B;IAAc;;AAGjB;IAAM;;AAGK;IAAe;;AAGtB;IAAc;;AAGhB;IAAO;;AAGI;IAAgB;;AAGjC;IAAO;;AAGF;IAAY;;AAGT;IAAa;;;QAjb3C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA2B;;AAGhC;IAAO;;AAGC;IAAI;;AAGX;IAAO;;AAGD;IAAiB;;AAGvB;IAAO;;AAGR;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAM;;AAGV;IAAO;;AAGR;IAAO;;AAGT;IAAY;;AAGV;IAAgB;;AAGX;IAAa;;AAGd;IAAa;;AAGC;IAAwB;;AAGvC;IAAY;;AAGN;IAAY;;AAGD;IAAyB;;AAGxC;IAAa;;AAGnB;IAAG;;AAGG;IAAO;;AAGP;IAA0B;;AAGlC;IAAa;;AAGb;IAAa;;AAGL;IAAO;;AAGV;IAAY;;AAGX;IAAgB;;AAGT;IAAgB;;AAGhB;IAAiB;;AAGnB;IAAgB;;AAGjB;IAAc;;AAGnB;IAAoB;;AAGtB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAQ;;AAGN;IAAQ;;AAGN;IAAQ;;AAGT;IAAQ;;AAGT;IAAW;;AAGX;IAAQ;;AAGL;IAAQ;;AAGP;IAAQ;;AAGP;IAAQ;;AAGV;IAAQ;;AAGd;IAAW;;AAGb;IAAS;;AAGV;IAAO;;AAGJ;IAAO;;AAGJ;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAM;;AAGP;IAAY;;AAGE;IAAI;;AAGH;IAAyB;;AAG1B;IAAY;;AAGX;IAAyB;;AAG1B;IAAyB;;AAGxB;IAAa;;AAG1B;IAAU;;AAGX;IAAsB;;AAGd;IAAO;;AAGd;IAAK;;AAGN;IAAW;;AAGZ;IAAS;;AAGX;IAAO;;AAGA;IAAuB;;AAGvB;IAAoC;;AAGzB;IAAsC;;AAGrD;IAAO;;AAGT;IAAY;;AAGF;IAAI;;AAGR;IAAa;;AAGd;IAAW;;AAGD;IAAO;;AAGA;IAAI;;AAGH;IAA8B;;AAG/B;IAAa;;AAGZ;IAA8B;;AAG/B;IAA8B;;AAG7B;IAAK;;AAG3B;IAAY;;AAGZ;IAAa;;AAGZ;IAAa;;AAGb;IAAY;;AAGV;IAAc;;AAGnB;IAAa;;AAGV;IAAe;;AAGhB;IAAO;;AAGA,YAAe;IAAW;;AAGhC;IAAO;;AAGH;IAAY;;AAGR;IAAW;;AAGV;IAAI;;AAGH;IAAiC;;AAGlC;IAAe;;AAGd;IAAiC;;AAGlC;IAAiC;;AAGhC;IAAI;;AAGb;IAAe;;AAGjB;IAAa;;AAGf;IAAO;;AAGT;IAAoC;;AAGpB,YAAgB;IAAU;;AAG/B;IAAW;;AAGd;IAAK;;AAGM;IAAY;;AAGnB;IAAU;;AAGZ;IAAM;;AAGK;IAAY;;AAG7B;IAAO;;AAGF;IAAc;;AAGX;IAAgB;;;QAjb9C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAuC;;AAG5C;IAAO;;AAGC;IAAI;;AAGX;IAAW;;AAGL;IAAiB;;AAGvB;IAAW;;AAGZ;IAAU;;AAGR;IAAU;;AAGR;IAAU;;AAGX;IAAW;;AAGf;IAAW;;AAGZ;IAAO;;AAGT;IAAY;;AAGV;IAAa;;AAGR;IAAkB;;AAGnB;IAAa;;AAGC;IAA+B;;AAG9C;IAAoB;;AAGd;IAAY;;AAGD;IAA+B;;AAG9C;IAAoB;;AAG1B;IAAG;;AAGG;IAAQ;;AAGR;IAA6B;;AAGrC;IAAO;;AAGP;IAAiB;;AAGT;IAAW;;AAGd;IAAU;;AAGT;IAAa;;AAGN;IAAe;;AAGf;IAAoC;;AAGtC;IAAiB;;AAGlB;IAAuB;;AAG5B;IAAiB;;AAGnB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAO;;AAGR;IAAW;;AAGG;IAAI;;AAGH;IAAI;;AAGL;IAAW;;AAGV;IAAwB;;AAGzB;IAAI;;AAGH;IAAa;;AAG1B;IAAS;;AAGV;IAAsB;;AAGd;IAAY;;AAGnB;IAAQ;;AAGT;IAAY;;AAGb;IAAU;;AAGZ;IAAQ;;AAGD;IAAuB;;AAGvB;IAAkC;;AAGvB;IAA2C;;AAG1D;IAAS;;AAGX;IAAc;;AAGJ;IAAI;;AAGR;IAAa;;AAGd;IAAW;;AAGD;IAAe;;AAGR;IAAI;;AAGH;IAAI;;AAGL;IAA6B;;AAG5B;IAA4C;;AAG7C;IAAI;;AAGH;IAAK;;AAG3B;IAAc;;AAGd;IAAc;;AAGb;IAAc;;AAGd;IAAkB;;AAGhB;IAAmB;;AAGxB;IAAa;;AAGV;IAAiC;;AAGlC;IAAU;;AAGH,YAAe;IAAK;;AAG1B;IAAO;;AAGH;IAAc;;AAGV;IAAW;;AAGV;IAAI;;AAGH;IAAI;;AAGL;IAAgB;;AAGf;IAAoC;;AAGrC;IAAI;;AAGH;IAAI;;AAGb;IAAa;;AAGf;IAAe;;AAGjB;IAAqB;;AAGvB;IAA6B;;AAGb,YAAgB;IAAkB;;AAGvC;IAAmB;;AAGtB;IAAM;;AAGK;IAA4B;;AAGnC;IAAW;;AAGb;IAAM;;AAGK;IAA4B;;AAG7C;IAAO;;AAGF;IAAe;;AAGZ;IAAe;;;QAjb7C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAgC;;AAGrC;IAAY;;AAGJ;IAAY;;AAGnB;IAAQ;;AAGF;IAAuB;;AAG7B;IAAU;;AAGX;IAAS;;AAGP;IAAY;;AAGV;IAAS;;AAGV;IAAS;;AAGb;IAAS;;AAGV;IAAQ;;AAGV;IAAe;;AAGb;IAAe;;AAGV;IAAgB;;AAGjB;IAAiB;;AAGH;IAA4B;;AAG3C;IAAiB;;AAGX;IAAkB;;AAGP;IAA0B;;AAGzC;IAAe;;AAGrB;IAAG;;AAGG;IAAU;;AAGV;IAA2C;;AAGnD;IAAS;;AAGT;IAAuB;;AAGf;IAAO;;AAGV;IAAe;;AAGd;IAAiB;;AAGV;IAAmB;;AAGnB;IAAgC;;AAGlC;IAAqB;;AAGtB;IAAqB;;AAG1B;IAAwB;;AAG1B;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAmB;;AAGrB;IAAkB;;AAGpB;IAAM;;AAGP;IAAK;;AAGN;IAAQ;;AAGV;IAAM;;AAGH;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGN;IAAQ;;AAGN;IAAQ;;AAGN;IAAQ;;AAGT;IAAQ;;AAGT;IAAY;;AAGZ;IAAQ;;AAGL;IAAQ;;AAGP;IAAQ;;AAGP;IAAQ;;AAGV;IAAQ;;AAGd;IAAQ;;AAGV;IAAM;;AAGP;IAAW;;AAGR;IAAe;;AAGZ;IAAc;;AAGf;IAAa;;AAGjB;IAAS;;AAGV;IAAY;;AAGb;IAAqB;;AAGP;IAAwB;;AAGvB;IAAI;;AAGL;IAAW;;AAGV;IAAwB;;AAGzB;IAAI;;AAGH;IAAa;;AAG1B;IAAS;;AAGV;IAA0B;;AAGlB;IAAQ;;AAGf;IAAM;;AAGP;IAAiB;;AAGlB;IAAmB;;AAGrB;IAAQ;;AAGD;IAAmC;;AAGnC;IAAoC;;AAGzB;IAA8C;;AAG7D;IAAU;;AAGZ;IAAiB;;AAGP;IAAS;;AAGb;IAAkB;;AAGnB;IAAoB;;AAGV;IAAS;;AAGF;IAAqC;;AAGpC;IAAI;;AAGL;IAAoB;;AAGnB;IAAuC;;AAGxC;IAAI;;AAGH;IAAK;;AAG3B;IAAqB;;AAGrB;IAAiB;;AAGhB;IAAgB;;AAGhB;IAAmB;;AAGjB;IAAsB;;AAG3B;IAAoB;;AAGjB;IAAqB;;AAGtB;IAAQ;;AAGD,YAAe;IAAW;;AAGhC;IAAY;;AAGR;IAAa;;AAGT;IAAkB;;AAGjB;IAAuC;;AAGtC;IAAI;;AAGL;IAA0B;;AAGzB;IAAuC;;AAGxC;IAAI;;AAGH;IAAI;;AAGb;IAAkB;;AAGpB;IAAkB;;AAGpB;IAAsB;;AAGxB;IAAiC;;AAGjB,YAAgB;IAAW;;AAGhC;IAAmB;;AAGtB;IAAK;;AAGM;IAAgB;;AAGvB;IAAiB;;AAGnB;IAAQ;;AAGG;IAAkB;;AAGnC;IAAO;;AAGF;IAAiB;;AAGd;IAAiB;;;QAjb/C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAiC;;AAGtC;IAAW;;AAGH;IAAK;;AAGZ;IAAQ;;AAGF;IAAiB;;AAGvB;IAAO;;AAGR;IAAS;;AAGP;IAAS;;AAGP;IAAU;;AAGX;IAAQ;;AAGZ;IAAS;;AAGV;IAAS;;AAGX;IAAe;;AAGb;IAAoB;;AAGf;IAAoB;;AAGrB;IAAoB;;AAGN;IAA8B;;AAG7C;IAAkB;;AAGZ;IAAsB;;AAGX;IAA2B;;AAG1C;IAAe;;AAGrB;IAAG;;AAGG;IAAQ;;AAGR;IAA8B;;AAGtC;IAAgB;;AAGhB;IAAiB;;AAGT;IAAa;;AAGhB;IAAY;;AAGX;IAAkB;;AAGX;IAAkB;;AAGlB;IAA6B;;AAG/B;IAAuB;;AAGxB;IAAwB;;AAG7B;IAAuC;;AAGzC;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAe;;AAGjB;IAAgB;;AAGlB;IAAM;;AAGP;IAAK;;AAGN;IAAQ;;AAGV;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAa;;AAGV;IAAa;;AAGV;IAAc;;AAGf;IAAa;;AAGjB;IAAa;;AAGd;IAAQ;;AAGT;IAAc;;AAGA;IAAI;;AAGH;IAAI;;AAGL;IAAU;;AAGT;IAAuB;;AAGxB;IAAI;;AAGH;IAAa;;AAG1B;IAAU;;AAGX;IAAgB;;AAGR;IAAS;;AAGhB;IAAM;;AAGP;IAAiB;;AAGlB;IAAiB;;AAGnB;IAAI;;AAGG;IAA4B;;AAG5B;IAAgC;;AAGrB;IAA2C;;AAG1D;IAAa;;AAGf;IAAc;;AAGJ;IAAK;;AAGT;IAAa;;AAGd;IAAa;;AAGH;IAAW;;AAGJ;IAAI;;AAGH;IAAI;;AAGL;IAAmB;;AAGlB;IAAkC;;AAGnC;IAAI;;AAGH;IAAK;;AAG3B;IAAmB;;AAGnB;IAAkB;;AAGjB;IAAmB;;AAGnB;IAAqB;;AAGnB;IAAuB;;AAG5B;IAAoB;;AAGjB;IAAuB;;AAGxB;IAAQ;;AAGD,YAAe;IAAW;;AAGhC;IAAS;;AAGL;IAAmB;;AAGf;IAAqB;;AAGpB;IAAI;;AAGH;IAAI;;AAGL;IAAoB;;AAGnB;IAAqC;;AAGtC;IAAI;;AAGH;IAAI;;AAGb;IAAsB;;AAGxB;IAAoB;;AAGtB;IAAe;;AAGjB;IAA2B;;AAGX,YAAgB;IAAW;;AAGhC;IAAsB;;AAGzB;IAAK;;AAGM;IAAkB;;AAGzB;IAAkB;;AAGpB;IAAM;;AAGK;IAAmB;;AAGpC;IAAO;;AAGF;IAAgB;;AAGb;IAAuB;;;QAjbrD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAmC;;AAGxC;IAAW;;AAGH;IAAI;;AAGX;IAAK;;AAGC;IAAmB;;AAGzB;IAAU;;AAGX;IAAO;;AAGL;IAAO;;AAGL;IAAS;;AAGV;IAAY;;AAGhB;IAAU;;AAGX;IAAO;;AAGT;IAAY;;AAGV;IAAoB;;AAGf;IAAmC;;AAGpC;IAAgB;;AAGF;IAA6B;;AAG5C;IAAiB;;AAGX;IAAuB;;AAGZ;IAA+B;;AAG9C;IAAmB;;AAGzB;IAAG;;AAGG;IAAO;;AAGP;IAA8B;;AAGtC;IAAuB;;AAGvB;IAAuB;;AAGf;IAAO;;AAGV;IAAW;;AAGV;IAAmB;;AAGZ;IAAyB;;AAGzB;IAAmC;;AAGrC;IAAoB;;AAGrB;IAA4B;;AAGjC;IAAsB;;AAGxB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAc;;AAGhB;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAU;;AAGP;IAAS;;AAGN;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAO;;AAGR;IAAW;;AAGG;IAAI;;AAGH;IAAI;;AAGL;IAAY;;AAGX;IAAyB;;AAG1B;IAAI;;AAGH;IAAa;;AAG1B;IAAY;;AAGb;IAA4B;;AAGpB;IAAO;;AAGd;IAAK;;AAGN;IAAa;;AAGd;IAAW;;AAGb;IAAM;;AAGC;IAA8B;;AAG9B;IAAkC;;AAGvB;IAA8C;;AAG7D;IAAU;;AAGZ;IAAiB;;AAGP;IAAI;;AAGR;IAAa;;AAGd;IAAW;;AAGD;IAAW;;AAGJ;IAA2B;;AAG1B;IAA2B;;AAG5B;IAAgB;;AAGf;IAA+B;;AAGhC;IAAI;;AAGH;IAA0B;;AAGhD;IAAiB;;AAGjB;IAAe;;AAGd;IAAc;;AAGd;IAAgB;;AAGd;IAAiB;;AAGtB;IAAgB;;AAGb;IAAiB;;AAGlB;IAAO;;AAGA,YAAe;IAAW;;AAGhC;IAAQ;;AAGJ;IAAa;;AAGT;IAAc;;AAGb;IAAqC;;AAGpC;IAAqC;;AAGtC;IAAkB;;AAGjB;IAAmC;;AAGpC;IAAI;;AAGH;IAAoB;;AAG7B;IAAqB;;AAGvB;IAAsB;;AAGxB;IAAsB;;AAGxB;IAAiC;;AAGjB,YAAgB;IAAU;;AAG/B;IAAa;;AAGhB;IAAK;;AAGM;IAAa;;AAGpB;IAAiB;;AAGnB;IAAM;;AAGK;IAAiB;;AAGlC;IAAS;;AAGJ;IAAgB;;AAGb;IAAmB;;;QAjbjD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA2B;;AAGhC;IAAY;;AAGJ;IAAI;;AAGX;IAAS;;AAGH;IAAqB;;AAG3B;IAAO;;AAGR;IAAO;;AAGL;IAAO;;AAGL;IAAS;;AAGV;IAAW;;AAGf;IAAO;;AAGR;IAAQ;;AAGV;IAAY;;AAGV;IAAkB;;AAGb;IAAkB;;AAGnB;IAAe;;AAGD;IAA0B;;AAGzC;IAAe;;AAGT;IAAe;;AAGJ;IAA0B;;AAGzC;IAAe;;AAGrB;IAAG;;AAGG;IAAO;;AAGP;IAA8B;;AAGtC;IAAQ;;AAGR;IAAe;;AAGP;IAAS;;AAGZ;IAAiB;;AAGhB;IAAkB;;AAGX;IAAoB;;AAGpB;IAA4B;;AAG9B;IAAqB;;AAGtB;IAAsB;;AAG3B;IAA2B;;AAG7B;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAO;;AAGR;IAAkB;;AAGJ;IAAI;;AAGH;IAAI;;AAGL;IAAW;;AAGV;IAAwB;;AAGzB;IAAI;;AAGH;IAAa;;AAG1B;IAAS;;AAGV;IAAiB;;AAGT;IAAO;;AAGd;IAAS;;AAGV;IAAkB;;AAGnB;IAAoB;;AAGtB;IAAK;;AAGE;IAAoB;;AAGpB;IAAoC;;AAGzB;IAA8C;;AAG7D;IAAQ;;AAGV;IAAa;;AAGH;IAAI;;AAGR;IAAkB;;AAGnB;IAAoB;;AAGV;IAAc;;AAGP;IAAI;;AAGH;IAAI;;AAGL;IAAiB;;AAGhB;IAAgC;;AAGjC;IAAI;;AAGH;IAAK;;AAG3B;IAAU;;AAGV;IAAmB;;AAGlB;IAAoB;;AAGpB;IAAoB;;AAGlB;IAAmB;;AAGxB;IAAS;;AAGN;IAAoB;;AAGrB;IAAQ;;AAGD,YAAe;IAAW;;AAGhC;IAAU;;AAGN;IAAa;;AAGT;IAAa;;AAGZ;IAAI;;AAGH;IAAI;;AAGL;IAAgB;;AAGf;IAAiC;;AAGlC;IAAI;;AAGH;IAAI;;AAGb;IAAgB;;AAGlB;IAAgB;;AAGlB;IAAa;;AAGf;IAA+B;;AAGf,YAAgB;IAAS;;AAG9B;IAAa;;AAGhB;IAAK;;AAGM;IAAW;;AAGlB;IAAgB;;AAGlB;IAAO;;AAGI;IAAa;;AAG9B;IAAS;;AAGJ;IAAiB;;AAGd;IAAe;;;QAjb7C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAsB;;AAG3B;IAAY;;AAGJ;IAAM;;AAGb;IAAU;;AAGJ;IAAuB;;AAG7B;IAAO;;AAGR;IAAM;;AAGJ;IAAM;;AAGJ;IAAQ;;AAGT;IAAa;;AAGjB;IAAQ;;AAGT;IAAQ;;AAGV;IAAY;;AAGV;IAAqB;;AAGhB;IAAa;;AAGd;IAAmB;;AAGL;IAAsB;;AAGrC;IAAW;;AAGL;IAAY;;AAGD;IAAyB;;AAGxC;IAAc;;AAGpB;IAAG;;AAGG;IAAM;;AAGN;IAAwB;;AAGhC;IAAQ;;AAGR;IAAiB;;AAGT;IAAa;;AAGhB;IAAa;;AAGZ;IAAgB;;AAGT;IAAwB;;AAGxB;IAA6B;;AAG/B;IAAa;;AAGd;IAAa;;AAGlB;IAAuB;;AAGzB;IAAK;;AAGA;IAAO;;AAGN;IAAY;;AAGb;IAAY;;AAGT;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAW;;AAGb;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAS;;AAGN;IAAS;;AAGN;IAAc;;AAGf;IAAa;;AAGjB;IAAO;;AAGR;IAAK;;AAGN;IAAc;;AAGA;IAAI;;AAGH;IAAI;;AAGL;IAAS;;AAGR;IAAsB;;AAGvB;IAAI;;AAGH;IAAa;;AAG1B;IAAO;;AAGR;IAAgB;;AAGR;IAAO;;AAGd;IAAO;;AAGR;IAAe;;AAGhB;IAAY;;AAGd;IAAQ;;AAGD;IAAsB;;AAGtB;IAAoC;;AAGzB;IAA+C;;AAG9D;IAAM;;AAGR;IAAgB;;AAGN;IAAM;;AAGV;IAAe;;AAGhB;IAAY;;AAGF;IAAW;;AAGJ;IAAI;;AAGH;IAAI;;AAGL;IAAgB;;AAGf;IAA+B;;AAGhC;IAAI;;AAGH;IAAI;;AAG1B;IAAY;;AAGZ;IAAkB;;AAGjB;IAAgB;;AAGhB;IAAa;;AAGX;IAAa;;AAGlB;IAAU;;AAGP;IAAe;;AAGhB;IAAO;;AAGA,YAAe;IAAW;;AAGhC;IAAM;;AAGF;IAAY;;AAGR;IAAU;;AAGT;IAAI;;AAGH;IAAI;;AAGL;IAAgB;;AAGf;IAAiC;;AAGlC;IAAI;;AAGH;IAAI;;AAGb;IAAgB;;AAGlB;IAAc;;AAGhB;IAAc;;AAGhB;IAA+B;;AAGf,YAAgB;IAAU;;AAG/B;IAAY;;AAGf;IAAa;;AAGF;IAAqB;;AAG5B;IAAe;;AAGjB;IAAQ;;AAGG;IAAe;;AAGhC;IAAY;;AAGP;IAAS;;AAGN;IAAa;;;QAjb3C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAmC;;AAGxC;IAAQ;;AAGA;IAAI;;AAGX;IAAU;;AAGJ;IAAqB;;AAG3B;IAAS;;AAGV;IAAQ;;AAGN;IAAQ;;AAGN;IAAS;;AAGV;IAAU;;AAGd;IAAO;;AAGR;IAAQ;;AAGV;IAAY;;AAGV;IAAgB;;AAGX;IAAmB;;AAGpB;IAAgB;;AAGF;IAAyB;;AAGxC;IAAc;;AAGR;IAAsB;;AAGX;IAA2B;;AAG1C;IAAgB;;AAGtB;IAAG;;AAGG;IAAS;;AAGT;IAA6C;;AAGrD;IAAqB;;AAGrB;IAAqB;;AAGb;IAAU;;AAGb;IAAc;;AAGb;IAAkB;;AAGX;IAAmC;;AAGnC;IAAsC;;AAGxC;IAAqB;;AAGtB;IAAwB;;AAG7B;IAA4B;;AAG9B;IAAK;;AAGA;IAAQ;;AAGP;IAAW;;AAGZ;IAAa;;AAGV;IAAY;;AAGd;IAAW;;AAGb;IAAM;;AAGP;IAAM;;AAGP;IAAS;;AAGX;IAAM;;AAGH;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAK;;AAGP;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAS;;AAGX;IAAQ;;AAGT;IAAgB;;AAGb;IAAQ;;AAGL;IAAO;;AAGR;IAAY;;AAGhB;IAAW;;AAGZ;IAAmB;;AAGpB;IAAe;;AAGD;IAAI;;AAGH;IAAI;;AAGL;IAAW;;AAGV;IAAwB;;AAGzB;IAAI;;AAGH;IAAa;;AAG1B;IAAS;;AAGV;IAAqB;;AAGb;IAAQ;;AAGf;IAAO;;AAGR;IAAiB;;AAGlB;IAAmB;;AAGrB;IAAI;;AAGG;IAA6B;;AAG7B;IAAkC;;AAGvB;IAAwC;;AAGvD;IAAS;;AAGX;IAAY;;AAGF;IAAI;;AAGR;IAAiB;;AAGlB;IAAmB;;AAGT;IAAU;;AAGH;IAAI;;AAGH;IAAI;;AAGL;IAAuB;;AAGtB;IAAsC;;AAGvC;IAAI;;AAGH;IAAK;;AAG3B;IAAY;;AAGZ;IAAmB;;AAGlB;IAAiB;;AAGjB;IAAkB;;AAGhB;IAAmB;;AAGxB;IAAW;;AAGR;IAAmB;;AAGpB;IAAO;;AAGA,YAAe;IAAW;;AAGhC;IAAO;;AAGH;IAAiB;;AAGb;IAAgB;;AAGf;IAAI;;AAGH;IAAI;;AAGL;IAAwB;;AAGvB;IAAyC;;AAG1C;IAAI;;AAGH;IAAI;;AAGb;IAAgB;;AAGlB;IAAgB;;AAGlB;IAAU;;AAGZ;IAAgC;;AAGhB,YAAgB;IAAW;;AAGhC;IAAiB;;AAGpB;IAAK;;AAGM;IAAkB;;AAGzB;IAAiB;;AAGnB;IAAQ;;AAGG;IAAoB;;AAGrC;IAAM;;AAGD;IAAoB;;AAGjB;IAAoB;;;QAjblD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAwB;;AAG7B;IAAI;;AAGI;IAAI;;AAGX;IAAI;;AAGE;IAAY;;AAGlB;IAAO;;AAGR;IAAK;;AAGH;IAAK;;AAGH;IAAI;;AAGL;IAAI;;AAGR;IAAK;;AAGN;IAAM;;AAGR;IAAY;;AAGV;IAAO;;AAGF;IAAQ;;AAGT;IAAO;;AAGO;IAAgB;;AAG/B;IAAK;;AAGC;IAAO;;AAGI;IAAgB;;AAG/B;IAAK;;AAGX;IAAG;;AAGG;IAAI;;AAGJ;IAAsB;;AAG9B;IAAO;;AAGP;IAAc;;AAGN;IAAO;;AAGV;IAAQ;;AAGP;IAAW;;AAGJ;IAAS;;AAGT;IAAkB;;AAGpB;IAAU;;AAGX;IAAU;;AAGf;IAAgB;;AAGlB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAU;;AAGP;IAAS;;AAGX;IAAS;;AAGX;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAS;;AAGT;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGN;IAAQ;;AAGN;IAAQ;;AAGN;IAAQ;;AAGT;IAAQ;;AAGT;IAAY;;AAGZ;IAAQ;;AAGL;IAAQ;;AAGP;IAAQ;;AAGP;IAAQ;;AAGV;IAAQ;;AAGd;IAAU;;AAGZ;IAAQ;;AAGT;IAAO;;AAGJ;IAAW;;AAGR;IAAa;;AAGd;IAAY;;AAGhB;IAAQ;;AAGT;IAAO;;AAGR;IAAQ;;AAGM;IAAI;;AAGH;IAAI;;AAGL;IAAY;;AAGX;IAAyB;;AAG1B;IAAI;;AAGH;IAAa;;AAG1B;IAAO;;AAGR;IAAa;;AAGL;IAAK;;AAGZ;IAAK;;AAGN;IAAI;;AAGL;IAAO;;AAGT;IAAI;;AAGG;IAAiB;;AAGjB;IAAyC;;AAG9B;IAA0C;;AAGzD;IAAM;;AAGR;IAAa;;AAGH;IAAI;;AAGR;IAAI;;AAGL;IAAO;;AAGG;IAAI;;AAGG;IAAI;;AAGH;IAAI;;AAGL;IAAe;;AAGd;IAA8B;;AAG/B;IAAI;;AAGH;IAAK;;AAG3B;IAAM;;AAGN;IAAM;;AAGL;IAAM;;AAGN;IAAO;;AAGL;IAAO;;AAGZ;IAAM;;AAGH;IAAY;;AAGb;IAAI;;AAGG,YAAe;IAAK;;AAG1B;IAAI;;AAGA;IAAO;;AAGH;IAAM;;AAGL;IAAI;;AAGH;IAAI;;AAGL;IAAc;;AAGb;IAA+B;;AAGhC;IAAI;;AAGH;IAAI;;AAGb;IAAU;;AAGZ;IAAS;;AAGX;IAAO;;AAGT;IAA0B;;AAGV,YAAgB;IAAU;;AAG/B;IAAO;;AAGV;IAAG;;AAGQ;IAAO;;AAGd;IAAO;;AAGT;IAAG;;AAGQ;IAAM;;AAGvB;IAAI;;AAGC;IAAI;;AAGD;IAAU;;;QAjbxC;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA8B;;AAGnC;IAAa;;AAGL;IAAI;;AAGX;IAAM;;AAGA;IAAqB;;AAG3B;IAAU;;AAGX;IAAS;;AAGP;IAAS;;AAGP;IAAO;;AAGR;IAAY;;AAGhB;IAAU;;AAGX;IAAQ;;AAGV;IAAY;;AAGV;IAAkB;;AAGb;IAAmB;;AAGpB;IAAgB;;AAGF;IAA+B;;AAG9C;IAAmB;;AAGb;IAAmB;;AAGR;IAA6B;;AAG5C;IAAiB;;AAGvB;IAAG;;AAGG;IAAO;;AAGP;IAA8B;;AAGtC;IAAS;;AAGT;IAAkB;;AAGV;IAAS;;AAGZ;IAAgB;;AAGf;IAAqB;;AAGd;IAAoB;;AAGpB;IAAmC;;AAGrC;IAAoB;;AAGrB;IAAsB;;AAG3B;IAAqB;;AAGvB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAQ;;AAGL;IAAU;;AAGP;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAO;;AAGR;IAAa;;AAGC;IAAI;;AAGH;IAAI;;AAGL;IAAY;;AAGX;IAAyB;;AAG1B;IAAI;;AAGH;IAAa;;AAG1B;IAAY;;AAGb;IAAoB;;AAGZ;IAAS;;AAGhB;IAAM;;AAGP;IAAa;;AAGd;IAAgB;;AAGlB;IAAO;;AAGA;IAA2B;;AAG3B;IAAqC;;AAG1B;IAAgD;;AAG/D;IAAO;;AAGT;IAAiB;;AAGP;IAAI;;AAGR;IAAU;;AAGX;IAAa;;AAGH;IAAW;;AAGJ;IAAI;;AAGH;IAAI;;AAGL;IAAiB;;AAGhB;IAAgC;;AAGjC;IAAI;;AAGH;IAAI;;AAG1B;IAAiB;;AAGjB;IAAmB;;AAGlB;IAAmB;;AAGnB;IAAiB;;AAGf;IAAqB;;AAG1B;IAAgB;;AAGb;IAAkB;;AAGnB;IAAS;;AAGF,YAAe;IAAW;;AAGhC;IAAO;;AAGH;IAAe;;AAGX;IAAc;;AAGb;IAAI;;AAGH;IAAI;;AAGL;IAAoB;;AAGnB;IAAqC;;AAGtC;IAAI;;AAGH;IAAI;;AAGb;IAAqB;;AAGvB;IAAgB;;AAGlB;IAAQ;;AAGV;IAAoC;;AAGpB,YAAgB;IAAU;;AAG/B;IAAa;;AAGhB;IAAO;;AAGI;IAAiB;;AAGxB;IAAe;;AAGjB;IAAM;;AAGK;IAAgB;;AAGjC;IAAQ;;AAGH;IAAqB;;AAGlB;IAAmB;;;QAjbjD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA0B;;AAG/B;IAAO;;AAGC;IAAc;;AAGrB;IAAO;;AAGD;IAAkB;;AAGxB;IAAW;;AAGZ;IAAM;;AAGJ;IAAM;;AAGJ;IAAK;;AAGN;IAAY;;AAGhB;IAAQ;;AAGT;IAAK;;AAGP;IAAY;;AAGV;IAAc;;AAGT;IAAe;;AAGhB;IAAc;;AAGA;IAAyB;;AAGxC;IAAc;;AAGR;IAAgB;;AAGL;IAAyB;;AAGxC;IAAc;;AAGpB;IAAG;;AAGG;IAAK;;AAGL;IAAuB;;AAG/B;IAAkB;;AAGlB;IAAkB;;AAGV;IAAK;;AAGR;IAAa;;AAGZ;IAAqB;;AAGd;IAAsB;;AAGtB;IAA6B;;AAG/B;IAAkB;;AAGnB;IAAiB;;AAGtB;IAAoC;;AAGtC;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAa;;AAGf;IAAc;;AAGhB;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAM;;AAGH;IAAc;;AAGX;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAU;;AAGX;IAAW;;AAGG;IAAI;;AAGH;IAAI;;AAGL;IAAY;;AAGX;IAAyB;;AAG1B;IAAI;;AAGH;IAAa;;AAG1B;IAAa;;AAGd;IAAwB;;AAGhB;IAAM;;AAGb;IAAK;;AAGN;IAAW;;AAGZ;IAAY;;AAGd;IAAI;;AAGG;IAAuB;;AAGvB;IAAsC;;AAG3B;IAA8C;;AAG7D;IAAK;;AAGP;IAAyB;;AAGf;IAAc;;AAGlB;IAAU;;AAGX;IAAa;;AAGH;IAAS;;AAGF;IAAI;;AAGH;IAAI;;AAGL;IAAgB;;AAGf;IAA+B;;AAGhC;IAAI;;AAGH;IAAkB;;AAGxC;IAAiB;;AAGjB;IAAe;;AAGd;IAAc;;AAGd;IAAY;;AAGV;IAAY;;AAGjB;IAAkB;;AAGf;IAAyB;;AAG1B;IAAQ;;AAGD,YAAe;IAAW;;AAGhC;IAAO;;AAGH;IAAiB;;AAGb;IAAc;;AAGb;IAAI;;AAGH;IAAI;;AAGL;IAAqB;;AAGpB;IAAsC;;AAGvC;IAAI;;AAGH;IAAoB;;AAG7B;IAAsB;;AAGxB;IAAiB;;AAGnB;IAAkB;;AAGpB;IAA8B;;AAGd,YAAgB;IAAU;;AAG/B;IAAkB;;AAGrB;IAAO;;AAGI;IAAqB;;AAG5B;IAAmB;;AAGrB;IAAO;;AAGI;IAAqB;;AAGtC;IAAK;;AAGA;IAAe;;AAGZ;IAAoB;;;QAjblD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAwB;;AAG7B;IAAU;;AAGF;IAAI;;AAGX;IAAS;;AAGH;IAAkB;;AAGxB;IAAQ;;AAGT;IAAK;;AAGH;IAAK;;AAGH;IAAQ;;AAGT;IAAM;;AAGV;IAAO;;AAGR;IAAM;;AAGR;IAAe;;AAGb;IAAoB;;AAGf;IAAa;;AAGd;IAAuB;;AAGT;IAA+B;;AAG9C;IAAoB;;AAGd;IAAkB;;AAGP;IAAkC;;AAGjD;IAAuB;;AAG7B;IAAG;;AAGG;IAAK;;AAGL;IAAiC;;AAGzC;IAAQ;;AAGR;IAAa;;AAGL;IAAQ;;AAGX;IAAa;;AAGZ;IAAU;;AAGH;IAAmB;;AAGnB;IAA6B;;AAG/B;IAAyB;;AAG1B;IAAyB;;AAG9B;IAA8B;;AAGhC;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAO;;AAGR;IAAiB;;AAGH;IAAI;;AAGH;IAAI;;AAGL;IAAc;;AAGb;IAA2B;;AAG5B;IAAI;;AAGH;IAAa;;AAG1B;IAAY;;AAGb;IAAkB;;AAGV;IAAW;;AAGlB;IAAW;;AAGZ;IAAW;;AAGZ;IAAc;;AAGhB;IAAS;;AAGF;IAAiB;;AAGjB;IAA4C;;AAGjC;IAAkD;;AAGjE;IAAU;;AAGZ;IAAiB;;AAGP;IAAI;;AAGR;IAAO;;AAGR;IAAU;;AAGA;IAAa;;AAGN;IAAI;;AAGH;IAAI;;AAGL;IAAiB;;AAGhB;IAA+B;;AAGhC;IAAI;;AAGH;IAAK;;AAG3B;IAAoB;;AAGpB;IAAmB;;AAGlB;IAAkB;;AAGlB;IAAwB;;AAGtB;IAA4B;;AAGjC;IAAiB;;AAGd;IAA0B;;AAG3B;IAAU;;AAGH,YAAe;IAAK;;AAG1B;IAAS;;AAGL;IAAkB;;AAGd;IAAe;;AAGd;IAAI;;AAGH;IAAI;;AAGL;IAAsB;;AAGrB;IAAuC;;AAGxC;IAAI;;AAGH;IAAI;;AAGb;IAAY;;AAGd;IAAe;;AAGjB;IAAa;;AAGf;IAA0C;;AAG1B,YAAgB;IAAkB;;AAGvC;IAAkB;;AAGrB;IAAM;;AAGK;IAAe;;AAGtB;IAAe;;AAGjB;IAAO;;AAGI;IAAe;;AAGhC;IAAa;;AAGR;IAAoB;;AAGjB;IAAe;;;QAjb7C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA2I;;AAGhJ;IAA0D;;AAGlD;IAA0D;;AAGjE;IAAiE;;AAG3D;IAA8I;;AAGpJ;IAAiE;;AAGlE;IAA0D;;AAGxD;IAA0D;;AAGxD;IAAiE;;AAGlE;IAAwE;;AAG5E;IAA4C;;AAG7C;IAA0D;;AAG5D;IAAY;;AAGV;IAAmG;;AAG9F;IAAwH;;AAGzH;IAAoJ;;AAGtI;IAA+J;;AAG9K;IAAqF;;AAG/E;IAAoJ;;AAGzI;IAA+J;;AAG9K;IAAmG;;AAGzG;IAAG;;AAGG;IAAqC;;AAGrC;IAAqM;;AAG7M;IAA4C;;AAG5C;IAAyH;;AAGjH;IAA0D;;AAG7D;IAAyD;;AAGxD;IAA+H;;AAGxH;IAAiI;;AAGjI;IAAmN;;AAGrN;IAAmJ;;AAGpJ;IAAkG;;AAGvG;IAA+K;;AAGjL;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAO;;AAGR;IAAgE;;AAGlD;IAAI;;AAGH;IAAI;;AAGL;IAA+D;;AAG9D;IAA4J;;AAG7J;IAAI;;AAGH;IAAa;;AAG1B;IAAwE;;AAGzE;IAA0G;;AAGlG;IAAiE;;AAGxE;IAA0D;;AAG3D;IAA4F;;AAG7F;IAAuE;;AAGzE;IAAuB;;AAGhB;IAAuL;;AAGvL;IAAqN;;AAG1M;IAAqN;;AAGpO;IAA4C;;AAG9C;IAAqF;;AAG3E;IAA8B;;AAGlC;IAA4F;;AAG7F;IAAuE;;AAG7D;IAA4F;;AAGrF;IAAI;;AAGH;IAAI;;AAGL;IAAwG;;AAGvG;IAAiN;;AAGlN;IAAI;;AAGH;IAAI;;AAG1B;IAA8E;;AAG9E;IAAqF;;AAGpF;IAAqF;;AAGrF;IAAqF;;AAGnF;IAAwH;;AAG7H;IAAuE;;AAGpE;IAAyJ;;AAG1J;IAAqC;;AAG9B,YAAe;IAAI;;AAGzB;IAA4C;;AAGxC;IAA4I;;AAGxI;IAAsI;;AAGrI;IAAI;;AAGH;IAAI;;AAGL;IAAiJ;;AAGhJ;IAA2R;;AAG5R;IAAI;;AAGH;IAAI;;AAGb;IAAwH;;AAG1H;IAA8E;;AAGhF;IAA8H;;AAGhI;IAAoN;;AAGpM,YAAgB;IAAU;;AAG/B;IAA+H;;AAGlI;IAA8B;;AAGnB;IAA6I;;AAGpJ;IAAiH;;AAGnH;IAAqC;;AAG1B;IAAoJ;;AAGrK;IAA4C;;AAGvC;IAA0G;;AAGvG;IAAkK;;;QAjbhM;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAsB;;AAG3B;IAAI;;AAGI;IAAI;;AAGX;IAAI;;AAGE;IAAY;;AAGlB;IAAI;;AAGL;IAAI;;AAGF;IAAI;;AAGF;IAAK;;AAGN;IAAI;;AAGR;IAAI;;AAGL;IAAK;;AAGP;IAAY;;AAGV;IAAO;;AAGF;IAAa;;AAGd;IAAO;;AAGO;IAAgB;;AAG/B;IAAK;;AAGC;IAAO;;AAGI;IAAgB;;AAG/B;IAAK;;AAGX;IAAG;;AAGG;IAAI;;AAGJ;IAAe;;AAGvB;IAAM;;AAGN;IAAO;;AAGC;IAAI;;AAGP;IAAO;;AAGN;IAAQ;;AAGD;IAAW;;AAGX;IAAe;;AAGjB;IAAc;;AAGf;IAAiB;;AAGtB;IAAgB;;AAGlB;IAAK;;AAGA;IAAO;;AAGN;IAAO;;AAGR;IAAW;;AAGR;IAAQ;;AAGV;IAAO;;AAGT;IAAM;;AAGP;IAAK;;AAGN;IAAK;;AAGP;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAI;;AAGC;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAQ;;AAGT;IAAI;;AAGD;IAAI;;AAGD;IAAc;;AAGf;IAAa;;AAGjB;IAAI;;AAGL;IAAM;;AAGP;IAAS;;AAGK;IAAI;;AAGH;IAAI;;AAGL;IAAS;;AAGR;IAAsB;;AAGvB;IAAI;;AAGH;IAAa;;AAG1B;IAAM;;AAGP;IAAS;;AAGD;IAAI;;AAGX;IAAK;;AAGN;IAAM;;AAGP;IAAQ;;AAGV;IAAI;;AAGG;IAAU;;AAGV;IAAmC;;AAGxB;IAAqC;;AAGpD;IAAM;;AAGR;IAAO;;AAGG;IAAI;;AAGR;IAAK;;AAGN;IAAQ;;AAGE;IAAM;;AAGC;IAAI;;AAGH;IAAI;;AAGL;IAAO;;AAGN;IAAsB;;AAGvB;IAAI;;AAGH;IAAK;;AAG3B;IAAQ;;AAGR;IAAS;;AAGR;IAAU;;AAGV;IAAQ;;AAGN;IAAS;;AAGd;IAAO;;AAGJ;IAAW;;AAGZ;IAAI;;AAGG,YAAe;IAAK;;AAG1B;IAAI;;AAGA;IAAO;;AAGH;IAAO;;AAGN;IAAI;;AAGH;IAAI;;AAGL;IAAW;;AAGV;IAA4B;;AAG7B;IAAI;;AAGH;IAAI;;AAGb;IAAO;;AAGT;IAAO;;AAGT;IAAM;;AAGR;IAA6B;;AAGb,YAAgB;IAAkB;;AAGvC;IAAO;;AAGV;IAAI;;AAGO;IAAO;;AAGd;IAAO;;AAGT;IAAG;;AAGQ;IAAM;;AAGvB;IAAI;;AAGC;IAAI;;AAGD;IAAS;;;QAjbvC;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAkC;;AAGvC;IAAU;;AAGF;IAAa;;AAGpB;IAAO;;AAGD;IAAwB;;AAG9B;IAAe;;AAGhB;IAAO;;AAGL;IAAO;;AAGL;IAAgB;;AAGjB;IAAS;;AAGb;IAAS;;AAGV;IAAO;;AAGT;IAAY;;AAGV;IAAgB;;AAGX;IAAyB;;AAG1B;IAAc;;AAGA;IAAwB;;AAGvC;IAAa;;AAGP;IAAmB;;AAGR;IAAwB;;AAGvC;IAAa;;AAGnB;IAAG;;AAGG;IAAW;;AAGX;IAAqC;;AAG7C;IAAQ;;AAGR;IAAiB;;AAGT;IAAY;;AAGf;IAAa;;AAGZ;IAAsB;;AAGf;IAAqC;;AAGrC;IAAmC;;AAGrC;IAAkB;;AAGnB;IAAoB;;AAGzB;IAA2B;;AAG7B;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAQ;;AAGT;IAAY;;AAGE;IAAI;;AAGH;IAAI;;AAGL;IAAe;;AAGd;IAA4B;;AAG7B;IAAI;;AAGH;IAAa;;AAG1B;IAAgB;;AAGjB;IAAqB;;AAGb;IAAO;;AAGd;IAAM;;AAGP;IAAY;;AAGb;IAAa;;AAGf;IAAO;;AAGA;IAAuB;;AAGvB;IAAsC;;AAG3B;IAAmD;;AAGlE;IAAQ;;AAGV;IAAqB;;AAGX;IAAc;;AAGlB;IAAY;;AAGb;IAAa;;AAGH;IAAU;;AAGH;IAAI;;AAGH;IAAI;;AAGL;IAAe;;AAGd;IAA8B;;AAG/B;IAAI;;AAGH;IAAI;;AAG1B;IAAgB;;AAGhB;IAAgB;;AAGf;IAAe;;AAGf;IAAiB;;AAGf;IAAiB;;AAGtB;IAAiB;;AAGd;IAAwC;;AAGzC;IAAQ;;AAGD,YAAe;IAAW;;AAGhC;IAAO;;AAGH;IAAe;;AAGX;IAAc;;AAGb;IAAI;;AAGH;IAAI;;AAGL;IAAkB;;AAGjB;IAAmC;;AAGpC;IAAI;;AAGH;IAAI;;AAGb;IAAuB;;AAGzB;IAAiB;;AAGnB;IAAwB;;AAG1B;IAAqC;;AAGrB,YAAgB;IAAU;;AAG/B;IAAe;;AAGlB;IAAM;;AAGK;IAAiB;;AAGxB;IAAiB;;AAGnB;IAAO;;AAGI;IAAqB;;AAGtC;IAAK;;AAGA;IAAmB;;AAGhB;IAAwB;;;QAjbtD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA2B;;AAGhC;IAAU;;AAGF;IAAU;;AAGjB;IAAQ;;AAGF;IAAiB;;AAGvB;IAAS;;AAGV;IAAK;;AAGH;IAAK;;AAGH;IAAQ;;AAGT;IAAQ;;AAGZ;IAAQ;;AAGT;IAAK;;AAGP;IAAY;;AAGV;IAAU;;AAGL;IAAa;;AAGd;IAAY;;AAGE;IAAyB;;AAGxC;IAAc;;AAGR;IAAW;;AAGA;IAA2B;;AAG1C;IAAgB;;AAGtB;IAAG;;AAGG;IAAK;;AAGL;IAA2B;;AAGnC;IAAS;;AAGT;IAAW;;AAGH;IAAW;;AAGd;IAAU;;AAGT;IAAa;;AAGN;IAAuB;;AAGvB;IAA2B;;AAG7B;IAAmB;;AAGpB;IAAiB;;AAGtB;IAAoB;;AAGtB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAQ;;AAGN;IAAQ;;AAGN;IAAQ;;AAGT;IAAQ;;AAGT;IAAY;;AAGZ;IAAQ;;AAGL;IAAQ;;AAGP;IAAQ;;AAGP;IAAQ;;AAGV;IAAQ;;AAGd;IAAQ;;AAGV;IAAM;;AAGP;IAAS;;AAGN;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAO;;AAGR;IAAY;;AAGE;IAAI;;AAGH;IAAI;;AAGL;IAAa;;AAGZ;IAA0B;;AAG3B;IAAI;;AAGH;IAAa;;AAG1B;IAAW;;AAGZ;IAAa;;AAGL;IAAQ;;AAGf;IAAW;;AAGZ;IAAU;;AAGX;IAAU;;AAGZ;IAAQ;;AAGD;IAAkB;;AAGlB;IAAyC;;AAG9B;IAAwC;;AAGvD;IAAK;;AAGP;IAAa;;AAGH;IAAU;;AAGd;IAAW;;AAGZ;IAAY;;AAGF;IAAY;;AAGL;IAAI;;AAGH;IAAI;;AAGL;IAAoB;;AAGnB;IAAmC;;AAGpC;IAAI;;AAGH;IAAI;;AAG1B;IAAS;;AAGT;IAAY;;AAGX;IAAW;;AAGX;IAAe;;AAGb;IAAiB;;AAGtB;IAAU;;AAGP;IAAY;;AAGb;IAAQ;;AAGD,YAAe;IAAI;;AAGzB;IAAO;;AAGH;IAAa;;AAGT;IAAU;;AAGT;IAAI;;AAGH;IAAI;;AAGL;IAAoB;;AAGnB;IAAqC;;AAGtC;IAAI;;AAGH;IAAI;;AAGb;IAAY;;AAGd;IAAW;;AAGb;IAAmB;;AAGrB;IAAsC;;AAGtB,YAAgB;IAAU;;AAG/B;IAAW;;AAGd;IAAS;;AAGE;IAAU;;AAGjB;IAAU;;AAGZ;IAAM;;AAGK;IAAW;;AAG5B;IAAO;;AAGF;IAAW;;AAGR;IAAgB;;;QAjb9C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA0B;;AAG/B;IAAW;;AAGH;IAAW;;AAGlB;IAAO;;AAGD;IAAwB;;AAG9B;IAAU;;AAGX;IAAU;;AAGR;IAAU;;AAGR;IAAY;;AAGb;IAAO;;AAGX;IAAW;;AAGZ;IAAU;;AAGZ;IAAa;;AAGX;IAAe;;AAGV;IAAwB;;AAGzB;IAAkB;;AAGJ;IAA2B;;AAG1C;IAAe;;AAGT;IAAuB;;AAGZ;IAA2B;;AAG1C;IAAe;;AAGrB;IAAG;;AAGG;IAAU;;AAGV;IAA2C;;AAGnD;IAAgB;;AAGhB;IAAe;;AAGP;IAAW;;AAGd;IAAiB;;AAGhB;IAAiB;;AAGV;IAAoB;;AAGpB;IAAoC;;AAGtC;IAAsB;;AAGvB;IAAwB;;AAG7B;IAAwB;;AAG1B;IAAK;;AAGA;IAAO;;AAGN;IAAoB;;AAGrB;IAAW;;AAGR;IAAoB;;AAGtB;IAAe;;AAGjB;IAAM;;AAGP;IAAK;;AAGN;IAAQ;;AAGV;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAU;;AAGV;IAAU;;AAGV;IAAU;;AAGV;IAAU;;AAGV;IAAU;;AAGV;IAAU;;AAGV;IAAU;;AAGV;IAAU;;AAGV;IAAU;;AAGV;IAAU;;AAGR;IAAU;;AAGR;IAAU;;AAGR;IAAU;;AAGX;IAAU;;AAGX;IAAgB;;AAGhB;IAAU;;AAGP;IAAU;;AAGT;IAAU;;AAGT;IAAU;;AAGZ;IAAU;;AAGhB;IAAQ;;AAGV;IAAM;;AAGP;IAAY;;AAGT;IAAU;;AAGP;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAQ;;AAGT;IAAqB;;AAGP;IAA2B;;AAG1B;IAA2B;;AAG5B;IAAa;;AAGZ;IAA0B;;AAG3B;IAAI;;AAGH;IAAa;;AAG1B;IAAY;;AAGb;IAAqB;;AAGb;IAAY;;AAGnB;IAAS;;AAGV;IAAa;;AAGd;IAAgB;;AAGlB;IAAO;;AAGA;IAAyB;;AAGzB;IAAkC;;AAGvB;IAA0C;;AAGzD;IAAW;;AAGb;IAAoB;;AAGV;IAAQ;;AAGZ;IAAkB;;AAGnB;IAAqB;;AAGX;IAAY;;AAGL;IAAiC;;AAGhC;IAAgC;;AAGjC;IAAiB;;AAGhB;IAAgC;;AAGjC;IAAI;;AAGH;IAAK;;AAG3B;IAAgB;;AAGhB;IAAiB;;AAGhB;IAAkB;;AAGlB;IAAoB;;AAGlB;IAAoB;;AAGzB;IAAkB;;AAGf;IAAoB;;AAGrB;IAAW;;AAGJ,YAAe;IAAW;;AAGhC;IAAS;;AAGL;IAAkB;;AAGd;IAAmB;;AAGlB;IAAyC;;AAGxC;IAAwC;;AAGzC;IAAyB;;AAGxB;IAAwC;;AAGzC;IAAI;;AAGH;IAAI;;AAGb;IAAiB;;AAGnB;IAAc;;AAGhB;IAAa;;AAGf;IAAmC;;AAGnB,YAAgB;IAAW;;AAGhC;IAAmB;;AAGtB;IAAU;;AAGC;IAAsB;;AAG7B;IAAgB;;AAGlB;IAAS;;AAGE;IAAqB;;AAGtC;IAAM;;AAGD;IAAY;;AAGT;IAAuB;;;QAjbrD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAuB;;AAG5B;IAAa;;AAGL;IAAgB;;AAGvB;IAAS;;AAGH;IAA0B;;AAGhC;IAAQ;;AAGT;IAAS;;AAGP;IAAS;;AAGP;IAAS;;AAGV;IAAU;;AAGd;IAAO;;AAGR;IAAU;;AAGZ;IAAY;;AAGV;IAAiB;;AAGZ;IAAkB;;AAGnB;IAAiB;;AAGH;IAA0B;;AAGzC;IAAc;;AAGR;IAAoB;;AAGT;IAA2B;;AAG1C;IAAe;;AAGrB;IAAG;;AAGG;IAAO;;AAGP;IAA6C;;AAGrD;IAAe;;AAGf;IAAqB;;AAGb;IAAS;;AAGZ;IAAY;;AAGX;IAAc;;AAGP;IAAuB;;AAGvB;IAAsC;;AAGxC;IAAmB;;AAGpB;IAAqB;;AAG1B;IAAwB;;AAG1B;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAiB;;AAGnB;IAAsB;;AAGxB;IAAM;;AAGP;IAAK;;AAGN;IAAS;;AAGX;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAS;;AAGb;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAS;;AAGN;IAAS;;AAGN;IAAc;;AAGf;IAAa;;AAGjB;IAAS;;AAGV;IAAoB;;AAGrB;IAAa;;AAGC;IAAI;;AAGH;IAAI;;AAGL;IAAW;;AAGV;IAAyB;;AAG1B;IAAI;;AAGH;IAAa;;AAG1B;IAAU;;AAGX;IAAwB;;AAGhB;IAAS;;AAGhB;IAAQ;;AAGT;IAAkB;;AAGnB;IAAa;;AAGf;IAAM;;AAGC;IAA4B;;AAG5B;IAAoC;;AAGzB;IAA6C;;AAG5D;IAAS;;AAGX;IAAoB;;AAGV;IAAa;;AAGjB;IAAuB;;AAGxB;IAAkB;;AAGR;IAAc;;AAGP;IAAI;;AAGH;IAAI;;AAGL;IAAuB;;AAGtB;IAAwC;;AAGzC;IAAI;;AAGH;IAAiC;;AAGvD;IAAmB;;AAGnB;IAAqB;;AAGpB;IAAmB;;AAGnB;IAAqB;;AAGnB;IAAqB;;AAG1B;IAAoB;;AAGjB;IAAc;;AAGf;IAAU;;AAGH,YAAe;IAAW;;AAGhC;IAAQ;;AAGJ;IAAc;;AAGV;IAAe;;AAGd;IAAI;;AAGH;IAAI;;AAGL;IAAoB;;AAGnB;IAAqC;;AAGtC;IAAI;;AAGH;IAAsB;;AAG/B;IAAc;;AAGhB;IAAe;;AAGjB;IAAoB;;AAGtB;IAAgC;;AAGhB,YAAgB;IAAW;;AAGhC;IAAgB;;AAGnB;IAAQ;;AAGG;IAAkB;;AAGzB;IAAgB;;AAGlB;IAAQ;;AAGG;IAAkB;;AAGnC;IAAQ;;AAGH;IAAkB;;AAGf;IAAiB;;;QAjb/C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAsB;;AAG3B;IAAgB;;AAGR;IAAY;;AAGnB;IAAO;;AAGD;IAAqB;;AAG3B;IAAQ;;AAGT;IAAS;;AAGP;IAAS;;AAGP;IAAS;;AAGV;IAAU;;AAGd;IAAS;;AAGV;IAAO;;AAGT;IAAY;;AAGV;IAAe;;AAGV;IAAkB;;AAGnB;IAAgB;;AAGF;IAAwB;;AAGvC;IAAa;;AAGP;IAAgB;;AAGL;IAAiC;;AAGhD;IAAsB;;AAG5B;IAAG;;AAGG;IAAS;;AAGT;IAAkC;;AAG1C;IAAS;;AAGT;IAAoB;;AAGZ;IAAQ;;AAGX;IAAe;;AAGd;IAAe;;AAGR;IAAsB;;AAGtB;IAA0C;;AAG5C;IAAmB;;AAGpB;IAAiB;;AAGtB;IAAuB;;AAGzB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAO;;AAGR;IAAmB;;AAGL;IAAI;;AAGH;IAAI;;AAGL;IAAW;;AAGV;IAAwB;;AAGzB;IAAI;;AAGH;IAAa;;AAG1B;IAAS;;AAGV;IAAyB;;AAGjB;IAAQ;;AAGf;IAAM;;AAGP;IAAgB;;AAGjB;IAAiB;;AAGnB;IAAQ;;AAGD;IAAkC;;AAGlC;IAAoC;;AAGzB;IAA8C;;AAG7D;IAAQ;;AAGV;IAAe;;AAGL;IAAU;;AAGd;IAAmB;;AAGpB;IAAoB;;AAGV;IAAQ;;AAGD;IAAI;;AAGH;IAAI;;AAGL;IAAyB;;AAGxB;IAA2C;;AAG5C;IAAI;;AAGH;IAAI;;AAG1B;IAAmB;;AAGnB;IAAmB;;AAGlB;IAAoB;;AAGpB;IAAsB;;AAGpB;IAAuB;;AAG5B;IAAmB;;AAGhB;IAAqB;;AAGtB;IAAS;;AAGF,YAAe;IAAW;;AAGhC;IAAc;;AAGV;IAAgB;;AAGZ;IAAiB;;AAGhB;IAAI;;AAGH;IAAI;;AAGL;IAAoB;;AAGnB;IAAsC;;AAGvC;IAAI;;AAGH;IAAI;;AAGb;IAAgB;;AAGlB;IAAc;;AAGhB;IAAc;;AAGhB;IAAkC;;AAGlB,YAAgB;IAAU;;AAG/B;IAAgB;;AAGnB;IAAK;;AAGM;IAAiB;;AAGxB;IAAe;;AAGjB;IAAQ;;AAGG;IAAiB;;AAGlC;IAAO;;AAGF;IAAkB;;AAGf;IAAiB;;;QAjb/C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAsC;;AAG3C;IAAe;;AAGP;IAAI;;AAGX;IAAS;;AAGH;IAAqB;;AAG3B;IAAY;;AAGb;IAAY;;AAGV;IAAY;;AAGV;IAAgB;;AAGjB;IAAQ;;AAGZ;IAAU;;AAGX;IAAW;;AAGb;IAAY;;AAGV;IAAa;;AAGR;IAA+B;;AAGhC;IAAsB;;AAGR;IAAgC;;AAG/C;IAAqB;;AAGf;IAAuB;;AAGZ;IAA+B;;AAG9C;IAAoB;;AAG1B;IAAG;;AAGG;IAAc;;AAGd;IAA6B;;AAGrC;IAAQ;;AAGR;IAAe;;AAGP;IAAW;;AAGd;IAAW;;AAGV;IAAwB;;AAGjB;IAAsB;;AAGtB;IAAwC;;AAG1C;IAAqB;;AAGtB;IAAiB;;AAGtB;IAAoB;;AAGtB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAO;;AAGR;IAAY;;AAGE;IAAI;;AAGH;IAAI;;AAGL;IAAY;;AAGX;IAAyB;;AAG1B;IAAI;;AAGH;IAAa;;AAG1B;IAAU;;AAGX;IAAe;;AAGP;IAAY;;AAGnB;IAAQ;;AAGT;IAAa;;AAGd;IAAa;;AAGf;IAAK;;AAGE;IAAwB;;AAGxB;IAAkC;;AAGvB;IAAyC;;AAGxD;IAAY;;AAGd;IAAmB;;AAGT;IAAI;;AAGR;IAAgB;;AAGjB;IAAgB;;AAGN;IAAiB;;AAGV;IAAI;;AAGH;IAAI;;AAGL;IAA0B;;AAGzB;IAA0C;;AAG3C;IAAI;;AAGH;IAAI;;AAG1B;IAAkB;;AAGlB;IAAoB;;AAGnB;IAAoB;;AAGpB;IAAyB;;AAGvB;IAAwB;;AAG7B;IAAqB;;AAGlB;IAAwB;;AAGzB;IAAc;;AAGP,YAAe;IAAI;;AAGzB;IAAQ;;AAGJ;IAAuB;;AAGnB;IAAqB;;AAGpB;IAAI;;AAGH;IAAI;;AAGL;IAAuB;;AAGtB;IAAyC;;AAG1C;IAAI;;AAGH;IAAI;;AAGb;IAAuB;;AAGzB;IAAgB;;AAGlB;IAAgB;;AAGlB;IAAwB;;AAGR,YAAgB;IAAU;;AAG/B;IAAqB;;AAGxB;IAAU;;AAGC;IAAyB;;AAGhC;IAAY;;AAGd;IAAU;;AAGC;IAAyB;;AAG1C;IAAO;;AAGF;IAAc;;AAGX;IAAgB;;;QAjb9C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA2B;;AAGhC;IAAc;;AAGN;IAAO;;AAGd;IAAO;;AAGD;IAAsB;;AAG5B;IAAO;;AAGR;IAAM;;AAGJ;IAAM;;AAGJ;IAAQ;;AAGT;IAAc;;AAGlB;IAAQ;;AAGT;IAAQ;;AAGV;IAAY;;AAGV;IAAe;;AAGV;IAA2B;;AAG5B;IAAc;;AAGA;IAAyB;;AAGxC;IAAc;;AAGR;IAAiB;;AAGN;IAAwB;;AAGvC;IAAa;;AAGnB;IAAG;;AAGG;IAAQ;;AAGR;IAA8B;;AAGtC;IAAe;;AAGf;IAAe;;AAGP;IAAS;;AAGZ;IAAc;;AAGb;IAAoB;;AAGb;IAAkB;;AAGlB;IAAgC;;AAGlC;IAAqB;;AAGtB;IAAuB;;AAG5B;IAAuB;;AAGzB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAK;;AAGH;IAAS;;AAGX;IAAM;;AAGD;IAAQ;;AAGN;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAoB;;AAGjB;IAAS;;AAGN;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAO;;AAGR;IAAgB;;AAGF;IAAI;;AAGH;IAAI;;AAGL;IAAU;;AAGT;IAAuB;;AAGxB;IAAI;;AAGH;IAAa;;AAG1B;IAAQ;;AAGT;IAAqB;;AAGb;IAAa;;AAGpB;IAAO;;AAGR;IAAY;;AAGb;IAAe;;AAGjB;IAAI;;AAGG;IAAuB;;AAGvB;IAAiC;;AAGtB;IAA8C;;AAG7D;IAAS;;AAGX;IAAW;;AAGD;IAAM;;AAGV;IAAW;;AAGZ;IAAc;;AAGJ;IAAS;;AAGF;IAAI;;AAGH;IAAI;;AAGL;IAAkB;;AAGjB;IAAiC;;AAGlC;IAAI;;AAGH;IAAyB;;AAG/C;IAAW;;AAGX;IAAgB;;AAGf;IAAkB;;AAGlB;IAAkB;;AAGhB;IAAgB;;AAGrB;IAAW;;AAGR;IAA0B;;AAG3B;IAAU;;AAGH,YAAe;IAAW;;AAGhC;IAAM;;AAGF;IAAgB;;AAGZ;IAAY;;AAGX;IAAI;;AAGH;IAAI;;AAGL;IAAiB;;AAGhB;IAAkC;;AAGnC;IAAI;;AAGH;IAAwB;;AAGjC;IAAwB;;AAG1B;IAAiB;;AAGnB;IAAW;;AAGb;IAA8B;;AAGd,YAAgB;IAAW;;AAGhC;IAAY;;AAGf;IAAK;;AAGM;IAAgB;;AAGvB;IAAa;;AAGf;IAAO;;AAGI;IAAkB;;AAGnC;IAAO;;AAGF;IAAoB;;AAGjB;IAAiB;;;QAjb/C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAyB;;AAG9B;IAAO;;AAGC;IAAI;;AAGX;IAAM;;AAGA;IAAqB;;AAG3B;IAAU;;AAGX;IAAS;;AAGP;IAAS;;AAGP;IAAa;;AAGd;IAAW;;AAGf;IAAU;;AAGX;IAAQ;;AAGV;IAAY;;AAGV;IAAgB;;AAGX;IAAuB;;AAGxB;IAAa;;AAGC;IAA4B;;AAG3C;IAAiB;;AAGX;IAAc;;AAGH;IAAgC;;AAG/C;IAAqB;;AAG3B;IAAG;;AAGG;IAAM;;AAGN;IAA2B;;AAGnC;IAAQ;;AAGR;IAAiB;;AAGT;IAAa;;AAGhB;IAAW;;AAGV;IAAW;;AAGJ;IAAmB;;AAGnB;IAA6B;;AAG/B;IAAoB;;AAGrB;IAAoB;;AAGzB;IAAoB;;AAGtB;IAAK;;AAGA;IAAO;;AAGN;IAAU;;AAGX;IAAW;;AAGR;IAAW;;AAGb;IAAS;;AAGX;IAAM;;AAGP;IAAK;;AAGN;IAAQ;;AAGV;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAK;;AAGH;IAAS;;AAGX;IAAM;;AAGD;IAAO;;AAGL;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAM;;AAGH;IAAS;;AAGN;IAAgB;;AAGjB;IAAa;;AAGjB;IAAO;;AAGR;IAAO;;AAGR;IAAY;;AAGE;IAAI;;AAGH;IAAI;;AAGL;IAAW;;AAGV;IAAuB;;AAGxB;IAAI;;AAGH;IAAa;;AAG1B;IAAQ;;AAGT;IAAe;;AAGP;IAAY;;AAGnB;IAAM;;AAGP;IAAa;;AAGd;IAAW;;AAGb;IAAK;;AAGE;IAAsB;;AAGtB;IAAoC;;AAGzB;IAA0C;;AAGzD;IAAW;;AAGb;IAAY;;AAGF;IAAI;;AAGR;IAAa;;AAGd;IAAW;;AAGD;IAAa;;AAGN;IAAI;;AAGH;IAAI;;AAGL;IAAgB;;AAGf;IAA8B;;AAG/B;IAAI;;AAGH;IAA2B;;AAGjD;IAAW;;AAGX;IAAc;;AAGb;IAAc;;AAGd;IAAe;;AAGb;IAAiB;;AAGtB;IAAS;;AAGN;IAAmB;;AAGpB;IAAW;;AAGJ,YAAe;IAAK;;AAG1B;IAAK;;AAGD;IAAY;;AAGR;IAAY;;AAGX;IAAI;;AAGH;IAAI;;AAGL;IAAgB;;AAGf;IAAgC;;AAGjC;IAAI;;AAGH;IAA6B;;AAGtC;IAAa;;AAGf;IAAY;;AAGd;IAAkB;;AAGpB;IAA+B;;AAGf,YAAgB;IAAkB;;AAGvC;IAAW;;AAGd;IAAK;;AAGM;IAAW;;AAGlB;IAAc;;AAGhB;IAAO;;AAGI;IAAc;;AAG/B;IAAO;;AAGF;IAAc;;AAGX;IAAY;;;QAjb1C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA2B;;AAGhC;IAAU;;AAGF;IAAI;;AAGX;IAAS;;AAGH;IAAuB;;AAG7B;IAAO;;AAGR;IAAO;;AAGL;IAAO;;AAGL;IAAY;;AAGb;IAAU;;AAGd;IAAO;;AAGR;IAAQ;;AAGV;IAAY;;AAGV;IAAiB;;AAGZ;IAAgB;;AAGjB;IAAc;;AAGA;IAA+B;;AAG9C;IAAc;;AAGR;IAAa;;AAGF;IAA8B;;AAG7C;IAAa;;AAGnB;IAAG;;AAGG;IAAO;;AAGP;IAAiC;;AAGzC;IAAQ;;AAGR;IAAe;;AAGP;IAAW;;AAGd;IAAiB;;AAGhB;IAAmB;;AAGZ;IAAoB;;AAGpB;IAA+B;;AAGjC;IAAmB;;AAGpB;IAAkB;;AAGvB;IAAwB;;AAG1B;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAe;;AAGjB;IAAiB;;AAGnB;IAAM;;AAGP;IAAK;;AAGN;IAAW;;AAGb;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAU;;AAGR;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAS;;AAGN;IAAc;;AAGf;IAAa;;AAGjB;IAAO;;AAGR;IAAO;;AAGR;IAAkB;;AAGJ;IAAI;;AAGH;IAAI;;AAGL;IAAS;;AAGR;IAAsB;;AAGvB;IAAI;;AAGH;IAAa;;AAG1B;IAAO;;AAGR;IAAe;;AAGP;IAAO;;AAGd;IAAM;;AAGP;IAAa;;AAGd;IAAoB;;AAGtB;IAAI;;AAGG;IAAoB;;AAGpB;IAAoC;;AAGzB;IAA8C;;AAG7D;IAAQ;;AAGV;IAAiB;;AAGP;IAAK;;AAGT;IAAkB;;AAGnB;IAAoB;;AAGV;IAAa;;AAGN;IAAI;;AAGH;IAAI;;AAGL;IAAe;;AAGd;IAA8B;;AAG/B;IAAI;;AAGH;IAAK;;AAG3B;IAAe;;AAGf;IAAc;;AAGb;IAAe;;AAGf;IAAoB;;AAGlB;IAAmB;;AAGxB;IAAc;;AAGX;IAAuB;;AAGxB;IAAQ;;AAGD,YAAe;IAAW;;AAGhC;IAAM;;AAGF;IAAa;;AAGT;IAAa;;AAGZ;IAAI;;AAGH;IAAI;;AAGL;IAAgB;;AAGf;IAAiC;;AAGlC;IAAI;;AAGH;IAAoB;;AAG7B;IAAiB;;AAGnB;IAAgB;;AAGlB;IAAa;;AAGf;IAA+B;;AAGf,YAAgB;IAAkB;;AAGvC;IAAY;;AAGf;IAAK;;AAGM;IAAW;;AAGlB;IAAe;;AAGjB;IAAO;;AAGI;IAAa;;AAG9B;IAAQ;;AAGH;IAAc;;AAGX;IAAa;;;QAjb3C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA4B;;AAGjC;IAAY;;AAGJ;IAAI;;AAGX;IAAW;;AAGL;IAA0B;;AAGhC;IAAW;;AAGZ;IAAS;;AAGP;IAAS;;AAGP;IAAS;;AAGV;IAAY;;AAGhB;IAAc;;AAGf;IAAW;;AAGb;IAAY;;AAGV;IAAgB;;AAGX;IAAkC;;AAGnC;IAAc;;AAGA;IAA2B;;AAG1C;IAAgB;;AAGV;IAAsB;;AAGX;IAA4B;;AAG3C;IAAiB;;AAGvB;IAAG;;AAGG;IAAS;;AAGT;IAAwC;;AAGhD;IAAa;;AAGb;IAAiB;;AAGT;IAAa;;AAGhB;IAAe;;AAGd;IAAwB;;AAGjB;IAA6B;;AAG7B;IAAuC;;AAGzC;IAAqB;;AAGtB;IAAuB;;AAG5B;IAA0B;;AAG5B;IAAK;;AAGA;IAAO;;AAGN;IAAgB;;AAGjB;IAAmB;;AAGhB;IAAc;;AAGhB;IAAc;;AAGhB;IAAM;;AAGP;IAAK;;AAGN;IAAS;;AAGX;IAAO;;AAGJ;IAAK;;AAGT;IAAI;;AAGF;IAAW;;AAGT;IAAgB;;AAGlB;IAAM;;AAGD;IAAU;;AAGR;IAAK;;AAGT;IAAc;;AAGd;IAAU;;AAGV;IAAU;;AAGV;IAAU;;AAGV;IAAU;;AAGV;IAAU;;AAGV;IAAU;;AAGV;IAAU;;AAGV;IAAU;;AAGV;IAAU;;AAGV;IAAU;;AAGR;IAAU;;AAGR;IAAU;;AAGR;IAAU;;AAGX;IAAU;;AAGX;IAAoB;;AAGpB;IAAU;;AAGP;IAAU;;AAGT;IAAU;;AAGT;IAAU;;AAGZ;IAAU;;AAGhB;IAAQ;;AAGV;IAAM;;AAGP;IAAW;;AAGR;IAAY;;AAGT;IAAY;;AAGb;IAAkB;;AAGtB;IAAS;;AAGV;IAAe;;AAGhB;IAAqB;;AAGP;IAAI;;AAGH;IAAI;;AAGL;IAAe;;AAGd;IAA4B;;AAG7B;IAAI;;AAGH;IAAa;;AAG1B;IAAc;;AAGf;IAAgB;;AAGR;IAAQ;;AAGf;IAAU;;AAGX;IAAQ;;AAGT;IAAgB;;AAGlB;IAAI;;AAGG;IAA4B;;AAG5B;IAAoC;;AAGzB;IAAsC;;AAGrD;IAAY;;AAGd;IAAgB;;AAGN;IAAI;;AAGR;IAAO;;AAGR;IAAe;;AAGL;IAAgB;;AAGT;IAAI;;AAGH;IAAI;;AAGL;IAAsB;;AAGrB;IAAqC;;AAGtC;IAAI;;AAGH;IAAI;;AAG1B;IAAmB;;AAGnB;IAAoB;;AAGnB;IAAmB;;AAGnB;IAAqB;;AAGnB;IAAiB;;AAGtB;IAAoB;;AAGjB;IAAgC;;AAGjC;IAAU;;AAGH,YAAe;IAAI;;AAGzB;IAAW;;AAGP;IAAiB;;AAGb;IAAgB;;AAGf;IAAI;;AAGH;IAAI;;AAGL;IAAiB;;AAGhB;IAAkC;;AAGnC;IAAI;;AAGH;IAAI;;AAGb;IAAsB;;AAGxB;IAAa;;AAGf;IAAuB;;AAGzB;IAAkC;;AAGlB,YAAgB;IAAU;;AAG/B;IAAe;;AAGlB;IAAM;;AAGK;IAAgB;;AAGvB;IAAe;;AAGjB;IAAO;;AAGI;IAAiB;;AAGlC;IAAQ;;AAGH;IAAiB;;AAGd;IAA0B;;;QAjbxD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAsB;;AAG3B;IAAQ;;AAGA;IAAI;;AAGX;IAAS;;AAGH;IAAmB;;AAGzB;IAAQ;;AAGT;IAAM;;AAGJ;IAAM;;AAGJ;IAAK;;AAGN;IAAU;;AAGd;IAAQ;;AAGT;IAAU;;AAGZ;IAAY;;AAGV;IAAkB;;AAGb;IAAmB;;AAGpB;IAAa;;AAGC;IAAsB;;AAGrC;IAAW;;AAGL;IAAe;;AAGJ;IAAsB;;AAGrC;IAAW;;AAGjB;IAAG;;AAGG;IAAO;;AAGP;IAAqC;;AAG7C;IAAY;;AAGZ;IAAiB;;AAGT;IAAO;;AAGV;IAAa;;AAGZ;IAAe;;AAGR;IAAsB;;AAGtB;IAA4B;;AAG9B;IAAiB;;AAGlB;IAAkB;;AAGvB;IAA4B;;AAG9B;IAAK;;AAGA;IAAQ;;AAGP;IAAa;;AAGd;IAAW;;AAGR;IAAe;;AAGjB;IAAa;;AAGf;IAAM;;AAGP;IAAK;;AAGN;IAAQ;;AAGV;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAU;;AAGR;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAQ;;AAGL;IAAQ;;AAGT;IAAO;;AAGX;IAAM;;AAGP;IAAW;;AAGZ;IAAY;;AAGE;IAAI;;AAGH;IAAI;;AAGL;IAAU;;AAGT;IAAyB;;AAG1B;IAAI;;AAGH;IAAI;;AAGjB;IAAU;;AAGX;IAAoB;;AAGZ;IAAO;;AAGd;IAAK;;AAGN;IAAa;;AAGd;IAAY;;AAGd;IAAI;;AAGG;IAAwB;;AAGxB;IAAkC;;AAGvB;IAA0C;;AAGzD;IAAS;;AAGX;IAAe;;AAGL;IAAI;;AAGR;IAAe;;AAGhB;IAAc;;AAGJ;IAAoB;;AAGb;IAAI;;AAGH;IAAI;;AAGL;IAAiB;;AAGhB;IAAgC;;AAGjC;IAAI;;AAGH;IAAI;;AAG1B;IAAW;;AAGX;IAAmB;;AAGlB;IAAiB;;AAGjB;IAAmB;;AAGjB;IAAmB;;AAGxB;IAAW;;AAGR;IAAiB;;AAGlB;IAAO;;AAGA,YAAe;IAAW;;AAGhC;IAAK;;AAGD;IAAW;;AAGP;IAAW;;AAGV;IAAI;;AAGH;IAAI;;AAGL;IAAoB;;AAGnB;IAAuC;;AAGxC;IAAI;;AAGH;IAAI;;AAGb;IAAa;;AAGf;IAAU;;AAGZ;IAAU;;AAGZ;IAA8B;;AAGd,YAAgB;IAAW;;AAGhC;IAAkB;;AAGrB;IAAM;;AAGK;IAAY;;AAGnB;IAAqB;;AAGvB;IAAQ;;AAGG;IAAe;;AAGhC;IAAM;;AAGD;IAAa;;AAGV;IAAa;;;QAjb3C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAwB;;AAG7B;IAAO;;AAGC;IAAW;;AAGlB;IAAgB;;AAGV;IAA6B;;AAGnC;IAAgB;;AAGjB;IAAgB;;AAGd;IAAgB;;AAGd;IAAmB;;AAGpB;IAAiB;;AAGrB;IAAqB;;AAGtB;IAAY;;AAGd;IAAY;;AAGV;IAA0B;;AAGrB;IAAkB;;AAGnB;IAAoB;;AAGN;IAA6B;;AAG5C;IAAkB;;AAGZ;IAAqB;;AAGV;IAA2B;;AAG1C;IAAgB;;AAGtB;IAAG;;AAGG;IAAY;;AAGZ;IAAoC;;AAG5C;IAAO;;AAGP;IAAe;;AAGP;IAAqB;;AAGxB;IAAW;;AAGV;IAAqB;;AAGd;IAA4B;;AAG5B;IAAgC;;AAGlC;IAAa;;AAGd;IAAa;;AAGlB;IAA6B;;AAG/B;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAO;;AAGR;IAAY;;AAGE;IAAI;;AAGH;IAAI;;AAGL;IAAgB;;AAGf;IAA8B;;AAG/B;IAAI;;AAGH;IAAa;;AAG1B;IAAc;;AAGf;IAAiB;;AAGT;IAAiB;;AAGxB;IAAI;;AAGL;IAAa;;AAGd;IAAa;;AAGf;IAAO;;AAGA;IAA0B;;AAG1B;IAAqC;;AAG1B;IAAuC;;AAGtD;IAAa;;AAGf;IAAW;;AAGD;IAAS;;AAGb;IAAe;;AAGhB;IAAe;;AAGL;IAAqB;;AAGd;IAAI;;AAGH;IAAI;;AAGL;IAAc;;AAGb;IAAgC;;AAGjC;IAAI;;AAGH;IAAI;;AAG1B;IAAe;;AAGf;IAAkB;;AAGjB;IAAkB;;AAGlB;IAAmB;;AAGjB;IAAmB;;AAGxB;IAAiB;;AAGd;IAA8C;;AAG/C;IAAe;;AAGR,YAAe;IAAI;;AAGzB;IAAY;;AAGR;IAA0B;;AAGtB;IAAiB;;AAGhB;IAAI;;AAGH;IAAI;;AAGL;IAAmB;;AAGlB;IAAsC;;AAGvC;IAAI;;AAGH;IAAI;;AAGb;IAAqB;;AAGvB;IAAkB;;AAGpB;IAAe;;AAGjB;IAAkC;;AAGlB,YAAgB;IAAU;;AAG/B;IAAmB;;AAGtB;IAAO;;AAGI;IAAqB;;AAG5B;IAAyB;;AAG3B;IAAO;;AAGI;IAAqB;;AAGtC;IAAM;;AAGD;IAAc;;AAGX;IAAyB;;;QAjbvD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAwB;;AAG7B;IAAS;;AAGD;IAAI;;AAGX;IAAO;;AAGD;IAA6B;;AAGnC;IAAW;;AAGZ;IAAS;;AAGP;IAAS;;AAGP;IAAW;;AAGZ;IAAU;;AAGd;IAAU;;AAGX;IAAS;;AAGX;IAAY;;AAGV;IAAe;;AAGV;IAAgB;;AAGjB;IAAkB;;AAGJ;IAAsB;;AAGrC;IAAW;;AAGL;IAAoB;;AAGT;IAAuB;;AAGtC;IAAY;;AAGlB;IAAG;;AAGG;IAAa;;AAGb;IAAyB;;AAGjC;IAAgB;;AAGhB;IAAe;;AAGP;IAAa;;AAGhB;IAAe;;AAGd;IAAoB;;AAGb;IAA2B;;AAG3B;IAAgC;;AAGlC;IAAqB;;AAGtB;IAAoB;;AAGzB;IAA0B;;AAG5B;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAe;;AAGjB;IAAe;;AAGjB;IAAM;;AAGP;IAAK;;AAGN;IAAW;;AAGb;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAS;;AAGN;IAAK;;AAGF;IAAc;;AAGf;IAAa;;AAGjB;IAAY;;AAGb;IAAQ;;AAGT;IAAgB;;AAGF;IAAI;;AAGH;IAAI;;AAGL;IAAY;;AAGX;IAA0B;;AAG3B;IAAI;;AAGH;IAAa;;AAG1B;IAAW;;AAGZ;IAAmB;;AAGX;IAAS;;AAGhB;IAAM;;AAGP;IAAgB;;AAGjB;IAAiB;;AAGnB;IAAI;;AAGG;IAAsB;;AAGtB;IAAmC;;AAGxB;IAA4C;;AAG3D;IAAS;;AAGX;IAAY;;AAGF;IAAI;;AAGR;IAAc;;AAGf;IAAe;;AAGL;IAAY;;AAGL;IAAI;;AAGH;IAAI;;AAGL;IAAmB;;AAGlB;IAAmC;;AAGpC;IAAI;;AAGH;IAAK;;AAG3B;IAAoB;;AAGpB;IAAwB;;AAGvB;IAAyB;;AAGzB;IAA4B;;AAG1B;IAA4B;;AAGjC;IAAoB;;AAGjB;IAAmB;;AAGpB;IAAS;;AAGF,YAAe;IAAW;;AAGhC;IAAQ;;AAGJ;IAAkB;;AAGd;IAAiB;;AAGhB;IAAI;;AAGH;IAAI;;AAGL;IAAqB;;AAGpB;IAAuC;;AAGxC;IAAI;;AAGH;IAAI;;AAGb;IAAgB;;AAGlB;IAAY;;AAGd;IAAU;;AAGZ;IAAkC;;AAGlB,YAAgB;IAAW;;AAGhC;IAAiB;;AAGpB;IAAK;;AAGM;IAAiB;;AAGxB;IAAc;;AAGhB;IAAQ;;AAGG;IAAoB;;AAGrC;IAAO;;AAGF;IAAS;;AAGN;IAAoB;;;QAjblD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAsB;;AAG3B;IAAQ;;AAGA;IAAI;;AAGX;IAAS;;AAGH;IAAmB;;AAGzB;IAAQ;;AAGT;IAAM;;AAGJ;IAAM;;AAGJ;IAAK;;AAGN;IAAU;;AAGd;IAAQ;;AAGT;IAAU;;AAGZ;IAAY;;AAGV;IAAkB;;AAGb;IAAmB;;AAGpB;IAAa;;AAGC;IAAsB;;AAGrC;IAAW;;AAGL;IAAe;;AAGJ;IAAsB;;AAGrC;IAAW;;AAGjB;IAAG;;AAGG;IAAO;;AAGP;IAAqC;;AAG7C;IAAY;;AAGZ;IAAiB;;AAGT;IAAO;;AAGV;IAAa;;AAGZ;IAAe;;AAGR;IAAsB;;AAGtB;IAA4B;;AAG9B;IAAiB;;AAGlB;IAAkB;;AAGvB;IAA4B;;AAG9B;IAAK;;AAGA;IAAQ;;AAGP;IAAa;;AAGd;IAAW;;AAGR;IAAe;;AAGjB;IAAa;;AAGf;IAAM;;AAGP;IAAK;;AAGN;IAAQ;;AAGV;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAU;;AAGR;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAQ;;AAGL;IAAQ;;AAGT;IAAO;;AAGX;IAAM;;AAGP;IAAW;;AAGZ;IAAY;;AAGE;IAAI;;AAGH;IAAI;;AAGL;IAAU;;AAGT;IAAyB;;AAG1B;IAAI;;AAGH;IAAI;;AAGjB;IAAU;;AAGX;IAAoB;;AAGZ;IAAO;;AAGd;IAAK;;AAGN;IAAa;;AAGd;IAAY;;AAGd;IAAI;;AAGG;IAAwB;;AAGxB;IAAkC;;AAGvB;IAA0C;;AAGzD;IAAS;;AAGX;IAAe;;AAGL;IAAI;;AAGR;IAAe;;AAGhB;IAAc;;AAGJ;IAAoB;;AAGb;IAAI;;AAGH;IAAI;;AAGL;IAAiB;;AAGhB;IAAgC;;AAGjC;IAAI;;AAGH;IAAI;;AAG1B;IAAW;;AAGX;IAAmB;;AAGlB;IAAiB;;AAGjB;IAAmB;;AAGjB;IAAmB;;AAGxB;IAAW;;AAGR;IAAiB;;AAGlB;IAAO;;AAGA,YAAe;IAAW;;AAGhC;IAAK;;AAGD;IAAW;;AAGP;IAAW;;AAGV;IAAI;;AAGH;IAAI;;AAGL;IAAoB;;AAGnB;IAAuC;;AAGxC;IAAI;;AAGH;IAAI;;AAGb;IAAa;;AAGf;IAAU;;AAGZ;IAAU;;AAGZ;IAA8B;;AAGd,YAAgB;IAAW;;AAGhC;IAAkB;;AAGrB;IAAM;;AAGK;IAAY;;AAGnB;IAAqB;;AAGvB;IAAQ;;AAGG;IAAe;;AAGhC;IAAM;;AAGD;IAAa;;AAGV;IAAa;;;QAjb3C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA0B;;AAG/B;IAAO;;AAGC;IAAI;;AAGX;IAAc;;AAGR;IAA4B;;AAGlC;IAAe;;AAGhB;IAAa;;AAGX;IAAa;;AAGX;IAAiB;;AAGlB;IAAa;;AAGjB;IAAY;;AAGb;IAAY;;AAGd;IAAY;;AAGV;IAAe;;AAGV;IAAc;;AAGf;IAAkB;;AAGJ;IAAsB;;AAGrC;IAAW;;AAGL;IAAiB;;AAGN;IAAwB;;AAGvC;IAAa;;AAGnB;IAAG;;AAGG;IAAe;;AAGf;IAAiC;;AAGzC;IAAQ;;AAGR;IAAgB;;AAGR;IAAiB;;AAGpB;IAAc;;AAGb;IAAyB;;AAGlB;IAAuB;;AAGvB;IAAoC;;AAGtC;IAAe;;AAGhB;IAAY;;AAGjB;IAAoB;;AAGtB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAO;;AAGR;IAAY;;AAGE;IAAI;;AAGH;IAAI;;AAGL;IAAc;;AAGb;IAA2B;;AAG5B;IAAI;;AAGH;IAAa;;AAG1B;IAAe;;AAGhB;IAAe;;AAGP;IAAa;;AAGpB;IAAM;;AAGP;IAAe;;AAGhB;IAAgB;;AAGlB;IAAU;;AAGH;IAAwB;;AAGxB;IAAgC;;AAGrB;IAAyC;;AAGxD;IAAc;;AAGhB;IAAc;;AAGJ;IAAI;;AAGR;IAAW;;AAGZ;IAAmB;;AAGT;IAAiB;;AAGV;IAAI;;AAGH;IAAI;;AAGL;IAAoB;;AAGnB;IAAmC;;AAGpC;IAAI;;AAGH;IAAI;;AAG1B;IAAc;;AAGd;IAAe;;AAGd;IAAiB;;AAGjB;IAAe;;AAGb;IAAiB;;AAGtB;IAAe;;AAGZ;IAAmB;;AAGpB;IAAa;;AAGN,YAAe;IAAI;;AAGzB;IAAe;;AAGX;IAAgB;;AAGZ;IAAiB;;AAGhB;IAAI;;AAGH;IAAI;;AAGL;IAAwB;;AAGvB;IAAyC;;AAG1C;IAAI;;AAGH;IAAI;;AAGb;IAAkB;;AAGpB;IAAe;;AAGjB;IAAoB;;AAGtB;IAA4B;;AAGZ,YAAgB;IAAU;;AAG/B;IAAgB;;AAGnB;IAAO;;AAGI;IAAkB;;AAGzB;IAAa;;AAGf;IAAQ;;AAGG;IAAmB;;AAGpC;IAAO;;AAGF;IAAY;;AAGT;IAAmB;;;QAjbjD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAwB;;AAG7B;IAAS;;AAGD;IAAI;;AAGX;IAAO;;AAGD;IAAgB;;AAGtB;IAAS;;AAGV;IAAS;;AAGP;IAAS;;AAGP;IAAY;;AAGb;IAAW;;AAGf;IAAU;;AAGX;IAAS;;AAGX;IAAY;;AAGV;IAAgB;;AAGX;IAAgB;;AAGjB;IAAY;;AAGE;IAA4B;;AAG3C;IAAiB;;AAGX;IAAW;;AAGA;IAA2B;;AAG1C;IAAgB;;AAGtB;IAAG;;AAGG;IAAO;;AAGP;IAAyB;;AAGjC;IAAO;;AAGP;IAAgB;;AAGR;IAAO;;AAGV;IAAY;;AAGX;IAAY;;AAGL;IAAgB;;AAGhB;IAAyB;;AAG3B;IAAc;;AAGf;IAAY;;AAGjB;IAAmB;;AAGrB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAO;;AAGR;IAAW;;AAGG;IAAI;;AAGH;IAAI;;AAGL;IAAU;;AAGT;IAAuB;;AAGxB;IAAI;;AAGH;IAAa;;AAG1B;IAAQ;;AAGT;IAAe;;AAGP;IAAU;;AAGjB;IAAK;;AAGN;IAAY;;AAGb;IAAW;;AAGb;IAAQ;;AAGD;IAAsB;;AAGtB;IAAsC;;AAG3B;IAA2C;;AAG1D;IAAU;;AAGZ;IAAa;;AAGH;IAAI;;AAGR;IAAa;;AAGd;IAAY;;AAGF;IAAa;;AAGN;IAAI;;AAGH;IAAI;;AAGL;IAAoB;;AAGnB;IAAmC;;AAGpC;IAAI;;AAGH;IAAI;;AAG1B;IAAa;;AAGb;IAAY;;AAGX;IAAY;;AAGZ;IAAgB;;AAGd;IAAiB;;AAGtB;IAAY;;AAGT;IAAqB;;AAGtB;IAAY;;AAGL,YAAe;IAAI;;AAGzB;IAAM;;AAGF;IAAS;;AAGL;IAAU;;AAGT;IAAI;;AAGH;IAAI;;AAGL;IAAgB;;AAGf;IAAuC;;AAGxC;IAAI;;AAGH;IAAI;;AAGb;IAAY;;AAGd;IAAY;;AAGd;IAAkB;;AAGpB;IAAiC;;AAGjB,YAAgB;IAAU;;AAG/B;IAAW;;AAGd;IAAM;;AAGK;IAAW;;AAGlB;IAAe;;AAGjB;IAAM;;AAGK;IAAW;;AAG5B;IAAO;;AAGF;IAAe;;AAGZ;IAAa;;;QAjb3C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAgC;;AAGrC;IAAO;;AAGC;IAAI;;AAGX;IAAQ;;AAGF;IAAuB;;AAG7B;IAAQ;;AAGT;IAAS;;AAGP;IAAS;;AAGP;IAAQ;;AAGT;IAAO;;AAGX;IAAQ;;AAGT;IAAQ;;AAGV;IAAY;;AAGV;IAAY;;AAGP;IAAgB;;AAGjB;IAAc;;AAGA;IAA8B;;AAG7C;IAAkB;;AAGZ;IAAgB;;AAGL;IAA8B;;AAG7C;IAAkB;;AAGxB;IAAG;;AAGG;IAAM;;AAGN;IAAsB;;AAG9B;IAAgB;;AAGhB;IAAkB;;AAGV;IAAM;;AAGT;IAAiB;;AAGhB;IAAa;;AAGN;IAAwB;;AAGxB;IAAgC;;AAGlC;IAAuB;;AAGxB;IAAuB;;AAG5B;IAA0B;;AAG5B;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAiB;;AAGnB;IAAgB;;AAGlB;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAM;;AAGR;IAAM;;AAGP;IAAW;;AAGR;IAAkB;;AAGf;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAQ;;AAGT;IAAiB;;AAGH;IAAyB;;AAGxB;IAAyB;;AAG1B;IAAY;;AAGX;IAAyB;;AAG1B;IAAI;;AAGH;IAAa;;AAG1B;IAAU;;AAGX;IAAY;;AAGJ;IAAS;;AAGhB;IAAQ;;AAGT;IAAkB;;AAGnB;IAAiB;;AAGnB;IAAI;;AAGG;IAAyB;;AAGzB;IAAiC;;AAGtB;IAAuC;;AAGtD;IAAO;;AAGT;IAAkB;;AAGR;IAAI;;AAGR;IAAmB;;AAGpB;IAAmB;;AAGT;IAAS;;AAGF;IAAkC;;AAGjC;IAAmC;;AAGpC;IAAgB;;AAGf;IAAmC;;AAGpC;IAAI;;AAGH;IAAK;;AAG3B;IAAgB;;AAGhB;IAAiB;;AAGhB;IAAkB;;AAGlB;IAAoB;;AAGlB;IAAsB;;AAG3B;IAAiB;;AAGd;IAAqB;;AAGtB;IAAQ;;AAGD,YAAe;IAAW;;AAGhC;IAAQ;;AAGJ;IAAkB;;AAGd;IAAa;;AAGZ;IAAqC;;AAGpC;IAAwC;;AAGzC;IAAmB;;AAGlB;IAAwC;;AAGzC;IAAI;;AAGH;IAAI;;AAGb;IAAa;;AAGf;IAAY;;AAGd;IAAwB;;AAG1B;IAA8B;;AAGd,YAAgB;IAAW;;AAGhC;IAAiB;;AAGpB;IAAS;;AAGE;IAAiB;;AAGxB;IAAe;;AAGjB;IAAQ;;AAGG;IAAgB;;AAGjC;IAAM;;AAGD;IAAY;;AAGT;IAAmB;;;QAjbjD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA4B;;AAGjC;IAAQ;;AAGA;IAAI;;AAGX;IAAM;;AAGA;IAAoB;;AAG1B;IAAU;;AAGX;IAAK;;AAGH;IAAM;;AAGJ;IAAQ;;AAGT;IAAU;;AAGd;IAAM;;AAGP;IAAQ;;AAGV;IAAY;;AAGV;IAAY;;AAGP;IAAe;;AAGhB;IAAa;;AAGC;IAAqB;;AAGpC;IAAU;;AAGJ;IAAc;;AAGH;IAAuB;;AAGtC;IAAY;;AAGlB;IAAG;;AAGG;IAAE;;AAGF;IAA4B;;AAGpC;IAAW;;AAGX;IAAiB;;AAGT;IAAU;;AAGb;IAAY;;AAGX;IAAgB;;AAGT;IAAiB;;AAGjB;IAA2B;;AAG7B;IAAiB;;AAGlB;IAAgB;;AAGrB;IAAoB;;AAGtB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAO;;AAGR;IAAW;;AAGG;IAAI;;AAGH;IAAI;;AAGL;IAAW;;AAGV;IAAyB;;AAG1B;IAAI;;AAGH;IAAa;;AAG1B;IAAS;;AAGV;IAAe;;AAGP;IAAQ;;AAGf;IAAM;;AAGP;IAAW;;AAGZ;IAAU;;AAGZ;IAAQ;;AAGD;IAAuB;;AAGvB;IAAiC;;AAGtB;IAAqC;;AAGpD;IAAS;;AAGX;IAAe;;AAGL;IAAI;;AAGR;IAAY;;AAGb;IAAW;;AAGD;IAAS;;AAGF;IAAI;;AAGH;IAAI;;AAGL;IAAuB;;AAGtB;IAAuC;;AAGxC;IAAI;;AAGH;IAAyB;;AAG/C;IAAW;;AAGX;IAAW;;AAGV;IAAY;;AAGZ;IAAiB;;AAGf;IAAmB;;AAGxB;IAAS;;AAGN;IAAkB;;AAGnB;IAAM;;AAGC,YAAe;IAAI;;AAGzB;IAAM;;AAGF;IAAU;;AAGN;IAAa;;AAGZ;IAAI;;AAGH;IAAI;;AAGL;IAAI;;AAGH;IAAkC;;AAGnC;IAAI;;AAGH;IAAI;;AAGb;IAAmB;;AAGrB;IAAY;;AAGd;IAAO;;AAGT;IAAwB;;AAGR,YAAgB;IAAW;;AAGhC;IAAa;;AAGhB;IAAM;;AAGK;IAAc;;AAGrB;IAAY;;AAGd;IAAQ;;AAGG;IAAc;;AAG/B;IAAM;;AAGD;IAAY;;AAGT;IAAa;;;QAjb3C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA+B;;AAGpC;IAAQ;;AAGA;IAAI;;AAGX;IAAQ;;AAGF;IAAmB;;AAGzB;IAAU;;AAGX;IAAQ;;AAGN;IAAQ;;AAGN;IAAO;;AAGR;IAAW;;AAGf;IAAQ;;AAGT;IAAQ;;AAGV;IAAY;;AAGV;IAAc;;AAGT;IAAkB;;AAGnB;IAAiB;;AAGH;IAA4B;;AAG3C;IAAiB;;AAGX;IAAsB;;AAGX;IAA2B;;AAG1C;IAAgB;;AAGtB;IAAG;;AAGG;IAAS;;AAGT;IAA6C;;AAGrD;IAAkB;;AAGlB;IAAmB;;AAGX;IAAU;;AAGb;IAAiB;;AAGhB;IAAgB;;AAGT;IAA4B;;AAG5B;IAA0C;;AAG5C;IAAmB;;AAGpB;IAAqB;;AAG1B;IAA0B;;AAG5B;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAmB;;AAGrB;IAAkB;;AAGpB;IAAM;;AAGP;IAAK;;AAGN;IAAQ;;AAGV;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAc;;AAGX;IAAU;;AAGP;IAAc;;AAGf;IAAa;;AAGjB;IAAY;;AAGb;IAAQ;;AAGT;IAAe;;AAGD;IAAI;;AAGH;IAAI;;AAGL;IAAW;;AAGV;IAAyB;;AAG1B;IAAI;;AAGH;IAAa;;AAG1B;IAAU;;AAGX;IAAwB;;AAGhB;IAAW;;AAGlB;IAAM;;AAGP;IAAa;;AAGd;IAAgB;;AAGlB;IAAI;;AAGG;IAAyB;;AAGzB;IAAoC;;AAGzB;IAAoD;;AAGnE;IAAO;;AAGT;IAAa;;AAGH;IAAI;;AAGR;IAAc;;AAGf;IAAiB;;AAGP;IAAW;;AAGJ;IAAI;;AAGH;IAAI;;AAGL;IAAsB;;AAGrB;IAAuC;;AAGxC;IAAI;;AAGH;IAAK;;AAG3B;IAAkB;;AAGlB;IAAuB;;AAGtB;IAAsB;;AAGtB;IAAoB;;AAGlB;IAAqB;;AAG1B;IAAiB;;AAGd;IAAoB;;AAGrB;IAAQ;;AAGD,YAAe;IAAW;;AAGhC;IAAU;;AAGN;IAAiB;;AAGb;IAAiB;;AAGhB;IAAI;;AAGH;IAAI;;AAGL;IAAoB;;AAGnB;IAAuC;;AAGxC;IAAI;;AAGH;IAAI;;AAGb;IAAgB;;AAGlB;IAAc;;AAGhB;IAAa;;AAGf;IAA8B;;AAGd,YAAgB;IAAW;;AAGhC;IAAoB;;AAGvB;IAAM;;AAGK;IAAoB;;AAG3B;IAAiB;;AAGnB;IAAQ;;AAGG;IAAsB;;AAGvC;IAAM;;AAGD;IAAS;;AAGN;IAAc;;;QAjb5C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6b6B;IAAuB;;AAGjB;IAAgB;;AAGlB;IAAY;;AAGf;IAAS;;AAGX;IAAQ;;AAGT;IAAK;;AAGC;IAAgB;;AAGpB;IAAa;;AAGV;IAA0C;;AAGvC;IAAiB;;AAGhB;IAAiB;;AAGxB;IAA4B;;AAGpB;IAA2C;;AAGrD;IAAiB;;AAGR;IAAwB;;AAGhC;IAAS;;AAGL;IAAoB;;AAGP;IAA+B;;AAG7B;IAA4B;;AAG7C;IAAmB;;AAGZ;IAAwB;;AAG5B;IAAoB;;AAGhB;IAAgB;;AAG7B;IAAmC;;AAGjC;IAAqB;;AAGF;IAAoB;;AAGtB;IAAkB;;AAG7B;IAAU;;AAGb;IAAc;;AAGf;IAAiB;;AAGX;IAA6B;;AAG9B;IAAoC;;AAGzB;IAA6C;;AAGpD;IAAS;;AAGjB;IAAW;;AAGX;IAAkB;;AAGf;IAAS;;AAGR;IAAU;;AAGM;IAAiB;;AAGhB;IAAmC;;;QAlI/E;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,oGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AA8IkC;IAA0B;;AAG/B;IAAQ;;AAGA;IAAM;;AAGb;IAAQ;;AAGF;IAAsB;;AAG5B;IAAS;;AAGV;IAAW;;AAGT;IAAW;;AAGT;IAAW;;AAGZ;IAAY;;AAGhB;IAAS;;AAGV;IAAU;;AAGZ;IAAY;;AAGV;IAAkB;;AAGb;IAAiB;;AAGlB;IAAgB;;AAGF;IAA+B;;AAG9C;IAAmB;;AAGb;IAAuB;;AAGZ;IAA8B;;AAG7C;IAAkB;;AAGxB;IAAG;;AAGG;IAAU;;AAGV;IAAmC;;AAG3C;IAAkB;;AAGlB;IAAmB;;AAGX;IAAa;;AAGhB;IAAc;;AAGb;IAAqB;;AAGd;IAAmC;;AAGnC;IAA6C;;AAG/C;IAAiB;;AAGlB;IAAmB;;AAGxB;IAA0B;;AAG5B;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAQ;;AAGV;IAAS;;AAGX;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAA4B;;AAG5B;IAA4B;;AAG5B;IAA4B;;AAG5B;IAA4B;;AAG5B;IAA4B;;AAG5B;IAA4B;;AAG5B;IAA4B;;AAG5B;IAA4B;;AAG5B;IAA4B;;AAG5B;IAA4B;;AAG1B;IAA4B;;AAG1B;IAA4B;;AAG1B;IAA4B;;AAG7B;IAA4B;;AAG7B;IAAgC;;AAGhC;IAA4B;;AAGzB;IAA4B;;AAG3B;IAA4B;;AAG3B;IAA4B;;AAG9B;IAA4B;;AAGlC;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAQ;;AAGT;IAAe;;AAGD;IAAwB;;AAGvB;IAAI;;AAGL;IAAW;;AAGV;IAA2B;;AAG5B;IAAI;;AAGH;IAAa;;AAG1B;IAAS;;AAGV;IAAe;;AAGP;IAAW;;AAGlB;IAAW;;AAGZ;IAAe;;AAGhB;IAAkB;;AAGpB;IAAI;;AAGG;IAA+B;;AAG/B;IAAmC;;AAGxB;IAA+C;;AAG9D;IAAU;;AAGZ;IAAc;;AAGJ;IAAM;;AAGV;IAAc;;AAGf;IAAmB;;AAGT;IAAa;;AAGN;IAAmC;;AAGlC;IAAI;;AAGL;IAAmB;;AAGlB;IAAsC;;AAGvC;IAAI;;AAGH;IAAK;;AAG3B;IAAe;;AAGf;IAAkB;;AAGjB;IAAmB;;AAGnB;IAAmB;;AAGjB;IAAmB;;AAGxB;IAAe;;AAGZ;IAAoB;;AAGrB;IAAS;;AAGF,YAAe;IAAW;;AAGhC;IAAS;;AAGL;IAAe;;AAGX;IAAgB;;AAGf;IAAuC;;AAGtC;IAAI;;AAGL;IAAqB;;AAGpB;IAA0C;;AAG3C;IAAI;;AAGH;IAA8B;;AAGvC;IAAmB;;AAGrB;IAAgB;;AAGlB;IAAgB;;AAGlB;IAA+B;;AAGf,YAAgB;IAAW;;AAGhC;IAAe;;AAGlB;IAAK;;AAGM;IAAiB;;AAGxB;IAAiB;;AAGnB;IAAO;;AAGI;IAAoB;;AAGrC;IAAM;;AAGD;IAAkB;;AAGf;IAAkB;;;QAjbhD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA6B;;AAGlC;IAAY;;AAGJ;IAAI;;AAGX;IAAO;;AAGD;IAA4B;;AAGlC;IAAQ;;AAGT;IAAS;;AAGP;IAAS;;AAGP;IAAY;;AAGb;IAAY;;AAGhB;IAAY;;AAGb;IAAU;;AAGZ;IAAY;;AAGV;IAAc;;AAGT;IAA2C;;AAG5C;IAAe;;AAGD;IAA4B;;AAG3C;IAAgB;;AAGV;IAAuB;;AAGZ;IAAyB;;AAGxC;IAAa;;AAGnB;IAAG;;AAGG;IAAS;;AAGT;IAAgC;;AAGxC;IAAiB;;AAGjB;IAAgB;;AAGR;IAAU;;AAGb;IAAiB;;AAGhB;IAAiB;;AAGV;IAA8B;;AAG9B;IAA8B;;AAGhC;IAA2B;;AAG5B;IAAwB;;AAG7B;IAA6B;;AAG/B;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAiB;;AAGnB;IAAkB;;AAGpB;IAAM;;AAGP;IAAK;;AAGN;IAAS;;AAGX;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAU;;AAGV;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAS;;AAGN;IAAmB;;AAGhB;IAAc;;AAGf;IAAa;;AAGjB;IAAS;;AAGV;IAAQ;;AAGT;IAAoB;;AAGN;IAAyB;;AAGxB;IAAyB;;AAG1B;IAAY;;AAGX;IAAyB;;AAG1B;IAAI;;AAGH;IAAa;;AAG1B;IAAU;;AAGX;IAAa;;AAGL;IAAS;;AAGhB;IAAK;;AAGN;IAAiB;;AAGlB;IAAoB;;AAGtB;IAAI;;AAGG;IAAwB;;AAGxB;IAAkC;;AAGvB;IAA2C;;AAG1D;IAAU;;AAGZ;IAAkB;;AAGR;IAAI;;AAGR;IAAkB;;AAGnB;IAAqB;;AAGX;IAAY;;AAGL;IAAmC;;AAGlC;IAAoC;;AAGrC;IAAkB;;AAGjB;IAAmC;;AAGpC;IAAI;;AAGH;IAAK;;AAG3B;IAAkB;;AAGlB;IAAmB;;AAGlB;IAAoB;;AAGpB;IAAqB;;AAGnB;IAAsB;;AAG3B;IAAmB;;AAGhB;IAAoB;;AAGrB;IAAW;;AAGJ,YAAe;IAAW;;AAGhC;IAAO;;AAGH;IAAa;;AAGT;IAAc;;AAGb;IAAoC;;AAGnC;IAAqC;;AAGtC;IAAiB;;AAGhB;IAAoC;;AAGrC;IAAI;;AAGH;IAAmB;;AAG5B;IAAmB;;AAGrB;IAAe;;AAGjB;IAAe;;AAGjB;IAAiC;;AAGjB,YAAgB;IAAU;;AAG/B;IAAgB;;AAGnB;IAAM;;AAGK;IAAe;;AAGtB;IAAe;;AAGjB;IAAQ;;AAGG;IAAiB;;AAGlC;IAAM;;AAGD;IAAc;;AAGX;IAAU;;;QAjbxC;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAuB;;AAG5B;IAAO;;AAGC;IAAO;;AAGd;IAAM;;AAGA;IAA0B;;AAGhC;IAAc;;AAGf;IAAO;;AAGL;IAAO;;AAGL;IAAY;;AAGb;IAAS;;AAGb;IAAc;;AAGf;IAAO;;AAGT;IAAY;;AAGV;IAAkB;;AAGb;IAAgB;;AAGjB;IAAa;;AAGC;IAA0B;;AAGzC;IAAe;;AAGT;IAAc;;AAGH;IAAwB;;AAGvC;IAAa;;AAGnB;IAAG;;AAGG;IAAO;;AAGP;IAAgC;;AAGxC;IAAQ;;AAGR;IAAc;;AAGN;IAAS;;AAGZ;IAAY;;AAGX;IAAe;;AAGR;IAAqB;;AAGrB;IAA+B;;AAGjC;IAAkB;;AAGnB;IAAiB;;AAGtB;IAA2B;;AAG7B;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAO;;AAGR;IAAa;;AAGC;IAAI;;AAGH;IAAI;;AAGL;IAAW;;AAGV;IAAwB;;AAGzB;IAAI;;AAGH;IAAa;;AAG1B;IAAS;;AAGV;IAAiB;;AAGT;IAAU;;AAGjB;IAAI;;AAGL;IAAU;;AAGX;IAAW;;AAGb;IAAK;;AAGE;IAA0B;;AAG1B;IAAiC;;AAGtB;IAAuC;;AAGtD;IAAQ;;AAGV;IAAc;;AAGJ;IAAM;;AAGV;IAAU;;AAGX;IAAW;;AAGD;IAAc;;AAGP;IAAI;;AAGH;IAAI;;AAGL;IAAqB;;AAGpB;IAAoC;;AAGrC;IAAI;;AAGH;IAAI;;AAG1B;IAAe;;AAGf;IAAc;;AAGb;IAAgB;;AAGhB;IAAc;;AAGZ;IAAiB;;AAGtB;IAAe;;AAGZ;IAAe;;AAGhB;IAAU;;AAGH,YAAe;IAAW;;AAGhC;IAAO;;AAGH;IAAe;;AAGX;IAAe;;AAGd;IAAI;;AAGH;IAAI;;AAGL;IAAoB;;AAGnB;IAAqC;;AAGtC;IAAI;;AAGH;IAAI;;AAGb;IAAiB;;AAGnB;IAAgB;;AAGlB;IAAU;;AAGZ;IAA8B;;AAGd,YAAgB;IAAU;;AAG/B;IAAc;;AAGjB;IAAK;;AAGM;IAAgB;;AAGvB;IAAkB;;AAGpB;IAAU;;AAGC;IAAqB;;AAGtC;IAAM;;AAGD;IAAW;;AAGR;IAAe;;;QAjb7C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAgC;;AAGrC;IAAa;;AAGL;IAAI;;AAGX;IAAM;;AAGA;IAAqB;;AAG3B;IAAQ;;AAGT;IAAS;;AAGP;IAAS;;AAGP;IAAU;;AAGX;IAAY;;AAGhB;IAAW;;AAGZ;IAAY;;AAGd;IAAY;;AAGV;IAAe;;AAGV;IAAe;;AAGhB;IAAe;;AAGD;IAA4B;;AAG3C;IAAiB;;AAGX;IAAgB;;AAGL;IAA0B;;AAGzC;IAAe;;AAGrB;IAAG;;AAGG;IAAW;;AAGX;IAA8B;;AAGtC;IAAgB;;AAGhB;IAAkB;;AAGV;IAAQ;;AAGX;IAAa;;AAGZ;IAAY;;AAGL;IAAsB;;AAGtB;IAAiC;;AAGnC;IAAkB;;AAGnB;IAAkB;;AAGvB;IAAoB;;AAGtB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAgB;;AAGlB;IAAgB;;AAGlB;IAAM;;AAGP;IAAK;;AAGN;IAAS;;AAGX;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAS;;AAGN;IAAQ;;AAGL;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAW;;AAGZ;IAAiB;;AAGH;IAAyB;;AAGxB;IAAyB;;AAG1B;IAAY;;AAGX;IAAyB;;AAG1B;IAAI;;AAGH;IAAa;;AAG1B;IAAU;;AAGX;IAA0B;;AAGlB;IAAW;;AAGlB;IAAM;;AAGP;IAAe;;AAGhB;IAAe;;AAGjB;IAAI;;AAGG;IAA0B;;AAG1B;IAAmC;;AAGxB;IAA6C;;AAG5D;IAAU;;AAGZ;IAAmB;;AAGT;IAAI;;AAGR;IAAiB;;AAGlB;IAAwB;;AAGd;IAAS;;AAGF;IAAkC;;AAGjC;IAAuC;;AAGxC;IAAgB;;AAGf;IAAiC;;AAGlC;IAAI;;AAGH;IAAK;;AAG3B;IAAgB;;AAGhB;IAAiB;;AAGhB;IAAkB;;AAGlB;IAAoB;;AAGlB;IAAsB;;AAG3B;IAAgB;;AAGb;IAA2B;;AAG5B;IAAQ;;AAGD,YAAe;IAAW;;AAGhC;IAAQ;;AAGJ;IAAe;;AAGX;IAAa;;AAGZ;IAAoC;;AAGnC;IAAmC;;AAGpC;IAAmB;;AAGlB;IAAuC;;AAGxC;IAAI;;AAGH;IAAI;;AAGb;IAAe;;AAGjB;IAAiB;;AAGnB;IAAmB;;AAGrB;IAA8B;;AAGd,YAAgB;IAAW;;AAGhC;IAAa;;AAGhB;IAAQ;;AAGG;IAAe;;AAGtB;IAAa;;AAGf;IAAQ;;AAGG;IAAe;;AAGhC;IAAO;;AAGF;IAAS;;AAGN;IAAmB;;;QAjbjD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAgC;;AAGrC;IAAW;;AAGH;IAAM;;AAGb;IAAO;;AAGD;IAAoB;;AAG1B;IAAU;;AAGX;IAAO;;AAGL;IAAW;;AAGT;IAAW;;AAGZ;IAAQ;;AAGZ;IAAS;;AAGV;IAAQ;;AAGV;IAAc;;AAGZ;IAAe;;AAGV;IAA2B;;AAG5B;IAAe;;AAGD;IAAyB;;AAGxC;IAAc;;AAGR;IAAgB;;AAGL;IAA0B;;AAGzC;IAAe;;AAGrB;IAAI;;AAGE;IAAU;;AAGV;IAA0C;;AAGlD;IAAgB;;AAGhB;IAAoB;;AAGZ;IAAS;;AAGZ;IAAY;;AAGX;IAAmB;;AAGZ;IAAiB;;AAGjB;IAAiC;;AAGnC;IAAmB;;AAGpB;IAAoB;;AAGzB;IAAsB;;AAGxB;IAAM;;AAGD;IAAU;;AAGT;IAAU;;AAGX;IAAa;;AAGV;IAAW;;AAGb;IAAW;;AAGb;IAAM;;AAGP;IAAU;;AAGX;IAAQ;;AAGV;IAAO;;AAGJ;IAAO;;AAGX;IAAI;;AAGF;IAAS;;AAGP;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAc;;AAGd;IAAS;;AAGT;IAAS;;AAGT;IAAS;;AAGT;IAAS;;AAGT;IAAS;;AAGT;IAAS;;AAGT;IAAS;;AAGT;IAAS;;AAGT;IAAS;;AAGT;IAAS;;AAGP;IAAS;;AAGP;IAAS;;AAGP;IAAS;;AAGV;IAAS;;AAGV;IAAY;;AAGZ;IAAS;;AAGN;IAAS;;AAGR;IAAS;;AAGR;IAAS;;AAGX;IAAS;;AAGf;IAAW;;AAGb;IAAW;;AAGZ;IAAO;;AAGJ;IAAQ;;AAGL;IAAe;;AAGhB;IAAgB;;AAGpB;IAAQ;;AAGT;IAAa;;AAGd;IAAc;;AAGA;IAAwB;;AAGvB;IAAI;;AAGL;IAAW;;AAGV;IAAuB;;AAGxB;IAAwB;;AAGvB;IAAa;;AAG1B;IAAS;;AAGV;IAAuB;;AAGf;IAAQ;;AAGf;IAAK;;AAGN;IAAiB;;AAGlB;IAAiB;;AAGnB;IAAQ;;AAGD;IAAgC;;AAGhC;IAAkC;;AAGvB;IAA4C;;AAG3D;IAAS;;AAGX;IAAc;;AAGJ;IAAM;;AAGV;IAAgB;;AAGjB;IAAgB;;AAGN;IAAQ;;AAGD;IAA2B;;AAG1B;IAAI;;AAGL;IAAW;;AAGV;IAA4B;;AAG7B;IAA2B;;AAG1B;IAAK;;AAG3B;IAAkB;;AAGlB;IAAe;;AAGd;IAAgB;;AAGhB;IAAmB;;AAGjB;IAAqB;;AAG1B;IAAkB;;AAGf;IAAmB;;AAGpB;IAAQ;;AAGD,YAAe;IAAW;;AAGhC;IAAS;;AAGL;IAAY;;AAGR;IAAe;;AAGd;IAAwC;;AAGvC;IAAI;;AAGL;IAAqB;;AAGpB;IAA0C;;AAG3C;IAAyC;;AAGxC;IAAI;;AAGb;IAAgB;;AAGlB;IAAe;;AAGjB;IAAY;;AAGd;IAAiC;;AAGjB,YAAgB;IAAW;;AAGhC;IAAc;;AAGjB;IAAK;;AAGM;IAAc;;AAGrB;IAAa;;AAGf;IAAQ;;AAGG;IAAiB;;AAGlC;IAAO;;AAGF;IAAiB;;AAGd;IAAiB;;;QAjb/C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAyB;;AAG9B;IAAY;;AAGJ;IAAU;;AAGjB;IAAO;;AAGD;IAAmB;;AAGzB;IAAO;;AAGR;IAAO;;AAGL;IAAO;;AAGL;IAAQ;;AAGT;IAAQ;;AAGZ;IAAO;;AAGR;IAAM;;AAGR;IAAY;;AAGV;IAAc;;AAGT;IAAgB;;AAGjB;IAAc;;AAGA;IAA6B;;AAG5C;IAAiB;;AAGX;IAAc;;AAGH;IAA6B;;AAG5C;IAAiB;;AAGvB;IAAG;;AAGG;IAAM;;AAGN;IAAyC;;AAGjD;IAAS;;AAGT;IAAoB;;AAGZ;IAAO;;AAGV;IAAc;;AAGb;IAAiB;;AAGV;IAAe;;AAGf;IAAwC;;AAG1C;IAAsB;;AAGvB;IAAoB;;AAGzB;IAA0B;;AAG5B;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAQ;;AAGT;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAO;;AAGR;IAAgB;;AAGF;IAAI;;AAGH;IAAI;;AAGL;IAAW;;AAGV;IAAwB;;AAGzB;IAAI;;AAGH;IAAa;;AAG1B;IAAU;;AAGX;IAA6B;;AAGrB;IAAK;;AAGZ;IAAU;;AAGX;IAAkB;;AAGnB;IAAc;;AAGhB;IAAY;;AAGL;IAAwB;;AAGxB;IAAmC;;AAGxB;IAAyC;;AAGxD;IAAO;;AAGT;IAAiB;;AAGP;IAAS;;AAGb;IAAmB;;AAGpB;IAAmB;;AAGT;IAAU;;AAGH;IAAI;;AAGH;IAAI;;AAGL;IAAqB;;AAGpB;IAAuC;;AAGxC;IAAI;;AAGH;IAAI;;AAG1B;IAAe;;AAGf;IAAe;;AAGd;IAAiB;;AAGjB;IAAgB;;AAGd;IAAkB;;AAGvB;IAAa;;AAGV;IAAoB;;AAGrB;IAAM;;AAGC,YAAe;IAAW;;AAGhC;IAAO;;AAGH;IAAkB;;AAGd;IAAc;;AAGb;IAAI;;AAGH;IAAI;;AAGL;IAAqB;;AAGpB;IAAuC;;AAGxC;IAAI;;AAGH;IAAI;;AAGb;IAAiB;;AAGnB;IAAc;;AAGhB;IAAiB;;AAGnB;IAAgC;;AAGhB,YAAgB;IAAU;;AAG/B;IAAa;;AAGhB;IAAK;;AAGM;IAAa;;AAGpB;IAAa;;AAGf;IAAQ;;AAGG;IAAgB;;AAGjC;IAAM;;AAGD;IAAe;;AAGZ;IAAgB;;;QAjb9C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAgC;;AAGrC;IAAY;;AAGJ;IAAW;;AAGlB;IAAO;;AAGD;IAAqB;;AAG3B;IAAQ;;AAGT;IAAS;;AAGP;IAAW;;AAGT;IAAS;;AAGV;IAAS;;AAGb;IAAS;;AAGV;IAAO;;AAGT;IAAa;;AAGX;IAAe;;AAGV;IAAgB;;AAGjB;IAAiB;;AAGH;IAA6B;;AAG5C;IAAiB;;AAGX;IAAkB;;AAGP;IAA2B;;AAG1C;IAAe;;AAGrB;IAAG;;AAGG;IAAW;;AAGX;IAAoC;;AAG5C;IAAS;;AAGT;IAAoB;;AAGZ;IAAO;;AAGV;IAAe;;AAGd;IAAe;;AAGR;IAAiB;;AAGjB;IAA+B;;AAGjC;IAAqB;;AAGtB;IAAqB;;AAG1B;IAAsB;;AAGxB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAiB;;AAGnB;IAAe;;AAGjB;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAqB;;AAGlB;IAAsB;;AAGnB;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAkB;;AAGnB;IAAmB;;AAGL;IAAwB;;AAGvB;IAAI;;AAGL;IAAW;;AAGV;IAAwB;;AAGzB;IAAI;;AAGH;IAAa;;AAG1B;IAAS;;AAGV;IAAmB;;AAGX;IAAQ;;AAGf;IAAK;;AAGN;IAAe;;AAGhB;IAAkB;;AAGpB;IAAS;;AAGF;IAA6B;;AAG7B;IAAoC;;AAGzB;IAA8C;;AAG7D;IAAQ;;AAGV;IAAe;;AAGL;IAAU;;AAGd;IAAiB;;AAGlB;IAAoB;;AAGV;IAAQ;;AAGD;IAAqC;;AAGpC;IAAI;;AAGL;IAAoB;;AAGnB;IAAuC;;AAGxC;IAAI;;AAGH;IAAK;;AAG3B;IAAiB;;AAGjB;IAAgB;;AAGf;IAAiB;;AAGjB;IAAkB;;AAGhB;IAAqB;;AAG1B;IAAiB;;AAGd;IAAqB;;AAGtB;IAAS;;AAGF,YAAe;IAAW;;AAGhC;IAAY;;AAGR;IAAa;;AAGT;IAAkB;;AAGjB;IAAuC;;AAGtC;IAAI;;AAGL;IAAsB;;AAGrB;IAAuC;;AAGxC;IAAI;;AAGH;IAAI;;AAGb;IAAgB;;AAGlB;IAAc;;AAGhB;IAAgB;;AAGlB;IAAkC;;AAGlB,YAAgB;IAAW;;AAGhC;IAAiB;;AAGpB;IAAK;;AAGM;IAAgB;;AAGvB;IAAe;;AAGjB;IAAO;;AAGI;IAAkB;;AAGnC;IAAO;;AAGF;IAAQ;;AAGL;IAAiB;;;QAjb/C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAgbM;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,sGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAsBkC;IAAgC;;AAGrC;IAAa;;AAGL;IAAW;;AAGlB;IAAO;;AAGD;IAAqB;;AAG3B;IAAQ;;AAGT;IAAS;;AAGP;IAAW;;AAGT;IAAS;;AAGV;IAAS;;AAGb;IAAS;;AAGV;IAAO;;AAGT;IAAa;;AAGX;IAAe;;AAGV;IAAgB;;AAGjB;IAAiB;;AAGH;IAA6B;;AAG5C;IAAiB;;AAGX;IAAkB;;AAGP;IAA2B;;AAG1C;IAAe;;AAGf;IAAW;;AAGX;IAAoC;;AAG5C;IAAS;;AAGT;IAAoB;;AAGZ;IAAO;;AAGV;IAAe;;AAGd;IAAe;;AAGR;IAAiB;;AAGjB;IAA+B;;AAGjC;IAAsB;;AAGvB;IAAsB;;AAG3B;IAAuB;;AAGjB;IAAiB;;AAGnB;IAAgB;;AAGpB;IAAuB;;AAGpB;IAAwB;;AAG3B;IAAkB;;AAGnB;IAAoB;;AAGN;IAAwB;;AAGxB;IAAW;;AAGV;IAAwB;;AAGrC;IAAS;;AAGV;IAAmB;;AAGX;IAAQ;;AAGf;IAAK;;AAGN;IAAgB;;AAGjB;IAAmB;;AAGrB;IAAS;;AAGF;IAA6B;;AAG7B;IAAoC;;AAGzB;IAA8C;;AAG7D;IAAQ;;AAGV;IAAgB;;AAGN;IAAU;;AAGd;IAAiB;;AAGlB;IAAoB;;AAGV;IAAQ;;AAGD;IAAqC;;AAGrC;IAAoB;;AAGnB;IAAuC;;AAG7D;IAAiB;;AAGjB;IAAgB;;AAGf;IAAiB;;AAGjB;IAAkB;;AAGhB;IAAqB;;AAG1B;IAAiB;;AAGd;IAAqB;;AAGtB;IAAS;;AAGR;IAAY;;AAGR;IAAa;;AAGT;IAAkB;;AAGjB;IAAuC;;AAGvC;IAAsB;;AAGrB;IAAuC;;AAGhD;IAAgB;;AAGlB;IAAc;;AAGhB;IAAiB;;AAGnB;IAAkC;;AAGvB;IAAiB;;AAGpB;IAAK;;AAGM;IAAgB;;AAGvB;IAAe;;AAGjB;IAAO;;AAGI;IAAkB;;AAGnC;IAAO;;AAGF;IAAQ;;AAGL;IAAiB;;;QAlR/C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,sGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AA8RkC;IAAsB;;AAG3B;IAAS;;AAGD;IAAI;;AAGX;IAAU;;AAGJ;IAAmB;;AAGzB;IAAQ;;AAGT;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAU;;AAGd;IAAS;;AAGV;IAAU;;AAGZ;IAAY;;AAGV;IAAY;;AAGP;IAAsB;;AAGvB;IAAY;;AAGE;IAAsB;;AAGrC;IAAW;;AAGL;IAAgB;;AAGL;IAAuB;;AAGtC;IAAY;;AAGlB;IAAG;;AAGG;IAAQ;;AAGR;IAA+B;;AAGvC;IAAY;;AAGZ;IAAiB;;AAGT;IAAM;;AAGT;IAAc;;AAGb;IAAa;;AAGN;IAAoB;;AAGpB;IAAkC;;AAGpC;IAAkB;;AAGnB;IAAqB;;AAG1B;IAAoB;;AAGtB;IAAK;;AAGA;IAAO;;AAGN;IAAU;;AAGX;IAAW;;AAGR;IAAiB;;AAGnB;IAAiB;;AAGnB;IAAM;;AAGP;IAAK;;AAGN;IAAS;;AAGX;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAK;;AAGH;IAAQ;;AAGV;IAAM;;AAGD;IAAU;;AAGR;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAc;;AAGX;IAAU;;AAGP;IAAc;;AAGf;IAAa;;AAGjB;IAAM;;AAGP;IAAW;;AAGZ;IAAa;;AAGC;IAAI;;AAGH;IAAI;;AAGL;IAAU;;AAGT;IAAyB;;AAG1B;IAAI;;AAGH;IAAa;;AAG1B;IAAU;;AAGX;IAAS;;AAGD;IAAO;;AAGd;IAAK;;AAGN;IAAa;;AAGd;IAAY;;AAGd;IAAI;;AAGG;IAAwB;;AAGxB;IAAkC;;AAGvB;IAA0C;;AAGzD;IAAY;;AAGd;IAAY;;AAGF;IAAI;;AAGR;IAAkB;;AAGnB;IAAiB;;AAGP;IAAW;;AAGJ;IAAI;;AAGH;IAAI;;AAGL;IAAe;;AAGd;IAA8B;;AAG/B;IAAI;;AAGH;IAAK;;AAG3B;IAAc;;AAGd;IAAmB;;AAGlB;IAAiB;;AAGjB;IAAoB;;AAGlB;IAAoB;;AAGzB;IAAc;;AAGX;IAAiB;;AAGlB;IAAO;;AAGA,YAAe;IAAW;;AAGhC;IAAK;;AAGD;IAAc;;AAGV;IAAS;;AAGR;IAAI;;AAGH;IAAI;;AAGL;IAAwB;;AAGvB;IAAyC;;AAG1C;IAAI;;AAGH;IAAI;;AAGb;IAAa;;AAGf;IAAW;;AAGb;IAAU;;AAGZ;IAA8B;;AAGd,YAAgB;IAAW;;AAGhC;IAAU;;AAGb;IAAO;;AAGI;IAAa;;AAGpB;IAAU;;AAGZ;IAAO;;AAGI;IAAc;;AAG/B;IAAO;;AAGF;IAAgB;;AAGb;IAAe;;;QAjb7C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA0B;;AAG/B;IAAO;;AAGC;IAAI;;AAGX;IAAY;;AAGN;IAA+B;;AAGrC;IAAQ;;AAGT;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAS;;AAGb;IAAQ;;AAGT;IAAM;;AAGR;IAAY;;AAGV;IAAa;;AAGR;IAAwC;;AAGzC;IAAe;;AAGD;IAAiC;;AAGhD;IAAsB;;AAGhB;IAAgB;;AAGL;IAA6B;;AAG5C;IAAkB;;AAGxB;IAAG;;AAGG;IAAM;;AAGN;IAAsD;;AAG9D;IAAW;;AAGX;IAAmB;;AAGX;IAAO;;AAGV;IAAmB;;AAGlB;IAAe;;AAGR;IAAwC;;AAGxC;IAA8C;;AAGhD;IAAmB;;AAGpB;IAAoB;;AAGzB;IAAiB;;AAGnB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAS;;AAGX;IAAM;;AAGP;IAAO;;AAGJ;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAO;;AAGR;IAAmB;;AAGL;IAAI;;AAGH;IAAI;;AAGL;IAAa;;AAGZ;IAAuB;;AAGxB;IAAI;;AAGH;IAAa;;AAG1B;IAAQ;;AAGT;IAAwB;;AAGhB;IAAO;;AAGd;IAAO;;AAGR;IAAY;;AAGb;IAAmB;;AAGrB;IAAM;;AAGC;IAA0B;;AAG1B;IAA4C;;AAGjC;IAAqD;;AAGpE;IAAS;;AAGX;IAAe;;AAGL;IAAI;;AAGR;IAAgB;;AAGjB;IAAsB;;AAGZ;IAAc;;AAGP;IAAI;;AAGH;IAAI;;AAGL;IAAmB;;AAGlB;IAAmC;;AAGpC;IAAI;;AAGH;IAA2B;;AAGjD;IAAc;;AAGd;IAAgB;;AAGf;IAAc;;AAGd;IAAoB;;AAGlB;IAAoB;;AAGzB;IAAY;;AAGT;IAA8B;;AAG/B;IAAS;;AAGF,YAAe;IAAW;;AAGhC;IAAQ;;AAGJ;IAAc;;AAGV;IAAc;;AAGb;IAAI;;AAGH;IAAI;;AAGL;IAAsB;;AAGrB;IAAuC;;AAGxC;IAAI;;AAGH;IAAyB;;AAGlC;IAAiB;;AAGnB;IAAe;;AAGjB;IAAyB;;AAG3B;IAA0C;;AAG1B,YAAgB;IAAkB;;AAGvC;IAAY;;AAGf;IAAK;;AAGM;IAAY;;AAGnB;IAAU;;AAGZ;IAAQ;;AAGG;IAAe;;AAGhC;IAAQ;;AAGH;IAAS;;AAGN;IAAgB;;;QAjb9C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAyB;;AAG9B;IAAe;;AAGP;IAAI;;AAGX;IAAgB;;AAGV;IAAsB;;AAG5B;IAAW;;AAGZ;IAAO;;AAGL;IAAO;;AAGL;IAAY;;AAGb;IAAQ;;AAGZ;IAAQ;;AAGT;IAAQ;;AAGV;IAAY;;AAGV;IAAiB;;AAGZ;IAA2B;;AAG5B;IAA4B;;AAGd;IAA0B;;AAGzC;IAAe;;AAGT;IAA4B;;AAGjB;IAA2B;;AAG1C;IAAgB;;AAGtB;IAAG;;AAGG;IAAQ;;AAGR;IAA2C;;AAGnD;IAAU;;AAGV;IAAmB;;AAGX;IAAY;;AAGf;IAA+B;;AAG9B;IAAqB;;AAGd;IAAsB;;AAGtB;IAAiC;;AAGnC;IAAe;;AAGhB;IAAe;;AAGpB;IAA2B;;AAG7B;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAO;;AAGR;IAAiC;;AAGnB;IAAI;;AAGH;IAAI;;AAGL;IAAU;;AAGT;IAA0B;;AAG3B;IAAI;;AAGH;IAAa;;AAG1B;IAAW;;AAGZ;IAAqB;;AAGb;IAAe;;AAGtB;IAAQ;;AAGT;IAAc;;AAGf;IAAe;;AAGjB;IAAK;;AAGE;IAA2B;;AAG3B;IAAiC;;AAGtB;IAAiC;;AAGhD;IAAO;;AAGT;IAAe;;AAGL;IAAI;;AAGR;IAAe;;AAGhB;IAAgB;;AAGN;IAAoB;;AAGb;IAAI;;AAGH;IAAI;;AAGL;IAAsB;;AAGrB;IAAuC;;AAGxC;IAAI;;AAGH;IAA4B;;AAGlD;IAAkB;;AAGlB;IAAuB;;AAGtB;IAAuB;;AAGvB;IAAuB;;AAGrB;IAA4B;;AAGjC;IAAkB;;AAGf;IAA6B;;AAG9B;IAAM;;AAGC,YAAe;IAAK;;AAG1B;IAAO;;AAGH;IAAwB;;AAGpB;IAA2B;;AAG1B;IAAI;;AAGH;IAAI;;AAGL;IAA+B;;AAG9B;IAAkD;;AAGnD;IAAI;;AAGH;IAAoC;;AAG7C;IAAsB;;AAGxB;IAAiB;;AAGnB;IAAsB;;AAGxB;IAA8B;;AAGd,YAAgB;IAAkB;;AAGvC;IAAuB;;AAG1B;IAAU;;AAGC;IAAgC;;AAGvC;IAAkB;;AAGpB;IAAS;;AAGE;IAAgC;;AAGjD;IAAM;;AAGD;IAAa;;AAGV;IAAoB;;;QAjblD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA2B;;AAGhC;IAAQ;;AAGA;IAAI;;AAGX;IAAS;;AAGH;IAAsB;;AAG5B;IAAY;;AAGb;IAAU;;AAGR;IAAU;;AAGR;IAAY;;AAGb;IAAY;;AAGhB;IAAW;;AAGZ;IAAY;;AAGd;IAAY;;AAGV;IAAqB;;AAGhB;IAAoB;;AAGrB;IAAkB;;AAGJ;IAAyB;;AAGxC;IAAc;;AAGR;IAAmB;;AAGR;IAAyB;;AAGxC;IAAc;;AAGpB;IAAG;;AAGG;IAAU;;AAGV;IAAgC;;AAGxC;IAAQ;;AAGR;IAAgB;;AAGR;IAAS;;AAGZ;IAAY;;AAGX;IAAc;;AAGP;IAAoB;;AAGpB;IAAuC;;AAGzC;IAAmB;;AAGpB;IAAgB;;AAGrB;IAAwC;;AAG1C;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAO;;AAGR;IAAY;;AAGE;IAAI;;AAGH;IAAI;;AAGL;IAAY;;AAGX;IAA4B;;AAG7B;IAAI;;AAGH;IAAa;;AAG1B;IAAa;;AAGd;IAAgB;;AAGR;IAAY;;AAGnB;IAAS;;AAGV;IAAY;;AAGb;IAAa;;AAGf;IAAK;;AAGE;IAAyB;;AAGzB;IAAmC;;AAGxB;IAAiC;;AAGhD;IAAU;;AAGZ;IAAe;;AAGL;IAAI;;AAGR;IAAa;;AAGd;IAAc;;AAGJ;IAAe;;AAGR;IAAI;;AAGH;IAAI;;AAGL;IAAsB;;AAGrB;IAA0C;;AAG3C;IAAI;;AAGH;IAAI;;AAG1B;IAAe;;AAGf;IAAkB;;AAGjB;IAAmB;;AAGnB;IAAkB;;AAGhB;IAAwB;;AAG7B;IAAa;;AAGV;IAA2B;;AAG5B;IAAW;;AAGJ,YAAe;IAAI;;AAGzB;IAAQ;;AAGJ;IAAsB;;AAGlB;IAAwB;;AAGvB;IAAI;;AAGH;IAAI;;AAGL;IAAqB;;AAGpB;IAAyC;;AAG1C;IAAI;;AAGH;IAAI;;AAGb;IAAc;;AAGhB;IAAa;;AAGf;IAAiB;;AAGnB;IAAgC;;AAGhB,YAAgB;IAAU;;AAG/B;IAAoB;;AAGvB;IAAK;;AAGM;IAAkB;;AAGzB;IAAuB;;AAGzB;IAAQ;;AAGG;IAAqB;;AAGtC;IAAM;;AAGD;IAAa;;AAGV;IAAqB;;;QAjbnD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA6B;;AAGlC;IAAc;;AAGN;IAAI;;AAGX;IAAM;;AAGA;IAAmB;;AAGzB;IAAQ;;AAGT;IAAK;;AAGH;IAAK;;AAGH;IAAM;;AAGP;IAAO;;AAGX;IAAQ;;AAGT;IAAK;;AAGP;IAAY;;AAGV;IAAY;;AAGP;IAAe;;AAGhB;IAAa;;AAGC;IAA0B;;AAGzC;IAAe;;AAGT;IAAW;;AAGA;IAA2B;;AAG1C;IAAgB;;AAGtB;IAAG;;AAGG;IAAI;;AAGJ;IAAqC;;AAG7C;IAAa;;AAGb;IAAc;;AAGN;IAAK;;AAGR;IAAS;;AAGR;IAAW;;AAGJ;IAA4B;;AAG5B;IAAgC;;AAGlC;IAAkB;;AAGnB;IAAgB;;AAGrB;IAAoB;;AAGtB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAU;;AAGP;IAAY;;AAGT;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAO;;AAGR;IAAa;;AAGC;IAAI;;AAGH;IAAI;;AAGL;IAAe;;AAGd;IAA4B;;AAG7B;IAAI;;AAGH;IAAa;;AAG1B;IAAU;;AAGX;IAAe;;AAGP;IAAK;;AAGZ;IAAW;;AAGZ;IAAW;;AAGZ;IAAW;;AAGb;IAAM;;AAGC;IAAkB;;AAGlB;IAAmC;;AAGxB;IAAyC;;AAGxD;IAAK;;AAGP;IAAa;;AAGH;IAAI;;AAGR;IAAc;;AAGf;IAAU;;AAGA;IAAQ;;AAGD;IAAI;;AAGH;IAAI;;AAGL;IAAgB;;AAGf;IAA+B;;AAGhC;IAAI;;AAGH;IAAK;;AAG3B;IAAQ;;AAGR;IAAe;;AAGd;IAAc;;AAGd;IAAkB;;AAGhB;IAAiB;;AAGtB;IAAU;;AAGP;IAAa;;AAGd;IAAQ;;AAGD,YAAe;IAAI;;AAGzB;IAAO;;AAGH;IAAc;;AAGV;IAAS;;AAGR;IAAI;;AAGH;IAAI;;AAGL;IAAoB;;AAGnB;IAAqC;;AAGtC;IAAI;;AAGH;IAAI;;AAGb;IAAW;;AAGb;IAAU;;AAGZ;IAAe;;AAGjB;IAAkC;;AAGlB,YAAgB;IAAkB;;AAGvC;IAAW;;AAGd;IAAS;;AAGE;IAAc;;AAGrB;IAAU;;AAGZ;IAAM;;AAGK;IAAW;;AAG5B;IAAQ;;AAGH;IAAY;;AAGT;IAAY;;;QAjb1C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA8B;;AAGnC;IAAQ;;AAGA;IAAI;;AAGX;IAAS;;AAGH;IAAuB;;AAG7B;IAAY;;AAGb;IAAO;;AAGL;IAAO;;AAGL;IAAU;;AAGX;IAAY;;AAGhB;IAAU;;AAGX;IAAO;;AAGT;IAAY;;AAGV;IAAkB;;AAGb;IAAgB;;AAGjB;IAAiB;;AAGH;IAAgC;;AAG/C;IAAqB;;AAGf;IAAiB;;AAGN;IAAiC;;AAGhD;IAAsB;;AAG5B;IAAG;;AAGG;IAAU;;AAGV;IAA6B;;AAGrC;IAAQ;;AAGR;IAAoB;;AAGZ;IAAY;;AAGf;IAAY;;AAGX;IAAuB;;AAGhB;IAAkB;;AAGlB;IAA4B;;AAG9B;IAAqB;;AAGtB;IAAoB;;AAGzB;IAA2B;;AAG7B;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAO;;AAGJ;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAQ;;AAGT;IAAa;;AAGC;IAAI;;AAGH;IAAI;;AAGL;IAAY;;AAGX;IAA4B;;AAG7B;IAAI;;AAGH;IAAa;;AAG1B;IAAc;;AAGf;IAAkB;;AAGV;IAAW;;AAGlB;IAAU;;AAGX;IAAkB;;AAGnB;IAAiB;;AAGnB;IAAI;;AAGG;IAA+B;;AAG/B;IAAkC;;AAGvB;IAAmD;;AAGlE;IAAS;;AAGX;IAAe;;AAGL;IAAI;;AAGR;IAAiB;;AAGlB;IAAgB;;AAGN;IAAe;;AAGR;IAAI;;AAGH;IAAI;;AAGL;IAA0B;;AAGzB;IAA4C;;AAG7C;IAAI;;AAGH;IAAK;;AAG3B;IAAe;;AAGf;IAAiB;;AAGhB;IAAgB;;AAGhB;IAAgB;;AAGd;IAAkB;;AAGvB;IAAe;;AAGZ;IAAqB;;AAGtB;IAAQ;;AAGD,YAAe;IAAW;;AAGhC;IAAU;;AAGN;IAAc;;AAGV;IAAgB;;AAGf;IAAI;;AAGH;IAAI;;AAGL;IAAmB;;AAGlB;IAAuC;;AAGxC;IAAI;;AAGH;IAAI;;AAGb;IAAyB;;AAG3B;IAAkB;;AAGpB;IAAc;;AAGhB;IAA6B;;AAGb,YAAgB;IAAW;;AAGhC;IAAgB;;AAGnB;IAAM;;AAGK;IAAoB;;AAG3B;IAAkB;;AAGpB;IAAQ;;AAGG;IAAsB;;AAGvC;IAAO;;AAGF;IAAgB;;AAGb;IAA0B;;;QAjbxD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA4B;;AAGjC;IAAO;;AAGC;IAAI;;AAGX;IAAM;;AAGA;IAAa;;AAGnB;IAAO;;AAGR;IAAO;;AAGL;IAAO;;AAGL;IAAU;;AAGX;IAAO;;AAGX;IAAS;;AAGV;IAAK;;AAGP;IAAY;;AAGV;IAAa;;AAGR;IAAwB;;AAGzB;IAAa;;AAGC;IAAyB;;AAGxC;IAAc;;AAGR;IAAc;;AAGH;IAA6B;;AAG5C;IAAkB;;AAGxB;IAAG;;AAGG;IAAK;;AAGL;IAA4B;;AAGpC;IAAiB;;AAGjB;IAAgB;;AAGR;IAAQ;;AAGX;IAAW;;AAGV;IAAiB;;AAGV;IAAY;;AAGZ;IAAwB;;AAG1B;IAAiB;;AAGlB;IAAkB;;AAGvB;IAAwB;;AAG1B;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAa;;AAGf;IAAc;;AAGhB;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAO;;AAGL;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAK;;AAGF;IAAO;;AAGJ;IAAe;;AAGhB;IAAa;;AAGjB;IAAK;;AAGN;IAAQ;;AAGT;IAAW;;AAGG;IAAI;;AAGH;IAAI;;AAGL;IAAU;;AAGT;IAAuB;;AAGxB;IAAI;;AAGH;IAAa;;AAG1B;IAAW;;AAGZ;IAAoB;;AAGZ;IAAO;;AAGd;IAAO;;AAGR;IAAY;;AAGb;IAAe;;AAGjB;IAAO;;AAGA;IAAqB;;AAGrB;IAAiC;;AAGtB;IAAiC;;AAGhD;IAAU;;AAGZ;IAAY;;AAGF;IAAI;;AAGR;IAAW;;AAGZ;IAAc;;AAGJ;IAAQ;;AAGD;IAAI;;AAGH;IAAI;;AAGL;IAAkB;;AAGjB;IAAiC;;AAGlC;IAAI;;AAGH;IAAK;;AAG3B;IAAY;;AAGZ;IAAW;;AAGV;IAAW;;AAGX;IAAW;;AAGT;IAAW;;AAGhB;IAAa;;AAGV;IAA4B;;AAG7B;IAAQ;;AAGD,YAAe;IAAW;;AAGhC;IAAK;;AAGD;IAAY;;AAGR;IAAY;;AAGX;IAAI;;AAGH;IAAI;;AAGL;IAAe;;AAGd;IAAgC;;AAGjC;IAAI;;AAGH;IAAI;;AAGb;IAAkB;;AAGpB;IAAe;;AAGjB;IAAe;;AAGjB;IAA8B;;AAGd,YAAgB;IAAW;;AAGhC;IAAa;;AAGhB;IAAM;;AAGK;IAAa;;AAGpB;IAAa;;AAGf;IAAQ;;AAGG;IAAgB;;AAGjC;IAAO;;AAGF;IAAe;;AAGZ;IAAmB;;;QAjbjD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA+B;;AAGpC;IAAY;;AAGJ;IAAI;;AAGX;IAAO;;AAGD;IAAsB;;AAG5B;IAAW;;AAGZ;IAAS;;AAGP;IAAS;;AAGP;IAAY;;AAGb;IAAY;;AAGhB;IAAW;;AAGZ;IAAU;;AAGZ;IAAY;;AAGV;IAAc;;AAGT;IAAsB;;AAGvB;IAAc;;AAGA;IAA4B;;AAG3C;IAAiB;;AAGX;IAAkB;;AAGP;IAAyB;;AAGxC;IAAc;;AAGpB;IAAG;;AAGG;IAAU;;AAGV;IAAsC;;AAG9C;IAAO;;AAGP;IAAgB;;AAGR;IAAU;;AAGb;IAAgB;;AAGf;IAAyB;;AAGlB;IAAe;;AAGf;IAA+B;;AAGjC;IAAmB;;AAGpB;IAAqB;;AAG1B;IAAqB;;AAGvB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAY;;AAGd;IAAa;;AAGf;IAAM;;AAGP;IAAK;;AAGN;IAAS;;AAGX;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAiB;;AAGd;IAAmB;;AAGhB;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAQ;;AAGT;IAAkB;;AAGJ;IAAyB;;AAGxB;IAAyB;;AAG1B;IAAY;;AAGX;IAAyB;;AAG1B;IAAI;;AAGH;IAAa;;AAG1B;IAAU;;AAGX;IAAa;;AAGL;IAAS;;AAGhB;IAAM;;AAGP;IAAkB;;AAGnB;IAAmB;;AAGrB;IAAI;;AAGG;IAAyB;;AAGzB;IAAiC;;AAGtB;IAA2C;;AAG1D;IAAU;;AAGZ;IAAgB;;AAGN;IAAI;;AAGR;IAAmB;;AAGpB;IAAoB;;AAGV;IAAS;;AAGF;IAAqC;;AAGpC;IAAsC;;AAGvC;IAAoB;;AAGnB;IAAqC;;AAGtC;IAAI;;AAGH;IAAK;;AAG3B;IAAkB;;AAGlB;IAAqB;;AAGpB;IAAsB;;AAGtB;IAAsB;;AAGpB;IAAwB;;AAG7B;IAAmB;;AAGhB;IAAqB;;AAGtB;IAAU;;AAGH,YAAe;IAAW;;AAGhC;IAAO;;AAGH;IAAa;;AAGT;IAAc;;AAGb;IAAqC;;AAGpC;IAAsC;;AAGvC;IAAmB;;AAGlB;IAAqC;;AAGtC;IAAI;;AAGH;IAAI;;AAGb;IAA0B;;AAG5B;IAAe;;AAGjB;IAAY;;AAGd;IAAgC;;AAGhB,YAAgB;IAAW;;AAGhC;IAAc;;AAGjB;IAAQ;;AAGG;IAAiB;;AAGxB;IAAa;;AAGf;IAAS;;AAGE;IAAkB;;AAGnC;IAAM;;AAGD;IAAc;;AAGX;IAAsB;;;QAjbpD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA+B;;AAGpC;IAAM;;AAGE;IAAI;;AAGX;IAAO;;AAGD;IAAqB;;AAG3B;IAAY;;AAGb;IAAU;;AAGR;IAAU;;AAGR;IAAU;;AAGX;IAAY;;AAGhB;IAAW;;AAGZ;IAAS;;AAGX;IAAY;;AAGV;IAAgB;;AAGX;IAAa;;AAGd;IAAkB;;AAGJ;IAAyB;;AAGxC;IAAc;;AAGR;IAAe;;AAGJ;IAAuB;;AAGtC;IAAY;;AAGlB;IAAG;;AAGG;IAAU;;AAGV;IAAmC;;AAG3C;IAAQ;;AAGR;IAAe;;AAGP;IAAQ;;AAGX;IAAW;;AAGV;IAAiB;;AAGV;IAAoB;;AAGpB;IAA8B;;AAGhC;IAAa;;AAGd;IAAW;;AAGhB;IAAmB;;AAGrB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAQ;;AAGN;IAAO;;AAGR;IAAQ;;AAGT;IAAW;;AAGX;IAAQ;;AAGL;IAAQ;;AAGP;IAAQ;;AAGP;IAAQ;;AAGV;IAAQ;;AAGd;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAO;;AAGR;IAAW;;AAGG;IAAI;;AAGH;IAAI;;AAGL;IAAU;;AAGT;IAAwB;;AAGzB;IAAI;;AAGH;IAAa;;AAG1B;IAAS;;AAGV;IAAkB;;AAGV;IAAa;;AAGpB;IAAM;;AAGP;IAAY;;AAGb;IAAW;;AAGb;IAAS;;AAGF;IAAsB;;AAGtB;IAAkC;;AAGvB;IAA8C;;AAG7D;IAAW;;AAGb;IAAa;;AAGH;IAAI;;AAGR;IAAa;;AAGd;IAAY;;AAGF;IAAa;;AAGN;IAAI;;AAGH;IAAI;;AAGL;IAAe;;AAGd;IAAgC;;AAGjC;IAAI;;AAGH;IAAK;;AAG3B;IAAiB;;AAGjB;IAAkB;;AAGjB;IAAkB;;AAGlB;IAAoB;;AAGlB;IAAqB;;AAG1B;IAAiB;;AAGd;IAAiB;;AAGlB;IAAY;;AAGL,YAAe;IAAI;;AAGzB;IAAM;;AAGF;IAAoB;;AAGhB;IAAgB;;AAGf;IAAI;;AAGH;IAAI;;AAGL;IAAsB;;AAGrB;IAAwC;;AAGzC;IAAI;;AAGH;IAAI;;AAGb;IAAiB;;AAGnB;IAAc;;AAGhB;IAAiB;;AAGnB;IAAiC;;AAGjB,YAAgB;IAAkB;;AAGvC;IAAgB;;AAGnB;IAAO;;AAGI;IAAkB;;AAGzB;IAAc;;AAGhB;IAAK;;AAGM;IAAgB;;AAGjC;IAAO;;AAGF;IAAa;;AAGV;IAAgB;;;QAjb9C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAA0B;;AAG/B;IAAe;;AAGP;IAAI;;AAGX;IAAQ;;AAGF;IAAiB;;AAGvB;IAAc;;AAGf;IAAQ;;AAGN;IAAQ;;AAGN;IAAQ;;AAGT;IAAa;;AAGjB;IAAa;;AAGd;IAAa;;AAGf;IAAY;;AAGV;IAAiB;;AAGZ;IAAyB;;AAG1B;IAAgB;;AAGF;IAA2B;;AAG1C;IAAe;;AAGT;IAAkB;;AAGP;IAA+B;;AAG9C;IAAmB;;AAGzB;IAAG;;AAGG;IAAe;;AAGf;IAA6B;;AAGrC;IAAgB;;AAGhB;IAAqB;;AAGb;IAAe;;AAGlB;IAAiB;;AAGhB;IAAsB;;AAGf;IAAmB;;AAGnB;IAA6B;;AAG/B;IAAkB;;AAGnB;IAAkB;;AAGvB;IAAqB;;AAGvB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAe;;AAGjB;IAAe;;AAGjB;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAW;;AAGZ;IAAe;;AAGD;IAAI;;AAGH;IAAI;;AAGL;IAAiB;;AAGhB;IAA8B;;AAG/B;IAAI;;AAGH;IAAa;;AAG1B;IAAe;;AAGhB;IAAc;;AAGN;IAAQ;;AAGf;IAAM;;AAGP;IAAY;;AAGb;IAAgB;;AAGlB;IAAI;;AAGG;IAA8B;;AAG9B;IAAsC;;AAG3B;IAAsC;;AAGrD;IAAS;;AAGX;IAAgB;;AAGN;IAAI;;AAGR;IAAY;;AAGb;IAAgB;;AAGN;IAAW;;AAGJ;IAAI;;AAGH;IAAI;;AAGL;IAAkB;;AAGjB;IAAiC;;AAGlC;IAAI;;AAGH;IAAI;;AAG1B;IAAkB;;AAGlB;IAAkB;;AAGjB;IAAkB;;AAGlB;IAAmB;;AAGjB;IAAmB;;AAGxB;IAAkB;;AAGf;IAAmC;;AAGpC;IAAS;;AAGF,YAAe;IAAW;;AAGhC;IAAU;;AAGN;IAAS;;AAGL;IAAe;;AAGd;IAAI;;AAGH;IAAI;;AAGL;IAAuB;;AAGtB;IAAwC;;AAGzC;IAAI;;AAGH;IAAI;;AAGb;IAAuB;;AAGzB;IAAoB;;AAGtB;IAAwB;;AAG1B;IAA+B;;AAGf,YAAgB;IAAU;;AAG/B;IAAgB;;AAGnB;IAAM;;AAGK;IAAgB;;AAGvB;IAAiB;;AAGnB;IAAQ;;AAGG;IAAkB;;AAGnC;IAAM;;AAGD;IAAe;;AAGZ;IAAyB;;;QAjbvD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAiC;;AAGtC;IAAW;;AAGH;IAAM;;AAGb;IAAU;;AAGJ;IAAkB;;AAGxB;IAAK;;AAGN;IAAM;;AAGJ;IAAM;;AAGJ;IAAS;;AAGV;IAAU;;AAGd;IAAU;;AAGX;IAAK;;AAGP;IAAY;;AAGV;IAAW;;AAGN;IAAgB;;AAGjB;IAAW;;AAGG;IAA0B;;AAGzC;IAAe;;AAGT;IAAc;;AAGH;IAAyB;;AAGxC;IAAc;;AAGpB;IAAG;;AAGG;IAAK;;AAGL;IAAqC;;AAG7C;IAAW;;AAGX;IAAgB;;AAGR;IAAS;;AAGZ;IAAW;;AAGV;IAAc;;AAGP;IAAyB;;AAGzB;IAAiC;;AAGnC;IAAyB;;AAG1B;IAAuB;;AAG5B;IAAuB;;AAGzB;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAW;;AAGb;IAAW;;AAGb;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAW;;AAGX;IAAW;;AAGX;IAAW;;AAGX;IAAW;;AAGX;IAAW;;AAGX;IAAW;;AAGX;IAAW;;AAGX;IAAW;;AAGX;IAAW;;AAGX;IAAW;;AAGT;IAAQ;;AAGN;IAAQ;;AAGN;IAAQ;;AAGT;IAAQ;;AAGT;IAAY;;AAGZ;IAAQ;;AAGL;IAAQ;;AAGP;IAAQ;;AAGP;IAAQ;;AAGV;IAAQ;;AAGd;IAAQ;;AAGV;IAAM;;AAGP;IAAO;;AAGJ;IAAW;;AAGR;IAAc;;AAGf;IAAa;;AAGjB;IAAQ;;AAGT;IAAW;;AAGZ;IAAY;;AAGE;IAAI;;AAGH;IAAI;;AAGL;IAAa;;AAGZ;IAA0B;;AAG3B;IAAI;;AAGH;IAAa;;AAG1B;IAAW;;AAGZ;IAA+B;;AAGvB;IAAQ;;AAGf;IAAM;;AAGP;IAAW;;AAGZ;IAAiB;;AAGnB;IAAI;;AAGG;IAAmB;;AAGnB;IAA6C;;AAGlC;IAAoD;;AAGnE;IAAK;;AAGP;IAAc;;AAGJ;IAAO;;AAGX;IAAa;;AAGd;IAAa;;AAGH;IAAS;;AAGF;IAAI;;AAGH;IAAI;;AAGL;IAAmB;;AAGlB;IAAkC;;AAGnC;IAAI;;AAGH;IAAK;;AAG3B;IAAmB;;AAGnB;IAAqB;;AAGpB;IAAqB;;AAGrB;IAAgC;;AAG9B;IAA6B;;AAGlC;IAAe;;AAGZ;IAAoB;;AAGrB;IAAK;;AAGE,YAAe;IAAW;;AAGhC;IAAU;;AAGN;IAAa;;AAGT;IAAU;;AAGT;IAAI;;AAGH;IAAI;;AAGL;IAAe;;AAGd;IAAgC;;AAGjC;IAAI;;AAGH;IAAI;;AAGb;IAAoB;;AAGtB;IAAe;;AAGjB;IAAc;;AAGhB;IAAwC;;AAGxB,YAAgB;IAAW;;AAGhC;IAAgB;;AAGnB;IAAK;;AAGM;IAAU;;AAGjB;IAAgB;;AAGlB;IAAM;;AAGK;IAAW;;AAG5B;IAAM;;AAGD;IAAc;;AAGX;IAAe;;;QAjb7C;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6bkC;IAAqB;;AAG1B;IAAI;;AAGI;IAAI;;AAGX;IAAI;;AAGE;IAAS;;AAGf;IAAI;;AAGL;IAAI;;AAGF;IAAI;;AAGF;IAAI;;AAGL;IAAI;;AAGR;IAAI;;AAGL;IAAI;;AAGN;IAAY;;AAGV;IAAM;;AAGD;IAAO;;AAGR;IAAM;;AAGQ;IAAkB;;AAGjC;IAAM;;AAGA;IAAM;;AAGK;IAAkB;;AAGjC;IAAM;;AAGZ;IAAG;;AAGG;IAAI;;AAGJ;IAAY;;AAGpB;IAAK;;AAGL;IAAM;;AAGE;IAAI;;AAGP;IAAK;;AAGJ;IAAM;;AAGC;IAAS;;AAGT;IAAW;;AAGb;IAAO;;AAGR;IAAO;;AAGZ;IAAU;;AAGZ;IAAK;;AAGA;IAAO;;AAGN;IAAK;;AAGN;IAAW;;AAGR;IAAc;;AAGhB;IAAY;;AAGd;IAAM;;AAGP;IAAK;;AAGN;IAAI;;AAGN;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAM;;AAGD;IAAG;;AAGD;IAAK;;AAGT;IAAU;;AAGV;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGN;IAAQ;;AAGN;IAAQ;;AAGN;IAAQ;;AAGT;IAAQ;;AAGT;IAAY;;AAGZ;IAAQ;;AAGL;IAAQ;;AAGP;IAAQ;;AAGP;IAAQ;;AAGV;IAAQ;;AAGd;IAAM;;AAGR;IAAM;;AAGP;IAAI;;AAGD;IAAI;;AAGD;IAAc;;AAGf;IAAa;;AAGjB;IAAI;;AAGL;IAAK;;AAGN;IAAM;;AAGQ;IAAI;;AAGH;IAAI;;AAGL;IAAO;;AAGN;IAAoB;;AAGrB;IAAI;;AAGH;IAAa;;AAG1B;IAAI;;AAGL;IAAQ;;AAGA;IAAI;;AAGX;IAAI;;AAGL;IAAK;;AAGN;IAAK;;AAGP;IAAI;;AAGG;IAAQ;;AAGR;IAAwC;;AAG7B;IAAyC;;AAGxD;IAAI;;AAGN;IAAM;;AAGI;IAAI;;AAGR;IAAK;;AAGN;IAAK;;AAGK;IAAI;;AAGG;IAAI;;AAGH;IAAI;;AAGL;IAAY;;AAGX;IAA2B;;AAG5B;IAAI;;AAGH;IAAK;;AAG3B;IAAI;;AAGJ;IAAI;;AAGH;IAAI;;AAGJ;IAAM;;AAGJ;IAAM;;AAGX;IAAI;;AAGD;IAAO;;AAGR;IAAI;;AAGG,YAAe;IAAK;;AAG1B;IAAI;;AAGA;IAAI;;AAGA;IAAM;;AAGL;IAAI;;AAGH;IAAI;;AAGL;IAAW;;AAGV;IAA4B;;AAG7B;IAAI;;AAGH;IAAI;;AAGb;IAAM;;AAGR;IAAM;;AAGR;IAAK;;AAGP;IAAgC;;AAGhB,YAAgB;IAAkB;;AAGvC;IAAM;;AAGT;IAAI;;AAGO;IAAM;;AAGb;IAAM;;AAGR;IAAI;;AAGO;IAAM;;AAGvB;IAAI;;AAGC;IAAM;;AAGH;IAAM;;;QAjbpC;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAgbM;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,sGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAsBkC;IAAqB;;AAG1B;IAAI;;AAGG;IAAO;;AAGd;IAAI;;AAGF;IAAI;;AAGF;IAAI;;AAGL;IAAI;;AAGR;IAAI;;AAGL;IAAI;;AAGN;IAAY;;AAGV;IAAM;;AAGD;IAAO;;AAGR;IAAM;;AAGQ;IAAkB;;AAGjC;IAAM;;AAGA;IAAM;;AAGK;IAAkB;;AAGjC;IAAM;;AAGN;IAAI;;AAGJ;IAAY;;AAGpB;IAAM;;AAGN;IAAM;;AAGE;IAAI;;AAGP;IAAK;;AAGJ;IAAM;;AAGC;IAAO;;AAGP;IAAW;;AAGb;IAAO;;AAGR;IAAO;;AAGZ;IAAU;;AAGN;IAAW;;AAGT;IAAO;;AAGT;IAAO;;AAGX;IAAO;;AAGH;IAAS;;AAGX;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGR;IAAQ;;AAGN;IAAQ;;AAGN;IAAQ;;AAGN;IAAQ;;AAGT;IAAQ;;AAGT;IAAY;;AAGZ;IAAQ;;AAGL;IAAQ;;AAGP;IAAQ;;AAGP;IAAQ;;AAGV;IAAQ;;AAGd;IAAQ;;AAGX;IAAI;;AAGD;IAAI;;AAGN;IAAQ;;AAGT;IAAI;;AAGL;IAAM;;AAGQ;IAAO;;AAGN;IAAoB;;AAGjC;IAAI;;AAGL;IAAO;;AAGC;IAAI;;AAGZ;IAAK;;AAGN;IAAK;;AAGP;IAAI;;AAGG;IAAQ;;AAGR;IAAyC;;AAG9B;IAA0C;;AAGzD;IAAI;;AAGN;IAAO;;AAGD;IAAK;;AAGN;IAAK;;AAGK;IAAM;;AAGC;IAAU;;AAGT;IAAyB;;AAG/C;IAAK;;AAGL;IAAK;;AAGJ;IAAK;;AAGL;IAAM;;AAGJ;IAAM;;AAGX;IAAK;;AAGF;IAAO;;AAGR;IAAI;;AAGH;IAAI;;AAGA;IAAM;;AAGF;IAAK;;AAGJ;IAAW;;AAGV;IAA4B;;AAGrC;IAAM;;AAGR;IAAM;;AAGR;IAAK;;AAGP;IAAiC;;AAGtB;IAAM;;AAGT;IAAI;;AAGO;IAAM;;AAGb;IAAM;;AAGR;IAAI;;AAGO;IAAM;;AAGlB;IAAM;;AAGH;IAAM;;;QAlUpC;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,sGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;QAiUM;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,wGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAsBgC;IAAY;;AAGF;IAAO;;AAGjB;IAAG;;AAGD;IAAG;;AAGM;IAAoB;;AAG3B;IAAS;;AAGA;IAAkB;;AAGhB;IAAkB;;AAG5B;IAAS;;AAGT;IAAM;;AAGlB;IAAY;;AAGb;IAAkC;;AAGrB;IAAI;;AAGf;IAAO;;AAGC;IAAuB;;AAGxB;IAA4C;;AAGjC;IAA6C;;AAGxD;IAAI;;AAGM;IAAO;;AAGL;IAAO;;AAGvB;IAAI;;AAGF;IAAM;;AAGR;IAAM;;AAGc;IAAY;;AAGX;IAA2B;;;QArFvE;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,wGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;AAiGkC;IAA+B;;AAGpC;IAAY;;AAGJ;IAAI;;AAGX;IAAO;;AAGD;IAAuB;;AAG7B;IAAU;;AAGX;IAAM;;AAGJ;IAAM;;AAGJ;IAAO;;AAGR;IAAS;;AAGb;IAAS;;AAGV;IAAM;;AAGR;IAAY;;AAGV;IAAa;;AAGR;IAAgB;;AAGjB;IAAe;;AAGD;IAAsC;;AAGrD;IAAkB;;AAGZ;IAAe;;AAGJ;IAAqC;;AAGpD;IAAiB;;AAGvB;IAAG;;AAGG;IAAM;;AAGN;IAAuC;;AAG/C;IAAS;;AAGT;IAAqB;;AAGb;IAAM;;AAGT;IAAiB;;AAGhB;IAAqB;;AAGd;IAAuB;;AAGvB;IAAsC;;AAGxC;IAA0B;;AAG3B;IAA0B;;AAG/B;IAA0B;;AAG5B;IAAK;;AAGA;IAAO;;AAGN;IAAW;;AAGZ;IAAW;;AAGR;IAAgB;;AAGlB;IAAc;;AAGhB;IAAM;;AAGP;IAAK;;AAGN;IAAO;;AAGT;IAAK;;AAGF;IAAK;;AAGT;IAAI;;AAGF;IAAM;;AAGJ;IAAQ;;AAGV;IAAQ;;AAGH;IAAS;;AAGP;IAAK;;AAGT;IAAU;;AAGV;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGP;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGL;IAAO;;AAGR;IAAO;;AAGR;IAAW;;AAGX;IAAO;;AAGJ;IAAO;;AAGN;IAAO;;AAGN;IAAO;;AAGT;IAAO;;AAGb;IAAQ;;AAGV;IAAM;;AAGP;IAAS;;AAGN;IAAO;;AAGJ;IAAe;;AAGhB;IAAa;;AAGjB;IAAQ;;AAGT;IAAO;;AAGR;IAAkB;;AAGJ;IAAI;;AAGH;IAAI;;AAGL;IAAgB;;AAGf;IAAkC;;AAGnC;IAAI;;AAGH;IAAa;;AAG1B;IAAc;;AAGf;IAAsB;;AAGd;IAAS;;AAGhB;IAAU;;AAGX;IAAe;;AAGhB;IAAqB;;AAGvB;IAAW;;AAGJ;IAA0B;;AAG1B;IAAuC;;AAG5B;IAA6C;;AAG5D;IAAa;;AAGf;IAAiB;;AAGP;IAAI;;AAGR;IAAgB;;AAGjB;IAAiB;;AAGP;IAAU;;AAGH;IAAI;;AAGH;IAAI;;AAGL;IAAmB;;AAGlB;IAAqC;;AAGtC;IAAI;;AAGH;IAAI;;AAG1B;IAAY;;AAGZ;IAAsB;;AAGrB;IAAiB;;AAGjB;IAAiB;;AAGf;IAAgB;;AAGrB;IAAa;;AAGV;IAA2B;;AAG5B;IAAW;;AAGJ,YAAe;IAAW;;AAGhC;IAAO;;AAGH;IAAc;;AAGV;IAAe;;AAGd;IAAI;;AAGH;IAAI;;AAGL;IAAkB;;AAGjB;IAAuC;;AAGxC;IAAI;;AAGH;IAAI;;AAGb;IAAsB;;AAGxB;IAAe;;AAGjB;IAAiB;;AAGnB;IAAqC;;AAGrB,YAAgB;IAAU;;AAG/B;IAAkB;;AAGrB;IAAO;;AAGI;IAAgB;;AAGvB;IAAgB;;AAGlB;IAAU;;AAGC;IAAmB;;AAGpC;IAAQ;;AAGH;IAAgB;;AAGb;IAAmB;;;QAjbjD;QACS;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;AAVX,kGACE,UAAU,kBACD,cAAc,qBACd,iBAAiB,mBACjB,eAAe,oBACf,gBAAgB,kBAChB,cAAc,mBACd,eAAe,uBACf,mBAAmB,iBACnB,aAAa,4BACb,wBAAwB;;EACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4FAmmBK,QACS,gBACA,mBACA,iBACA,kBACA,gBACA,iBACA,qBACE,eACA;AAElB,YAAQ,AAAO,MAAD;;;AAEV,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;;AAEtW,oBAAQ,AAAO,MAAD;;;AAEV,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;AAE5W,kBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;;AAGtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;;AAEtW,oBAAQ,AAAO,MAAD;;;AAEV,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAExW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAExW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAExW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAExW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAExW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAExW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAExW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;AAE5W,kBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;;;AAGtW,oBAAQ,AAAO,MAAD;;;AAEV,wBAAO,qFAA0C,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEzW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAExW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAExW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAExW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAExW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAExW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAExW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAExW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAExW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAExW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAExW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAExW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAExW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAExW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAExW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAExW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAExW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAExW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAExW,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;AAE5W,kBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;;AAGtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,mFAAwC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;;AAEvW,oBAAQ,AAAO,MAAD;;;AAEV,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;AAE5W,kBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;;AAGtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,mFAAwC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEvW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;;AAEtW,oBAAQ,AAAO,MAAD;;;AAEV,wBAAO,oFAAyC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;AAE5W,kBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;;AAGtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;;AAEtW,oBAAQ,AAAO,MAAD;;;;AAEV,0BAAO,sFAA2C,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;;;AAG1W,0BAAO,sFAA2C,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAG9W,kBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;;AAGtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAEtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;;AAEtW,oBAAQ,AAAO,MAAD;;;;AAEV,0BAAO,sFAA2C,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;;;AAG1W,4BAAQ,AAAO,MAAD;;;AAEV,gCAAO,wFAA6C,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAE5W,gCAAO,wFAA6C,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;AAEhX,0BAAO,sFAA2C,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAG9W,oBAAQ,AAAO,MAAD;;;AAEV,wBAAO,wFAA6C,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;AAE5W,wBAAO,wFAA6C,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;AAEhX,kBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;;;AAGtW,gBAAO,kFAAuC,cAAc,qBAAqB,iBAAiB,mBAAmB,eAAe,oBAAoB,gBAAgB,kBAAkB,cAAc,mBAAmB,eAAe,uBAAuB,mBAAmB,iBAAiB,aAAa,4BAA4B,wBAAwB;;;AAE1W,SAAO,yBAAO,AAAkE,uEAAR,MAAM;AAC9E,UAAO;EACT;;MApckB,4DAA2B;YAAG","file":"../../../../../../../../packages/flutter_localizations/src/material_localizations.dart.lib.js"}');
  // Exports:
  return {
    src__material_localizations: material_localizations$,
    src__l10n__generated_material_localizations: generated_material_localizations
  };
}));

//# sourceMappingURL=material_localizations.dart.lib.js.map
