define(['dart_sdk', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter_svg/src/utilities/xml.dart', 'packages/xml/src/xml/utils/simple_name.dart', 'packages/flutter_svg/src/utilities/numbers.dart', 'packages/flutter_svg/src/utilities/errors.dart', 'packages/path_drawing/src/parse_path.dart', 'packages/flutter_svg/src/svg/theme.dart', 'packages/path_drawing/src/dash_path.dart', 'packages/flutter/src/painting/box_fit.dart', 'packages/flutter/src/painting/alignment.dart', 'packages/flutter/src/widgets/title.dart', 'packages/flutter_svg/src/svg/default_theme.dart', 'packages/flutter/src/widgets/color_filter.dart', 'packages/flutter_svg/src/utilities/_http_web.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/rendering/box.dart', 'packages/flutter/src/services/text_editing_delta.dart', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/flutter/src/foundation/synchronous_future.dart', 'packages/flutter_svg/src/utilities/_file_none.dart'], (function load__packages__flutter_svg__src__svg__parser_state_dart(dart_sdk, packages__vector_math__vector_math_64$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter_svg__src__utilities__xml$46dart, packages__xml__src__xml__utils__simple_name$46dart, packages__flutter_svg__src__utilities__numbers$46dart, packages__flutter_svg__src__utilities__errors$46dart, packages__path_drawing__src__parse_path$46dart, packages__flutter_svg__src__svg__theme$46dart, packages__path_drawing__src__dash_path$46dart, packages__flutter__src__painting__box_fit$46dart, packages__flutter__src__painting__alignment$46dart, packages__flutter__src__widgets__title$46dart, packages__flutter_svg__src__svg__default_theme$46dart, packages__flutter__src__widgets__color_filter$46dart, packages__flutter_svg__src__utilities___http_web$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__rendering__box$46dart, packages__flutter__src__services__text_editing_delta$46dart, packages__flutter__src__foundation___platform_web$46dart, packages__flutter__src__foundation__synchronous_future$46dart, packages__flutter_svg__src__utilities___file_none$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const _internal = dart_sdk._internal;
  const async = dart_sdk.async;
  const collection = dart_sdk.collection;
  const _js_helper = dart_sdk._js_helper;
  const convert = dart_sdk.convert;
  const typed_data = dart_sdk.typed_data;
  const _engine = dart_sdk._engine;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const xml = packages__flutter_svg__src__utilities__xml$46dart.src__utilities__xml;
  const end_element = packages__xml__src__xml__utils__simple_name$46dart.src__xml_events__events__end_element;
  const start_element = packages__xml__src__xml__utils__simple_name$46dart.src__xml_events__events__start_element;
  const cdata = packages__xml__src__xml__utils__simple_name$46dart.src__xml_events__events__cdata;
  const text = packages__xml__src__xml__utils__simple_name$46dart.src__xml_events__events__text;
  const event = packages__xml__src__xml__utils__simple_name$46dart.src__xml_events__event;
  const xml_events = packages__xml__src__xml__utils__simple_name$46dart.xml_events;
  const numbers = packages__flutter_svg__src__utilities__numbers$46dart.src__utilities__numbers;
  const errors = packages__flutter_svg__src__utilities__errors$46dart.src__utilities__errors;
  const parse_path = packages__path_drawing__src__parse_path$46dart.src__parse_path;
  const theme = packages__flutter_svg__src__svg__theme$46dart.src__svg__theme;
  const dash_path = packages__path_drawing__src__dash_path$46dart.src__dash_path;
  const box_fit = packages__flutter__src__painting__box_fit$46dart.src__painting__box_fit;
  const alignment = packages__flutter__src__painting__alignment$46dart.src__painting__alignment;
  const widget_inspector = packages__flutter__src__widgets__title$46dart.src__widgets__widget_inspector;
  const framework = packages__flutter__src__widgets__title$46dart.src__widgets__framework;
  const basic = packages__flutter__src__widgets__title$46dart.src__widgets__basic;
  const text$ = packages__flutter__src__widgets__title$46dart.src__widgets__text;
  const localizations = packages__flutter__src__widgets__title$46dart.src__widgets__localizations;
  const default_theme = packages__flutter_svg__src__svg__default_theme$46dart.src__svg__default_theme;
  const color_filter = packages__flutter__src__widgets__color_filter$46dart.src__widgets__color_filter;
  const _http_web = packages__flutter_svg__src__utilities___http_web$46dart.src__utilities___http_web;
  const layer = packages__flutter__src__rendering__layer$46dart.src__rendering__layer;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const box = packages__flutter__src__rendering__box$46dart.src__rendering__box;
  const asset_bundle = packages__flutter__src__services__text_editing_delta$46dart.src__services__asset_bundle;
  const platform = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  const synchronous_future = packages__flutter__src__foundation__synchronous_future$46dart.src__foundation__synchronous_future;
  const _file_none = packages__flutter_svg__src__utilities___file_none$46dart.src__utilities___file_none;
  var parser_state = Object.create(dart.library);
  var parser$ = Object.create(dart.library);
  var svg = Object.create(dart.library);
  var parsers = Object.create(dart.library);
  var render_picture = Object.create(dart.library);
  var vector_drawable = Object.create(dart.library);
  var picture_stream = Object.create(dart.library);
  var picture_cache = Object.create(dart.library);
  var picture_provider = Object.create(dart.library);
  var flutter_svg = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $add = dartx.add;
  var $isEmpty = dartx.isEmpty;
  var $addAll = dartx.addAll;
  var $_get = dartx._get;
  var $forEach = dartx.forEach;
  var $toDouble = dartx.toDouble;
  var $last = dartx.last;
  var $isNotEmpty = dartx.isNotEmpty;
  var $trim = dartx.trim;
  var $replaceAll = dartx.replaceAll;
  var $iterator = dartx.iterator;
  var $contains = dartx.contains;
  var $toLowerCase = dartx.toLowerCase;
  var $endsWith = dartx.endsWith;
  var $split = dartx.split;
  var $length = dartx.length;
  var $clamp = dartx.clamp;
  var $startsWith = dartx.startsWith;
  var $firstWhere = dartx.firstWhere;
  var $substring = dartx.substring;
  var $indexOf = dartx.indexOf;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $removeLast = dartx.removeLast;
  var $round = dartx.round;
  var $modulo = dartx['%'];
  var $_set = dartx._set;
  var $_equals = dartx._equals;
  var $reversed = dartx.reversed;
  var $keys = dartx.keys;
  var $removeWhere = dartx.removeWhere;
  var $first = dartx.first;
  var $remove = dartx.remove;
  var $values = dartx.values;
  var $clear = dartx.clear;
  var $hashCode = dartx.hashCode;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T$ = {
    JSArrayOfDiagnosticsNode: () => (T$.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))(),
    DiagnosticsPropertyOfString: () => (T$.DiagnosticsPropertyOfString = dart.constFn(diagnostics.DiagnosticsProperty$(core.String)))(),
    ListOfDiagnosticsNode: () => (T$.ListOfDiagnosticsNode = dart.constFn(core.List$(diagnostics.DiagnosticsNode)))(),
    VoidToListOfDiagnosticsNode: () => (T$.VoidToListOfDiagnosticsNode = dart.constFn(dart.fnType(T$.ListOfDiagnosticsNode(), [])))(),
    JSArrayOfDrawable: () => (T$.JSArrayOfDrawable = dart.constFn(_interceptors.JSArray$(vector_drawable.Drawable)))(),
    JSArrayOfdouble: () => (T$.JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(core.double)))(),
    JSArrayOfColor: () => (T$.JSArrayOfColor = dart.constFn(_interceptors.JSArray$(ui.Color)))(),
    VoidTodouble: () => (T$.VoidTodouble = dart.constFn(dart.fnType(core.double, [])))(),
    doubleTodynamic: () => (T$.doubleTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.double])))(),
    JSArrayOfPath: () => (T$.JSArrayOfPath = dart.constFn(_interceptors.JSArray$(ui.Path)))(),
    DrawableN: () => (T$.DrawableN = dart.constFn(dart.nullable(vector_drawable.Drawable)))(),
    DrawableNTovoid: () => (T$.DrawableNTovoid = dart.constFn(dart.fnType(dart.void, [T$.DrawableN()])))(),
    ListQueueOf_TextInfo: () => (T$.ListQueueOf_TextInfo = dart.constFn(collection.ListQueue$(parser_state._TextInfo)))(),
    StringTovoid: () => (T$.StringTovoid = dart.constFn(dart.fnType(dart.void, [core.String])))(),
    XmlStartElementEventTovoid: () => (T$.XmlStartElementEventTovoid = dart.constFn(dart.fnType(dart.void, [start_element.XmlStartElementEvent])))(),
    ListQueueOf_SvgGroupTuple: () => (T$.ListQueueOf_SvgGroupTuple = dart.constFn(collection.ListQueue$(parser_state._SvgGroupTuple)))(),
    IdentityMapOfString$String: () => (T$.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))(),
    SyncIterableOfXmlEvent: () => (T$.SyncIterableOfXmlEvent = dart.constFn(_js_helper.SyncIterable$(event.XmlEvent)))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    CircularIntervalListOfdouble: () => (T$.CircularIntervalListOfdouble = dart.constFn(dash_path.CircularIntervalList$(core.double)))(),
    StrokeCapTobool: () => (T$.StrokeCapTobool = dart.constFn(dart.fnType(core.bool, [ui.StrokeCap])))(),
    VoidToStrokeCap: () => (T$.VoidToStrokeCap = dart.constFn(dart.fnType(ui.StrokeCap, [])))(),
    StrokeJoinTobool: () => (T$.StrokeJoinTobool = dart.constFn(dart.fnType(core.bool, [ui.StrokeJoin])))(),
    VoidToStrokeJoin: () => (T$.VoidToStrokeJoin = dart.constFn(dart.fnType(ui.StrokeJoin, [])))(),
    StringToString: () => (T$.StringToString = dart.constFn(dart.fnType(core.String, [core.String])))(),
    StringToint: () => (T$.StringToint = dart.constFn(dart.fnType(core.int, [core.String])))(),
    doubleTodouble: () => (T$.doubleTodouble = dart.constFn(dart.fnType(core.double, [core.double])))(),
    IdentityMapOfString$double: () => (T$.IdentityMapOfString$double = dart.constFn(_js_helper.IdentityMap$(core.String, core.double)))(),
    LinkedHashSetOfString: () => (T$.LinkedHashSetOfString = dart.constFn(collection.LinkedHashSet$(core.String)))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    FutureNOfvoid: () => (T$.FutureNOfvoid = dart.constFn(dart.nullable(T$.FutureOfvoid())))(),
    SvgParserStateAndboolToFutureNOfvoid: () => (T$.SvgParserStateAndboolToFutureNOfvoid = dart.constFn(dart.fnType(T$.FutureNOfvoid(), [parser_state.SvgParserState, core.bool])))(),
    SvgParserStateAndboolToFutureOfvoid: () => (T$.SvgParserStateAndboolToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [parser_state.SvgParserState, core.bool])))(),
    SvgParserStateToPath: () => (T$.SvgParserStateToPath = dart.constFn(dart.fnType(ui.Path, [parser_state.SvgParserState])))(),
    PathN: () => (T$.PathN = dart.constFn(dart.nullable(ui.Path)))(),
    SvgParserStateToPathN: () => (T$.SvgParserStateToPathN = dart.constFn(dart.fnType(T$.PathN(), [parser_state.SvgParserState])))(),
    BuildContextToLimitedBox: () => (T$.BuildContextToLimitedBox = dart.constFn(dart.fnType(basic.LimitedBox, [framework.BuildContext])))(),
    FutureOfPictureInfo: () => (T$.FutureOfPictureInfo = dart.constFn(async.Future$(picture_stream.PictureInfo)))(),
    ColorFilterN: () => (T$.ColorFilterN = dart.constFn(dart.nullable(ui.ColorFilter)))(),
    Uint8ListAndColorFilterNAndStringToFutureOfPictureInfo: () => (T$.Uint8ListAndColorFilterNAndStringToFutureOfPictureInfo = dart.constFn(dart.fnType(T$.FutureOfPictureInfo(), [typed_data.Uint8List, T$.ColorFilterN(), core.String])))(),
    SvgThemeToFn: () => (T$.SvgThemeToFn = dart.constFn(dart.fnType(T$.Uint8ListAndColorFilterNAndStringToFutureOfPictureInfo(), [theme.SvgTheme])))(),
    StringAndColorFilterNAndStringToFutureOfPictureInfo: () => (T$.StringAndColorFilterNAndStringToFutureOfPictureInfo = dart.constFn(dart.fnType(T$.FutureOfPictureInfo(), [core.String, T$.ColorFilterN(), core.String])))(),
    SvgThemeToFn$1: () => (T$.SvgThemeToFn$1 = dart.constFn(dart.fnType(T$.StringAndColorFilterNAndStringToFutureOfPictureInfo(), [theme.SvgTheme])))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    VoidToWidget: () => (T$.VoidToWidget = dart.constFn(dart.fnType(framework.Widget, [])))(),
    WidgetTodynamic: () => (T$.WidgetTodynamic = dart.constFn(dart.fnType(dart.dynamic, [framework.Widget])))(),
    DiagnosticsPropertyOfPictureStream: () => (T$.DiagnosticsPropertyOfPictureStream = dart.constFn(diagnostics.DiagnosticsProperty$(picture_stream.PictureStream)))(),
    CompleterOfvoid: () => (T$.CompleterOfvoid = dart.constFn(async.Completer$(dart.void)))(),
    PictureInfoN: () => (T$.PictureInfoN = dart.constFn(dart.nullable(picture_stream.PictureInfo)))(),
    PictureInfoNAndboolTovoid: () => (T$.PictureInfoNAndboolTovoid = dart.constFn(dart.fnType(dart.void, [T$.PictureInfoN(), core.bool])))(),
    ObjectAndStackTraceTovoid: () => (T$.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    FutureOfImage: () => (T$.FutureOfImage = dart.constFn(async.Future$(ui.Image)))(),
    Uint8ListToFutureOfImage: () => (T$.Uint8ListToFutureOfImage = dart.constFn(dart.fnType(T$.FutureOfImage(), [typed_data.Uint8List])))(),
    StringN: () => (T$.StringN = dart.constFn(dart.nullable(core.String)))(),
    StringNAndMatrix4ToMatrix4: () => (T$.StringNAndMatrix4ToMatrix4 = dart.constFn(dart.fnType(vector_math_64.Matrix4, [T$.StringN(), vector_math_64.Matrix4])))(),
    LayerHandleOfTransformLayer: () => (T$.LayerHandleOfTransformLayer = dart.constFn(layer.LayerHandle$(layer.TransformLayer)))(),
    LayerHandleOfClipRectLayer: () => (T$.LayerHandleOfClipRectLayer = dart.constFn(layer.LayerHandle$(layer.ClipRectLayer)))(),
    LayerHandleOfPictureLayer: () => (T$.LayerHandleOfPictureLayer = dart.constFn(layer.LayerHandle$(layer.PictureLayer)))(),
    PaintingContextAndOffsetTovoid: () => (T$.PaintingContextAndOffsetTovoid = dart.constFn(dart.fnType(dart.void, [object.PaintingContext, ui.Offset])))(),
    IdentityMapOfString$DrawableGradient: () => (T$.IdentityMapOfString$DrawableGradient = dart.constFn(_js_helper.IdentityMap$(core.String, vector_drawable.DrawableGradient)))(),
    ListOfPath: () => (T$.ListOfPath = dart.constFn(core.List$(ui.Path)))(),
    IdentityMapOfString$ListOfPath: () => (T$.IdentityMapOfString$ListOfPath = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ListOfPath())))(),
    IdentityMapOfString$DrawableStyleable: () => (T$.IdentityMapOfString$DrawableStyleable = dart.constFn(_js_helper.IdentityMap$(core.String, vector_drawable.DrawableStyleable)))(),
    DrawableToDrawable: () => (T$.DrawableToDrawable = dart.constFn(dart.fnType(vector_drawable.Drawable, [vector_drawable.Drawable])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    LinkedHashSetOfint: () => (T$.LinkedHashSetOfint = dart.constFn(collection.LinkedHashSet$(core.int)))(),
    JSArrayOf_PictureListenerPair: () => (T$.JSArrayOf_PictureListenerPair = dart.constFn(_interceptors.JSArray$(picture_stream._PictureListenerPair)))(),
    _PictureListenerPairTobool: () => (T$._PictureListenerPairTobool = dart.constFn(dart.fnType(core.bool, [picture_stream._PictureListenerPair])))(),
    ObjectFlagPropertyOfPictureStreamCompleter: () => (T$.ObjectFlagPropertyOfPictureStreamCompleter = dart.constFn(diagnostics.ObjectFlagProperty$(picture_stream.PictureStreamCompleter)))(),
    ListOf_PictureListenerPair: () => (T$.ListOf_PictureListenerPair = dart.constFn(core.List$(picture_stream._PictureListenerPair)))(),
    ObjectFlagPropertyOfListOf_PictureListenerPair: () => (T$.ObjectFlagPropertyOfListOf_PictureListenerPair = dart.constFn(diagnostics.ObjectFlagProperty$(T$.ListOf_PictureListenerPair())))(),
    DiagnosticsPropertyOfPictureInfo: () => (T$.DiagnosticsPropertyOfPictureInfo = dart.constFn(diagnostics.DiagnosticsProperty$(picture_stream.PictureInfo)))(),
    ObjectAndStackTraceToNull: () => (T$.ObjectAndStackTraceToNull = dart.constFn(dart.fnType(core.Null, [core.Object, core.StackTrace])))(),
    LinkedMapOfObject$PictureStreamCompleter: () => (T$.LinkedMapOfObject$PictureStreamCompleter = dart.constFn(_js_helper.LinkedMap$(core.Object, picture_stream.PictureStreamCompleter)))(),
    VoidToPictureStreamCompleter: () => (T$.VoidToPictureStreamCompleter = dart.constFn(dart.fnType(picture_stream.PictureStreamCompleter, [])))(),
    DiagnosticsPropertyOfPictureProvider: () => (T$.DiagnosticsPropertyOfPictureProvider = dart.constFn(diagnostics.DiagnosticsProperty$(picture_provider.PictureProvider)))(),
    FutureOfNull: () => (T$.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    ObjectAndStackTraceToFutureOfNull: () => (T$.ObjectAndStackTraceToFutureOfNull = dart.constFn(dart.fnType(T$.FutureOfNull(), [core.Object, core.StackTrace])))(),
    DiagnosticsPropertyOfAssetBundlePictureKey: () => (T$.DiagnosticsPropertyOfAssetBundlePictureKey = dart.constFn(diagnostics.DiagnosticsProperty$(picture_provider.AssetBundlePictureKey)))(),
    ObjectAndStackTraceToFutureOfPictureInfo: () => (T$.ObjectAndStackTraceToFutureOfPictureInfo = dart.constFn(dart.fnType(T$.FutureOfPictureInfo(), [core.Object, core.StackTrace])))(),
    PictureKeyOfNetworkPictureKeyData: () => (T$.PictureKeyOfNetworkPictureKeyData = dart.constFn(picture_provider.PictureKey$(picture_provider.NetworkPictureKeyData)))(),
    SynchronousFutureOfPictureKeyOfNetworkPictureKeyData: () => (T$.SynchronousFutureOfPictureKeyOfNetworkPictureKeyData = dart.constFn(synchronous_future.SynchronousFuture$(T$.PictureKeyOfNetworkPictureKeyData())))(),
    DiagnosticsPropertyOfPictureKeyOfNetworkPictureKeyData: () => (T$.DiagnosticsPropertyOfPictureKeyOfNetworkPictureKeyData = dart.constFn(diagnostics.DiagnosticsProperty$(T$.PictureKeyOfNetworkPictureKeyData())))(),
    PictureKeyOfString: () => (T$.PictureKeyOfString = dart.constFn(picture_provider.PictureKey$(core.String)))(),
    SynchronousFutureOfPictureKeyOfString: () => (T$.SynchronousFutureOfPictureKeyOfString = dart.constFn(synchronous_future.SynchronousFuture$(T$.PictureKeyOfString())))(),
    PictureKeyOfUint8List: () => (T$.PictureKeyOfUint8List = dart.constFn(picture_provider.PictureKey$(typed_data.Uint8List)))(),
    SynchronousFutureOfPictureKeyOfUint8List: () => (T$.SynchronousFutureOfPictureKeyOfUint8List = dart.constFn(synchronous_future.SynchronousFuture$(T$.PictureKeyOfUint8List())))(),
    SynchronousFutureOfAssetBundlePictureKey: () => (T$.SynchronousFutureOfAssetBundlePictureKey = dart.constFn(synchronous_future.SynchronousFuture$(picture_provider.AssetBundlePictureKey)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_Enum__name]: "multiply",
        [_Enum_index]: 24
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_Enum__name]: "screen",
        [_Enum_index]: 14
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_Enum__name]: "overlay",
        [_Enum_index]: 15
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_Enum__name]: "darken",
        [_Enum_index]: 16
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_Enum__name]: "lighten",
        [_Enum_index]: 17
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_Enum__name]: "colorDodge",
        [_Enum_index]: 18
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_Enum__name]: "colorBurn",
        [_Enum_index]: 19
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_Enum__name]: "hardLight",
        [_Enum_index]: 20
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_Enum__name]: "softLight",
        [_Enum_index]: 21
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_Enum__name]: "difference",
        [_Enum_index]: 22
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_Enum__name]: "exclusion",
        [_Enum_index]: 23
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_Enum__name]: "hue",
        [_Enum_index]: 25
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_Enum__name]: "saturation",
        [_Enum_index]: 26
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_Enum__name]: "color",
        [_Enum_index]: 27
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_Enum__name]: "luminosity",
        [_Enum_index]: 28
      });
    },
    get C0() {
      return C[0] = dart.constMap(core.String, ui.BlendMode, ["multiply", C[1] || CT.C1, "screen", C[2] || CT.C2, "overlay", C[3] || CT.C3, "darken", C[4] || CT.C4, "lighten", C[5] || CT.C5, "color-dodge", C[6] || CT.C6, "color-burn", C[7] || CT.C7, "hard-light", C[8] || CT.C8, "soft-light", C[9] || CT.C9, "difference", C[10] || CT.C10, "exclusion", C[11] || CT.C11, "hue", C[12] || CT.C12, "saturation", C[13] || CT.C13, "color", C[14] || CT.C14, "luminosity", C[15] || CT.C15]);
    },
    get C17() {
      return C[17] = dart.fn(parser_state._Elements.svg, T$.SvgParserStateAndboolToFutureNOfvoid());
    },
    get C18() {
      return C[18] = dart.fn(parser_state._Elements.g, T$.SvgParserStateAndboolToFutureNOfvoid());
    },
    get C19() {
      return C[19] = dart.fn(parser_state._Elements.use, T$.SvgParserStateAndboolToFutureNOfvoid());
    },
    get C20() {
      return C[20] = dart.fn(parser_state._Elements.symbol, T$.SvgParserStateAndboolToFutureNOfvoid());
    },
    get C21() {
      return C[21] = dart.fn(parser_state._Elements.radialGradient, T$.SvgParserStateAndboolToFutureNOfvoid());
    },
    get C22() {
      return C[22] = dart.fn(parser_state._Elements.linearGradient, T$.SvgParserStateAndboolToFutureNOfvoid());
    },
    get C23() {
      return C[23] = dart.fn(parser_state._Elements.clipPath, T$.SvgParserStateAndboolToFutureNOfvoid());
    },
    get C24() {
      return C[24] = dart.fn(parser_state._Elements.image, T$.SvgParserStateAndboolToFutureOfvoid());
    },
    get C25() {
      return C[25] = dart.fn(parser_state._Elements.text, T$.SvgParserStateAndboolToFutureOfvoid());
    },
    get C16() {
      return C[16] = dart.constMap(core.String, T$.SvgParserStateAndboolToFutureNOfvoid(), ["svg", C[17] || CT.C17, "g", C[18] || CT.C18, "a", C[18] || CT.C18, "use", C[19] || CT.C19, "symbol", C[20] || CT.C20, "mask", C[20] || CT.C20, "radialGradient", C[21] || CT.C21, "linearGradient", C[22] || CT.C22, "clipPath", C[23] || CT.C23, "image", C[24] || CT.C24, "text", C[25] || CT.C25]);
    },
    get C27() {
      return C[27] = dart.fn(parser_state._Paths.circle, T$.SvgParserStateToPath());
    },
    get C28() {
      return C[28] = dart.fn(parser_state._Paths.path, T$.SvgParserStateToPath());
    },
    get C29() {
      return C[29] = dart.fn(parser_state._Paths.rect, T$.SvgParserStateToPath());
    },
    get C30() {
      return C[30] = dart.fn(parser_state._Paths.polygon, T$.SvgParserStateToPathN());
    },
    get C31() {
      return C[31] = dart.fn(parser_state._Paths.polyline, T$.SvgParserStateToPathN());
    },
    get C32() {
      return C[32] = dart.fn(parser_state._Paths.ellipse, T$.SvgParserStateToPath());
    },
    get C33() {
      return C[33] = dart.fn(parser_state._Paths.line, T$.SvgParserStateToPath());
    },
    get C26() {
      return C[26] = dart.constMap(core.String, T$.SvgParserStateToPathN(), ["circle", C[27] || CT.C27, "path", C[28] || CT.C28, "rect", C[29] || CT.C29, "polygon", C[30] || CT.C30, "polyline", C[31] || CT.C31, "ellipse", C[32] || CT.C32, "line", C[33] || CT.C33]);
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080.0
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4293982463.0
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294634455.0
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278255615.0
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4286578644.0
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4293984255.0
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294309340.0
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294960324.0
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294962125.0
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190335.0
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4287245282.0
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4289014314.0
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292786311.0
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4284456608.0
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4286578432.0
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4291979550.0
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294934352.0
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4284782061.0
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294965468.0
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292613180.0
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190219.0
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278225803.0
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4290283019.0
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4289309097.0
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278215680.0
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4290623339.0
      });
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4287299723.0
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4283788079.0
      });
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294937600.0
      });
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4288230092.0
      });
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4287299584.0
      });
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4293498490.0
      });
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4287609999.0
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4282924427.0
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4281290575.0
      });
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278243025.0
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4287889619.0
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294907027.0
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278239231.0
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4285098345.0
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4280193279.0
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4289864226.0
      });
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294966000.0
      });
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4280453922.0
      });
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294902015.0
      });
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292664540.0
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294506751.0
      });
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294956800.0
      });
    },
    get C83() {
      return C[83] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292519200.0
      });
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4286611584.0
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278222848.0
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4289593135.0
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4293984240.0
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294928820.0
      });
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4291648604.0
      });
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4283105410.0
      });
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294967280.0
      });
    },
    get C92() {
      return C[92] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4293977740.0
      });
    },
    get C93() {
      return C[93] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4293322490.0
      });
    },
    get C94() {
      return C[94] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294963445.0
      });
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4286381056.0
      });
    },
    get C96() {
      return C[96] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294965965.0
      });
    },
    get C97() {
      return C[97] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4289583334.0
      });
    },
    get C98() {
      return C[98] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4293951616.0
      });
    },
    get C99() {
      return C[99] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292935679.0
      });
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294638290.0
      });
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292072403.0
      });
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4287688336.0
      });
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294948545.0
      });
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294942842.0
      });
    },
    get C105() {
      return C[105] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4280332970.0
      });
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4287090426.0
      });
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4286023833.0
      });
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4289774814.0
      });
    },
    get C109() {
      return C[109] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294967264.0
      });
    },
    get C110() {
      return C[110] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278255360.0
      });
    },
    get C111() {
      return C[111] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4281519410.0
      });
    },
    get C112() {
      return C[112] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294635750.0
      });
    },
    get C113() {
      return C[113] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4286578688.0
      });
    },
    get C114() {
      return C[114] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4284927402.0
      });
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190285.0
      });
    },
    get C116() {
      return C[116] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4290401747.0
      });
    },
    get C117() {
      return C[117] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4287852763.0
      });
    },
    get C118() {
      return C[118] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4282168177.0
      });
    },
    get C119() {
      return C[119] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4286277870.0
      });
    },
    get C120() {
      return C[120] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278254234.0
      });
    },
    get C121() {
      return C[121] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4282962380.0
      });
    },
    get C122() {
      return C[122] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4291237253.0
      });
    },
    get C123() {
      return C[123] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4279834992.0
      });
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294311930.0
      });
    },
    get C125() {
      return C[125] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294960353.0
      });
    },
    get C126() {
      return C[126] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294960309.0
      });
    },
    get C127() {
      return C[127] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294958765.0
      });
    },
    get C128() {
      return C[128] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190208.0
      });
    },
    get C129() {
      return C[129] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294833638.0
      });
    },
    get C130() {
      return C[130] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4286611456.0
      });
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4285238819.0
      });
    },
    get C132() {
      return C[132] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294944000.0
      });
    },
    get C133() {
      return C[133] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294919424.0
      });
    },
    get C134() {
      return C[134] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292505814.0
      });
    },
    get C135() {
      return C[135] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4293847210.0
      });
    },
    get C136() {
      return C[136] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4288215960.0
      });
    },
    get C137() {
      return C[137] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4289720046.0
      });
    },
    get C138() {
      return C[138] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292571283.0
      });
    },
    get C139() {
      return C[139] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294963157.0
      });
    },
    get C140() {
      return C[140] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294957753.0
      });
    },
    get C141() {
      return C[141] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4291659071.0
      });
    },
    get C142() {
      return C[142] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294951115.0
      });
    },
    get C143() {
      return C[143] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292714717.0
      });
    },
    get C144() {
      return C[144] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4289781990.0
      });
    },
    get C145() {
      return C[145] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4286578816.0
      });
    },
    get C146() {
      return C[146] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294901760.0
      });
    },
    get C147() {
      return C[147] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4290547599.0
      });
    },
    get C148() {
      return C[148] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4282477025.0
      });
    },
    get C149() {
      return C[149] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4287317267.0
      });
    },
    get C150() {
      return C[150] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294606962.0
      });
    },
    get C151() {
      return C[151] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294222944.0
      });
    },
    get C152() {
      return C[152] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4281240407.0
      });
    },
    get C153() {
      return C[153] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294964718.0
      });
    },
    get C154() {
      return C[154] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4288696877.0
      });
    },
    get C155() {
      return C[155] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4290822336.0
      });
    },
    get C156() {
      return C[156] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4287090411.0
      });
    },
    get C157() {
      return C[157] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4285160141.0
      });
    },
    get C158() {
      return C[158] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4285563024.0
      });
    },
    get C159() {
      return C[159] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294966010.0
      });
    },
    get C160() {
      return C[160] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278255487.0
      });
    },
    get C161() {
      return C[161] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4282811060.0
      });
    },
    get C162() {
      return C[162] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4291998860.0
      });
    },
    get C163() {
      return C[163] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278222976.0
      });
    },
    get C164() {
      return C[164] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292394968.0
      });
    },
    get C165() {
      return C[165] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294927175.0
      });
    },
    get C166() {
      return C[166] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 16777215
      });
    },
    get C167() {
      return C[167] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4282441936.0
      });
    },
    get C168() {
      return C[168] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4293821166.0
      });
    },
    get C169() {
      return C[169] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294303411.0
      });
    },
    get C170() {
      return C[170] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294967295.0
      });
    },
    get C171() {
      return C[171] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294309365.0
      });
    },
    get C172() {
      return C[172] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294967040.0
      });
    },
    get C173() {
      return C[173] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4288335154.0
      });
    },
    get C35() {
      return C[35] = dart.constMap(core.String, ui.Color, ["aliceblue", C[36] || CT.C36, "antiquewhite", C[37] || CT.C37, "aqua", C[38] || CT.C38, "aquamarine", C[39] || CT.C39, "azure", C[40] || CT.C40, "beige", C[41] || CT.C41, "bisque", C[42] || CT.C42, "black", C[34] || CT.C34, "blanchedalmond", C[43] || CT.C43, "blue", C[44] || CT.C44, "blueviolet", C[45] || CT.C45, "brown", C[46] || CT.C46, "burlywood", C[47] || CT.C47, "cadetblue", C[48] || CT.C48, "chartreuse", C[49] || CT.C49, "chocolate", C[50] || CT.C50, "coral", C[51] || CT.C51, "cornflowerblue", C[52] || CT.C52, "cornsilk", C[53] || CT.C53, "crimson", C[54] || CT.C54, "cyan", C[38] || CT.C38, "darkblue", C[55] || CT.C55, "darkcyan", C[56] || CT.C56, "darkgoldenrod", C[57] || CT.C57, "darkgray", C[58] || CT.C58, "darkgreen", C[59] || CT.C59, "darkgrey", C[58] || CT.C58, "darkkhaki", C[60] || CT.C60, "darkmagenta", C[61] || CT.C61, "darkolivegreen", C[62] || CT.C62, "darkorange", C[63] || CT.C63, "darkorchid", C[64] || CT.C64, "darkred", C[65] || CT.C65, "darksalmon", C[66] || CT.C66, "darkseagreen", C[67] || CT.C67, "darkslateblue", C[68] || CT.C68, "darkslategray", C[69] || CT.C69, "darkslategrey", C[69] || CT.C69, "darkturquoise", C[70] || CT.C70, "darkviolet", C[71] || CT.C71, "deeppink", C[72] || CT.C72, "deepskyblue", C[73] || CT.C73, "dimgray", C[74] || CT.C74, "dimgrey", C[74] || CT.C74, "dodgerblue", C[75] || CT.C75, "firebrick", C[76] || CT.C76, "floralwhite", C[77] || CT.C77, "forestgreen", C[78] || CT.C78, "fuchsia", C[79] || CT.C79, "gainsboro", C[80] || CT.C80, "ghostwhite", C[81] || CT.C81, "gold", C[82] || CT.C82, "goldenrod", C[83] || CT.C83, "gray", C[84] || CT.C84, "grey", C[84] || CT.C84, "green", C[85] || CT.C85, "greenyellow", C[86] || CT.C86, "honeydew", C[87] || CT.C87, "hotpink", C[88] || CT.C88, "indianred", C[89] || CT.C89, "indigo", C[90] || CT.C90, "ivory", C[91] || CT.C91, "khaki", C[92] || CT.C92, "lavender", C[93] || CT.C93, "lavenderblush", C[94] || CT.C94, "lawngreen", C[95] || CT.C95, "lemonchiffon", C[96] || CT.C96, "lightblue", C[97] || CT.C97, "lightcoral", C[98] || CT.C98, "lightcyan", C[99] || CT.C99, "lightgoldenrodyellow", C[100] || CT.C100, "lightgray", C[101] || CT.C101, "lightgreen", C[102] || CT.C102, "lightgrey", C[101] || CT.C101, "lightpink", C[103] || CT.C103, "lightsalmon", C[104] || CT.C104, "lightseagreen", C[105] || CT.C105, "lightskyblue", C[106] || CT.C106, "lightslategray", C[107] || CT.C107, "lightslategrey", C[107] || CT.C107, "lightsteelblue", C[108] || CT.C108, "lightyellow", C[109] || CT.C109, "lime", C[110] || CT.C110, "limegreen", C[111] || CT.C111, "linen", C[112] || CT.C112, "magenta", C[79] || CT.C79, "maroon", C[113] || CT.C113, "mediumaquamarine", C[114] || CT.C114, "mediumblue", C[115] || CT.C115, "mediumorchid", C[116] || CT.C116, "mediumpurple", C[117] || CT.C117, "mediumseagreen", C[118] || CT.C118, "mediumslateblue", C[119] || CT.C119, "mediumspringgreen", C[120] || CT.C120, "mediumturquoise", C[121] || CT.C121, "mediumvioletred", C[122] || CT.C122, "midnightblue", C[123] || CT.C123, "mintcream", C[124] || CT.C124, "mistyrose", C[125] || CT.C125, "moccasin", C[126] || CT.C126, "navajowhite", C[127] || CT.C127, "navy", C[128] || CT.C128, "oldlace", C[129] || CT.C129, "olive", C[130] || CT.C130, "olivedrab", C[131] || CT.C131, "orange", C[132] || CT.C132, "orangered", C[133] || CT.C133, "orchid", C[134] || CT.C134, "palegoldenrod", C[135] || CT.C135, "palegreen", C[136] || CT.C136, "paleturquoise", C[137] || CT.C137, "palevioletred", C[138] || CT.C138, "papayawhip", C[139] || CT.C139, "peachpuff", C[140] || CT.C140, "peru", C[141] || CT.C141, "pink", C[142] || CT.C142, "plum", C[143] || CT.C143, "powderblue", C[144] || CT.C144, "purple", C[145] || CT.C145, "red", C[146] || CT.C146, "rosybrown", C[147] || CT.C147, "royalblue", C[148] || CT.C148, "saddlebrown", C[149] || CT.C149, "salmon", C[150] || CT.C150, "sandybrown", C[151] || CT.C151, "seagreen", C[152] || CT.C152, "seashell", C[153] || CT.C153, "sienna", C[154] || CT.C154, "silver", C[155] || CT.C155, "skyblue", C[156] || CT.C156, "slateblue", C[157] || CT.C157, "slategray", C[158] || CT.C158, "slategrey", C[158] || CT.C158, "snow", C[159] || CT.C159, "springgreen", C[160] || CT.C160, "steelblue", C[161] || CT.C161, "tan", C[162] || CT.C162, "teal", C[163] || CT.C163, "thistle", C[164] || CT.C164, "tomato", C[165] || CT.C165, "transparent", C[166] || CT.C166, "turquoise", C[167] || CT.C167, "violet", C[168] || CT.C168, "wheat", C[169] || CT.C169, "white", C[170] || CT.C170, "whitesmoke", C[171] || CT.C171, "yellow", C[172] || CT.C172, "yellowgreen", C[173] || CT.C173]);
    },
    get C174() {
      return C[174] = dart.const({
        __proto__: theme.SvgTheme.prototype,
        [SvgTheme_xHeight]: 7,
        [SvgTheme_fontSize]: 14,
        [SvgTheme_currentColor]: C[34] || CT.C34
      });
    },
    get C175() {
      return C[175] = dart.const({
        __proto__: box_fit.BoxFit.prototype,
        [_Enum__name]: "contain",
        [_Enum_index]: 1
      });
    },
    get C176() {
      return C[176] = dart.const({
        __proto__: alignment.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: 0
      });
    },
    get C177() {
      return C[177] = dart.const({
        __proto__: ui.Clip.prototype,
        [_Enum__name]: "hardEdge",
        [_Enum_index]: 1
      });
    },
    get C178() {
      return C[178] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_Enum__name]: "srcIn",
        [_Enum_index]: 5
      });
    },
    get C179() {
      return C[179] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "SvgPicture",
        [_Location_column]: 9,
        [_Location_line]: 231,
        [_Location_file]: "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-1.1.6/lib/svg.dart"
      });
    },
    get C180() {
      return C[180] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "SvgPicture",
        [_Location_column]: 3,
        [_Location_line]: 329,
        [_Location_file]: "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-1.1.6/lib/svg.dart"
      });
    },
    get C181() {
      return C[181] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "SvgPicture",
        [_Location_column]: 3,
        [_Location_line]: 394,
        [_Location_file]: "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-1.1.6/lib/svg.dart"
      });
    },
    get C182() {
      return C[182] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "SvgPicture",
        [_Location_column]: 3,
        [_Location_line]: 455,
        [_Location_file]: "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-1.1.6/lib/svg.dart"
      });
    },
    get C183() {
      return C[183] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "SvgPicture",
        [_Location_column]: 3,
        [_Location_line]: 511,
        [_Location_file]: "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-1.1.6/lib/svg.dart"
      });
    },
    get C184() {
      return C[184] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "SvgPicture",
        [_Location_column]: 3,
        [_Location_line]: 567,
        [_Location_file]: "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-1.1.6/lib/svg.dart"
      });
    },
    get C186() {
      return C[186] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "LimitedBox",
        [_Location_column]: 35,
        [_Location_line]: 599,
        [_Location_file]: "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-1.1.6/lib/svg.dart"
      });
    },
    get C185() {
      return C[185] = dart.const({
        __proto__: basic.LimitedBox.prototype,
        [Widget__location]: C[186] || CT.C186,
        [Widget_key]: null,
        [SingleChildRenderObjectWidget_child]: null,
        [LimitedBox_maxHeight]: 1 / 0,
        [LimitedBox_maxWidth]: 1 / 0
      });
    },
    get C187() {
      return C[187] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "RawPicture",
        [_Location_column]: 20,
        [_Location_line]: 890,
        [_Location_file]: "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-1.1.6/lib/svg.dart"
      });
    },
    get C188() {
      return C[188] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "SizedBox",
        [_Location_column]: 27,
        [_Location_line]: 888,
        [_Location_file]: "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-1.1.6/lib/svg.dart"
      });
    },
    get C189() {
      return C[189] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "FittedBox",
        [_Location_column]: 16,
        [_Location_line]: 884,
        [_Location_file]: "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-1.1.6/lib/svg.dart"
      });
    },
    get C190() {
      return C[190] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "SizedBox",
        [_Location_column]: 15,
        [_Location_line]: 881,
        [_Location_file]: "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-1.1.6/lib/svg.dart"
      });
    },
    get C191() {
      return C[191] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "ColorFiltered",
        [_Location_column]: 17,
        [_Location_line]: 901,
        [_Location_file]: "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-1.1.6/lib/svg.dart"
      });
    },
    get C192() {
      return C[192] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "Semantics",
        [_Location_column]: 15,
        [_Location_line]: 912,
        [_Location_file]: "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-1.1.6/lib/svg.dart"
      });
    },
    get C193() {
      return C[193] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "SizedBox",
        [_Location_column]: 14,
        [_Location_line]: 925,
        [_Location_file]: "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-1.1.6/lib/svg.dart"
      });
    },
    get C195() {
      return C[195] = dart.fn(parsers._parseSvgMatrix, T$.StringNAndMatrix4ToMatrix4());
    },
    get C196() {
      return C[196] = dart.fn(parsers._parseSvgTranslate, T$.StringNAndMatrix4ToMatrix4());
    },
    get C197() {
      return C[197] = dart.fn(parsers._parseSvgScale, T$.StringNAndMatrix4ToMatrix4());
    },
    get C198() {
      return C[198] = dart.fn(parsers._parseSvgRotate, T$.StringNAndMatrix4ToMatrix4());
    },
    get C199() {
      return C[199] = dart.fn(parsers._parseSvgSkewX, T$.StringNAndMatrix4ToMatrix4());
    },
    get C200() {
      return C[200] = dart.fn(parsers._parseSvgSkewY, T$.StringNAndMatrix4ToMatrix4());
    },
    get C194() {
      return C[194] = dart.constMap(core.String, T$.StringNAndMatrix4ToMatrix4(), ["matrix", C[195] || CT.C195, "translate", C[196] || CT.C196, "scale", C[197] || CT.C197, "rotate", C[198] || CT.C198, "skewX", C[199] || CT.C199, "skewY", C[200] || CT.C200]);
    },
    get C201() {
      return C[201] = dart.const({
        __proto__: ui.ParagraphConstraints.prototype,
        [ParagraphConstraints_width]: 1 / 0
      });
    },
    get C203() {
      return C[203] = dart.const({
        __proto__: ui.PaintingStyle.prototype,
        [_Enum__name]: "stroke",
        [_Enum_index]: 1
      });
    },
    get C204() {
      return C[204] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 0
      });
    },
    get C202() {
      return C[202] = dart.const({
        __proto__: vector_drawable.DrawablePaint.prototype,
        [DrawablePaint_strokeWidth]: null,
        [DrawablePaint_strokeMiterLimit]: null,
        [DrawablePaint_strokeJoin]: null,
        [DrawablePaint_strokeCap]: null,
        [DrawablePaint_style]: C[203] || CT.C203,
        [DrawablePaint_maskFilter]: null,
        [DrawablePaint_filterQuality]: null,
        [DrawablePaint_isAntiAlias]: null,
        [DrawablePaint_colorFilter]: null,
        [DrawablePaint_blendMode]: null,
        [DrawablePaint_shader]: null,
        [DrawablePaint_color]: C[204] || CT.C204
      });
    },
    get C205() {
      return C[205] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "RawPicture",
        [_Location_column]: 9,
        [_Location_line]: 12,
        [_Location_file]: "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-1.1.6/lib/src/render_picture.dart"
      });
    },
    get C206() {
      return C[206] = dart.constList([], core.double);
    },
    get C207() {
      return C[207] = dart.const({
        __proto__: vector_drawable.DrawablePaint.prototype,
        [DrawablePaint_strokeWidth]: null,
        [DrawablePaint_strokeMiterLimit]: null,
        [DrawablePaint_strokeJoin]: null,
        [DrawablePaint_strokeCap]: null,
        [DrawablePaint_style]: null,
        [DrawablePaint_maskFilter]: null,
        [DrawablePaint_filterQuality]: null,
        [DrawablePaint_isAntiAlias]: null,
        [DrawablePaint_colorFilter]: null,
        [DrawablePaint_blendMode]: null,
        [DrawablePaint_shader]: null,
        [DrawablePaint_color]: null
      });
    },
    get C209() {
      return C[209] = dart.const({
        __proto__: vector_drawable.DrawableTextAnchorPosition.prototype,
        [_Enum__name]: "start",
        [_Enum_index]: 0
      });
    },
    get C210() {
      return C[210] = dart.const({
        __proto__: vector_drawable.DrawableTextAnchorPosition.prototype,
        [_Enum__name]: "middle",
        [_Enum_index]: 1
      });
    },
    get C211() {
      return C[211] = dart.const({
        __proto__: vector_drawable.DrawableTextAnchorPosition.prototype,
        [_Enum__name]: "end",
        [_Enum_index]: 2
      });
    },
    get C208() {
      return C[208] = dart.constList([C[209] || CT.C209, C[210] || CT.C210, C[211] || CT.C211], vector_drawable.DrawableTextAnchorPosition);
    },
    get C213() {
      return C[213] = dart.const({
        __proto__: vector_drawable.GradientUnitMode.prototype,
        [_Enum__name]: "objectBoundingBox",
        [_Enum_index]: 0
      });
    },
    get C214() {
      return C[214] = dart.const({
        __proto__: vector_drawable.GradientUnitMode.prototype,
        [_Enum__name]: "userSpaceOnUse",
        [_Enum_index]: 1
      });
    },
    get C212() {
      return C[212] = dart.constList([C[213] || CT.C213, C[214] || CT.C214], vector_drawable.GradientUnitMode);
    },
    get C215() {
      return C[215] = dart.const({
        __proto__: ui.TileMode.prototype,
        [_Enum__name]: "clamp",
        [_Enum_index]: 0
      });
    },
    get C216() {
      return C[216] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    },
    get C217() {
      return C[217] = dart.const({
        __proto__: vector_drawable.CacheCompatibilityTester.prototype
      });
    },
    get C219() {
      return C[219] = dart.constList([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2126, 0.7152, 0.0722, 0, 0], core.double);
    },
    get C218() {
      return C[218] = dart.const({
        __proto__: _engine.CkMatrixColorFilter.prototype,
        [CkMatrixColorFilter_matrix]: C[219] || CT.C219
      });
    },
    get C220() {
      return C[220] = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 1 / 0,
        [OffsetBase__dx]: 1 / 0
      });
    },
    get C221() {
      return C[221] = dart.const({
        __proto__: picture_provider.PictureConfiguration.prototype,
        [colorFilter$1]: null,
        [platform$]: null,
        [viewBox$0]: null,
        [textDirection$]: null,
        [locale$0]: null,
        [bundle$]: null
      });
    }
  }, false);
  var C = Array(222).fill(void 0);
  var I = [
    "package:flutter_svg/src/svg/parser_state.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-1.1.6/lib/src/svg/parser_state.dart",
    "package:flutter_svg/src/vector_drawable.dart",
    "package:flutter_svg/parser.dart",
    "package:flutter_svg/svg.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-1.1.6/lib/svg.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-1.1.6/lib/src/svg/parsers.dart",
    "package:flutter_svg/src/render_picture.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-1.1.6/lib/src/render_picture.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-1.1.6/lib/src/vector_drawable.dart",
    "package:flutter_svg/src/picture_stream.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-1.1.6/lib/src/picture_stream.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-1.1.6/lib/src/picture_cache.dart",
    "package:flutter_svg/src/picture_cache.dart",
    "package:flutter_svg/src/picture_provider.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-1.1.6/lib/src/picture_provider.dart"
  ];
  var style$ = dart.privateName(parser_state, "_TextInfo.style");
  var offset$ = dart.privateName(parser_state, "_TextInfo.offset");
  var transform$ = dart.privateName(parser_state, "_TextInfo.transform");
  parser_state._TextInfo = class _TextInfo extends core.Object {
    get style() {
      return this[style$];
    }
    set style(value) {
      super.style = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    get transform() {
      return this[transform$];
    }
    set transform(value) {
      super.transform = value;
    }
    static ['_#new#tearOff'](style, offset, transform) {
      return new parser_state._TextInfo.new(style, offset, transform);
    }
    toString() {
      return dart.str(this[$runtimeType]) + "{" + dart.str(this.offset) + ", " + dart.str(this.style) + ", " + dart.str(this.transform) + "}";
    }
  };
  (parser_state._TextInfo.new = function(style, offset, transform) {
    this[style$] = style;
    this[offset$] = offset;
    this[transform$] = transform;
    ;
  }).prototype = parser_state._TextInfo.prototype;
  dart.addTypeTests(parser_state._TextInfo);
  dart.addTypeCaches(parser_state._TextInfo);
  dart.setLibraryUri(parser_state._TextInfo, I[0]);
  dart.setFieldSignature(parser_state._TextInfo, () => ({
    __proto__: dart.getFields(parser_state._TextInfo.__proto__),
    style: dart.finalFieldType(vector_drawable.DrawableStyle),
    offset: dart.finalFieldType(ui.Offset),
    transform: dart.finalFieldType(dart.nullable(vector_math_64.Matrix4))
  }));
  dart.defineExtensionMethods(parser_state._TextInfo, ['toString']);
  var _root = dart.privateName(parser_state, "_root");
  var _key$ = dart.privateName(parser_state, "_key");
  var _parentDrawables = dart.privateName(parser_state, "_parentDrawables");
  var _definitions = dart.privateName(parser_state, "_definitions");
  var _compatibilityTester = dart.privateName(parser_state, "_compatibilityTester");
  var _currentStartElement = dart.privateName(parser_state, "_currentStartElement");
  var _readSubtree = dart.privateName(parser_state, "_readSubtree");
  parser_state._Elements = class _Elements extends core.Object {
    static svg(parserState, warningsAsErrors) {
      let viewBox = parserState.parseViewBox();
      let id = parserState.attribute("id", {def: ""});
      let color = parserState.parseColor(parserState.attribute("color", {def: null}), {currentColor: parserState.theme.currentColor});
      if (parserState[_root] != null) {
        let errorMessage = "Unsupported nested <svg> element.";
        if (warningsAsErrors) {
          dart.throw(new core.UnsupportedError.new(errorMessage));
        }
        assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: new core.UnsupportedError.new(errorMessage), informationCollector: dart.fn(() => (() => {
            let t0 = T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorDescription.new("The root <svg> element contained an unsupported nested SVG element.")]);
            if (parserState[_key$] != null) t0.push(new assertions.ErrorDescription.new(""));
            if (parserState[_key$] != null) t0.push(new (T$.DiagnosticsPropertyOfString()).new("Picture key", parserState[_key$]));
            return t0;
          })(), T$.VoidToListOfDiagnosticsNode()), library: "SVG", context: new assertions.ErrorDescription.new("in _Element.svg")}));
        parserState[_parentDrawables].addLast(new parser_state._SvgGroupTuple.new("svg", new vector_drawable.DrawableGroup.new(id, T$.JSArrayOfDrawable().of([]), parserState.parseStyle(dart.nullCheck(viewBox).viewBoxRect, null, {currentColor: color}), {color: color})));
        return null;
      }
      parserState[_root] = new vector_drawable.DrawableRoot.new(id, dart.nullCheck(viewBox), T$.JSArrayOfDrawable().of([]), parserState[_definitions], parserState.parseStyle(viewBox.viewBoxRect, null, {currentColor: color}), {color: color, compatibilityTester: parserState[_compatibilityTester]});
      parserState.addGroup(dart.nullCheck(parserState[_currentStartElement]), parserState[_root]);
      return null;
    }
    static g(parserState, warningsAsErrors) {
      let t1, t1$, t1$0, t1$1;
      if ((t1 = parserState[_currentStartElement], t1 == null ? null : t1.isSelfClosing) === true) {
        return null;
      }
      let parent = dart.nullCheck(parserState.currentGroup);
      let color = (t1$0 = parserState.parseColor(parserState.attribute("color", {def: null}), {currentColor: (t1$ = parent.color, t1$ == null ? parserState.theme.currentColor : t1$)}), t1$0 == null ? parent.color : t1$0);
      let group = new vector_drawable.DrawableGroup.new(parserState.attribute("id", {def: ""}), T$.JSArrayOfDrawable().of([]), parserState.parseStyle(parserState.rootBounds, parent.style, {currentColor: color}), {transform: (t1$1 = parsers.parseTransform(parserState.attribute("transform")), t1$1 == null ? null : t1$1.storage), color: color});
      dart.nullCheck(parent.children)[$add](group);
      parserState.addGroup(dart.nullCheck(parserState[_currentStartElement]), group);
      return null;
    }
    static symbol(parserState, warningsAsErrors) {
      let t1, t1$, t1$0;
      let parent = dart.nullCheck(parserState.currentGroup);
      let color = (t1$ = parserState.parseColor(parserState.attribute("color", {def: null}), {currentColor: (t1 = parent.color, t1 == null ? parserState.theme.currentColor : t1)}), t1$ == null ? parent.color : t1$);
      let group = new vector_drawable.DrawableGroup.new(parserState.attribute("id", {def: ""}), T$.JSArrayOfDrawable().of([]), parserState.parseStyle(parserState.rootBounds, parent.style, {currentColor: color}), {transform: (t1$0 = parsers.parseTransform(parserState.attribute("transform")), t1$0 == null ? null : t1$0.storage), color: color});
      parserState.addGroup(dart.nullCheck(parserState[_currentStartElement]), group);
      return null;
    }
    static use(parserState, warningsAsErrors) {
      let t1;
      let parent = parserState.currentGroup;
      let xlinkHref = dart.nullCheck(xml.getHrefAttribute(parserState.attributes));
      if (xlinkHref[$isEmpty]) {
        return null;
      }
      let style = parserState.parseStyle(parserState.rootBounds, dart.nullCheck(parent).style, {currentColor: parent.color});
      let transform = (t1 = parsers.parseTransform(parserState.attribute("transform")), t1 == null ? vector_math_64.Matrix4.identity() : t1);
      transform.translate(parserState.parseDoubleWithUnits(parserState.attribute("x", {def: "0"})), dart.nullCheck(parserState.parseDoubleWithUnits(parserState.attribute("y", {def: "0"}))));
      let ref = dart.nullCheck(parserState[_definitions].getDrawable("url(" + xlinkHref + ")"));
      let group = new vector_drawable.DrawableGroup.new(parserState.attribute("id", {def: ""}), T$.JSArrayOfDrawable().of([ref.mergeStyle(style)]), style, {transform: transform.storage});
      parserState.checkForIri(group);
      dart.nullCheck(parent.children)[$add](group);
      return null;
    }
    static parseStops(parserState, colors, offsets) {
      let t1, t1$, t1$0;
      let parent = dart.nullCheck(parserState.currentGroup);
      for (let event of parserState[_readSubtree]()) {
        if (end_element.XmlEndElementEvent.is(event)) {
          continue;
        }
        if (start_element.XmlStartElementEvent.is(event)) {
          let rawOpacity = dart.nullCheck(xml.getAttribute(parserState.attributes, "stop-opacity", {def: "1"}));
          let stopColor = (t1$0 = (t1$ = parserState.parseColor(xml.getAttribute(parserState.attributes, "stop-color"), {currentColor: (t1 = parent.color, t1 == null ? parserState.theme.currentColor : t1)}), t1$ == null ? parent.color : t1$), t1$0 == null ? parser_state.colorBlack : t1$0);
          colors[$add](stopColor.withOpacity(dart.nullCheck(numbers.parseDouble(rawOpacity))));
          let rawOffset = dart.nullCheck(xml.getAttribute(parserState.attributes, "offset", {def: "0%"}));
          offsets[$add](parsers.parseDecimalOrPercentage(rawOffset));
        }
      }
      return null;
    }
    static radialGradient(parserState, warningsAsErrors) {
      let t16;
      let gradientUnits = xml.getAttribute(parserState.attributes, "gradientUnits", {def: null});
      let isObjectBoundingBox = gradientUnits !== "userSpaceOnUse";
      let rawCx = parserState.attribute("cx", {def: "50%"});
      let rawCy = parserState.attribute("cy", {def: "50%"});
      let rawR = parserState.attribute("r", {def: "50%"});
      let rawFx = parserState.attribute("fx", {def: rawCx});
      let rawFy = parserState.attribute("fy", {def: rawCy});
      let spreadMethod = parserState.parseTileMode();
      let id = parserState.buildUrlIri();
      let originalTransform = parsers.parseTransform(parserState.attribute("gradientTransform", {def: null}));
      let offsets = T$.JSArrayOfdouble().of([]);
      let colors = T$.JSArrayOfColor().of([]);
      if (dart.nullCheck(parserState[_currentStartElement]).isSelfClosing) {
        let href = xml.getHrefAttribute(parserState.attributes);
        let ref = parserState[_definitions].getGradient(vector_drawable.DrawableGradient, "url(" + dart.str(href) + ")");
        if (ref == null) {
          errors.reportMissingDef(parserState[_key$], href, "radialGradient");
        } else {
          if (gradientUnits == null) {
            isObjectBoundingBox = ref.unitMode === vector_drawable.GradientUnitMode.objectBoundingBox;
          }
          colors[$addAll](dart.nullCheck(ref.colors));
          offsets[$addAll](dart.nullCheck(ref.offsets));
        }
      } else {
        parser_state._Elements.parseStops(parserState, colors, offsets);
      }
      let cx = null;
      function cx$35get() {
        let t2;
        t2 = cx;
        return t2 == null ? dart.throw(new _internal.LateError.localNI("cx")) : t2;
      }
      dart.fn(cx$35get, T$.VoidTodouble());
      function cx$35set(cx$35param) {
        return cx = cx$35param;
      }
      dart.fn(cx$35set, T$.doubleTodynamic());
      let cy = null;
      function cy$35get() {
        let t5;
        t5 = cy;
        return t5 == null ? dart.throw(new _internal.LateError.localNI("cy")) : t5;
      }
      dart.fn(cy$35get, T$.VoidTodouble());
      function cy$35set(cy$35param) {
        return cy = cy$35param;
      }
      dart.fn(cy$35set, T$.doubleTodynamic());
      let r = null;
      function r$35get() {
        let t8;
        t8 = r;
        return t8 == null ? dart.throw(new _internal.LateError.localNI("r")) : t8;
      }
      dart.fn(r$35get, T$.VoidTodouble());
      function r$35set(r$35param) {
        return r = r$35param;
      }
      dart.fn(r$35set, T$.doubleTodynamic());
      let fx = null;
      function fx$35get() {
        let t11;
        t11 = fx;
        return t11 == null ? dart.throw(new _internal.LateError.localNI("fx")) : t11;
      }
      dart.fn(fx$35get, T$.VoidTodouble());
      function fx$35set(fx$35param) {
        return fx = fx$35param;
      }
      dart.fn(fx$35set, T$.doubleTodynamic());
      let fy = null;
      function fy$35get() {
        let t14;
        t14 = fy;
        return t14 == null ? dart.throw(new _internal.LateError.localNI("fy")) : t14;
      }
      dart.fn(fy$35get, T$.VoidTodouble());
      function fy$35set(fy$35param) {
        return fy = fy$35param;
      }
      dart.fn(fy$35set, T$.doubleTodynamic());
      if (isObjectBoundingBox) {
        cx$35set(parsers.parseDecimalOrPercentage(dart.nullCheck(rawCx)));
        cy$35set(parsers.parseDecimalOrPercentage(dart.nullCheck(rawCy)));
        r$35set(parsers.parseDecimalOrPercentage(dart.nullCheck(rawR)));
        fx$35set(parsers.parseDecimalOrPercentage(dart.nullCheck(rawFx)));
        fy$35set(parsers.parseDecimalOrPercentage(dart.nullCheck(rawFy)));
      } else {
        cx$35set(parsers.isPercentage(dart.nullCheck(rawCx)) ? parsers.parsePercentage(rawCx) * parserState.rootBounds.width + parserState.rootBounds.left : dart.nullCheck(parserState.parseDoubleWithUnits(rawCx)));
        cy$35set(parsers.isPercentage(dart.nullCheck(rawCy)) ? parsers.parsePercentage(rawCy) * parserState.rootBounds.height + parserState.rootBounds.top : dart.nullCheck(parserState.parseDoubleWithUnits(rawCy)));
        r$35set(parsers.isPercentage(dart.nullCheck(rawR)) ? parsers.parsePercentage(rawR) * ((parserState.rootBounds.height + parserState.rootBounds.width) / 2) : dart.nullCheck(parserState.parseDoubleWithUnits(rawR)));
        fx$35set(parsers.isPercentage(dart.nullCheck(rawFx)) ? parsers.parsePercentage(rawFx) * parserState.rootBounds.width + parserState.rootBounds.left : dart.nullCheck(parserState.parseDoubleWithUnits(rawFx)));
        fy$35set(parsers.isPercentage(dart.nullCheck(rawFy)) ? parsers.parsePercentage(rawFy) * parserState.rootBounds.height + parserState.rootBounds.top : dart.nullCheck(parserState.parseDoubleWithUnits(rawFy)));
      }
      parserState[_definitions].addGradient(id, new vector_drawable.DrawableRadialGradient.new({center: new ui.Offset.new(cx$35get(), cy$35get()), radius: r$35get(), focal: fx$35get() !== cx$35get() || fy$35get() !== cy$35get() ? new ui.Offset.new(fx$35get(), fy$35get()) : new ui.Offset.new(cx$35get(), cy$35get()), focalRadius: 0.0, colors: colors, offsets: offsets, unitMode: isObjectBoundingBox ? vector_drawable.GradientUnitMode.objectBoundingBox : vector_drawable.GradientUnitMode.userSpaceOnUse, spreadMethod: spreadMethod, transform: (t16 = originalTransform, t16 == null ? null : t16.storage)}));
      return null;
    }
    static linearGradient(parserState, warningsAsErrors) {
      let t16;
      let gradientUnits = parserState.attribute("gradientUnits");
      let isObjectBoundingBox = gradientUnits !== "userSpaceOnUse";
      let x1 = dart.nullCheck(parserState.attribute("x1", {def: "0%"}));
      let x2 = dart.nullCheck(parserState.attribute("x2", {def: "100%"}));
      let y1 = dart.nullCheck(parserState.attribute("y1", {def: "0%"}));
      let y2 = dart.nullCheck(parserState.attribute("y2", {def: "0%"}));
      let id = parserState.buildUrlIri();
      let originalTransform = parsers.parseTransform(parserState.attribute("gradientTransform"));
      let spreadMethod = parserState.parseTileMode();
      let colors = T$.JSArrayOfColor().of([]);
      let offsets = T$.JSArrayOfdouble().of([]);
      if (dart.nullCheck(parserState[_currentStartElement]).isSelfClosing) {
        let href = xml.getHrefAttribute(parserState.attributes);
        let ref = parserState[_definitions].getGradient(vector_drawable.DrawableGradient, "url(" + dart.str(href) + ")");
        if (ref == null) {
          errors.reportMissingDef(parserState[_key$], href, "linearGradient");
        } else {
          if (gradientUnits == null) {
            isObjectBoundingBox = ref.unitMode === vector_drawable.GradientUnitMode.objectBoundingBox;
          }
          colors[$addAll](dart.nullCheck(ref.colors));
          offsets[$addAll](dart.nullCheck(ref.offsets));
        }
      } else {
        parser_state._Elements.parseStops(parserState, colors, offsets);
      }
      let fromOffset = null;
      let toOffset = null;
      if (isObjectBoundingBox) {
        fromOffset = new ui.Offset.new(parsers.parseDecimalOrPercentage(x1), parsers.parseDecimalOrPercentage(y1));
        toOffset = new ui.Offset.new(parsers.parseDecimalOrPercentage(x2), parsers.parseDecimalOrPercentage(y2));
      } else {
        fromOffset = new ui.Offset.new(parsers.isPercentage(x1) ? parsers.parsePercentage(x1) * parserState.rootBounds.width + parserState.rootBounds.left : dart.nullCheck(parserState.parseDoubleWithUnits(x1)), parsers.isPercentage(y1) ? parsers.parsePercentage(y1) * parserState.rootBounds.height + parserState.rootBounds.top : dart.nullCheck(parserState.parseDoubleWithUnits(y1)));
        toOffset = new ui.Offset.new(parsers.isPercentage(x2) ? parsers.parsePercentage(x2) * parserState.rootBounds.width + parserState.rootBounds.left : dart.nullCheck(parserState.parseDoubleWithUnits(x2)), parsers.isPercentage(y2) ? parsers.parsePercentage(y2) * parserState.rootBounds.height + parserState.rootBounds.top : dart.nullCheck(parserState.parseDoubleWithUnits(y2)));
      }
      parserState[_definitions].addGradient(id, new vector_drawable.DrawableLinearGradient.new({from: fromOffset, to: toOffset, colors: colors, offsets: offsets, spreadMethod: spreadMethod, unitMode: isObjectBoundingBox ? vector_drawable.GradientUnitMode.objectBoundingBox : vector_drawable.GradientUnitMode.userSpaceOnUse, transform: (t16 = originalTransform, t16 == null ? null : t16.storage)}));
      return null;
    }
    static clipPath(parserState, warningsAsErrors) {
      let id = parserState.buildUrlIri();
      let paths = T$.JSArrayOfPath().of([]);
      let currentPath = null;
      for (let event of parserState[_readSubtree]()) {
        if (end_element.XmlEndElementEvent.is(event)) {
          continue;
        }
        if (start_element.XmlStartElementEvent.is(event)) {
          let pathFn = parser_state._svgPathFuncs[$_get](event.name);
          if (pathFn != null) {
            let nextPath = dart.nullCheck(parserState.applyTransformIfNeeded(pathFn(parserState)));
            nextPath.fillType = dart.nullCheck(parserState.parseFillRule("clip-rule"));
            if (currentPath != null && nextPath.fillType !== currentPath.fillType) {
              currentPath = nextPath;
              paths[$add](currentPath);
            } else if (currentPath == null) {
              currentPath = nextPath;
              paths[$add](currentPath);
            } else {
              currentPath.addPath(nextPath, ui.Offset.zero);
            }
          } else if (event.name === "use") {
            let xlinkHref = xml.getHrefAttribute(parserState.attributes);
            let definitionDrawable = parserState[_definitions].getDrawable("url(" + dart.str(xlinkHref) + ")");
            function extractPathsFromDrawable(target) {
              if (vector_drawable.DrawableShape.is(target)) {
                paths[$add](target.path);
              } else if (vector_drawable.DrawableGroup.is(target)) {
                dart.nullCheck(target.children)[$forEach](extractPathsFromDrawable);
              }
            }
            dart.fn(extractPathsFromDrawable, T$.DrawableNTovoid());
            extractPathsFromDrawable(definitionDrawable);
          } else {
            let errorMessage = "Unsupported clipPath child " + event.name;
            if (warningsAsErrors) {
              dart.throw(new core.UnsupportedError.new(errorMessage));
            }
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: new core.UnsupportedError.new(errorMessage), informationCollector: dart.fn(() => (() => {
                let t16 = T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorDescription.new("The <clipPath> element contained an unsupported child " + event.name)]);
                if (parserState[_key$] != null) t16.push(new assertions.ErrorDescription.new(""));
                if (parserState[_key$] != null) t16.push(new (T$.DiagnosticsPropertyOfString()).new("Picture key", parserState[_key$]));
                return t16;
              })(), T$.VoidToListOfDiagnosticsNode()), library: "SVG", context: new assertions.ErrorDescription.new("in _Element.clipPath")}));
          }
        }
      }
      parserState[_definitions].addClipPath(id, paths);
      return null;
    }
    static image(parserState, warningsAsErrors) {
      return async.async(dart.void, function* image() {
        let t17, t17$, t17$0;
        let href = xml.getHrefAttribute(parserState.attributes);
        if (href == null) {
          return;
        }
        let offset = new ui.Offset.new(dart.nullCheck(parserState.parseDoubleWithUnits(parserState.attribute("x", {def: "0"}))), dart.nullCheck(parserState.parseDoubleWithUnits(parserState.attribute("y", {def: "0"}))));
        let image = (yield parsers.resolveImage(href));
        let size = new ui.Size.new((t17 = parserState.parseDoubleWithUnits(parserState.attribute("width")), t17 == null ? image.width[$toDouble]() : t17), (t17$ = parserState.parseDoubleWithUnits(parserState.attribute("height")), t17$ == null ? image.height[$toDouble]() : t17$));
        let parent = dart.nullCheck(parserState[_parentDrawables][$last].drawable);
        let parentStyle = parent.style;
        let drawable = new vector_drawable.DrawableRasterImage.new(parserState.attribute("id", {def: ""}), image, offset, parserState.parseStyle(parserState.rootBounds, parentStyle, {currentColor: parent.color}), {size: size, transform: (t17$0 = parsers.parseTransform(parserState.attribute("transform")), t17$0 == null ? null : t17$0.storage)});
        parserState.checkForIri(drawable);
        dart.nullCheck(dart.nullCheck(parserState.currentGroup).children)[$add](drawable);
      });
    }
    static text(parserState, warningsAsErrors) {
      return async.async(dart.void, function* text$() {
        if (!(parserState !== null)) dart.assertFailed(null, I[1], 551, 12, "parserState != null");
        if (!(parserState.currentGroup != null)) dart.assertFailed(null, I[1], 552, 12, "parserState.currentGroup != null");
        if (dart.nullCheck(parserState[_currentStartElement]).isSelfClosing) {
          return;
        }
        let textInfos = new (T$.ListQueueOf_TextInfo()).new();
        let lastTextWidth = 0.0;
        function _processText(value) {
          let t17, t17$;
          if (value[$isEmpty]) {
            return;
          }
          if (!textInfos[$isNotEmpty]) dart.assertFailed(null, I[1], 568, 14, "textInfos.isNotEmpty");
          let lastTextInfo = textInfos[$last];
          let fill = parsers.createParagraph(value, lastTextInfo.style, lastTextInfo.style.fill);
          let stroke = parsers.createParagraph(value, lastTextInfo.style, vector_drawable.DrawablePaint.isEmpty(lastTextInfo.style.stroke) ? parsers.transparentStroke : lastTextInfo.style.stroke);
          dart.nullCheck(dart.nullCheck(parserState.currentGroup).children)[$add](new vector_drawable.DrawableText.new(parserState.attribute("id", {def: ""}), fill, stroke, lastTextInfo.offset, (t17 = dart.nullCheck(lastTextInfo.style.textStyle).anchor, t17 == null ? vector_drawable.DrawableTextAnchorPosition.start : t17), {transform: (t17$ = lastTextInfo.transform, t17$ == null ? null : t17$.storage)}));
          lastTextWidth = fill.maxIntrinsicWidth;
        }
        dart.fn(_processText, T$.StringTovoid());
        function _processStartElement(event) {
          let t17, t17$, t17$0, t17$1;
          let lastTextInfo = null;
          if (textInfos[$isNotEmpty]) {
            lastTextInfo = textInfos[$last];
          }
          let currentOffset = parser_state._parseCurrentOffset(parserState, (t17 = lastTextInfo, t17 == null ? null : t17.offset.translate(lastTextWidth, 0.0)));
          let transform = parsers.parseTransform(parserState.attribute("transform"));
          if ((t17$ = lastTextInfo, t17$ == null ? null : t17$.transform) != null) {
            if (transform == null) {
              transform = dart.nullCheck(lastTextInfo).transform;
            } else {
              transform = dart.nullCheck(dart.nullCheck(lastTextInfo).transform).multiplied(transform);
            }
          }
          let parentStyle = (t17$1 = (t17$0 = lastTextInfo, t17$0 == null ? null : t17$0.style), t17$1 == null ? dart.nullCheck(parserState.currentGroup).style : t17$1);
          textInfos.add(new parser_state._TextInfo.new(parserState.parseStyle(parserState.rootBounds, parentStyle), currentOffset, transform));
          if (event.isSelfClosing) {
            textInfos.removeLast();
          }
        }
        dart.fn(_processStartElement, T$.XmlStartElementEventTovoid());
        _processStartElement(dart.nullCheck(parserState[_currentStartElement]));
        for (let event of parserState[_readSubtree]()) {
          if (cdata.XmlCDATAEvent.is(event)) {
            _processText(event.text[$trim]());
          } else if (text.XmlTextEvent.is(event)) {
            let space = xml.getAttribute(parserState.attributes, "space", {def: null});
            if (space !== "preserve") {
              _processText(event.text[$trim]());
            } else {
              _processText(event.text[$replaceAll](parser_state._trimPattern, ""));
            }
          }
          if (start_element.XmlStartElementEvent.is(event)) {
            _processStartElement(event);
          } else if (end_element.XmlEndElementEvent.is(event)) {
            textInfos.removeLast();
          }
        }
      });
    }
    static ['_#new#tearOff']() {
      return new parser_state._Elements.new();
    }
  };
  (parser_state._Elements.new = function() {
    ;
  }).prototype = parser_state._Elements.prototype;
  dart.addTypeTests(parser_state._Elements);
  dart.addTypeCaches(parser_state._Elements);
  dart.setStaticMethodSignature(parser_state._Elements, () => ['svg', 'g', 'symbol', 'use', 'parseStops', 'radialGradient', 'linearGradient', 'clipPath', 'image', 'text']);
  dart.setLibraryUri(parser_state._Elements, I[0]);
  parser_state._Paths = class _Paths extends core.Object {
    static circle(parserState) {
      let t17;
      let cx = dart.nullCheck(parserState.parseDoubleWithUnits(parserState.attribute("cx", {def: "0"})));
      let cy = dart.nullCheck(parserState.parseDoubleWithUnits(parserState.attribute("cy", {def: "0"})));
      let r = dart.nullCheck(parserState.parseDoubleWithUnits(parserState.attribute("r", {def: "0"})));
      let oval = new ui.Rect.fromCircle({center: new ui.Offset.new(cx, cy), radius: r});
      t17 = ui.Path.new();
      return (() => {
        t17.addOval(oval);
        return t17;
      })();
    }
    static path(parserState) {
      let d = dart.nullCheck(parserState.attribute("d", {def: ""}));
      return parse_path.parseSvgPathData(d);
    }
    static rect(parserState) {
      let t17, t17$;
      let x = dart.nullCheck(parserState.parseDoubleWithUnits(parserState.attribute("x", {def: "0"})));
      let y = dart.nullCheck(parserState.parseDoubleWithUnits(parserState.attribute("y", {def: "0"})));
      let w = dart.nullCheck(parserState.parseDoubleWithUnits(parserState.attribute("width", {def: "0"})));
      let h = dart.nullCheck(parserState.parseDoubleWithUnits(parserState.attribute("height", {def: "0"})));
      let rect = new ui.Rect.fromLTWH(x, y, w, h);
      let rxRaw = parserState.attribute("rx");
      let ryRaw = parserState.attribute("ry");
      rxRaw == null ? rxRaw = ryRaw : null;
      ryRaw == null ? ryRaw = rxRaw : null;
      if (rxRaw != null && rxRaw !== "") {
        let rx = dart.nullCheck(parserState.parseDoubleWithUnits(rxRaw));
        let ry = dart.nullCheck(parserState.parseDoubleWithUnits(ryRaw));
        t17 = ui.Path.new();
        return (() => {
          t17.addRRect(new ui.RRect.fromRectXY(rect, rx, ry));
          return t17;
        })();
      }
      t17$ = ui.Path.new();
      return (() => {
        t17$.addRect(rect);
        return t17$;
      })();
    }
    static polygon(parserState) {
      return parser_state._Paths.parsePathFromPoints(parserState, true);
    }
    static polyline(parserState) {
      return parser_state._Paths.parsePathFromPoints(parserState, false);
    }
    static parsePathFromPoints(parserState, close) {
      let points = dart.nullCheck(parserState.attribute("points", {def: ""}));
      if (points === "") {
        return null;
      }
      let path = "M" + points + (close ? "z" : "");
      return parse_path.parseSvgPathData(path);
    }
    static ellipse(parserState) {
      let t17;
      let cx = dart.nullCheck(parserState.parseDoubleWithUnits(parserState.attribute("cx", {def: "0"})));
      let cy = dart.nullCheck(parserState.parseDoubleWithUnits(parserState.attribute("cy", {def: "0"})));
      let rx = dart.nullCheck(parserState.parseDoubleWithUnits(parserState.attribute("rx", {def: "0"})));
      let ry = dart.nullCheck(parserState.parseDoubleWithUnits(parserState.attribute("ry", {def: "0"})));
      let r = new ui.Rect.fromLTWH(cx - rx, cy - ry, rx * 2, ry * 2);
      t17 = ui.Path.new();
      return (() => {
        t17.addOval(r);
        return t17;
      })();
    }
    static line(parserState) {
      let t17;
      let x1 = dart.nullCheck(parserState.parseDoubleWithUnits(parserState.attribute("x1", {def: "0"})));
      let x2 = dart.nullCheck(parserState.parseDoubleWithUnits(parserState.attribute("x2", {def: "0"})));
      let y1 = dart.nullCheck(parserState.parseDoubleWithUnits(parserState.attribute("y1", {def: "0"})));
      let y2 = dart.nullCheck(parserState.parseDoubleWithUnits(parserState.attribute("y2", {def: "0"})));
      t17 = ui.Path.new();
      return (() => {
        t17.moveTo(x1, y1);
        t17.lineTo(x2, y2);
        return t17;
      })();
    }
    static ['_#new#tearOff']() {
      return new parser_state._Paths.new();
    }
  };
  (parser_state._Paths.new = function() {
    ;
  }).prototype = parser_state._Paths.prototype;
  dart.addTypeTests(parser_state._Paths);
  dart.addTypeCaches(parser_state._Paths);
  dart.setStaticMethodSignature(parser_state._Paths, () => ['circle', 'path', 'rect', 'polygon', 'polyline', 'parsePathFromPoints', 'ellipse', 'line']);
  dart.setLibraryUri(parser_state._Paths, I[0]);
  parser_state._SvgGroupTuple = class _SvgGroupTuple extends core.Object {
    static ['_#new#tearOff'](name, drawable) {
      return new parser_state._SvgGroupTuple.new(name, drawable);
    }
  };
  (parser_state._SvgGroupTuple.new = function(name, drawable) {
    this.name = name;
    this.drawable = drawable;
    ;
  }).prototype = parser_state._SvgGroupTuple.prototype;
  dart.addTypeTests(parser_state._SvgGroupTuple);
  dart.addTypeCaches(parser_state._SvgGroupTuple);
  dart.setLibraryUri(parser_state._SvgGroupTuple, I[0]);
  dart.setFieldSignature(parser_state._SvgGroupTuple, () => ({
    __proto__: dart.getFields(parser_state._SvgGroupTuple.__proto__),
    name: dart.finalFieldType(core.String),
    drawable: dart.finalFieldType(dart.nullable(vector_drawable.DrawableParent))
  }));
  vector_drawable.CacheCompatibilityTester = class CacheCompatibilityTester extends core.Object {
    static ['_#new#tearOff']() {
      return new vector_drawable.CacheCompatibilityTester.new();
    }
    isCompatible(oldData, newData) {
      return true;
    }
  };
  (vector_drawable.CacheCompatibilityTester.new = function() {
    ;
  }).prototype = vector_drawable.CacheCompatibilityTester.prototype;
  dart.addTypeTests(vector_drawable.CacheCompatibilityTester);
  dart.addTypeCaches(vector_drawable.CacheCompatibilityTester);
  dart.setMethodSignature(vector_drawable.CacheCompatibilityTester, () => ({
    __proto__: dart.getMethods(vector_drawable.CacheCompatibilityTester.__proto__),
    isCompatible: dart.fnType(core.bool, [core.Object, core.Object])
  }));
  dart.setLibraryUri(vector_drawable.CacheCompatibilityTester, I[2]);
  parser_state._SvgCompatibilityTester = class _SvgCompatibilityTester extends vector_drawable.CacheCompatibilityTester {
    isCompatible(oldData, newData) {
      if (!theme.SvgTheme.is(oldData) || !theme.SvgTheme.is(newData)) {
        return true;
      }
      if (this.usesCurrentColor && !oldData.currentColor._equals(newData.currentColor)) {
        return false;
      }
      if (this.usesFontSize && oldData.fontSize !== newData.fontSize) {
        return false;
      }
      return true;
    }
    static ['_#new#tearOff']() {
      return new parser_state._SvgCompatibilityTester.new();
    }
  };
  (parser_state._SvgCompatibilityTester.new = function() {
    this.usesCurrentColor = false;
    this.usesFontSize = false;
    parser_state._SvgCompatibilityTester.__proto__.new.call(this);
    ;
  }).prototype = parser_state._SvgCompatibilityTester.prototype;
  dart.addTypeTests(parser_state._SvgCompatibilityTester);
  dart.addTypeCaches(parser_state._SvgCompatibilityTester);
  dart.setLibraryUri(parser_state._SvgCompatibilityTester, I[0]);
  dart.setFieldSignature(parser_state._SvgCompatibilityTester, () => ({
    __proto__: dart.getFields(parser_state._SvgCompatibilityTester.__proto__),
    usesCurrentColor: dart.fieldType(core.bool),
    usesFontSize: dart.fieldType(core.bool)
  }));
  var theme$ = dart.privateName(parser_state, "SvgParserState.theme");
  var depth = dart.privateName(parser_state, "SvgParserState.depth");
  var __SvgParserState__currentAttributes = dart.privateName(parser_state, "_#SvgParserState#_currentAttributes");
  var _warningsAsErrors$ = dart.privateName(parser_state, "_warningsAsErrors");
  var _eventIterator = dart.privateName(parser_state, "_eventIterator");
  var _currentAttributes = dart.privateName(parser_state, "_currentAttributes");
  var _discardSubtree = dart.privateName(parser_state, "_discardSubtree");
  var _parseRawWidthHeight = dart.privateName(parser_state, "_parseRawWidthHeight");
  var _getDefinitionPaint = dart.privateName(parser_state, "_getDefinitionPaint");
  var _determineFillColor = dart.privateName(parser_state, "_determineFillColor");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  parser_state.SvgParserState = class SvgParserState extends core.Object {
    get theme() {
      return this[theme$];
    }
    set theme(value) {
      super.theme = value;
    }
    get depth() {
      return this[depth];
    }
    set depth(value) {
      this[depth] = value;
    }
    static ['_#new#tearOff'](events, theme, _key, _warningsAsErrors) {
      return new parser_state.SvgParserState.new(events, theme, _key, _warningsAsErrors);
    }
    set [_currentAttributes](library$32package$58flutter_svg$47src$47svg$47parser_state$46dart$58$58_currentAttributes$35param) {
      this[__SvgParserState__currentAttributes] = library$32package$58flutter_svg$47src$47svg$47parser_state$46dart$58$58_currentAttributes$35param;
    }
    get [_currentAttributes]() {
      let t17;
      t17 = this[__SvgParserState__currentAttributes];
      return t17 == null ? dart.throw(new _internal.LateError.fieldNI("_currentAttributes")) : t17;
    }
    [_discardSubtree]() {
      let subtreeStartDepth = this.depth;
      while (this[_eventIterator].moveNext()) {
        let event = this[_eventIterator].current;
        if (start_element.XmlStartElementEvent.is(event) && !event.isSelfClosing) {
          this.depth = this.depth + 1;
        } else if (end_element.XmlEndElementEvent.is(event)) {
          this.depth = this.depth - 1;
          if (!(this.depth >= 0)) dart.assertFailed(null, I[1], 825, 16, "depth >= 0");
        }
        this[_currentAttributes] = new (T$.IdentityMapOfString$String()).new();
        this[_currentStartElement] = null;
        if (this.depth < subtreeStartDepth) {
          return;
        }
      }
    }
    [_readSubtree]() {
      return new (T$.SyncIterableOfXmlEvent()).new((function* _readSubtree() {
        let subtreeStartDepth = this.depth;
        while (this[_eventIterator].moveNext()) {
          let event = this[_eventIterator].current;
          let isSelfClosing = false;
          if (start_element.XmlStartElementEvent.is(event)) {
            let attributeMap = xml['AttributeMapXmlEventAttributeExtension|toAttributeMap'](event.attributes);
            if (xml.getAttribute(attributeMap, "display") === "none" || xml.getAttribute(attributeMap, "visibility") === "hidden") {
              core.print("SVG Warning: Discarding:\n\n  " + dart.str(event) + "\n\n" + "and any children it has since it is not visible.\n" + "If that element is meant to be visible, the `display` or " + "`visibility` attributes should be removed.\n" + "If that element is not meant to be visible, it would be better " + "to remove it from the SVG file.");
              if (!event.isSelfClosing) {
                this.depth = this.depth + 1;
                this[_discardSubtree]();
              }
              continue;
            }
            this[_currentAttributes] = attributeMap;
            this[_currentStartElement] = event;
            this.depth = this.depth + 1;
            isSelfClosing = event.isSelfClosing;
          }
          yield event;
          if (isSelfClosing || end_element.XmlEndElementEvent.is(event)) {
            this.depth = this.depth - 1;
            if (!(this.depth >= 0)) dart.assertFailed(null, I[1], 866, 16, "depth >= 0");
            this[_currentAttributes] = new (T$.IdentityMapOfString$String()).new();
            this[_currentStartElement] = null;
          }
          if (this.depth < subtreeStartDepth) {
            return;
          }
        }
      }).bind(this));
    }
    parse() {
      return async.async(vector_drawable.DrawableRoot, (function* parse() {
        let t17;
        this[_compatibilityTester] = new parser_state._SvgCompatibilityTester.new();
        for (let event of this[_readSubtree]()) {
          if (start_element.XmlStartElementEvent.is(event)) {
            if (this.startElement(event)) {
              continue;
            }
            let parseFunc = parser_state._svgElementParsers[$_get](event.name);
            yield (t17 = parseFunc, t17 == null ? null : t17(this, this[_warningsAsErrors$]));
            if (parseFunc == null) {
              if (!event.isSelfClosing) {
                this[_discardSubtree]();
              }
              if (!dart.fn(() => {
                this.unhandledElement(event);
                return true;
              }, T$.VoidTobool())()) dart.assertFailed(null, I[1], 890, 18, "() {\n            unhandledElement(event);\n            return true;\n          }()");
            }
          } else if (end_element.XmlEndElementEvent.is(event)) {
            this.endElement(event);
          }
        }
        if (this[_root] == null) {
          dart.throw(new core.StateError.new("Invalid SVG data"));
        }
        return dart.nullCheck(this[_root]);
      }).bind(this));
    }
    get attributes() {
      return this[_currentAttributes];
    }
    attribute(name, opts) {
      let def = opts && 'def' in opts ? opts.def : null;
      return xml.getAttribute(this.attributes, name, {def: def});
    }
    get currentGroup() {
      if (!(this[_parentDrawables] !== null)) dart.assertFailed(null, I[1], 914, 12, "_parentDrawables != null");
      if (!this[_parentDrawables][$isNotEmpty]) dart.assertFailed(null, I[1], 915, 12, "_parentDrawables.isNotEmpty");
      return this[_parentDrawables][$last].drawable;
    }
    get rootBounds() {
      if (!(this[_root] != null)) dart.assertFailed("Cannot get rootBounds with null root", I[1], 921, 12, "_root != null");
      if (!(dart.nullCheck(this[_root]).viewport !== null)) dart.assertFailed(null, I[1], 922, 12, "_root!.viewport != null");
      return dart.nullCheck(this[_root]).viewport.viewBoxRect;
    }
    checkForIri(drawable) {
      let iri = this.buildUrlIri();
      if (iri !== "url(#)") {
        this[_definitions].addDrawable(iri, dart.nullCheck(drawable));
        return true;
      }
      return false;
    }
    addGroup(event, drawable) {
      this[_parentDrawables].addLast(new parser_state._SvgGroupTuple.new(event.name, drawable));
      this.checkForIri(drawable);
    }
    addShape(event) {
      let t17;
      let pathFunc = parser_state._svgPathFuncs[$_get](event.name);
      if (pathFunc == null) {
        return false;
      }
      let parent = dart.nullCheck(this[_parentDrawables][$last].drawable);
      let parentStyle = parent.style;
      let path = dart.nullCheck(pathFunc(this));
      let drawable = new vector_drawable.DrawableShape.new(xml.getAttribute(this.attributes, "id", {def: ""}), path, this.parseStyle(path.getBounds(), parentStyle, {defaultFillColor: parser_state.colorBlack, currentColor: parent.color}), {transform: (t17 = parsers.parseTransform(xml.getAttribute(this.attributes, "transform")), t17 == null ? null : t17.storage)});
      this.checkForIri(drawable);
      dart.nullCheck(parent.children)[$add](drawable);
      return true;
    }
    startElement(event) {
      let t17, t17$;
      if (event.name === "defs") {
        if (!event.isSelfClosing) {
          this.addGroup(event, new vector_drawable.DrawableGroup.new("__defs__" + dart.str(event.hashCode), T$.JSArrayOfDrawable().of([]), null, {color: (t17 = this.currentGroup, t17 == null ? null : t17.color), transform: (t17$ = this.currentGroup, t17$ == null ? null : t17$.transform)}));
          return true;
        }
      }
      return this.addShape(event);
    }
    endElement(event) {
      if (event.name === this[_parentDrawables][$last].name) {
        this[_parentDrawables].removeLast();
      }
    }
    unhandledElement(event) {
      let errorMessage = "unhandled element " + event.name + "; Picture key: " + dart.str(this[_key$]);
      if (this[_warningsAsErrors$]) {
        dart.throw(new core.UnimplementedError.new(errorMessage));
      }
      if (event.name === "style") {
        assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: new core.UnimplementedError.new("The <style> element is not implemented in this library."), informationCollector: dart.fn(() => T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorDescription.new("Style elements are not supported by this library and the requested SVG may not " + "render as intended."), new assertions.ErrorHint.new("If possible, ensure the SVG uses inline styles and/or attributes (which are " + "supported), or use a preprocessing utility such as svgcleaner to inline the " + "styles for you."), new assertions.ErrorDescription.new(""), new (T$.DiagnosticsPropertyOfString()).new("Picture key", this[_key$])]), T$.VoidToListOfDiagnosticsNode()), library: "SVG", context: new assertions.ErrorDescription.new("in parseSvgElement")}));
      } else if (parser_state._unhandledElements.add(event.name)) {
        core.print(errorMessage);
      }
    }
    parseDoubleWithUnits(rawDouble, opts) {
      let tryParse = opts && 'tryParse' in opts ? opts.tryParse : false;
      if (rawDouble == null) {
        return null;
      }
      let unit = 1.0;
      if (rawDouble[$contains]("pt")) {
        unit = 1.3333333333333333;
      } else if (rawDouble[$contains]("rem")) {
        this[_compatibilityTester].usesFontSize = true;
        unit = this.theme.fontSize;
      } else if (rawDouble[$contains]("em")) {
        this[_compatibilityTester].usesFontSize = true;
        unit = this.theme.fontSize;
      } else if (rawDouble[$contains]("ex")) {
        this[_compatibilityTester].usesFontSize = true;
        unit = this.theme.xHeight;
      }
      let value = numbers.parseDouble(rawDouble, {tryParse: tryParse});
      return value != null ? dart.notNull(value) * unit : null;
    }
    parseFontSize(raw, opts) {
      let parentValue = opts && 'parentValue' in opts ? opts.parentValue : null;
      if (raw == null || raw === "") {
        return null;
      }
      let ret = this.parseDoubleWithUnits(raw, {tryParse: true});
      if (ret != null) {
        return ret;
      }
      raw = raw[$toLowerCase]()[$trim]();
      ret = parser_state.SvgParserState._kTextSizeMap[$_get](raw);
      if (ret != null) {
        return ret;
      }
      if (raw === "larger") {
        if (parentValue == null) {
          return parser_state.SvgParserState._kTextSizeMap[$_get]("large");
        }
        return dart.notNull(parentValue) * 1.2;
      }
      if (raw === "smaller") {
        if (parentValue == null) {
          return parser_state.SvgParserState._kTextSizeMap[$_get]("small");
        }
        return dart.notNull(parentValue) / 1.2;
      }
      dart.throw(new core.StateError.new("Could not parse font-size: " + dart.str(raw)));
    }
    [_parseRawWidthHeight](raw) {
      let t17;
      if (raw === "100%" || raw === "") {
        return 1 / 0;
      }
      if (!dart.fn(() => {
        let notDigits = core.RegExp.new("[^\\d\\.]");
        if (!raw[$endsWith]("px") && !raw[$endsWith]("em") && !raw[$endsWith]("ex") && raw[$contains](notDigits)) {
          core.print("Warning: Flutter SVG only supports the following formats for `width` and `height` on the SVG root:\n" + "  width=\"100%\"\n" + "  width=\"100em\"\n" + "  width=\"100ex\"\n" + "  width=\"100px\"\n" + "  width=\"100\" (where the number will be treated as pixels).\n" + "The supplied value (" + raw + ") will be discarded and treated as if it had not been specified.");
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[1], 1142, 12, "() {\n      final RegExp notDigits = RegExp(r'[^\\d\\.]');\n      if (!raw.endsWith('px') &&\n          !raw.endsWith('em') &&\n          !raw.endsWith('ex') &&\n          raw.contains(notDigits)) {\n        print(\n            'Warning: Flutter SVG only supports the following formats for `width` and `height` on the SVG root:\\n'\n            '  width=\"100%\"\\n'\n            '  width=\"100em\"\\n'\n            '  width=\"100ex\"\\n'\n            '  width=\"100px\"\\n'\n            '  width=\"100\" (where the number will be treated as pixels).\\n'\n            'The supplied value ($raw) will be discarded and treated as if it had not been specified.');\n      }\n      return true;\n    }()");
      t17 = this.parseDoubleWithUnits(raw, {tryParse: true});
      return t17 == null ? 1 / 0 : t17;
    }
    parseViewBox(opts) {
      let nullOk = opts && 'nullOk' in opts ? opts.nullOk : false;
      let viewBox = dart.nullCheck(xml.getAttribute(this.attributes, "viewBox"));
      let rawWidth = dart.nullCheck(xml.getAttribute(this.attributes, "width"));
      let rawHeight = dart.nullCheck(xml.getAttribute(this.attributes, "height"));
      if (viewBox === "" && rawWidth === "" && rawHeight === "") {
        if (nullOk) {
          return null;
        }
        dart.throw(new core.StateError.new("SVG did not specify dimensions\n\n" + "The SVG library looks for a `viewBox` or `width` and `height` attribute " + "to determine the viewport boundary of the SVG.  Note that these attributes, " + "as with all SVG attributes, are case sensitive.\n" + "During processing, the following attributes were found:\n" + "  " + dart.str(this.attributes)));
      }
      let width = this[_parseRawWidthHeight](rawWidth);
      let height = this[_parseRawWidthHeight](rawHeight);
      if (viewBox === "") {
        return new vector_drawable.DrawableViewport.new(new ui.Size.new(width, height), new ui.Size.new(width, height));
      }
      let parts = viewBox[$split](core.RegExp.new("[ ,]+"));
      if (parts[$length] < 4) {
        dart.throw(new core.StateError.new("viewBox element must be 4 elements long"));
      }
      return new vector_drawable.DrawableViewport.new(new ui.Size.new(width, height), new ui.Size.new(dart.nullCheck(numbers.parseDouble(parts[$_get](2))), dart.nullCheck(numbers.parseDouble(parts[$_get](3)))), {viewBoxOffset: new ui.Offset.new(-dart.nullCheck(numbers.parseDouble(parts[$_get](0))), -dart.nullCheck(numbers.parseDouble(parts[$_get](1))))});
    }
    buildUrlIri() {
      return "url(#" + dart.str(xml.getAttribute(this.attributes, "id")) + ")";
    }
    parseDashArray() {
      let rawDashArray = xml.getAttribute(this.attributes, "stroke-dasharray");
      if (rawDashArray === "") {
        return null;
      } else if (rawDashArray === "none") {
        return vector_drawable.DrawableStyle.emptyDashArray;
      }
      let parts = dart.nullCheck(rawDashArray)[$split](core.RegExp.new("[ ,]+"));
      let doubles = T$.JSArrayOfdouble().of([]);
      let atLeastOneNonZeroDash = false;
      for (let part of parts) {
        let dashOffset = dart.nullCheck(this.parseDoubleWithUnits(part));
        if (dashOffset !== 0) {
          atLeastOneNonZeroDash = true;
        }
        doubles[$add](dashOffset);
      }
      if (doubles[$isEmpty] || !atLeastOneNonZeroDash) {
        return null;
      }
      return new (T$.CircularIntervalListOfdouble()).new(doubles);
    }
    parseDashOffset() {
      let rawDashOffset = xml.getAttribute(this.attributes, "stroke-dashoffset");
      if (rawDashOffset === "") {
        return null;
      }
      if (dart.nullCheck(rawDashOffset)[$endsWith]("%")) {
        return new dash_path.DashOffset.percentage(parsers.parsePercentage(rawDashOffset));
      } else {
        return new dash_path.DashOffset.absolute(dart.nullCheck(this.parseDoubleWithUnits(rawDashOffset)));
      }
    }
    parseTileMode() {
      let spreadMethod = this.attribute("spreadMethod", {def: "pad"});
      switch (spreadMethod) {
        case "pad":
          {
            return ui.TileMode.clamp;
          }
        case "repeat":
          {
            return ui.TileMode.repeated;
          }
        case "reflect":
          {
            return ui.TileMode.mirror;
          }
        default:
          {
            return ui.TileMode.clamp;
          }
      }
    }
    parseOpacity() {
      let rawOpacity = xml.getAttribute(this.attributes, "opacity", {def: null});
      if (rawOpacity != null) {
        return dart.nullCheck(numbers.parseDouble(rawOpacity))[$clamp](0.0, 1.0)[$toDouble]();
      }
      return null;
    }
    [_getDefinitionPaint](key, paintingStyle, iri, definitions, bounds, opts) {
      let opacity = opts && 'opacity' in opts ? opts.opacity : null;
      let shader = definitions.getShader(iri, bounds);
      if (shader == null) {
        errors.reportMissingDef(key, iri, "_getDefinitionPaint");
      }
      return new vector_drawable.DrawablePaint.new(paintingStyle, {shader: shader, color: opacity != null ? new ui.Color.fromRGBO(255, 255, 255, opacity) : null});
    }
    parseStroke(bounds, parentStroke, currentColor) {
      let t17, t17$, t17$0, t17$1, t17$2, t17$3, t18, t17$4, t18$, t17$5, t17$6, t18$0, t17$7, t18$1, t17$8, t17$9, t18$2, t17$10, t18$3, t17$11, t17$12;
      let rawStroke = xml.getAttribute(this.attributes, "stroke", {def: null});
      let rawStrokeOpacity = xml.getAttribute(this.attributes, "stroke-opacity", {def: "1.0"});
      let rawOpacity = xml.getAttribute(this.attributes, "opacity");
      let opacity = dart.nullCheck(numbers.parseDouble(rawStrokeOpacity))[$clamp](0.0, 1.0)[$toDouble]();
      if (rawOpacity !== "") {
        opacity = opacity * dart.nullCheck(numbers.parseDouble(rawOpacity))[$clamp](0.0, 1.0);
      }
      let rawStrokeCap = xml.getAttribute(this.attributes, "stroke-linecap", {def: null});
      let rawLineJoin = xml.getAttribute(this.attributes, "stroke-linejoin", {def: null});
      let rawMiterLimit = xml.getAttribute(this.attributes, "stroke-miterlimit", {def: null});
      let rawStrokeWidth = xml.getAttribute(this.attributes, "stroke-width", {def: null});
      let anyStrokeAttribute = (t17$1 = (t17$0 = (t17$ = (t17 = rawStroke, t17 == null ? rawStrokeCap : t17), t17$ == null ? rawLineJoin : t17$), t17$0 == null ? rawMiterLimit : t17$0), t17$1 == null ? rawStrokeWidth : t17$1);
      if (anyStrokeAttribute == null && vector_drawable.DrawablePaint.isEmpty(parentStroke)) {
        return null;
      } else if (rawStroke === "none") {
        return vector_drawable.DrawablePaint.empty;
      }
      let definitionPaint = null;
      let strokeColor = null;
      if ((t17$2 = rawStroke, t17$2 == null ? null : t17$2[$startsWith]("url")) === true) {
        definitionPaint = this[_getDefinitionPaint](this[_key$], ui.PaintingStyle.stroke, dart.nullCheck(rawStroke), this[_definitions], bounds, {opacity: opacity});
        strokeColor = definitionPaint.color;
      } else {
        strokeColor = this.parseColor(rawStroke, {currentColor: currentColor});
      }
      let paint = new vector_drawable.DrawablePaint.new(ui.PaintingStyle.stroke, {color: (t17$6 = (t17$5 = (t17$4 = (t17$3 = strokeColor, t17$3 == null ? currentColor : t17$3), t17$4 == null ? (t18 = parentStroke, t18 == null ? null : t18.color) : t17$4), t17$5 == null ? (t18$ = definitionPaint, t18$ == null ? null : t18$.color) : t17$5), t17$6 == null ? null : t17$6.withOpacity(opacity)), strokeCap: ui.StrokeCap.values[$firstWhere](dart.fn(sc => sc.toString() === "StrokeCap." + dart.str(rawStrokeCap), T$.StrokeCapTobool()), {orElse: dart.fn(() => {
            let t17, t18, t17$, t17$0;
            t17$0 = (t17$ = (t17 = parentStroke, t17 == null ? null : t17.strokeCap), t17$ == null ? (t18 = definitionPaint, t18 == null ? null : t18.strokeCap) : t17$);
            return t17$0 == null ? ui.StrokeCap.butt : t17$0;
          }, T$.VoidToStrokeCap())}), strokeJoin: ui.StrokeJoin.values[$firstWhere](dart.fn(sj => sj.toString() === "StrokeJoin." + dart.str(rawLineJoin), T$.StrokeJoinTobool()), {orElse: dart.fn(() => {
            let t17, t18, t17$, t17$0;
            t17$0 = (t17$ = (t17 = parentStroke, t17 == null ? null : t17.strokeJoin), t17$ == null ? (t18 = definitionPaint, t18 == null ? null : t18.strokeJoin) : t17$);
            return t17$0 == null ? ui.StrokeJoin.miter : t17$0;
          }, T$.VoidToStrokeJoin())}), strokeMiterLimit: (t17$9 = (t17$8 = (t17$7 = numbers.parseDouble(rawMiterLimit), t17$7 == null ? (t18$0 = parentStroke, t18$0 == null ? null : t18$0.strokeMiterLimit) : t17$7), t17$8 == null ? (t18$1 = definitionPaint, t18$1 == null ? null : t18$1.strokeMiterLimit) : t17$8), t17$9 == null ? 4.0 : t17$9), strokeWidth: (t17$12 = (t17$11 = (t17$10 = this.parseDoubleWithUnits(rawStrokeWidth), t17$10 == null ? (t18$2 = parentStroke, t18$2 == null ? null : t18$2.strokeWidth) : t17$10), t17$11 == null ? (t18$3 = definitionPaint, t18$3 == null ? null : t18$3.strokeWidth) : t17$11), t17$12 == null ? 1.0 : t17$12)});
      return vector_drawable.DrawablePaint.merge(definitionPaint, paint);
    }
    parseFill(bounds, parentFill, defaultFillColor, currentColor) {
      let t17;
      let rawFill = dart.nullCheck(this.attribute("fill", {def: ""}));
      let rawFillOpacity = this.attribute("fill-opacity", {def: "1.0"});
      let rawOpacity = this.attribute("opacity", {def: ""});
      let opacity = dart.nullCheck(numbers.parseDouble(rawFillOpacity))[$clamp](0.0, 1.0)[$toDouble]();
      if (rawOpacity !== "") {
        opacity = opacity * dart.nullCheck(numbers.parseDouble(rawOpacity))[$clamp](0.0, 1.0);
      }
      if (rawFill[$startsWith]("url")) {
        return this[_getDefinitionPaint](this[_key$], ui.PaintingStyle.fill, rawFill, this[_definitions], bounds, {opacity: opacity});
      }
      let fillColor = this[_determineFillColor]((t17 = parentFill, t17 == null ? null : t17.color), rawFill, opacity, rawOpacity !== "" || rawFillOpacity !== "", defaultFillColor, currentColor);
      if (rawFill === "" && (fillColor == null || dart.equals(parentFill, vector_drawable.DrawablePaint.empty))) {
        return null;
      }
      if (rawFill === "none") {
        return vector_drawable.DrawablePaint.empty;
      }
      return new vector_drawable.DrawablePaint.new(ui.PaintingStyle.fill, {color: fillColor});
    }
    [_determineFillColor](parentFillColor, rawFill, opacity, explicitOpacity, defaultFillColor, currentColor) {
      let t17, t17$;
      let color = (t17$ = (t17 = this.parseColor(rawFill, {currentColor: currentColor}), t17 == null ? parentFillColor : t17), t17$ == null ? defaultFillColor : t17$);
      if (explicitOpacity && color != null) {
        return color.withOpacity(opacity);
      }
      return color;
    }
    parseFillRule(attr = "fill-rule", def = "nonzero") {
      let rawFillRule = xml.getAttribute(this.attributes, attr, {def: def});
      return parsers.parseRawFillRule(rawFillRule);
    }
    applyTransformIfNeeded(path) {
      let transform = parsers.parseTransform(xml.getAttribute(this.attributes, "transform", {def: null}));
      if (transform != null) {
        return dart.nullCheck(path).transform(transform.storage);
      } else {
        return path;
      }
    }
    parseClipPath() {
      let rawClipAttribute = xml.getAttribute(this.attributes, "clip-path");
      if (rawClipAttribute !== "") {
        return this[_definitions].getClipPath(dart.nullCheck(rawClipAttribute));
      }
      return null;
    }
    parseMask() {
      let rawMaskAttribute = xml.getAttribute(this.attributes, "mask");
      if (rawMaskAttribute !== "") {
        return this[_definitions].getDrawable(dart.nullCheck(rawMaskAttribute));
      }
      return null;
    }
    parseFontWeight(fontWeight) {
      if (fontWeight == null) {
        return null;
      }
      switch (fontWeight) {
        case "100":
          {
            return ui.FontWeight.w100;
          }
        case "200":
          {
            return ui.FontWeight.w200;
          }
        case "300":
          {
            return ui.FontWeight.w300;
          }
        case "normal":
        case "400":
          {
            return ui.FontWeight.w400;
          }
        case "500":
          {
            return ui.FontWeight.w500;
          }
        case "600":
          {
            return ui.FontWeight.w600;
          }
        case "bold":
        case "700":
          {
            return ui.FontWeight.w700;
          }
        case "800":
          {
            return ui.FontWeight.w800;
          }
        case "900":
          {
            return ui.FontWeight.w900;
          }
      }
      dart.throw(new core.UnsupportedError.new("Attribute value for font-weight=\"" + dart.str(fontWeight) + "\"" + " is not supported"));
    }
    parseFontStyle(fontStyle) {
      if (fontStyle == null) {
        return null;
      }
      switch (fontStyle) {
        case "normal":
          {
            return ui.FontStyle.normal;
          }
        case "italic":
        case "oblique":
          {
            return ui.FontStyle.italic;
          }
      }
      dart.throw(new core.UnsupportedError.new("Attribute value for font-style=\"" + dart.str(fontStyle) + "\"" + " is not supported"));
    }
    parseTextDecoration(textDecoration) {
      if (textDecoration == null) {
        return null;
      }
      switch (textDecoration) {
        case "none":
          {
            return ui.TextDecoration.none;
          }
        case "underline":
          {
            return ui.TextDecoration.underline;
          }
        case "overline":
          {
            return ui.TextDecoration.overline;
          }
        case "line-through":
          {
            return ui.TextDecoration.lineThrough;
          }
      }
      dart.throw(new core.UnsupportedError.new("Attribute value for text-decoration=\"" + dart.str(textDecoration) + "\"" + " is not supported"));
    }
    parseTextDecorationStyle(textDecorationStyle) {
      if (textDecorationStyle == null) {
        return null;
      }
      switch (textDecorationStyle) {
        case "solid":
          {
            return ui.TextDecorationStyle.solid;
          }
        case "dashed":
          {
            return ui.TextDecorationStyle.dashed;
          }
        case "dotted":
          {
            return ui.TextDecorationStyle.dotted;
          }
        case "double":
          {
            return ui.TextDecorationStyle.double;
          }
        case "wavy":
          {
            return ui.TextDecorationStyle.wavy;
          }
      }
      dart.throw(new core.UnsupportedError.new("Attribute value for text-decoration-style=\"" + dart.str(textDecorationStyle) + "\"" + " is not supported"));
    }
    parseStyle(bounds, parentStyle, opts) {
      let t17, t17$, t18, t17$0;
      let defaultFillColor = opts && 'defaultFillColor' in opts ? opts.defaultFillColor : null;
      let currentColor = opts && 'currentColor' in opts ? opts.currentColor : null;
      return vector_drawable.DrawableStyle.mergeAndBlend(parentStyle, {stroke: this.parseStroke(bounds, (t17 = parentStyle, t17 == null ? null : t17.stroke), currentColor), dashArray: this.parseDashArray(), dashOffset: this.parseDashOffset(), fill: this.parseFill(bounds, (t17$ = parentStyle, t17$ == null ? null : t17$.fill), defaultFillColor, currentColor), pathFillType: this.parseFillRule("fill-rule", parentStyle != null ? null : "nonzero"), groupOpacity: this.parseOpacity(), mask: this.parseMask(), clipPath: this.parseClipPath(), textStyle: new vector_drawable.DrawableTextStyle.new({fontFamily: xml.getAttribute(this.attributes, "font-family"), fontSize: this.parseFontSize(xml.getAttribute(this.attributes, "font-size"), {parentValue: (t17$0 = parentStyle, t17$0 == null ? null : (t18 = t17$0.textStyle, t18 == null ? null : t18.fontSize))}), fontWeight: this.parseFontWeight(xml.getAttribute(this.attributes, "font-weight", {def: null})), fontStyle: this.parseFontStyle(xml.getAttribute(this.attributes, "font-style", {def: null})), anchor: parsers.parseTextAnchor(xml.getAttribute(this.attributes, "text-anchor", {def: "inherit"})), decoration: this.parseTextDecoration(xml.getAttribute(this.attributes, "text-decoration", {def: null})), decorationColor: this.parseColor(xml.getAttribute(this.attributes, "text-decoration-color", {def: null}), {currentColor: currentColor}), decorationStyle: this.parseTextDecorationStyle(xml.getAttribute(this.attributes, "text-decoration-style", {def: null}))}), blendMode: parser_state.SvgParserState._blendModes[$_get](dart.nullCheck(xml.getAttribute(this.attributes, "mix-blend-mode")))});
    }
    parseColor(colorString, opts) {
      let t17;
      let currentColor = opts && 'currentColor' in opts ? opts.currentColor : null;
      if (colorString == null || colorString[$isEmpty]) {
        return null;
      }
      if (colorString === "none") {
        return null;
      }
      if (colorString[$toLowerCase]() === "currentcolor") {
        this[_compatibilityTester].usesCurrentColor = true;
        t17 = currentColor;
        return t17 == null ? this.theme.currentColor : t17;
      }
      if (colorString[$_get](0) === "#") {
        if (colorString.length === 4) {
          let r = colorString[$_get](1);
          let g = colorString[$_get](2);
          let b = colorString[$_get](3);
          colorString = "#" + r + r + g + g + b + b;
        }
        let color = core.int.parse(colorString[$substring](1), {radix: 16});
        if (colorString.length === 7) {
          return new ui.Color.new(color = (color | 4278190080) >>> 0);
        }
        if (colorString.length === 9) {
          return new ui.Color.new(color);
        }
      }
      if (colorString[$toLowerCase]()[$startsWith]("rgba")) {
        let rawColorElements = colorString[$substring](colorString[$indexOf]("(") + 1, colorString[$indexOf](")"))[$split](",")[$map](core.String, dart.fn(rawColor => rawColor[$trim](), T$.StringToString()))[$toList]();
        let opacity = dart.nullCheck(numbers.parseDouble(rawColorElements[$removeLast]()));
        let rgb = rawColorElements[$map](core.int, dart.fn(rawColor => core.int.parse(rawColor), T$.StringToint()))[$toList]();
        return new ui.Color.fromRGBO(rgb[$_get](0), rgb[$_get](1), rgb[$_get](2), opacity);
      }
      if (colorString[$toLowerCase]()[$startsWith]("hsl")) {
        let values = colorString[$substring](colorString[$indexOf]("(") + 1, colorString[$indexOf](")"))[$split](",")[$map](core.int, dart.fn(rawColor => {
          rawColor = rawColor[$trim]();
          if (rawColor[$endsWith]("%")) {
            rawColor = rawColor[$substring](0, rawColor.length - 1);
          }
          if (rawColor[$contains](".")) {
            return (dart.nullCheck(numbers.parseDouble(rawColor)) * 2.55)[$round]();
          }
          return core.int.parse(rawColor);
        }, T$.StringToint()))[$toList]();
        let hue = (values[$_get](0) / 360)[$modulo](1);
        let saturation = values[$_get](1) / 100;
        let luminance = values[$_get](2) / 100;
        let alpha = values[$length] > 3 ? values[$_get](3) : 255;
        let rgb = T$.JSArrayOfdouble().of([0.0, 0.0, 0.0]);
        if (hue < 1 / 6) {
          rgb[$_set](0, 1.0);
          rgb[$_set](1, hue * 6);
        } else if (hue < 2 / 6) {
          rgb[$_set](0, 2 - hue * 6);
          rgb[$_set](1, 1.0);
        } else if (hue < 3 / 6) {
          rgb[$_set](1, 1.0);
          rgb[$_set](2, hue * 6 - 2);
        } else if (hue < 4 / 6) {
          rgb[$_set](1, 4 - hue * 6);
          rgb[$_set](2, 1.0);
        } else if (hue < 5 / 6) {
          rgb[$_set](0, hue * 6 - 4);
          rgb[$_set](2, 1.0);
        } else {
          rgb[$_set](0, 1.0);
          rgb[$_set](2, 6 - hue * 6);
        }
        rgb = rgb[$map](core.double, dart.fn(val => val + (1 - saturation) * (0.5 - val), T$.doubleTodouble()))[$toList]();
        if (luminance < 0.5) {
          rgb = rgb[$map](core.double, dart.fn(val => luminance * 2 * val, T$.doubleTodouble()))[$toList]();
        } else {
          rgb = rgb[$map](core.double, dart.fn(val => luminance * 2 * (1 - val) + 2 * val - 1, T$.doubleTodouble()))[$toList]();
        }
        rgb = rgb[$map](core.double, dart.fn(val => val * 255, T$.doubleTodouble()))[$toList]();
        return new ui.Color.fromARGB(alpha, rgb[$_get](0)[$round](), rgb[$_get](1)[$round](), rgb[$_get](2)[$round]());
      }
      if (colorString[$toLowerCase]()[$startsWith]("rgb")) {
        let rgb = colorString[$substring](colorString[$indexOf]("(") + 1, colorString[$indexOf](")"))[$split](",")[$map](core.int, dart.fn(rawColor => {
          rawColor = rawColor[$trim]();
          if (rawColor[$endsWith]("%")) {
            rawColor = rawColor[$substring](0, rawColor.length - 1);
            return (dart.nullCheck(numbers.parseDouble(rawColor)) * 2.55)[$round]();
          }
          return core.int.parse(rawColor);
        }, T$.StringToint()))[$toList]();
        let a = rgb[$length] > 3 ? rgb[$_get](3) : 255;
        return new ui.Color.fromARGB(a, rgb[$_get](0), rgb[$_get](1), rgb[$_get](2));
      }
      let namedColor = parser_state._namedColors[$_get](colorString);
      if (namedColor != null) {
        return namedColor;
      }
      return null;
    }
  };
  (parser_state.SvgParserState.new = function(events, theme, _key, _warningsAsErrors) {
    this[_compatibilityTester] = new parser_state._SvgCompatibilityTester.new();
    this[_definitions] = new vector_drawable.DrawableDefinitionServer.new();
    this[_parentDrawables] = new (T$.ListQueueOf_SvgGroupTuple()).new(10);
    this[_root] = null;
    this[__SvgParserState__currentAttributes] = null;
    this[_currentStartElement] = null;
    this[depth] = 0;
    this[theme$] = theme;
    this[_key$] = _key;
    this[_warningsAsErrors$] = _warningsAsErrors;
    if (!(events !== null)) dart.assertFailed(null, I[1], 797, 12, "events != null");
    this[_eventIterator] = events[$iterator];
    ;
  }).prototype = parser_state.SvgParserState.prototype;
  dart.addTypeTests(parser_state.SvgParserState);
  dart.addTypeCaches(parser_state.SvgParserState);
  dart.setMethodSignature(parser_state.SvgParserState, () => ({
    __proto__: dart.getMethods(parser_state.SvgParserState.__proto__),
    [_discardSubtree]: dart.fnType(dart.void, []),
    [_readSubtree]: dart.fnType(core.Iterable$(event.XmlEvent), []),
    parse: dart.fnType(async.Future$(vector_drawable.DrawableRoot), []),
    attribute: dart.fnType(dart.nullable(core.String), [core.String], {def: dart.nullable(core.String)}, {}),
    checkForIri: dart.fnType(core.bool, [dart.nullable(vector_drawable.DrawableStyleable)]),
    addGroup: dart.fnType(dart.void, [start_element.XmlStartElementEvent, dart.nullable(vector_drawable.DrawableParent)]),
    addShape: dart.fnType(core.bool, [start_element.XmlStartElementEvent]),
    startElement: dart.fnType(core.bool, [start_element.XmlStartElementEvent]),
    endElement: dart.fnType(dart.void, [end_element.XmlEndElementEvent]),
    unhandledElement: dart.fnType(dart.void, [start_element.XmlStartElementEvent]),
    parseDoubleWithUnits: dart.fnType(dart.nullable(core.double), [dart.nullable(core.String)], {tryParse: core.bool}, {}),
    parseFontSize: dart.fnType(dart.nullable(core.double), [dart.nullable(core.String)], {parentValue: dart.nullable(core.double)}, {}),
    [_parseRawWidthHeight]: dart.fnType(core.double, [core.String]),
    parseViewBox: dart.fnType(dart.nullable(vector_drawable.DrawableViewport), [], {nullOk: core.bool}, {}),
    buildUrlIri: dart.fnType(core.String, []),
    parseDashArray: dart.fnType(dart.nullable(dash_path.CircularIntervalList$(core.double)), []),
    parseDashOffset: dart.fnType(dart.nullable(dash_path.DashOffset), []),
    parseTileMode: dart.fnType(ui.TileMode, []),
    parseOpacity: dart.fnType(dart.nullable(core.double), []),
    [_getDefinitionPaint]: dart.fnType(vector_drawable.DrawablePaint, [dart.nullable(core.String), ui.PaintingStyle, core.String, vector_drawable.DrawableDefinitionServer, ui.Rect], {opacity: dart.nullable(core.double)}, {}),
    parseStroke: dart.fnType(dart.nullable(vector_drawable.DrawablePaint), [ui.Rect, dart.nullable(vector_drawable.DrawablePaint), dart.nullable(ui.Color)]),
    parseFill: dart.fnType(dart.nullable(vector_drawable.DrawablePaint), [ui.Rect, dart.nullable(vector_drawable.DrawablePaint), dart.nullable(ui.Color), dart.nullable(ui.Color)]),
    [_determineFillColor]: dart.fnType(dart.nullable(ui.Color), [dart.nullable(ui.Color), core.String, core.double, core.bool, dart.nullable(ui.Color), dart.nullable(ui.Color)]),
    parseFillRule: dart.fnType(dart.nullable(ui.PathFillType), [], [core.String, dart.nullable(core.String)]),
    applyTransformIfNeeded: dart.fnType(dart.nullable(ui.Path), [dart.nullable(ui.Path)]),
    parseClipPath: dart.fnType(dart.nullable(core.List$(ui.Path)), []),
    parseMask: dart.fnType(dart.nullable(vector_drawable.DrawableStyleable), []),
    parseFontWeight: dart.fnType(dart.nullable(ui.FontWeight), [dart.nullable(core.String)]),
    parseFontStyle: dart.fnType(dart.nullable(ui.FontStyle), [dart.nullable(core.String)]),
    parseTextDecoration: dart.fnType(dart.nullable(ui.TextDecoration), [dart.nullable(core.String)]),
    parseTextDecorationStyle: dart.fnType(dart.nullable(ui.TextDecorationStyle), [dart.nullable(core.String)]),
    parseStyle: dart.fnType(vector_drawable.DrawableStyle, [ui.Rect, dart.nullable(vector_drawable.DrawableStyle)], {currentColor: dart.nullable(ui.Color), defaultFillColor: dart.nullable(ui.Color)}, {}),
    parseColor: dart.fnType(dart.nullable(ui.Color), [dart.nullable(core.String)], {currentColor: dart.nullable(ui.Color)}, {})
  }));
  dart.setGetterSignature(parser_state.SvgParserState, () => ({
    __proto__: dart.getGetters(parser_state.SvgParserState.__proto__),
    [_currentAttributes]: core.Map$(core.String, core.String),
    attributes: core.Map$(core.String, core.String),
    currentGroup: dart.nullable(vector_drawable.DrawableParent),
    rootBounds: ui.Rect
  }));
  dart.setSetterSignature(parser_state.SvgParserState, () => ({
    __proto__: dart.getSetters(parser_state.SvgParserState.__proto__),
    [_currentAttributes]: core.Map$(core.String, core.String)
  }));
  dart.setLibraryUri(parser_state.SvgParserState, I[0]);
  dart.setFieldSignature(parser_state.SvgParserState, () => ({
    __proto__: dart.getFields(parser_state.SvgParserState.__proto__),
    [_compatibilityTester]: dart.fieldType(parser_state._SvgCompatibilityTester),
    theme: dart.finalFieldType(theme.SvgTheme),
    [_eventIterator]: dart.finalFieldType(core.Iterator$(event.XmlEvent)),
    [_key$]: dart.finalFieldType(dart.nullable(core.String)),
    [_warningsAsErrors$]: dart.finalFieldType(core.bool),
    [_definitions]: dart.finalFieldType(vector_drawable.DrawableDefinitionServer),
    [_parentDrawables]: dart.finalFieldType(collection.Queue$(parser_state._SvgGroupTuple)),
    [_root]: dart.fieldType(dart.nullable(vector_drawable.DrawableRoot)),
    [__SvgParserState__currentAttributes]: dart.fieldType(dart.nullable(core.Map$(core.String, core.String))),
    [_currentStartElement]: dart.fieldType(dart.nullable(start_element.XmlStartElementEvent)),
    depth: dart.fieldType(core.int)
  }));
  dart.setStaticFieldSignature(parser_state.SvgParserState, () => ['kCssPixelsPerInch', 'kCssPointsPerInch', 'kPointsToPixelFactor', '_kTextSizeMap', 'emptyUrlIri', '_blendModes']);
  dart.defineLazy(parser_state.SvgParserState, {
    /*parser_state.SvgParserState.kCssPixelsPerInch*/get kCssPixelsPerInch() {
      return 96;
    },
    /*parser_state.SvgParserState.kCssPointsPerInch*/get kCssPointsPerInch() {
      return 72;
    },
    /*parser_state.SvgParserState.kPointsToPixelFactor*/get kPointsToPixelFactor() {
      return 1.3333333333333333;
    },
    /*parser_state.SvgParserState._kTextSizeMap*/get _kTextSizeMap() {
      return new (T$.IdentityMapOfString$double()).from(["xx-small", 10.0, "x-small", 12.0, "small", 14.0, "medium", 18.0, "large", 22.0, "x-large", 26.0, "xx-large", 32.0]);
    },
    /*parser_state.SvgParserState.emptyUrlIri*/get emptyUrlIri() {
      return "url(#)";
    },
    /*parser_state.SvgParserState._blendModes*/get _blendModes() {
      return C[0] || CT.C0;
    }
  }, false);
  parser_state._parseCurrentOffset = function _parseCurrentOffset(parserState, lastOffset) {
    let t17, t17$, t17$0, t17$1;
    let x = parserState.attribute("x", {def: null});
    let y = parserState.attribute("y", {def: null});
    return new ui.Offset.new(x != null ? dart.nullCheck(parserState.parseDoubleWithUnits(x)) : dart.nullCheck(parserState.parseDoubleWithUnits(parserState.attribute("dx", {def: "0"}))) + dart.notNull((t17$ = (t17 = lastOffset, t17 == null ? null : t17.dx), t17$ == null ? 0 : t17$)), y != null ? dart.nullCheck(parserState.parseDoubleWithUnits(y)) : dart.nullCheck(parserState.parseDoubleWithUnits(parserState.attribute("dy", {def: "0"}))) + dart.notNull((t17$1 = (t17$0 = lastOffset, t17$0 == null ? null : t17$0.dy), t17$1 == null ? 0 : t17$1)));
  };
  var Color_value = dart.privateName(ui, "Color.value");
  dart.defineLazy(parser_state, {
    /*parser_state._unhandledElements*/get _unhandledElements() {
      return T$.LinkedHashSetOfString().from(["title", "desc"]);
    },
    /*parser_state._trimPattern*/get _trimPattern() {
      return core.RegExp.new("[\\r|\\n|\\t]");
    },
    /*parser_state._svgElementParsers*/get _svgElementParsers() {
      return C[16] || CT.C16;
    },
    /*parser_state._svgPathFuncs*/get _svgPathFuncs() {
      return C[26] || CT.C26;
    },
    /*parser_state.colorBlack*/get colorBlack() {
      return C[34] || CT.C34;
    },
    /*parser_state._namedColors*/get _namedColors() {
      return C[35] || CT.C35;
    }
  }, false);
  var SvgTheme_xHeight = dart.privateName(theme, "SvgTheme.xHeight");
  var SvgTheme_fontSize = dart.privateName(theme, "SvgTheme.fontSize");
  var SvgTheme_currentColor = dart.privateName(theme, "SvgTheme.currentColor");
  parser$.SvgParser = class SvgParser extends core.Object {
    parse(str, opts) {
      let theme = opts && 'theme' in opts ? opts.theme : C[174] || CT.C174;
      let key = opts && 'key' in opts ? opts.key : null;
      let warningsAsErrors = opts && 'warningsAsErrors' in opts ? opts.warningsAsErrors : false;
      return async.async(vector_drawable.DrawableRoot, function* parse() {
        let state = new parser_state.SvgParserState.new(xml_events.parseEvents(str), theme, key, warningsAsErrors);
        return yield state.parse();
      });
    }
    static ['_#new#tearOff']() {
      return new parser$.SvgParser.new();
    }
  };
  (parser$.SvgParser.new = function() {
    ;
  }).prototype = parser$.SvgParser.prototype;
  dart.addTypeTests(parser$.SvgParser);
  dart.addTypeCaches(parser$.SvgParser);
  dart.setMethodSignature(parser$.SvgParser, () => ({
    __proto__: dart.getMethods(parser$.SvgParser.__proto__),
    parse: dart.fnType(async.Future$(vector_drawable.DrawableRoot), [core.String], {key: dart.nullable(core.String), theme: theme.SvgTheme, warningsAsErrors: core.bool}, {})
  }));
  dart.setLibraryUri(parser$.SvgParser, I[3]);
  var cacheColorFilterOverride = dart.privateName(svg, "Svg.cacheColorFilterOverride");
  svg.Svg = class Svg extends core.Object {
    get cacheColorFilterOverride() {
      return this[cacheColorFilterOverride];
    }
    set cacheColorFilterOverride(value) {
      this[cacheColorFilterOverride] = value;
    }
    static ['_#_#tearOff']() {
      return new svg.Svg.__();
    }
    svgPictureDecoder(raw, allowDrawingOutsideOfViewBox, colorFilter, key, opts) {
      let theme = opts && 'theme' in opts ? opts.theme : C[174] || CT.C174;
      return async.async(picture_stream.PictureInfo, (function* svgPictureDecoder() {
        let svgRoot = (yield this.fromSvgBytes(raw, key, {theme: theme}));
        let pic = svgRoot.toPicture({clipToViewBox: allowDrawingOutsideOfViewBox === true ? false : true, colorFilter: colorFilter});
        return new picture_stream.PictureInfo.new({picture: pic, viewport: svgRoot.viewport.viewBoxRect, size: svgRoot.viewport.size, compatibilityTester: svgRoot.compatibilityTester});
      }).bind(this));
    }
    svgPictureStringDecoder(raw, allowDrawingOutsideOfViewBox, colorFilter, key, opts) {
      let theme = opts && 'theme' in opts ? opts.theme : C[174] || CT.C174;
      return async.async(picture_stream.PictureInfo, (function* svgPictureStringDecoder() {
        let svgRoot = (yield this.fromSvgString(raw, key, {theme: theme}));
        let pic = svgRoot.toPicture({clipToViewBox: allowDrawingOutsideOfViewBox === true ? false : true, colorFilter: colorFilter, size: svgRoot.viewport.viewBox});
        return new picture_stream.PictureInfo.new({picture: pic, viewport: svgRoot.viewport.viewBoxRect, size: svgRoot.viewport.size, compatibilityTester: svgRoot.compatibilityTester});
      }).bind(this));
    }
    fromSvgBytes(raw, key, opts) {
      let theme = opts && 'theme' in opts ? opts.theme : C[174] || CT.C174;
      return async.async(vector_drawable.DrawableRoot, (function* fromSvgBytes() {
        return this.fromSvgString(convert.utf8.decode(raw), key, {theme: theme});
      }).bind(this));
    }
    fromSvgString(rawSvg, key, opts) {
      let theme = opts && 'theme' in opts ? opts.theme : C[174] || CT.C174;
      return async.async(vector_drawable.DrawableRoot, function* fromSvgString() {
        let parser = new parser$.SvgParser.new();
        return yield parser.parse(rawSvg, {theme: theme, key: key});
      });
    }
  };
  (svg.Svg.__ = function() {
    this[cacheColorFilterOverride] = null;
    ;
  }).prototype = svg.Svg.prototype;
  dart.addTypeTests(svg.Svg);
  dart.addTypeCaches(svg.Svg);
  dart.setMethodSignature(svg.Svg, () => ({
    __proto__: dart.getMethods(svg.Svg.__proto__),
    svgPictureDecoder: dart.fnType(async.Future$(picture_stream.PictureInfo), [typed_data.Uint8List, core.bool, dart.nullable(ui.ColorFilter), core.String], {theme: theme.SvgTheme}, {}),
    svgPictureStringDecoder: dart.fnType(async.Future$(picture_stream.PictureInfo), [core.String, core.bool, dart.nullable(ui.ColorFilter), core.String], {theme: theme.SvgTheme}, {}),
    fromSvgBytes: dart.fnType(async.Future$(vector_drawable.DrawableRoot), [typed_data.Uint8List, core.String], {theme: theme.SvgTheme}, {}),
    fromSvgString: dart.fnType(async.Future$(vector_drawable.DrawableRoot), [core.String, core.String], {theme: theme.SvgTheme}, {})
  }));
  dart.setLibraryUri(svg.Svg, I[4]);
  dart.setFieldSignature(svg.Svg, () => ({
    __proto__: dart.getFields(svg.Svg.__proto__),
    cacheColorFilterOverride: dart.fieldType(dart.nullable(core.bool))
  }));
  var width$ = dart.privateName(svg, "SvgPicture.width");
  var height$ = dart.privateName(svg, "SvgPicture.height");
  var fit$ = dart.privateName(svg, "SvgPicture.fit");
  var alignment$ = dart.privateName(svg, "SvgPicture.alignment");
  var pictureProvider$ = dart.privateName(svg, "SvgPicture.pictureProvider");
  var placeholderBuilder$ = dart.privateName(svg, "SvgPicture.placeholderBuilder");
  var matchTextDirection$ = dart.privateName(svg, "SvgPicture.matchTextDirection");
  var allowDrawingOutsideViewBox$ = dart.privateName(svg, "SvgPicture.allowDrawingOutsideViewBox");
  var semanticsLabel$ = dart.privateName(svg, "SvgPicture.semanticsLabel");
  var excludeFromSemantics$ = dart.privateName(svg, "SvgPicture.excludeFromSemantics");
  var clipBehavior$ = dart.privateName(svg, "SvgPicture.clipBehavior");
  var colorFilter$ = dart.privateName(svg, "SvgPicture.colorFilter");
  var cacheColorFilter$ = dart.privateName(svg, "SvgPicture.cacheColorFilter");
  var theme$0 = dart.privateName(svg, "SvgPicture.theme");
  var Alignment_y = dart.privateName(alignment, "Alignment.y");
  var Alignment_x = dart.privateName(alignment, "Alignment.x");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  var Widget__location = dart.privateName(framework, "Widget._location");
  var Widget_key = dart.privateName(framework, "Widget.key");
  var SingleChildRenderObjectWidget_child = dart.privateName(framework, "SingleChildRenderObjectWidget.child");
  var LimitedBox_maxHeight = dart.privateName(basic, "LimitedBox.maxHeight");
  var LimitedBox_maxWidth = dart.privateName(basic, "LimitedBox.maxWidth");
  svg.SvgPicture = class SvgPicture extends framework.StatefulWidget {
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    get fit() {
      return this[fit$];
    }
    set fit(value) {
      super.fit = value;
    }
    get alignment() {
      return this[alignment$];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get pictureProvider() {
      return this[pictureProvider$];
    }
    set pictureProvider(value) {
      super.pictureProvider = value;
    }
    get placeholderBuilder() {
      return this[placeholderBuilder$];
    }
    set placeholderBuilder(value) {
      super.placeholderBuilder = value;
    }
    get matchTextDirection() {
      return this[matchTextDirection$];
    }
    set matchTextDirection(value) {
      super.matchTextDirection = value;
    }
    get allowDrawingOutsideViewBox() {
      return this[allowDrawingOutsideViewBox$];
    }
    set allowDrawingOutsideViewBox(value) {
      super.allowDrawingOutsideViewBox = value;
    }
    get semanticsLabel() {
      return this[semanticsLabel$];
    }
    set semanticsLabel(value) {
      super.semanticsLabel = value;
    }
    get excludeFromSemantics() {
      return this[excludeFromSemantics$];
    }
    set excludeFromSemantics(value) {
      super.excludeFromSemantics = value;
    }
    get clipBehavior() {
      return this[clipBehavior$];
    }
    set clipBehavior(value) {
      super.clipBehavior = value;
    }
    get colorFilter() {
      return this[colorFilter$];
    }
    set colorFilter(value) {
      super.colorFilter = value;
    }
    get cacheColorFilter() {
      return this[cacheColorFilter$];
    }
    set cacheColorFilter(value) {
      super.cacheColorFilter = value;
    }
    get theme() {
      return this[theme$0];
    }
    set theme(value) {
      super.theme = value;
    }
    static ['_#new#tearOff'](pictureProvider, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let fit = opts && 'fit' in opts ? opts.fit : C[175] || CT.C175;
      let alignment = opts && 'alignment' in opts ? opts.alignment : C[176] || CT.C176;
      let matchTextDirection = opts && 'matchTextDirection' in opts ? opts.matchTextDirection : false;
      let allowDrawingOutsideViewBox = opts && 'allowDrawingOutsideViewBox' in opts ? opts.allowDrawingOutsideViewBox : false;
      let placeholderBuilder = opts && 'placeholderBuilder' in opts ? opts.placeholderBuilder : null;
      let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
      let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
      let excludeFromSemantics = opts && 'excludeFromSemantics' in opts ? opts.excludeFromSemantics : false;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[177] || CT.C177;
      let cacheColorFilter = opts && 'cacheColorFilter' in opts ? opts.cacheColorFilter : false;
      let theme = opts && 'theme' in opts ? opts.theme : null;
      return new svg.SvgPicture.new(pictureProvider, {key: key, width: width, height: height, fit: fit, alignment: alignment, matchTextDirection: matchTextDirection, allowDrawingOutsideViewBox: allowDrawingOutsideViewBox, placeholderBuilder: placeholderBuilder, colorFilter: colorFilter, semanticsLabel: semanticsLabel, excludeFromSemantics: excludeFromSemantics, clipBehavior: clipBehavior, cacheColorFilter: cacheColorFilter, theme: theme, $creationLocationd_0dea112b090073317d4: C[179] || CT.C179});
    }
    static ['_#asset#tearOff'](assetName, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let matchTextDirection = opts && 'matchTextDirection' in opts ? opts.matchTextDirection : false;
      let bundle = opts && 'bundle' in opts ? opts.bundle : null;
      let $package = opts && 'package' in opts ? opts.package : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let fit = opts && 'fit' in opts ? opts.fit : C[175] || CT.C175;
      let alignment = opts && 'alignment' in opts ? opts.alignment : C[176] || CT.C176;
      let allowDrawingOutsideViewBox = opts && 'allowDrawingOutsideViewBox' in opts ? opts.allowDrawingOutsideViewBox : false;
      let placeholderBuilder = opts && 'placeholderBuilder' in opts ? opts.placeholderBuilder : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let colorBlendMode = opts && 'colorBlendMode' in opts ? opts.colorBlendMode : C[178] || CT.C178;
      let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
      let excludeFromSemantics = opts && 'excludeFromSemantics' in opts ? opts.excludeFromSemantics : false;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[177] || CT.C177;
      let cacheColorFilter = opts && 'cacheColorFilter' in opts ? opts.cacheColorFilter : false;
      let theme = opts && 'theme' in opts ? opts.theme : null;
      return new svg.SvgPicture.asset(assetName, {key: key, matchTextDirection: matchTextDirection, bundle: bundle, package: $package, width: width, height: height, fit: fit, alignment: alignment, allowDrawingOutsideViewBox: allowDrawingOutsideViewBox, placeholderBuilder: placeholderBuilder, color: color, colorBlendMode: colorBlendMode, semanticsLabel: semanticsLabel, excludeFromSemantics: excludeFromSemantics, clipBehavior: clipBehavior, cacheColorFilter: cacheColorFilter, theme: theme, $creationLocationd_0dea112b090073317d4: C[180] || CT.C180});
    }
    static ['_#network#tearOff'](url, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let fit = opts && 'fit' in opts ? opts.fit : C[175] || CT.C175;
      let alignment = opts && 'alignment' in opts ? opts.alignment : C[176] || CT.C176;
      let matchTextDirection = opts && 'matchTextDirection' in opts ? opts.matchTextDirection : false;
      let allowDrawingOutsideViewBox = opts && 'allowDrawingOutsideViewBox' in opts ? opts.allowDrawingOutsideViewBox : false;
      let placeholderBuilder = opts && 'placeholderBuilder' in opts ? opts.placeholderBuilder : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let colorBlendMode = opts && 'colorBlendMode' in opts ? opts.colorBlendMode : C[178] || CT.C178;
      let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
      let excludeFromSemantics = opts && 'excludeFromSemantics' in opts ? opts.excludeFromSemantics : false;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[177] || CT.C177;
      let cacheColorFilter = opts && 'cacheColorFilter' in opts ? opts.cacheColorFilter : false;
      let theme = opts && 'theme' in opts ? opts.theme : null;
      return new svg.SvgPicture.network(url, {key: key, headers: headers, width: width, height: height, fit: fit, alignment: alignment, matchTextDirection: matchTextDirection, allowDrawingOutsideViewBox: allowDrawingOutsideViewBox, placeholderBuilder: placeholderBuilder, color: color, colorBlendMode: colorBlendMode, semanticsLabel: semanticsLabel, excludeFromSemantics: excludeFromSemantics, clipBehavior: clipBehavior, cacheColorFilter: cacheColorFilter, theme: theme, $creationLocationd_0dea112b090073317d4: C[181] || CT.C181});
    }
    static ['_#file#tearOff'](file, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let fit = opts && 'fit' in opts ? opts.fit : C[175] || CT.C175;
      let alignment = opts && 'alignment' in opts ? opts.alignment : C[176] || CT.C176;
      let matchTextDirection = opts && 'matchTextDirection' in opts ? opts.matchTextDirection : false;
      let allowDrawingOutsideViewBox = opts && 'allowDrawingOutsideViewBox' in opts ? opts.allowDrawingOutsideViewBox : false;
      let placeholderBuilder = opts && 'placeholderBuilder' in opts ? opts.placeholderBuilder : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let colorBlendMode = opts && 'colorBlendMode' in opts ? opts.colorBlendMode : C[178] || CT.C178;
      let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
      let excludeFromSemantics = opts && 'excludeFromSemantics' in opts ? opts.excludeFromSemantics : false;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[177] || CT.C177;
      let cacheColorFilter = opts && 'cacheColorFilter' in opts ? opts.cacheColorFilter : false;
      let theme = opts && 'theme' in opts ? opts.theme : null;
      return new svg.SvgPicture.file(file, {key: key, width: width, height: height, fit: fit, alignment: alignment, matchTextDirection: matchTextDirection, allowDrawingOutsideViewBox: allowDrawingOutsideViewBox, placeholderBuilder: placeholderBuilder, color: color, colorBlendMode: colorBlendMode, semanticsLabel: semanticsLabel, excludeFromSemantics: excludeFromSemantics, clipBehavior: clipBehavior, cacheColorFilter: cacheColorFilter, theme: theme, $creationLocationd_0dea112b090073317d4: C[182] || CT.C182});
    }
    static ['_#memory#tearOff'](bytes, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let fit = opts && 'fit' in opts ? opts.fit : C[175] || CT.C175;
      let alignment = opts && 'alignment' in opts ? opts.alignment : C[176] || CT.C176;
      let matchTextDirection = opts && 'matchTextDirection' in opts ? opts.matchTextDirection : false;
      let allowDrawingOutsideViewBox = opts && 'allowDrawingOutsideViewBox' in opts ? opts.allowDrawingOutsideViewBox : false;
      let placeholderBuilder = opts && 'placeholderBuilder' in opts ? opts.placeholderBuilder : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let colorBlendMode = opts && 'colorBlendMode' in opts ? opts.colorBlendMode : C[178] || CT.C178;
      let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
      let excludeFromSemantics = opts && 'excludeFromSemantics' in opts ? opts.excludeFromSemantics : false;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[177] || CT.C177;
      let cacheColorFilter = opts && 'cacheColorFilter' in opts ? opts.cacheColorFilter : false;
      let theme = opts && 'theme' in opts ? opts.theme : null;
      return new svg.SvgPicture.memory(bytes, {key: key, width: width, height: height, fit: fit, alignment: alignment, matchTextDirection: matchTextDirection, allowDrawingOutsideViewBox: allowDrawingOutsideViewBox, placeholderBuilder: placeholderBuilder, color: color, colorBlendMode: colorBlendMode, semanticsLabel: semanticsLabel, excludeFromSemantics: excludeFromSemantics, clipBehavior: clipBehavior, cacheColorFilter: cacheColorFilter, theme: theme, $creationLocationd_0dea112b090073317d4: C[183] || CT.C183});
    }
    static ['_#string#tearOff'](string, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let fit = opts && 'fit' in opts ? opts.fit : C[175] || CT.C175;
      let alignment = opts && 'alignment' in opts ? opts.alignment : C[176] || CT.C176;
      let matchTextDirection = opts && 'matchTextDirection' in opts ? opts.matchTextDirection : false;
      let allowDrawingOutsideViewBox = opts && 'allowDrawingOutsideViewBox' in opts ? opts.allowDrawingOutsideViewBox : false;
      let placeholderBuilder = opts && 'placeholderBuilder' in opts ? opts.placeholderBuilder : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let colorBlendMode = opts && 'colorBlendMode' in opts ? opts.colorBlendMode : C[178] || CT.C178;
      let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
      let excludeFromSemantics = opts && 'excludeFromSemantics' in opts ? opts.excludeFromSemantics : false;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[177] || CT.C177;
      let cacheColorFilter = opts && 'cacheColorFilter' in opts ? opts.cacheColorFilter : false;
      let theme = opts && 'theme' in opts ? opts.theme : null;
      return new svg.SvgPicture.string(string, {key: key, width: width, height: height, fit: fit, alignment: alignment, matchTextDirection: matchTextDirection, allowDrawingOutsideViewBox: allowDrawingOutsideViewBox, placeholderBuilder: placeholderBuilder, color: color, colorBlendMode: colorBlendMode, semanticsLabel: semanticsLabel, excludeFromSemantics: excludeFromSemantics, clipBehavior: clipBehavior, cacheColorFilter: cacheColorFilter, theme: theme, $creationLocationd_0dea112b090073317d4: C[184] || CT.C184});
    }
    static _getColorFilter(color, colorBlendMode) {
      return color == null ? null : new _engine.CkBlendModeColorFilter.new(color, colorBlendMode);
    }
    createState() {
      return new svg._SvgPictureState.new();
    }
  };
  (svg.SvgPicture.new = function(pictureProvider, opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let fit = opts && 'fit' in opts ? opts.fit : C[175] || CT.C175;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[176] || CT.C176;
    let matchTextDirection = opts && 'matchTextDirection' in opts ? opts.matchTextDirection : false;
    let allowDrawingOutsideViewBox = opts && 'allowDrawingOutsideViewBox' in opts ? opts.allowDrawingOutsideViewBox : false;
    let placeholderBuilder = opts && 'placeholderBuilder' in opts ? opts.placeholderBuilder : null;
    let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
    let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
    let excludeFromSemantics = opts && 'excludeFromSemantics' in opts ? opts.excludeFromSemantics : false;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[177] || CT.C177;
    let cacheColorFilter = opts && 'cacheColorFilter' in opts ? opts.cacheColorFilter : false;
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[pictureProvider$] = pictureProvider;
    this[width$] = width;
    this[height$] = height;
    this[fit$] = fit;
    this[alignment$] = alignment;
    this[matchTextDirection$] = matchTextDirection;
    this[allowDrawingOutsideViewBox$] = allowDrawingOutsideViewBox;
    this[placeholderBuilder$] = placeholderBuilder;
    this[colorFilter$] = colorFilter;
    this[semanticsLabel$] = semanticsLabel;
    this[excludeFromSemantics$] = excludeFromSemantics;
    this[clipBehavior$] = clipBehavior;
    this[cacheColorFilter$] = cacheColorFilter;
    this[theme$0] = theme;
    svg.SvgPicture.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = svg.SvgPicture.prototype;
  (svg.SvgPicture.asset = function(assetName, opts) {
    let t17;
    let key = opts && 'key' in opts ? opts.key : null;
    let matchTextDirection = opts && 'matchTextDirection' in opts ? opts.matchTextDirection : false;
    let bundle = opts && 'bundle' in opts ? opts.bundle : null;
    let $package = opts && 'package' in opts ? opts.package : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let fit = opts && 'fit' in opts ? opts.fit : C[175] || CT.C175;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[176] || CT.C176;
    let allowDrawingOutsideViewBox = opts && 'allowDrawingOutsideViewBox' in opts ? opts.allowDrawingOutsideViewBox : false;
    let placeholderBuilder = opts && 'placeholderBuilder' in opts ? opts.placeholderBuilder : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let colorBlendMode = opts && 'colorBlendMode' in opts ? opts.colorBlendMode : C[178] || CT.C178;
    let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
    let excludeFromSemantics = opts && 'excludeFromSemantics' in opts ? opts.excludeFromSemantics : false;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[177] || CT.C177;
    let cacheColorFilter = opts && 'cacheColorFilter' in opts ? opts.cacheColorFilter : false;
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[matchTextDirection$] = matchTextDirection;
    this[width$] = width;
    this[height$] = height;
    this[fit$] = fit;
    this[alignment$] = alignment;
    this[allowDrawingOutsideViewBox$] = allowDrawingOutsideViewBox;
    this[placeholderBuilder$] = placeholderBuilder;
    this[semanticsLabel$] = semanticsLabel;
    this[excludeFromSemantics$] = excludeFromSemantics;
    this[clipBehavior$] = clipBehavior;
    this[cacheColorFilter$] = cacheColorFilter;
    this[theme$0] = theme;
    this[pictureProvider$] = new picture_provider.ExactAssetPicture.new(allowDrawingOutsideViewBox === true ? svg.SvgPicture.svgStringDecoderOutsideViewBoxBuilder : svg.SvgPicture.svgStringDecoderBuilder, assetName, {bundle: bundle, package: $package, colorFilter: dart.test((t17 = svg.svg.cacheColorFilterOverride, t17 == null ? cacheColorFilter : t17)) ? svg.SvgPicture._getColorFilter(color, colorBlendMode) : null});
    this[colorFilter$] = svg.SvgPicture._getColorFilter(color, colorBlendMode);
    svg.SvgPicture.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = svg.SvgPicture.prototype;
  (svg.SvgPicture.network = function(url, opts) {
    let t17;
    let key = opts && 'key' in opts ? opts.key : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let fit = opts && 'fit' in opts ? opts.fit : C[175] || CT.C175;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[176] || CT.C176;
    let matchTextDirection = opts && 'matchTextDirection' in opts ? opts.matchTextDirection : false;
    let allowDrawingOutsideViewBox = opts && 'allowDrawingOutsideViewBox' in opts ? opts.allowDrawingOutsideViewBox : false;
    let placeholderBuilder = opts && 'placeholderBuilder' in opts ? opts.placeholderBuilder : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let colorBlendMode = opts && 'colorBlendMode' in opts ? opts.colorBlendMode : C[178] || CT.C178;
    let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
    let excludeFromSemantics = opts && 'excludeFromSemantics' in opts ? opts.excludeFromSemantics : false;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[177] || CT.C177;
    let cacheColorFilter = opts && 'cacheColorFilter' in opts ? opts.cacheColorFilter : false;
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[width$] = width;
    this[height$] = height;
    this[fit$] = fit;
    this[alignment$] = alignment;
    this[matchTextDirection$] = matchTextDirection;
    this[allowDrawingOutsideViewBox$] = allowDrawingOutsideViewBox;
    this[placeholderBuilder$] = placeholderBuilder;
    this[semanticsLabel$] = semanticsLabel;
    this[excludeFromSemantics$] = excludeFromSemantics;
    this[clipBehavior$] = clipBehavior;
    this[cacheColorFilter$] = cacheColorFilter;
    this[theme$0] = theme;
    this[pictureProvider$] = new picture_provider.NetworkPicture.new(allowDrawingOutsideViewBox === true ? svg.SvgPicture.svgByteDecoderOutsideViewBoxBuilder : svg.SvgPicture.svgByteDecoderBuilder, url, {headers: headers, colorFilter: dart.test((t17 = svg.svg.cacheColorFilterOverride, t17 == null ? cacheColorFilter : t17)) ? svg.SvgPicture._getColorFilter(color, colorBlendMode) : null});
    this[colorFilter$] = svg.SvgPicture._getColorFilter(color, colorBlendMode);
    svg.SvgPicture.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = svg.SvgPicture.prototype;
  (svg.SvgPicture.file = function(file, opts) {
    let t17;
    let key = opts && 'key' in opts ? opts.key : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let fit = opts && 'fit' in opts ? opts.fit : C[175] || CT.C175;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[176] || CT.C176;
    let matchTextDirection = opts && 'matchTextDirection' in opts ? opts.matchTextDirection : false;
    let allowDrawingOutsideViewBox = opts && 'allowDrawingOutsideViewBox' in opts ? opts.allowDrawingOutsideViewBox : false;
    let placeholderBuilder = opts && 'placeholderBuilder' in opts ? opts.placeholderBuilder : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let colorBlendMode = opts && 'colorBlendMode' in opts ? opts.colorBlendMode : C[178] || CT.C178;
    let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
    let excludeFromSemantics = opts && 'excludeFromSemantics' in opts ? opts.excludeFromSemantics : false;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[177] || CT.C177;
    let cacheColorFilter = opts && 'cacheColorFilter' in opts ? opts.cacheColorFilter : false;
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[width$] = width;
    this[height$] = height;
    this[fit$] = fit;
    this[alignment$] = alignment;
    this[matchTextDirection$] = matchTextDirection;
    this[allowDrawingOutsideViewBox$] = allowDrawingOutsideViewBox;
    this[placeholderBuilder$] = placeholderBuilder;
    this[semanticsLabel$] = semanticsLabel;
    this[excludeFromSemantics$] = excludeFromSemantics;
    this[clipBehavior$] = clipBehavior;
    this[cacheColorFilter$] = cacheColorFilter;
    this[theme$0] = theme;
    this[pictureProvider$] = new picture_provider.FilePicture.new(allowDrawingOutsideViewBox === true ? svg.SvgPicture.svgByteDecoderOutsideViewBoxBuilder : svg.SvgPicture.svgByteDecoderBuilder, file, {colorFilter: dart.test((t17 = svg.svg.cacheColorFilterOverride, t17 == null ? cacheColorFilter : t17)) ? svg.SvgPicture._getColorFilter(color, colorBlendMode) : null});
    this[colorFilter$] = svg.SvgPicture._getColorFilter(color, colorBlendMode);
    svg.SvgPicture.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = svg.SvgPicture.prototype;
  (svg.SvgPicture.memory = function(bytes, opts) {
    let t17;
    let key = opts && 'key' in opts ? opts.key : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let fit = opts && 'fit' in opts ? opts.fit : C[175] || CT.C175;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[176] || CT.C176;
    let matchTextDirection = opts && 'matchTextDirection' in opts ? opts.matchTextDirection : false;
    let allowDrawingOutsideViewBox = opts && 'allowDrawingOutsideViewBox' in opts ? opts.allowDrawingOutsideViewBox : false;
    let placeholderBuilder = opts && 'placeholderBuilder' in opts ? opts.placeholderBuilder : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let colorBlendMode = opts && 'colorBlendMode' in opts ? opts.colorBlendMode : C[178] || CT.C178;
    let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
    let excludeFromSemantics = opts && 'excludeFromSemantics' in opts ? opts.excludeFromSemantics : false;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[177] || CT.C177;
    let cacheColorFilter = opts && 'cacheColorFilter' in opts ? opts.cacheColorFilter : false;
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[width$] = width;
    this[height$] = height;
    this[fit$] = fit;
    this[alignment$] = alignment;
    this[matchTextDirection$] = matchTextDirection;
    this[allowDrawingOutsideViewBox$] = allowDrawingOutsideViewBox;
    this[placeholderBuilder$] = placeholderBuilder;
    this[semanticsLabel$] = semanticsLabel;
    this[excludeFromSemantics$] = excludeFromSemantics;
    this[clipBehavior$] = clipBehavior;
    this[cacheColorFilter$] = cacheColorFilter;
    this[theme$0] = theme;
    this[pictureProvider$] = new picture_provider.MemoryPicture.new(allowDrawingOutsideViewBox === true ? svg.SvgPicture.svgByteDecoderOutsideViewBoxBuilder : svg.SvgPicture.svgByteDecoderBuilder, bytes, {colorFilter: dart.test((t17 = svg.svg.cacheColorFilterOverride, t17 == null ? cacheColorFilter : t17)) ? svg.SvgPicture._getColorFilter(color, colorBlendMode) : null});
    this[colorFilter$] = svg.SvgPicture._getColorFilter(color, colorBlendMode);
    svg.SvgPicture.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = svg.SvgPicture.prototype;
  (svg.SvgPicture.string = function(string, opts) {
    let t17;
    let key = opts && 'key' in opts ? opts.key : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let fit = opts && 'fit' in opts ? opts.fit : C[175] || CT.C175;
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[176] || CT.C176;
    let matchTextDirection = opts && 'matchTextDirection' in opts ? opts.matchTextDirection : false;
    let allowDrawingOutsideViewBox = opts && 'allowDrawingOutsideViewBox' in opts ? opts.allowDrawingOutsideViewBox : false;
    let placeholderBuilder = opts && 'placeholderBuilder' in opts ? opts.placeholderBuilder : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let colorBlendMode = opts && 'colorBlendMode' in opts ? opts.colorBlendMode : C[178] || CT.C178;
    let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
    let excludeFromSemantics = opts && 'excludeFromSemantics' in opts ? opts.excludeFromSemantics : false;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[177] || CT.C177;
    let cacheColorFilter = opts && 'cacheColorFilter' in opts ? opts.cacheColorFilter : false;
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[width$] = width;
    this[height$] = height;
    this[fit$] = fit;
    this[alignment$] = alignment;
    this[matchTextDirection$] = matchTextDirection;
    this[allowDrawingOutsideViewBox$] = allowDrawingOutsideViewBox;
    this[placeholderBuilder$] = placeholderBuilder;
    this[semanticsLabel$] = semanticsLabel;
    this[excludeFromSemantics$] = excludeFromSemantics;
    this[clipBehavior$] = clipBehavior;
    this[cacheColorFilter$] = cacheColorFilter;
    this[theme$0] = theme;
    this[pictureProvider$] = new picture_provider.StringPicture.new(allowDrawingOutsideViewBox === true ? svg.SvgPicture.svgStringDecoderOutsideViewBoxBuilder : svg.SvgPicture.svgStringDecoderBuilder, string, {colorFilter: dart.test((t17 = svg.svg.cacheColorFilterOverride, t17 == null ? cacheColorFilter : t17)) ? svg.SvgPicture._getColorFilter(color, colorBlendMode) : null});
    this[colorFilter$] = svg.SvgPicture._getColorFilter(color, colorBlendMode);
    svg.SvgPicture.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = svg.SvgPicture.prototype;
  dart.addTypeTests(svg.SvgPicture);
  dart.addTypeCaches(svg.SvgPicture);
  dart.setMethodSignature(svg.SvgPicture, () => ({
    __proto__: dart.getMethods(svg.SvgPicture.__proto__),
    createState: dart.fnType(framework.State$(svg.SvgPicture), [])
  }));
  dart.setStaticMethodSignature(svg.SvgPicture, () => ['_getColorFilter']);
  dart.setLibraryUri(svg.SvgPicture, I[4]);
  dart.setFieldSignature(svg.SvgPicture, () => ({
    __proto__: dart.getFields(svg.SvgPicture.__proto__),
    width: dart.finalFieldType(dart.nullable(core.double)),
    height: dart.finalFieldType(dart.nullable(core.double)),
    fit: dart.finalFieldType(box_fit.BoxFit),
    alignment: dart.finalFieldType(alignment.AlignmentGeometry),
    pictureProvider: dart.finalFieldType(picture_provider.PictureProvider),
    placeholderBuilder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext]))),
    matchTextDirection: dart.finalFieldType(core.bool),
    allowDrawingOutsideViewBox: dart.finalFieldType(core.bool),
    semanticsLabel: dart.finalFieldType(dart.nullable(core.String)),
    excludeFromSemantics: dart.finalFieldType(core.bool),
    clipBehavior: dart.finalFieldType(ui.Clip),
    colorFilter: dart.finalFieldType(dart.nullable(ui.ColorFilter)),
    cacheColorFilter: dart.finalFieldType(core.bool),
    theme: dart.finalFieldType(dart.nullable(theme.SvgTheme))
  }));
  dart.setStaticFieldSignature(svg.SvgPicture, () => ['defaultPlaceholderBuilder', 'svgByteDecoderBuilder', 'svgStringDecoderBuilder', 'svgByteDecoderOutsideViewBoxBuilder', 'svgStringDecoderOutsideViewBoxBuilder']);
  dart.defineLazy(svg.SvgPicture, {
    /*svg.SvgPicture.defaultPlaceholderBuilder*/get defaultPlaceholderBuilder() {
      return dart.fn(ctx => C[185] || CT.C185, T$.BuildContextToLimitedBox());
    },
    set defaultPlaceholderBuilder(_) {},
    /*svg.SvgPicture.svgByteDecoderBuilder*/get svgByteDecoderBuilder() {
      return dart.fn(theme => dart.fn((bytes, colorFilter, key) => svg.svg.svgPictureDecoder(bytes, false, colorFilter, key, {theme: theme}), T$.Uint8ListAndColorFilterNAndStringToFutureOfPictureInfo()), T$.SvgThemeToFn());
    },
    /*svg.SvgPicture.svgStringDecoderBuilder*/get svgStringDecoderBuilder() {
      return dart.fn(theme => dart.fn((data, colorFilter, key) => svg.svg.svgPictureStringDecoder(data, false, colorFilter, key, {theme: theme}), T$.StringAndColorFilterNAndStringToFutureOfPictureInfo()), T$.SvgThemeToFn$1());
    },
    /*svg.SvgPicture.svgByteDecoderOutsideViewBoxBuilder*/get svgByteDecoderOutsideViewBoxBuilder() {
      return dart.fn(theme => dart.fn((bytes, colorFilter, key) => svg.svg.svgPictureDecoder(bytes, true, colorFilter, key, {theme: theme}), T$.Uint8ListAndColorFilterNAndStringToFutureOfPictureInfo()), T$.SvgThemeToFn());
    },
    /*svg.SvgPicture.svgStringDecoderOutsideViewBoxBuilder*/get svgStringDecoderOutsideViewBoxBuilder() {
      return dart.fn(theme => dart.fn((data, colorFilter, key) => svg.svg.svgPictureStringDecoder(data, true, colorFilter, key, {theme: theme}), T$.StringAndColorFilterNAndStringToFutureOfPictureInfo()), T$.SvgThemeToFn$1());
    }
  }, false);
  var _picture = dart.privateName(svg, "_picture");
  var _handle = dart.privateName(svg, "_handle");
  var _pictureStream = dart.privateName(svg, "_pictureStream");
  var _isListeningToStream = dart.privateName(svg, "_isListeningToStream");
  var _updatePictureProvider = dart.privateName(svg, "_updatePictureProvider");
  var _resolveImage = dart.privateName(svg, "_resolveImage");
  var _listenToStream = dart.privateName(svg, "_listenToStream");
  var _updateSourceStream = dart.privateName(svg, "_updateSourceStream");
  var _handleImageChanged = dart.privateName(svg, "_handleImageChanged");
  var _stopListeningToStream = dart.privateName(svg, "_stopListeningToStream");
  var _getDefaultPlaceholder = dart.privateName(svg, "_getDefaultPlaceholder");
  svg._SvgPictureState = class _SvgPictureState extends framework.State$(svg.SvgPicture) {
    didChangeDependencies() {
      this[_updatePictureProvider]();
      this[_resolveImage]();
      this[_listenToStream]();
      super.didChangeDependencies();
    }
    didUpdateWidget(oldWidget) {
      svg.SvgPicture.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      if (!this.widget.pictureProvider[$_equals](oldWidget.pictureProvider)) {
        this[_updatePictureProvider]();
        this[_resolveImage]();
      }
    }
    reassemble() {
      this[_updatePictureProvider]();
      this[_resolveImage]();
      super.reassemble();
    }
    [_updatePictureProvider]() {
      let t17, t17$, t18, t17$0, t17$1, t17$2, t18$, t17$3, t17$4, t17$5, t17$6, t18$0, t17$7, t17$8;
      let defaultSvgTheme = (t17 = default_theme.DefaultSvgTheme.of(this.context), t17 == null ? null : t17.theme);
      let defaultTextStyle = text$.DefaultTextStyle.of(this.context).style;
      let currentColor = (t17$1 = (t17$0 = (t17$ = this.widget.theme, t17$ == null ? null : t17$.currentColor), t17$0 == null ? (t18 = defaultSvgTheme, t18 == null ? null : t18.currentColor) : t17$0), t17$1 == null ? C[34] || CT.C34 : t17$1);
      let fontSize = (t17$5 = (t17$4 = (t17$3 = (t17$2 = this.widget.theme, t17$2 == null ? null : t17$2.fontSize), t17$3 == null ? (t18$ = defaultSvgTheme, t18$ == null ? null : t18$.fontSize) : t17$3), t17$4 == null ? defaultTextStyle.fontSize : t17$4), t17$5 == null ? 14.0 : t17$5);
      let xHeight = (t17$8 = (t17$7 = (t17$6 = this.widget.theme, t17$6 == null ? null : t17$6.xHeight), t17$7 == null ? (t18$0 = defaultSvgTheme, t18$0 == null ? null : t18$0.xHeight) : t17$7), t17$8 == null ? fontSize / 2 : t17$8);
      this.widget.pictureProvider.theme = new theme.SvgTheme.new({currentColor: currentColor, fontSize: fontSize, xHeight: xHeight});
    }
    [_resolveImage]() {
      let newStream = this.widget.pictureProvider.resolve(picture_provider.createLocalPictureConfiguration(this.context));
      if (!(newStream !== null)) dart.assertFailed(null, I[5], 809, 12, "newStream != null");
      this[_updateSourceStream](newStream);
    }
    [_handleImageChanged](imageInfo, synchronousCall) {
      this.setState(dart.fn(() => {
        let t17, t17$;
        t17 = this[_handle];
        t17 == null ? null : t17.dispose();
        this[_handle] = (t17$ = imageInfo, t17$ == null ? null : t17$.createHandle());
        this[_picture] = imageInfo;
      }, T$.VoidTovoid()));
    }
    [_updateSourceStream](newStream) {
      let t17;
      if (dart.equals((t17 = this[_pictureStream], t17 == null ? null : t17.key), newStream.key)) {
        return;
      }
      if (this[_isListeningToStream]) {
        dart.nullCheck(this[_pictureStream]).removeListener(dart.bind(this, _handleImageChanged));
      }
      this[_pictureStream] = newStream;
      if (this[_isListeningToStream]) {
        dart.nullCheck(this[_pictureStream]).addListener(dart.bind(this, _handleImageChanged));
      }
    }
    [_listenToStream]() {
      if (this[_isListeningToStream]) {
        return;
      }
      dart.nullCheck(this[_pictureStream]).addListener(dart.bind(this, _handleImageChanged));
      this[_isListeningToStream] = true;
    }
    [_stopListeningToStream]() {
      if (!this[_isListeningToStream]) {
        return;
      }
      dart.nullCheck(this[_pictureStream]).removeListener(dart.bind(this, _handleImageChanged));
      this[_isListeningToStream] = false;
    }
    dispose() {
      let t17;
      if (!(this[_pictureStream] != null)) dart.assertFailed(null, I[5], 857, 12, "_pictureStream != null");
      this[_stopListeningToStream]();
      t17 = this[_handle];
      t17 == null ? null : t17.dispose();
      this[_handle] = null;
      super.dispose();
    }
    build(context) {
      let child = null;
      function child$35get() {
        let t18;
        t18 = child;
        return t18 == null ? dart.throw(new _internal.LateError.localNI("child")) : t18;
      }
      dart.fn(child$35get, T$.VoidToWidget());
      function child$35set(child$35param) {
        return child = child$35param;
      }
      dart.fn(child$35set, T$.WidgetTodynamic());
      if (this[_picture] != null) {
        let viewport = ui.Offset.zero['&'](dart.nullCheck(this[_picture]).viewport.size);
        let width = this.widget.width;
        let height = this.widget.height;
        if (width == null && height == null) {
          width = viewport.width;
          height = viewport.height;
        } else if (height != null) {
          width = dart.notNull(height) / viewport.height * viewport.width;
        } else if (width != null) {
          height = dart.notNull(width) / viewport.width * viewport.height;
        }
        child$35set(new basic.SizedBox.new({width: width, height: height, child: new basic.FittedBox.new({fit: this.widget.fit, alignment: this.widget.alignment, clipBehavior: this.widget.clipBehavior, child: new basic.SizedBox.fromSize({size: viewport.size, child: new render_picture.RawPicture.new(this[_picture], {matchTextDirection: this.widget.matchTextDirection, allowDrawingOutsideViewBox: this.widget.allowDrawingOutsideViewBox, $creationLocationd_0dea112b090073317d4: C[187] || CT.C187}), $creationLocationd_0dea112b090073317d4: C[188] || CT.C188}), $creationLocationd_0dea112b090073317d4: C[189] || CT.C189}), $creationLocationd_0dea112b090073317d4: C[190] || CT.C190}));
        if (this.widget.pictureProvider.colorFilter == null && this.widget.colorFilter != null) {
          child$35set(new color_filter.ColorFiltered.new({colorFilter: dart.nullCheck(this.widget.colorFilter), child: child$35get(), $creationLocationd_0dea112b090073317d4: C[191] || CT.C191}));
        }
      } else {
        child$35set(this.widget.placeholderBuilder == null ? this[_getDefaultPlaceholder](context, this.widget.width, this.widget.height) : dart.nullCheck(this.widget.placeholderBuilder)(context));
      }
      if (!this.widget.excludeFromSemantics) {
        child$35set(new basic.Semantics.new({container: this.widget.semanticsLabel != null, image: true, label: this.widget.semanticsLabel == null ? "" : this.widget.semanticsLabel, child: child$35get(), $creationLocationd_0dea112b090073317d4: C[192] || CT.C192}));
      }
      return child$35get();
    }
    [_getDefaultPlaceholder](context, width, height) {
      if (width != null || height != null) {
        return new basic.SizedBox.new({width: width, height: height, $creationLocationd_0dea112b090073317d4: C[193] || CT.C193});
      }
      return svg.SvgPicture.defaultPlaceholderBuilder(context);
    }
    debugFillProperties(description) {
      super.debugFillProperties(description);
      description.add(new (T$.DiagnosticsPropertyOfPictureStream()).new("stream", this[_pictureStream]));
    }
    static ['_#new#tearOff']() {
      return new svg._SvgPictureState.new();
    }
  };
  (svg._SvgPictureState.new = function() {
    this[_picture] = null;
    this[_handle] = null;
    this[_pictureStream] = null;
    this[_isListeningToStream] = false;
    svg._SvgPictureState.__proto__.new.call(this);
    ;
  }).prototype = svg._SvgPictureState.prototype;
  dart.addTypeTests(svg._SvgPictureState);
  dart.addTypeCaches(svg._SvgPictureState);
  dart.setMethodSignature(svg._SvgPictureState, () => ({
    __proto__: dart.getMethods(svg._SvgPictureState.__proto__),
    [_updatePictureProvider]: dart.fnType(dart.void, []),
    [_resolveImage]: dart.fnType(dart.void, []),
    [_handleImageChanged]: dart.fnType(dart.void, [dart.nullable(picture_stream.PictureInfo), core.bool]),
    [_updateSourceStream]: dart.fnType(dart.void, [picture_stream.PictureStream]),
    [_listenToStream]: dart.fnType(dart.void, []),
    [_stopListeningToStream]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_getDefaultPlaceholder]: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(core.double), dart.nullable(core.double)])
  }));
  dart.setLibraryUri(svg._SvgPictureState, I[4]);
  dart.setFieldSignature(svg._SvgPictureState, () => ({
    __proto__: dart.getFields(svg._SvgPictureState.__proto__),
    [_picture]: dart.fieldType(dart.nullable(picture_stream.PictureInfo)),
    [_handle]: dart.fieldType(dart.nullable(picture_stream.PictureHandle)),
    [_pictureStream]: dart.fieldType(dart.nullable(picture_stream.PictureStream)),
    [_isListeningToStream]: dart.fieldType(core.bool)
  }));
  svg.precachePicture = function precachePicture(provider, context, opts) {
    let t20;
    let viewBox = opts && 'viewBox' in opts ? opts.viewBox : null;
    let colorFilterOverride = opts && 'colorFilterOverride' in opts ? opts.colorFilterOverride : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let colorBlendMode = opts && 'colorBlendMode' in opts ? opts.colorBlendMode : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let config = picture_provider.createLocalPictureConfiguration(context, {viewBox: viewBox, colorFilterOverride: colorFilterOverride, color: color, colorBlendMode: colorBlendMode});
    let completer = T$.CompleterOfvoid().new();
    let stream = null;
    function listener(picture, synchronous) {
      let t20;
      completer.complete();
      t20 = stream;
      t20 == null ? null : t20.removeListener(listener);
    }
    dart.fn(listener, T$.PictureInfoNAndboolTovoid());
    function errorListener(exception, stackTrace) {
      let t20;
      if (onError != null) {
        onError(exception, stackTrace);
      } else {
        assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({context: new assertions.ErrorDescription.new("picture failed to precache"), library: "SVG", exception: exception, stack: stackTrace, silent: true}));
      }
      completer.complete();
      t20 = stream;
      t20 == null ? null : t20.removeListener(listener);
    }
    dart.fn(errorListener, T$.ObjectAndStackTraceTovoid());
    stream = (t20 = provider.resolve(config, {onError: errorListener}), (() => {
      t20.addListener(listener, {onError: errorListener});
      return t20;
    })());
    return completer.future;
  };
  dart.defineLazy(svg, {
    /*svg.svg*/get svg() {
      return new svg.Svg.__();
    }
  }, false);
  parsers.parseTextAnchor = function parseTextAnchor(raw) {
    switch (raw) {
      case "inherit":
        {
          return null;
        }
      case "middle":
        {
          return vector_drawable.DrawableTextAnchorPosition.middle;
        }
      case "end":
        {
          return vector_drawable.DrawableTextAnchorPosition.end;
        }
      case "start":
      default:
        {
          return vector_drawable.DrawableTextAnchorPosition.start;
        }
    }
  };
  parsers.parseTransform = function parseTransform(transform) {
    if (transform == null || transform === "") {
      return null;
    }
    if (!parsers._transformValidator.hasMatch(transform)) dart.throw(new core.StateError.new("illegal or unsupported transform: " + dart.str(transform)));
    let matches = parsers._transformCommand.allMatches(transform)[$toList]()[$reversed];
    let result = vector_math_64.Matrix4.identity();
    for (let m of matches) {
      let command = dart.nullCheck(m.group(1))[$trim]();
      let params = m.group(2);
      let transformer = parsers._matrixParsers[$_get](command);
      if (transformer == null) {
        dart.throw(new core.StateError.new("Unsupported transform: " + command));
      }
      result = transformer(params, result);
    }
    return result;
  };
  parsers._parseSvgMatrix = function _parseSvgMatrix(paramsStr, current) {
    let params = dart.nullCheck(paramsStr)[$trim]()[$split](parsers._valueSeparator);
    if (!params[$isNotEmpty]) dart.assertFailed(null, I[6], 76, 10, "params.isNotEmpty");
    if (!(params[$length] === 6)) dart.assertFailed(null, I[6], 77, 10, "params.length == 6");
    let a = dart.nullCheck(numbers.parseDouble(params[$_get](0)));
    let b = dart.nullCheck(numbers.parseDouble(params[$_get](1)));
    let c = dart.nullCheck(numbers.parseDouble(params[$_get](2)));
    let d = dart.nullCheck(numbers.parseDouble(params[$_get](3)));
    let e = dart.nullCheck(numbers.parseDouble(params[$_get](4)));
    let f = dart.nullCheck(numbers.parseDouble(params[$_get](5)));
    return parsers.affineMatrix(a, b, c, d, e, f).multiplied(current);
  };
  parsers._parseSvgSkewX = function _parseSvgSkewX(paramsStr, current) {
    let x = dart.nullCheck(numbers.parseDouble(paramsStr));
    return parsers.affineMatrix(1.0, 0.0, math.tan(x), 1.0, 0.0, 0.0).multiplied(current);
  };
  parsers._parseSvgSkewY = function _parseSvgSkewY(paramsStr, current) {
    let y = dart.nullCheck(numbers.parseDouble(paramsStr));
    return parsers.affineMatrix(1.0, math.tan(y), 0.0, 1.0, 0.0, 0.0).multiplied(current);
  };
  parsers._parseSvgTranslate = function _parseSvgTranslate(paramsStr, current) {
    let params = dart.nullCheck(paramsStr)[$split](parsers._valueSeparator);
    if (!params[$isNotEmpty]) dart.assertFailed(null, I[6], 100, 10, "params.isNotEmpty");
    if (!(params[$length] <= 2)) dart.assertFailed(null, I[6], 101, 10, "params.length <= 2");
    let x = dart.nullCheck(numbers.parseDouble(params[$_get](0)));
    let y = params[$length] < 2 ? 0.0 : dart.nullCheck(numbers.parseDouble(params[$_get](1)));
    return parsers.affineMatrix(1.0, 0.0, 0.0, 1.0, x, y).multiplied(current);
  };
  parsers._parseSvgScale = function _parseSvgScale(paramsStr, current) {
    let params = dart.nullCheck(paramsStr)[$split](parsers._valueSeparator);
    if (!params[$isNotEmpty]) dart.assertFailed(null, I[6], 109, 10, "params.isNotEmpty");
    if (!(params[$length] <= 2)) dart.assertFailed(null, I[6], 110, 10, "params.length <= 2");
    let x = dart.nullCheck(numbers.parseDouble(params[$_get](0)));
    let y = params[$length] < 2 ? x : dart.nullCheck(numbers.parseDouble(params[$_get](1)));
    return parsers.affineMatrix(x, 0.0, 0.0, y, 0.0, 0.0).multiplied(current);
  };
  parsers._parseSvgRotate = function _parseSvgRotate(paramsStr, current) {
    let params = dart.nullCheck(paramsStr)[$split](parsers._valueSeparator);
    if (!(params[$length] <= 3)) dart.assertFailed(null, I[6], 118, 10, "params.length <= 3");
    let a = vector_math_64.radians(dart.nullCheck(numbers.parseDouble(params[$_get](0))));
    let rotate = parsers.affineMatrix(math.cos(a), math.sin(a), -math.sin(a), math.cos(a), 0.0, 0.0);
    if (params[$length] > 1) {
      let x = dart.nullCheck(numbers.parseDouble(params[$_get](1)));
      let y = params[$length] === 3 ? dart.nullCheck(numbers.parseDouble(params[$_get](2))) : x;
      return parsers.affineMatrix(1.0, 0.0, 0.0, 1.0, x, y).multiplied(current).multiplied(rotate).multiplied(parsers.affineMatrix(1.0, 0.0, 0.0, 1.0, -x, -y));
    } else {
      return rotate.multiplied(current);
    }
  };
  parsers.affineMatrix = function affineMatrix(a, b, c, d, e, f) {
    return vector_math_64.Matrix4.new(a, b, 0.0, 0.0, c, d, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, e, f, 0.0, 1.0);
  };
  parsers.parseRawFillRule = function parseRawFillRule(rawFillRule) {
    if (rawFillRule === "inherit" || rawFillRule == null) {
      return null;
    }
    return rawFillRule !== "evenodd" ? ui.PathFillType.nonZero : ui.PathFillType.evenOdd;
  };
  parsers.resolveImage = function resolveImage(href) {
    return async.async(ui.Image, function* resolveImage() {
      if (!(href !== "")) dart.assertFailed(null, I[6], 156, 10, "href != ''");
      let decodeImage = dart.fn(bytes => async.async(ui.Image, function*() {
        let codec = (yield ui.instantiateImageCodec(bytes));
        let frame = (yield codec.getNextFrame());
        return frame.image;
      }), T$.Uint8ListToFutureOfImage());
      if (href[$startsWith]("http")) {
        let bytes = (yield _http_web.httpGet(href));
        return decodeImage(bytes);
      }
      if (href[$startsWith]("data:")) {
        let commaLocation = href[$indexOf](",") + 1;
        let bytes = convert.base64.decode(href[$substring](commaLocation)[$replaceAll](parsers._whitespacePattern, ""));
        return decodeImage(bytes);
      }
      dart.throw(new core.UnsupportedError.new("Could not resolve image href: " + href));
    });
  };
  parsers.createParagraph = function createParagraph(text, style, foregroundOverride) {
    let t20, t20$;
    let builder = (t20 = ui.ParagraphBuilder.new(ui.ParagraphStyle.new()), (() => {
      t20.pushStyle(dart.nullCheck(style.textStyle).toFlutterTextStyle({foregroundOverride: foregroundOverride}));
      t20.addText(text);
      return t20;
    })());
    t20$ = builder.build();
    return (() => {
      t20$.layout(parsers._infiniteParagraphConstraints);
      return t20$;
    })();
  };
  parsers.parseDecimalOrPercentage = function parseDecimalOrPercentage(val, opts) {
    let multiplier = opts && 'multiplier' in opts ? opts.multiplier : 1;
    if (parsers.isPercentage(val)) {
      return parsers.parsePercentage(val, {multiplier: multiplier});
    } else {
      return dart.nullCheck(numbers.parseDouble(val));
    }
  };
  parsers.parsePercentage = function parsePercentage(val, opts) {
    let multiplier = opts && 'multiplier' in opts ? opts.multiplier : 1;
    return dart.nullCheck(numbers.parseDouble(val[$substring](0, val.length - 1))) / 100 * multiplier;
  };
  parsers.isPercentage = function isPercentage(val) {
    return val[$endsWith]("%");
  };
  var ParagraphConstraints_width = dart.privateName(ui, "ParagraphConstraints.width");
  var DrawablePaint_strokeWidth = dart.privateName(vector_drawable, "DrawablePaint.strokeWidth");
  var DrawablePaint_strokeMiterLimit = dart.privateName(vector_drawable, "DrawablePaint.strokeMiterLimit");
  var DrawablePaint_strokeJoin = dart.privateName(vector_drawable, "DrawablePaint.strokeJoin");
  var DrawablePaint_strokeCap = dart.privateName(vector_drawable, "DrawablePaint.strokeCap");
  var DrawablePaint_style = dart.privateName(vector_drawable, "DrawablePaint.style");
  var DrawablePaint_maskFilter = dart.privateName(vector_drawable, "DrawablePaint.maskFilter");
  var DrawablePaint_filterQuality = dart.privateName(vector_drawable, "DrawablePaint.filterQuality");
  var DrawablePaint_isAntiAlias = dart.privateName(vector_drawable, "DrawablePaint.isAntiAlias");
  var DrawablePaint_colorFilter = dart.privateName(vector_drawable, "DrawablePaint.colorFilter");
  var DrawablePaint_blendMode = dart.privateName(vector_drawable, "DrawablePaint.blendMode");
  var DrawablePaint_shader = dart.privateName(vector_drawable, "DrawablePaint.shader");
  var DrawablePaint_color = dart.privateName(vector_drawable, "DrawablePaint.color");
  dart.defineLazy(parsers, {
    /*parsers._transformCommandAtom*/get _transformCommandAtom() {
      return " *,?([^(]+)\\(([^)]*)\\)";
    },
    /*parsers._transformValidator*/get _transformValidator() {
      return core.RegExp.new("^(" + " *,?([^(]+)\\(([^)]*)\\)" + ")*$");
    },
    /*parsers._transformCommand*/get _transformCommand() {
      return core.RegExp.new(" *,?([^(]+)\\(([^)]*)\\)");
    },
    /*parsers._matrixParsers*/get _matrixParsers() {
      return C[194] || CT.C194;
    },
    /*parsers._valueSeparator*/get _valueSeparator() {
      return core.RegExp.new("( *, *| +)");
    },
    /*parsers._whitespacePattern*/get _whitespacePattern() {
      return core.RegExp.new("\\s");
    },
    /*parsers._infiniteParagraphConstraints*/get _infiniteParagraphConstraints() {
      return C[201] || CT.C201;
    },
    /*parsers.transparentStroke*/get transparentStroke() {
      return C[202] || CT.C202;
    }
  }, false);
  var picture$ = dart.privateName(render_picture, "RawPicture.picture");
  var matchTextDirection$0 = dart.privateName(render_picture, "RawPicture.matchTextDirection");
  var allowDrawingOutsideViewBox$0 = dart.privateName(render_picture, "RawPicture.allowDrawingOutsideViewBox");
  render_picture.RawPicture = class RawPicture extends framework.LeafRenderObjectWidget {
    get picture() {
      return this[picture$];
    }
    set picture(value) {
      super.picture = value;
    }
    get matchTextDirection() {
      return this[matchTextDirection$0];
    }
    set matchTextDirection(value) {
      super.matchTextDirection = value;
    }
    get allowDrawingOutsideViewBox() {
      return this[allowDrawingOutsideViewBox$0];
    }
    set allowDrawingOutsideViewBox(value) {
      super.allowDrawingOutsideViewBox = value;
    }
    static ['_#new#tearOff'](picture, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let matchTextDirection = opts && 'matchTextDirection' in opts ? opts.matchTextDirection : false;
      let allowDrawingOutsideViewBox = opts && 'allowDrawingOutsideViewBox' in opts ? opts.allowDrawingOutsideViewBox : false;
      return new render_picture.RawPicture.new(picture, {key: key, matchTextDirection: matchTextDirection, allowDrawingOutsideViewBox: allowDrawingOutsideViewBox, $creationLocationd_0dea112b090073317d4: C[205] || CT.C205});
    }
    createRenderObject(context) {
      return new render_picture.RenderPicture.new({picture: this.picture, matchTextDirection: this.matchTextDirection, textDirection: this.matchTextDirection ? basic.Directionality.of(context) : null, allowDrawingOutsideViewBox: this.allowDrawingOutsideViewBox});
    }
    updateRenderObject(context, renderObject) {
      let t20;
      render_picture.RenderPicture.as(renderObject);
      t20 = renderObject;
      (() => {
        t20.picture = this.picture;
        t20.matchTextDirection = this.matchTextDirection;
        t20.allowDrawingOutsideViewBox = this.allowDrawingOutsideViewBox;
        t20.textDirection = this.matchTextDirection ? basic.Directionality.of(context) : null;
        return t20;
      })();
    }
  };
  (render_picture.RawPicture.new = function(picture, opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let matchTextDirection = opts && 'matchTextDirection' in opts ? opts.matchTextDirection : false;
    let allowDrawingOutsideViewBox = opts && 'allowDrawingOutsideViewBox' in opts ? opts.allowDrawingOutsideViewBox : false;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[picture$] = picture;
    this[matchTextDirection$0] = matchTextDirection;
    this[allowDrawingOutsideViewBox$0] = allowDrawingOutsideViewBox;
    render_picture.RawPicture.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = render_picture.RawPicture.prototype;
  dart.addTypeTests(render_picture.RawPicture);
  dart.addTypeCaches(render_picture.RawPicture);
  dart.setMethodSignature(render_picture.RawPicture, () => ({
    __proto__: dart.getMethods(render_picture.RawPicture.__proto__),
    createRenderObject: dart.fnType(render_picture.RenderPicture, [framework.BuildContext])
  }));
  dart.setLibraryUri(render_picture.RawPicture, I[7]);
  dart.setFieldSignature(render_picture.RawPicture, () => ({
    __proto__: dart.getFields(render_picture.RawPicture.__proto__),
    picture: dart.finalFieldType(dart.nullable(picture_stream.PictureInfo)),
    matchTextDirection: dart.finalFieldType(core.bool),
    allowDrawingOutsideViewBox: dart.finalFieldType(core.bool)
  }));
  var _picture$ = dart.privateName(render_picture, "_picture");
  var _transformHandle = dart.privateName(render_picture, "_transformHandle");
  var _clipHandle = dart.privateName(render_picture, "_clipHandle");
  var _pictureHandle = dart.privateName(render_picture, "_pictureHandle");
  var _matchTextDirection = dart.privateName(render_picture, "_matchTextDirection");
  var _textDirection = dart.privateName(render_picture, "_textDirection");
  var _allowDrawingOutsideViewBox = dart.privateName(render_picture, "_allowDrawingOutsideViewBox");
  var _flipHorizontally = dart.privateName(render_picture, "_flipHorizontally");
  var _addPicture = dart.privateName(render_picture, "_addPicture");
  render_picture.RenderPicture = class RenderPicture extends box.RenderBox {
    static ['_#new#tearOff'](opts) {
      let picture = opts && 'picture' in opts ? opts.picture : null;
      let matchTextDirection = opts && 'matchTextDirection' in opts ? opts.matchTextDirection : false;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let allowDrawingOutsideViewBox = opts && 'allowDrawingOutsideViewBox' in opts ? opts.allowDrawingOutsideViewBox : null;
      return new render_picture.RenderPicture.new({picture: picture, matchTextDirection: matchTextDirection, textDirection: textDirection, allowDrawingOutsideViewBox: allowDrawingOutsideViewBox});
    }
    get matchTextDirection() {
      return this[_matchTextDirection];
    }
    set matchTextDirection(value) {
      if (!(value !== null)) dart.assertFailed(null, I[8], 95, 12, "value != null");
      if (value === this[_matchTextDirection]) {
        return;
      }
      this[_matchTextDirection] = value;
      this.markNeedsPaint();
    }
    get [_flipHorizontally]() {
      return this[_matchTextDirection] && this[_textDirection] === ui.TextDirection.rtl;
    }
    get textDirection() {
      return this[_textDirection];
    }
    set textDirection(value) {
      if (this[_textDirection] == value) {
        return;
      }
      this[_textDirection] = value;
      this.markNeedsPaint();
    }
    get picture() {
      return this[_picture$];
    }
    set picture(value) {
      let t20, t20$, t20$0, t20$1;
      if (value != null && dart.equals(value.picture, (t20 = this.picture, t20 == null ? null : t20.picture)) && value.size._equals((t20$ = this.picture, t20$ == null ? null : t20$.size)) && value.viewport._equals((t20$0 = this.picture, t20$0 == null ? null : t20$0.viewport))) {
        return;
      }
      this[_picture$] = value;
      this[_pictureHandle].layer = (t20$1 = this[_picture$], t20$1 == null ? null : t20$1.createLayer());
      if (!dart.fn(() => {
        if (this[_pictureHandle].layer != null) {
          if (!dart.nullCheck(this[_pictureHandle].layer).isComplexHint) dart.assertFailed(null, I[8], 137, 16, "_pictureHandle.layer!.isComplexHint");
          if (!!dart.nullCheck(this[_pictureHandle].layer).willChangeHint) dart.assertFailed(null, I[8], 138, 16, "!_pictureHandle.layer!.willChangeHint");
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[8], 135, 12, "() {\n      if (_pictureHandle.layer != null) {\n        assert(_pictureHandle.layer!.isComplexHint);\n        assert(!_pictureHandle.layer!.willChangeHint);\n      }\n      return true;\n    }()");
      this.markNeedsPaint();
    }
    get allowDrawingOutsideViewBox() {
      return this[_allowDrawingOutsideViewBox];
    }
    set allowDrawingOutsideViewBox(val) {
      if (val == this[_allowDrawingOutsideViewBox]) {
        return;
      }
      this[_allowDrawingOutsideViewBox] = val;
      this.markNeedsPaint();
    }
    hitTestSelf(position) {
      return true;
    }
    get sizedByParent() {
      return true;
    }
    computeDryLayout(constraints) {
      return constraints.smallest;
    }
    get isRepaintBoundary() {
      return true;
    }
    [_addPicture](context, offset) {
      if (!(this.picture != null)) dart.assertFailed(null, I[8], 183, 12, "picture != null");
      if (!(this[_pictureHandle].layer != null)) dart.assertFailed(null, I[8], 184, 12, "_pictureHandle.layer != null");
      if (this.allowDrawingOutsideViewBox !== true) {
        let viewportRect = ui.Offset.zero['&'](dart.nullCheck(this[_picture$]).viewport.size);
        this[_clipHandle].layer = context.pushClipRect(this.needsCompositing, offset, viewportRect, dart.fn((context, offset) => {
          context.addLayer(dart.nullCheck(this[_pictureHandle].layer));
        }, T$.PaintingContextAndOffsetTovoid()), {oldLayer: this[_clipHandle].layer});
      } else {
        this[_clipHandle].layer = null;
        context.addLayer(dart.nullCheck(this[_pictureHandle].layer));
      }
    }
    dispose() {
      this[_transformHandle].layer = null;
      this[_clipHandle].layer = null;
      this[_pictureHandle].layer = null;
      super.dispose();
    }
    paint(context, offset) {
      let t20;
      if (this.picture == null || this.size._equals(ui.Size.zero)) {
        return;
      }
      let needsTransform = false;
      let transform = vector_math_64.Matrix4.identity();
      if (this[_flipHorizontally]) {
        needsTransform = true;
        t20 = transform;
        (() => {
          t20.translate(this.size.width, 0.0);
          t20.scale(-1.0, 1.0);
          return t20;
        })();
      }
      if (render_picture.scaleCanvasToViewBox(transform, this.size, dart.nullCheck(this[_picture$]).viewport, dart.nullCheck(this[_picture$]).size)) {
        needsTransform = true;
      }
      if (needsTransform) {
        this[_transformHandle].layer = context.pushTransform(this.needsCompositing, offset, transform, dart.bind(this, _addPicture), {oldLayer: this[_transformHandle].layer});
      } else {
        this[_transformHandle].layer = null;
        this[_addPicture](context, offset);
      }
      if (!dart.fn(() => {
        let t20;
        if (render_picture.RenderPicture.debugRectColor != null && dart.nullCheck(render_picture.RenderPicture.debugRectColor).alpha > 0) {
          context.canvas.drawRect(ui.Offset.zero['&'](this.size), (t20 = ui.Paint.new(), (() => {
            t20.color = dart.nullCheck(render_picture.RenderPicture.debugRectColor);
            t20.style = ui.PaintingStyle.stroke;
            return t20;
          })()));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[8], 250, 12, "() {\n      if (RenderPicture.debugRectColor != null &&\n          RenderPicture.debugRectColor!.alpha > 0) {\n        context.canvas.drawRect(\n            Offset.zero & size,\n            Paint()\n              ..color = debugRectColor!\n              ..style = PaintingStyle.stroke);\n      }\n      return true;\n    }()");
    }
  };
  (render_picture.RenderPicture.new = function(opts) {
    let picture = opts && 'picture' in opts ? opts.picture : null;
    let matchTextDirection = opts && 'matchTextDirection' in opts ? opts.matchTextDirection : false;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let allowDrawingOutsideViewBox = opts && 'allowDrawingOutsideViewBox' in opts ? opts.allowDrawingOutsideViewBox : null;
    this[_picture$] = null;
    this[_transformHandle] = new (T$.LayerHandleOfTransformLayer()).new();
    this[_clipHandle] = new (T$.LayerHandleOfClipRectLayer()).new();
    this[_pictureHandle] = new (T$.LayerHandleOfPictureLayer()).new();
    this[_matchTextDirection] = matchTextDirection;
    this[_textDirection] = textDirection;
    this[_allowDrawingOutsideViewBox] = allowDrawingOutsideViewBox;
    render_picture.RenderPicture.__proto__.new.call(this);
    this.picture = picture;
  }).prototype = render_picture.RenderPicture.prototype;
  dart.addTypeTests(render_picture.RenderPicture);
  dart.addTypeCaches(render_picture.RenderPicture);
  dart.setMethodSignature(render_picture.RenderPicture, () => ({
    __proto__: dart.getMethods(render_picture.RenderPicture.__proto__),
    [_addPicture]: dart.fnType(dart.void, [object.PaintingContext, ui.Offset])
  }));
  dart.setGetterSignature(render_picture.RenderPicture, () => ({
    __proto__: dart.getGetters(render_picture.RenderPicture.__proto__),
    matchTextDirection: core.bool,
    [_flipHorizontally]: core.bool,
    textDirection: dart.nullable(ui.TextDirection),
    picture: dart.nullable(picture_stream.PictureInfo),
    allowDrawingOutsideViewBox: dart.nullable(core.bool)
  }));
  dart.setSetterSignature(render_picture.RenderPicture, () => ({
    __proto__: dart.getSetters(render_picture.RenderPicture.__proto__),
    matchTextDirection: core.bool,
    textDirection: dart.nullable(ui.TextDirection),
    picture: dart.nullable(picture_stream.PictureInfo),
    allowDrawingOutsideViewBox: dart.nullable(core.bool)
  }));
  dart.setLibraryUri(render_picture.RenderPicture, I[7]);
  dart.setFieldSignature(render_picture.RenderPicture, () => ({
    __proto__: dart.getFields(render_picture.RenderPicture.__proto__),
    [_matchTextDirection]: dart.fieldType(core.bool),
    [_textDirection]: dart.fieldType(dart.nullable(ui.TextDirection)),
    [_picture$]: dart.fieldType(dart.nullable(picture_stream.PictureInfo)),
    [_allowDrawingOutsideViewBox]: dart.fieldType(dart.nullable(core.bool)),
    [_transformHandle]: dart.finalFieldType(layer.LayerHandle$(layer.TransformLayer)),
    [_clipHandle]: dart.finalFieldType(layer.LayerHandle$(layer.ClipRectLayer)),
    [_pictureHandle]: dart.finalFieldType(layer.LayerHandle$(layer.PictureLayer))
  }));
  dart.setStaticFieldSignature(render_picture.RenderPicture, () => ['debugRectColor']);
  dart.defineLazy(render_picture.RenderPicture, {
    /*render_picture.RenderPicture.debugRectColor*/get debugRectColor() {
      return null;
    },
    set debugRectColor(_) {}
  }, false);
  render_picture.scaleCanvasToViewBox = function scaleCanvasToViewBox(matrix, desiredSize, viewBox, pictureSize) {
    let t20;
    if (desiredSize._equals(viewBox.size)) {
      return false;
    }
    let scale = math.min(core.double, desiredSize.width / viewBox.width, desiredSize.height / viewBox.height);
    let scaledHalfViewBoxSize = viewBox.size['*'](scale)['/'](2.0);
    let halfDesiredSize = desiredSize['/'](2.0);
    let shift = new ui.Offset.new(halfDesiredSize.width - scaledHalfViewBoxSize.width, halfDesiredSize.height - scaledHalfViewBoxSize.height);
    t20 = matrix;
    (() => {
      t20.translate(shift.dx, shift.dy);
      t20.scale(scale, scale);
      return t20;
    })();
    return true;
  };
  vector_drawable.Drawable = class Drawable extends core.Object {};
  (vector_drawable.Drawable.new = function() {
    ;
  }).prototype = vector_drawable.Drawable.prototype;
  dart.addTypeTests(vector_drawable.Drawable);
  dart.addTypeCaches(vector_drawable.Drawable);
  dart.setLibraryUri(vector_drawable.Drawable, I[2]);
  vector_drawable.DrawableStyleable = class DrawableStyleable extends vector_drawable.Drawable {};
  (vector_drawable.DrawableStyleable.new = function() {
    ;
  }).prototype = vector_drawable.DrawableStyleable.prototype;
  dart.addTypeTests(vector_drawable.DrawableStyleable);
  dart.addTypeCaches(vector_drawable.DrawableStyleable);
  dart.setLibraryUri(vector_drawable.DrawableStyleable, I[2]);
  vector_drawable.DrawableParent = class DrawableParent extends core.Object {};
  (vector_drawable.DrawableParent.new = function() {
    ;
  }).prototype = vector_drawable.DrawableParent.prototype;
  dart.addTypeTests(vector_drawable.DrawableParent);
  dart.addTypeCaches(vector_drawable.DrawableParent);
  vector_drawable.DrawableParent[dart.implements] = () => [vector_drawable.DrawableStyleable];
  dart.setLibraryUri(vector_drawable.DrawableParent, I[2]);
  var stroke$ = dart.privateName(vector_drawable, "DrawableStyle.stroke");
  var dashArray$ = dart.privateName(vector_drawable, "DrawableStyle.dashArray");
  var dashOffset$ = dart.privateName(vector_drawable, "DrawableStyle.dashOffset");
  var fill$ = dart.privateName(vector_drawable, "DrawableStyle.fill");
  var textStyle$ = dart.privateName(vector_drawable, "DrawableStyle.textStyle");
  var pathFillType$ = dart.privateName(vector_drawable, "DrawableStyle.pathFillType");
  var clipPath$ = dart.privateName(vector_drawable, "DrawableStyle.clipPath");
  var mask$ = dart.privateName(vector_drawable, "DrawableStyle.mask");
  var groupOpacity$ = dart.privateName(vector_drawable, "DrawableStyle.groupOpacity");
  var blendMode$ = dart.privateName(vector_drawable, "DrawableStyle.blendMode");
  vector_drawable.DrawableStyle = class DrawableStyle extends core.Object {
    get stroke() {
      return this[stroke$];
    }
    set stroke(value) {
      super.stroke = value;
    }
    get dashArray() {
      return this[dashArray$];
    }
    set dashArray(value) {
      super.dashArray = value;
    }
    get dashOffset() {
      return this[dashOffset$];
    }
    set dashOffset(value) {
      super.dashOffset = value;
    }
    get fill() {
      return this[fill$];
    }
    set fill(value) {
      super.fill = value;
    }
    get textStyle() {
      return this[textStyle$];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get pathFillType() {
      return this[pathFillType$];
    }
    set pathFillType(value) {
      super.pathFillType = value;
    }
    get clipPath() {
      return this[clipPath$];
    }
    set clipPath(value) {
      super.clipPath = value;
    }
    get mask() {
      return this[mask$];
    }
    set mask(value) {
      super.mask = value;
    }
    get groupOpacity() {
      return this[groupOpacity$];
    }
    set groupOpacity(value) {
      super.groupOpacity = value;
    }
    get blendMode() {
      return this[blendMode$];
    }
    set blendMode(value) {
      super.blendMode = value;
    }
    static ['_#new#tearOff'](opts) {
      let stroke = opts && 'stroke' in opts ? opts.stroke : null;
      let dashArray = opts && 'dashArray' in opts ? opts.dashArray : null;
      let dashOffset = opts && 'dashOffset' in opts ? opts.dashOffset : null;
      let fill = opts && 'fill' in opts ? opts.fill : null;
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let pathFillType = opts && 'pathFillType' in opts ? opts.pathFillType : null;
      let groupOpacity = opts && 'groupOpacity' in opts ? opts.groupOpacity : null;
      let clipPath = opts && 'clipPath' in opts ? opts.clipPath : null;
      let mask = opts && 'mask' in opts ? opts.mask : null;
      let blendMode = opts && 'blendMode' in opts ? opts.blendMode : null;
      return new vector_drawable.DrawableStyle.new({stroke: stroke, dashArray: dashArray, dashOffset: dashOffset, fill: fill, textStyle: textStyle, pathFillType: pathFillType, groupOpacity: groupOpacity, clipPath: clipPath, mask: mask, blendMode: blendMode});
    }
    static mergeAndBlend(parent, opts) {
      let t20, t20$, t21, t20$0, t21$, t20$1, t20$2, t21$0, t20$3;
      let fill = opts && 'fill' in opts ? opts.fill : null;
      let stroke = opts && 'stroke' in opts ? opts.stroke : null;
      let dashArray = opts && 'dashArray' in opts ? opts.dashArray : null;
      let dashOffset = opts && 'dashOffset' in opts ? opts.dashOffset : null;
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let pathFillType = opts && 'pathFillType' in opts ? opts.pathFillType : null;
      let groupOpacity = opts && 'groupOpacity' in opts ? opts.groupOpacity : null;
      let clipPath = opts && 'clipPath' in opts ? opts.clipPath : null;
      let mask = opts && 'mask' in opts ? opts.mask : null;
      let blendMode = opts && 'blendMode' in opts ? opts.blendMode : null;
      return new vector_drawable.DrawableStyle.new({fill: vector_drawable.DrawablePaint.merge(fill, (t20 = parent, t20 == null ? null : t20.fill)), stroke: vector_drawable.DrawablePaint.merge(stroke, (t20$ = parent, t20$ == null ? null : t20$.stroke)), dashArray: (t20$0 = dashArray, t20$0 == null ? (t21 = parent, t21 == null ? null : t21.dashArray) : t20$0), dashOffset: (t20$1 = dashOffset, t20$1 == null ? (t21$ = parent, t21$ == null ? null : t21$.dashOffset) : t20$1), textStyle: vector_drawable.DrawableTextStyle.merge(textStyle, (t20$2 = parent, t20$2 == null ? null : t20$2.textStyle)), pathFillType: (t20$3 = pathFillType, t20$3 == null ? (t21$0 = parent, t21$0 == null ? null : t21$0.pathFillType) : t20$3), groupOpacity: groupOpacity, clipPath: clipPath, mask: mask, blendMode: blendMode});
    }
    toString() {
      return "DrawableStyle{" + dart.str(this.stroke) + "," + dart.str(this.dashArray) + "," + dart.str(this.dashOffset) + "," + dart.str(this.fill) + "," + dart.str(this.textStyle) + "," + dart.str(this.pathFillType) + "," + dart.str(this.groupOpacity) + "," + dart.str(this.clipPath) + "," + dart.str(this.mask) + "}";
    }
  };
  (vector_drawable.DrawableStyle.new = function(opts) {
    let stroke = opts && 'stroke' in opts ? opts.stroke : null;
    let dashArray = opts && 'dashArray' in opts ? opts.dashArray : null;
    let dashOffset = opts && 'dashOffset' in opts ? opts.dashOffset : null;
    let fill = opts && 'fill' in opts ? opts.fill : null;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let pathFillType = opts && 'pathFillType' in opts ? opts.pathFillType : null;
    let groupOpacity = opts && 'groupOpacity' in opts ? opts.groupOpacity : null;
    let clipPath = opts && 'clipPath' in opts ? opts.clipPath : null;
    let mask = opts && 'mask' in opts ? opts.mask : null;
    let blendMode = opts && 'blendMode' in opts ? opts.blendMode : null;
    this[stroke$] = stroke;
    this[dashArray$] = dashArray;
    this[dashOffset$] = dashOffset;
    this[fill$] = fill;
    this[textStyle$] = textStyle;
    this[pathFillType$] = pathFillType;
    this[groupOpacity$] = groupOpacity;
    this[clipPath$] = clipPath;
    this[mask$] = mask;
    this[blendMode$] = blendMode;
    ;
  }).prototype = vector_drawable.DrawableStyle.prototype;
  dart.addTypeTests(vector_drawable.DrawableStyle);
  dart.addTypeCaches(vector_drawable.DrawableStyle);
  dart.setStaticMethodSignature(vector_drawable.DrawableStyle, () => ['mergeAndBlend']);
  dart.setLibraryUri(vector_drawable.DrawableStyle, I[2]);
  dart.setFieldSignature(vector_drawable.DrawableStyle, () => ({
    __proto__: dart.getFields(vector_drawable.DrawableStyle.__proto__),
    stroke: dart.finalFieldType(dart.nullable(vector_drawable.DrawablePaint)),
    dashArray: dart.finalFieldType(dart.nullable(dash_path.CircularIntervalList$(core.double))),
    dashOffset: dart.finalFieldType(dart.nullable(dash_path.DashOffset)),
    fill: dart.finalFieldType(dart.nullable(vector_drawable.DrawablePaint)),
    textStyle: dart.finalFieldType(dart.nullable(vector_drawable.DrawableTextStyle)),
    pathFillType: dart.finalFieldType(dart.nullable(ui.PathFillType)),
    clipPath: dart.finalFieldType(dart.nullable(core.List$(ui.Path))),
    mask: dart.finalFieldType(dart.nullable(vector_drawable.DrawableStyleable)),
    groupOpacity: dart.finalFieldType(dart.nullable(core.double)),
    blendMode: dart.finalFieldType(dart.nullable(ui.BlendMode))
  }));
  dart.setStaticFieldSignature(vector_drawable.DrawableStyle, () => ['emptyDashArray']);
  dart.defineExtensionMethods(vector_drawable.DrawableStyle, ['toString']);
  dart.defineLazy(vector_drawable.DrawableStyle, {
    /*vector_drawable.DrawableStyle.emptyDashArray*/get emptyDashArray() {
      return new (T$.CircularIntervalListOfdouble()).new(C[206] || CT.C206);
    }
  }, false);
  const color$ = DrawablePaint_color;
  const shader$ = DrawablePaint_shader;
  const blendMode$0 = DrawablePaint_blendMode;
  const colorFilter$0 = DrawablePaint_colorFilter;
  const isAntiAlias$ = DrawablePaint_isAntiAlias;
  const filterQuality$ = DrawablePaint_filterQuality;
  const maskFilter$ = DrawablePaint_maskFilter;
  const style$0 = DrawablePaint_style;
  const strokeCap$ = DrawablePaint_strokeCap;
  const strokeJoin$ = DrawablePaint_strokeJoin;
  const strokeMiterLimit$ = DrawablePaint_strokeMiterLimit;
  const strokeWidth$ = DrawablePaint_strokeWidth;
  vector_drawable.DrawablePaint = class DrawablePaint extends core.Object {
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get shader() {
      return this[shader$];
    }
    set shader(value) {
      super.shader = value;
    }
    get blendMode() {
      return this[blendMode$0];
    }
    set blendMode(value) {
      super.blendMode = value;
    }
    get colorFilter() {
      return this[colorFilter$0];
    }
    set colorFilter(value) {
      super.colorFilter = value;
    }
    get isAntiAlias() {
      return this[isAntiAlias$];
    }
    set isAntiAlias(value) {
      super.isAntiAlias = value;
    }
    get filterQuality() {
      return this[filterQuality$];
    }
    set filterQuality(value) {
      super.filterQuality = value;
    }
    get maskFilter() {
      return this[maskFilter$];
    }
    set maskFilter(value) {
      super.maskFilter = value;
    }
    get style() {
      return this[style$0];
    }
    set style(value) {
      super.style = value;
    }
    get strokeCap() {
      return this[strokeCap$];
    }
    set strokeCap(value) {
      super.strokeCap = value;
    }
    get strokeJoin() {
      return this[strokeJoin$];
    }
    set strokeJoin(value) {
      super.strokeJoin = value;
    }
    get strokeMiterLimit() {
      return this[strokeMiterLimit$];
    }
    set strokeMiterLimit(value) {
      super.strokeMiterLimit = value;
    }
    get strokeWidth() {
      return this[strokeWidth$];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    static ['_#new#tearOff'](style, opts) {
      let color = opts && 'color' in opts ? opts.color : null;
      let shader = opts && 'shader' in opts ? opts.shader : null;
      let blendMode = opts && 'blendMode' in opts ? opts.blendMode : null;
      let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
      let isAntiAlias = opts && 'isAntiAlias' in opts ? opts.isAntiAlias : null;
      let filterQuality = opts && 'filterQuality' in opts ? opts.filterQuality : null;
      let maskFilter = opts && 'maskFilter' in opts ? opts.maskFilter : null;
      let strokeCap = opts && 'strokeCap' in opts ? opts.strokeCap : null;
      let strokeJoin = opts && 'strokeJoin' in opts ? opts.strokeJoin : null;
      let strokeMiterLimit = opts && 'strokeMiterLimit' in opts ? opts.strokeMiterLimit : null;
      let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
      return new vector_drawable.DrawablePaint.new(style, {color: color, shader: shader, blendMode: blendMode, colorFilter: colorFilter, isAntiAlias: isAntiAlias, filterQuality: filterQuality, maskFilter: maskFilter, strokeCap: strokeCap, strokeJoin: strokeJoin, strokeMiterLimit: strokeMiterLimit, strokeWidth: strokeWidth});
    }
    static merge(a, b) {
      let t20, t20$, t20$0, t20$1, t20$2, t20$3, t20$4, t20$5, t20$6, t20$7, t20$8, t20$9, t20$10;
      if (a == null && b == null) {
        return null;
      }
      if (b == null && a != null) {
        return a;
      }
      if (a === vector_drawable.DrawablePaint.empty || b === vector_drawable.DrawablePaint.empty) {
        t20 = a;
        return t20 == null ? b : t20;
      }
      if (a == null) {
        return b;
      }
      if (!(a.style == dart.nullCheck(b).style)) dart.assertFailed("Cannot merge Paints with different PaintStyles; got:\na: " + dart.str(a) + "\nb: " + dart.str(b) + ".", I[9], 207, 12, "a.style == b!.style");
      b = dart.nullCheck(b);
      return new vector_drawable.DrawablePaint.new((t20$ = a.style, t20$ == null ? b.style : t20$), {color: (t20$0 = a.color, t20$0 == null ? b.color : t20$0), shader: (t20$1 = a.shader, t20$1 == null ? b.shader : t20$1), blendMode: (t20$2 = a.blendMode, t20$2 == null ? b.blendMode : t20$2), colorFilter: (t20$3 = a.colorFilter, t20$3 == null ? b.colorFilter : t20$3), isAntiAlias: (t20$4 = a.isAntiAlias, t20$4 == null ? b.isAntiAlias : t20$4), filterQuality: (t20$5 = a.filterQuality, t20$5 == null ? b.filterQuality : t20$5), maskFilter: (t20$6 = a.maskFilter, t20$6 == null ? b.maskFilter : t20$6), strokeCap: (t20$7 = a.strokeCap, t20$7 == null ? b.strokeCap : t20$7), strokeJoin: (t20$8 = a.strokeJoin, t20$8 == null ? b.strokeJoin : t20$8), strokeMiterLimit: (t20$9 = a.strokeMiterLimit, t20$9 == null ? b.strokeMiterLimit : t20$9), strokeWidth: (t20$10 = a.strokeWidth, t20$10 == null ? b.strokeWidth : t20$10)});
    }
    static isEmpty(paint) {
      return paint == null || vector_drawable.DrawablePaint.empty === paint || paint.color == null;
    }
    toFlutterPaint() {
      let paint = ui.Paint.new();
      if (this.blendMode != null) {
        paint.blendMode = dart.nullCheck(this.blendMode);
      }
      if (this.color != null) {
        paint.color = dart.nullCheck(this.color);
      }
      if (this.colorFilter != null) {
        paint.colorFilter = this.colorFilter;
      }
      if (this.filterQuality != null) {
        paint.filterQuality = dart.nullCheck(this.filterQuality);
      }
      if (this.isAntiAlias != null) {
        paint.isAntiAlias = dart.nullCheck(this.isAntiAlias);
      }
      if (this.maskFilter != null) {
        paint.maskFilter = this.maskFilter;
      }
      if (this.shader != null) {
        paint.shader = this.shader;
      }
      if (this.strokeCap != null) {
        paint.strokeCap = dart.nullCheck(this.strokeCap);
      }
      if (this.strokeJoin != null) {
        paint.strokeJoin = dart.nullCheck(this.strokeJoin);
      }
      if (this.strokeMiterLimit != null) {
        paint.strokeMiterLimit = dart.nullCheck(this.strokeMiterLimit);
      }
      if (this.strokeWidth != null) {
        paint.strokeWidth = dart.nullCheck(this.strokeWidth);
      }
      if (this.style != null) {
        paint.style = dart.nullCheck(this.style);
      }
      return paint;
    }
    toString() {
      if (this === vector_drawable.DrawablePaint.empty) {
        return "DrawablePaint{}";
      }
      return "DrawablePaint{" + dart.str(this.style) + ", color: " + dart.str(this.color) + ", shader: " + dart.str(this.shader) + ", blendMode: " + dart.str(this.blendMode) + ", " + "colorFilter: " + dart.str(this.colorFilter) + ", isAntiAlias: " + dart.str(this.isAntiAlias) + ", filterQuality: " + dart.str(this.filterQuality) + ", " + "maskFilter: " + dart.str(this.maskFilter) + ", strokeCap: " + dart.str(this.strokeCap) + ", strokeJoin: " + dart.str(this.strokeJoin) + ", " + "strokeMiterLimit: " + dart.str(this.strokeMiterLimit) + ", strokeWidth: " + dart.str(this.strokeWidth) + "}";
    }
  };
  (vector_drawable.DrawablePaint.new = function(style, opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let shader = opts && 'shader' in opts ? opts.shader : null;
    let blendMode = opts && 'blendMode' in opts ? opts.blendMode : null;
    let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
    let isAntiAlias = opts && 'isAntiAlias' in opts ? opts.isAntiAlias : null;
    let filterQuality = opts && 'filterQuality' in opts ? opts.filterQuality : null;
    let maskFilter = opts && 'maskFilter' in opts ? opts.maskFilter : null;
    let strokeCap = opts && 'strokeCap' in opts ? opts.strokeCap : null;
    let strokeJoin = opts && 'strokeJoin' in opts ? opts.strokeJoin : null;
    let strokeMiterLimit = opts && 'strokeMiterLimit' in opts ? opts.strokeMiterLimit : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
    this[style$0] = style;
    this[color$] = color;
    this[shader$] = shader;
    this[blendMode$0] = blendMode;
    this[colorFilter$0] = colorFilter;
    this[isAntiAlias$] = isAntiAlias;
    this[filterQuality$] = filterQuality;
    this[maskFilter$] = maskFilter;
    this[strokeCap$] = strokeCap;
    this[strokeJoin$] = strokeJoin;
    this[strokeMiterLimit$] = strokeMiterLimit;
    this[strokeWidth$] = strokeWidth;
    ;
  }).prototype = vector_drawable.DrawablePaint.prototype;
  dart.addTypeTests(vector_drawable.DrawablePaint);
  dart.addTypeCaches(vector_drawable.DrawablePaint);
  dart.setMethodSignature(vector_drawable.DrawablePaint, () => ({
    __proto__: dart.getMethods(vector_drawable.DrawablePaint.__proto__),
    toFlutterPaint: dart.fnType(ui.Paint, [])
  }));
  dart.setStaticMethodSignature(vector_drawable.DrawablePaint, () => ['merge', 'isEmpty']);
  dart.setLibraryUri(vector_drawable.DrawablePaint, I[2]);
  dart.setFieldSignature(vector_drawable.DrawablePaint, () => ({
    __proto__: dart.getFields(vector_drawable.DrawablePaint.__proto__),
    color: dart.finalFieldType(dart.nullable(ui.Color)),
    shader: dart.finalFieldType(dart.nullable(ui.Shader)),
    blendMode: dart.finalFieldType(dart.nullable(ui.BlendMode)),
    colorFilter: dart.finalFieldType(dart.nullable(ui.ColorFilter)),
    isAntiAlias: dart.finalFieldType(dart.nullable(core.bool)),
    filterQuality: dart.finalFieldType(dart.nullable(ui.FilterQuality)),
    maskFilter: dart.finalFieldType(dart.nullable(ui.MaskFilter)),
    style: dart.finalFieldType(dart.nullable(ui.PaintingStyle)),
    strokeCap: dart.finalFieldType(dart.nullable(ui.StrokeCap)),
    strokeJoin: dart.finalFieldType(dart.nullable(ui.StrokeJoin)),
    strokeMiterLimit: dart.finalFieldType(dart.nullable(core.double)),
    strokeWidth: dart.finalFieldType(dart.nullable(core.double))
  }));
  dart.setStaticFieldSignature(vector_drawable.DrawablePaint, () => ['empty']);
  dart.defineExtensionMethods(vector_drawable.DrawablePaint, ['toString']);
  dart.defineLazy(vector_drawable.DrawablePaint, {
    /*vector_drawable.DrawablePaint.empty*/get empty() {
      return C[207] || CT.C207;
    }
  }, false);
  var decoration$ = dart.privateName(vector_drawable, "DrawableTextStyle.decoration");
  var decorationColor$ = dart.privateName(vector_drawable, "DrawableTextStyle.decorationColor");
  var decorationStyle$ = dart.privateName(vector_drawable, "DrawableTextStyle.decorationStyle");
  var fontWeight$ = dart.privateName(vector_drawable, "DrawableTextStyle.fontWeight");
  var fontStyle$ = dart.privateName(vector_drawable, "DrawableTextStyle.fontStyle");
  var textBaseline$ = dart.privateName(vector_drawable, "DrawableTextStyle.textBaseline");
  var fontFamily$ = dart.privateName(vector_drawable, "DrawableTextStyle.fontFamily");
  var fontSize$ = dart.privateName(vector_drawable, "DrawableTextStyle.fontSize");
  var letterSpacing$ = dart.privateName(vector_drawable, "DrawableTextStyle.letterSpacing");
  var wordSpacing$ = dart.privateName(vector_drawable, "DrawableTextStyle.wordSpacing");
  var height$0 = dart.privateName(vector_drawable, "DrawableTextStyle.height");
  var locale$ = dart.privateName(vector_drawable, "DrawableTextStyle.locale");
  var background$ = dart.privateName(vector_drawable, "DrawableTextStyle.background");
  var foreground$ = dart.privateName(vector_drawable, "DrawableTextStyle.foreground");
  var anchor$ = dart.privateName(vector_drawable, "DrawableTextStyle.anchor");
  vector_drawable.DrawableTextStyle = class DrawableTextStyle extends core.Object {
    get decoration() {
      return this[decoration$];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get decorationColor() {
      return this[decorationColor$];
    }
    set decorationColor(value) {
      super.decorationColor = value;
    }
    get decorationStyle() {
      return this[decorationStyle$];
    }
    set decorationStyle(value) {
      super.decorationStyle = value;
    }
    get fontWeight() {
      return this[fontWeight$];
    }
    set fontWeight(value) {
      super.fontWeight = value;
    }
    get fontStyle() {
      return this[fontStyle$];
    }
    set fontStyle(value) {
      super.fontStyle = value;
    }
    get textBaseline() {
      return this[textBaseline$];
    }
    set textBaseline(value) {
      super.textBaseline = value;
    }
    get fontFamily() {
      return this[fontFamily$];
    }
    set fontFamily(value) {
      super.fontFamily = value;
    }
    get fontSize() {
      return this[fontSize$];
    }
    set fontSize(value) {
      super.fontSize = value;
    }
    get letterSpacing() {
      return this[letterSpacing$];
    }
    set letterSpacing(value) {
      super.letterSpacing = value;
    }
    get wordSpacing() {
      return this[wordSpacing$];
    }
    set wordSpacing(value) {
      super.wordSpacing = value;
    }
    get height() {
      return this[height$0];
    }
    set height(value) {
      super.height = value;
    }
    get locale() {
      return this[locale$];
    }
    set locale(value) {
      super.locale = value;
    }
    get background() {
      return this[background$];
    }
    set background(value) {
      super.background = value;
    }
    get foreground() {
      return this[foreground$];
    }
    set foreground(value) {
      super.foreground = value;
    }
    get anchor() {
      return this[anchor$];
    }
    set anchor(value) {
      super.anchor = value;
    }
    static ['_#new#tearOff'](opts) {
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let anchor = opts && 'anchor' in opts ? opts.anchor : null;
      return new vector_drawable.DrawableTextStyle.new({decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, fontWeight: fontWeight, fontFamily: fontFamily, fontSize: fontSize, fontStyle: fontStyle, foreground: foreground, background: background, letterSpacing: letterSpacing, wordSpacing: wordSpacing, height: height, locale: locale, textBaseline: textBaseline, anchor: anchor});
    }
    static merge(a, b) {
      let t20, t20$, t20$0, t20$1, t20$2, t20$3, t20$4, t20$5, t20$6, t20$7, t20$8, t20$9, t20$10, t20$11, t20$12;
      if (b == null) {
        return a;
      }
      if (a == null) {
        return b;
      }
      return new vector_drawable.DrawableTextStyle.new({decoration: (t20 = a.decoration, t20 == null ? b.decoration : t20), decorationColor: (t20$ = a.decorationColor, t20$ == null ? b.decorationColor : t20$), decorationStyle: (t20$0 = a.decorationStyle, t20$0 == null ? b.decorationStyle : t20$0), fontWeight: (t20$1 = a.fontWeight, t20$1 == null ? b.fontWeight : t20$1), fontStyle: (t20$2 = a.fontStyle, t20$2 == null ? b.fontStyle : t20$2), textBaseline: (t20$3 = a.textBaseline, t20$3 == null ? b.textBaseline : t20$3), fontFamily: (t20$4 = a.fontFamily, t20$4 == null ? b.fontFamily : t20$4), fontSize: (t20$5 = a.fontSize, t20$5 == null ? b.fontSize : t20$5), letterSpacing: (t20$6 = a.letterSpacing, t20$6 == null ? b.letterSpacing : t20$6), wordSpacing: (t20$7 = a.wordSpacing, t20$7 == null ? b.wordSpacing : t20$7), height: (t20$8 = a.height, t20$8 == null ? b.height : t20$8), locale: (t20$9 = a.locale, t20$9 == null ? b.locale : t20$9), background: (t20$10 = a.background, t20$10 == null ? b.background : t20$10), foreground: (t20$11 = a.foreground, t20$11 == null ? b.foreground : t20$11), anchor: (t20$12 = a.anchor, t20$12 == null ? b.anchor : t20$12)});
    }
    toFlutterTextStyle(opts) {
      let t20, t20$, t21, t20$0;
      let foregroundOverride = opts && 'foregroundOverride' in opts ? opts.foregroundOverride : null;
      return ui.TextStyle.new({decoration: this.decoration, decorationColor: this.decorationColor, decorationStyle: this.decorationStyle, fontWeight: this.fontWeight, fontStyle: this.fontStyle, textBaseline: this.textBaseline, fontFamily: this.fontFamily, fontSize: this.fontSize, letterSpacing: this.letterSpacing, wordSpacing: this.wordSpacing, height: this.height, locale: this.locale, background: (t20 = this.background, t20 == null ? null : t20.toFlutterPaint()), foreground: (t20$0 = (t20$ = foregroundOverride, t20$ == null ? null : t20$.toFlutterPaint()), t20$0 == null ? (t21 = this.foreground, t21 == null ? null : t21.toFlutterPaint()) : t20$0)});
    }
    toString() {
      return "DrawableTextStyle{" + dart.str(this.decoration) + "," + dart.str(this.decorationColor) + "," + dart.str(this.decorationStyle) + "," + dart.str(this.fontWeight) + "," + dart.str(this.fontFamily) + "," + dart.str(this.fontSize) + "," + dart.str(this.fontStyle) + "," + dart.str(this.foreground) + "," + dart.str(this.background) + "," + dart.str(this.letterSpacing) + "," + dart.str(this.wordSpacing) + "," + dart.str(this.height) + "," + dart.str(this.locale) + "," + dart.str(this.textBaseline) + "," + dart.str(this.anchor) + "}";
    }
  };
  (vector_drawable.DrawableTextStyle.new = function(opts) {
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
    let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
    let foreground = opts && 'foreground' in opts ? opts.foreground : null;
    let background = opts && 'background' in opts ? opts.background : null;
    let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
    let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
    let anchor = opts && 'anchor' in opts ? opts.anchor : null;
    this[decoration$] = decoration;
    this[decorationColor$] = decorationColor;
    this[decorationStyle$] = decorationStyle;
    this[fontWeight$] = fontWeight;
    this[fontFamily$] = fontFamily;
    this[fontSize$] = fontSize;
    this[fontStyle$] = fontStyle;
    this[foreground$] = foreground;
    this[background$] = background;
    this[letterSpacing$] = letterSpacing;
    this[wordSpacing$] = wordSpacing;
    this[height$0] = height;
    this[locale$] = locale;
    this[textBaseline$] = textBaseline;
    this[anchor$] = anchor;
    ;
  }).prototype = vector_drawable.DrawableTextStyle.prototype;
  dart.addTypeTests(vector_drawable.DrawableTextStyle);
  dart.addTypeCaches(vector_drawable.DrawableTextStyle);
  dart.setMethodSignature(vector_drawable.DrawableTextStyle, () => ({
    __proto__: dart.getMethods(vector_drawable.DrawableTextStyle.__proto__),
    toFlutterTextStyle: dart.fnType(ui.TextStyle, [], {foregroundOverride: dart.nullable(vector_drawable.DrawablePaint)}, {})
  }));
  dart.setStaticMethodSignature(vector_drawable.DrawableTextStyle, () => ['merge']);
  dart.setLibraryUri(vector_drawable.DrawableTextStyle, I[2]);
  dart.setFieldSignature(vector_drawable.DrawableTextStyle, () => ({
    __proto__: dart.getFields(vector_drawable.DrawableTextStyle.__proto__),
    decoration: dart.finalFieldType(dart.nullable(ui.TextDecoration)),
    decorationColor: dart.finalFieldType(dart.nullable(ui.Color)),
    decorationStyle: dart.finalFieldType(dart.nullable(ui.TextDecorationStyle)),
    fontWeight: dart.finalFieldType(dart.nullable(ui.FontWeight)),
    fontStyle: dart.finalFieldType(dart.nullable(ui.FontStyle)),
    textBaseline: dart.finalFieldType(dart.nullable(ui.TextBaseline)),
    fontFamily: dart.finalFieldType(dart.nullable(core.String)),
    fontSize: dart.finalFieldType(dart.nullable(core.double)),
    letterSpacing: dart.finalFieldType(dart.nullable(core.double)),
    wordSpacing: dart.finalFieldType(dart.nullable(core.double)),
    height: dart.finalFieldType(dart.nullable(core.double)),
    locale: dart.finalFieldType(dart.nullable(ui.Locale)),
    background: dart.finalFieldType(dart.nullable(vector_drawable.DrawablePaint)),
    foreground: dart.finalFieldType(dart.nullable(vector_drawable.DrawablePaint)),
    anchor: dart.finalFieldType(dart.nullable(vector_drawable.DrawableTextAnchorPosition))
  }));
  dart.defineExtensionMethods(vector_drawable.DrawableTextStyle, ['toString']);
  var _name = dart.privateName(core, "_name");
  vector_drawable.DrawableTextAnchorPosition = class DrawableTextAnchorPosition extends core._Enum {
    toString() {
      return "DrawableTextAnchorPosition." + this[_name];
    }
  };
  (vector_drawable.DrawableTextAnchorPosition.new = function(index, name) {
    vector_drawable.DrawableTextAnchorPosition.__proto__.new.call(this, index, name);
    ;
  }).prototype = vector_drawable.DrawableTextAnchorPosition.prototype;
  dart.addTypeTests(vector_drawable.DrawableTextAnchorPosition);
  dart.addTypeCaches(vector_drawable.DrawableTextAnchorPosition);
  dart.setLibraryUri(vector_drawable.DrawableTextAnchorPosition, I[2]);
  dart.setStaticFieldSignature(vector_drawable.DrawableTextAnchorPosition, () => ['values', 'start', 'middle', 'end']);
  dart.defineExtensionMethods(vector_drawable.DrawableTextAnchorPosition, ['toString']);
  dart.defineLazy(vector_drawable.DrawableTextAnchorPosition, {
    /*vector_drawable.DrawableTextAnchorPosition.values*/get values() {
      return C[208] || CT.C208;
    },
    /*vector_drawable.DrawableTextAnchorPosition.start*/get start() {
      return C[209] || CT.C209;
    },
    /*vector_drawable.DrawableTextAnchorPosition.middle*/get middle() {
      return C[210] || CT.C210;
    },
    /*vector_drawable.DrawableTextAnchorPosition.end*/get end() {
      return C[211] || CT.C211;
    }
  }, false);
  var id$ = dart.privateName(vector_drawable, "DrawableText.id");
  var offset$0 = dart.privateName(vector_drawable, "DrawableText.offset");
  var anchor$0 = dart.privateName(vector_drawable, "DrawableText.anchor");
  var fill$0 = dart.privateName(vector_drawable, "DrawableText.fill");
  var stroke$0 = dart.privateName(vector_drawable, "DrawableText.stroke");
  var transform$0 = dart.privateName(vector_drawable, "DrawableText.transform");
  vector_drawable.DrawableText = class DrawableText extends core.Object {
    get id() {
      return this[id$];
    }
    set id(value) {
      super.id = value;
    }
    get offset() {
      return this[offset$0];
    }
    set offset(value) {
      super.offset = value;
    }
    get anchor() {
      return this[anchor$0];
    }
    set anchor(value) {
      super.anchor = value;
    }
    get fill() {
      return this[fill$0];
    }
    set fill(value) {
      super.fill = value;
    }
    get stroke() {
      return this[stroke$0];
    }
    set stroke(value) {
      super.stroke = value;
    }
    get transform() {
      return this[transform$0];
    }
    set transform(value) {
      super.transform = value;
    }
    static ['_#new#tearOff'](id, fill, stroke, offset, anchor, opts) {
      let transform = opts && 'transform' in opts ? opts.transform : null;
      return new vector_drawable.DrawableText.new(id, fill, stroke, offset, anchor, {transform: transform});
    }
    get hasDrawableContent() {
      let t22, t22$, t22$0, t22$1;
      return dart.notNull((t22$ = (t22 = this.fill, t22 == null ? null : t22.width), t22$ == null ? 0.0 : t22$)) + dart.notNull((t22$1 = (t22$0 = this.stroke, t22$0 == null ? null : t22$0.width), t22$1 == null ? 0.0 : t22$1)) > 0.0;
    }
    draw(canvas, bounds) {
      if (!this.hasDrawableContent) {
        return;
      }
      if (this.transform != null) {
        canvas.save();
        canvas.transform(dart.nullCheck(this.transform));
      }
      if (this.fill != null) {
        canvas.drawParagraph(dart.nullCheck(this.fill), vector_drawable.DrawableText.resolveOffset(dart.nullCheck(this.fill), this.anchor, this.offset));
      }
      if (this.stroke != null) {
        canvas.drawParagraph(dart.nullCheck(this.stroke), vector_drawable.DrawableText.resolveOffset(dart.nullCheck(this.stroke), this.anchor, this.offset));
      }
      if (this.transform != null) {
        canvas.restore();
      }
    }
    static resolveOffset(paragraph, anchor, offset) {
      if (!(paragraph !== null)) dart.assertFailed(null, I[9], 540, 12, "paragraph != null");
      if (!(anchor !== null)) dart.assertFailed(null, I[9], 541, 12, "anchor != null");
      if (!(offset !== null)) dart.assertFailed(null, I[9], 542, 12, "offset != null");
      switch (anchor) {
        case C[210] || CT.C210:
          {
            return new ui.Offset.new(offset.dx - paragraph.longestLine / 2, offset.dy - paragraph.alphabeticBaseline);
          }
        case C[211] || CT.C211:
          {
            return new ui.Offset.new(offset.dx - paragraph.longestLine, offset.dy - paragraph.alphabeticBaseline);
          }
        case C[209] || CT.C209:
          {
            return new ui.Offset.new(offset.dx, offset.dy - paragraph.alphabeticBaseline);
          }
        default:
          {
            return offset;
          }
      }
    }
  };
  (vector_drawable.DrawableText.new = function(id, fill, stroke, offset, anchor, opts) {
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[id$] = id;
    this[fill$0] = fill;
    this[stroke$0] = stroke;
    this[offset$0] = offset;
    this[anchor$0] = anchor;
    this[transform$0] = transform;
    if (!(fill != null || stroke != null)) dart.assertFailed(null, I[9], 487, 15, "fill != null || stroke != null");
    ;
  }).prototype = vector_drawable.DrawableText.prototype;
  dart.addTypeTests(vector_drawable.DrawableText);
  dart.addTypeCaches(vector_drawable.DrawableText);
  vector_drawable.DrawableText[dart.implements] = () => [vector_drawable.Drawable];
  dart.setMethodSignature(vector_drawable.DrawableText, () => ({
    __proto__: dart.getMethods(vector_drawable.DrawableText.__proto__),
    draw: dart.fnType(dart.void, [ui.Canvas, ui.Rect])
  }));
  dart.setStaticMethodSignature(vector_drawable.DrawableText, () => ['resolveOffset']);
  dart.setGetterSignature(vector_drawable.DrawableText, () => ({
    __proto__: dart.getGetters(vector_drawable.DrawableText.__proto__),
    hasDrawableContent: core.bool
  }));
  dart.setLibraryUri(vector_drawable.DrawableText, I[2]);
  dart.setFieldSignature(vector_drawable.DrawableText, () => ({
    __proto__: dart.getFields(vector_drawable.DrawableText.__proto__),
    id: dart.finalFieldType(dart.nullable(core.String)),
    offset: dart.finalFieldType(ui.Offset),
    anchor: dart.finalFieldType(vector_drawable.DrawableTextAnchorPosition),
    fill: dart.finalFieldType(dart.nullable(ui.Paragraph)),
    stroke: dart.finalFieldType(dart.nullable(ui.Paragraph)),
    transform: dart.finalFieldType(dart.nullable(typed_data.Float64List))
  }));
  var _gradients = dart.privateName(vector_drawable, "_gradients");
  var _clipPaths = dart.privateName(vector_drawable, "_clipPaths");
  var _drawables = dart.privateName(vector_drawable, "_drawables");
  vector_drawable.DrawableDefinitionServer = class DrawableDefinitionServer extends core.Object {
    getDrawable(id, opts) {
      let nullOk = opts && 'nullOk' in opts ? opts.nullOk : false;
      if (!(id !== null)) dart.assertFailed(null, I[9], 577, 12, "id != null");
      let value = this[_drawables][$_get](id);
      if (value == null && nullOk !== true) {
        dart.throw(new core.StateError.new("Expected to find Drawable with id " + id + ".\n" + "Have ids: " + dart.str(this[_drawables][$keys])));
      }
      return value;
    }
    addDrawable(id, drawable) {
      if (!(id !== null)) dart.assertFailed(null, I[9], 588, 12, "id != null");
      if (!(drawable !== null)) dart.assertFailed(null, I[9], 589, 12, "drawable != null");
      if (!(id !== "url(#)")) dart.assertFailed(null, I[9], 590, 12, "id != emptyUrlIri");
      this[_drawables][$_set](id, drawable);
    }
    getShader(id, bounds) {
      if (!(id !== null)) dart.assertFailed(null, I[9], 598, 12, "id != null");
      if (!(bounds !== null)) dart.assertFailed(null, I[9], 599, 12, "bounds != null");
      let srv = this[_gradients][$_get](id);
      return srv != null ? srv.createShader(bounds) : null;
    }
    getGradient(T, id) {
      if (!(id !== null)) dart.assertFailed(null, I[9], 606, 12, "id != null");
      return dart.nullable(T).as(this[_gradients][$_get](id));
    }
    addGradient(id, gradient) {
      if (!(id !== null)) dart.assertFailed(null, I[9], 612, 12, "id != null");
      if (!(gradient !== null)) dart.assertFailed(null, I[9], 613, 12, "gradient != null");
      this[_gradients][$_set](id, gradient);
    }
    getClipPath(id) {
      if (!(id !== null)) dart.assertFailed(null, I[9], 619, 12, "id != null");
      return this[_clipPaths][$_get](id);
    }
    addClipPath(id, paths) {
      if (!(id !== null)) dart.assertFailed(null, I[9], 625, 12, "id != null");
      if (!(paths !== null)) dart.assertFailed(null, I[9], 626, 12, "paths != null");
      this[_clipPaths][$_set](id, paths);
    }
    static ['_#new#tearOff']() {
      return new vector_drawable.DrawableDefinitionServer.new();
    }
  };
  (vector_drawable.DrawableDefinitionServer.new = function() {
    this[_gradients] = new (T$.IdentityMapOfString$DrawableGradient()).new();
    this[_clipPaths] = new (T$.IdentityMapOfString$ListOfPath()).new();
    this[_drawables] = new (T$.IdentityMapOfString$DrawableStyleable()).new();
    ;
  }).prototype = vector_drawable.DrawableDefinitionServer.prototype;
  dart.addTypeTests(vector_drawable.DrawableDefinitionServer);
  dart.addTypeCaches(vector_drawable.DrawableDefinitionServer);
  dart.setMethodSignature(vector_drawable.DrawableDefinitionServer, () => ({
    __proto__: dart.getMethods(vector_drawable.DrawableDefinitionServer.__proto__),
    getDrawable: dart.fnType(dart.nullable(vector_drawable.DrawableStyleable), [core.String], {nullOk: core.bool}, {}),
    addDrawable: dart.fnType(dart.void, [core.String, vector_drawable.DrawableStyleable]),
    getShader: dart.fnType(dart.nullable(ui.Shader), [core.String, ui.Rect]),
    getGradient: dart.gFnType(T => [dart.nullable(T), [core.String]], T => [dart.nullable(vector_drawable.DrawableGradient)]),
    addGradient: dart.fnType(dart.void, [core.String, vector_drawable.DrawableGradient]),
    getClipPath: dart.fnType(dart.nullable(core.List$(ui.Path)), [core.String]),
    addClipPath: dart.fnType(dart.void, [core.String, core.List$(ui.Path)])
  }));
  dart.setLibraryUri(vector_drawable.DrawableDefinitionServer, I[2]);
  dart.setFieldSignature(vector_drawable.DrawableDefinitionServer, () => ({
    __proto__: dart.getFields(vector_drawable.DrawableDefinitionServer.__proto__),
    [_gradients]: dart.finalFieldType(core.Map$(core.String, vector_drawable.DrawableGradient)),
    [_clipPaths]: dart.finalFieldType(core.Map$(core.String, core.List$(ui.Path))),
    [_drawables]: dart.finalFieldType(core.Map$(core.String, vector_drawable.DrawableStyleable))
  }));
  dart.setStaticFieldSignature(vector_drawable.DrawableDefinitionServer, () => ['emptyUrlIri']);
  dart.defineLazy(vector_drawable.DrawableDefinitionServer, {
    /*vector_drawable.DrawableDefinitionServer.emptyUrlIri*/get emptyUrlIri() {
      return "url(#)";
    }
  }, false);
  vector_drawable.GradientUnitMode = class GradientUnitMode extends core._Enum {
    toString() {
      return "GradientUnitMode." + this[_name];
    }
  };
  (vector_drawable.GradientUnitMode.new = function(index, name) {
    vector_drawable.GradientUnitMode.__proto__.new.call(this, index, name);
    ;
  }).prototype = vector_drawable.GradientUnitMode.prototype;
  dart.addTypeTests(vector_drawable.GradientUnitMode);
  dart.addTypeCaches(vector_drawable.GradientUnitMode);
  dart.setLibraryUri(vector_drawable.GradientUnitMode, I[2]);
  dart.setStaticFieldSignature(vector_drawable.GradientUnitMode, () => ['values', 'objectBoundingBox', 'userSpaceOnUse']);
  dart.defineExtensionMethods(vector_drawable.GradientUnitMode, ['toString']);
  dart.defineLazy(vector_drawable.GradientUnitMode, {
    /*vector_drawable.GradientUnitMode.values*/get values() {
      return C[212] || CT.C212;
    },
    /*vector_drawable.GradientUnitMode.objectBoundingBox*/get objectBoundingBox() {
      return C[213] || CT.C213;
    },
    /*vector_drawable.GradientUnitMode.userSpaceOnUse*/get userSpaceOnUse() {
      return C[214] || CT.C214;
    }
  }, false);
  var offsets$ = dart.privateName(vector_drawable, "DrawableGradient.offsets");
  var colors$ = dart.privateName(vector_drawable, "DrawableGradient.colors");
  var spreadMethod$ = dart.privateName(vector_drawable, "DrawableGradient.spreadMethod");
  var unitMode$ = dart.privateName(vector_drawable, "DrawableGradient.unitMode");
  var transform$1 = dart.privateName(vector_drawable, "DrawableGradient.transform");
  vector_drawable.DrawableGradient = class DrawableGradient extends core.Object {
    get offsets() {
      return this[offsets$];
    }
    set offsets(value) {
      super.offsets = value;
    }
    get colors() {
      return this[colors$];
    }
    set colors(value) {
      super.colors = value;
    }
    get spreadMethod() {
      return this[spreadMethod$];
    }
    set spreadMethod(value) {
      super.spreadMethod = value;
    }
    get unitMode() {
      return this[unitMode$];
    }
    set unitMode(value) {
      super.unitMode = value;
    }
    get transform() {
      return this[transform$1];
    }
    set transform(value) {
      super.transform = value;
    }
  };
  (vector_drawable.DrawableGradient.new = function(offsets, colors, opts) {
    let spreadMethod = opts && 'spreadMethod' in opts ? opts.spreadMethod : C[215] || CT.C215;
    let unitMode = opts && 'unitMode' in opts ? opts.unitMode : C[213] || CT.C213;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[offsets$] = offsets;
    this[colors$] = colors;
    this[spreadMethod$] = spreadMethod;
    this[unitMode$] = unitMode;
    this[transform$1] = transform;
    ;
  }).prototype = vector_drawable.DrawableGradient.prototype;
  dart.addTypeTests(vector_drawable.DrawableGradient);
  dart.addTypeCaches(vector_drawable.DrawableGradient);
  dart.setLibraryUri(vector_drawable.DrawableGradient, I[2]);
  dart.setFieldSignature(vector_drawable.DrawableGradient, () => ({
    __proto__: dart.getFields(vector_drawable.DrawableGradient.__proto__),
    offsets: dart.finalFieldType(dart.nullable(core.List$(core.double))),
    colors: dart.finalFieldType(dart.nullable(core.List$(ui.Color))),
    spreadMethod: dart.finalFieldType(ui.TileMode),
    unitMode: dart.finalFieldType(vector_drawable.GradientUnitMode),
    transform: dart.finalFieldType(dart.nullable(typed_data.Float64List))
  }));
  var from$ = dart.privateName(vector_drawable, "DrawableLinearGradient.from");
  var to$ = dart.privateName(vector_drawable, "DrawableLinearGradient.to");
  vector_drawable.DrawableLinearGradient = class DrawableLinearGradient extends vector_drawable.DrawableGradient {
    get from() {
      return this[from$];
    }
    set from(value) {
      super.from = value;
    }
    get to() {
      return this[to$];
    }
    set to(value) {
      super.to = value;
    }
    static ['_#new#tearOff'](opts) {
      let from = opts && 'from' in opts ? opts.from : null;
      let to = opts && 'to' in opts ? opts.to : null;
      let offsets = opts && 'offsets' in opts ? opts.offsets : null;
      let colors = opts && 'colors' in opts ? opts.colors : null;
      let spreadMethod = opts && 'spreadMethod' in opts ? opts.spreadMethod : null;
      let unitMode = opts && 'unitMode' in opts ? opts.unitMode : null;
      let transform = opts && 'transform' in opts ? opts.transform : null;
      return new vector_drawable.DrawableLinearGradient.new({from: from, to: to, offsets: offsets, colors: colors, spreadMethod: spreadMethod, unitMode: unitMode, transform: transform});
    }
    createShader(bounds) {
      let t24;
      let isObjectBoundingBox = this.unitMode === vector_drawable.GradientUnitMode.objectBoundingBox;
      let m4transform = this.transform == null ? vector_math_64.Matrix4.identity() : new vector_math_64.Matrix4.fromFloat64List(dart.nullCheck(this.transform));
      if (isObjectBoundingBox) {
        let scale = parsers.affineMatrix(bounds.width, 0.0, 0.0, bounds.height, 0.0, 0.0);
        let translate = parsers.affineMatrix(1.0, 0.0, 0.0, 1.0, bounds.left, bounds.top);
        m4transform = (t24 = translate.multiplied(scale), (() => {
          t24.multiply(m4transform);
          return t24;
        })());
      }
      let v3from = m4transform.transform3(vector_math_64.Vector3.new(this.from.dx, this.from.dy, 0.0));
      let v3to = m4transform.transform3(vector_math_64.Vector3.new(this.to.dx, this.to.dy, 0.0));
      return ui.Gradient.linear(new ui.Offset.new(v3from.x, v3from.y), new ui.Offset.new(v3to.x, v3to.y), dart.nullCheck(this.colors), this.offsets, this.spreadMethod);
    }
  };
  (vector_drawable.DrawableLinearGradient.new = function(opts) {
    let from = opts && 'from' in opts ? opts.from : null;
    let to = opts && 'to' in opts ? opts.to : null;
    let offsets = opts && 'offsets' in opts ? opts.offsets : null;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let spreadMethod = opts && 'spreadMethod' in opts ? opts.spreadMethod : null;
    let unitMode = opts && 'unitMode' in opts ? opts.unitMode : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[from$] = from;
    this[to$] = to;
    vector_drawable.DrawableLinearGradient.__proto__.new.call(this, offsets, colors, {spreadMethod: spreadMethod, unitMode: unitMode, transform: transform});
    ;
  }).prototype = vector_drawable.DrawableLinearGradient.prototype;
  dart.addTypeTests(vector_drawable.DrawableLinearGradient);
  dart.addTypeCaches(vector_drawable.DrawableLinearGradient);
  dart.setMethodSignature(vector_drawable.DrawableLinearGradient, () => ({
    __proto__: dart.getMethods(vector_drawable.DrawableLinearGradient.__proto__),
    createShader: dart.fnType(ui.Shader, [ui.Rect])
  }));
  dart.setLibraryUri(vector_drawable.DrawableLinearGradient, I[2]);
  dart.setFieldSignature(vector_drawable.DrawableLinearGradient, () => ({
    __proto__: dart.getFields(vector_drawable.DrawableLinearGradient.__proto__),
    from: dart.finalFieldType(ui.Offset),
    to: dart.finalFieldType(ui.Offset)
  }));
  var center$ = dart.privateName(vector_drawable, "DrawableRadialGradient.center");
  var radius$ = dart.privateName(vector_drawable, "DrawableRadialGradient.radius");
  var focal$ = dart.privateName(vector_drawable, "DrawableRadialGradient.focal");
  var focalRadius$ = dart.privateName(vector_drawable, "DrawableRadialGradient.focalRadius");
  vector_drawable.DrawableRadialGradient = class DrawableRadialGradient extends vector_drawable.DrawableGradient {
    get center() {
      return this[center$];
    }
    set center(value) {
      super.center = value;
    }
    get radius() {
      return this[radius$];
    }
    set radius(value) {
      super.radius = value;
    }
    get focal() {
      return this[focal$];
    }
    set focal(value) {
      super.focal = value;
    }
    get focalRadius() {
      return this[focalRadius$];
    }
    set focalRadius(value) {
      super.focalRadius = value;
    }
    static ['_#new#tearOff'](opts) {
      let center = opts && 'center' in opts ? opts.center : null;
      let radius = opts && 'radius' in opts ? opts.radius : null;
      let focal = opts && 'focal' in opts ? opts.focal : null;
      let focalRadius = opts && 'focalRadius' in opts ? opts.focalRadius : 0;
      let offsets = opts && 'offsets' in opts ? opts.offsets : null;
      let colors = opts && 'colors' in opts ? opts.colors : null;
      let spreadMethod = opts && 'spreadMethod' in opts ? opts.spreadMethod : null;
      let unitMode = opts && 'unitMode' in opts ? opts.unitMode : null;
      let transform = opts && 'transform' in opts ? opts.transform : null;
      return new vector_drawable.DrawableRadialGradient.new({center: center, radius: radius, focal: focal, focalRadius: focalRadius, offsets: offsets, colors: colors, spreadMethod: spreadMethod, unitMode: unitMode, transform: transform});
    }
    createShader(bounds) {
      let t24;
      let isObjectBoundingBox = this.unitMode === vector_drawable.GradientUnitMode.objectBoundingBox;
      let m4transform = this.transform == null ? vector_math_64.Matrix4.identity() : new vector_math_64.Matrix4.fromFloat64List(dart.nullCheck(this.transform));
      if (isObjectBoundingBox) {
        let scale = parsers.affineMatrix(bounds.width, 0.0, 0.0, bounds.height, 0.0, 0.0);
        let translate = parsers.affineMatrix(1.0, 0.0, 0.0, 1.0, bounds.left, bounds.top);
        m4transform = (t24 = translate.multiplied(scale), (() => {
          t24.multiply(m4transform);
          return t24;
        })());
      }
      return ui.Gradient.radial(this.center, dart.nullCheck(this.radius), dart.nullCheck(this.colors), this.offsets, this.spreadMethod, m4transform.storage, this.focal, 0.0);
    }
  };
  (vector_drawable.DrawableRadialGradient.new = function(opts) {
    let center = opts && 'center' in opts ? opts.center : null;
    let radius = opts && 'radius' in opts ? opts.radius : null;
    let focal = opts && 'focal' in opts ? opts.focal : null;
    let focalRadius = opts && 'focalRadius' in opts ? opts.focalRadius : 0;
    let offsets = opts && 'offsets' in opts ? opts.offsets : null;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let spreadMethod = opts && 'spreadMethod' in opts ? opts.spreadMethod : null;
    let unitMode = opts && 'unitMode' in opts ? opts.unitMode : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[center$] = center;
    this[radius$] = radius;
    this[focal$] = focal;
    this[focalRadius$] = focalRadius;
    vector_drawable.DrawableRadialGradient.__proto__.new.call(this, offsets, colors, {spreadMethod: spreadMethod, unitMode: unitMode, transform: transform});
    ;
  }).prototype = vector_drawable.DrawableRadialGradient.prototype;
  dart.addTypeTests(vector_drawable.DrawableRadialGradient);
  dart.addTypeCaches(vector_drawable.DrawableRadialGradient);
  dart.setMethodSignature(vector_drawable.DrawableRadialGradient, () => ({
    __proto__: dart.getMethods(vector_drawable.DrawableRadialGradient.__proto__),
    createShader: dart.fnType(ui.Shader, [ui.Rect])
  }));
  dart.setLibraryUri(vector_drawable.DrawableRadialGradient, I[2]);
  dart.setFieldSignature(vector_drawable.DrawableRadialGradient, () => ({
    __proto__: dart.getFields(vector_drawable.DrawableRadialGradient.__proto__),
    center: dart.finalFieldType(ui.Offset),
    radius: dart.finalFieldType(dart.nullable(core.double)),
    focal: dart.finalFieldType(ui.Offset),
    focalRadius: dart.finalFieldType(core.double)
  }));
  var viewBoxOffset$ = dart.privateName(vector_drawable, "DrawableViewport.viewBoxOffset");
  var viewBox$ = dart.privateName(vector_drawable, "DrawableViewport.viewBox");
  var size$ = dart.privateName(vector_drawable, "DrawableViewport.size");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  vector_drawable.DrawableViewport = class DrawableViewport extends core.Object {
    get viewBoxOffset() {
      return this[viewBoxOffset$];
    }
    set viewBoxOffset(value) {
      super.viewBoxOffset = value;
    }
    get viewBox() {
      return this[viewBox$];
    }
    set viewBox(value) {
      super.viewBox = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
    static ['_#new#tearOff'](size, viewBox, opts) {
      let viewBoxOffset = opts && 'viewBoxOffset' in opts ? opts.viewBoxOffset : C[216] || CT.C216;
      return new vector_drawable.DrawableViewport.new(size, viewBox, {viewBoxOffset: viewBoxOffset});
    }
    get viewBoxRect() {
      return ui.Offset.zero['&'](this.viewBox);
    }
    get width() {
      return this.size.width;
    }
    get height() {
      return this.size.height;
    }
    toString() {
      return "DrawableViewport{" + dart.str(this.size) + ", viewBox: " + dart.str(this.viewBox) + ", " + "viewBoxOffset: " + dart.str(this.viewBoxOffset) + "}";
    }
  };
  (vector_drawable.DrawableViewport.new = function(size, viewBox, opts) {
    let viewBoxOffset = opts && 'viewBoxOffset' in opts ? opts.viewBoxOffset : C[216] || CT.C216;
    this[size$] = size;
    this[viewBox$] = viewBox;
    this[viewBoxOffset$] = viewBoxOffset;
    if (!(size !== null)) dart.assertFailed(null, I[9], 816, 16, "size != null");
    if (!(viewBox !== null)) dart.assertFailed(null, I[9], 817, 16, "viewBox != null");
    if (!(viewBoxOffset !== null)) dart.assertFailed(null, I[9], 818, 16, "viewBoxOffset != null");
    ;
  }).prototype = vector_drawable.DrawableViewport.prototype;
  dart.addTypeTests(vector_drawable.DrawableViewport);
  dart.addTypeCaches(vector_drawable.DrawableViewport);
  dart.setGetterSignature(vector_drawable.DrawableViewport, () => ({
    __proto__: dart.getGetters(vector_drawable.DrawableViewport.__proto__),
    viewBoxRect: ui.Rect,
    width: core.double,
    height: core.double
  }));
  dart.setLibraryUri(vector_drawable.DrawableViewport, I[2]);
  dart.setFieldSignature(vector_drawable.DrawableViewport, () => ({
    __proto__: dart.getFields(vector_drawable.DrawableViewport.__proto__),
    viewBoxOffset: dart.finalFieldType(ui.Offset),
    viewBox: dart.finalFieldType(ui.Size),
    size: dart.finalFieldType(ui.Size)
  }));
  dart.defineExtensionMethods(vector_drawable.DrawableViewport, ['toString']);
  var viewport$ = dart.privateName(vector_drawable, "DrawableRoot.viewport");
  var compatibilityTester$ = dart.privateName(vector_drawable, "DrawableRoot.compatibilityTester");
  var id$0 = dart.privateName(vector_drawable, "DrawableRoot.id");
  var transform$2 = dart.privateName(vector_drawable, "DrawableRoot.transform");
  var color$0 = dart.privateName(vector_drawable, "DrawableRoot.color");
  var children$ = dart.privateName(vector_drawable, "DrawableRoot.children");
  var definitions$ = dart.privateName(vector_drawable, "DrawableRoot.definitions");
  var style$1 = dart.privateName(vector_drawable, "DrawableRoot.style");
  vector_drawable.DrawableRoot = class DrawableRoot extends core.Object {
    get viewport() {
      return this[viewport$];
    }
    set viewport(value) {
      super.viewport = value;
    }
    get compatibilityTester() {
      return this[compatibilityTester$];
    }
    set compatibilityTester(value) {
      super.compatibilityTester = value;
    }
    get id() {
      return this[id$0];
    }
    set id(value) {
      super.id = value;
    }
    get transform() {
      return this[transform$2];
    }
    set transform(value) {
      super.transform = value;
    }
    get color() {
      return this[color$0];
    }
    set color(value) {
      super.color = value;
    }
    get children() {
      return this[children$];
    }
    set children(value) {
      super.children = value;
    }
    get definitions() {
      return this[definitions$];
    }
    set definitions(value) {
      super.definitions = value;
    }
    get style() {
      return this[style$1];
    }
    set style(value) {
      super.style = value;
    }
    static ['_#new#tearOff'](id, viewport, children, definitions, style, opts) {
      let transform = opts && 'transform' in opts ? opts.transform : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let compatibilityTester = opts && 'compatibilityTester' in opts ? opts.compatibilityTester : C[217] || CT.C217;
      return new vector_drawable.DrawableRoot.new(id, viewport, children, definitions, style, {transform: transform, color: color, compatibilityTester: compatibilityTester});
    }
    scaleCanvasToViewBox(canvas, desiredSize) {
      let transform = vector_math_64.Matrix4.identity();
      if (render_picture.scaleCanvasToViewBox(transform, desiredSize, this.viewport.viewBoxRect, this.viewport.size)) {
        canvas.transform(transform.storage);
      }
    }
    clipCanvasToViewBox(canvas) {
      canvas.clipRect(this.viewport.viewBoxRect);
    }
    get hasDrawableContent() {
      return this.children[$isNotEmpty] === true && !this.viewport.viewBox.isEmpty;
    }
    draw(canvas, bounds) {
      if (!this.hasDrawableContent) {
        return;
      }
      if (this.transform != null) {
        canvas.save();
        canvas.transform(dart.nullCheck(this.transform));
      }
      if (!this.viewport.viewBoxOffset._equals(ui.Offset.zero)) {
        canvas.translate(this.viewport.viewBoxOffset.dx, this.viewport.viewBoxOffset.dy);
      }
      for (let child of this.children) {
        child.draw(canvas, this.viewport.viewBoxRect);
      }
      if (this.transform != null) {
        canvas.restore();
      }
    }
    toPicture(opts) {
      let t24;
      let size = opts && 'size' in opts ? opts.size : null;
      let clipToViewBox = opts && 'clipToViewBox' in opts ? opts.clipToViewBox : true;
      let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
      if (this.viewport.viewBox.width === 0) {
        dart.throw(new core.StateError.new("Cannot convert to picture with " + dart.str(this.viewport)));
      }
      let recorder = ui.PictureRecorder.new();
      let canvas = ui.Canvas.new(recorder, this.viewport.viewBoxRect);
      if (colorFilter != null) {
        canvas.saveLayer(null, (t24 = ui.Paint.new(), (() => {
          t24.colorFilter = colorFilter;
          return t24;
        })()));
      } else {
        canvas.save();
      }
      if (size != null) {
        this.scaleCanvasToViewBox(canvas, size);
      }
      if (clipToViewBox === true) {
        this.clipCanvasToViewBox(canvas);
      }
      this.draw(canvas, this.viewport.viewBoxRect);
      canvas.restore();
      return recorder.endRecording();
    }
    mergeStyle(newStyle) {
      if (!(newStyle !== null)) dart.assertFailed(null, I[9], 993, 12, "newStyle != null");
      let mergedStyle = vector_drawable.DrawableStyle.mergeAndBlend(this.style, {fill: newStyle.fill, stroke: newStyle.stroke, clipPath: newStyle.clipPath, mask: newStyle.mask, dashArray: newStyle.dashArray, dashOffset: newStyle.dashOffset, pathFillType: newStyle.pathFillType, textStyle: newStyle.textStyle});
      let mergedChildren = this.children[$map](vector_drawable.Drawable, dart.fn(child => {
        if (vector_drawable.DrawableStyleable.is(child)) {
          return child.mergeStyle(mergedStyle);
        }
        return child;
      }, T$.DrawableToDrawable()))[$toList]();
      return new vector_drawable.DrawableRoot.new(this.id, this.viewport, mergedChildren, this.definitions, mergedStyle, {transform: this.transform});
    }
  };
  (vector_drawable.DrawableRoot.new = function(id, viewport, children, definitions, style, opts) {
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let compatibilityTester = opts && 'compatibilityTester' in opts ? opts.compatibilityTester : C[217] || CT.C217;
    this[id$0] = id;
    this[viewport$] = viewport;
    this[children$] = children;
    this[definitions$] = definitions;
    this[style$1] = style;
    this[transform$2] = transform;
    this[color$0] = color;
    this[compatibilityTester$] = compatibilityTester;
    ;
  }).prototype = vector_drawable.DrawableRoot.prototype;
  dart.addTypeTests(vector_drawable.DrawableRoot);
  dart.addTypeCaches(vector_drawable.DrawableRoot);
  vector_drawable.DrawableRoot[dart.implements] = () => [vector_drawable.DrawableParent];
  dart.setMethodSignature(vector_drawable.DrawableRoot, () => ({
    __proto__: dart.getMethods(vector_drawable.DrawableRoot.__proto__),
    scaleCanvasToViewBox: dart.fnType(dart.void, [ui.Canvas, ui.Size]),
    clipCanvasToViewBox: dart.fnType(dart.void, [ui.Canvas]),
    draw: dart.fnType(dart.void, [ui.Canvas, ui.Rect]),
    toPicture: dart.fnType(ui.Picture, [], {clipToViewBox: core.bool, colorFilter: dart.nullable(ui.ColorFilter), size: dart.nullable(ui.Size)}, {}),
    mergeStyle: dart.fnType(vector_drawable.DrawableRoot, [vector_drawable.DrawableStyle])
  }));
  dart.setGetterSignature(vector_drawable.DrawableRoot, () => ({
    __proto__: dart.getGetters(vector_drawable.DrawableRoot.__proto__),
    hasDrawableContent: core.bool
  }));
  dart.setLibraryUri(vector_drawable.DrawableRoot, I[2]);
  dart.setFieldSignature(vector_drawable.DrawableRoot, () => ({
    __proto__: dart.getFields(vector_drawable.DrawableRoot.__proto__),
    viewport: dart.finalFieldType(vector_drawable.DrawableViewport),
    compatibilityTester: dart.finalFieldType(vector_drawable.CacheCompatibilityTester),
    id: dart.finalFieldType(dart.nullable(core.String)),
    transform: dart.finalFieldType(dart.nullable(typed_data.Float64List)),
    color: dart.finalFieldType(dart.nullable(ui.Color)),
    children: dart.finalFieldType(core.List$(vector_drawable.Drawable)),
    definitions: dart.finalFieldType(vector_drawable.DrawableDefinitionServer),
    style: dart.finalFieldType(dart.nullable(vector_drawable.DrawableStyle))
  }));
  var id$1 = dart.privateName(vector_drawable, "DrawableGroup.id");
  var children$0 = dart.privateName(vector_drawable, "DrawableGroup.children");
  var style$2 = dart.privateName(vector_drawable, "DrawableGroup.style");
  var transform$3 = dart.privateName(vector_drawable, "DrawableGroup.transform");
  var color$1 = dart.privateName(vector_drawable, "DrawableGroup.color");
  vector_drawable.DrawableGroup = class DrawableGroup extends core.Object {
    get id() {
      return this[id$1];
    }
    set id(value) {
      super.id = value;
    }
    get children() {
      return this[children$0];
    }
    set children(value) {
      super.children = value;
    }
    get style() {
      return this[style$2];
    }
    set style(value) {
      super.style = value;
    }
    get transform() {
      return this[transform$3];
    }
    set transform(value) {
      super.transform = value;
    }
    get color() {
      return this[color$1];
    }
    set color(value) {
      super.color = value;
    }
    static ['_#new#tearOff'](id, children, style, opts) {
      let transform = opts && 'transform' in opts ? opts.transform : null;
      let color = opts && 'color' in opts ? opts.color : null;
      return new vector_drawable.DrawableGroup.new(id, children, style, {transform: transform, color: color});
    }
    get hasDrawableContent() {
      return this.children != null && dart.nullCheck(this.children)[$isNotEmpty];
    }
    draw(canvas, bounds) {
      let t25, t24;
      if (!this.hasDrawableContent) {
        return;
      }
      let innerDraw = dart.fn(() => {
        if (dart.nullCheck(this.style).groupOpacity === 0) {
          return;
        }
        if (this.transform != null) {
          canvas.save();
          canvas.transform(dart.nullCheck(this.transform));
        }
        let needsSaveLayer = dart.nullCheck(this.style).mask != null;
        let blendingPaint = ui.Paint.new();
        if (dart.nullCheck(this.style).groupOpacity != null && dart.nullCheck(this.style).groupOpacity !== 1.0) {
          blendingPaint.color = new ui.Color.fromRGBO(0, 0, 0, dart.nullCheck(dart.nullCheck(this.style).groupOpacity));
          needsSaveLayer = true;
        }
        if (dart.nullCheck(this.style).blendMode != null) {
          blendingPaint.blendMode = dart.nullCheck(dart.nullCheck(this.style).blendMode);
          needsSaveLayer = true;
        }
        if (needsSaveLayer) {
          canvas.saveLayer(null, blendingPaint);
        }
        for (let child of dart.nullCheck(this.children)) {
          child.draw(canvas, bounds);
        }
        if (dart.nullCheck(this.style).mask != null) {
          canvas.saveLayer(null, vector_drawable._grayscaleDstInPaint);
          dart.nullCheck(dart.nullCheck(this.style).mask).draw(canvas, bounds);
          canvas.restore();
        }
        if (needsSaveLayer) {
          canvas.restore();
        }
        if (this.transform != null) {
          canvas.restore();
        }
      }, T$.VoidToNull());
      if ((t24 = this.style, t24 == null ? null : (t25 = t24.clipPath, t25 == null ? null : t25[$isNotEmpty])) === true) {
        for (let clipPath of dart.nullCheck(dart.nullCheck(this.style).clipPath)) {
          if (this.transform != null) {
            clipPath = clipPath.transform(dart.nullCheck(this.transform));
          }
          canvas.save();
          canvas.clipPath(clipPath);
          if (dart.nullCheck(this.children)[$length] > 1) {
            canvas.saveLayer(null, ui.Paint.new());
          }
          dart.dcall(innerDraw, []);
          if (dart.nullCheck(this.children)[$length] > 1) {
            canvas.restore();
          }
          canvas.restore();
        }
      } else {
        dart.dcall(innerDraw, []);
      }
    }
    mergeStyle(newStyle) {
      if (!(newStyle !== null)) dart.assertFailed(null, I[9], 1125, 12, "newStyle != null");
      let mergedStyle = vector_drawable.DrawableStyle.mergeAndBlend(this.style, {fill: newStyle.fill, stroke: newStyle.stroke, clipPath: newStyle.clipPath, dashArray: newStyle.dashArray, dashOffset: newStyle.dashOffset, pathFillType: newStyle.pathFillType, textStyle: newStyle.textStyle});
      let mergedChildren = dart.nullCheck(this.children)[$map](vector_drawable.Drawable, dart.fn(child => {
        if (vector_drawable.DrawableStyleable.is(child)) {
          return child.mergeStyle(mergedStyle);
        }
        return child;
      }, T$.DrawableToDrawable()))[$toList]();
      return new vector_drawable.DrawableGroup.new(this.id, mergedChildren, mergedStyle, {transform: this.transform});
    }
  };
  (vector_drawable.DrawableGroup.new = function(id, children, style, opts) {
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let color = opts && 'color' in opts ? opts.color : null;
    this[id$1] = id;
    this[children$0] = children;
    this[style$2] = style;
    this[transform$3] = transform;
    this[color$1] = color;
    ;
  }).prototype = vector_drawable.DrawableGroup.prototype;
  dart.addTypeTests(vector_drawable.DrawableGroup);
  dart.addTypeCaches(vector_drawable.DrawableGroup);
  vector_drawable.DrawableGroup[dart.implements] = () => [vector_drawable.DrawableStyleable, vector_drawable.DrawableParent];
  dart.setMethodSignature(vector_drawable.DrawableGroup, () => ({
    __proto__: dart.getMethods(vector_drawable.DrawableGroup.__proto__),
    draw: dart.fnType(dart.void, [ui.Canvas, ui.Rect]),
    mergeStyle: dart.fnType(vector_drawable.DrawableGroup, [vector_drawable.DrawableStyle])
  }));
  dart.setGetterSignature(vector_drawable.DrawableGroup, () => ({
    __proto__: dart.getGetters(vector_drawable.DrawableGroup.__proto__),
    hasDrawableContent: core.bool
  }));
  dart.setLibraryUri(vector_drawable.DrawableGroup, I[2]);
  dart.setFieldSignature(vector_drawable.DrawableGroup, () => ({
    __proto__: dart.getFields(vector_drawable.DrawableGroup.__proto__),
    id: dart.finalFieldType(dart.nullable(core.String)),
    children: dart.finalFieldType(dart.nullable(core.List$(vector_drawable.Drawable))),
    style: dart.finalFieldType(dart.nullable(vector_drawable.DrawableStyle)),
    transform: dart.finalFieldType(dart.nullable(typed_data.Float64List)),
    color: dart.finalFieldType(dart.nullable(ui.Color))
  }));
  var id$2 = dart.privateName(vector_drawable, "DrawableRasterImage.id");
  var image$ = dart.privateName(vector_drawable, "DrawableRasterImage.image");
  var offset$1 = dart.privateName(vector_drawable, "DrawableRasterImage.offset");
  var size$0 = dart.privateName(vector_drawable, "DrawableRasterImage.size");
  var transform$4 = dart.privateName(vector_drawable, "DrawableRasterImage.transform");
  var style$3 = dart.privateName(vector_drawable, "DrawableRasterImage.style");
  vector_drawable.DrawableRasterImage = class DrawableRasterImage extends core.Object {
    get id() {
      return this[id$2];
    }
    set id(value) {
      super.id = value;
    }
    get image() {
      return this[image$];
    }
    set image(value) {
      super.image = value;
    }
    get offset() {
      return this[offset$1];
    }
    set offset(value) {
      super.offset = value;
    }
    get size() {
      return this[size$0];
    }
    set size(value) {
      super.size = value;
    }
    get transform() {
      return this[transform$4];
    }
    set transform(value) {
      super.transform = value;
    }
    get style() {
      return this[style$3];
    }
    set style(value) {
      super.style = value;
    }
    static ['_#new#tearOff'](id, image, offset, style, opts) {
      let size = opts && 'size' in opts ? opts.size : null;
      let transform = opts && 'transform' in opts ? opts.transform : null;
      return new vector_drawable.DrawableRasterImage.new(id, image, offset, style, {size: size, transform: transform});
    }
    draw(canvas, bounds) {
      let imageSize = new ui.Size.new(this.image.width[$toDouble](), this.image.height[$toDouble]());
      let desiredSize = imageSize;
      let scale = 1.0;
      if (this.size != null) {
        desiredSize = this.size;
        scale = math.min(core.double, dart.nullCheck(this.size).width / this.image.width, dart.nullCheck(this.size).height / this.image.height);
      }
      if (scale !== 1.0 || !this.offset._equals(ui.Offset.zero) || this.transform != null) {
        let halfDesiredSize = dart.nullCheck(desiredSize)['/'](2.0);
        let scaledHalfImageSize = imageSize['*'](scale)['/'](2.0);
        let shift = new ui.Offset.new(halfDesiredSize.width - scaledHalfImageSize.width, halfDesiredSize.height - scaledHalfImageSize.height);
        canvas.save();
        if (this.transform != null) {
          canvas.transform(dart.nullCheck(this.transform));
        }
        canvas.translate(this.offset.dx + shift.dx, this.offset.dy + shift.dy);
        canvas.scale(scale, scale);
      }
      canvas.drawImage(this.image, ui.Offset.zero, ui.Paint.new());
      if (scale !== 1.0 || !this.offset._equals(ui.Offset.zero) || this.transform != null) {
        canvas.restore();
      }
    }
    get hasDrawableContent() {
      return this.image.height > 0 && this.image.width > 0;
    }
    mergeStyle(newStyle) {
      if (!(newStyle !== null)) dart.assertFailed(null, I[9], 1225, 12, "newStyle != null");
      return new vector_drawable.DrawableRasterImage.new(this.id, this.image, this.offset, vector_drawable.DrawableStyle.mergeAndBlend(this.style, {fill: newStyle.fill, stroke: newStyle.stroke, clipPath: newStyle.clipPath, mask: newStyle.mask, dashArray: newStyle.dashArray, dashOffset: newStyle.dashOffset, pathFillType: newStyle.pathFillType, textStyle: newStyle.textStyle}), {size: this.size, transform: this.transform});
    }
  };
  (vector_drawable.DrawableRasterImage.new = function(id, image, offset, style, opts) {
    let size = opts && 'size' in opts ? opts.size : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[id$2] = id;
    this[image$] = image;
    this[offset$1] = offset;
    this[style$3] = style;
    this[size$0] = size;
    this[transform$4] = transform;
    if (!(image !== null)) dart.assertFailed(null, I[9], 1164, 16, "image != null");
    if (!(offset !== null)) dart.assertFailed(null, I[9], 1165, 16, "offset != null");
    ;
  }).prototype = vector_drawable.DrawableRasterImage.prototype;
  dart.addTypeTests(vector_drawable.DrawableRasterImage);
  dart.addTypeCaches(vector_drawable.DrawableRasterImage);
  vector_drawable.DrawableRasterImage[dart.implements] = () => [vector_drawable.DrawableStyleable];
  dart.setMethodSignature(vector_drawable.DrawableRasterImage, () => ({
    __proto__: dart.getMethods(vector_drawable.DrawableRasterImage.__proto__),
    draw: dart.fnType(dart.void, [ui.Canvas, ui.Rect]),
    mergeStyle: dart.fnType(vector_drawable.DrawableRasterImage, [vector_drawable.DrawableStyle])
  }));
  dart.setGetterSignature(vector_drawable.DrawableRasterImage, () => ({
    __proto__: dart.getGetters(vector_drawable.DrawableRasterImage.__proto__),
    hasDrawableContent: core.bool
  }));
  dart.setLibraryUri(vector_drawable.DrawableRasterImage, I[2]);
  dart.setFieldSignature(vector_drawable.DrawableRasterImage, () => ({
    __proto__: dart.getFields(vector_drawable.DrawableRasterImage.__proto__),
    id: dart.finalFieldType(dart.nullable(core.String)),
    image: dart.finalFieldType(ui.Image),
    offset: dart.finalFieldType(ui.Offset),
    size: dart.finalFieldType(dart.nullable(ui.Size)),
    transform: dart.finalFieldType(dart.nullable(typed_data.Float64List)),
    style: dart.finalFieldType(vector_drawable.DrawableStyle)
  }));
  var id$3 = dart.privateName(vector_drawable, "DrawableShape.id");
  var transform$5 = dart.privateName(vector_drawable, "DrawableShape.transform");
  var style$4 = dart.privateName(vector_drawable, "DrawableShape.style");
  var path$ = dart.privateName(vector_drawable, "DrawableShape.path");
  vector_drawable.DrawableShape = class DrawableShape extends core.Object {
    get id() {
      return this[id$3];
    }
    set id(value) {
      super.id = value;
    }
    get transform() {
      return this[transform$5];
    }
    set transform(value) {
      super.transform = value;
    }
    get style() {
      return this[style$4];
    }
    set style(value) {
      super.style = value;
    }
    get path() {
      return this[path$];
    }
    set path(value) {
      super.path = value;
    }
    static ['_#new#tearOff'](id, path, style, opts) {
      let transform = opts && 'transform' in opts ? opts.transform : null;
      return new vector_drawable.DrawableShape.new(id, path, style, {transform: transform});
    }
    get bounds() {
      return this.path.getBounds();
    }
    get hasDrawableContent() {
      return this.bounds.width + this.bounds.height > 0;
    }
    draw(canvas, bounds) {
      let t24, t24$;
      if (!this.hasDrawableContent) {
        return;
      }
      this.path.fillType = (t24 = this.style.pathFillType, t24 == null ? ui.PathFillType.nonZero : t24);
      let innerDraw = dart.fn(() => {
        let t24, t24$, t24$0;
        if (this.transform != null) {
          canvas.save();
          canvas.transform(dart.nullCheck(this.transform));
        }
        if (this.style.blendMode != null) {
          canvas.saveLayer(null, (t24 = ui.Paint.new(), (() => {
            t24.blendMode = dart.nullCheck(this.style.blendMode);
            return t24;
          })()));
        }
        if (this.style.mask != null) {
          canvas.saveLayer(null, ui.Paint.new());
        }
        if ((t24$ = this.style.fill, t24$ == null ? null : t24$.color) != null) {
          if (!(dart.nullCheck(this.style.fill).style === ui.PaintingStyle.fill)) dart.assertFailed(null, I[9], 1296, 16, "style.fill!.style == PaintingStyle.fill");
          canvas.drawPath(this.path, dart.nullCheck(this.style.fill).toFlutterPaint());
        }
        if ((t24$0 = this.style.stroke, t24$0 == null ? null : t24$0.color) != null && (dart.nullCheck(this.style.stroke).strokeWidth == null || dart.nullCheck(this.style.stroke).strokeWidth != null && dart.nullCheck(dart.nullCheck(this.style.stroke).strokeWidth) > 0)) {
          if (!(dart.nullCheck(this.style.stroke).style === ui.PaintingStyle.stroke)) dart.assertFailed(null, I[9], 1304, 16, "style.stroke!.style == PaintingStyle.stroke");
          if (this.style.dashArray != null && this.style.dashArray !== vector_drawable.DrawableStyle.emptyDashArray) {
            canvas.drawPath(dash_path.dashPath(this.path, {dashArray: dart.nullCheck(this.style.dashArray), dashOffset: this.style.dashOffset}), dart.nullCheck(this.style.stroke).toFlutterPaint());
          } else {
            canvas.drawPath(this.path, dart.nullCheck(this.style.stroke).toFlutterPaint());
          }
        }
        if (this.style.mask != null) {
          canvas.saveLayer(null, vector_drawable._grayscaleDstInPaint);
          dart.nullCheck(this.style.mask).draw(canvas, bounds);
          canvas.restore();
          canvas.restore();
        }
        if (this.style.blendMode != null) {
          canvas.restore();
        }
        if (this.transform != null) {
          canvas.restore();
        }
      }, T$.VoidToNull());
      if ((t24$ = this.style.clipPath, t24$ == null ? null : t24$[$isNotEmpty]) === true) {
        for (let clip of dart.nullCheck(this.style.clipPath)) {
          canvas.save();
          canvas.clipPath(clip);
          dart.dcall(innerDraw, []);
          canvas.restore();
        }
      } else {
        dart.dcall(innerDraw, []);
      }
    }
    mergeStyle(newStyle) {
      if (!(newStyle !== null)) dart.assertFailed(null, I[9], 1349, 12, "newStyle != null");
      return new vector_drawable.DrawableShape.new(this.id, this.path, vector_drawable.DrawableStyle.mergeAndBlend(this.style, {fill: newStyle.fill, stroke: newStyle.stroke, clipPath: newStyle.clipPath, mask: newStyle.mask, dashArray: newStyle.dashArray, dashOffset: newStyle.dashOffset, pathFillType: newStyle.pathFillType, textStyle: newStyle.textStyle}), {transform: this.transform});
    }
  };
  (vector_drawable.DrawableShape.new = function(id, path, style, opts) {
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[id$3] = id;
    this[path$] = path;
    this[style$4] = style;
    this[transform$5] = transform;
    if (!(path !== null)) dart.assertFailed(null, I[9], 1251, 16, "path != null");
    if (!(style !== null)) dart.assertFailed(null, I[9], 1252, 16, "style != null");
    ;
  }).prototype = vector_drawable.DrawableShape.prototype;
  dart.addTypeTests(vector_drawable.DrawableShape);
  dart.addTypeCaches(vector_drawable.DrawableShape);
  vector_drawable.DrawableShape[dart.implements] = () => [vector_drawable.DrawableStyleable];
  dart.setMethodSignature(vector_drawable.DrawableShape, () => ({
    __proto__: dart.getMethods(vector_drawable.DrawableShape.__proto__),
    draw: dart.fnType(dart.void, [ui.Canvas, ui.Rect]),
    mergeStyle: dart.fnType(vector_drawable.DrawableShape, [vector_drawable.DrawableStyle])
  }));
  dart.setGetterSignature(vector_drawable.DrawableShape, () => ({
    __proto__: dart.getGetters(vector_drawable.DrawableShape.__proto__),
    bounds: ui.Rect,
    hasDrawableContent: core.bool
  }));
  dart.setLibraryUri(vector_drawable.DrawableShape, I[2]);
  dart.setFieldSignature(vector_drawable.DrawableShape, () => ({
    __proto__: dart.getFields(vector_drawable.DrawableShape.__proto__),
    id: dart.finalFieldType(dart.nullable(core.String)),
    transform: dart.finalFieldType(dart.nullable(typed_data.Float64List)),
    style: dart.finalFieldType(vector_drawable.DrawableStyle),
    path: dart.finalFieldType(ui.Path)
  }));
  var CkMatrixColorFilter_matrix = dart.privateName(_engine, "CkMatrixColorFilter.matrix");
  dart.defineLazy(vector_drawable, {
    /*vector_drawable._grayscaleDstInPaint*/get _grayscaleDstInPaint() {
      let t24;
      return t24 = ui.Paint.new(), (() => {
        t24.blendMode = ui.BlendMode.dstIn;
        t24.colorFilter = C[218] || CT.C218;
        return t24;
      })();
    }
  }, false);
  var listener$ = dart.privateName(picture_stream, "_PictureListenerPair.listener");
  var errorListener$ = dart.privateName(picture_stream, "_PictureListenerPair.errorListener");
  picture_stream._PictureListenerPair = class _PictureListenerPair extends core.Object {
    get listener() {
      return this[listener$];
    }
    set listener(value) {
      super.listener = value;
    }
    get errorListener() {
      return this[errorListener$];
    }
    set errorListener(value) {
      super.errorListener = value;
    }
    static ['_#new#tearOff'](listener, errorListener) {
      return new picture_stream._PictureListenerPair.new(listener, errorListener);
    }
  };
  (picture_stream._PictureListenerPair.new = function(listener, errorListener) {
    this[listener$] = listener;
    this[errorListener$] = errorListener;
    ;
  }).prototype = picture_stream._PictureListenerPair.prototype;
  dart.addTypeTests(picture_stream._PictureListenerPair);
  dart.addTypeCaches(picture_stream._PictureListenerPair);
  dart.setLibraryUri(picture_stream._PictureListenerPair, I[10]);
  dart.setFieldSignature(picture_stream._PictureListenerPair, () => ({
    __proto__: dart.getFields(picture_stream._PictureListenerPair.__proto__),
    listener: dart.finalFieldType(dart.fnType(dart.dynamic, [dart.nullable(picture_stream.PictureInfo), core.bool])),
    errorListener: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.Object, core.StackTrace])))
  }));
  var viewport$0 = dart.privateName(picture_stream, "PictureInfo.viewport");
  var size$1 = dart.privateName(picture_stream, "PictureInfo.size");
  var compatibilityTester$0 = dart.privateName(picture_stream, "PictureInfo.compatibilityTester");
  var _handles = dart.privateName(picture_stream, "_handles");
  var _picture$0 = dart.privateName(picture_stream, "_picture");
  var _id = dart.privateName(picture_stream, "_id");
  var _disposeHandle = dart.privateName(picture_stream, "_disposeHandle");
  picture_stream.PictureInfo = class PictureInfo extends core.Object {
    get viewport() {
      return this[viewport$0];
    }
    set viewport(value) {
      super.viewport = value;
    }
    get size() {
      return this[size$1];
    }
    set size(value) {
      super.size = value;
    }
    get compatibilityTester() {
      return this[compatibilityTester$0];
    }
    set compatibilityTester(value) {
      super.compatibilityTester = value;
    }
    static ['_#new#tearOff'](opts) {
      let picture = opts && 'picture' in opts ? opts.picture : null;
      let viewport = opts && 'viewport' in opts ? opts.viewport : null;
      let size = opts && 'size' in opts ? opts.size : C[220] || CT.C220;
      let compatibilityTester = opts && 'compatibilityTester' in opts ? opts.compatibilityTester : null;
      return new picture_stream.PictureInfo.new({picture: picture, viewport: viewport, size: size, compatibilityTester: compatibilityTester});
    }
    get picture() {
      return this[_picture$0];
    }
    createLayer() {
      if (!(this.picture != null)) dart.assertFailed(null, I[11], 63, 12, "picture != null");
      return new picture_stream._NonOwningComplexPictureLayer.new(this);
    }
    get debugHandleCount() {
      {
        return this[_handles][$length];
      }
      return null;
    }
    createHandle() {
      let handle = new picture_stream.PictureHandle.__(this);
      this[_handles].add(handle[_id]);
      return handle;
    }
    [_disposeHandle](handle) {
      if (!this[_handles][$isNotEmpty]) dart.assertFailed(null, I[11], 90, 12, "_handles.isNotEmpty");
      if (!(this[_picture$0] != null)) dart.assertFailed(null, I[11], 91, 12, "_picture != null");
      let removed = this[_handles].remove(handle[_id]);
      if (!removed) dart.assertFailed(null, I[11], 93, 12, "removed");
      if (this[_handles][$isEmpty]) {
        dart.nullCheck(this[_picture$0]).dispose();
        this[_picture$0] = null;
      }
    }
  };
  (picture_stream.PictureInfo.new = function(opts) {
    let picture = opts && 'picture' in opts ? opts.picture : null;
    let viewport = opts && 'viewport' in opts ? opts.viewport : null;
    let size = opts && 'size' in opts ? opts.size : C[220] || CT.C220;
    let compatibilityTester = opts && 'compatibilityTester' in opts ? opts.compatibilityTester : null;
    this[_handles] = T$.LinkedHashSetOfint().new();
    this[viewport$0] = viewport;
    this[size$1] = size;
    this[compatibilityTester$0] = compatibilityTester;
    if (!(picture !== null)) dart.assertFailed(null, I[11], 33, 16, "picture != null");
    if (!(viewport !== null)) dart.assertFailed(null, I[11], 34, 16, "viewport != null");
    if (!(size !== null)) dart.assertFailed(null, I[11], 35, 16, "size != null");
    this[_picture$0] = picture;
    ;
  }).prototype = picture_stream.PictureInfo.prototype;
  dart.addTypeTests(picture_stream.PictureInfo);
  dart.addTypeCaches(picture_stream.PictureInfo);
  dart.setMethodSignature(picture_stream.PictureInfo, () => ({
    __proto__: dart.getMethods(picture_stream.PictureInfo.__proto__),
    createLayer: dart.fnType(layer.PictureLayer, []),
    createHandle: dart.fnType(picture_stream.PictureHandle, []),
    [_disposeHandle]: dart.fnType(dart.void, [picture_stream.PictureHandle])
  }));
  dart.setGetterSignature(picture_stream.PictureInfo, () => ({
    __proto__: dart.getGetters(picture_stream.PictureInfo.__proto__),
    picture: dart.nullable(ui.Picture),
    debugHandleCount: dart.nullable(core.int)
  }));
  dart.setLibraryUri(picture_stream.PictureInfo, I[10]);
  dart.setFieldSignature(picture_stream.PictureInfo, () => ({
    __proto__: dart.getFields(picture_stream.PictureInfo.__proto__),
    [_picture$0]: dart.fieldType(dart.nullable(ui.Picture)),
    viewport: dart.finalFieldType(ui.Rect),
    size: dart.finalFieldType(ui.Size),
    compatibilityTester: dart.finalFieldType(vector_drawable.CacheCompatibilityTester),
    [_handles]: dart.finalFieldType(core.Set$(core.int))
  }));
  var _owner$ = dart.privateName(picture_stream, "_owner");
  picture_stream.PictureHandle = class PictureHandle extends core.Object {
    static ['_#_#tearOff'](_owner) {
      return new picture_stream.PictureHandle.__(_owner);
    }
    dispose() {
      this[_owner$][_disposeHandle](this);
    }
    get hashCode() {
      return this[_id];
    }
    _equals(other) {
      if (other == null) return false;
      return picture_stream.PictureHandle.is(other) && other[_id] === this[_id];
    }
  };
  (picture_stream.PictureHandle.__ = function(_owner) {
    let t24;
    this[_id] = (t24 = picture_stream.PictureHandle._counter, picture_stream.PictureHandle._counter = dart.notNull(t24) + 1, t24);
    this[_owner$] = _owner;
    ;
  }).prototype = picture_stream.PictureHandle.prototype;
  dart.addTypeTests(picture_stream.PictureHandle);
  dart.addTypeCaches(picture_stream.PictureHandle);
  dart.setMethodSignature(picture_stream.PictureHandle, () => ({
    __proto__: dart.getMethods(picture_stream.PictureHandle.__proto__),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(picture_stream.PictureHandle, I[10]);
  dart.setFieldSignature(picture_stream.PictureHandle, () => ({
    __proto__: dart.getFields(picture_stream.PictureHandle.__proto__),
    [_id]: dart.finalFieldType(core.int),
    [_owner$]: dart.finalFieldType(picture_stream.PictureInfo)
  }));
  dart.setStaticFieldSignature(picture_stream.PictureHandle, () => ['_counter']);
  dart.defineExtensionMethods(picture_stream.PictureHandle, ['_equals']);
  dart.defineExtensionAccessors(picture_stream.PictureHandle, ['hashCode']);
  dart.defineLazy(picture_stream.PictureHandle, {
    /*picture_stream.PictureHandle._counter*/get _counter() {
      return 1;
    },
    set _counter(_) {}
  }, false);
  var _completer = dart.privateName(picture_stream, "_completer");
  var _listeners = dart.privateName(picture_stream, "_listeners");
  const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36.new = function() {
  }).prototype = Object_Diagnosticable$36.prototype;
  dart.applyMixin(Object_Diagnosticable$36, diagnostics.Diagnosticable);
  picture_stream.PictureStream = class PictureStream extends Object_Diagnosticable$36 {
    static ['_#new#tearOff']() {
      return new picture_stream.PictureStream.new();
    }
    get completer() {
      return this[_completer];
    }
    setCompleter(value) {
      if (!(this[_completer] == null)) dart.assertFailed(null, I[11], 180, 12, "_completer == null");
      this[_completer] = value;
      if (this[_listeners] != null) {
        let initialListeners = dart.nullCheck(this[_listeners]);
        this[_listeners] = null;
        for (let pair of initialListeners) {
          dart.nullCheck(this[_completer]).addListener(pair.listener, {onError: pair.errorListener});
        }
      }
    }
    addListener(listener, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      if (this[_completer] != null) {
        return dart.nullCheck(this[_completer]).addListener(listener, {onError: onError});
      }
      this[_listeners] == null ? this[_listeners] = T$.JSArrayOf_PictureListenerPair().of([]) : null;
      dart.nullCheck(this[_listeners])[$add](new picture_stream._PictureListenerPair.new(listener, onError));
    }
    removeListener(listener) {
      if (this[_completer] != null) {
        return dart.nullCheck(this[_completer]).removeListener(listener);
      }
      if (!(this[_listeners] != null)) dart.assertFailed(null, I[11], 215, 12, "_listeners != null");
      dart.nullCheck(this[_listeners])[$removeWhere](dart.fn(pair => pair.listener[$_equals](listener), T$._PictureListenerPairTobool()));
    }
    get key() {
      return this[_completer] != null ? this[_completer] : this;
    }
    debugFillProperties(properties) {
      let t24, t24$, t24$0, t24$1;
      super.debugFillProperties(properties);
      properties.add(new (T$.ObjectFlagPropertyOfPictureStreamCompleter()).new("completer", this[_completer], {ifPresent: (t24 = this[_completer], t24 == null ? null : t24.toStringShort()), ifNull: "unresolved"}));
      properties.add(new (T$.ObjectFlagPropertyOfListOf_PictureListenerPair()).new("listeners", this[_listeners], {ifPresent: dart.str((t24$ = this[_listeners], t24$ == null ? null : t24$[$length])) + " listener" + ((t24$0 = this[_listeners], t24$0 == null ? null : t24$0[$length]) === 1 ? "" : "s"), ifNull: "no listeners", level: this[_completer] != null ? diagnostics.DiagnosticLevel.hidden : diagnostics.DiagnosticLevel.info}));
      t24$1 = this[_completer];
      t24$1 == null ? null : t24$1.debugFillProperties(properties);
    }
  };
  (picture_stream.PictureStream.new = function() {
    this[_completer] = null;
    this[_listeners] = null;
    ;
  }).prototype = picture_stream.PictureStream.prototype;
  dart.addTypeTests(picture_stream.PictureStream);
  dart.addTypeCaches(picture_stream.PictureStream);
  dart.setMethodSignature(picture_stream.PictureStream, () => ({
    __proto__: dart.getMethods(picture_stream.PictureStream.__proto__),
    setCompleter: dart.fnType(dart.void, [picture_stream.PictureStreamCompleter]),
    addListener: dart.fnType(dart.void, [dart.fnType(dart.dynamic, [dart.nullable(picture_stream.PictureInfo), core.bool])], {onError: dart.nullable(dart.fnType(dart.void, [core.Object, core.StackTrace]))}, {}),
    removeListener: dart.fnType(dart.void, [dart.fnType(dart.dynamic, [dart.nullable(picture_stream.PictureInfo), core.bool])])
  }));
  dart.setGetterSignature(picture_stream.PictureStream, () => ({
    __proto__: dart.getGetters(picture_stream.PictureStream.__proto__),
    completer: dart.nullable(picture_stream.PictureStreamCompleter),
    key: dart.nullable(core.Object)
  }));
  dart.setLibraryUri(picture_stream.PictureStream, I[10]);
  dart.setFieldSignature(picture_stream.PictureStream, () => ({
    __proto__: dart.getFields(picture_stream.PictureStream.__proto__),
    [_completer]: dart.fieldType(dart.nullable(picture_stream.PictureStreamCompleter)),
    [_listeners]: dart.fieldType(dart.nullable(core.List$(picture_stream._PictureListenerPair)))
  }));
  var _current = dart.privateName(picture_stream, "_current");
  var _handle$ = dart.privateName(picture_stream, "_handle");
  var _cached = dart.privateName(picture_stream, "_cached");
  var _handleImageError = dart.privateName(picture_stream, "_handleImageError");
  const Object_Diagnosticable$36$ = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$.new = function() {
  }).prototype = Object_Diagnosticable$36$.prototype;
  dart.applyMixin(Object_Diagnosticable$36$, diagnostics.Diagnosticable);
  picture_stream.PictureStreamCompleter = class PictureStreamCompleter extends Object_Diagnosticable$36$ {
    get cached() {
      return this[_cached];
    }
    set cached(value) {
      let t24;
      if (value === this[_cached]) {
        return;
      }
      if (!value && this[_listeners][$isEmpty]) {
        t24 = this[_handle$];
        t24 == null ? null : t24.dispose();
        this[_handle$] = null;
        this[_current] = null;
      }
      this[_cached] = value;
    }
    addListener(listener, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      this[_listeners][$add](new picture_stream._PictureListenerPair.new(listener, onError));
      if (this[_current] != null) {
        try {
          listener(this[_current], true);
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          if (core.Object.is(exception)) {
            this[_handleImageError](new assertions.ErrorDescription.new("by a synchronously-called image listener"), exception, stack);
          } else
            throw e;
        }
      }
    }
    removeListener(listener) {
      let t25;
      this[_listeners][$removeWhere](dart.fn(pair => pair.listener[$_equals](listener), T$._PictureListenerPairTobool()));
      if (this[_listeners][$isEmpty] && !this.cached) {
        t25 = this[_handle$];
        t25 == null ? null : t25.dispose();
        this[_current] = null;
        this[_handle$] = null;
      }
    }
    isCompatible(oldData, newData) {
      let t25, t25$;
      t25$ = (t25 = this[_current], t25 == null ? null : t25.compatibilityTester.isCompatible(oldData, newData));
      return t25$ == null ? true : t25$;
    }
    setPicture(picture) {
      let t25, t25$, t27, t26, t25$0;
      t25 = this[_handle$];
      t25 == null ? null : t25.dispose();
      this[_current] = picture;
      this[_handle$] = (t25$ = this[_current], t25$ == null ? null : t25$.createHandle());
      if (this[_listeners][$isEmpty]) {
        return;
      }
      let localListeners = T$.ListOf_PictureListenerPair().from(this[_listeners]);
      for (let listenerPair of localListeners) {
        try {
          t25$0 = listenerPair;
          t26 = picture;
          t27 = false;
          t25$0.listener(t26, t27);
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          if (core.Object.is(exception)) {
            if (listenerPair.errorListener != null) {
              dart.nullCheck(listenerPair.errorListener)(exception, stack);
            } else {
              this[_handleImageError](new assertions.ErrorDescription.new("by a picture listener"), exception, stack);
            }
          } else
            throw e;
        }
      }
    }
    [_handleImageError](context, exception, stack) {
      assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: core.StackTrace.as(stack), library: "SVG", context: context}));
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (T$.DiagnosticsPropertyOfPictureInfo()).new("current", this[_current], {ifNull: "unresolved", showName: false}));
      properties.add(new (T$.ObjectFlagPropertyOfListOf_PictureListenerPair()).new("listeners", this[_listeners], {ifPresent: dart.str(this[_listeners][$length]) + " listener" + (this[_listeners][$length] === 1 ? "" : "s")}));
      properties.add(new diagnostics.FlagProperty.new("cached", {value: this.cached, ifTrue: "cached"}));
    }
  };
  (picture_stream.PictureStreamCompleter.new = function() {
    this[_listeners] = T$.JSArrayOf_PictureListenerPair().of([]);
    this[_current] = null;
    this[_handle$] = null;
    this[_cached] = false;
    ;
  }).prototype = picture_stream.PictureStreamCompleter.prototype;
  dart.addTypeTests(picture_stream.PictureStreamCompleter);
  dart.addTypeCaches(picture_stream.PictureStreamCompleter);
  dart.setMethodSignature(picture_stream.PictureStreamCompleter, () => ({
    __proto__: dart.getMethods(picture_stream.PictureStreamCompleter.__proto__),
    addListener: dart.fnType(dart.void, [dart.fnType(dart.dynamic, [dart.nullable(picture_stream.PictureInfo), core.bool])], {onError: dart.nullable(dart.fnType(dart.void, [core.Object, core.StackTrace]))}, {}),
    removeListener: dart.fnType(dart.void, [dart.fnType(dart.dynamic, [dart.nullable(picture_stream.PictureInfo), core.bool])]),
    isCompatible: dart.fnType(core.bool, [theme.SvgTheme, theme.SvgTheme]),
    setPicture: dart.fnType(dart.void, [dart.nullable(picture_stream.PictureInfo)]),
    [_handleImageError]: dart.fnType(dart.void, [diagnostics.DiagnosticsNode, core.Object, dart.dynamic])
  }));
  dart.setGetterSignature(picture_stream.PictureStreamCompleter, () => ({
    __proto__: dart.getGetters(picture_stream.PictureStreamCompleter.__proto__),
    cached: core.bool
  }));
  dart.setSetterSignature(picture_stream.PictureStreamCompleter, () => ({
    __proto__: dart.getSetters(picture_stream.PictureStreamCompleter.__proto__),
    cached: core.bool
  }));
  dart.setLibraryUri(picture_stream.PictureStreamCompleter, I[10]);
  dart.setFieldSignature(picture_stream.PictureStreamCompleter, () => ({
    __proto__: dart.getFields(picture_stream.PictureStreamCompleter.__proto__),
    [_listeners]: dart.finalFieldType(core.List$(picture_stream._PictureListenerPair)),
    [_current]: dart.fieldType(dart.nullable(picture_stream.PictureInfo)),
    [_handle$]: dart.fieldType(dart.nullable(picture_stream.PictureHandle)),
    [_cached]: dart.fieldType(core.bool)
  }));
  picture_stream.OneFramePictureStreamCompleter = class OneFramePictureStreamCompleter extends picture_stream.PictureStreamCompleter {
    static ['_#new#tearOff'](picture, opts) {
      let informationCollector = opts && 'informationCollector' in opts ? opts.informationCollector : null;
      return new picture_stream.OneFramePictureStreamCompleter.new(picture, {informationCollector: informationCollector});
    }
  };
  (picture_stream.OneFramePictureStreamCompleter.new = function(picture, opts) {
    let informationCollector = opts && 'informationCollector' in opts ? opts.informationCollector : null;
    if (!(picture !== null)) dart.assertFailed(null, I[11], 402, 15, "picture != null");
    picture_stream.OneFramePictureStreamCompleter.__proto__.new.call(this);
    picture.then(dart.void, dart.bind(this, 'setPicture'), {onError: dart.fn((error, stack) => {
        assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: error, stack: stack, library: "SVG", context: new assertions.ErrorDescription.new("resolving a single-frame picture stream"), informationCollector: informationCollector, silent: true}));
      }, T$.ObjectAndStackTraceToNull())});
  }).prototype = picture_stream.OneFramePictureStreamCompleter.prototype;
  dart.addTypeTests(picture_stream.OneFramePictureStreamCompleter);
  dart.addTypeCaches(picture_stream.OneFramePictureStreamCompleter);
  dart.setLibraryUri(picture_stream.OneFramePictureStreamCompleter, I[10]);
  picture_stream._NonOwningComplexPictureLayer = class _NonOwningComplexPictureLayer extends layer.PictureLayer {
    static ['_#new#tearOff'](_owner) {
      return new picture_stream._NonOwningComplexPictureLayer.new(_owner);
    }
    get isComplexHint() {
      return true;
    }
    set isComplexHint(value) {
      super.isComplexHint = value;
    }
    get picture() {
      return this[_owner$].picture;
    }
    set picture(picture) {
      let t26;
      if (!(picture == null)) dart.assertFailed(null, I[11], 433, 12, "picture == null");
      if (!(this[_handle$] != null)) dart.assertFailed(null, I[11], 434, 12, "_handle != null");
      if (picture != null) {
        this.markNeedsAddToScene();
      } else {
        t26 = this[_handle$];
        t26 == null ? null : t26.dispose();
        this[_handle$] = null;
      }
    }
  };
  (picture_stream._NonOwningComplexPictureLayer.new = function(_owner) {
    this[_owner$] = _owner;
    this[_handle$] = _owner.createHandle();
    picture_stream._NonOwningComplexPictureLayer.__proto__.new.call(this, _owner.viewport);
    ;
  }).prototype = picture_stream._NonOwningComplexPictureLayer.prototype;
  dart.addTypeTests(picture_stream._NonOwningComplexPictureLayer);
  dart.addTypeCaches(picture_stream._NonOwningComplexPictureLayer);
  dart.setLibraryUri(picture_stream._NonOwningComplexPictureLayer, I[10]);
  dart.setFieldSignature(picture_stream._NonOwningComplexPictureLayer, () => ({
    __proto__: dart.getFields(picture_stream._NonOwningComplexPictureLayer.__proto__),
    [_owner$]: dart.finalFieldType(picture_stream.PictureInfo),
    [_handle$]: dart.fieldType(dart.nullable(picture_stream.PictureHandle))
  }));
  var _cache = dart.privateName(picture_cache, "_cache");
  var _maximumSize = dart.privateName(picture_cache, "_maximumSize");
  picture_cache.PictureCache = class PictureCache extends core.Object {
    get maximumSize() {
      return this[_maximumSize];
    }
    set maximumSize(value) {
      if (!(value !== null)) dart.assertFailed(null, I[12], 27, 12, "value != null");
      if (!(value >= 0)) dart.assertFailed(null, I[12], 28, 12, "value >= 0");
      if (value === this.maximumSize) {
        return;
      }
      this[_maximumSize] = value;
      if (this.maximumSize === 0) {
        this.clear();
      } else {
        while (this[_cache][$length] > this.maximumSize) {
          dart.nullCheck(this[_cache][$remove](this[_cache][$keys][$first])).cached = false;
        }
      }
    }
    clear() {
      for (let completer of this[_cache][$values]) {
        if (!completer.cached) dart.assertFailed(null, I[12], 48, 14, "completer.cached");
        completer.cached = false;
      }
      this[_cache][$clear]();
    }
    evict(key) {
      return this[_cache][$remove](key) != null;
    }
    maybeEvict(key, oldData, newData) {
      let t26, t26$;
      if (dart.test((t26$ = (t26 = this[_cache][$_get](key), t26 == null ? null : t26.isCompatible(oldData, newData)), t26$ == null ? true : t26$))) {
        return false;
      }
      return this.evict(key);
    }
    putIfAbsent(key, loader) {
      if (!(key !== null)) dart.assertFailed(null, I[12], 80, 12, "key != null");
      if (!(loader !== null)) dart.assertFailed(null, I[12], 81, 12, "loader != null");
      let result = this[_cache][$_get](key);
      if (result != null) {
        this[_cache][$remove](key);
      } else {
        if (this[_cache][$length] === this.maximumSize && this.maximumSize > 0) {
          dart.nullCheck(this[_cache][$remove](this[_cache][$keys][$first])).cached = false;
        }
        result = loader();
      }
      if (this.maximumSize > 0) {
        if (!(this[_cache][$length] < this.maximumSize)) dart.assertFailed(null, I[12], 94, 14, "_cache.length < maximumSize");
        this[_cache][$_set](key, result);
        result.cached = true;
      }
      if (!(this[_cache][$length] <= this.maximumSize)) dart.assertFailed(null, I[12], 98, 12, "_cache.length <= maximumSize");
      return result;
    }
    get count() {
      return this[_cache][$length];
    }
    static ['_#new#tearOff']() {
      return new picture_cache.PictureCache.new();
    }
  };
  (picture_cache.PictureCache.new = function() {
    this[_cache] = new (T$.LinkedMapOfObject$PictureStreamCompleter()).new();
    this[_maximumSize] = 1000;
    ;
  }).prototype = picture_cache.PictureCache.prototype;
  dart.addTypeTests(picture_cache.PictureCache);
  dart.addTypeCaches(picture_cache.PictureCache);
  dart.setMethodSignature(picture_cache.PictureCache, () => ({
    __proto__: dart.getMethods(picture_cache.PictureCache.__proto__),
    clear: dart.fnType(dart.void, []),
    evict: dart.fnType(core.bool, [core.Object]),
    maybeEvict: dart.fnType(core.bool, [core.Object, theme.SvgTheme, theme.SvgTheme]),
    putIfAbsent: dart.fnType(picture_stream.PictureStreamCompleter, [core.Object, dart.fnType(picture_stream.PictureStreamCompleter, [])])
  }));
  dart.setGetterSignature(picture_cache.PictureCache, () => ({
    __proto__: dart.getGetters(picture_cache.PictureCache.__proto__),
    maximumSize: core.int,
    count: core.int
  }));
  dart.setSetterSignature(picture_cache.PictureCache, () => ({
    __proto__: dart.getSetters(picture_cache.PictureCache.__proto__),
    maximumSize: core.int
  }));
  dart.setLibraryUri(picture_cache.PictureCache, I[13]);
  dart.setFieldSignature(picture_cache.PictureCache, () => ({
    __proto__: dart.getFields(picture_cache.PictureCache.__proto__),
    [_cache]: dart.finalFieldType(core.Map$(core.Object, picture_stream.PictureStreamCompleter)),
    [_maximumSize]: dart.fieldType(core.int)
  }));
  dart.defineLazy(picture_cache, {
    /*picture_cache._kDefaultSize*/get _kDefaultSize() {
      return 1000;
    }
  }, false);
  var bundle$ = dart.privateName(picture_provider, "PictureConfiguration.bundle");
  var locale$0 = dart.privateName(picture_provider, "PictureConfiguration.locale");
  var textDirection$ = dart.privateName(picture_provider, "PictureConfiguration.textDirection");
  var viewBox$0 = dart.privateName(picture_provider, "PictureConfiguration.viewBox");
  var platform$ = dart.privateName(picture_provider, "PictureConfiguration.platform");
  var colorFilter$1 = dart.privateName(picture_provider, "PictureConfiguration.colorFilter");
  picture_provider.PictureConfiguration = class PictureConfiguration extends core.Object {
    get bundle() {
      return this[bundle$];
    }
    set bundle(value) {
      super.bundle = value;
    }
    get locale() {
      return this[locale$0];
    }
    set locale(value) {
      super.locale = value;
    }
    get textDirection() {
      return this[textDirection$];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get viewBox() {
      return this[viewBox$0];
    }
    set viewBox(value) {
      super.viewBox = value;
    }
    get platform() {
      return this[platform$];
    }
    set platform(value) {
      super.platform = value;
    }
    get colorFilter() {
      return this[colorFilter$1];
    }
    set colorFilter(value) {
      super.colorFilter = value;
    }
    static ['_#new#tearOff'](opts) {
      let bundle = opts && 'bundle' in opts ? opts.bundle : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let viewBox = opts && 'viewBox' in opts ? opts.viewBox : null;
      let platform = opts && 'platform' in opts ? opts.platform : null;
      let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
      return new picture_provider.PictureConfiguration.new({bundle: bundle, locale: locale, textDirection: textDirection, viewBox: viewBox, platform: platform, colorFilter: colorFilter});
    }
    copyWith(opts) {
      let t26, t26$, t26$0, t26$1, t26$2, t26$3;
      let bundle = opts && 'bundle' in opts ? opts.bundle : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let viewBox = opts && 'viewBox' in opts ? opts.viewBox : null;
      let platform = opts && 'platform' in opts ? opts.platform : null;
      let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
      return new picture_provider.PictureConfiguration.new({bundle: (t26 = bundle, t26 == null ? this.bundle : t26), locale: (t26$ = locale, t26$ == null ? this.locale : t26$), textDirection: (t26$0 = textDirection, t26$0 == null ? this.textDirection : t26$0), viewBox: (t26$1 = viewBox, t26$1 == null ? this.viewBox : t26$1), platform: (t26$2 = platform, t26$2 == null ? this.platform : t26$2), colorFilter: (t26$3 = colorFilter, t26$3 == null ? this.colorFilter : t26$3)});
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.runtimeType(other)._equals(this[$runtimeType])) {
        return false;
      }
      return picture_provider.PictureConfiguration.is(other) && dart.equals(other.bundle, this.bundle) && dart.equals(other.locale, this.locale) && other.textDirection == this.textDirection && dart.equals(other.viewBox, this.viewBox) && other.platform == this.platform && dart.equals(other.colorFilter, this.colorFilter);
    }
    get hashCode() {
      return core.Object.hash(this.bundle, this.locale, this.viewBox, this.platform, this.colorFilter);
    }
    toString() {
      let result = new core.StringBuffer.new();
      result.write("PictureConfiguration(");
      let hasArguments = false;
      if (this.bundle != null) {
        result.write("bundle: " + dart.str(this.bundle));
        hasArguments = true;
      }
      if (this.locale != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("locale: " + dart.str(this.locale));
        hasArguments = true;
      }
      if (this.textDirection != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("textDirection: " + dart.str(this.textDirection));
        hasArguments = true;
      }
      if (this.viewBox != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("viewBox: " + dart.str(this.viewBox));
        hasArguments = true;
      }
      if (this.platform != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("platform: " + diagnostics.describeEnum(dart.nullCheck(this.platform)));
        hasArguments = true;
      }
      if (this.colorFilter != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("colorFilter: " + dart.str(this.colorFilter));
        hasArguments = true;
      }
      result.write(")");
      return result.toString();
    }
  };
  (picture_provider.PictureConfiguration.new = function(opts) {
    let bundle = opts && 'bundle' in opts ? opts.bundle : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let viewBox = opts && 'viewBox' in opts ? opts.viewBox : null;
    let platform = opts && 'platform' in opts ? opts.platform : null;
    let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
    this[bundle$] = bundle;
    this[locale$0] = locale;
    this[textDirection$] = textDirection;
    this[viewBox$0] = viewBox;
    this[platform$] = platform;
    this[colorFilter$1] = colorFilter;
    ;
  }).prototype = picture_provider.PictureConfiguration.prototype;
  dart.addTypeTests(picture_provider.PictureConfiguration);
  dart.addTypeCaches(picture_provider.PictureConfiguration);
  dart.setMethodSignature(picture_provider.PictureConfiguration, () => ({
    __proto__: dart.getMethods(picture_provider.PictureConfiguration.__proto__),
    copyWith: dart.fnType(picture_provider.PictureConfiguration, [], {bundle: dart.nullable(asset_bundle.AssetBundle), colorFilter: dart.nullable(ui.ColorFilter), locale: dart.nullable(ui.Locale), platform: dart.nullable(platform.TargetPlatform), textDirection: dart.nullable(ui.TextDirection), viewBox: dart.nullable(ui.Rect)}, {}),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setLibraryUri(picture_provider.PictureConfiguration, I[14]);
  dart.setFieldSignature(picture_provider.PictureConfiguration, () => ({
    __proto__: dart.getFields(picture_provider.PictureConfiguration.__proto__),
    bundle: dart.finalFieldType(dart.nullable(asset_bundle.AssetBundle)),
    locale: dart.finalFieldType(dart.nullable(ui.Locale)),
    textDirection: dart.finalFieldType(dart.nullable(ui.TextDirection)),
    viewBox: dart.finalFieldType(dart.nullable(ui.Rect)),
    platform: dart.finalFieldType(dart.nullable(platform.TargetPlatform)),
    colorFilter: dart.finalFieldType(dart.nullable(ui.ColorFilter))
  }));
  dart.setStaticFieldSignature(picture_provider.PictureConfiguration, () => ['empty']);
  dart.defineExtensionMethods(picture_provider.PictureConfiguration, ['_equals', 'toString']);
  dart.defineExtensionAccessors(picture_provider.PictureConfiguration, ['hashCode']);
  dart.defineLazy(picture_provider.PictureConfiguration, {
    /*picture_provider.PictureConfiguration.empty*/get empty() {
      return C[221] || CT.C221;
    }
  }, false);
  var decoderBuilder$ = dart.privateName(picture_provider, "PictureProvider.decoderBuilder");
  var decoder = dart.privateName(picture_provider, "PictureProvider.decoder");
  var colorFilter$2 = dart.privateName(picture_provider, "PictureProvider.colorFilter");
  var _lastKey = dart.privateName(picture_provider, "_lastKey");
  var _theme = dart.privateName(picture_provider, "_theme");
  const _is_PictureProvider_default = Symbol('_is_PictureProvider_default');
  picture_provider.PictureProvider$ = dart.generic((T, U) => {
    var __t$TToNull = () => (__t$TToNull = dart.constFn(dart.fnType(core.Null, [T])))();
    var __t$DiagnosticsPropertyOfT = () => (__t$DiagnosticsPropertyOfT = dart.constFn(diagnostics.DiagnosticsProperty$(T)))();
    class PictureProvider extends core.Object {
      get decoderBuilder() {
        return this[decoderBuilder$];
      }
      set decoderBuilder(value) {
        super.decoderBuilder = value;
      }
      get decoder() {
        return this[decoder];
      }
      set decoder(value) {
        this[decoder] = value;
      }
      get colorFilter() {
        return this[colorFilter$2];
      }
      set colorFilter(value) {
        super.colorFilter = value;
      }
      static get cacheCount() {
        return picture_provider.PictureProvider.cache.count;
      }
      static clearCache() {
        return picture_provider.PictureProvider.cache.clear();
      }
      get theme() {
        return this[_theme];
      }
      set theme(value) {
        let t26;
        if (this[_theme]._equals(value)) {
          return;
        }
        if (this[_lastKey] != null) {
          picture_provider.PictureProvider.cache.maybeEvict(dart.nullCheck(this[_lastKey]), this[_theme], value);
          this[_lastKey] = null;
        }
        this.decoder = (t26 = value, this.decoderBuilder(t26));
        this[_theme] = value;
      }
      resolve(picture, opts) {
        let onError = opts && 'onError' in opts ? opts.onError : null;
        if (!(picture !== null)) dart.assertFailed(null, I[15], 370, 12, "picture != null");
        let stream = new picture_stream.PictureStream.new();
        this.obtainKey(picture).then(dart.void, dart.fn(key => {
          this[_lastKey] = key;
          stream.setCompleter(picture_provider.PictureProvider.cache.putIfAbsent(dart.nullCheck(key), dart.fn(() => this.load(key, {onError: onError}), T$.VoidToPictureStreamCompleter())));
        }, __t$TToNull())).catchError(dart.fn((exception, stack) => async.async(core.Null, (function*() {
          if (onError != null) {
            onError(exception, stack);
            return;
          }
          assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "SVG", context: new assertions.ErrorDescription.new("while resolving a picture"), silent: true, informationCollector: dart.fn(() => T$.JSArrayOfDiagnosticsNode().of([new (T$.DiagnosticsPropertyOfPictureProvider()).new("Picture provider", this), new (__t$DiagnosticsPropertyOfT()).new("Picture key", this[_lastKey], {defaultValue: null})]), T$.VoidToListOfDiagnosticsNode())}));
        }).bind(this)), T$.ObjectAndStackTraceToFutureOfNull()));
        return stream;
      }
      toString() {
        return dart.str(this[$runtimeType]) + "()";
      }
    }
    (PictureProvider.new = function(colorFilter, opts) {
      let decoderBuilder = opts && 'decoderBuilder' in opts ? opts.decoderBuilder : null;
      this[_lastKey] = null;
      this[colorFilter$2] = colorFilter;
      this[decoderBuilder$] = decoderBuilder;
      this[_theme] = C[174] || CT.C174;
      this[decoder] = decoderBuilder(C[174] || CT.C174);
      ;
    }).prototype = PictureProvider.prototype;
    dart.addTypeTests(PictureProvider);
    PictureProvider.prototype[_is_PictureProvider_default] = true;
    dart.addTypeCaches(PictureProvider);
    dart.setMethodSignature(PictureProvider, () => ({
      __proto__: dart.getMethods(PictureProvider.__proto__),
      resolve: dart.fnType(picture_stream.PictureStream, [picture_provider.PictureConfiguration], {onError: dart.nullable(dart.fnType(dart.void, [core.Object, core.StackTrace]))}, {})
    }));
    dart.setStaticMethodSignature(PictureProvider, () => ['clearCache']);
    dart.setGetterSignature(PictureProvider, () => ({
      __proto__: dart.getGetters(PictureProvider.__proto__),
      theme: theme.SvgTheme
    }));
    dart.setSetterSignature(PictureProvider, () => ({
      __proto__: dart.getSetters(PictureProvider.__proto__),
      theme: theme.SvgTheme
    }));
    dart.setStaticGetterSignature(PictureProvider, () => ['cacheCount']);
    dart.setLibraryUri(PictureProvider, I[14]);
    dart.setFieldSignature(PictureProvider, () => ({
      __proto__: dart.getFields(PictureProvider.__proto__),
      decoderBuilder: dart.finalFieldType(dart.fnType(dart.fnType(async.Future$(picture_stream.PictureInfo), [U, dart.nullable(ui.ColorFilter), core.String]), [theme.SvgTheme])),
      decoder: dart.fieldType(dart.fnType(async.Future$(picture_stream.PictureInfo), [U, dart.nullable(ui.ColorFilter), core.String])),
      colorFilter: dart.finalFieldType(dart.nullable(ui.ColorFilter)),
      [_theme]: dart.fieldType(theme.SvgTheme),
      [_lastKey]: dart.fieldType(dart.nullable(T))
    }));
    dart.setStaticFieldSignature(PictureProvider, () => ['cache']);
    dart.defineExtensionMethods(PictureProvider, ['toString']);
    return PictureProvider;
  });
  picture_provider.PictureProvider = picture_provider.PictureProvider$();
  dart.defineLazy(picture_provider.PictureProvider, {
    /*picture_provider.PictureProvider.cache*/get cache() {
      return new picture_cache.PictureCache.new();
    }
  }, false);
  dart.addTypeTests(picture_provider.PictureProvider, _is_PictureProvider_default);
  var keyData$ = dart.privateName(picture_provider, "PictureKey.keyData");
  var colorFilter$3 = dart.privateName(picture_provider, "PictureKey.colorFilter");
  var theme$1 = dart.privateName(picture_provider, "PictureKey.theme");
  const _is_PictureKey_default = Symbol('_is_PictureKey_default');
  picture_provider.PictureKey$ = dart.generic(T => {
    var __t$PictureKeyOfT = () => (__t$PictureKeyOfT = dart.constFn(picture_provider.PictureKey$(T)))();
    class PictureKey extends core.Object {
      get keyData() {
        return this[keyData$];
      }
      set keyData(value) {
        super.keyData = value;
      }
      get colorFilter() {
        return this[colorFilter$3];
      }
      set colorFilter(value) {
        super.colorFilter = value;
      }
      get theme() {
        return this[theme$1];
      }
      set theme(value) {
        super.theme = value;
      }
      static ['_#new#tearOff'](T, keyData, opts) {
        let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
        let theme = opts && 'theme' in opts ? opts.theme : null;
        return new (picture_provider.PictureKey$(T)).new(keyData, {colorFilter: colorFilter, theme: theme});
      }
      _equals(other) {
        if (other == null) return false;
        if (!dart.runtimeType(other)._equals(this[$runtimeType])) {
          return false;
        }
        return __t$PictureKeyOfT().is(other) && dart.equals(this.keyData, other.keyData) && dart.equals(this.colorFilter, other.colorFilter) && this.theme._equals(other.theme);
      }
      get hashCode() {
        return core.Object.hash(dart.hashCode(this.keyData), this.colorFilter, this.theme);
      }
      toString() {
        return "PictureKey(" + dart.str(this.keyData) + ", colorFilter: " + dart.str(this.colorFilter) + ", theme: " + dart.str(this.theme) + ")";
      }
    }
    (PictureKey.new = function(keyData, opts) {
      let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
      let theme = opts && 'theme' in opts ? opts.theme : null;
      this[keyData$] = keyData;
      this[colorFilter$3] = colorFilter;
      this[theme$1] = theme;
      ;
    }).prototype = PictureKey.prototype;
    dart.addTypeTests(PictureKey);
    PictureKey.prototype[_is_PictureKey_default] = true;
    dart.addTypeCaches(PictureKey);
    dart.setMethodSignature(PictureKey, () => ({
      __proto__: dart.getMethods(PictureKey.__proto__),
      _equals: dart.fnType(core.bool, [dart.dynamic]),
      [$_equals]: dart.fnType(core.bool, [dart.dynamic])
    }));
    dart.setLibraryUri(PictureKey, I[14]);
    dart.setFieldSignature(PictureKey, () => ({
      __proto__: dart.getFields(PictureKey.__proto__),
      keyData: dart.finalFieldType(T),
      colorFilter: dart.finalFieldType(dart.nullable(ui.ColorFilter)),
      theme: dart.finalFieldType(theme.SvgTheme)
    }));
    dart.defineExtensionMethods(PictureKey, ['_equals', 'toString']);
    dart.defineExtensionAccessors(PictureKey, ['hashCode']);
    return PictureKey;
  });
  picture_provider.PictureKey = picture_provider.PictureKey$();
  dart.addTypeTests(picture_provider.PictureKey, _is_PictureKey_default);
  var bundle$0 = dart.privateName(picture_provider, "AssetBundlePictureKey.bundle");
  picture_provider.AssetBundlePictureKey = class AssetBundlePictureKey extends picture_provider.PictureKey$(core.String) {
    get bundle() {
      return this[bundle$0];
    }
    set bundle(value) {
      super.bundle = value;
    }
    static ['_#new#tearOff'](opts) {
      let bundle = opts && 'bundle' in opts ? opts.bundle : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
      let theme = opts && 'theme' in opts ? opts.theme : null;
      return new picture_provider.AssetBundlePictureKey.new({bundle: bundle, name: name, colorFilter: colorFilter, theme: theme});
    }
    get name() {
      return this.keyData;
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.runtimeType(other)._equals(this[$runtimeType])) {
        return false;
      }
      return picture_provider.AssetBundlePictureKey.is(other) && this.bundle[$_equals](other.bundle) && this.name === other.name && dart.equals(this.colorFilter, other.colorFilter) && this.theme._equals(other.theme);
    }
    get hashCode() {
      return core.Object.hash(this.bundle, this.name, this.colorFilter, this.theme);
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(bundle: " + dart.str(this.bundle) + ", name: \"" + this.name + "\", colorFilter: " + dart.str(this.colorFilter) + ", theme: " + dart.str(this.theme) + ")";
    }
  };
  (picture_provider.AssetBundlePictureKey.new = function(opts) {
    let bundle = opts && 'bundle' in opts ? opts.bundle : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
    let theme = opts && 'theme' in opts ? opts.theme : null;
    this[bundle$0] = bundle;
    if (!(bundle !== null)) dart.assertFailed(null, I[15], 478, 16, "bundle != null");
    if (!(name !== null)) dart.assertFailed(null, I[15], 479, 16, "name != null");
    picture_provider.AssetBundlePictureKey.__proto__.new.call(this, name, {colorFilter: colorFilter, theme: theme});
    ;
  }).prototype = picture_provider.AssetBundlePictureKey.prototype;
  dart.addTypeTests(picture_provider.AssetBundlePictureKey);
  dart.addTypeCaches(picture_provider.AssetBundlePictureKey);
  dart.setGetterSignature(picture_provider.AssetBundlePictureKey, () => ({
    __proto__: dart.getGetters(picture_provider.AssetBundlePictureKey.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(picture_provider.AssetBundlePictureKey, I[14]);
  dart.setFieldSignature(picture_provider.AssetBundlePictureKey, () => ({
    __proto__: dart.getFields(picture_provider.AssetBundlePictureKey.__proto__),
    bundle: dart.finalFieldType(asset_bundle.AssetBundle)
  }));
  dart.defineExtensionMethods(picture_provider.AssetBundlePictureKey, ['_equals', 'toString']);
  dart.defineExtensionAccessors(picture_provider.AssetBundlePictureKey, ['hashCode']);
  var _loadAsync = dart.privateName(picture_provider, "_loadAsync");
  picture_provider.AssetBundlePictureProvider = class AssetBundlePictureProvider extends picture_provider.PictureProvider$(picture_provider.AssetBundlePictureKey, core.String) {
    load(key, opts) {
      picture_provider.AssetBundlePictureKey.as(key);
      let onError = opts && 'onError' in opts ? opts.onError : null;
      return new picture_stream.OneFramePictureStreamCompleter.new(this[_loadAsync](key, onError), {informationCollector: dart.fn(() => T$.JSArrayOfDiagnosticsNode().of([new (T$.DiagnosticsPropertyOfPictureProvider()).new("Picture provider", this), new (T$.DiagnosticsPropertyOfAssetBundlePictureKey()).new("Picture key", key)]), T$.VoidToListOfDiagnosticsNode())});
    }
    [_loadAsync](key, onError) {
      return async.async(picture_stream.PictureInfo, (function* _loadAsync() {
        let t28, t27, t26, t28$, t27$, t26$;
        let data = (yield key.bundle.loadString(key.name));
        if (onError != null) {
          return (t26 = data, t27 = key.colorFilter, t28 = key.toString(), this.decoder(t26, t27, t28)).catchError(dart.fn((error, stack) => {
            onError(error, stack);
            return T$.FutureOfPictureInfo().error(error, stack);
          }, T$.ObjectAndStackTraceToFutureOfPictureInfo()));
        }
        t26$ = data;
        t27$ = key.colorFilter;
        t28$ = key.toString();
        return this.decoder(t26$, t27$, t28$);
      }).bind(this));
    }
  };
  (picture_provider.AssetBundlePictureProvider.new = function(decoderBuilder, colorFilter) {
    if (!(decoderBuilder !== null)) dart.assertFailed(null, I[15], 522, 16, "decoderBuilder != null");
    picture_provider.AssetBundlePictureProvider.__proto__.new.call(this, colorFilter, {decoderBuilder: decoderBuilder});
    ;
  }).prototype = picture_provider.AssetBundlePictureProvider.prototype;
  dart.addTypeTests(picture_provider.AssetBundlePictureProvider);
  dart.addTypeCaches(picture_provider.AssetBundlePictureProvider);
  dart.setMethodSignature(picture_provider.AssetBundlePictureProvider, () => ({
    __proto__: dart.getMethods(picture_provider.AssetBundlePictureProvider.__proto__),
    load: dart.fnType(picture_stream.PictureStreamCompleter, [dart.nullable(core.Object)], {onError: dart.nullable(dart.fnType(dart.void, [core.Object, core.StackTrace]))}, {}),
    [_loadAsync]: dart.fnType(async.Future$(picture_stream.PictureInfo), [picture_provider.AssetBundlePictureKey, dart.nullable(dart.fnType(dart.void, [core.Object, core.StackTrace]))])
  }));
  dart.setLibraryUri(picture_provider.AssetBundlePictureProvider, I[14]);
  var url$ = dart.privateName(picture_provider, "NetworkPictureKeyData.url");
  var headers$ = dart.privateName(picture_provider, "NetworkPictureKeyData.headers");
  picture_provider.NetworkPictureKeyData = class NetworkPictureKeyData extends core.Object {
    get url() {
      return this[url$];
    }
    set url(value) {
      super.url = value;
    }
    get headers() {
      return this[headers$];
    }
    set headers(value) {
      super.headers = value;
    }
    static ['_#new#tearOff'](opts) {
      let url = opts && 'url' in opts ? opts.url : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return new picture_provider.NetworkPictureKeyData.new({url: url, headers: headers});
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.runtimeType(other)._equals(this[$runtimeType])) {
        return false;
      }
      return picture_provider.NetworkPictureKeyData.is(other) && other.url === this.url && dart.equals(other.headers, this.headers);
    }
    get hashCode() {
      return core.Object.hash(this.url, this.headers);
    }
  };
  (picture_provider.NetworkPictureKeyData.new = function(opts) {
    let url = opts && 'url' in opts ? opts.url : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    this[url$] = url;
    this[headers$] = headers;
    ;
  }).prototype = picture_provider.NetworkPictureKeyData.prototype;
  dart.addTypeTests(picture_provider.NetworkPictureKeyData);
  dart.addTypeCaches(picture_provider.NetworkPictureKeyData);
  dart.setMethodSignature(picture_provider.NetworkPictureKeyData, () => ({
    __proto__: dart.getMethods(picture_provider.NetworkPictureKeyData.__proto__),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setLibraryUri(picture_provider.NetworkPictureKeyData, I[14]);
  dart.setFieldSignature(picture_provider.NetworkPictureKeyData, () => ({
    __proto__: dart.getFields(picture_provider.NetworkPictureKeyData.__proto__),
    url: dart.finalFieldType(core.String),
    headers: dart.finalFieldType(dart.nullable(core.Map$(core.String, core.String)))
  }));
  dart.defineExtensionMethods(picture_provider.NetworkPictureKeyData, ['_equals']);
  dart.defineExtensionAccessors(picture_provider.NetworkPictureKeyData, ['hashCode']);
  var url$0 = dart.privateName(picture_provider, "NetworkPicture.url");
  var headers$0 = dart.privateName(picture_provider, "NetworkPicture.headers");
  picture_provider.NetworkPicture = class NetworkPicture extends picture_provider.PictureProvider$(picture_provider.PictureKey$(picture_provider.NetworkPictureKeyData), typed_data.Uint8List) {
    get url() {
      return this[url$0];
    }
    set url(value) {
      super.url = value;
    }
    get headers() {
      return this[headers$0];
    }
    set headers(value) {
      super.headers = value;
    }
    static ['_#new#tearOff'](decoderBuilder, url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
      return new picture_provider.NetworkPicture.new(decoderBuilder, url, {headers: headers, colorFilter: colorFilter});
    }
    obtainKey(picture) {
      return new (T$.SynchronousFutureOfPictureKeyOfNetworkPictureKeyData()).new(new (T$.PictureKeyOfNetworkPictureKeyData()).new(new picture_provider.NetworkPictureKeyData.new({url: this.url, headers: this.headers}), {colorFilter: this.colorFilter, theme: this.theme}));
    }
    load(key, opts) {
      T$.PictureKeyOfNetworkPictureKeyData().as(key);
      let onError = opts && 'onError' in opts ? opts.onError : null;
      return new picture_stream.OneFramePictureStreamCompleter.new(this[_loadAsync](key, {onError: onError}), {informationCollector: dart.fn(() => T$.JSArrayOfDiagnosticsNode().of([new (T$.DiagnosticsPropertyOfPictureProvider()).new("Picture provider", this), new (T$.DiagnosticsPropertyOfPictureKeyOfNetworkPictureKeyData()).new("Picture key", key)]), T$.VoidToListOfDiagnosticsNode())});
    }
    [_loadAsync](key, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      return async.async(picture_stream.PictureInfo, (function* _loadAsync() {
        let t28, t27, t26, t28$, t27$, t26$;
        if (!(this.url === key.keyData.url)) dart.assertFailed(null, I[15], 641, 12, "url == key.keyData.url");
        if (!dart.equals(this.headers, key.keyData.headers)) dart.assertFailed(null, I[15], 642, 12, "headers == key.keyData.headers");
        let bytes = (yield _http_web.httpGet(this.url, {headers: this.headers}));
        if (onError != null) {
          return (t26 = bytes, t27 = this.colorFilter, t28 = key.toString(), this.decoder(t26, t27, t28)).catchError(dart.fn((error, stack) => {
            onError(error, stack);
            return T$.FutureOfPictureInfo().error(error, stack);
          }, T$.ObjectAndStackTraceToFutureOfPictureInfo()));
        }
        t26$ = bytes;
        t27$ = this.colorFilter;
        t28$ = key.toString();
        return this.decoder(t26$, t27$, t28$);
      }).bind(this));
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(\"" + this.url + "\", headers: " + dart.str(this.headers) + ", colorFilter: " + dart.str(this.colorFilter) + ")";
    }
  };
  (picture_provider.NetworkPicture.new = function(decoderBuilder, url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
    this[url$0] = url;
    this[headers$0] = headers;
    if (!(url !== null)) dart.assertFailed(null, I[15], 605, 16, "url != null");
    picture_provider.NetworkPicture.__proto__.new.call(this, colorFilter, {decoderBuilder: decoderBuilder});
    ;
  }).prototype = picture_provider.NetworkPicture.prototype;
  dart.addTypeTests(picture_provider.NetworkPicture);
  dart.addTypeCaches(picture_provider.NetworkPicture);
  dart.setMethodSignature(picture_provider.NetworkPicture, () => ({
    __proto__: dart.getMethods(picture_provider.NetworkPicture.__proto__),
    obtainKey: dart.fnType(async.Future$(picture_provider.PictureKey$(picture_provider.NetworkPictureKeyData)), [picture_provider.PictureConfiguration]),
    load: dart.fnType(picture_stream.PictureStreamCompleter, [dart.nullable(core.Object)], {onError: dart.nullable(dart.fnType(dart.void, [core.Object, core.StackTrace]))}, {}),
    [_loadAsync]: dart.fnType(async.Future$(picture_stream.PictureInfo), [picture_provider.PictureKey$(picture_provider.NetworkPictureKeyData)], {onError: dart.nullable(dart.fnType(dart.void, [core.Object, core.StackTrace]))}, {})
  }));
  dart.setLibraryUri(picture_provider.NetworkPicture, I[14]);
  dart.setFieldSignature(picture_provider.NetworkPicture, () => ({
    __proto__: dart.getFields(picture_provider.NetworkPicture.__proto__),
    url: dart.finalFieldType(core.String),
    headers: dart.finalFieldType(dart.nullable(core.Map$(core.String, core.String)))
  }));
  dart.defineExtensionMethods(picture_provider.NetworkPicture, ['toString']);
  var file$ = dart.privateName(picture_provider, "FilePicture.file");
  picture_provider.FilePicture = class FilePicture extends picture_provider.PictureProvider$(picture_provider.PictureKey$(core.String), typed_data.Uint8List) {
    get file() {
      return this[file$];
    }
    set file(value) {
      super.file = value;
    }
    static ['_#new#tearOff'](decoderBuilder, file, opts) {
      let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
      return new picture_provider.FilePicture.new(decoderBuilder, file, {colorFilter: colorFilter});
    }
    obtainKey(picture) {
      return new (T$.SynchronousFutureOfPictureKeyOfString()).new(new (T$.PictureKeyOfString()).new(this.file.path, {colorFilter: this.colorFilter, theme: this.theme}));
    }
    load(key, opts) {
      T$.PictureKeyOfString().as(key);
      let onError = opts && 'onError' in opts ? opts.onError : null;
      return new picture_stream.OneFramePictureStreamCompleter.new(this[_loadAsync](key, {onError: onError}), {informationCollector: dart.fn(() => T$.JSArrayOfDiagnosticsNode().of([new (T$.DiagnosticsPropertyOfString()).new("Path", this.file.path)]), T$.VoidToListOfDiagnosticsNode())});
    }
    [_loadAsync](key, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      return async.async(T$.PictureInfoN(), (function* _loadAsync() {
        let t28, t27, t26, t28$, t27$, t26$;
        if (!(key.keyData === this.file.path)) dart.assertFailed(null, I[15], 706, 12, "key.keyData == file.path");
        let data = (yield this.file.readAsBytes());
        if (data[$isEmpty]) {
          return null;
        }
        if (onError != null) {
          return (t26 = data, t27 = this.colorFilter, t28 = key.toString(), this.decoder(t26, t27, t28)).catchError(dart.fn((error, stack) => async.async(picture_stream.PictureInfo, function*() {
            onError(error, stack);
            return T$.FutureOfPictureInfo().error(error, stack);
          }), T$.ObjectAndStackTraceToFutureOfPictureInfo()));
        }
        t26$ = data;
        t27$ = this.colorFilter;
        t28$ = key.toString();
        return this.decoder(t26$, t27$, t28$);
      }).bind(this));
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(\"" + this.file.path + "\", colorFilter: " + dart.str(this.colorFilter) + ")";
    }
  };
  (picture_provider.FilePicture.new = function(decoderBuilder, file, opts) {
    let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
    this[file$] = file;
    if (!(decoderBuilder !== null)) dart.assertFailed(null, I[15], 675, 16, "decoderBuilder != null");
    if (!(file !== null)) dart.assertFailed(null, I[15], 676, 16, "file != null");
    picture_provider.FilePicture.__proto__.new.call(this, colorFilter, {decoderBuilder: decoderBuilder});
    ;
  }).prototype = picture_provider.FilePicture.prototype;
  dart.addTypeTests(picture_provider.FilePicture);
  dart.addTypeCaches(picture_provider.FilePicture);
  dart.setMethodSignature(picture_provider.FilePicture, () => ({
    __proto__: dart.getMethods(picture_provider.FilePicture.__proto__),
    obtainKey: dart.fnType(async.Future$(picture_provider.PictureKey$(core.String)), [picture_provider.PictureConfiguration]),
    load: dart.fnType(picture_stream.PictureStreamCompleter, [dart.nullable(core.Object)], {onError: dart.nullable(dart.fnType(dart.void, [core.Object, core.StackTrace]))}, {}),
    [_loadAsync]: dart.fnType(async.Future$(dart.nullable(picture_stream.PictureInfo)), [picture_provider.PictureKey$(core.String)], {onError: dart.nullable(dart.fnType(dart.void, [core.Object, core.StackTrace]))}, {})
  }));
  dart.setLibraryUri(picture_provider.FilePicture, I[14]);
  dart.setFieldSignature(picture_provider.FilePicture, () => ({
    __proto__: dart.getFields(picture_provider.FilePicture.__proto__),
    file: dart.finalFieldType(_file_none.File)
  }));
  dart.defineExtensionMethods(picture_provider.FilePicture, ['toString']);
  var bytes$ = dart.privateName(picture_provider, "MemoryPicture.bytes");
  picture_provider.MemoryPicture = class MemoryPicture extends picture_provider.PictureProvider$(picture_provider.PictureKey$(typed_data.Uint8List), typed_data.Uint8List) {
    get bytes() {
      return this[bytes$];
    }
    set bytes(value) {
      super.bytes = value;
    }
    static ['_#new#tearOff'](decoderBuilder, bytes, opts) {
      let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
      return new picture_provider.MemoryPicture.new(decoderBuilder, bytes, {colorFilter: colorFilter});
    }
    obtainKey(picture) {
      return new (T$.SynchronousFutureOfPictureKeyOfUint8List()).new(new (T$.PictureKeyOfUint8List()).new(this.bytes, {colorFilter: this.colorFilter, theme: this.theme}));
    }
    load(key, opts) {
      T$.PictureKeyOfUint8List().as(key);
      let onError = opts && 'onError' in opts ? opts.onError : null;
      return new picture_stream.OneFramePictureStreamCompleter.new(this[_loadAsync](key, {onError: onError}));
    }
    [_loadAsync](key, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      return async.async(picture_stream.PictureInfo, (function* _loadAsync() {
        let t28, t27, t26, t28$, t27$, t26$;
        if (!key.keyData[$_equals](this.bytes)) dart.assertFailed(null, I[15], 773, 12, "key.keyData == bytes");
        if (onError != null) {
          return (t26 = this.bytes, t27 = this.colorFilter, t28 = key.toString(), this.decoder(t26, t27, t28)).catchError(dart.fn((error, stack) => {
            onError(error, stack);
            return T$.FutureOfPictureInfo().error(error, stack);
          }, T$.ObjectAndStackTraceToFutureOfPictureInfo()));
        }
        t26$ = this.bytes;
        t27$ = this.colorFilter;
        t28$ = key.toString();
        return this.decoder(t26$, t27$, t28$);
      }).bind(this));
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + diagnostics.describeIdentity(this.bytes) + ")";
    }
  };
  (picture_provider.MemoryPicture.new = function(decoderBuilder, bytes, opts) {
    let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
    this[bytes$] = bytes;
    if (!(bytes !== null)) dart.assertFailed(null, I[15], 748, 16, "bytes != null");
    picture_provider.MemoryPicture.__proto__.new.call(this, colorFilter, {decoderBuilder: decoderBuilder});
    ;
  }).prototype = picture_provider.MemoryPicture.prototype;
  dart.addTypeTests(picture_provider.MemoryPicture);
  dart.addTypeCaches(picture_provider.MemoryPicture);
  dart.setMethodSignature(picture_provider.MemoryPicture, () => ({
    __proto__: dart.getMethods(picture_provider.MemoryPicture.__proto__),
    obtainKey: dart.fnType(async.Future$(picture_provider.PictureKey$(typed_data.Uint8List)), [picture_provider.PictureConfiguration]),
    load: dart.fnType(picture_stream.PictureStreamCompleter, [dart.nullable(core.Object)], {onError: dart.nullable(dart.fnType(dart.void, [core.Object, core.StackTrace]))}, {}),
    [_loadAsync]: dart.fnType(async.Future$(picture_stream.PictureInfo), [picture_provider.PictureKey$(typed_data.Uint8List)], {onError: dart.nullable(dart.fnType(dart.void, [core.Object, core.StackTrace]))}, {})
  }));
  dart.setLibraryUri(picture_provider.MemoryPicture, I[14]);
  dart.setFieldSignature(picture_provider.MemoryPicture, () => ({
    __proto__: dart.getFields(picture_provider.MemoryPicture.__proto__),
    bytes: dart.finalFieldType(typed_data.Uint8List)
  }));
  dart.defineExtensionMethods(picture_provider.MemoryPicture, ['toString']);
  var string$ = dart.privateName(picture_provider, "StringPicture.string");
  picture_provider.StringPicture = class StringPicture extends picture_provider.PictureProvider$(picture_provider.PictureKey$(core.String), core.String) {
    get string() {
      return this[string$];
    }
    set string(value) {
      super.string = value;
    }
    static ['_#new#tearOff'](decoderBuilder, string, opts) {
      let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
      return new picture_provider.StringPicture.new(decoderBuilder, string, {colorFilter: colorFilter});
    }
    obtainKey(picture) {
      return new (T$.SynchronousFutureOfPictureKeyOfString()).new(new (T$.PictureKeyOfString()).new(this.string, {colorFilter: this.colorFilter, theme: this.theme}));
    }
    load(key, opts) {
      T$.PictureKeyOfString().as(key);
      let onError = opts && 'onError' in opts ? opts.onError : null;
      return new picture_stream.OneFramePictureStreamCompleter.new(this[_loadAsync](key, {onError: onError}));
    }
    [_loadAsync](key, opts) {
      let t28, t27, t26, t28$, t27$, t26$;
      let onError = opts && 'onError' in opts ? opts.onError : null;
      if (!(key.keyData === this.string)) dart.assertFailed(null, I[15], 836, 12, "key.keyData == string");
      if (onError != null) {
        return (t26 = this.string, t27 = this.colorFilter, t28 = key.toString(), this.decoder(t26, t27, t28)).catchError(dart.fn((error, stack) => {
          onError(error, stack);
          return T$.FutureOfPictureInfo().error(error, stack);
        }, T$.ObjectAndStackTraceToFutureOfPictureInfo()));
      }
      t26$ = this.string;
      t27$ = this.colorFilter;
      t28$ = key.toString();
      return this.decoder(t26$, t27$, t28$);
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + diagnostics.describeIdentity(this.string) + ", colorFilter: " + dart.str(this.colorFilter) + ")";
    }
  };
  (picture_provider.StringPicture.new = function(decoderBuilder, string, opts) {
    let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
    this[string$] = string;
    if (!(string !== null)) dart.assertFailed(null, I[15], 809, 16, "string != null");
    picture_provider.StringPicture.__proto__.new.call(this, colorFilter, {decoderBuilder: decoderBuilder});
    ;
  }).prototype = picture_provider.StringPicture.prototype;
  dart.addTypeTests(picture_provider.StringPicture);
  dart.addTypeCaches(picture_provider.StringPicture);
  dart.setMethodSignature(picture_provider.StringPicture, () => ({
    __proto__: dart.getMethods(picture_provider.StringPicture.__proto__),
    obtainKey: dart.fnType(async.Future$(picture_provider.PictureKey$(core.String)), [picture_provider.PictureConfiguration]),
    load: dart.fnType(picture_stream.PictureStreamCompleter, [dart.nullable(core.Object)], {onError: dart.nullable(dart.fnType(dart.void, [core.Object, core.StackTrace]))}, {}),
    [_loadAsync]: dart.fnType(async.Future$(picture_stream.PictureInfo), [picture_provider.PictureKey$(core.String)], {onError: dart.nullable(dart.fnType(dart.void, [core.Object, core.StackTrace]))}, {})
  }));
  dart.setLibraryUri(picture_provider.StringPicture, I[14]);
  dart.setFieldSignature(picture_provider.StringPicture, () => ({
    __proto__: dart.getFields(picture_provider.StringPicture.__proto__),
    string: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(picture_provider.StringPicture, ['toString']);
  var assetName$ = dart.privateName(picture_provider, "ExactAssetPicture.assetName");
  var bundle$1 = dart.privateName(picture_provider, "ExactAssetPicture.bundle");
  var $package$ = dart.privateName(picture_provider, "ExactAssetPicture.package");
  picture_provider.ExactAssetPicture = class ExactAssetPicture extends picture_provider.AssetBundlePictureProvider {
    get assetName() {
      return this[assetName$];
    }
    set assetName(value) {
      super.assetName = value;
    }
    get bundle() {
      return this[bundle$1];
    }
    set bundle(value) {
      super.bundle = value;
    }
    get package() {
      return this[$package$];
    }
    set package(value) {
      super.package = value;
    }
    static ['_#new#tearOff'](decoderBuilder, assetName, opts) {
      let bundle = opts && 'bundle' in opts ? opts.bundle : null;
      let $package = opts && 'package' in opts ? opts.package : null;
      let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
      return new picture_provider.ExactAssetPicture.new(decoderBuilder, assetName, {bundle: bundle, package: $package, colorFilter: colorFilter});
    }
    get keyName() {
      return this.package == null ? this.assetName : "packages/" + dart.str(this.package) + "/" + this.assetName;
    }
    obtainKey(picture) {
      let t26, t26$;
      return new (T$.SynchronousFutureOfAssetBundlePictureKey()).new(new picture_provider.AssetBundlePictureKey.new({bundle: (t26$ = (t26 = this.bundle, t26 == null ? picture.bundle : t26), t26$ == null ? asset_bundle.rootBundle : t26$), name: this.keyName, colorFilter: this.colorFilter, theme: this.theme}));
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(name: \"" + this.keyName + "\", bundle: " + dart.str(this.bundle) + ", colorFilter: " + dart.str(this.colorFilter) + ")";
    }
  };
  (picture_provider.ExactAssetPicture.new = function(decoderBuilder, assetName, opts) {
    let bundle = opts && 'bundle' in opts ? opts.bundle : null;
    let $package = opts && 'package' in opts ? opts.package : null;
    let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
    this[assetName$] = assetName;
    this[bundle$1] = bundle;
    this[$package$] = $package;
    if (!(assetName !== null)) dart.assertFailed(null, I[15], 942, 16, "assetName != null");
    picture_provider.ExactAssetPicture.__proto__.new.call(this, decoderBuilder, colorFilter);
    ;
  }).prototype = picture_provider.ExactAssetPicture.prototype;
  dart.addTypeTests(picture_provider.ExactAssetPicture);
  dart.addTypeCaches(picture_provider.ExactAssetPicture);
  dart.setMethodSignature(picture_provider.ExactAssetPicture, () => ({
    __proto__: dart.getMethods(picture_provider.ExactAssetPicture.__proto__),
    obtainKey: dart.fnType(async.Future$(picture_provider.AssetBundlePictureKey), [picture_provider.PictureConfiguration])
  }));
  dart.setGetterSignature(picture_provider.ExactAssetPicture, () => ({
    __proto__: dart.getGetters(picture_provider.ExactAssetPicture.__proto__),
    keyName: core.String
  }));
  dart.setLibraryUri(picture_provider.ExactAssetPicture, I[14]);
  dart.setFieldSignature(picture_provider.ExactAssetPicture, () => ({
    __proto__: dart.getFields(picture_provider.ExactAssetPicture.__proto__),
    assetName: dart.finalFieldType(core.String),
    bundle: dart.finalFieldType(dart.nullable(asset_bundle.AssetBundle)),
    package: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(picture_provider.ExactAssetPicture, ['toString']);
  picture_provider.createLocalPictureConfiguration = function createLocalPictureConfiguration(context, opts) {
    let t26;
    let viewBox = opts && 'viewBox' in opts ? opts.viewBox : null;
    let colorFilterOverride = opts && 'colorFilterOverride' in opts ? opts.colorFilterOverride : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let colorBlendMode = opts && 'colorBlendMode' in opts ? opts.colorBlendMode : null;
    let filter = colorFilterOverride;
    if (filter == null && color != null) {
      filter = new _engine.CkBlendModeColorFilter.new(color, (t26 = colorBlendMode, t26 == null ? ui.BlendMode.srcIn : t26));
    }
    return new picture_provider.PictureConfiguration.new({bundle: context != null ? basic.DefaultAssetBundle.of(context) : asset_bundle.rootBundle, locale: context != null ? localizations.Localizations.maybeLocaleOf(context) : null, textDirection: context != null ? basic.Directionality.maybeOf(context) : null, viewBox: viewBox, platform: platform.defaultTargetPlatform, colorFilter: filter});
  };
  dart.trackLibraries("packages/flutter_svg/src/svg/parser_state.dart", {
    "package:flutter_svg/src/svg/parser_state.dart": parser_state,
    "package:flutter_svg/parser.dart": parser$,
    "package:flutter_svg/svg.dart": svg,
    "package:flutter_svg/src/svg/parsers.dart": parsers,
    "package:flutter_svg/src/render_picture.dart": render_picture,
    "package:flutter_svg/src/vector_drawable.dart": vector_drawable,
    "package:flutter_svg/src/picture_stream.dart": picture_stream,
    "package:flutter_svg/src/picture_cache.dart": picture_cache,
    "package:flutter_svg/src/picture_provider.dart": picture_provider,
    "package:flutter_svg/flutter_svg.dart": flutter_svg
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["parser_state.dart","../vector_drawable.dart","../../parser.dart","../../svg.dart","parsers.dart","../render_picture.dart","../picture_stream.dart","../picture_cache.dart","../picture_provider.dart"],"names":[],"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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BAvI2B,OAAiB;AACxD,YAAA,AAAM,MAAD,WAAW,OAAmB,uCAAK,KAAK,EAAE,cAAc;IAAC;;AAyI/B;IAAkB;;iCA3f9C;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;IAdA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACF,kDAAW,GAAG;;EAAC;mCAmFX;;QACF;QACA;QACQ;QACL;QACH;QACA;QACA;QACA;QACA;QACA;QACE;QACG;QACL;QACA;QACA;QACA;QACA;;IAfA;IAGA;IACA;IACA;IACA;IACA;IACA;IAGA;IACA;IACA;IACA;IACA;IACe,yBAAE,2CAChB,AAA2B,0BAAD,KAAI,OACxB,uDACA,wCACN,SAAS,WACD,MAAM,WACL,kCACiC,MAA7B,AAAI,kCAAA,cAA4B,gBAAgB,WACvD,+BAAgB,KAAK,EAAE,cAAc,IACrC;IAEI,qBAAE,+BAAgB,KAAK,EAAE,cAAc;AACnD,kDAAW,GAAG;;EAAC;qCAmCZ;;QACF;QACgB;QAChB;QACA;QACA;QACA;QACA;QACA;QACA;QACE;QACG;QACL;QACA;QACA;QACA;QACA;;IAbA;IACA;IACA;IACA;IACA;IACA;IACA;IAGA;IACA;IACA;IACA;IACA;IACe,yBAAE,wCAChB,AAA2B,0BAAD,KAAI,OACxB,qDACA,sCACN,GAAG,YACM,OAAO,0BAC0B,MAA7B,AAAI,kCAAA,cAA4B,gBAAgB,WACvD,+BAAgB,KAAK,EAAE,cAAc,IACrC;IAEI,qBAAE,+BAAgB,KAAK,EAAE,cAAc;AACnD,kDAAW,GAAG;;EAAC;kCAiCd;;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACE;QACG;QACL;QACA;QACA;QACA;QACA;;IAbA;IACA;IACA;IACA;IACA;IACA;IACA;IAGA;IACA;IACA;IACA;IACA;IACe,yBAAE,qCAChB,AAA2B,0BAAD,KA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","file":"../../../../../../../../../../../../packages/flutter_svg/src/svg/parser_state.dart.lib.js"}');
  // Exports:
  return {
    src__svg__parser_state: parser_state,
    parser: parser$,
    svg: svg,
    src__svg__parsers: parsers,
    src__render_picture: render_picture,
    src__vector_drawable: vector_drawable,
    src__picture_stream: picture_stream,
    src__picture_cache: picture_cache,
    src__picture_provider: picture_provider,
    flutter_svg: flutter_svg
  };
}));

//# sourceMappingURL=parser_state.dart.lib.js.map
