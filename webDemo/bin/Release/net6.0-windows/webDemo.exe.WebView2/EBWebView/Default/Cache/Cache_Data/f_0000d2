define(['dart_sdk', 'packages/dio/src/redirect_record.dart', 'packages/http_parser/src/media_type.dart'], (function load__packages__dio__src__interceptors__log_dart(dart_sdk, packages__dio__src__redirect_record$46dart, packages__http_parser__src__media_type$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const html = dart_sdk.html;
  const typed_data = dart_sdk.typed_data;
  const _native_typed_data = dart_sdk._native_typed_data;
  const _js_helper = dart_sdk._js_helper;
  const _internal = dart_sdk._internal;
  const convert = dart_sdk.convert;
  const math = dart_sdk.math;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const redirect_record = packages__dio__src__redirect_record$46dart.src__redirect_record;
  const media_type = packages__http_parser__src__media_type$46dart.src__media_type;
  var log = Object.create(dart.library);
  var browser_adapter = Object.create(dart.library);
  var dio_for_browser = Object.create(dart.library);
  var multipart_file_stub = Object.create(dart.library);
  var multipart_file = Object.create(dart.library);
  var form_data = Object.create(dart.library);
  var dio_mixin = Object.create(dart.library);
  var dio = Object.create(dart.library);
  var transformer = Object.create(dart.library);
  var parameter = Object.create(dart.library);
  var utils = Object.create(dart.library);
  var headers$ = Object.create(dart.library);
  var response$ = Object.create(dart.library);
  var dio_error = Object.create(dart.library);
  var cancel_token = Object.create(dart.library);
  var options$ = Object.create(dart.library);
  var adapter = Object.create(dart.library);
  var dio$ = Object.create(dart.library);
  var $forEach = dartx.forEach;
  var $join = dartx.join;
  var $toString = dartx.toString;
  var $split = dartx.split;
  var $add = dartx.add;
  var $responseType = dartx.responseType;
  var $_get = dartx._get;
  var $remove = dartx.remove;
  var $onLoad = dartx.onLoad;
  var $response = dartx.response;
  var $result = dartx.result;
  var $responseHeaders = dartx.responseHeaders;
  var $map = dartx.map;
  var $onError = dartx.onError;
  var $readyState = dartx.readyState;
  var $length = dartx.length;
  var $fold = dartx.fold;
  var $setRange = dartx.setRange;
  var $clear = dartx.clear;
  var $noSuchMethod = dartx.noSuchMethod;
  var $contains = dartx.contains;
  var $runtimeType = dartx.runtimeType;
  var $keys = dartx.keys;
  var $toLowerCase = dartx.toLowerCase;
  var $any = dartx.any;
  var $_set = dartx._set;
  var $ceil = dartx.ceil;
  var $sublist = dartx.sublist;
  var $padLeft = dartx.padLeft;
  var $replaceAll = dartx.replaceAll;
  var $addAll = dartx.addAll;
  var $isNotEmpty = dartx.isNotEmpty;
  var $first = dartx.first;
  var $setAll = dartx.setAll;
  var $_equals = dartx._equals;
  var $hashCode = dartx.hashCode;
  var $trim = dartx.trim;
  var $toList = dartx.toList;
  var $removeWhere = dartx.removeWhere;
  var $isEmpty = dartx.isEmpty;
  var $last = dartx.last;
  var $stackTrace = dartx.stackTrace;
  var $containsKey = dartx.containsKey;
  var $toUpperCase = dartx.toUpperCase;
  var $startsWith = dartx.startsWith;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T$ = {
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    ObjectNTovoid: () => (T$.ObjectNTovoid = dart.constFn(dart.fnType(dart.void, [T$.ObjectN()])))(),
    StringAnddynamicTovoid: () => (T$.StringAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [core.String, dart.dynamic])))(),
    ListOfString: () => (T$.ListOfString = dart.constFn(core.List$(core.String)))(),
    StringAndListOfStringTovoid: () => (T$.StringAndListOfStringTovoid = dart.constFn(dart.fnType(dart.void, [core.String, T$.ListOfString()])))(),
    JSArrayOfHttpRequest: () => (T$.JSArrayOfHttpRequest = dart.constFn(_interceptors.JSArray$(html.HttpRequest)))(),
    CompleterOfResponseBody: () => (T$.CompleterOfResponseBody = dart.constFn(async.Completer$(adapter.ResponseBody)))(),
    MapEntryOfString$ListOfString: () => (T$.MapEntryOfString$ListOfString = dart.constFn(core.MapEntry$(core.String, T$.ListOfString())))(),
    StringAndStringToMapEntryOfString$ListOfString: () => (T$.StringAndStringToMapEntryOfString$ListOfString = dart.constFn(dart.fnType(T$.MapEntryOfString$ListOfString(), [core.String, core.String])))(),
    ProgressEventToNull: () => (T$.ProgressEventToNull = dart.constFn(dart.fnType(core.Null, [html.ProgressEvent])))(),
    dynamicToNull: () => (T$.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    intAndUint8ListToint: () => (T$.intAndUint8ListToint = dart.constFn(dart.fnType(core.int, [core.int, typed_data.Uint8List])))(),
    ListOfUint8List: () => (T$.ListOfUint8List = dart.constFn(core.List$(typed_data.Uint8List)))(),
    ListOfUint8ListToUint8List: () => (T$.ListOfUint8ListToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [T$.ListOfUint8List()])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    HttpClientAdapterN: () => (T$.HttpClientAdapterN = dart.constFn(dart.nullable(adapter.HttpClientAdapter)))(),
    TransformerN: () => (T$.TransformerN = dart.constFn(dart.nullable(transformer.Transformer)))(),
    BaseOptionsN: () => (T$.BaseOptionsN = dart.constFn(dart.nullable(options$.BaseOptions)))(),
    FutureOfInterceptorState: () => (T$.FutureOfInterceptorState = dart.constFn(async.Future$(dio_mixin.InterceptorState)))(),
    VoidToFutureOfInterceptorState: () => (T$.VoidToFutureOfInterceptorState = dart.constFn(dart.fnType(T$.FutureOfInterceptorState(), [])))(),
    VoidToFutureOr: () => (T$.VoidToFutureOr = dart.constFn(dart.fnType(dart.dynamic, [])))(),
    dynamicToFuture: () => (T$.dynamicToFuture = dart.constFn(dart.fnType(async.Future, [dart.dynamic])))(),
    dynamicToFutureOr: () => (T$.dynamicToFutureOr = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic])))(),
    RequestOptionsAndRequestInterceptorHandlerTovoid: () => (T$.RequestOptionsAndRequestInterceptorHandlerTovoid = dart.constFn(dart.fnType(dart.void, [options$.RequestOptions, dio_mixin.RequestInterceptorHandler])))(),
    FnToFn: () => (T$.FnToFn = dart.constFn(dart.fnType(T$.dynamicToFutureOr(), [T$.RequestOptionsAndRequestInterceptorHandlerTovoid()])))(),
    ResponseAndResponseInterceptorHandlerTovoid: () => (T$.ResponseAndResponseInterceptorHandlerTovoid = dart.constFn(dart.fnType(dart.void, [response$.Response, dio_mixin.ResponseInterceptorHandler])))(),
    FnToFn$1: () => (T$.FnToFn$1 = dart.constFn(dart.fnType(T$.dynamicToFutureOr(), [T$.ResponseAndResponseInterceptorHandlerTovoid()])))(),
    InterceptorStateOfDioError: () => (T$.InterceptorStateOfDioError = dart.constFn(dio_mixin.InterceptorState$(dio_error.DioError)))(),
    dynamicAndStackTraceToFuture: () => (T$.dynamicAndStackTraceToFuture = dart.constFn(dart.fnType(async.Future, [dart.dynamic, core.StackTrace])))(),
    dynamicAndStackTraceToFutureOr: () => (T$.dynamicAndStackTraceToFutureOr = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic, core.StackTrace])))(),
    DioErrorAndErrorInterceptorHandlerTovoid: () => (T$.DioErrorAndErrorInterceptorHandlerTovoid = dart.constFn(dart.fnType(dart.void, [dio_error.DioError, dio_mixin.ErrorInterceptorHandler])))(),
    FnToFn$2: () => (T$.FnToFn$2 = dart.constFn(dart.fnType(T$.dynamicAndStackTraceToFutureOr(), [T$.DioErrorAndErrorInterceptorHandlerTovoid()])))(),
    InterceptorStateOfRequestOptions: () => (T$.InterceptorStateOfRequestOptions = dart.constFn(dio_mixin.InterceptorState$(options$.RequestOptions)))(),
    VoidToInterceptorStateOfRequestOptions: () => (T$.VoidToInterceptorStateOfRequestOptions = dart.constFn(dart.fnType(T$.InterceptorStateOfRequestOptions(), [])))(),
    InterceptorTovoid: () => (T$.InterceptorTovoid = dart.constFn(dart.fnType(dart.void, [dio_mixin.Interceptor])))(),
    ResponseTovoid: () => (T$.ResponseTovoid = dart.constFn(dart.fnType(dart.void, [response$.Response])))(),
    JSArrayOfRedirectRecord: () => (T$.JSArrayOfRedirectRecord = dart.constFn(_interceptors.JSArray$(redirect_record.RedirectRecord)))(),
    StreamOfList: () => (T$.StreamOfList = dart.constFn(async.Stream$(core.List)))(),
    ListOfint: () => (T$.ListOfint = dart.constFn(core.List$(core.int)))(),
    StreamOfListOfint: () => (T$.StreamOfListOfint = dart.constFn(async.Stream$(T$.ListOfint())))(),
    StringTobool: () => (T$.StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))(),
    JSArrayOfListOfint: () => (T$.JSArrayOfListOfint = dart.constFn(_interceptors.JSArray$(T$.ListOfint())))(),
    EventSinkOfUint8List: () => (T$.EventSinkOfUint8List = dart.constFn(async.EventSink$(typed_data.Uint8List)))(),
    StreamOfSToStreamTransformerOfS$Uint8List: () => (T$.StreamOfSToStreamTransformerOfS$Uint8List = dart.constFn(dart.gFnType(S => [async.StreamTransformer$(S, typed_data.Uint8List), [async.Stream$(S)]], S => [T$.ListOfint()])))(),
    StreamOfUint8List: () => (T$.StreamOfUint8List = dart.constFn(async.Stream$(typed_data.Uint8List)))(),
    EventSinkOfUint8ListTovoid: () => (T$.EventSinkOfUint8ListTovoid = dart.constFn(dart.fnType(dart.void, [T$.EventSinkOfUint8List()])))(),
    StreamNOfUint8List: () => (T$.StreamNOfUint8List = dart.constFn(dart.nullable(T$.StreamOfUint8List())))(),
    DioErrorToNever: () => (T$.DioErrorToNever = dart.constFn(dart.fnType(dart.Never, [dio_error.DioError])))(),
    IdentityMapOfString$String: () => (T$.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))(),
    MapEntryOfString$String: () => (T$.MapEntryOfString$String = dart.constFn(core.MapEntry$(core.String, core.String)))(),
    JSArrayOfMapEntryOfString$String: () => (T$.JSArrayOfMapEntryOfString$String = dart.constFn(_interceptors.JSArray$(T$.MapEntryOfString$String())))(),
    MapEntryOfString$MultipartFile: () => (T$.MapEntryOfString$MultipartFile = dart.constFn(core.MapEntry$(core.String, multipart_file.MultipartFile)))(),
    JSArrayOfMapEntryOfString$MultipartFile: () => (T$.JSArrayOfMapEntryOfString$MultipartFile = dart.constFn(_interceptors.JSArray$(T$.MapEntryOfString$MultipartFile())))(),
    StringAndObjectNToNull: () => (T$.StringAndObjectNToNull = dart.constFn(dart.fnType(core.Null, [core.String, T$.ObjectN()])))(),
    StringTovoid: () => (T$.StringTovoid = dart.constFn(dart.fnType(dart.void, [core.String])))(),
    MapEntryOfString$StringTovoid: () => (T$.MapEntryOfString$StringTovoid = dart.constFn(dart.fnType(dart.void, [T$.MapEntryOfString$String()])))(),
    StreamControllerOfListOfint: () => (T$.StreamControllerOfListOfint = dart.constFn(async.StreamController$(T$.ListOfint())))(),
    JSArrayOfint: () => (T$.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    dynamicTovoid: () => (T$.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),
    MapEntryOfString$MultipartFileToFuture: () => (T$.MapEntryOfString$MultipartFileToFuture = dart.constFn(dart.fnType(async.Future, [T$.MapEntryOfString$MultipartFile()])))(),
    FutureOfListOfint: () => (T$.FutureOfListOfint = dart.constFn(async.Future$(T$.ListOfint())))(),
    ListOfintAndListOfintToListOfint: () => (T$.ListOfintAndListOfintToListOfint = dart.constFn(dart.fnType(T$.ListOfint(), [T$.ListOfint(), T$.ListOfint()])))(),
    VoidToFutureOfListOfint: () => (T$.VoidToFutureOfListOfint = dart.constFn(dart.fnType(T$.FutureOfListOfint(), [])))(),
    CompleterOfInterceptorState: () => (T$.CompleterOfInterceptorState = dart.constFn(async.Completer$(dio_mixin.InterceptorState)))(),
    InterceptorStateOfResponse: () => (T$.InterceptorStateOfResponse = dart.constFn(dio_mixin.InterceptorState$(response$.Response)))(),
    JSArrayOfInterceptor: () => (T$.JSArrayOfInterceptor = dart.constFn(_interceptors.JSArray$(dio_mixin.Interceptor)))(),
    ListQueueOf_InterceptorParams: () => (T$.ListQueueOf_InterceptorParams = dart.constFn(collection.ListQueue$(dio_mixin._InterceptorParams)))(),
    StringAndObjectNToString: () => (T$.StringAndObjectNToString = dart.constFn(dart.fnType(core.String, [core.String, T$.ObjectN()])))(),
    _StreamHandlerTransformerOfUint8List$Uint8List: () => (T$._StreamHandlerTransformerOfUint8List$Uint8List = dart.constFn(async._StreamHandlerTransformer$(typed_data.Uint8List, typed_data.Uint8List)))(),
    Uint8ListAndEventSinkOfUint8ListTovoid: () => (T$.Uint8ListAndEventSinkOfUint8ListTovoid = dart.constFn(dart.fnType(dart.void, [typed_data.Uint8List, T$.EventSinkOfUint8List()])))(),
    JSArrayOfUint8List: () => (T$.JSArrayOfUint8List = dart.constFn(_interceptors.JSArray$(typed_data.Uint8List)))(),
    Uint8ListTovoid: () => (T$.Uint8ListTovoid = dart.constFn(dart.fnType(dart.void, [typed_data.Uint8List])))(),
    ObjectAndStackTraceToNull: () => (T$.ObjectAndStackTraceToNull = dart.constFn(dart.fnType(core.Null, [core.Object, core.StackTrace])))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    DioErrorToFutureOfvoid: () => (T$.DioErrorToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [dio_error.DioError])))(),
    _EmptyStreamOfUint8List: () => (T$._EmptyStreamOfUint8List = dart.constFn(async._EmptyStream$(typed_data.Uint8List)))(),
    String__ToString: () => (T$.String__ToString = dart.constFn(dart.fnType(core.String, [core.String], {encoding: convert.Encoding}, {})))(),
    dynamicTodynamic: () => (T$.dynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic])))(),
    dynamicAnddynamicTovoid: () => (T$.dynamicAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, dart.dynamic])))(),
    dynamicAndStringTovoid: () => (T$.dynamicAndStringTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, core.String])))(),
    StringAndStringTobool: () => (T$.StringAndStringTobool = dart.constFn(dart.fnType(core.bool, [core.String, core.String])))(),
    StringToint: () => (T$.StringToint = dart.constFn(dart.fnType(core.int, [core.String])))(),
    StringAndListOfStringToMapEntryOfString$ListOfString: () => (T$.StringAndListOfStringToMapEntryOfString$ListOfString = dart.constFn(dart.fnType(T$.MapEntryOfString$ListOfString(), [core.String, T$.ListOfString()])))(),
    dynamicToString: () => (T$.dynamicToString = dart.constFn(dart.fnType(core.String, [dart.dynamic])))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    IdentityMapOfString$dynamic: () => (T$.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    CompleterOfDioError: () => (T$.CompleterOfDioError = dart.constFn(async.Completer$(dio_error.DioError)))(),
    LinkedHashMapOfString$dynamic: () => (T$.LinkedHashMapOfString$dynamic = dart.constFn(collection.LinkedHashMap$(core.String, dart.dynamic)))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))(),
    intNTobool: () => (T$.intNTobool = dart.constFn(dart.fnType(core.bool, [T$.intN()])))(),
    StringN: () => (T$.StringN = dart.constFn(dart.nullable(core.String)))(),
    StringToString: () => (T$.StringToString = dart.constFn(dart.fnType(core.String, [core.String])))(),
    intToUint8List: () => (T$.intToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [core.int])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(core.print, T$.ObjectNTovoid());
    },
    get C1() {
      return C[1] = dart.const(new _js_helper.PrivateSymbol.new('_#Dio#httpClientAdapter', __Dio_httpClientAdapter));
    },
    get C2() {
      return C[2] = dart.const(new _js_helper.PrivateSymbol.new('_#Dio#transformer', __Dio_transformer));
    },
    get C3() {
      return C[3] = dart.const(new _js_helper.PrivateSymbol.new('_#Dio#options', __Dio_options));
    },
    get C4() {
      return C[4] = dart.const(new _js_helper.PrivateSymbol.new('_#Dio#httpClientAdapter=', __Dio_httpClientAdapter_));
    },
    get C5() {
      return C[5] = dart.const(new _js_helper.PrivateSymbol.new('_#Dio#transformer=', __Dio_transformer_));
    },
    get C6() {
      return C[6] = dart.const(new _js_helper.PrivateSymbol.new('_#Dio#options=', __Dio_options_));
    },
    get C7() {
      return C[7] = dart.constList(["POST", "PUT", "PATCH", "DELETE"], core.String);
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: options$.ListFormat.prototype,
        [_Enum__name]: "multi",
        [_Enum_index]: 4
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: dio_mixin.InterceptorResultType.prototype,
        [_Enum__name]: "next",
        [_Enum_index]: 0
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: dio_mixin.InterceptorResultType.prototype,
        [_Enum__name]: "resolve",
        [_Enum_index]: 1
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: dio_mixin.InterceptorResultType.prototype,
        [_Enum__name]: "resolveCallFollowing",
        [_Enum_index]: 2
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: dio_mixin.InterceptorResultType.prototype,
        [_Enum__name]: "reject",
        [_Enum_index]: 3
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: dio_mixin.InterceptorResultType.prototype,
        [_Enum__name]: "rejectCallFollowing",
        [_Enum_index]: 4
      });
    },
    get C9() {
      return C[9] = dart.constList([C[10] || CT.C10, C[11] || CT.C11, C[12] || CT.C12, C[13] || CT.C13, C[14] || CT.C14], dio_mixin.InterceptorResultType);
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: convert.Latin1Codec.prototype,
        [Latin1Codec__allowInvalid]: false
      });
    },
    get C16() {
      return C[16] = dart.fn(core.Uri.encodeQueryComponent, T$.String__ToString());
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: options$.ListFormat.prototype,
        [_Enum__name]: "csv",
        [_Enum_index]: 0
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: options$.ListFormat.prototype,
        [_Enum__name]: "ssv",
        [_Enum_index]: 1
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: options$.ListFormat.prototype,
        [_Enum__name]: "tsv",
        [_Enum_index]: 2
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: options$.ListFormat.prototype,
        [_Enum__name]: "pipes",
        [_Enum_index]: 3
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: dio_error.DioErrorType.prototype,
        [_Enum__name]: "connectTimeout",
        [_Enum_index]: 0
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: dio_error.DioErrorType.prototype,
        [_Enum__name]: "sendTimeout",
        [_Enum_index]: 1
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: dio_error.DioErrorType.prototype,
        [_Enum__name]: "receiveTimeout",
        [_Enum_index]: 2
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: dio_error.DioErrorType.prototype,
        [_Enum__name]: "response",
        [_Enum_index]: 3
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: dio_error.DioErrorType.prototype,
        [_Enum__name]: "cancel",
        [_Enum_index]: 4
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: dio_error.DioErrorType.prototype,
        [_Enum__name]: "other",
        [_Enum_index]: 5
      });
    },
    get C21() {
      return C[21] = dart.constList([C[22] || CT.C22, C[23] || CT.C23, C[24] || CT.C24, C[25] || CT.C25, C[26] || CT.C26, C[27] || CT.C27], dio_error.DioErrorType);
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: options$.ResponseType.prototype,
        [_Enum__name]: "json",
        [_Enum_index]: 0
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: options$.ResponseType.prototype,
        [_Enum__name]: "stream",
        [_Enum_index]: 1
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: options$.ResponseType.prototype,
        [_Enum__name]: "plain",
        [_Enum_index]: 2
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: options$.ResponseType.prototype,
        [_Enum__name]: "bytes",
        [_Enum_index]: 3
      });
    },
    get C28() {
      return C[28] = dart.constList([C[29] || CT.C29, C[30] || CT.C30, C[31] || CT.C31, C[32] || CT.C32], options$.ResponseType);
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: options$.ListFormat.prototype,
        [_Enum__name]: "multiCompatible",
        [_Enum_index]: 5
      });
    },
    get C33() {
      return C[33] = dart.constList([C[17] || CT.C17, C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20, C[8] || CT.C8, C[34] || CT.C34], options$.ListFormat);
    },
    get C35() {
      return C[35] = dart.constMap(core.String, T$.ListOfString(), []);
    }
  }, false);
  var C = Array(36).fill(void 0);
  var I = [
    "package:dio/src/dio_mixin.dart",
    "package:dio/src/interceptors/log.dart",
    "package:dio/src/adapters/browser_adapter.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/dio-4.0.4/lib/src/dio_mixin.dart",
    "package:dio/src/entry/dio_for_browser.dart",
    "package:dio/src/multipart_file.dart",
    "package:dio/src/form_data.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/dio-4.0.4/lib/src/interceptor.dart",
    "package:dio/src/dio.dart",
    "package:dio/src/transformer.dart",
    "package:dio/src/parameter.dart",
    "package:dio/src/headers.dart",
    "package:dio/src/response.dart",
    "package:dio/src/dio_error.dart",
    "package:dio/src/cancel_token.dart",
    "package:dio/src/options.dart",
    "file:///C:/Users/Admin/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/dio-4.0.4/lib/src/options.dart",
    "package:dio/src/adapter.dart"
  ];
  var request$ = dart.privateName(log, "LogInterceptor.request");
  var requestHeader$ = dart.privateName(log, "LogInterceptor.requestHeader");
  var requestBody$ = dart.privateName(log, "LogInterceptor.requestBody");
  var responseBody$ = dart.privateName(log, "LogInterceptor.responseBody");
  var responseHeader$ = dart.privateName(log, "LogInterceptor.responseHeader");
  var error$ = dart.privateName(log, "LogInterceptor.error");
  var logPrint$ = dart.privateName(log, "LogInterceptor.logPrint");
  var _printKV = dart.privateName(log, "_printKV");
  var _printAll = dart.privateName(log, "_printAll");
  var _printResponse = dart.privateName(log, "_printResponse");
  dio_mixin.Interceptor = class Interceptor extends core.Object {
    onRequest(options, handler) {
      return handler.next(options);
    }
    onResponse(response, handler) {
      return handler.next(response);
    }
    onError(err, handler) {
      return handler.next(err);
    }
    static ['_#new#tearOff']() {
      return new dio_mixin.Interceptor.new();
    }
  };
  (dio_mixin.Interceptor.new = function() {
    ;
  }).prototype = dio_mixin.Interceptor.prototype;
  dart.addTypeTests(dio_mixin.Interceptor);
  dart.addTypeCaches(dio_mixin.Interceptor);
  dart.setMethodSignature(dio_mixin.Interceptor, () => ({
    __proto__: dart.getMethods(dio_mixin.Interceptor.__proto__),
    onRequest: dart.fnType(dart.void, [options$.RequestOptions, dio_mixin.RequestInterceptorHandler]),
    onResponse: dart.fnType(dart.void, [response$.Response, dio_mixin.ResponseInterceptorHandler]),
    onError: dart.fnType(dart.void, [dio_error.DioError, dio_mixin.ErrorInterceptorHandler])
  }));
  dart.setLibraryUri(dio_mixin.Interceptor, I[0]);
  log.LogInterceptor = class LogInterceptor extends dio_mixin.Interceptor {
    get request() {
      return this[request$];
    }
    set request(value) {
      this[request$] = value;
    }
    get requestHeader() {
      return this[requestHeader$];
    }
    set requestHeader(value) {
      this[requestHeader$] = value;
    }
    get requestBody() {
      return this[requestBody$];
    }
    set requestBody(value) {
      this[requestBody$] = value;
    }
    get responseBody() {
      return this[responseBody$];
    }
    set responseBody(value) {
      this[responseBody$] = value;
    }
    get responseHeader() {
      return this[responseHeader$];
    }
    set responseHeader(value) {
      this[responseHeader$] = value;
    }
    get error() {
      return this[error$];
    }
    set error(value) {
      this[error$] = value;
    }
    get logPrint() {
      return this[logPrint$];
    }
    set logPrint(value) {
      this[logPrint$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let request = opts && 'request' in opts ? opts.request : true;
      let requestHeader = opts && 'requestHeader' in opts ? opts.requestHeader : true;
      let requestBody = opts && 'requestBody' in opts ? opts.requestBody : false;
      let responseHeader = opts && 'responseHeader' in opts ? opts.responseHeader : true;
      let responseBody = opts && 'responseBody' in opts ? opts.responseBody : false;
      let error = opts && 'error' in opts ? opts.error : true;
      let logPrint = opts && 'logPrint' in opts ? opts.logPrint : C[0] || CT.C0;
      return new log.LogInterceptor.new({request: request, requestHeader: requestHeader, requestBody: requestBody, responseHeader: responseHeader, responseBody: responseBody, error: error, logPrint: logPrint});
    }
    onRequest(options, handler) {
      return async.async(dart.void, (function* onRequest() {
        let t0, t0$, t0$0, t0$1;
        t0 = "*** Request ***";
        this.logPrint(t0);
        this[_printKV]("uri", options.uri);
        if (this.request) {
          this[_printKV]("method", options.method);
          this[_printKV]("responseType", options.responseType.toString());
          this[_printKV]("followRedirects", options.followRedirects);
          this[_printKV]("connectTimeout", options.connectTimeout);
          this[_printKV]("sendTimeout", options.sendTimeout);
          this[_printKV]("receiveTimeout", options.receiveTimeout);
          this[_printKV]("receiveDataWhenStatusError", options.receiveDataWhenStatusError);
          this[_printKV]("extra", options.extra);
        }
        if (this.requestHeader) {
          t0$ = "headers:";
          this.logPrint(t0$);
          options.headers[$forEach](dart.fn((key, v) => this[_printKV](" " + key, v), T$.StringAnddynamicTovoid()));
        }
        if (this.requestBody) {
          t0$0 = "data:";
          this.logPrint(t0$0);
          this[_printAll](options.data);
        }
        t0$1 = "";
        this.logPrint(t0$1);
        handler.next(options);
      }).bind(this));
    }
    onResponse(response, handler) {
      return async.async(dart.void, (function* onResponse() {
        let t0;
        t0 = "*** Response ***";
        this.logPrint(t0);
        this[_printResponse](response);
        handler.next(response);
      }).bind(this));
    }
    onError(err, handler) {
      return async.async(dart.void, (function* onError() {
        let t0, t0$, t0$0, t0$1;
        if (this.error) {
          t0 = "*** DioError ***:";
          this.logPrint(t0);
          t0$ = "uri: " + dart.str(err.requestOptions.uri);
          this.logPrint(t0$);
          t0$0 = dart.str(err);
          this.logPrint(t0$0);
          if (err.response != null) {
            this[_printResponse](dart.nullCheck(err.response));
          }
          t0$1 = "";
          this.logPrint(t0$1);
        }
        handler.next(err);
      }).bind(this));
    }
    [_printResponse](response) {
      let t0, t0$, t0$0;
      this[_printKV]("uri", response.requestOptions.uri);
      if (this.responseHeader) {
        this[_printKV]("statusCode", response.statusCode);
        if (response.isRedirect === true) {
          this[_printKV]("redirect", response.realUri);
        }
        t0 = "headers:";
        this.logPrint(t0);
        response.headers.forEach(dart.fn((key, v) => this[_printKV](" " + key, v[$join]("\r\n\t")), T$.StringAndListOfStringTovoid()));
      }
      if (this.responseBody) {
        t0$ = "Response Text:";
        this.logPrint(t0$);
        this[_printAll](response.toString());
      }
      t0$0 = "";
      this.logPrint(t0$0);
    }
    [_printKV](key, v) {
      let t0;
      t0 = key + ": " + dart.str(v);
      this.logPrint(t0);
    }
    [_printAll](msg) {
      dart.toString(msg)[$split]("\n")[$forEach](this.logPrint);
    }
  };
  (log.LogInterceptor.new = function(opts) {
    let request = opts && 'request' in opts ? opts.request : true;
    let requestHeader = opts && 'requestHeader' in opts ? opts.requestHeader : true;
    let requestBody = opts && 'requestBody' in opts ? opts.requestBody : false;
    let responseHeader = opts && 'responseHeader' in opts ? opts.responseHeader : true;
    let responseBody = opts && 'responseBody' in opts ? opts.responseBody : false;
    let error = opts && 'error' in opts ? opts.error : true;
    let logPrint = opts && 'logPrint' in opts ? opts.logPrint : C[0] || CT.C0;
    this[request$] = request;
    this[requestHeader$] = requestHeader;
    this[requestBody$] = requestBody;
    this[responseHeader$] = responseHeader;
    this[responseBody$] = responseBody;
    this[error$] = error;
    this[logPrint$] = logPrint;
    ;
  }).prototype = log.LogInterceptor.prototype;
  dart.addTypeTests(log.LogInterceptor);
  dart.addTypeCaches(log.LogInterceptor);
  dart.setMethodSignature(log.LogInterceptor, () => ({
    __proto__: dart.getMethods(log.LogInterceptor.__proto__),
    [_printResponse]: dart.fnType(dart.void, [response$.Response]),
    [_printKV]: dart.fnType(dart.void, [core.String, dart.nullable(core.Object)]),
    [_printAll]: dart.fnType(dart.void, [dart.dynamic])
  }));
  dart.setLibraryUri(log.LogInterceptor, I[1]);
  dart.setFieldSignature(log.LogInterceptor, () => ({
    __proto__: dart.getFields(log.LogInterceptor.__proto__),
    request: dart.fieldType(core.bool),
    requestHeader: dart.fieldType(core.bool),
    requestBody: dart.fieldType(core.bool),
    responseBody: dart.fieldType(core.bool),
    responseHeader: dart.fieldType(core.bool),
    error: dart.fieldType(core.bool),
    logPrint: dart.fieldType(dart.fnType(dart.void, [core.Object]))
  }));
  var withCredentials = dart.privateName(browser_adapter, "BrowserHttpClientAdapter.withCredentials");
  var _xhrs = dart.privateName(browser_adapter, "_xhrs");
  browser_adapter.BrowserHttpClientAdapter = class BrowserHttpClientAdapter extends core.Object {
    get withCredentials() {
      return this[withCredentials];
    }
    set withCredentials(value) {
      this[withCredentials] = value;
    }
    fetch(options, requestStream, cancelFuture) {
      let t0, t0$;
      let xhr = html.HttpRequest.new();
      this[_xhrs][$add](xhr);
      t0 = xhr;
      (() => {
        t0.open(options.method, options.uri.toString(), {async: true});
        t0[$responseType] = "blob";
        return t0;
      })();
      let _withCredentials = options.extra[$_get]("withCredentials");
      if (_withCredentials != null) {
        xhr.withCredentials = dart.equals(_withCredentials, true);
      } else {
        xhr.withCredentials = this.withCredentials;
      }
      options.headers[$remove]("content-length");
      options.headers[$forEach](dart.fn((key, v) => xhr.setRequestHeader(key, dart.str(v)), T$.StringAnddynamicTovoid()));
      let completer = T$.CompleterOfResponseBody().new();
      xhr[$onLoad].first.then(core.Null, dart.fn(_ => {
        let blob = xhr[$response] != null ? html.Blob.as(xhr[$response]) : html.Blob.new([]);
        let reader = html.FileReader.new();
        reader[$onLoad].first.then(core.Null, dart.fn(_ => {
          let body = typed_data.Uint8List.as(reader[$result]);
          completer.complete(new adapter.ResponseBody.fromBytes(body, xhr.status, {headers: xhr[$responseHeaders][$map](core.String, T$.ListOfString(), dart.fn((k, v) => new (T$.MapEntryOfString$ListOfString()).__(k, v[$split](",")), T$.StringAndStringToMapEntryOfString$ListOfString())), statusMessage: xhr.statusText, isRedirect: xhr.status === 302 || xhr.status === 301}));
        }, T$.ProgressEventToNull()));
        reader[$onError].first.then(core.Null, dart.fn(error => {
          completer.completeError(new dio_error.DioError.new({type: dio_error.DioErrorType.response, error: error, requestOptions: options}), core.StackTrace.current);
        }, T$.ProgressEventToNull()));
        reader.readAsArrayBuffer(blob);
      }, T$.ProgressEventToNull()));
      xhr[$onError].first.then(core.Null, dart.fn(_ => {
        completer.completeError(new dio_error.DioError.new({type: dio_error.DioErrorType.response, error: "XMLHttpRequest error.", requestOptions: options}), core.StackTrace.current);
      }, T$.ProgressEventToNull()));
      t0$ = cancelFuture;
      t0$ == null ? null : t0$.then(core.Null, dart.fn(_ => {
        if (xhr[$readyState] < 4 && xhr[$readyState] > 0) {
          try {
            xhr.abort();
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
            } else
              throw e$;
          }
        }
      }, T$.dynamicToNull()));
      if (requestStream != null) {
        requestStream.toList().then(typed_data.Uint8List, dart.fn(value => {
          let length = value[$fold](core.int, 0, dart.fn((previousValue, element) => previousValue + element[$length], T$.intAndUint8ListToint()));
          let res = _native_typed_data.NativeUint8List.new(length);
          let start = 0;
          for (let list of value) {
            res[$setRange](start, start = start + list[$length], list);
          }
          return res;
        }, T$.ListOfUint8ListToUint8List())).then(dart.void, dart.bind(xhr, 'send'));
      } else {
        xhr.send();
      }
      return completer.future.whenComplete(dart.fn(() => {
        this[_xhrs][$remove](xhr);
      }, T$.VoidToNull()));
    }
    close(opts) {
      let force = opts && 'force' in opts ? opts.force : false;
      if (force) {
        for (let xhr of this[_xhrs]) {
          xhr.abort();
        }
      }
      this[_xhrs][$clear]();
    }
    static ['_#new#tearOff']() {
      return new browser_adapter.BrowserHttpClientAdapter.new();
    }
  };
  (browser_adapter.BrowserHttpClientAdapter.new = function() {
    this[_xhrs] = T$.JSArrayOfHttpRequest().of([]);
    this[withCredentials] = false;
    ;
  }).prototype = browser_adapter.BrowserHttpClientAdapter.prototype;
  dart.addTypeTests(browser_adapter.BrowserHttpClientAdapter);
  dart.addTypeCaches(browser_adapter.BrowserHttpClientAdapter);
  browser_adapter.BrowserHttpClientAdapter[dart.implements] = () => [adapter.HttpClientAdapter];
  dart.setMethodSignature(browser_adapter.BrowserHttpClientAdapter, () => ({
    __proto__: dart.getMethods(browser_adapter.BrowserHttpClientAdapter.__proto__),
    fetch: dart.fnType(async.Future$(adapter.ResponseBody), [options$.RequestOptions, dart.nullable(async.Stream$(typed_data.Uint8List)), dart.nullable(async.Future)]),
    close: dart.fnType(dart.void, [], {force: core.bool}, {})
  }));
  dart.setLibraryUri(browser_adapter.BrowserHttpClientAdapter, I[2]);
  dart.setFieldSignature(browser_adapter.BrowserHttpClientAdapter, () => ({
    __proto__: dart.getFields(browser_adapter.BrowserHttpClientAdapter.__proto__),
    [_xhrs]: dart.finalFieldType(core.List$(html.HttpRequest)),
    withCredentials: dart.fieldType(core.bool)
  }));
  browser_adapter.createAdapter = function createAdapter() {
    return new browser_adapter.BrowserHttpClientAdapter.new();
  };
  var __Dio_httpClientAdapter = dart.privateName(dio_for_browser, "_#Dio#httpClientAdapter");
  var __Dio_httpClientAdapter$ = dart.privateName(dio, "_#Dio#httpClientAdapter");
  var __Dio_transformer = dart.privateName(dio_for_browser, "_#Dio#transformer");
  var __Dio_transformer$ = dart.privateName(dio, "_#Dio#transformer");
  var __Dio_options = dart.privateName(dio_for_browser, "_#Dio#options");
  var __Dio_options$ = dart.privateName(dio, "_#Dio#options");
  var __Dio_httpClientAdapter_ = dart.privateName(dio_for_browser, "_#Dio#httpClientAdapter=");
  var __Dio_transformer_ = dart.privateName(dio_for_browser, "_#Dio#transformer=");
  var __Dio_options_ = dart.privateName(dio_for_browser, "_#Dio#options=");
  var transformer$ = dart.privateName(dio_mixin, "DioMixin.transformer");
  var __DioMixin_options = dart.privateName(dio_mixin, "_#DioMixin#options");
  var _interceptors$ = dart.privateName(dio_mixin, "_interceptors");
  var __DioMixin_httpClientAdapter = dart.privateName(dio_mixin, "_#DioMixin#httpClientAdapter");
  var _closed = dart.privateName(dio_mixin, "_closed");
  var _handleRequest = dart.privateName(dio_mixin, "_handleRequest");
  var _dispatchRequest = dart.privateName(dio_mixin, "_dispatchRequest");
  var _handleResponse = dart.privateName(dio_mixin, "_handleResponse");
  var _handleError = dart.privateName(dio_mixin, "_handleError");
  var _transformData = dart.privateName(dio_mixin, "_transformData");
  var _wait = dart.privateName(dio_mixin, "_wait");
  dio_mixin.DioMixin = class DioMixin extends core.Object {
    get transformer() {
      return this[transformer$];
    }
    set transformer(value) {
      this[transformer$] = value;
    }
    get options() {
      let t1;
      t1 = this[__DioMixin_options];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("options")) : t1;
    }
    set options(options$35param) {
      this[__DioMixin_options] = options$35param;
    }
    get interceptors() {
      return this[_interceptors$];
    }
    get httpClientAdapter() {
      let t1;
      t1 = this[__DioMixin_httpClientAdapter];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("httpClientAdapter")) : t1;
    }
    set httpClientAdapter(httpClientAdapter$35param) {
      this[__DioMixin_httpClientAdapter] = httpClientAdapter$35param;
    }
    close(opts) {
      let force = opts && 'force' in opts ? opts.force : false;
      this[_closed] = true;
      this.httpClientAdapter.close({force: force});
    }
    get(T, path, opts) {
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      return this.request(T, path, {queryParameters: queryParameters, options: dio_mixin.DioMixin.checkOptions("GET", options), onReceiveProgress: onReceiveProgress, cancelToken: cancelToken});
    }
    getUri(T, uri, opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      return this.requestUri(T, uri, {options: dio_mixin.DioMixin.checkOptions("GET", options), onReceiveProgress: onReceiveProgress, cancelToken: cancelToken});
    }
    post(T, path, opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      return this.request(T, path, {data: data, options: dio_mixin.DioMixin.checkOptions("POST", options), queryParameters: queryParameters, cancelToken: cancelToken, onSendProgress: onSendProgress, onReceiveProgress: onReceiveProgress});
    }
    postUri(T, uri, opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      return this.requestUri(T, uri, {data: data, options: dio_mixin.DioMixin.checkOptions("POST", options), cancelToken: cancelToken, onSendProgress: onSendProgress, onReceiveProgress: onReceiveProgress});
    }
    put(T, path, opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      return this.request(T, path, {data: data, queryParameters: queryParameters, options: dio_mixin.DioMixin.checkOptions("PUT", options), cancelToken: cancelToken, onSendProgress: onSendProgress, onReceiveProgress: onReceiveProgress});
    }
    putUri(T, uri, opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      return this.requestUri(T, uri, {data: data, options: dio_mixin.DioMixin.checkOptions("PUT", options), cancelToken: cancelToken, onSendProgress: onSendProgress, onReceiveProgress: onReceiveProgress});
    }
    head(T, path, opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      return this.request(T, path, {data: data, queryParameters: queryParameters, options: dio_mixin.DioMixin.checkOptions("HEAD", options), cancelToken: cancelToken});
    }
    headUri(T, uri, opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      return this.requestUri(T, uri, {data: data, options: dio_mixin.DioMixin.checkOptions("HEAD", options), cancelToken: cancelToken});
    }
    delete(T, path, opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      return this.request(T, path, {data: data, queryParameters: queryParameters, options: dio_mixin.DioMixin.checkOptions("DELETE", options), cancelToken: cancelToken});
    }
    deleteUri(T, uri, opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      return this.requestUri(T, uri, {data: data, options: dio_mixin.DioMixin.checkOptions("DELETE", options), cancelToken: cancelToken});
    }
    patch(T, path, opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      return this.request(T, path, {data: data, queryParameters: queryParameters, options: dio_mixin.DioMixin.checkOptions("PATCH", options), cancelToken: cancelToken, onSendProgress: onSendProgress, onReceiveProgress: onReceiveProgress});
    }
    patchUri(T, uri, opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      return this.requestUri(T, uri, {data: data, options: dio_mixin.DioMixin.checkOptions("PATCH", options), cancelToken: cancelToken, onSendProgress: onSendProgress, onReceiveProgress: onReceiveProgress});
    }
    lock() {
      this.interceptors.requestLock.lock();
    }
    unlock() {
      this.interceptors.requestLock.unlock();
    }
    clear() {
      this.interceptors.requestLock.clear();
    }
    download(urlPath, savePath, opts) {
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let deleteOnError = opts && 'deleteOnError' in opts ? opts.deleteOnError : true;
      let lengthHeader = opts && 'lengthHeader' in opts ? opts.lengthHeader : "content-length";
      let data = opts && 'data' in opts ? opts.data : null;
      let options = opts && 'options' in opts ? opts.options : null;
      return async.async(response$.Response, function* download() {
        dart.throw(new core.UnsupportedError.new("Unsupport download API in browser"));
      });
    }
    downloadUri(uri, savePath, opts) {
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let deleteOnError = opts && 'deleteOnError' in opts ? opts.deleteOnError : true;
      let lengthHeader = opts && 'lengthHeader' in opts ? opts.lengthHeader : "content-length";
      let data = opts && 'data' in opts ? opts.data : null;
      let options = opts && 'options' in opts ? opts.options : null;
      return this.download(uri.toString(), savePath, {onReceiveProgress: onReceiveProgress, lengthHeader: lengthHeader, deleteOnError: deleteOnError, cancelToken: cancelToken, data: data, options: options});
    }
    requestUri(T, uri, opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      return this.request(T, uri.toString(), {data: data, cancelToken: cancelToken, options: options, onSendProgress: onSendProgress, onReceiveProgress: onReceiveProgress});
    }
    request(T, path, opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      return async.async(response$.Response$(T), (function* request() {
        options == null ? options = new options$.Options.new() : null;
        let requestOptions = options.compose(this.options, path, {data: data, queryParameters: queryParameters, onReceiveProgress: onReceiveProgress, onSendProgress: onSendProgress, cancelToken: cancelToken});
        requestOptions.onReceiveProgress = onReceiveProgress;
        requestOptions.onSendProgress = onSendProgress;
        requestOptions.cancelToken = cancelToken;
        if (this[_closed]) {
          dart.throw(new dio_error.DioError.new({requestOptions: requestOptions, error: "Dio can't establish new connection after closed."}));
        }
        return this.fetch(T, requestOptions);
      }).bind(this));
    }
    fetch(T, requestOptions) {
      return async.async(response$.Response$(T), (function* fetch() {
        let stackTrace = core.StackTrace.current;
        if (requestOptions.cancelToken != null) {
          dart.nullCheck(requestOptions.cancelToken).requestOptions = requestOptions;
        }
        if (!dart.wrapType(T)._equals(dart.wrapType(dart.dynamic)) && !(requestOptions.responseType === options$.ResponseType.bytes || requestOptions.responseType === options$.ResponseType.stream)) {
          if (dart.wrapType(T)._equals(dart.wrapType(core.String))) {
            requestOptions.responseType = options$.ResponseType.plain;
          } else {
            requestOptions.responseType = options$.ResponseType.json;
          }
        }
        const _requestInterceptorWrapper = interceptor => {
          return dart.fn(_state => async.async(dart.dynamic, (function*() {
            let state = dio_mixin.InterceptorState.as(_state);
            if (state.type === dio_mixin.InterceptorResultType.next) {
              return dio_mixin.DioMixin.listenCancelForAsyncTask(dart.dynamic, requestOptions.cancelToken, async.Future.new(dart.fn(() => dio_mixin.DioMixin.checkIfNeedEnqueue(dart.dynamic, this.interceptors.requestLock, dart.fn(() => {
                let requestHandler = new dio_mixin.RequestInterceptorHandler.new();
                interceptor(options$.RequestOptions.as(state.data), requestHandler);
                return requestHandler.future;
              }, T$.VoidToFutureOfInterceptorState())), T$.VoidToFutureOr())));
            } else {
              return state;
            }
          }).bind(this)), T$.dynamicToFuture());
        };
        dart.fn(_requestInterceptorWrapper, T$.FnToFn());
        const _responseInterceptorWrapper = interceptor => {
          return dart.fn(_state => async.async(dart.dynamic, (function*() {
            let state = dio_mixin.InterceptorState.as(_state);
            if (state.type === dio_mixin.InterceptorResultType.next || state.type === dio_mixin.InterceptorResultType.resolveCallFollowing) {
              return dio_mixin.DioMixin.listenCancelForAsyncTask(dart.dynamic, requestOptions.cancelToken, async.Future.new(dart.fn(() => dio_mixin.DioMixin.checkIfNeedEnqueue(dart.dynamic, this.interceptors.responseLock, dart.fn(() => {
                let responseHandler = new dio_mixin.ResponseInterceptorHandler.new();
                interceptor(response$.Response.as(state.data), responseHandler);
                return responseHandler.future;
              }, T$.VoidToFutureOfInterceptorState())), T$.VoidToFutureOr())));
            } else {
              return state;
            }
          }).bind(this)), T$.dynamicToFuture());
        };
        dart.fn(_responseInterceptorWrapper, T$.FnToFn$1());
        const _errorInterceptorWrapper = interceptor => {
          return dart.fn((err, stackTrace) => {
            if (!dio_mixin.InterceptorState.is(err)) {
              err = new (T$.InterceptorStateOfDioError()).new(dio_mixin.DioMixin.assureDioError(err, requestOptions));
            }
            if (err.type === dio_mixin.InterceptorResultType.next || err.type === dio_mixin.InterceptorResultType.rejectCallFollowing) {
              return dio_mixin.DioMixin.listenCancelForAsyncTask(dart.dynamic, requestOptions.cancelToken, async.Future.new(dart.fn(() => dio_mixin.DioMixin.checkIfNeedEnqueue(dart.dynamic, this.interceptors.errorLock, dart.fn(() => {
                let errorHandler = new dio_mixin.ErrorInterceptorHandler.new();
                interceptor(dio_error.DioError.as(dart.dload(err, 'data')), errorHandler);
                return errorHandler.future;
              }, T$.VoidToFutureOfInterceptorState())), T$.VoidToFutureOr())));
            } else {
              dart.throw(err);
            }
          }, T$.dynamicAndStackTraceToFuture());
        };
        dart.fn(_errorInterceptorWrapper, T$.FnToFn$2());
        let future = async.Future.new(dart.fn(() => new (T$.InterceptorStateOfRequestOptions()).new(requestOptions), T$.VoidToInterceptorStateOfRequestOptions()));
        this.interceptors[$forEach](dart.fn(interceptor => {
          let fun = dio_mixin.QueuedInterceptor.is(interceptor) ? dart.bind(interceptor, _handleRequest) : dart.bind(interceptor, 'onRequest');
          future = future.then(dart.dynamic, _requestInterceptorWrapper(fun));
        }, T$.InterceptorTovoid()));
        future = future.then(dart.dynamic, _requestInterceptorWrapper(dart.fn((reqOpt, handler) => {
          requestOptions = reqOpt;
          this[_dispatchRequest](dart.dynamic, reqOpt).then(dart.void, dart.fn(value => handler.resolve(value, true), T$.ResponseTovoid())).catchError(dart.fn(e => {
            handler.reject(dio_error.DioError.as(e), true);
          }, T$.dynamicToNull()));
        }, T$.RequestOptionsAndRequestInterceptorHandlerTovoid())));
        this.interceptors[$forEach](dart.fn(interceptor => {
          let fun = dio_mixin.QueuedInterceptor.is(interceptor) ? dart.bind(interceptor, _handleResponse) : dart.bind(interceptor, 'onResponse');
          future = future.then(dart.dynamic, _responseInterceptorWrapper(fun));
        }, T$.InterceptorTovoid()));
        this.interceptors[$forEach](dart.fn(interceptor => {
          let fun = dio_mixin.QueuedInterceptor.is(interceptor) ? dart.bind(interceptor, _handleError) : dart.bind(interceptor, 'onError');
          future = future.catchError(_errorInterceptorWrapper(fun));
        }, T$.InterceptorTovoid()));
        return future.then(response$.Response$(T), dart.fn(data => dio_mixin.DioMixin.assureResponse(T, dio_mixin.InterceptorState.is(data) ? data.data : data, requestOptions), dart.fnType(response$.Response$(T), [dart.dynamic]))).catchError(dart.fn((err, _) => {
          let isState = dio_mixin.InterceptorState.is(err);
          if (isState) {
            if (dio_mixin.InterceptorState.as(err).type === dio_mixin.InterceptorResultType.resolve) {
              return dio_mixin.DioMixin.assureResponse(T, err.data, requestOptions);
            }
          }
          dart.throw(dio_mixin.DioMixin.assureDioError(isState ? dart.dload(err, 'data') : err, requestOptions, stackTrace));
        }, dart.fnType(response$.Response$(T), [dart.dynamic, dart.dynamic])));
      }).bind(this));
    }
    [_dispatchRequest](T, reqOpt) {
      return async.async(response$.Response$(T), (function* _dispatchRequest() {
        let t1, t1$, t2, t1$0;
        let cancelToken = reqOpt.cancelToken;
        let responseBody = null;
        try {
          let stream = (yield this[_transformData](reqOpt));
          responseBody = (yield this.httpClientAdapter.fetch(reqOpt, stream, (t1 = cancelToken, t1 == null ? null : t1.whenCancel)));
          responseBody.headers = responseBody.headers;
          let headers = new headers$.Headers.fromMap(responseBody.headers);
          let ret = new (response$.Response$(T)).new({headers: headers, requestOptions: reqOpt, redirects: (t1$ = responseBody.redirects, t1$ == null ? T$.JSArrayOfRedirectRecord().of([]) : t1$), isRedirect: responseBody.isRedirect, statusCode: responseBody.statusCode, statusMessage: responseBody.statusMessage, extra: responseBody.extra});
          let statusOk = (t1$0 = reqOpt, t2 = responseBody.statusCode, t1$0.validateStatus(t2));
          if (statusOk || reqOpt.receiveDataWhenStatusError === true) {
            let forceConvert = !(dart.wrapType(T)._equals(dart.wrapType(dart.dynamic)) || dart.wrapType(T)._equals(dart.wrapType(core.String))) && !(reqOpt.responseType === options$.ResponseType.bytes || reqOpt.responseType === options$.ResponseType.stream);
            let contentType = null;
            if (forceConvert) {
              contentType = headers.value("content-type");
              headers.set("content-type", "application/json; charset=utf-8");
            }
            ret.data = dart.nullable(T).as(yield this.transformer.transformResponse(reqOpt, responseBody));
            if (forceConvert) {
              headers.set("content-type", contentType);
            }
          } else {
            yield responseBody.stream.listen(null).cancel();
          }
          dio_mixin.DioMixin.checkCancelled(cancelToken);
          if (statusOk) {
            return dio_mixin.DioMixin.checkIfNeedEnqueue(response$.Response$(T), this.interceptors.responseLock, dart.fn(() => ret, dart.fnType(response$.Response$(T), [])));
          } else {
            dart.throw(new dio_error.DioError.new({requestOptions: reqOpt, response: ret, error: "Http status error [" + dart.str(responseBody.statusCode) + "]", type: dio_error.DioErrorType.response}));
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(dio_mixin.DioMixin.assureDioError(e, reqOpt));
          } else
            throw e$;
        }
      }).bind(this));
    }
    [_transformData](options) {
      return async.async(T$.StreamNOfUint8List(), (function* _transformData() {
        let data = options.data;
        let bytes = null;
        let stream = null;
        let allowPayloadMethods = C[7] || CT.C7;
        if (data != null && allowPayloadMethods[$contains](options.method)) {
          let length = null;
          if (async.Stream.is(data)) {
            if (!T$.StreamOfList().is(data)) dart.assertFailed("Stream type must be `Stream<List>`, but " + dart.str(dart.runtimeType(data)) + " is found.", I[3], 701, 16, "data is Stream<List>");
            stream = T$.StreamOfListOfint().as(data);
            options.headers[$keys][$any](dart.fn(key => {
              if (key[$toLowerCase]() === "content-length") {
                length = core.int.parse(dart.toString(options.headers[$_get](key)));
                return true;
              }
              return false;
            }, T$.StringTobool()));
          } else if (form_data.FormData.is(data)) {
            options.headers[$_set]("content-type", "multipart/form-data; boundary=" + data.boundary);
            stream = data.finalize();
            length = data.length;
            options.headers[$_set]("content-length", dart.toString(length));
          } else {
            let _data = (yield this.transformer.transformRequest(options));
            if (options.requestEncoder != null) {
              bytes = dart.nullCheck(options.requestEncoder)(_data, options);
            } else {
              bytes = convert.utf8.encode(_data);
            }
            length = bytes[$length];
            options.headers[$_set]("content-length", dart.toString(length));
            let group = T$.JSArrayOfListOfint().of([]);
            let groupCount = (bytes[$length] / 1024)[$ceil]();
            for (let i = 0; i < groupCount; i = i + 1) {
              let start = i * 1024;
              group[$add](bytes[$sublist](start, math.min(core.int, start + 1024, bytes[$length])));
            }
            stream = T$.StreamOfListOfint().fromIterable(group);
          }
          let complete = 0;
          function transform(S, stream) {
            return new (async._StreamHandlerTransformer$(S, typed_data.Uint8List)).new({handleData: dart.fn((data, sink) => {
                let t2;
                let cancelToken = options.cancelToken;
                if (cancelToken != null && cancelToken.isCancelled) {
                  cancelToken.requestOptions = options;
                  t2 = sink;
                  (() => {
                    t2.addError(dart.nullCheck(cancelToken.cancelError));
                    t2.close();
                    return t2;
                  })();
                } else {
                  if (typed_data.Uint8List.is(data)) {
                    sink.add(data);
                  } else {
                    sink.add(_native_typed_data.NativeUint8List.fromList(data));
                  }
                  if (length != null) {
                    complete = complete + data[$length];
                    if (options.onSendProgress != null) {
                      dart.nullCheck(options.onSendProgress)(complete, dart.nullCheck(length));
                    }
                  }
                }
              }, dart.fnType(dart.void, [S, T$.EventSinkOfUint8List()]))});
          }
          dart.fn(transform, T$.StreamOfSToStreamTransformerOfS$Uint8List());
          let streamTransformer = T$.StreamOfUint8List().is(stream) ? transform(typed_data.Uint8List, stream) : transform(T$.ListOfint(), stream);
          let byteStream = stream.transform(typed_data.Uint8List, streamTransformer);
          if (options.sendTimeout > 0) {
            byteStream.timeout(new core.Duration.new({milliseconds: options.sendTimeout}), {onTimeout: dart.fn(sink => {
                sink.addError(new dio_error.DioError.new({requestOptions: options, error: "Sending timeout[" + dart.str(options.connectTimeout) + "ms]", type: dio_error.DioErrorType.sendTimeout}));
                sink.close();
              }, T$.EventSinkOfUint8ListTovoid())});
          }
          return byteStream;
        }
        return null;
      }).bind(this));
    }
    static checkCancelled(cancelToken) {
      if (cancelToken != null && cancelToken.cancelError != null) {
        dart.throw(dart.nullCheck(cancelToken.cancelError));
      }
    }
    static listenCancelForAsyncTask(T, cancelToken, future) {
      return async.Future.any(T, (() => {
        let t2 = _interceptors.JSArray$(async.Future$(T)).of([]);
        if (cancelToken != null) t2.push(cancelToken.whenCancel.then(T, dart.fn(e => dart.throw(e), T$.DioErrorToNever())));
        t2.push(future);
        return t2;
      })());
    }
    static checkOptions(method, options) {
      options == null ? options = new options$.Options.new() : null;
      options.method = method;
      return options;
    }
    static checkIfNeedEnqueue(T, lock, callback) {
      if (lock.locked) {
        return dart.nullCheck(lock[_wait](T, callback));
      } else {
        return callback();
      }
    }
    static assureDioError(err, requestOptions, sourceStackTrace = null) {
      let t3;
      let dioError = null;
      if (dio_error.DioError.is(err)) {
        dioError = err;
      } else {
        dioError = new dio_error.DioError.new({requestOptions: requestOptions, error: err});
      }
      dioError.stackTrace = (t3 = sourceStackTrace, t3 == null ? dioError.stackTrace : t3);
      return dioError;
    }
    static assureResponse(T, response, requestOptions = null) {
      let t3;
      if (!response$.Response.is(response)) {
        return new (response$.Response$(T)).new({data: T.as(response), requestOptions: (t3 = requestOptions, t3 == null ? new options$.RequestOptions.new({path: ""}) : t3)});
      } else if (!response$.Response$(T).is(response)) {
        let data = T.as(response.data);
        return new (response$.Response$(T)).new({data: data, headers: response.headers, requestOptions: response.requestOptions, statusCode: response.statusCode, isRedirect: response.isRedirect, redirects: response.redirects, statusMessage: response.statusMessage, extra: response.extra});
      }
      return response;
    }
  };
  (dio_mixin.DioMixin.new = function() {
    this[__DioMixin_options] = null;
    this[_interceptors$] = new dio_mixin.Interceptors.new();
    this[__DioMixin_httpClientAdapter] = null;
    this[transformer$] = new transformer.DefaultTransformer.new();
    this[_closed] = false;
    ;
  }).prototype = dio_mixin.DioMixin.prototype;
  dart.addTypeTests(dio_mixin.DioMixin);
  dart.addTypeCaches(dio_mixin.DioMixin);
  dio_mixin.DioMixin[dart.implements] = () => [dio.Dio];
  dart.setMethodSignature(dio_mixin.DioMixin, () => ({
    __proto__: dart.getMethods(dio_mixin.DioMixin.__proto__),
    close: dart.fnType(dart.void, [], {force: core.bool}, {}),
    get: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.String], {cancelToken: dart.nullable(cancel_token.CancelToken), onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options), queryParameters: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}], T => [dart.nullable(core.Object)]),
    getUri: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.Uri], {cancelToken: dart.nullable(cancel_token.CancelToken), onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options)}, {}], T => [dart.nullable(core.Object)]),
    post: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.String], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.dynamic, onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), onSendProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options), queryParameters: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}], T => [dart.nullable(core.Object)]),
    postUri: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.Uri], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.dynamic, onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), onSendProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options)}, {}], T => [dart.nullable(core.Object)]),
    put: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.String], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.dynamic, onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), onSendProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options), queryParameters: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}], T => [dart.nullable(core.Object)]),
    putUri: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.Uri], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.dynamic, onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), onSendProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options)}, {}], T => [dart.nullable(core.Object)]),
    head: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.String], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.dynamic, options: dart.nullable(options$.Options), queryParameters: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}], T => [dart.nullable(core.Object)]),
    headUri: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.Uri], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.dynamic, options: dart.nullable(options$.Options)}, {}], T => [dart.nullable(core.Object)]),
    delete: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.String], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.dynamic, options: dart.nullable(options$.Options), queryParameters: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}], T => [dart.nullable(core.Object)]),
    deleteUri: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.Uri], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.dynamic, options: dart.nullable(options$.Options)}, {}], T => [dart.nullable(core.Object)]),
    patch: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.String], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.dynamic, onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), onSendProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options), queryParameters: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}], T => [dart.nullable(core.Object)]),
    patchUri: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.Uri], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.dynamic, onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), onSendProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options)}, {}], T => [dart.nullable(core.Object)]),
    lock: dart.fnType(dart.void, []),
    unlock: dart.fnType(dart.void, []),
    clear: dart.fnType(dart.void, []),
    download: dart.fnType(async.Future$(response$.Response), [core.String, dart.dynamic], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.dynamic, deleteOnError: core.bool, lengthHeader: core.String, onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options), queryParameters: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}),
    downloadUri: dart.fnType(async.Future$(response$.Response), [core.Uri, dart.dynamic], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.dynamic, deleteOnError: core.bool, lengthHeader: core.String, onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options)}, {}),
    requestUri: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.Uri], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.dynamic, onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), onSendProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options)}, {}], T => [dart.nullable(core.Object)]),
    request: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.String], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.dynamic, onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), onSendProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options), queryParameters: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}], T => [dart.nullable(core.Object)]),
    fetch: dart.gFnType(T => [async.Future$(response$.Response$(T)), [options$.RequestOptions]], T => [dart.nullable(core.Object)]),
    [_dispatchRequest]: dart.gFnType(T => [async.Future$(response$.Response$(T)), [options$.RequestOptions]], T => [dart.nullable(core.Object)]),
    [_transformData]: dart.fnType(async.Future$(dart.nullable(async.Stream$(typed_data.Uint8List))), [options$.RequestOptions])
  }));
  dart.setStaticMethodSignature(dio_mixin.DioMixin, () => ['checkCancelled', 'listenCancelForAsyncTask', 'checkOptions', 'checkIfNeedEnqueue', 'assureDioError', 'assureResponse']);
  dart.setGetterSignature(dio_mixin.DioMixin, () => ({
    __proto__: dart.getGetters(dio_mixin.DioMixin.__proto__),
    options: options$.BaseOptions,
    interceptors: dio_mixin.Interceptors,
    httpClientAdapter: adapter.HttpClientAdapter
  }));
  dart.setSetterSignature(dio_mixin.DioMixin, () => ({
    __proto__: dart.getSetters(dio_mixin.DioMixin.__proto__),
    options: options$.BaseOptions,
    httpClientAdapter: adapter.HttpClientAdapter
  }));
  dart.setLibraryUri(dio_mixin.DioMixin, I[0]);
  dart.setFieldSignature(dio_mixin.DioMixin, () => ({
    __proto__: dart.getFields(dio_mixin.DioMixin.__proto__),
    [__DioMixin_options]: dart.fieldType(dart.nullable(options$.BaseOptions)),
    [_interceptors$]: dart.finalFieldType(dio_mixin.Interceptors),
    [__DioMixin_httpClientAdapter]: dart.fieldType(dart.nullable(adapter.HttpClientAdapter)),
    transformer: dart.fieldType(transformer.Transformer),
    [_closed]: dart.fieldType(core.bool)
  }));
  const Object_DioMixin$36 = class Object_DioMixin extends core.Object {};
  (Object_DioMixin$36.new = function() {
    dio_mixin.DioMixin.new.call(this);
  }).prototype = Object_DioMixin$36.prototype;
  dart.applyMixin(Object_DioMixin$36, dio_mixin.DioMixin);
  dio_for_browser.DioForBrowser = class DioForBrowser extends Object_DioMixin$36 {
    static ['_#new#tearOff'](options = null) {
      return new dio_for_browser.DioForBrowser.new(options);
    }
    get [__Dio_httpClientAdapter$]() {
      return T$.HttpClientAdapterN().as(this[$noSuchMethod](new core._Invocation.getter(C[1] || CT.C1)));
    }
    get [__Dio_transformer$]() {
      return T$.TransformerN().as(this[$noSuchMethod](new core._Invocation.getter(C[2] || CT.C2)));
    }
    get [__Dio_options$]() {
      return T$.BaseOptionsN().as(this[$noSuchMethod](new core._Invocation.getter(C[3] || CT.C3)));
    }
    set [__Dio_httpClientAdapter$](value) {
      return this[$noSuchMethod](new core._Invocation.setter(C[4] || CT.C4, value));
    }
    set [__Dio_transformer$](value) {
      return this[$noSuchMethod](new core._Invocation.setter(C[5] || CT.C5, value));
    }
    set [__Dio_options$](value) {
      return this[$noSuchMethod](new core._Invocation.setter(C[6] || CT.C6, value));
    }
  };
  (dio_for_browser.DioForBrowser.new = function(options = null) {
    let t1;
    dio_for_browser.DioForBrowser.__proto__.new.call(this);
    this.options = (t1 = options, t1 == null ? new options$.BaseOptions.new() : t1);
    this.httpClientAdapter = new browser_adapter.BrowserHttpClientAdapter.new();
  }).prototype = dio_for_browser.DioForBrowser.prototype;
  dart.addTypeTests(dio_for_browser.DioForBrowser);
  dart.addTypeCaches(dio_for_browser.DioForBrowser);
  dio_for_browser.DioForBrowser[dart.implements] = () => [dio.Dio];
  dart.setGetterSignature(dio_for_browser.DioForBrowser, () => ({
    __proto__: dart.getGetters(dio_for_browser.DioForBrowser.__proto__),
    [__Dio_httpClientAdapter$]: dart.nullable(adapter.HttpClientAdapter),
    [__Dio_transformer$]: dart.nullable(transformer.Transformer),
    [__Dio_options$]: dart.nullable(options$.BaseOptions)
  }));
  dart.setSetterSignature(dio_for_browser.DioForBrowser, () => ({
    __proto__: dart.getSetters(dio_for_browser.DioForBrowser.__proto__),
    [__Dio_httpClientAdapter$]: dart.nullable(adapter.HttpClientAdapter),
    [__Dio_transformer$]: dart.nullable(transformer.Transformer),
    [__Dio_options$]: dart.nullable(options$.BaseOptions)
  }));
  dart.setLibraryUri(dio_for_browser.DioForBrowser, I[4]);
  dio_for_browser.createDio = function createDio(options = null) {
    return new dio_for_browser.DioForBrowser.new(options);
  };
  multipart_file_stub.multipartFileFromPath = function multipartFileFromPath(filePath, opts) {
    let filename = opts && 'filename' in opts ? opts.filename : null;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    return dart.throw(multipart_file_stub._err);
  };
  multipart_file_stub.multipartFileFromPathSync = function multipartFileFromPathSync(filePath, opts) {
    let filename = opts && 'filename' in opts ? opts.filename : null;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    return dart.throw(multipart_file_stub._err);
  };
  dart.defineLazy(multipart_file_stub, {
    /*multipart_file_stub._err*/get _err() {
      return new core.UnsupportedError.new("MultipartFile is only supported where dart:io is available.");
    }
  }, false);
  var length$ = dart.privateName(multipart_file, "MultipartFile.length");
  var filename$ = dart.privateName(multipart_file, "MultipartFile.filename");
  var headers$0 = dart.privateName(multipart_file, "MultipartFile.headers");
  var contentType$ = dart.privateName(multipart_file, "MultipartFile.contentType");
  var _isFinalized = dart.privateName(multipart_file, "_isFinalized");
  var _stream = dart.privateName(multipart_file, "_stream");
  multipart_file.MultipartFile = class MultipartFile extends core.Object {
    get length() {
      return this[length$];
    }
    set length(value) {
      super.length = value;
    }
    get filename() {
      return this[filename$];
    }
    set filename(value) {
      super.filename = value;
    }
    get headers() {
      return this[headers$0];
    }
    set headers(value) {
      super.headers = value;
    }
    get contentType() {
      return this[contentType$];
    }
    set contentType(value) {
      super.contentType = value;
    }
    get isFinalized() {
      return this[_isFinalized];
    }
    static ['_#new#tearOff'](stream, length, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return new multipart_file.MultipartFile.new(stream, length, {filename: filename, contentType: contentType, headers: headers});
    }
    static fromBytes(value, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let stream = T$.StreamOfListOfint().fromIterable(T$.JSArrayOfListOfint().of([value]));
      return new multipart_file.MultipartFile.new(stream, value[$length], {filename: filename, contentType: contentType, headers: headers});
    }
    static ['_#fromBytes#tearOff'](value, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return multipart_file.MultipartFile.fromBytes(value, {filename: filename, contentType: contentType, headers: headers});
    }
    static fromString(value, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      contentType == null ? contentType = new media_type.MediaType.new("text", "plain") : null;
      let encoding = utils.encodingForCharset(contentType.parameters[$_get]("charset"), convert.utf8);
      contentType = contentType.change({parameters: new (T$.IdentityMapOfString$String()).from(["charset", encoding.name])});
      return multipart_file.MultipartFile.fromBytes(encoding.encode(value), {filename: filename, contentType: contentType, headers: headers});
    }
    static ['_#fromString#tearOff'](value, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return multipart_file.MultipartFile.fromString(value, {filename: filename, contentType: contentType, headers: headers});
    }
    static fromFile(filePath, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return multipart_file_stub.multipartFileFromPath(filePath, {filename: filename, contentType: contentType, headers: headers});
    }
    static fromFileSync(filePath, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return multipart_file_stub.multipartFileFromPathSync(filePath, {filename: filename, contentType: contentType, headers: headers});
    }
    finalize() {
      if (this.isFinalized) {
        dart.throw(new core.StateError.new("Can't finalize a finalized MultipartFile."));
      }
      this[_isFinalized] = true;
      return this[_stream];
    }
  };
  (multipart_file.MultipartFile.new = function(stream, length, opts) {
    let t3;
    let filename = opts && 'filename' in opts ? opts.filename : null;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    this[_isFinalized] = false;
    this[length$] = length;
    this[filename$] = filename;
    this[_stream] = stream;
    this[headers$0] = utils.caseInsensitiveKeyMap(T$.ListOfString(), headers);
    this[contentType$] = (t3 = contentType, t3 == null ? new media_type.MediaType.new("application", "octet-stream") : t3);
    ;
  }).prototype = multipart_file.MultipartFile.prototype;
  dart.addTypeTests(multipart_file.MultipartFile);
  dart.addTypeCaches(multipart_file.MultipartFile);
  dart.setMethodSignature(multipart_file.MultipartFile, () => ({
    __proto__: dart.getMethods(multipart_file.MultipartFile.__proto__),
    finalize: dart.fnType(async.Stream$(core.List$(core.int)), [])
  }));
  dart.setStaticMethodSignature(multipart_file.MultipartFile, () => ['fromBytes', 'fromString', 'fromFile', 'fromFileSync']);
  dart.setGetterSignature(multipart_file.MultipartFile, () => ({
    __proto__: dart.getGetters(multipart_file.MultipartFile.__proto__),
    isFinalized: core.bool
  }));
  dart.setLibraryUri(multipart_file.MultipartFile, I[5]);
  dart.setFieldSignature(multipart_file.MultipartFile, () => ({
    __proto__: dart.getFields(multipart_file.MultipartFile.__proto__),
    length: dart.finalFieldType(core.int),
    filename: dart.finalFieldType(dart.nullable(core.String)),
    headers: dart.finalFieldType(dart.nullable(core.Map$(core.String, core.List$(core.String)))),
    contentType: dart.finalFieldType(dart.nullable(media_type.MediaType)),
    [_stream]: dart.finalFieldType(async.Stream$(core.List$(core.int))),
    [_isFinalized]: dart.fieldType(core.bool)
  }));
  var fields = dart.privateName(form_data, "FormData.fields");
  var files = dart.privateName(form_data, "FormData.files");
  var __FormData__boundary = dart.privateName(form_data, "_#FormData#_boundary");
  var _newlineRegExp = dart.privateName(form_data, "_newlineRegExp");
  var _isFinalized$ = dart.privateName(form_data, "_isFinalized");
  var _init = dart.privateName(form_data, "_init");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  var _boundary = dart.privateName(form_data, "_boundary");
  var _browserEncode = dart.privateName(form_data, "_browserEncode");
  var _headerForField = dart.privateName(form_data, "_headerForField");
  var _headerForFile = dart.privateName(form_data, "_headerForFile");
  form_data.FormData = class FormData extends core.Object {
    get fields() {
      return this[fields];
    }
    set fields(value) {
      super.fields = value;
    }
    get files() {
      return this[files];
    }
    set files(value) {
      super.files = value;
    }
    get [_boundary]() {
      let t3;
      t3 = this[__FormData__boundary];
      return t3 == null ? dart.throw(new _internal.LateError.fieldNI("_boundary")) : t3;
    }
    set [_boundary](library$32package$58dio$47src$47form_data$46dart$58$58_boundary$35param) {
      this[__FormData__boundary] = library$32package$58dio$47src$47form_data$46dart$58$58_boundary$35param;
    }
    get boundary() {
      return this[_boundary];
    }
    get isFinalized() {
      return this[_isFinalized$];
    }
    static ['_#new#tearOff']() {
      return new form_data.FormData.new();
    }
    static ['_#fromMap#tearOff'](map, collectionFormat = C[8] || CT.C8) {
      return new form_data.FormData.fromMap(map, collectionFormat);
    }
    [_init]() {
      let random = math.Random.new();
      this[_boundary] = "--dio-boundary-" + random.nextInt(4294967296)[$toString]()[$padLeft](10, "0");
    }
    [_headerForField](name, value) {
      let header = "content-disposition: form-data; name=\"" + dart.str(this[_browserEncode](name)) + "\"";
      if (!utils.isPlainAscii(value)) {
        header = header + "\r\n" + "content-type: text/plain; charset=utf-8\r\n" + "content-transfer-encoding: binary";
      }
      return header + "\r\n\r\n";
    }
    [_headerForFile](entry) {
      let file = entry.value;
      let header = "content-disposition: form-data; name=\"" + dart.str(this[_browserEncode](entry.key)) + "\"";
      if (file.filename != null) {
        header = header + "; filename=\"" + dart.str(this[_browserEncode](file.filename)) + "\"";
      }
      header = header + "\r\n" + "content-type: " + dart.str(file.contentType);
      if (file.headers != null) {
        dart.nullCheck(file.headers)[$forEach](dart.fn((key, values) => {
          values[$forEach](dart.fn(value => {
            header = header + "\r\n" + key + ": " + value;
          }, T$.StringTovoid()));
        }, T$.StringAndListOfStringTovoid()));
      }
      return header + "\r\n\r\n";
    }
    [_browserEncode](value) {
      if (value == null) {
        return null;
      }
      return value[$replaceAll](this[_newlineRegExp], "%0D%0A")[$replaceAll]("\"", "%22");
    }
    get length() {
      let length = 0;
      this.fields[$forEach](dart.fn(entry => {
        length = length + ("--".length + 25 + "\r\n".length + convert.utf8.encode(this[_headerForField](entry.key, entry.value))[$length] + convert.utf8.encode(entry.value)[$length] + "\r\n".length);
      }, T$.MapEntryOfString$StringTovoid()));
      for (let file of this.files) {
        length = length + ("--".length + 25 + "\r\n".length + convert.utf8.encode(this[_headerForFile](file))[$length] + file.value.length + "\r\n".length);
      }
      return length + "--".length + 25 + "--\r\n".length;
    }
    finalize() {
      if (this.isFinalized) {
        dart.throw(new core.StateError.new("Can't finalize a finalized MultipartFile."));
      }
      this[_isFinalized$] = true;
      let controller = T$.StreamControllerOfListOfint().new({sync: false});
      function writeAscii(string) {
        controller.add(convert.utf8.encode(string));
      }
      dart.fn(writeAscii, T$.StringTovoid());
      function writeUtf8(string) {
        return controller.add(convert.utf8.encode(string));
      }
      dart.fn(writeUtf8, T$.StringTovoid());
      function writeLine() {
        return controller.add(T$.JSArrayOfint().of([13, 10]));
      }
      dart.fn(writeLine, T$.VoidTovoid());
      this.fields[$forEach](dart.fn(entry => {
        writeAscii("--" + this.boundary + "\r\n");
        writeAscii(this[_headerForField](entry.key, entry.value));
        writeUtf8(entry.value);
        writeLine();
      }, T$.MapEntryOfString$StringTovoid()));
      async.Future.forEach(T$.MapEntryOfString$MultipartFile(), this.files, dart.fn(file => {
        writeAscii("--" + this.boundary + "\r\n");
        writeAscii(this[_headerForFile](file));
        return utils.writeStreamToSink(file.value.finalize(), controller).then(dart.dynamic, dart.fn(_ => writeLine(), T$.dynamicTovoid()));
      }, T$.MapEntryOfString$MultipartFileToFuture())).then(core.Null, dart.fn(_ => {
        writeAscii("--" + this.boundary + "--\r\n");
        controller.close();
      }, T$.dynamicToNull()));
      return controller.stream;
    }
    readAsBytes() {
      return T$.FutureOfListOfint().new(dart.fn(() => this.finalize().reduce(dart.fn((a, b) => (() => {
        let t3 = T$.ListOfint().of(a);
        t3[$addAll](b);
        return t3;
      })(), T$.ListOfintAndListOfintToListOfint())), T$.VoidToFutureOfListOfint()));
    }
  };
  (form_data.FormData.new = function() {
    this[__FormData__boundary] = null;
    this[_newlineRegExp] = core.RegExp.new("\\r\\n|\\r|\\n");
    this[fields] = T$.JSArrayOfMapEntryOfString$String().of([]);
    this[files] = T$.JSArrayOfMapEntryOfString$MultipartFile().of([]);
    this[_isFinalized$] = false;
    this[_init]();
  }).prototype = form_data.FormData.prototype;
  (form_data.FormData.fromMap = function(map, collectionFormat = C[8] || CT.C8) {
    this[__FormData__boundary] = null;
    this[_newlineRegExp] = core.RegExp.new("\\r\\n|\\r|\\n");
    this[fields] = T$.JSArrayOfMapEntryOfString$String().of([]);
    this[files] = T$.JSArrayOfMapEntryOfString$MultipartFile().of([]);
    this[_isFinalized$] = false;
    this[_init]();
    utils.encodeMap(map, dart.fn((key, value) => {
      if (value == null) return null;
      if (multipart_file.MultipartFile.is(value)) {
        this.files[$add](new (T$.MapEntryOfString$MultipartFile()).__(key, value));
      } else {
        this.fields[$add](new (T$.MapEntryOfString$String()).__(key, dart.toString(value)));
      }
      return null;
    }, T$.StringAndObjectNToNull()), {listFormat: collectionFormat, encode: false});
  }).prototype = form_data.FormData.prototype;
  dart.addTypeTests(form_data.FormData);
  dart.addTypeCaches(form_data.FormData);
  dart.setMethodSignature(form_data.FormData, () => ({
    __proto__: dart.getMethods(form_data.FormData.__proto__),
    [_init]: dart.fnType(dart.void, []),
    [_headerForField]: dart.fnType(core.String, [core.String, core.String]),
    [_headerForFile]: dart.fnType(core.String, [core.MapEntry$(core.String, multipart_file.MultipartFile)]),
    [_browserEncode]: dart.fnType(dart.nullable(core.String), [dart.nullable(core.String)]),
    finalize: dart.fnType(async.Stream$(core.List$(core.int)), []),
    readAsBytes: dart.fnType(async.Future$(core.List$(core.int)), [])
  }));
  dart.setGetterSignature(form_data.FormData, () => ({
    __proto__: dart.getGetters(form_data.FormData.__proto__),
    [_boundary]: core.String,
    boundary: core.String,
    isFinalized: core.bool,
    length: core.int
  }));
  dart.setSetterSignature(form_data.FormData, () => ({
    __proto__: dart.getSetters(form_data.FormData.__proto__),
    [_boundary]: core.String
  }));
  dart.setLibraryUri(form_data.FormData, I[6]);
  dart.setFieldSignature(form_data.FormData, () => ({
    __proto__: dart.getFields(form_data.FormData.__proto__),
    [__FormData__boundary]: dart.fieldType(dart.nullable(core.String)),
    [_newlineRegExp]: dart.finalFieldType(core.RegExp),
    fields: dart.finalFieldType(core.List$(core.MapEntry$(core.String, core.String))),
    files: dart.finalFieldType(core.List$(core.MapEntry$(core.String, multipart_file.MultipartFile))),
    [_isFinalized$]: dart.fieldType(core.bool)
  }));
  dart.setStaticFieldSignature(form_data.FormData, () => ['_BOUNDARY_PRE_TAG', '_BOUNDARY_LENGTH']);
  dart.defineLazy(form_data.FormData, {
    /*form_data.FormData._BOUNDARY_PRE_TAG*/get _BOUNDARY_PRE_TAG() {
      return "--dio-boundary-";
    },
    /*form_data.FormData._BOUNDARY_LENGTH*/get _BOUNDARY_LENGTH() {
      return 25;
    }
  }, false);
  var _lock = dart.privateName(dio_mixin, "_lock");
  var __Lock__completer = dart.privateName(dio_mixin, "_#Lock#_completer");
  var _completer = dart.privateName(dio_mixin, "_completer");
  dio_mixin.Lock = class Lock extends core.Object {
    get [_completer]() {
      let t4;
      t4 = this[__Lock__completer];
      return t4 == null ? dart.throw(new _internal.LateError.fieldNI("_completer")) : t4;
    }
    set [_completer](library$32package$58dio$47src$47interceptor$46dart$58$58_completer$35param) {
      this[__Lock__completer] = library$32package$58dio$47src$47interceptor$46dart$58$58_completer$35param;
    }
    get locked() {
      return this[_lock] != null;
    }
    lock() {
      if (!this.locked) {
        this[_completer] = async.Completer.new();
        this[_lock] = this[_completer].future;
      }
    }
    unlock() {
      if (this.locked) {
        this[_completer].complete();
        this[_lock] = null;
      }
    }
    clear(msg = "cancelled") {
      if (this.locked) {
        this[_completer].completeError(msg);
        this[_lock] = null;
      }
    }
    [_wait](T, callback) {
      if (this.locked) {
        return dart.nullCheck(this[_lock]).then(T, dart.fn(d => callback(), dart.fnType(async.FutureOr$(T), [dart.dynamic])));
      }
      return null;
    }
    static ['_#new#tearOff']() {
      return new dio_mixin.Lock.new();
    }
  };
  (dio_mixin.Lock.new = function() {
    this[_lock] = null;
    this[__Lock__completer] = null;
    ;
  }).prototype = dio_mixin.Lock.prototype;
  dart.addTypeTests(dio_mixin.Lock);
  dart.addTypeCaches(dio_mixin.Lock);
  dart.setMethodSignature(dio_mixin.Lock, () => ({
    __proto__: dart.getMethods(dio_mixin.Lock.__proto__),
    lock: dart.fnType(dart.void, []),
    unlock: dart.fnType(dart.void, []),
    clear: dart.fnType(dart.void, [], [core.String]),
    [_wait]: dart.gFnType(T => [dart.nullable(async.Future$(T)), [dart.fnType(async.FutureOr$(T), [])]], T => [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(dio_mixin.Lock, () => ({
    __proto__: dart.getGetters(dio_mixin.Lock.__proto__),
    [_completer]: async.Completer,
    locked: core.bool
  }));
  dart.setSetterSignature(dio_mixin.Lock, () => ({
    __proto__: dart.getSetters(dio_mixin.Lock.__proto__),
    [_completer]: async.Completer
  }));
  dart.setLibraryUri(dio_mixin.Lock, I[0]);
  dart.setFieldSignature(dio_mixin.Lock, () => ({
    __proto__: dart.getFields(dio_mixin.Lock.__proto__),
    [_lock]: dart.fieldType(dart.nullable(async.Future)),
    [__Lock__completer]: dart.fieldType(dart.nullable(async.Completer))
  }));
  var _name = dart.privateName(core, "_name");
  dio_mixin.InterceptorResultType = class InterceptorResultType extends core._Enum {
    toString() {
      return "InterceptorResultType." + this[_name];
    }
  };
  (dio_mixin.InterceptorResultType.new = function(index, name) {
    dio_mixin.InterceptorResultType.__proto__.new.call(this, index, name);
    ;
  }).prototype = dio_mixin.InterceptorResultType.prototype;
  dart.addTypeTests(dio_mixin.InterceptorResultType);
  dart.addTypeCaches(dio_mixin.InterceptorResultType);
  dart.setLibraryUri(dio_mixin.InterceptorResultType, I[0]);
  dart.setStaticFieldSignature(dio_mixin.InterceptorResultType, () => ['values', 'next', 'resolve', 'resolveCallFollowing', 'reject', 'rejectCallFollowing']);
  dart.defineExtensionMethods(dio_mixin.InterceptorResultType, ['toString']);
  dart.defineLazy(dio_mixin.InterceptorResultType, {
    /*dio_mixin.InterceptorResultType.values*/get values() {
      return C[9] || CT.C9;
    },
    /*dio_mixin.InterceptorResultType.next*/get next() {
      return C[10] || CT.C10;
    },
    /*dio_mixin.InterceptorResultType.resolve*/get resolve() {
      return C[11] || CT.C11;
    },
    /*dio_mixin.InterceptorResultType.resolveCallFollowing*/get resolveCallFollowing() {
      return C[12] || CT.C12;
    },
    /*dio_mixin.InterceptorResultType.reject*/get reject() {
      return C[13] || CT.C13;
    },
    /*dio_mixin.InterceptorResultType.rejectCallFollowing*/get rejectCallFollowing() {
      return C[14] || CT.C14;
    }
  }, false);
  var data$ = dart.privateName(dio_mixin, "InterceptorState.data");
  var type$ = dart.privateName(dio_mixin, "InterceptorState.type");
  const _is_InterceptorState_default = Symbol('_is_InterceptorState_default');
  dio_mixin.InterceptorState$ = dart.generic(T => {
    class InterceptorState extends core.Object {
      get data() {
        return this[data$];
      }
      set data(value) {
        this[data$] = T.as(value);
      }
      get type() {
        return this[type$];
      }
      set type(value) {
        this[type$] = value;
      }
      static ['_#new#tearOff'](T, data, type = C[10] || CT.C10) {
        return new (dio_mixin.InterceptorState$(T)).new(data, type);
      }
    }
    (InterceptorState.new = function(data, type = C[10] || CT.C10) {
      this[data$] = data;
      this[type$] = type;
      ;
    }).prototype = InterceptorState.prototype;
    dart.addTypeTests(InterceptorState);
    InterceptorState.prototype[_is_InterceptorState_default] = true;
    dart.addTypeCaches(InterceptorState);
    dart.setLibraryUri(InterceptorState, I[0]);
    dart.setFieldSignature(InterceptorState, () => ({
      __proto__: dart.getFields(InterceptorState.__proto__),
      data: dart.fieldType(T),
      type: dart.fieldType(dio_mixin.InterceptorResultType)
    }));
    return InterceptorState;
  });
  dio_mixin.InterceptorState = dio_mixin.InterceptorState$();
  dart.addTypeTests(dio_mixin.InterceptorState, _is_InterceptorState_default);
  var _processNextInQueue = dart.privateName(dio_mixin, "_processNextInQueue");
  dio_mixin._BaseHandler = class _BaseHandler extends core.Object {
    get future() {
      return this[_completer].future;
    }
    get isCompleted() {
      return this[_completer].isCompleted;
    }
    static ['_#new#tearOff']() {
      return new dio_mixin._BaseHandler.new();
    }
  };
  (dio_mixin._BaseHandler.new = function() {
    this[_completer] = T$.CompleterOfInterceptorState().new();
    this[_processNextInQueue] = null;
    ;
  }).prototype = dio_mixin._BaseHandler.prototype;
  dart.addTypeTests(dio_mixin._BaseHandler);
  dart.addTypeCaches(dio_mixin._BaseHandler);
  dart.setGetterSignature(dio_mixin._BaseHandler, () => ({
    __proto__: dart.getGetters(dio_mixin._BaseHandler.__proto__),
    future: async.Future$(dio_mixin.InterceptorState),
    isCompleted: core.bool
  }));
  dart.setLibraryUri(dio_mixin._BaseHandler, I[0]);
  dart.setFieldSignature(dio_mixin._BaseHandler, () => ({
    __proto__: dart.getFields(dio_mixin._BaseHandler.__proto__),
    [_completer]: dart.finalFieldType(async.Completer$(dio_mixin.InterceptorState)),
    [_processNextInQueue]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [])))
  }));
  dio_mixin.RequestInterceptorHandler = class RequestInterceptorHandler extends dio_mixin._BaseHandler {
    next(requestOptions) {
      let t6;
      this[_completer].complete(new (T$.InterceptorStateOfRequestOptions()).new(requestOptions));
      t6 = this[_processNextInQueue];
      t6 == null ? null : t6();
    }
    resolve(response, callFollowingResponseInterceptor = false) {
      let t6;
      this[_completer].complete(new (T$.InterceptorStateOfResponse()).new(response, callFollowingResponseInterceptor ? dio_mixin.InterceptorResultType.resolveCallFollowing : dio_mixin.InterceptorResultType.resolve));
      t6 = this[_processNextInQueue];
      t6 == null ? null : t6();
    }
    reject(error, callFollowingErrorInterceptor = false) {
      let t6;
      this[_completer].completeError(new (T$.InterceptorStateOfDioError()).new(error, callFollowingErrorInterceptor ? dio_mixin.InterceptorResultType.rejectCallFollowing : dio_mixin.InterceptorResultType.reject), error.stackTrace);
      t6 = this[_processNextInQueue];
      t6 == null ? null : t6();
    }
    static ['_#new#tearOff']() {
      return new dio_mixin.RequestInterceptorHandler.new();
    }
  };
  (dio_mixin.RequestInterceptorHandler.new = function() {
    dio_mixin.RequestInterceptorHandler.__proto__.new.call(this);
    ;
  }).prototype = dio_mixin.RequestInterceptorHandler.prototype;
  dart.addTypeTests(dio_mixin.RequestInterceptorHandler);
  dart.addTypeCaches(dio_mixin.RequestInterceptorHandler);
  dart.setMethodSignature(dio_mixin.RequestInterceptorHandler, () => ({
    __proto__: dart.getMethods(dio_mixin.RequestInterceptorHandler.__proto__),
    next: dart.fnType(dart.void, [options$.RequestOptions]),
    resolve: dart.fnType(dart.void, [response$.Response], [core.bool]),
    reject: dart.fnType(dart.void, [dio_error.DioError], [core.bool])
  }));
  dart.setLibraryUri(dio_mixin.RequestInterceptorHandler, I[0]);
  dio_mixin.ResponseInterceptorHandler = class ResponseInterceptorHandler extends dio_mixin._BaseHandler {
    next(response) {
      let t6;
      this[_completer].complete(new (T$.InterceptorStateOfResponse()).new(response));
      t6 = this[_processNextInQueue];
      t6 == null ? null : t6();
    }
    resolve(response) {
      let t6;
      this[_completer].complete(new (T$.InterceptorStateOfResponse()).new(response, dio_mixin.InterceptorResultType.resolve));
      t6 = this[_processNextInQueue];
      t6 == null ? null : t6();
    }
    reject(error, callFollowingErrorInterceptor = false) {
      let t6;
      this[_completer].completeError(new (T$.InterceptorStateOfDioError()).new(error, callFollowingErrorInterceptor ? dio_mixin.InterceptorResultType.rejectCallFollowing : dio_mixin.InterceptorResultType.reject), error.stackTrace);
      t6 = this[_processNextInQueue];
      t6 == null ? null : t6();
    }
    static ['_#new#tearOff']() {
      return new dio_mixin.ResponseInterceptorHandler.new();
    }
  };
  (dio_mixin.ResponseInterceptorHandler.new = function() {
    dio_mixin.ResponseInterceptorHandler.__proto__.new.call(this);
    ;
  }).prototype = dio_mixin.ResponseInterceptorHandler.prototype;
  dart.addTypeTests(dio_mixin.ResponseInterceptorHandler);
  dart.addTypeCaches(dio_mixin.ResponseInterceptorHandler);
  dart.setMethodSignature(dio_mixin.ResponseInterceptorHandler, () => ({
    __proto__: dart.getMethods(dio_mixin.ResponseInterceptorHandler.__proto__),
    next: dart.fnType(dart.void, [response$.Response]),
    resolve: dart.fnType(dart.void, [response$.Response]),
    reject: dart.fnType(dart.void, [dio_error.DioError], [core.bool])
  }));
  dart.setLibraryUri(dio_mixin.ResponseInterceptorHandler, I[0]);
  dio_mixin.ErrorInterceptorHandler = class ErrorInterceptorHandler extends dio_mixin._BaseHandler {
    next(err) {
      let t6;
      this[_completer].completeError(new (T$.InterceptorStateOfDioError()).new(err), err.stackTrace);
      t6 = this[_processNextInQueue];
      t6 == null ? null : t6();
    }
    resolve(response) {
      let t6;
      this[_completer].complete(new (T$.InterceptorStateOfResponse()).new(response, dio_mixin.InterceptorResultType.resolve));
      t6 = this[_processNextInQueue];
      t6 == null ? null : t6();
    }
    reject(error) {
      let t6;
      this[_completer].completeError(new (T$.InterceptorStateOfDioError()).new(error, dio_mixin.InterceptorResultType.reject), error.stackTrace);
      t6 = this[_processNextInQueue];
      t6 == null ? null : t6();
    }
    static ['_#new#tearOff']() {
      return new dio_mixin.ErrorInterceptorHandler.new();
    }
  };
  (dio_mixin.ErrorInterceptorHandler.new = function() {
    dio_mixin.ErrorInterceptorHandler.__proto__.new.call(this);
    ;
  }).prototype = dio_mixin.ErrorInterceptorHandler.prototype;
  dart.addTypeTests(dio_mixin.ErrorInterceptorHandler);
  dart.addTypeCaches(dio_mixin.ErrorInterceptorHandler);
  dart.setMethodSignature(dio_mixin.ErrorInterceptorHandler, () => ({
    __proto__: dart.getMethods(dio_mixin.ErrorInterceptorHandler.__proto__),
    next: dart.fnType(dart.void, [dio_error.DioError]),
    resolve: dart.fnType(dart.void, [response$.Response]),
    reject: dart.fnType(dart.void, [dio_error.DioError])
  }));
  dart.setLibraryUri(dio_mixin.ErrorInterceptorHandler, I[0]);
  var _onRequest = dart.privateName(dio_mixin, "_InterceptorWrapperMixin._onRequest");
  var _onResponse = dart.privateName(dio_mixin, "_InterceptorWrapperMixin._onResponse");
  var _onError = dart.privateName(dio_mixin, "_InterceptorWrapperMixin._onError");
  var _onRequest$ = dart.privateName(dio_mixin, "_onRequest");
  var _onResponse$ = dart.privateName(dio_mixin, "_onResponse");
  var _onError$ = dart.privateName(dio_mixin, "_onError");
  dio_mixin._InterceptorWrapperMixin = class _InterceptorWrapperMixin extends dio_mixin.Interceptor {};
  dio_mixin._InterceptorWrapperMixin[dart.mixinOn] = Interceptor => class _InterceptorWrapperMixin extends Interceptor {
    get [_onRequest$]() {
      return this[_onRequest];
    }
    set [_onRequest$](value) {
      this[_onRequest] = value;
    }
    get [_onResponse$]() {
      return this[_onResponse];
    }
    set [_onResponse$](value) {
      this[_onResponse] = value;
    }
    get [_onError$]() {
      return this[_onError];
    }
    set [_onError$](value) {
      this[_onError] = value;
    }
    onRequest(options, handler) {
      if (this[_onRequest$] != null) {
        dart.nullCheck(this[_onRequest$])(options, handler);
      } else {
        handler.next(options);
      }
    }
    onResponse(response, handler) {
      if (this[_onResponse$] != null) {
        dart.nullCheck(this[_onResponse$])(response, handler);
      } else {
        handler.next(response);
      }
    }
    onError(err, handler) {
      if (this[_onError$] != null) {
        dart.nullCheck(this[_onError$])(err, handler);
      } else {
        handler.next(err);
      }
    }
  };
  (dio_mixin._InterceptorWrapperMixin[dart.mixinNew] = function() {
    this[_onRequest] = null;
    this[_onResponse] = null;
    this[_onError] = null;
  }).prototype = dio_mixin._InterceptorWrapperMixin.prototype;
  dart.addTypeTests(dio_mixin._InterceptorWrapperMixin);
  dart.addTypeCaches(dio_mixin._InterceptorWrapperMixin);
  dio_mixin._InterceptorWrapperMixin[dart.implements] = () => [dio_mixin.Interceptor];
  dart.setLibraryUri(dio_mixin._InterceptorWrapperMixin, I[0]);
  dart.setFieldSignature(dio_mixin._InterceptorWrapperMixin, () => ({
    __proto__: dart.getFields(dio_mixin._InterceptorWrapperMixin.__proto__),
    [_onRequest$]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [options$.RequestOptions, dio_mixin.RequestInterceptorHandler]))),
    [_onResponse$]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [response$.Response, dio_mixin.ResponseInterceptorHandler]))),
    [_onError$]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [dio_error.DioError, dio_mixin.ErrorInterceptorHandler])))
  }));
  var __onRequest = dart.privateName(dio_mixin, "__onRequest");
  var __onResponse = dart.privateName(dio_mixin, "__onResponse");
  var __onError = dart.privateName(dio_mixin, "__onError");
  const Interceptor__InterceptorWrapperMixin$36 = class Interceptor__InterceptorWrapperMixin extends dio_mixin.Interceptor {};
  (Interceptor__InterceptorWrapperMixin$36.new = function() {
    dio_mixin._InterceptorWrapperMixin[dart.mixinNew].call(this);
  }).prototype = Interceptor__InterceptorWrapperMixin$36.prototype;
  dart.applyMixin(Interceptor__InterceptorWrapperMixin$36, dio_mixin._InterceptorWrapperMixin);
  dio_mixin.InterceptorsWrapper = class InterceptorsWrapper extends Interceptor__InterceptorWrapperMixin$36 {
    static ['_#new#tearOff'](opts) {
      let onRequest = opts && 'onRequest' in opts ? opts.onRequest : null;
      let onResponse = opts && 'onResponse' in opts ? opts.onResponse : null;
      let onError = opts && 'onError' in opts ? opts.onError : null;
      return new dio_mixin.InterceptorsWrapper.new({onRequest: onRequest, onResponse: onResponse, onError: onError});
    }
    get [_onError$]() {
      return this[__onError];
    }
    set [_onError$](value) {
      super[_onError$] = value;
    }
    get [_onRequest$]() {
      return this[__onRequest];
    }
    set [_onRequest$](value) {
      super[_onRequest$] = value;
    }
    get [_onResponse$]() {
      return this[__onResponse];
    }
    set [_onResponse$](value) {
      super[_onResponse$] = value;
    }
  };
  (dio_mixin.InterceptorsWrapper.new = function(opts) {
    let onRequest = opts && 'onRequest' in opts ? opts.onRequest : null;
    let onResponse = opts && 'onResponse' in opts ? opts.onResponse : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    this[__onRequest] = onRequest;
    this[__onResponse] = onResponse;
    this[__onError] = onError;
    dio_mixin.InterceptorsWrapper.__proto__.new.call(this);
    ;
  }).prototype = dio_mixin.InterceptorsWrapper.prototype;
  dart.addTypeTests(dio_mixin.InterceptorsWrapper);
  dart.addTypeCaches(dio_mixin.InterceptorsWrapper);
  dart.setLibraryUri(dio_mixin.InterceptorsWrapper, I[0]);
  dart.setFieldSignature(dio_mixin.InterceptorsWrapper, () => ({
    __proto__: dart.getFields(dio_mixin.InterceptorsWrapper.__proto__),
    [__onRequest]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [options$.RequestOptions, dio_mixin.RequestInterceptorHandler]))),
    [__onResponse]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [response$.Response, dio_mixin.ResponseInterceptorHandler]))),
    [__onError]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [dio_error.DioError, dio_mixin.ErrorInterceptorHandler])))
  }));
  var length = dart.privateName(dio_mixin, "Interceptors.length");
  var _list = dart.privateName(dio_mixin, "_list");
  var _requestLock = dart.privateName(dio_mixin, "_requestLock");
  var _responseLock = dart.privateName(dio_mixin, "_responseLock");
  var _errorLock = dart.privateName(dio_mixin, "_errorLock");
  dio_mixin.Interceptors = class Interceptors extends collection.ListMixin$(dio_mixin.Interceptor) {
    get length() {
      return this[length];
    }
    set length(value) {
      this[length] = value;
    }
    get requestLock() {
      return this[_requestLock];
    }
    get responseLock() {
      return this[_responseLock];
    }
    get errorLock() {
      return this[_errorLock];
    }
    _get(index) {
      return this[_list][$_get](index);
    }
    _set(index, value$) {
      let value = value$;
      dio_mixin.Interceptor.as(value);
      if (this[_list][$length] === index) {
        this[_list][$add](value);
      } else {
        this[_list][$_set](index, value);
      }
      return value$;
    }
    static ['_#new#tearOff']() {
      return new dio_mixin.Interceptors.new();
    }
  };
  (dio_mixin.Interceptors.new = function() {
    this[_list] = T$.JSArrayOfInterceptor().of([]);
    this[_requestLock] = new dio_mixin.Lock.new();
    this[_responseLock] = new dio_mixin.Lock.new();
    this[_errorLock] = new dio_mixin.Lock.new();
    this[length] = 0;
    ;
  }).prototype = dio_mixin.Interceptors.prototype;
  dart.addTypeTests(dio_mixin.Interceptors);
  dart.addTypeCaches(dio_mixin.Interceptors);
  dart.setMethodSignature(dio_mixin.Interceptors, () => ({
    __proto__: dart.getMethods(dio_mixin.Interceptors.__proto__),
    _get: dart.fnType(dio_mixin.Interceptor, [core.int]),
    [$_get]: dart.fnType(dio_mixin.Interceptor, [core.int]),
    _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(dio_mixin.Interceptors, () => ({
    __proto__: dart.getGetters(dio_mixin.Interceptors.__proto__),
    requestLock: dio_mixin.Lock,
    responseLock: dio_mixin.Lock,
    errorLock: dio_mixin.Lock
  }));
  dart.setLibraryUri(dio_mixin.Interceptors, I[0]);
  dart.setFieldSignature(dio_mixin.Interceptors, () => ({
    __proto__: dart.getFields(dio_mixin.Interceptors.__proto__),
    [_list]: dart.finalFieldType(core.List$(dio_mixin.Interceptor)),
    [_requestLock]: dart.finalFieldType(dio_mixin.Lock),
    [_responseLock]: dart.finalFieldType(dio_mixin.Lock),
    [_errorLock]: dart.finalFieldType(dio_mixin.Lock),
    length: dart.fieldType(core.int)
  }));
  dart.defineExtensionMethods(dio_mixin.Interceptors, ['_get', '_set']);
  dart.defineExtensionAccessors(dio_mixin.Interceptors, ['length']);
  var data$0 = dart.privateName(dio_mixin, "_InterceptorParams.data");
  var handler$ = dart.privateName(dio_mixin, "_InterceptorParams.handler");
  const _is__InterceptorParams_default = Symbol('_is__InterceptorParams_default');
  dio_mixin._InterceptorParams$ = dart.generic((T, V) => {
    class _InterceptorParams extends core.Object {
      get data() {
        return this[data$0];
      }
      set data(value) {
        this[data$0] = T.as(value);
      }
      get handler() {
        return this[handler$];
      }
      set handler(value) {
        this[handler$] = V.as(value);
      }
      static ['_#new#tearOff'](T, V, data, handler) {
        return new (dio_mixin._InterceptorParams$(T, V)).new(data, handler);
      }
    }
    (_InterceptorParams.new = function(data, handler) {
      this[data$0] = data;
      this[handler$] = handler;
      ;
    }).prototype = _InterceptorParams.prototype;
    dart.addTypeTests(_InterceptorParams);
    _InterceptorParams.prototype[_is__InterceptorParams_default] = true;
    dart.addTypeCaches(_InterceptorParams);
    dart.setLibraryUri(_InterceptorParams, I[0]);
    dart.setFieldSignature(_InterceptorParams, () => ({
      __proto__: dart.getFields(_InterceptorParams.__proto__),
      data: dart.fieldType(T),
      handler: dart.fieldType(V)
    }));
    return _InterceptorParams;
  });
  dio_mixin._InterceptorParams = dio_mixin._InterceptorParams$();
  dart.addTypeTests(dio_mixin._InterceptorParams, _is__InterceptorParams_default);
  dio_mixin._TaskQueue = class _TaskQueue extends core.Object {
    static ['_#new#tearOff']() {
      return new dio_mixin._TaskQueue.new();
    }
  };
  (dio_mixin._TaskQueue.new = function() {
    this.queue = new (T$.ListQueueOf_InterceptorParams()).new();
    this.processing = false;
    ;
  }).prototype = dio_mixin._TaskQueue.prototype;
  dart.addTypeTests(dio_mixin._TaskQueue);
  dart.addTypeCaches(dio_mixin._TaskQueue);
  dart.setLibraryUri(dio_mixin._TaskQueue, I[0]);
  dart.setFieldSignature(dio_mixin._TaskQueue, () => ({
    __proto__: dart.getFields(dio_mixin._TaskQueue.__proto__),
    queue: dart.finalFieldType(collection.Queue$(dio_mixin._InterceptorParams)),
    processing: dart.fieldType(core.bool)
  }));
  var _requestQueue = dart.privateName(dio_mixin, "_requestQueue");
  var _responseQueue = dart.privateName(dio_mixin, "_responseQueue");
  var _errorQueue = dart.privateName(dio_mixin, "_errorQueue");
  var _handleQueue = dart.privateName(dio_mixin, "_handleQueue");
  dio_mixin.QueuedInterceptor = class QueuedInterceptor extends dio_mixin.Interceptor {
    [_handleRequest](options, handler) {
      this[_handleQueue](options$.RequestOptions, dio_mixin.RequestInterceptorHandler, this[_requestQueue], options, handler, dart.bind(this, 'onRequest'));
    }
    [_handleResponse](response, handler) {
      this[_handleQueue](response$.Response, dio_mixin.ResponseInterceptorHandler, this[_responseQueue], response, handler, dart.bind(this, 'onResponse'));
    }
    [_handleError](err, handler) {
      this[_handleQueue](dio_error.DioError, dio_mixin.ErrorInterceptorHandler, this[_errorQueue], err, handler, dart.bind(this, 'onError'));
    }
    [_handleQueue](T, V, taskQueue, data, handler, callback) {
      let task = new (dio_mixin._InterceptorParams$(T, V)).new(data, handler);
      task.handler[_processNextInQueue] = dio_mixin._processNextTaskInQueueCallback(taskQueue, callback);
      taskQueue.queue.add(task);
      if (!taskQueue.processing) {
        taskQueue.processing = true;
        let _task = taskQueue.queue.removeFirst();
        try {
          dart.dcall(callback, [_task.data, _task.handler]);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.dsend(_task.handler, _processNextInQueue, []);
          } else
            throw e$;
        }
      }
    }
    static ['_#new#tearOff']() {
      return new dio_mixin.QueuedInterceptor.new();
    }
  };
  (dio_mixin.QueuedInterceptor.new = function() {
    this[_requestQueue] = new dio_mixin._TaskQueue.new();
    this[_responseQueue] = new dio_mixin._TaskQueue.new();
    this[_errorQueue] = new dio_mixin._TaskQueue.new();
    ;
  }).prototype = dio_mixin.QueuedInterceptor.prototype;
  dart.addTypeTests(dio_mixin.QueuedInterceptor);
  dart.addTypeCaches(dio_mixin.QueuedInterceptor);
  dart.setMethodSignature(dio_mixin.QueuedInterceptor, () => ({
    __proto__: dart.getMethods(dio_mixin.QueuedInterceptor.__proto__),
    [_handleRequest]: dart.fnType(dart.void, [options$.RequestOptions, dio_mixin.RequestInterceptorHandler]),
    [_handleResponse]: dart.fnType(dart.void, [response$.Response, dio_mixin.ResponseInterceptorHandler]),
    [_handleError]: dart.fnType(dart.void, [dio_error.DioError, dio_mixin.ErrorInterceptorHandler]),
    [_handleQueue]: dart.gFnType((T, V) => [dart.void, [dio_mixin._TaskQueue, T, V, dart.dynamic]], (T, V) => [dart.nullable(core.Object), dio_mixin._BaseHandler])
  }));
  dart.setLibraryUri(dio_mixin.QueuedInterceptor, I[0]);
  dart.setFieldSignature(dio_mixin.QueuedInterceptor, () => ({
    __proto__: dart.getFields(dio_mixin.QueuedInterceptor.__proto__),
    [_requestQueue]: dart.fieldType(dio_mixin._TaskQueue),
    [_responseQueue]: dart.fieldType(dio_mixin._TaskQueue),
    [_errorQueue]: dart.fieldType(dio_mixin._TaskQueue)
  }));
  const QueuedInterceptor__InterceptorWrapperMixin$36 = class QueuedInterceptor__InterceptorWrapperMixin extends dio_mixin.QueuedInterceptor {};
  (QueuedInterceptor__InterceptorWrapperMixin$36.new = function() {
    dio_mixin._InterceptorWrapperMixin[dart.mixinNew].call(this);
    QueuedInterceptor__InterceptorWrapperMixin$36.__proto__.new.call(this);
  }).prototype = QueuedInterceptor__InterceptorWrapperMixin$36.prototype;
  dart.applyMixin(QueuedInterceptor__InterceptorWrapperMixin$36, dio_mixin._InterceptorWrapperMixin);
  dio_mixin.QueuedInterceptorsWrapper = class QueuedInterceptorsWrapper extends QueuedInterceptor__InterceptorWrapperMixin$36 {
    static ['_#new#tearOff'](opts) {
      let onRequest = opts && 'onRequest' in opts ? opts.onRequest : null;
      let onResponse = opts && 'onResponse' in opts ? opts.onResponse : null;
      let onError = opts && 'onError' in opts ? opts.onError : null;
      return new dio_mixin.QueuedInterceptorsWrapper.new({onRequest: onRequest, onResponse: onResponse, onError: onError});
    }
    get [_onError$]() {
      return this[__onError];
    }
    set [_onError$](value) {
      super[_onError$] = value;
    }
    get [_onRequest$]() {
      return this[__onRequest];
    }
    set [_onRequest$](value) {
      super[_onRequest$] = value;
    }
    get [_onResponse$]() {
      return this[__onResponse];
    }
    set [_onResponse$](value) {
      super[_onResponse$] = value;
    }
  };
  (dio_mixin.QueuedInterceptorsWrapper.new = function(opts) {
    let onRequest = opts && 'onRequest' in opts ? opts.onRequest : null;
    let onResponse = opts && 'onResponse' in opts ? opts.onResponse : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    this[__onRequest] = onRequest;
    this[__onResponse] = onResponse;
    this[__onError] = onError;
    dio_mixin.QueuedInterceptorsWrapper.__proto__.new.call(this);
    ;
  }).prototype = dio_mixin.QueuedInterceptorsWrapper.prototype;
  dart.addTypeTests(dio_mixin.QueuedInterceptorsWrapper);
  dart.addTypeCaches(dio_mixin.QueuedInterceptorsWrapper);
  dart.setLibraryUri(dio_mixin.QueuedInterceptorsWrapper, I[0]);
  dart.setFieldSignature(dio_mixin.QueuedInterceptorsWrapper, () => ({
    __proto__: dart.getFields(dio_mixin.QueuedInterceptorsWrapper.__proto__),
    [__onRequest]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [options$.RequestOptions, dio_mixin.RequestInterceptorHandler]))),
    [__onResponse]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [response$.Response, dio_mixin.ResponseInterceptorHandler]))),
    [__onError]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [dio_error.DioError, dio_mixin.ErrorInterceptorHandler])))
  }));
  dio_mixin._processNextTaskInQueueCallback = function _processNextTaskInQueueCallback(taskQueue, cb) {
    return dart.fn(() => {
      if (taskQueue.queue[$isNotEmpty]) {
        let next = taskQueue.queue.removeFirst();
        if (!(dart.dload(next.handler, _processNextInQueue) != null)) dart.assertFailed(null, I[7], 443, 14, "next.handler._processNextInQueue != null");
        dart.dcall(cb, [next.data, next.handler]);
      } else {
        taskQueue.processing = false;
      }
    }, T$.VoidTovoid());
  };
  dio.Dio = class Dio extends core.Object {
    static new(options = null) {
      return dio_for_browser.createDio(options);
    }
    static ['_#new#tearOff'](options = null) {
      return dio.Dio.new(options);
    }
    get options() {
      let t7;
      t7 = this[__Dio_options$];
      return t7 == null ? dart.throw(new _internal.LateError.fieldNI("options")) : t7;
    }
    set options(options$35param) {
      this[__Dio_options$] = options$35param;
    }
    get httpClientAdapter() {
      let t7;
      t7 = this[__Dio_httpClientAdapter$];
      return t7 == null ? dart.throw(new _internal.LateError.fieldNI("httpClientAdapter")) : t7;
    }
    set httpClientAdapter(httpClientAdapter$35param) {
      this[__Dio_httpClientAdapter$] = httpClientAdapter$35param;
    }
    get transformer() {
      let t7;
      t7 = this[__Dio_transformer$];
      return t7 == null ? dart.throw(new _internal.LateError.fieldNI("transformer")) : t7;
    }
    set transformer(transformer$35param) {
      this[__Dio_transformer$] = transformer$35param;
    }
  };
  (dio.Dio[dart.mixinNew] = function() {
    this[__Dio_options$] = null;
    this[__Dio_httpClientAdapter$] = null;
    this[__Dio_transformer$] = null;
  }).prototype = dio.Dio.prototype;
  dart.addTypeTests(dio.Dio);
  dart.addTypeCaches(dio.Dio);
  dart.setStaticMethodSignature(dio.Dio, () => ['new']);
  dart.setGetterSignature(dio.Dio, () => ({
    __proto__: dart.getGetters(dio.Dio.__proto__),
    options: options$.BaseOptions,
    httpClientAdapter: adapter.HttpClientAdapter,
    transformer: transformer.Transformer
  }));
  dart.setSetterSignature(dio.Dio, () => ({
    __proto__: dart.getSetters(dio.Dio.__proto__),
    options: options$.BaseOptions,
    httpClientAdapter: adapter.HttpClientAdapter,
    transformer: transformer.Transformer
  }));
  dart.setLibraryUri(dio.Dio, I[8]);
  dart.setFieldSignature(dio.Dio, () => ({
    __proto__: dart.getFields(dio.Dio.__proto__),
    [__Dio_options$]: dart.fieldType(dart.nullable(options$.BaseOptions)),
    [__Dio_httpClientAdapter$]: dart.fieldType(dart.nullable(adapter.HttpClientAdapter)),
    [__Dio_transformer$]: dart.fieldType(dart.nullable(transformer.Transformer))
  }));
  transformer.Transformer = class Transformer extends core.Object {
    static urlEncodeMap(map, listFormat = C[8] || CT.C8) {
      return utils.encodeMap(map, dart.fn((key, value) => {
        if (value == null) return key;
        return key + "=" + core.Uri.encodeQueryComponent(dart.toString(value));
      }, T$.StringAndObjectNToString()), {listFormat: listFormat});
    }
  };
  (transformer.Transformer.new = function() {
    ;
  }).prototype = transformer.Transformer.prototype;
  dart.addTypeTests(transformer.Transformer);
  dart.addTypeCaches(transformer.Transformer);
  dart.setStaticMethodSignature(transformer.Transformer, () => ['urlEncodeMap']);
  dart.setLibraryUri(transformer.Transformer, I[9]);
  var jsonDecodeCallback$ = dart.privateName(transformer, "DefaultTransformer.jsonDecodeCallback");
  var _isJsonMime = dart.privateName(transformer, "_isJsonMime");
  transformer.DefaultTransformer = class DefaultTransformer extends transformer.Transformer {
    get jsonDecodeCallback() {
      return this[jsonDecodeCallback$];
    }
    set jsonDecodeCallback(value) {
      this[jsonDecodeCallback$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let jsonDecodeCallback = opts && 'jsonDecodeCallback' in opts ? opts.jsonDecodeCallback : null;
      return new transformer.DefaultTransformer.new({jsonDecodeCallback: jsonDecodeCallback});
    }
    transformRequest(options) {
      return async.async(core.String, (function* transformRequest() {
        let t7, t7$;
        let data = (t7 = options.data, t7 == null ? "" : t7);
        if (!(typeof data == 'string')) {
          if (this[_isJsonMime](options.contentType)) {
            return convert.json.encode(options.data);
          } else if (core.Map.is(data)) {
            options.contentType = (t7$ = options.contentType, t7$ == null ? headers$.Headers.formUrlEncodedContentType : t7$);
            return transformer.Transformer.urlEncodeMap(data);
          }
        }
        return dart.toString(data);
      }).bind(this));
    }
    transformResponse(options, response) {
      return async.async(dart.dynamic, (function* transformResponse() {
        let t7, t7$, t7$0, t9, t9$;
        if (options.responseType === options$.ResponseType.stream) {
          return response;
        }
        let length = 0;
        let received = 0;
        let showDownloadProgress = options.onReceiveProgress != null;
        if (showDownloadProgress) {
          length = core.int.parse((t7$ = (t7 = response.headers[$_get]("content-length"), t7 == null ? null : t7[$first]), t7$ == null ? "-1" : t7$));
        }
        let completer = async.Completer.new();
        let stream = response.stream.transform(typed_data.Uint8List, new (T$._StreamHandlerTransformerOfUint8List$Uint8List()).new({handleData: dart.fn((data, sink) => {
            let t7;
            sink.add(data);
            if (showDownloadProgress) {
              received = received + data[$length];
              t7 = options.onReceiveProgress;
              t7 == null ? null : t7(received, length);
            }
          }, T$.Uint8ListAndEventSinkOfUint8ListTovoid())}));
        let chunks = T$.JSArrayOfUint8List().of([]);
        let finalSize = 0;
        let subscription = stream.listen(dart.fn(chunk => {
          finalSize = finalSize + chunk[$length];
          chunks[$add](chunk);
        }, T$.Uint8ListTovoid()), {onError: dart.fn((error, stackTrace) => {
            completer.completeError(error, stackTrace);
          }, T$.ObjectAndStackTraceToNull()), onDone: dart.fn(() => completer.complete(), T$.VoidTovoid()), cancelOnError: true});
        t7$0 = options.cancelToken;
        t7$0 == null ? null : t7$0.whenCancel.then(dart.void, dart.fn(_ => subscription.cancel(), T$.DioErrorToFutureOfvoid()));
        if (options.receiveTimeout > 0) {
          try {
            yield completer.future.timeout(new core.Duration.new({milliseconds: options.receiveTimeout}));
          } catch (e) {
            let ex = dart.getThrown(e);
            if (async.TimeoutException.is(ex)) {
              yield subscription.cancel();
              dart.throw(new dio_error.DioError.new({requestOptions: options, error: "Receiving data timeout[" + dart.str(options.receiveTimeout) + "ms]", type: dio_error.DioErrorType.receiveTimeout}));
            } else
              throw e;
          }
        } else {
          yield completer.future;
        }
        let responseBytes = _native_typed_data.NativeUint8List.new(finalSize);
        let chunkOffset = 0;
        for (let chunk of chunks) {
          responseBytes[$setAll](chunkOffset, chunk);
          chunkOffset = chunkOffset + chunk[$length];
        }
        if (options.responseType === options$.ResponseType.bytes) return responseBytes;
        let responseBody = null;
        if (options.responseDecoder != null) {
          responseBody = dart.nullCheck(options.responseDecoder)(responseBytes, options, (t9 = response, (() => {
            t9.stream = new (T$._EmptyStreamOfUint8List()).new();
            return t9;
          })()));
        } else {
          responseBody = convert.utf8.decode(responseBytes, {allowMalformed: true});
        }
        if (responseBody[$isNotEmpty] && options.responseType === options$.ResponseType.json && this[_isJsonMime]((t9$ = response.headers[$_get]("content-type"), t9$ == null ? null : t9$[$first]))) {
          let callback = this.jsonDecodeCallback;
          if (callback != null) {
            return callback(responseBody);
          } else {
            return convert.json.decode(responseBody);
          }
        }
        return responseBody;
      }).bind(this));
    }
    [_isJsonMime](contentType) {
      if (contentType == null) return false;
      return media_type.MediaType.parse(contentType).mimeType === headers$.Headers.jsonMimeType.mimeType;
    }
  };
  (transformer.DefaultTransformer.new = function(opts) {
    let jsonDecodeCallback = opts && 'jsonDecodeCallback' in opts ? opts.jsonDecodeCallback : null;
    this[jsonDecodeCallback$] = jsonDecodeCallback;
    ;
  }).prototype = transformer.DefaultTransformer.prototype;
  dart.addTypeTests(transformer.DefaultTransformer);
  dart.addTypeCaches(transformer.DefaultTransformer);
  dart.setMethodSignature(transformer.DefaultTransformer, () => ({
    __proto__: dart.getMethods(transformer.DefaultTransformer.__proto__),
    transformRequest: dart.fnType(async.Future$(core.String), [options$.RequestOptions]),
    transformResponse: dart.fnType(async.Future, [options$.RequestOptions, adapter.ResponseBody]),
    [_isJsonMime]: dart.fnType(core.bool, [dart.nullable(core.String)])
  }));
  dart.setLibraryUri(transformer.DefaultTransformer, I[9]);
  dart.setFieldSignature(transformer.DefaultTransformer, () => ({
    __proto__: dart.getFields(transformer.DefaultTransformer.__proto__),
    jsonDecodeCallback: dart.fieldType(dart.nullable(dart.fnType(dart.dynamic, [core.String])))
  }));
  var format$ = dart.privateName(parameter, "ListParam.format");
  var value$ = dart.privateName(parameter, "ListParam.value");
  const _is_ListParam_default = Symbol('_is_ListParam_default');
  parameter.ListParam$ = dart.generic(T => {
    var __t$ListOfT = () => (__t$ListOfT = dart.constFn(core.List$(T)))();
    class ListParam extends core.Object {
      get format() {
        return this[format$];
      }
      set format(value) {
        super.format = value;
      }
      get value() {
        return this[value$];
      }
      set value(value) {
        this[value$] = __t$ListOfT().as(value);
      }
      static ['_#new#tearOff'](T, value, format) {
        return new (parameter.ListParam$(T)).new(value, format);
      }
      toString() {
        return "ListParam{format: " + dart.str(this.format) + ", value: " + dart.str(this.value) + "}";
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || parameter.ListParam.is(other) && this[$runtimeType]._equals(other[$runtimeType]) && this.format === other.format && this.value[$_equals](other.value);
      }
      get hashCode() {
        return (this.format[$hashCode] ^ this.value[$hashCode]) >>> 0;
      }
    }
    (ListParam.new = function(value, format) {
      this[value$] = value;
      this[format$] = format;
      ;
    }).prototype = ListParam.prototype;
    dart.addTypeTests(ListParam);
    ListParam.prototype[_is_ListParam_default] = true;
    dart.addTypeCaches(ListParam);
    dart.setLibraryUri(ListParam, I[10]);
    dart.setFieldSignature(ListParam, () => ({
      __proto__: dart.getFields(ListParam.__proto__),
      format: dart.finalFieldType(options$.ListFormat),
      value: dart.fieldType(core.List$(T))
    }));
    dart.defineExtensionMethods(ListParam, ['toString', '_equals']);
    dart.defineExtensionAccessors(ListParam, ['hashCode']);
    return ListParam;
  });
  parameter.ListParam = parameter.ListParam$();
  dart.addTypeTests(parameter.ListParam, _is_ListParam_default);
  var Latin1Codec__allowInvalid = dart.privateName(convert, "Latin1Codec._allowInvalid");
  utils.isPlainAscii = function isPlainAscii(string) {
    return utils._asciiOnly.hasMatch(string);
  };
  utils.writeStreamToSink = function writeStreamToSink(stream, sink) {
    let completer = async.Completer.new();
    stream.listen(T$.dynamicTovoid().as(dart.bind(sink, 'add')), {onError: dart.bind(sink, 'addError'), onDone: dart.fn(() => completer.complete(), T$.VoidTovoid())});
    return completer.future;
  };
  utils.encodingForCharset = function encodingForCharset(charset, fallback = C[15] || CT.C15) {
    let t9;
    if (charset == null) return fallback;
    let encoding = convert.Encoding.getByName(charset);
    t9 = encoding;
    return t9 == null ? fallback : t9;
  };
  utils.encodeMap = function encodeMap(data, handler, opts) {
    let encode = opts && 'encode' in opts ? opts.encode : true;
    let listFormat = opts && 'listFormat' in opts ? opts.listFormat : C[8] || CT.C8;
    let urlData = new core.StringBuffer.new("");
    let first = true;
    let leftBracket = encode ? "%5B" : "[";
    let rightBracket = encode ? "%5D" : "]";
    let encodeComponent = encode ? C[16] || CT.C16 : dart.fn(e => e, T$.dynamicTodynamic());
    function urlEncode(sub, path) {
      let format = parameter.ListParam.is(sub) ? sub.format : listFormat;
      let separatorChar = utils._getSeparatorChar(format);
      if (parameter.ListParam.is(sub)) {
        sub = sub.value;
      }
      if (core.List.is(sub)) {
        if (format === options$.ListFormat.multi || format === options$.ListFormat.multiCompatible) {
          for (let i = 0; i < sub[$length]; i = i + 1) {
            let isCollection = core.Map.is(sub[$_get](i)) || core.List.is(sub[$_get](i)) || parameter.ListParam.is(sub[$_get](i));
            if (listFormat === options$.ListFormat.multi) {
              urlEncode(sub[$_get](i), path + (isCollection ? leftBracket + dart.str(i) + rightBracket : ""));
            } else {
              urlEncode(sub[$_get](i), path + leftBracket + dart.str(isCollection ? i : "") + rightBracket);
            }
          }
        } else {
          urlEncode(sub[$join](separatorChar), path);
        }
      } else if (core.Map.is(sub)) {
        sub[$forEach](dart.fn((k, v) => {
          if (path === "") {
            urlEncode(v, dart.str(encodeComponent(core.String.as(k))));
          } else {
            urlEncode(v, path + leftBracket + dart.str(encodeComponent(core.String.as(k))) + rightBracket);
          }
        }, T$.dynamicAnddynamicTovoid()));
      } else {
        let str = handler(path, sub);
        let isNotEmpty = str != null && str[$trim]()[$isNotEmpty];
        if (!first && isNotEmpty) {
          urlData.write("&");
        }
        first = false;
        if (isNotEmpty) {
          urlData.write(str);
        }
      }
    }
    dart.fn(urlEncode, T$.dynamicAndStringTovoid());
    urlEncode(data, "");
    return urlData.toString();
  };
  utils._getSeparatorChar = function _getSeparatorChar(collectionFormat) {
    switch (collectionFormat) {
      case C[17] || CT.C17:
        {
          return ",";
        }
      case C[18] || CT.C18:
        {
          return " ";
        }
      case C[19] || CT.C19:
        {
          return "\\t";
        }
      case C[20] || CT.C20:
        {
          return "|";
        }
      default:
        {
          return "";
        }
    }
  };
  utils.caseInsensitiveKeyMap = function caseInsensitiveKeyMap(V, value = null) {
    let map = collection.LinkedHashMap$(core.String, V).new({equals: dart.fn((key1, key2) => key1[$toLowerCase]() === key2[$toLowerCase](), T$.StringAndStringTobool()), hashCode: dart.fn(key => key[$toLowerCase]()[$hashCode], T$.StringToint())});
    if (value != null && value[$isNotEmpty]) map[$addAll](value);
    return map;
  };
  dart.defineLazy(utils, {
    /*utils._asciiOnly*/get _asciiOnly() {
      return core.RegExp.new("^[\\x00-\\x7F]+$");
    }
  }, false);
  var _map = dart.privateName(headers$, "_map");
  headers$.Headers = class Headers extends core.Object {
    get map() {
      return this[_map];
    }
    static ['_#new#tearOff']() {
      return new headers$.Headers.new();
    }
    static ['_#fromMap#tearOff'](map) {
      return new headers$.Headers.fromMap(map);
    }
    _get(name) {
      return this[_map][$_get](name[$trim]()[$toLowerCase]());
    }
    value(name) {
      let arr = this._get(name);
      if (arr == null) return null;
      if (arr[$length] === 1) return arr[$first];
      dart.throw(core.Exception.new("\"" + name + "\" header has more than one value, please use Headers[name]"));
    }
    add(name, value) {
      let arr = this._get(name);
      if (arr == null) return this.set(name, value);
      arr[$add](value);
    }
    set(name, value) {
      if (value == null) return;
      name = name[$trim]()[$toLowerCase]();
      if (core.List.is(value)) {
        this[_map][$_set](name, value[$map](core.String, dart.fn(e => dart.toString(e), T$.dynamicToString()))[$toList]());
      } else {
        this[_map][$_set](name, T$.JSArrayOfString().of([dart.str(value)[$trim]()]));
      }
    }
    remove(name, value) {
      let arr = this._get(name);
      if (arr == null) return;
      arr[$removeWhere](dart.fn(v => v === value, T$.StringTobool()));
    }
    removeAll(name) {
      this[_map][$remove](name);
    }
    clear() {
      this[_map][$clear]();
    }
    get isEmpty() {
      return this[_map][$isEmpty];
    }
    forEach(f) {
      this[_map][$keys][$forEach](dart.fn(key => f(key, dart.nullCheck(this._get(key))), T$.StringTovoid()));
    }
    toString() {
      let stringBuffer = new core.StringBuffer.new();
      this[_map][$forEach](dart.fn((key, value) => {
        value[$forEach](dart.fn(e => stringBuffer.writeln(key + ": " + e), T$.StringTovoid()));
      }, T$.StringAndListOfStringTovoid()));
      return stringBuffer.toString();
    }
  };
  (headers$.Headers.new = function() {
    this[_map] = utils.caseInsensitiveKeyMap(T$.ListOfString());
    ;
  }).prototype = headers$.Headers.prototype;
  (headers$.Headers.fromMap = function(map) {
    this[_map] = utils.caseInsensitiveKeyMap(T$.ListOfString(), map[$map](core.String, T$.ListOfString(), dart.fn((k, v) => new (T$.MapEntryOfString$ListOfString()).__(k[$trim]()[$toLowerCase](), v), T$.StringAndListOfStringToMapEntryOfString$ListOfString())));
    ;
  }).prototype = headers$.Headers.prototype;
  dart.addTypeTests(headers$.Headers);
  dart.addTypeCaches(headers$.Headers);
  dart.setMethodSignature(headers$.Headers, () => ({
    __proto__: dart.getMethods(headers$.Headers.__proto__),
    _get: dart.fnType(dart.nullable(core.List$(core.String)), [core.String]),
    value: dart.fnType(dart.nullable(core.String), [core.String]),
    add: dart.fnType(dart.void, [core.String, core.String]),
    set: dart.fnType(dart.void, [core.String, dart.dynamic]),
    remove: dart.fnType(dart.void, [core.String, core.String]),
    removeAll: dart.fnType(dart.void, [core.String]),
    clear: dart.fnType(dart.void, []),
    forEach: dart.fnType(dart.void, [dart.fnType(dart.void, [core.String, core.List$(core.String)])])
  }));
  dart.setGetterSignature(headers$.Headers, () => ({
    __proto__: dart.getGetters(headers$.Headers.__proto__),
    map: core.Map$(core.String, core.List$(core.String)),
    isEmpty: core.bool
  }));
  dart.setLibraryUri(headers$.Headers, I[11]);
  dart.setFieldSignature(headers$.Headers, () => ({
    __proto__: dart.getFields(headers$.Headers.__proto__),
    [_map]: dart.finalFieldType(core.Map$(core.String, core.List$(core.String)))
  }));
  dart.setStaticFieldSignature(headers$.Headers, () => ['acceptHeader', 'contentEncodingHeader', 'contentLengthHeader', 'contentTypeHeader', 'wwwAuthenticateHeader', 'jsonContentType', 'formUrlEncodedContentType', 'textPlainContentType', 'jsonMimeType']);
  dart.defineExtensionMethods(headers$.Headers, ['toString']);
  dart.defineLazy(headers$.Headers, {
    /*headers$.Headers.acceptHeader*/get acceptHeader() {
      return "accept";
    },
    /*headers$.Headers.contentEncodingHeader*/get contentEncodingHeader() {
      return "content-encoding";
    },
    /*headers$.Headers.contentLengthHeader*/get contentLengthHeader() {
      return "content-length";
    },
    /*headers$.Headers.contentTypeHeader*/get contentTypeHeader() {
      return "content-type";
    },
    /*headers$.Headers.wwwAuthenticateHeader*/get wwwAuthenticateHeader() {
      return "www-authenticate";
    },
    /*headers$.Headers.jsonContentType*/get jsonContentType() {
      return "application/json; charset=utf-8";
    },
    /*headers$.Headers.formUrlEncodedContentType*/get formUrlEncodedContentType() {
      return "application/x-www-form-urlencoded;charset=utf-8";
    },
    /*headers$.Headers.textPlainContentType*/get textPlainContentType() {
      return "text/plain";
    },
    /*headers$.Headers.jsonMimeType*/get jsonMimeType() {
      return media_type.MediaType.parse("application/json; charset=utf-8");
    }
  }, false);
  var data$1 = dart.privateName(response$, "Response.data");
  var statusCode$ = dart.privateName(response$, "Response.statusCode");
  var statusMessage$ = dart.privateName(response$, "Response.statusMessage");
  var isRedirect$ = dart.privateName(response$, "Response.isRedirect");
  var __Response_headers = dart.privateName(response$, "_#Response#headers");
  var __Response_requestOptions = dart.privateName(response$, "_#Response#requestOptions");
  var __Response_extra = dart.privateName(response$, "_#Response#extra");
  var __Response_redirects = dart.privateName(response$, "_#Response#redirects");
  const _is_Response_default = Symbol('_is_Response_default');
  response$.Response$ = dart.generic(T => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    class Response extends core.Object {
      get data() {
        return this[data$1];
      }
      set data(value) {
        this[data$1] = __t$TN().as(value);
      }
      get statusCode() {
        return this[statusCode$];
      }
      set statusCode(value) {
        this[statusCode$] = value;
      }
      get statusMessage() {
        return this[statusMessage$];
      }
      set statusMessage(value) {
        this[statusMessage$] = value;
      }
      get isRedirect() {
        return this[isRedirect$];
      }
      set isRedirect(value) {
        this[isRedirect$] = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let data = opts && 'data' in opts ? opts.data : null;
        let headers = opts && 'headers' in opts ? opts.headers : null;
        let requestOptions = opts && 'requestOptions' in opts ? opts.requestOptions : null;
        let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : null;
        let statusCode = opts && 'statusCode' in opts ? opts.statusCode : null;
        let statusMessage = opts && 'statusMessage' in opts ? opts.statusMessage : null;
        let redirects = opts && 'redirects' in opts ? opts.redirects : null;
        let extra = opts && 'extra' in opts ? opts.extra : null;
        return new (response$.Response$(T)).new({data: data, headers: headers, requestOptions: requestOptions, isRedirect: isRedirect, statusCode: statusCode, statusMessage: statusMessage, redirects: redirects, extra: extra});
      }
      get headers() {
        let t9;
        t9 = this[__Response_headers];
        return t9 == null ? dart.throw(new _internal.LateError.fieldNI("headers")) : t9;
      }
      set headers(headers$35param) {
        this[__Response_headers] = headers$35param;
      }
      get requestOptions() {
        let t9;
        t9 = this[__Response_requestOptions];
        return t9 == null ? dart.throw(new _internal.LateError.fieldNI("requestOptions")) : t9;
      }
      set requestOptions(requestOptions$35param) {
        this[__Response_requestOptions] = requestOptions$35param;
      }
      get extra() {
        let t9;
        t9 = this[__Response_extra];
        return t9 == null ? dart.throw(new _internal.LateError.fieldNI("extra")) : t9;
      }
      set extra(extra$35param) {
        this[__Response_extra] = extra$35param;
      }
      get redirects() {
        let t9;
        t9 = this[__Response_redirects];
        return t9 == null ? dart.throw(new _internal.LateError.fieldNI("redirects")) : t9;
      }
      set redirects(redirects$35param) {
        this[__Response_redirects] = redirects$35param;
      }
      get realUri() {
        return this.redirects[$isNotEmpty] ? this.redirects[$last].location : this.requestOptions.uri;
      }
      toString() {
        if (core.Map.is(this.data)) {
          return convert.json.encode(this.data);
        }
        return dart.toString(this.data);
      }
    }
    (Response.new = function(opts) {
      let t9, t9$, t9$0;
      let data = opts && 'data' in opts ? opts.data : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let requestOptions = opts && 'requestOptions' in opts ? opts.requestOptions : null;
      let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : null;
      let statusCode = opts && 'statusCode' in opts ? opts.statusCode : null;
      let statusMessage = opts && 'statusMessage' in opts ? opts.statusMessage : null;
      let redirects = opts && 'redirects' in opts ? opts.redirects : null;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      this[__Response_headers] = null;
      this[__Response_requestOptions] = null;
      this[__Response_extra] = null;
      this[__Response_redirects] = null;
      this[data$1] = data;
      this[__Response_requestOptions] = requestOptions;
      this[isRedirect$] = isRedirect;
      this[statusCode$] = statusCode;
      this[statusMessage$] = statusMessage;
      this.headers = (t9 = headers, t9 == null ? new headers$.Headers.new() : t9);
      this.extra = (t9$ = extra, t9$ == null ? new (T$.IdentityMapOfString$dynamic()).new() : t9$);
      this.redirects = (t9$0 = redirects, t9$0 == null ? T$.JSArrayOfRedirectRecord().of([]) : t9$0);
    }).prototype = Response.prototype;
    dart.addTypeTests(Response);
    Response.prototype[_is_Response_default] = true;
    dart.addTypeCaches(Response);
    dart.setGetterSignature(Response, () => ({
      __proto__: dart.getGetters(Response.__proto__),
      headers: headers$.Headers,
      requestOptions: options$.RequestOptions,
      extra: core.Map$(core.String, dart.dynamic),
      redirects: core.List$(redirect_record.RedirectRecord),
      realUri: core.Uri
    }));
    dart.setSetterSignature(Response, () => ({
      __proto__: dart.getSetters(Response.__proto__),
      headers: headers$.Headers,
      requestOptions: options$.RequestOptions,
      extra: core.Map$(core.String, dart.dynamic),
      redirects: core.List$(redirect_record.RedirectRecord)
    }));
    dart.setLibraryUri(Response, I[12]);
    dart.setFieldSignature(Response, () => ({
      __proto__: dart.getFields(Response.__proto__),
      data: dart.fieldType(dart.nullable(T)),
      [__Response_headers]: dart.fieldType(dart.nullable(headers$.Headers)),
      [__Response_requestOptions]: dart.fieldType(dart.nullable(options$.RequestOptions)),
      statusCode: dart.fieldType(dart.nullable(core.int)),
      statusMessage: dart.fieldType(dart.nullable(core.String)),
      [__Response_extra]: dart.fieldType(dart.nullable(core.Map$(core.String, dart.dynamic))),
      [__Response_redirects]: dart.fieldType(dart.nullable(core.List$(redirect_record.RedirectRecord))),
      isRedirect: dart.fieldType(dart.nullable(core.bool))
    }));
    dart.defineExtensionMethods(Response, ['toString']);
    return Response;
  });
  response$.Response = response$.Response$();
  dart.addTypeTests(response$.Response, _is_Response_default);
  dio_error.DioErrorType = class DioErrorType extends core._Enum {
    toString() {
      return "DioErrorType." + this[_name];
    }
  };
  (dio_error.DioErrorType.new = function(index, name) {
    dio_error.DioErrorType.__proto__.new.call(this, index, name);
    ;
  }).prototype = dio_error.DioErrorType.prototype;
  dart.addTypeTests(dio_error.DioErrorType);
  dart.addTypeCaches(dio_error.DioErrorType);
  dart.setLibraryUri(dio_error.DioErrorType, I[13]);
  dart.setStaticFieldSignature(dio_error.DioErrorType, () => ['values', 'connectTimeout', 'sendTimeout', 'receiveTimeout', 'response', 'cancel', 'other']);
  dart.defineExtensionMethods(dio_error.DioErrorType, ['toString']);
  dart.defineLazy(dio_error.DioErrorType, {
    /*dio_error.DioErrorType.values*/get values() {
      return C[21] || CT.C21;
    },
    /*dio_error.DioErrorType.connectTimeout*/get connectTimeout() {
      return C[22] || CT.C22;
    },
    /*dio_error.DioErrorType.sendTimeout*/get sendTimeout() {
      return C[23] || CT.C23;
    },
    /*dio_error.DioErrorType.receiveTimeout*/get receiveTimeout() {
      return C[24] || CT.C24;
    },
    /*dio_error.DioErrorType.response*/get response() {
      return C[25] || CT.C25;
    },
    /*dio_error.DioErrorType.cancel*/get cancel() {
      return C[26] || CT.C26;
    },
    /*dio_error.DioErrorType.other*/get other() {
      return C[27] || CT.C27;
    }
  }, false);
  var requestOptions$ = dart.privateName(dio_error, "DioError.requestOptions");
  var response$0 = dart.privateName(dio_error, "DioError.response");
  var type$0 = dart.privateName(dio_error, "DioError.type");
  var error$0 = dart.privateName(dio_error, "DioError.error");
  var _stackTrace = dart.privateName(dio_error, "_stackTrace");
  dio_error.DioError = class DioError extends core.Object {
    get requestOptions() {
      return this[requestOptions$];
    }
    set requestOptions(value) {
      this[requestOptions$] = value;
    }
    get response() {
      return this[response$0];
    }
    set response(value) {
      this[response$0] = value;
    }
    get type() {
      return this[type$0];
    }
    set type(value) {
      this[type$0] = value;
    }
    get error() {
      return this[error$0];
    }
    set error(value) {
      this[error$0] = value;
    }
    static ['_#new#tearOff'](opts) {
      let requestOptions = opts && 'requestOptions' in opts ? opts.requestOptions : null;
      let response = opts && 'response' in opts ? opts.response : null;
      let type = opts && 'type' in opts ? opts.type : C[27] || CT.C27;
      let error = opts && 'error' in opts ? opts.error : null;
      return new dio_error.DioError.new({requestOptions: requestOptions, response: response, type: type, error: error});
    }
    set stackTrace(stack) {
      return this[_stackTrace] = stack;
    }
    get stackTrace() {
      return this[_stackTrace];
    }
    get message() {
      let t11, t11$;
      t11$ = (t11 = this.error, t11 == null ? null : dart.toString(t11));
      return t11$ == null ? "" : t11$;
    }
    toString() {
      let msg = "DioError [" + dart.str(this.type) + "]: " + this.message;
      if (core.Error.is(this.error)) {
        msg = msg + ("\n" + dart.str(core.Error.as(this.error)[$stackTrace]));
      }
      if (this[_stackTrace] != null) {
        msg = msg + ("\nSource stack:\n" + dart.str(this.stackTrace));
      }
      return msg;
    }
  };
  (dio_error.DioError.new = function(opts) {
    let requestOptions = opts && 'requestOptions' in opts ? opts.requestOptions : null;
    let response = opts && 'response' in opts ? opts.response : null;
    let type = opts && 'type' in opts ? opts.type : C[27] || CT.C27;
    let error = opts && 'error' in opts ? opts.error : null;
    this[_stackTrace] = null;
    this[requestOptions$] = requestOptions;
    this[response$0] = response;
    this[type$0] = type;
    this[error$0] = error;
    ;
  }).prototype = dio_error.DioError.prototype;
  dart.addTypeTests(dio_error.DioError);
  dart.addTypeCaches(dio_error.DioError);
  dio_error.DioError[dart.implements] = () => [core.Exception];
  dart.setGetterSignature(dio_error.DioError, () => ({
    __proto__: dart.getGetters(dio_error.DioError.__proto__),
    stackTrace: dart.nullable(core.StackTrace),
    message: core.String
  }));
  dart.setSetterSignature(dio_error.DioError, () => ({
    __proto__: dart.getSetters(dio_error.DioError.__proto__),
    stackTrace: dart.nullable(core.StackTrace)
  }));
  dart.setLibraryUri(dio_error.DioError, I[13]);
  dart.setFieldSignature(dio_error.DioError, () => ({
    __proto__: dart.getFields(dio_error.DioError.__proto__),
    requestOptions: dart.fieldType(options$.RequestOptions),
    response: dart.fieldType(dart.nullable(response$.Response)),
    type: dart.fieldType(dio_error.DioErrorType),
    error: dart.fieldType(dart.dynamic),
    [_stackTrace]: dart.fieldType(dart.nullable(core.StackTrace))
  }));
  dart.defineExtensionMethods(dio_error.DioError, ['toString']);
  var requestOptions = dart.privateName(cancel_token, "CancelToken.requestOptions");
  var _cancelError = dart.privateName(cancel_token, "_cancelError");
  var __CancelToken__completer = dart.privateName(cancel_token, "_#CancelToken#_completer");
  var _completer$ = dart.privateName(cancel_token, "_completer");
  cancel_token.CancelToken = class CancelToken extends core.Object {
    get requestOptions() {
      return this[requestOptions];
    }
    set requestOptions(value) {
      this[requestOptions] = value;
    }
    static ['_#new#tearOff']() {
      return new cancel_token.CancelToken.new();
    }
    static isCancel(e) {
      return e.type === dio_error.DioErrorType.cancel;
    }
    get cancelError() {
      return this[_cancelError];
    }
    get [_completer$]() {
      let t11;
      t11 = this[__CancelToken__completer];
      return t11 == null ? dart.throw(new _internal.LateError.fieldNI("_completer")) : t11;
    }
    set [_completer$](library$32package$58dio$47src$47cancel_token$46dart$58$58_completer$35param) {
      this[__CancelToken__completer] = library$32package$58dio$47src$47cancel_token$46dart$58$58_completer$35param;
    }
    get isCancelled() {
      return this[_cancelError] != null;
    }
    get whenCancel() {
      return this[_completer$].future;
    }
    cancel(reason = null) {
      let t11;
      this[_cancelError] = new dio_error.DioError.new({type: dio_error.DioErrorType.cancel, error: reason, requestOptions: (t11 = this.requestOptions, t11 == null ? new options$.RequestOptions.new({path: ""}) : t11)});
      dart.nullCheck(this[_cancelError]).stackTrace = core.StackTrace.current;
      if (!this[_completer$].isCompleted) {
        this[_completer$].complete(this[_cancelError]);
      }
    }
  };
  (cancel_token.CancelToken.new = function() {
    this[_cancelError] = null;
    this[__CancelToken__completer] = null;
    this[requestOptions] = null;
    this[_completer$] = T$.CompleterOfDioError().new();
  }).prototype = cancel_token.CancelToken.prototype;
  dart.addTypeTests(cancel_token.CancelToken);
  dart.addTypeCaches(cancel_token.CancelToken);
  dart.setMethodSignature(cancel_token.CancelToken, () => ({
    __proto__: dart.getMethods(cancel_token.CancelToken.__proto__),
    cancel: dart.fnType(dart.void, [], [dart.dynamic])
  }));
  dart.setStaticMethodSignature(cancel_token.CancelToken, () => ['isCancel']);
  dart.setGetterSignature(cancel_token.CancelToken, () => ({
    __proto__: dart.getGetters(cancel_token.CancelToken.__proto__),
    cancelError: dart.nullable(dio_error.DioError),
    [_completer$]: async.Completer$(dio_error.DioError),
    isCancelled: core.bool,
    whenCancel: async.Future$(dio_error.DioError)
  }));
  dart.setSetterSignature(cancel_token.CancelToken, () => ({
    __proto__: dart.getSetters(cancel_token.CancelToken.__proto__),
    [_completer$]: async.Completer$(dio_error.DioError)
  }));
  dart.setLibraryUri(cancel_token.CancelToken, I[14]);
  dart.setFieldSignature(cancel_token.CancelToken, () => ({
    __proto__: dart.getFields(cancel_token.CancelToken.__proto__),
    [_cancelError]: dart.fieldType(dart.nullable(dio_error.DioError)),
    [__CancelToken__completer]: dart.fieldType(dart.nullable(async.Completer$(dio_error.DioError))),
    requestOptions: dart.fieldType(dart.nullable(options$.RequestOptions))
  }));
  options$.ResponseType = class ResponseType extends core._Enum {
    toString() {
      return "ResponseType." + this[_name];
    }
  };
  (options$.ResponseType.new = function(index, name) {
    options$.ResponseType.__proto__.new.call(this, index, name);
    ;
  }).prototype = options$.ResponseType.prototype;
  dart.addTypeTests(options$.ResponseType);
  dart.addTypeCaches(options$.ResponseType);
  dart.setLibraryUri(options$.ResponseType, I[15]);
  dart.setStaticFieldSignature(options$.ResponseType, () => ['values', 'json', 'stream', 'plain', 'bytes']);
  dart.defineExtensionMethods(options$.ResponseType, ['toString']);
  dart.defineLazy(options$.ResponseType, {
    /*options$.ResponseType.values*/get values() {
      return C[28] || CT.C28;
    },
    /*options$.ResponseType.json*/get json() {
      return C[29] || CT.C29;
    },
    /*options$.ResponseType.stream*/get stream() {
      return C[30] || CT.C30;
    },
    /*options$.ResponseType.plain*/get plain() {
      return C[31] || CT.C31;
    },
    /*options$.ResponseType.bytes*/get bytes() {
      return C[32] || CT.C32;
    }
  }, false);
  options$.ListFormat = class ListFormat extends core._Enum {
    toString() {
      return "ListFormat." + this[_name];
    }
  };
  (options$.ListFormat.new = function(index, name) {
    options$.ListFormat.__proto__.new.call(this, index, name);
    ;
  }).prototype = options$.ListFormat.prototype;
  dart.addTypeTests(options$.ListFormat);
  dart.addTypeCaches(options$.ListFormat);
  dart.setLibraryUri(options$.ListFormat, I[15]);
  dart.setStaticFieldSignature(options$.ListFormat, () => ['values', 'csv', 'ssv', 'tsv', 'pipes', 'multi', 'multiCompatible']);
  dart.defineExtensionMethods(options$.ListFormat, ['toString']);
  dart.defineLazy(options$.ListFormat, {
    /*options$.ListFormat.values*/get values() {
      return C[33] || CT.C33;
    },
    /*options$.ListFormat.csv*/get csv() {
      return C[17] || CT.C17;
    },
    /*options$.ListFormat.ssv*/get ssv() {
      return C[18] || CT.C18;
    },
    /*options$.ListFormat.tsv*/get tsv() {
      return C[19] || CT.C19;
    },
    /*options$.ListFormat.pipes*/get pipes() {
      return C[20] || CT.C20;
    },
    /*options$.ListFormat.multi*/get multi() {
      return C[8] || CT.C8;
    },
    /*options$.ListFormat.multiCompatible*/get multiCompatible() {
      return C[34] || CT.C34;
    }
  }, false);
  var setRequestContentTypeWhenNoPayload$ = dart.privateName(options$, "BaseOptions.setRequestContentTypeWhenNoPayload");
  var requestEncoder$ = dart.privateName(options$, "_RequestConfig.requestEncoder");
  var responseDecoder$ = dart.privateName(options$, "_RequestConfig.responseDecoder");
  var ___RequestConfig_method = dart.privateName(options$, "_#_RequestConfig#method");
  var ___RequestConfig__headers = dart.privateName(options$, "_#_RequestConfig#_headers");
  var ___RequestConfig_sendTimeout = dart.privateName(options$, "_#_RequestConfig#sendTimeout");
  var ___RequestConfig_receiveTimeout = dart.privateName(options$, "_#_RequestConfig#receiveTimeout");
  var _defaultContentType = dart.privateName(options$, "_defaultContentType");
  var ___RequestConfig_responseType = dart.privateName(options$, "_#_RequestConfig#responseType");
  var ___RequestConfig_validateStatus = dart.privateName(options$, "_#_RequestConfig#validateStatus");
  var ___RequestConfig_receiveDataWhenStatusError = dart.privateName(options$, "_#_RequestConfig#receiveDataWhenStatusError");
  var ___RequestConfig_extra = dart.privateName(options$, "_#_RequestConfig#extra");
  var ___RequestConfig_followRedirects = dart.privateName(options$, "_#_RequestConfig#followRedirects");
  var ___RequestConfig_maxRedirects = dart.privateName(options$, "_#_RequestConfig#maxRedirects");
  var ___RequestConfig_listFormat = dart.privateName(options$, "_#_RequestConfig#listFormat");
  var _headers = dart.privateName(options$, "_headers");
  options$._RequestConfig = class _RequestConfig extends core.Object {
    get requestEncoder() {
      return this[requestEncoder$];
    }
    set requestEncoder(value) {
      this[requestEncoder$] = value;
    }
    get responseDecoder() {
      return this[responseDecoder$];
    }
    set responseDecoder(value) {
      this[responseDecoder$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let receiveTimeout = opts && 'receiveTimeout' in opts ? opts.receiveTimeout : null;
      let sendTimeout = opts && 'sendTimeout' in opts ? opts.sendTimeout : null;
      let method = opts && 'method' in opts ? opts.method : null;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let listFormat = opts && 'listFormat' in opts ? opts.listFormat : null;
      let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
      let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
      let receiveDataWhenStatusError = opts && 'receiveDataWhenStatusError' in opts ? opts.receiveDataWhenStatusError : null;
      let validateStatus = opts && 'validateStatus' in opts ? opts.validateStatus : null;
      let responseType = opts && 'responseType' in opts ? opts.responseType : null;
      let requestEncoder = opts && 'requestEncoder' in opts ? opts.requestEncoder : null;
      let responseDecoder = opts && 'responseDecoder' in opts ? opts.responseDecoder : null;
      return new options$._RequestConfig.new({receiveTimeout: receiveTimeout, sendTimeout: sendTimeout, method: method, extra: extra, headers: headers, contentType: contentType, listFormat: listFormat, followRedirects: followRedirects, maxRedirects: maxRedirects, receiveDataWhenStatusError: receiveDataWhenStatusError, validateStatus: validateStatus, responseType: responseType, requestEncoder: requestEncoder, responseDecoder: responseDecoder});
    }
    get method() {
      let t15;
      t15 = this[___RequestConfig_method];
      return t15 == null ? dart.throw(new _internal.LateError.fieldNI("method")) : t15;
    }
    set method(method$35param) {
      this[___RequestConfig_method] = method$35param;
    }
    get headers() {
      return this[_headers];
    }
    get [_headers]() {
      let t15;
      t15 = this[___RequestConfig__headers];
      return t15 == null ? dart.throw(new _internal.LateError.fieldNI("_headers")) : t15;
    }
    set [_headers](library$32package$58dio$47src$47options$46dart$58$58_headers$35param) {
      this[___RequestConfig__headers] = library$32package$58dio$47src$47options$46dart$58$58_headers$35param;
    }
    set headers(headers) {
      this[_headers] = utils.caseInsensitiveKeyMap(dart.dynamic, headers);
      if (this[_defaultContentType] != null && !this[_headers][$containsKey]("content-type")) {
        this[_headers][$_set]("content-type", this[_defaultContentType]);
      }
    }
    get sendTimeout() {
      let t15;
      t15 = this[___RequestConfig_sendTimeout];
      return t15 == null ? dart.throw(new _internal.LateError.fieldNI("sendTimeout")) : t15;
    }
    set sendTimeout(sendTimeout$35param) {
      this[___RequestConfig_sendTimeout] = sendTimeout$35param;
    }
    get receiveTimeout() {
      let t15;
      t15 = this[___RequestConfig_receiveTimeout];
      return t15 == null ? dart.throw(new _internal.LateError.fieldNI("receiveTimeout")) : t15;
    }
    set receiveTimeout(receiveTimeout$35param) {
      this[___RequestConfig_receiveTimeout] = receiveTimeout$35param;
    }
    set contentType(contentType) {
      if (contentType != null) {
        this[_headers][$_set]("content-type", this[_defaultContentType] = contentType[$trim]());
      } else {
        this[_defaultContentType] = null;
        this[_headers][$remove]("content-type");
      }
    }
    get contentType() {
      return T$.StringN().as(this[_headers][$_get]("content-type"));
    }
    get responseType() {
      let t15;
      t15 = this[___RequestConfig_responseType];
      return t15 == null ? dart.throw(new _internal.LateError.fieldNI("responseType")) : t15;
    }
    set responseType(responseType$35param) {
      this[___RequestConfig_responseType] = responseType$35param;
    }
    get validateStatus() {
      let t15;
      t15 = this[___RequestConfig_validateStatus];
      return t15 == null ? dart.throw(new _internal.LateError.fieldNI("validateStatus")) : t15;
    }
    set validateStatus(validateStatus$35param) {
      this[___RequestConfig_validateStatus] = validateStatus$35param;
    }
    get receiveDataWhenStatusError() {
      let t15;
      t15 = this[___RequestConfig_receiveDataWhenStatusError];
      return t15 == null ? dart.throw(new _internal.LateError.fieldNI("receiveDataWhenStatusError")) : t15;
    }
    set receiveDataWhenStatusError(receiveDataWhenStatusError$35param) {
      this[___RequestConfig_receiveDataWhenStatusError] = receiveDataWhenStatusError$35param;
    }
    get extra() {
      let t15;
      t15 = this[___RequestConfig_extra];
      return t15 == null ? dart.throw(new _internal.LateError.fieldNI("extra")) : t15;
    }
    set extra(extra$35param) {
      this[___RequestConfig_extra] = extra$35param;
    }
    get followRedirects() {
      let t15;
      t15 = this[___RequestConfig_followRedirects];
      return t15 == null ? dart.throw(new _internal.LateError.fieldNI("followRedirects")) : t15;
    }
    set followRedirects(followRedirects$35param) {
      this[___RequestConfig_followRedirects] = followRedirects$35param;
    }
    get maxRedirects() {
      let t15;
      t15 = this[___RequestConfig_maxRedirects];
      return t15 == null ? dart.throw(new _internal.LateError.fieldNI("maxRedirects")) : t15;
    }
    set maxRedirects(maxRedirects$35param) {
      this[___RequestConfig_maxRedirects] = maxRedirects$35param;
    }
    get listFormat() {
      let t15;
      t15 = this[___RequestConfig_listFormat];
      return t15 == null ? dart.throw(new _internal.LateError.fieldNI("listFormat")) : t15;
    }
    set listFormat(listFormat$35param) {
      this[___RequestConfig_listFormat] = listFormat$35param;
    }
  };
  (options$._RequestConfig.new = function(opts) {
    let t15, t15$, t15$0, t15$1, t15$2, t15$3, t15$4, t15$5, t15$6, t15$7, t15$8;
    let receiveTimeout = opts && 'receiveTimeout' in opts ? opts.receiveTimeout : null;
    let sendTimeout = opts && 'sendTimeout' in opts ? opts.sendTimeout : null;
    let method = opts && 'method' in opts ? opts.method : null;
    let extra = opts && 'extra' in opts ? opts.extra : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    let listFormat = opts && 'listFormat' in opts ? opts.listFormat : null;
    let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
    let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
    let receiveDataWhenStatusError = opts && 'receiveDataWhenStatusError' in opts ? opts.receiveDataWhenStatusError : null;
    let validateStatus = opts && 'validateStatus' in opts ? opts.validateStatus : null;
    let responseType = opts && 'responseType' in opts ? opts.responseType : null;
    let requestEncoder = opts && 'requestEncoder' in opts ? opts.requestEncoder : null;
    let responseDecoder = opts && 'responseDecoder' in opts ? opts.responseDecoder : null;
    this[___RequestConfig_method] = null;
    this[___RequestConfig__headers] = null;
    this[___RequestConfig_sendTimeout] = null;
    this[___RequestConfig_receiveTimeout] = null;
    this[_defaultContentType] = null;
    this[___RequestConfig_responseType] = null;
    this[___RequestConfig_validateStatus] = null;
    this[___RequestConfig_receiveDataWhenStatusError] = null;
    this[___RequestConfig_extra] = null;
    this[___RequestConfig_followRedirects] = null;
    this[___RequestConfig_maxRedirects] = null;
    this[___RequestConfig_listFormat] = null;
    this[requestEncoder$] = requestEncoder;
    this[responseDecoder$] = responseDecoder;
    this.headers = headers;
    let contentTypeInHeader = this.headers[$containsKey]("content-type");
    if (!(!(contentType != null && contentTypeInHeader) || dart.equals(this.headers[$_get]("content-type"), contentType))) dart.assertFailed("You cannot set different values for contentType param and a content-type header", I[16], 596, 7, "!(contentType != null && contentTypeInHeader) ||\r\n          this.headers[Headers.contentTypeHeader] == contentType");
    this.method = (t15 = method, t15 == null ? "GET" : t15);
    this.sendTimeout = (t15$ = sendTimeout, t15$ == null ? 0 : t15$);
    this.receiveTimeout = (t15$0 = receiveTimeout, t15$0 == null ? 0 : t15$0);
    this.listFormat = (t15$1 = listFormat, t15$1 == null ? options$.ListFormat.multi : t15$1);
    this.extra = (t15$2 = extra, t15$2 == null ? new (T$.IdentityMapOfString$dynamic()).new() : t15$2);
    this.followRedirects = (t15$3 = followRedirects, t15$3 == null ? true : t15$3);
    this.maxRedirects = (t15$4 = maxRedirects, t15$4 == null ? 5 : t15$4);
    this.receiveDataWhenStatusError = (t15$5 = receiveDataWhenStatusError, t15$5 == null ? true : t15$5);
    this.validateStatus = (t15$6 = validateStatus, t15$6 == null ? dart.fn(status => status != null && dart.notNull(status) >= 200 && dart.notNull(status) < 300, T$.intNTobool()) : t15$6);
    this.responseType = (t15$7 = responseType, t15$7 == null ? options$.ResponseType.json : t15$7);
    if (!contentTypeInHeader) {
      this.contentType = (t15$8 = contentType, t15$8 == null ? "application/json; charset=utf-8" : t15$8);
    }
  }).prototype = options$._RequestConfig.prototype;
  dart.addTypeTests(options$._RequestConfig);
  dart.addTypeCaches(options$._RequestConfig);
  dart.setGetterSignature(options$._RequestConfig, () => ({
    __proto__: dart.getGetters(options$._RequestConfig.__proto__),
    method: core.String,
    headers: core.Map$(core.String, dart.dynamic),
    [_headers]: core.Map$(core.String, dart.dynamic),
    sendTimeout: core.int,
    receiveTimeout: core.int,
    contentType: dart.nullable(core.String),
    responseType: options$.ResponseType,
    validateStatus: dart.fnType(core.bool, [dart.nullable(core.int)]),
    receiveDataWhenStatusError: core.bool,
    extra: core.Map$(core.String, dart.dynamic),
    followRedirects: core.bool,
    maxRedirects: core.int,
    listFormat: options$.ListFormat
  }));
  dart.setSetterSignature(options$._RequestConfig, () => ({
    __proto__: dart.getSetters(options$._RequestConfig.__proto__),
    method: core.String,
    [_headers]: core.Map$(core.String, dart.dynamic),
    headers: dart.nullable(core.Map$(core.String, dart.dynamic)),
    sendTimeout: core.int,
    receiveTimeout: core.int,
    contentType: dart.nullable(core.String),
    responseType: options$.ResponseType,
    validateStatus: dart.fnType(core.bool, [dart.nullable(core.int)]),
    receiveDataWhenStatusError: core.bool,
    extra: core.Map$(core.String, dart.dynamic),
    followRedirects: core.bool,
    maxRedirects: core.int,
    listFormat: options$.ListFormat
  }));
  dart.setLibraryUri(options$._RequestConfig, I[15]);
  dart.setFieldSignature(options$._RequestConfig, () => ({
    __proto__: dart.getFields(options$._RequestConfig.__proto__),
    [___RequestConfig_method]: dart.fieldType(dart.nullable(core.String)),
    [___RequestConfig__headers]: dart.fieldType(dart.nullable(core.Map$(core.String, dart.dynamic))),
    [___RequestConfig_sendTimeout]: dart.fieldType(dart.nullable(core.int)),
    [___RequestConfig_receiveTimeout]: dart.fieldType(dart.nullable(core.int)),
    [_defaultContentType]: dart.fieldType(dart.nullable(core.String)),
    [___RequestConfig_responseType]: dart.fieldType(dart.nullable(options$.ResponseType)),
    [___RequestConfig_validateStatus]: dart.fieldType(dart.nullable(dart.fnType(core.bool, [dart.nullable(core.int)]))),
    [___RequestConfig_receiveDataWhenStatusError]: dart.fieldType(dart.nullable(core.bool)),
    [___RequestConfig_extra]: dart.fieldType(dart.nullable(core.Map$(core.String, dart.dynamic))),
    [___RequestConfig_followRedirects]: dart.fieldType(dart.nullable(core.bool)),
    [___RequestConfig_maxRedirects]: dart.fieldType(dart.nullable(core.int)),
    requestEncoder: dart.fieldType(dart.nullable(dart.fnType(core.List$(core.int), [core.String, options$.RequestOptions]))),
    responseDecoder: dart.fieldType(dart.nullable(dart.fnType(core.String, [core.List$(core.int), options$.RequestOptions, adapter.ResponseBody]))),
    [___RequestConfig_listFormat]: dart.fieldType(dart.nullable(options$.ListFormat))
  }));
  var _$35OptionsMixin$35baseUrl = dart.privateName(options$, "OptionsMixin._#OptionsMixin#baseUrl");
  var _$35OptionsMixin$35queryParameters = dart.privateName(options$, "OptionsMixin._#OptionsMixin#queryParameters");
  var _$35OptionsMixin$35connectTimeout = dart.privateName(options$, "OptionsMixin._#OptionsMixin#connectTimeout");
  var __OptionsMixin_baseUrl = dart.privateName(options$, "_#OptionsMixin#baseUrl");
  var __OptionsMixin_queryParameters = dart.privateName(options$, "_#OptionsMixin#queryParameters");
  var __OptionsMixin_connectTimeout = dart.privateName(options$, "_#OptionsMixin#connectTimeout");
  options$.OptionsMixin = class OptionsMixin extends core.Object {};
  options$.OptionsMixin[dart.mixinOn] = Object => class OptionsMixin extends Object {
    get [__OptionsMixin_baseUrl]() {
      return this[_$35OptionsMixin$35baseUrl];
    }
    set [__OptionsMixin_baseUrl](value) {
      this[_$35OptionsMixin$35baseUrl] = value;
    }
    get [__OptionsMixin_queryParameters]() {
      return this[_$35OptionsMixin$35queryParameters];
    }
    set [__OptionsMixin_queryParameters](value) {
      this[_$35OptionsMixin$35queryParameters] = value;
    }
    get [__OptionsMixin_connectTimeout]() {
      return this[_$35OptionsMixin$35connectTimeout];
    }
    set [__OptionsMixin_connectTimeout](value) {
      this[_$35OptionsMixin$35connectTimeout] = value;
    }
    get baseUrl() {
      let t15;
      t15 = this[__OptionsMixin_baseUrl];
      return t15 == null ? dart.throw(new _internal.LateError.fieldNI("baseUrl")) : t15;
    }
    set baseUrl(baseUrl$35param) {
      this[__OptionsMixin_baseUrl] = baseUrl$35param;
    }
    get queryParameters() {
      let t15;
      t15 = this[__OptionsMixin_queryParameters];
      return t15 == null ? dart.throw(new _internal.LateError.fieldNI("queryParameters")) : t15;
    }
    set queryParameters(queryParameters$35param) {
      this[__OptionsMixin_queryParameters] = queryParameters$35param;
    }
    get connectTimeout() {
      let t15;
      t15 = this[__OptionsMixin_connectTimeout];
      return t15 == null ? dart.throw(new _internal.LateError.fieldNI("connectTimeout")) : t15;
    }
    set connectTimeout(connectTimeout$35param) {
      this[__OptionsMixin_connectTimeout] = connectTimeout$35param;
    }
  };
  (options$.OptionsMixin[dart.mixinNew] = function() {
    this[_$35OptionsMixin$35baseUrl] = null;
    this[_$35OptionsMixin$35queryParameters] = null;
    this[_$35OptionsMixin$35connectTimeout] = null;
  }).prototype = options$.OptionsMixin.prototype;
  dart.addTypeTests(options$.OptionsMixin);
  dart.addTypeCaches(options$.OptionsMixin);
  options$.OptionsMixin[dart.implements] = () => [core.Object];
  dart.setGetterSignature(options$.OptionsMixin, () => ({
    __proto__: dart.getGetters(options$.OptionsMixin.__proto__),
    baseUrl: core.String,
    queryParameters: core.Map$(core.String, dart.dynamic),
    connectTimeout: core.int
  }));
  dart.setSetterSignature(options$.OptionsMixin, () => ({
    __proto__: dart.getSetters(options$.OptionsMixin.__proto__),
    baseUrl: core.String,
    queryParameters: core.Map$(core.String, dart.dynamic),
    connectTimeout: core.int
  }));
  dart.setLibraryUri(options$.OptionsMixin, I[15]);
  dart.setFieldSignature(options$.OptionsMixin, () => ({
    __proto__: dart.getFields(options$.OptionsMixin.__proto__),
    [__OptionsMixin_baseUrl]: dart.fieldType(dart.nullable(core.String)),
    [__OptionsMixin_queryParameters]: dart.fieldType(dart.nullable(core.Map$(core.String, dart.dynamic))),
    [__OptionsMixin_connectTimeout]: dart.fieldType(dart.nullable(core.int))
  }));
  const _RequestConfig_OptionsMixin$36 = class _RequestConfig_OptionsMixin extends options$._RequestConfig {};
  (_RequestConfig_OptionsMixin$36.new = function(opts) {
    options$.OptionsMixin[dart.mixinNew].call(this);
    _RequestConfig_OptionsMixin$36.__proto__.new.call(this, opts);
  }).prototype = _RequestConfig_OptionsMixin$36.prototype;
  dart.applyMixin(_RequestConfig_OptionsMixin$36, options$.OptionsMixin);
  options$.BaseOptions = class BaseOptions extends _RequestConfig_OptionsMixin$36 {
    get setRequestContentTypeWhenNoPayload() {
      return this[setRequestContentTypeWhenNoPayload$];
    }
    set setRequestContentTypeWhenNoPayload(value) {
      this[setRequestContentTypeWhenNoPayload$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let method = opts && 'method' in opts ? opts.method : null;
      let connectTimeout = opts && 'connectTimeout' in opts ? opts.connectTimeout : null;
      let receiveTimeout = opts && 'receiveTimeout' in opts ? opts.receiveTimeout : null;
      let sendTimeout = opts && 'sendTimeout' in opts ? opts.sendTimeout : null;
      let baseUrl = opts && 'baseUrl' in opts ? opts.baseUrl : "";
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let responseType = opts && 'responseType' in opts ? opts.responseType : C[29] || CT.C29;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let validateStatus = opts && 'validateStatus' in opts ? opts.validateStatus : null;
      let receiveDataWhenStatusError = opts && 'receiveDataWhenStatusError' in opts ? opts.receiveDataWhenStatusError : null;
      let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
      let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
      let requestEncoder = opts && 'requestEncoder' in opts ? opts.requestEncoder : null;
      let responseDecoder = opts && 'responseDecoder' in opts ? opts.responseDecoder : null;
      let listFormat = opts && 'listFormat' in opts ? opts.listFormat : null;
      let setRequestContentTypeWhenNoPayload = opts && 'setRequestContentTypeWhenNoPayload' in opts ? opts.setRequestContentTypeWhenNoPayload : false;
      return new options$.BaseOptions.new({method: method, connectTimeout: connectTimeout, receiveTimeout: receiveTimeout, sendTimeout: sendTimeout, baseUrl: baseUrl, queryParameters: queryParameters, extra: extra, headers: headers, responseType: responseType, contentType: contentType, validateStatus: validateStatus, receiveDataWhenStatusError: receiveDataWhenStatusError, followRedirects: followRedirects, maxRedirects: maxRedirects, requestEncoder: requestEncoder, responseDecoder: responseDecoder, listFormat: listFormat, setRequestContentTypeWhenNoPayload: setRequestContentTypeWhenNoPayload});
    }
    copyWith(opts) {
      let t15, t15$, t15$0, t15$1, t15$2, t15$3, t15$4, t15$5, t15$6, t15$7, t15$8, t15$9, t15$10, t15$11, t15$12, t15$13, t15$14, t15$15;
      let method = opts && 'method' in opts ? opts.method : null;
      let baseUrl = opts && 'baseUrl' in opts ? opts.baseUrl : null;
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let path = opts && 'path' in opts ? opts.path : null;
      let connectTimeout = opts && 'connectTimeout' in opts ? opts.connectTimeout : null;
      let receiveTimeout = opts && 'receiveTimeout' in opts ? opts.receiveTimeout : null;
      let sendTimeout = opts && 'sendTimeout' in opts ? opts.sendTimeout : null;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let responseType = opts && 'responseType' in opts ? opts.responseType : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let validateStatus = opts && 'validateStatus' in opts ? opts.validateStatus : null;
      let receiveDataWhenStatusError = opts && 'receiveDataWhenStatusError' in opts ? opts.receiveDataWhenStatusError : null;
      let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
      let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
      let requestEncoder = opts && 'requestEncoder' in opts ? opts.requestEncoder : null;
      let responseDecoder = opts && 'responseDecoder' in opts ? opts.responseDecoder : null;
      let listFormat = opts && 'listFormat' in opts ? opts.listFormat : null;
      let setRequestContentTypeWhenNoPayload = opts && 'setRequestContentTypeWhenNoPayload' in opts ? opts.setRequestContentTypeWhenNoPayload : null;
      return new options$.BaseOptions.new({method: (t15 = method, t15 == null ? this.method : t15), baseUrl: (t15$ = baseUrl, t15$ == null ? this.baseUrl : t15$), queryParameters: (t15$0 = queryParameters, t15$0 == null ? this.queryParameters : t15$0), connectTimeout: (t15$1 = connectTimeout, t15$1 == null ? this.connectTimeout : t15$1), receiveTimeout: (t15$2 = receiveTimeout, t15$2 == null ? this.receiveTimeout : t15$2), sendTimeout: (t15$3 = sendTimeout, t15$3 == null ? this.sendTimeout : t15$3), extra: (t15$4 = extra, t15$4 == null ? T$.LinkedHashMapOfString$dynamic().from(this.extra) : t15$4), headers: (t15$5 = headers, t15$5 == null ? T$.LinkedHashMapOfString$dynamic().from(this.headers) : t15$5), responseType: (t15$6 = responseType, t15$6 == null ? this.responseType : t15$6), contentType: (t15$7 = contentType, t15$7 == null ? this.contentType : t15$7), validateStatus: (t15$8 = validateStatus, t15$8 == null ? this.validateStatus : t15$8), receiveDataWhenStatusError: (t15$9 = receiveDataWhenStatusError, t15$9 == null ? this.receiveDataWhenStatusError : t15$9), followRedirects: (t15$10 = followRedirects, t15$10 == null ? this.followRedirects : t15$10), maxRedirects: (t15$11 = maxRedirects, t15$11 == null ? this.maxRedirects : t15$11), requestEncoder: (t15$12 = requestEncoder, t15$12 == null ? this.requestEncoder : t15$12), responseDecoder: (t15$13 = responseDecoder, t15$13 == null ? this.responseDecoder : t15$13), listFormat: (t15$14 = listFormat, t15$14 == null ? this.listFormat : t15$14), setRequestContentTypeWhenNoPayload: (t15$15 = setRequestContentTypeWhenNoPayload, t15$15 == null ? this.setRequestContentTypeWhenNoPayload : t15$15)});
    }
    contentTypeWithRequestBody(method) {
      if (this.setRequestContentTypeWhenNoPayload) {
        return this.contentType;
      } else {
        return options$.BaseOptions._allowPayloadMethods[$contains](method) ? this.contentType : null;
      }
    }
  };
  (options$.BaseOptions.new = function(opts) {
    let t15, t15$;
    let method = opts && 'method' in opts ? opts.method : null;
    let connectTimeout = opts && 'connectTimeout' in opts ? opts.connectTimeout : null;
    let receiveTimeout = opts && 'receiveTimeout' in opts ? opts.receiveTimeout : null;
    let sendTimeout = opts && 'sendTimeout' in opts ? opts.sendTimeout : null;
    let baseUrl = opts && 'baseUrl' in opts ? opts.baseUrl : "";
    let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
    let extra = opts && 'extra' in opts ? opts.extra : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let responseType = opts && 'responseType' in opts ? opts.responseType : C[29] || CT.C29;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    let validateStatus = opts && 'validateStatus' in opts ? opts.validateStatus : null;
    let receiveDataWhenStatusError = opts && 'receiveDataWhenStatusError' in opts ? opts.receiveDataWhenStatusError : null;
    let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
    let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
    let requestEncoder = opts && 'requestEncoder' in opts ? opts.requestEncoder : null;
    let responseDecoder = opts && 'responseDecoder' in opts ? opts.responseDecoder : null;
    let listFormat = opts && 'listFormat' in opts ? opts.listFormat : null;
    let setRequestContentTypeWhenNoPayload = opts && 'setRequestContentTypeWhenNoPayload' in opts ? opts.setRequestContentTypeWhenNoPayload : false;
    this[setRequestContentTypeWhenNoPayload$] = setRequestContentTypeWhenNoPayload;
    options$.BaseOptions.__proto__.new.call(this, {method: method, receiveTimeout: receiveTimeout, sendTimeout: sendTimeout, extra: extra, headers: headers, responseType: responseType, contentType: contentType, validateStatus: validateStatus, receiveDataWhenStatusError: receiveDataWhenStatusError, followRedirects: followRedirects, maxRedirects: maxRedirects, requestEncoder: requestEncoder, responseDecoder: responseDecoder, listFormat: listFormat});
    this.queryParameters = (t15 = queryParameters, t15 == null ? new (T$.IdentityMapOfString$dynamic()).new() : t15);
    this.baseUrl = baseUrl;
    this.connectTimeout = (t15$ = connectTimeout, t15$ == null ? 0 : t15$);
  }).prototype = options$.BaseOptions.prototype;
  dart.addTypeTests(options$.BaseOptions);
  dart.addTypeCaches(options$.BaseOptions);
  dart.setMethodSignature(options$.BaseOptions, () => ({
    __proto__: dart.getMethods(options$.BaseOptions.__proto__),
    copyWith: dart.fnType(options$.BaseOptions, [], {baseUrl: dart.nullable(core.String), connectTimeout: dart.nullable(core.int), contentType: dart.nullable(core.String), extra: dart.nullable(core.Map$(core.String, dart.dynamic)), followRedirects: dart.nullable(core.bool), headers: dart.nullable(core.Map$(core.String, dart.dynamic)), listFormat: dart.nullable(options$.ListFormat), maxRedirects: dart.nullable(core.int), method: dart.nullable(core.String), path: dart.nullable(core.String), queryParameters: dart.nullable(core.Map$(core.String, dart.dynamic)), receiveDataWhenStatusError: dart.nullable(core.bool), receiveTimeout: dart.nullable(core.int), requestEncoder: dart.nullable(dart.fnType(core.List$(core.int), [core.String, options$.RequestOptions])), responseDecoder: dart.nullable(dart.fnType(core.String, [core.List$(core.int), options$.RequestOptions, adapter.ResponseBody])), responseType: dart.nullable(options$.ResponseType), sendTimeout: dart.nullable(core.int), setRequestContentTypeWhenNoPayload: dart.nullable(core.bool), validateStatus: dart.nullable(dart.fnType(core.bool, [dart.nullable(core.int)]))}, {}),
    contentTypeWithRequestBody: dart.fnType(dart.nullable(core.String), [core.String])
  }));
  dart.setLibraryUri(options$.BaseOptions, I[15]);
  dart.setFieldSignature(options$.BaseOptions, () => ({
    __proto__: dart.getFields(options$.BaseOptions.__proto__),
    setRequestContentTypeWhenNoPayload: dart.fieldType(core.bool)
  }));
  dart.setStaticFieldSignature(options$.BaseOptions, () => ['_allowPayloadMethods']);
  dart.defineLazy(options$.BaseOptions, {
    /*options$.BaseOptions._allowPayloadMethods*/get _allowPayloadMethods() {
      return C[7] || CT.C7;
    }
  }, false);
  var method$ = dart.privateName(options$, "Options.method");
  var headers$1 = dart.privateName(options$, "Options.headers");
  var sendTimeout$ = dart.privateName(options$, "Options.sendTimeout");
  var receiveTimeout$ = dart.privateName(options$, "Options.receiveTimeout");
  var contentType$0 = dart.privateName(options$, "Options.contentType");
  var responseType$ = dart.privateName(options$, "Options.responseType");
  var validateStatus$ = dart.privateName(options$, "Options.validateStatus");
  var receiveDataWhenStatusError$ = dart.privateName(options$, "Options.receiveDataWhenStatusError");
  var extra$ = dart.privateName(options$, "Options.extra");
  var followRedirects$ = dart.privateName(options$, "Options.followRedirects");
  var maxRedirects$ = dart.privateName(options$, "Options.maxRedirects");
  var requestEncoder$0 = dart.privateName(options$, "Options.requestEncoder");
  var responseDecoder$0 = dart.privateName(options$, "Options.responseDecoder");
  var listFormat$ = dart.privateName(options$, "Options.listFormat");
  options$.Options = class Options extends core.Object {
    get method() {
      return this[method$];
    }
    set method(value) {
      this[method$] = value;
    }
    get headers() {
      return this[headers$1];
    }
    set headers(value) {
      this[headers$1] = value;
    }
    get sendTimeout() {
      return this[sendTimeout$];
    }
    set sendTimeout(value) {
      this[sendTimeout$] = value;
    }
    get receiveTimeout() {
      return this[receiveTimeout$];
    }
    set receiveTimeout(value) {
      this[receiveTimeout$] = value;
    }
    get contentType() {
      return this[contentType$0];
    }
    set contentType(value) {
      this[contentType$0] = value;
    }
    get responseType() {
      return this[responseType$];
    }
    set responseType(value) {
      this[responseType$] = value;
    }
    get validateStatus() {
      return this[validateStatus$];
    }
    set validateStatus(value) {
      this[validateStatus$] = value;
    }
    get receiveDataWhenStatusError() {
      return this[receiveDataWhenStatusError$];
    }
    set receiveDataWhenStatusError(value) {
      this[receiveDataWhenStatusError$] = value;
    }
    get extra() {
      return this[extra$];
    }
    set extra(value) {
      this[extra$] = value;
    }
    get followRedirects() {
      return this[followRedirects$];
    }
    set followRedirects(value) {
      this[followRedirects$] = value;
    }
    get maxRedirects() {
      return this[maxRedirects$];
    }
    set maxRedirects(value) {
      this[maxRedirects$] = value;
    }
    get requestEncoder() {
      return this[requestEncoder$0];
    }
    set requestEncoder(value) {
      this[requestEncoder$0] = value;
    }
    get responseDecoder() {
      return this[responseDecoder$0];
    }
    set responseDecoder(value) {
      this[responseDecoder$0] = value;
    }
    get listFormat() {
      return this[listFormat$];
    }
    set listFormat(value) {
      this[listFormat$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let method = opts && 'method' in opts ? opts.method : null;
      let sendTimeout = opts && 'sendTimeout' in opts ? opts.sendTimeout : null;
      let receiveTimeout = opts && 'receiveTimeout' in opts ? opts.receiveTimeout : null;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let responseType = opts && 'responseType' in opts ? opts.responseType : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let validateStatus = opts && 'validateStatus' in opts ? opts.validateStatus : null;
      let receiveDataWhenStatusError = opts && 'receiveDataWhenStatusError' in opts ? opts.receiveDataWhenStatusError : null;
      let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
      let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
      let requestEncoder = opts && 'requestEncoder' in opts ? opts.requestEncoder : null;
      let responseDecoder = opts && 'responseDecoder' in opts ? opts.responseDecoder : null;
      let listFormat = opts && 'listFormat' in opts ? opts.listFormat : null;
      return new options$.Options.new({method: method, sendTimeout: sendTimeout, receiveTimeout: receiveTimeout, extra: extra, headers: headers, responseType: responseType, contentType: contentType, validateStatus: validateStatus, receiveDataWhenStatusError: receiveDataWhenStatusError, followRedirects: followRedirects, maxRedirects: maxRedirects, requestEncoder: requestEncoder, responseDecoder: responseDecoder, listFormat: listFormat});
    }
    copyWith(opts) {
      let t15, t15$, t15$0, t15$1, t15$2, t15$3, t15$4, t15$5, t15$6, t15$7, t15$8, t15$9, t15$10, t15$11;
      let method = opts && 'method' in opts ? opts.method : null;
      let sendTimeout = opts && 'sendTimeout' in opts ? opts.sendTimeout : null;
      let receiveTimeout = opts && 'receiveTimeout' in opts ? opts.receiveTimeout : null;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let responseType = opts && 'responseType' in opts ? opts.responseType : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let validateStatus = opts && 'validateStatus' in opts ? opts.validateStatus : null;
      let receiveDataWhenStatusError = opts && 'receiveDataWhenStatusError' in opts ? opts.receiveDataWhenStatusError : null;
      let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
      let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
      let requestEncoder = opts && 'requestEncoder' in opts ? opts.requestEncoder : null;
      let responseDecoder = opts && 'responseDecoder' in opts ? opts.responseDecoder : null;
      let listFormat = opts && 'listFormat' in opts ? opts.listFormat : null;
      let _headers = null;
      if (headers == null && this.headers != null) {
        _headers = utils.caseInsensitiveKeyMap(dart.dynamic, dart.nullCheck(this.headers));
      }
      if (headers != null) {
        headers = utils.caseInsensitiveKeyMap(dart.dynamic, headers);
        if (!!(contentType != null && headers[$containsKey]("content-type"))) dart.assertFailed("You cannot set both contentType param and a content-type header", I[16], 245, 9, "!(contentType != null &&\r\n            headers.containsKey(Headers.contentTypeHeader))");
      }
      let _extra = null;
      if (extra == null && this.extra != null) {
        _extra = T$.LinkedHashMapOfString$dynamic().from(dart.nullCheck(this.extra));
      }
      return new options$.Options.new({method: (t15 = method, t15 == null ? this.method : t15), sendTimeout: (t15$ = sendTimeout, t15$ == null ? this.sendTimeout : t15$), receiveTimeout: (t15$0 = receiveTimeout, t15$0 == null ? this.receiveTimeout : t15$0), extra: (t15$1 = extra, t15$1 == null ? _extra : t15$1), headers: (t15$2 = headers, t15$2 == null ? _headers : t15$2), responseType: (t15$3 = responseType, t15$3 == null ? this.responseType : t15$3), contentType: (t15$4 = contentType, t15$4 == null ? this.contentType : t15$4), validateStatus: (t15$5 = validateStatus, t15$5 == null ? this.validateStatus : t15$5), receiveDataWhenStatusError: (t15$6 = receiveDataWhenStatusError, t15$6 == null ? this.receiveDataWhenStatusError : t15$6), followRedirects: (t15$7 = followRedirects, t15$7 == null ? this.followRedirects : t15$7), maxRedirects: (t15$8 = maxRedirects, t15$8 == null ? this.maxRedirects : t15$8), requestEncoder: (t15$9 = requestEncoder, t15$9 == null ? this.requestEncoder : t15$9), responseDecoder: (t15$10 = responseDecoder, t15$10 == null ? this.responseDecoder : t15$10), listFormat: (t15$11 = listFormat, t15$11 == null ? this.listFormat : t15$11)});
    }
    compose(baseOpt, path, opts) {
      let t15, t15$, t15$0, t15$1, t15$2, t15$3, t15$4, t15$5, t15$6, t15$7, t15$8, t15$9, t15$10;
      let data = opts && 'data' in opts ? opts.data : null;
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      let query = new (T$.IdentityMapOfString$dynamic()).new();
      query[$addAll](baseOpt.queryParameters);
      if (queryParameters != null) query[$addAll](queryParameters);
      let _headers = utils.caseInsensitiveKeyMap(dart.dynamic, baseOpt.headers);
      _headers[$remove]("content-type");
      let _contentType = null;
      if (this.headers != null) {
        _headers[$addAll](dart.nullCheck(this.headers));
        _contentType = T$.StringN().as(_headers[$_get]("content-type"));
      }
      let _extra = T$.LinkedHashMapOfString$dynamic().from(baseOpt.extra);
      if (this.extra != null) {
        _extra[$addAll](dart.nullCheck(this.extra));
      }
      let _method = (t15 = this.method, t15 == null ? baseOpt.method : t15)[$toUpperCase]();
      let requestOptions = new options$.RequestOptions.new({method: _method, headers: _headers, extra: _extra, baseUrl: baseOpt.baseUrl, path: path, data: data, connectTimeout: baseOpt.connectTimeout, sendTimeout: (t15$ = this.sendTimeout, t15$ == null ? baseOpt.sendTimeout : t15$), receiveTimeout: (t15$0 = this.receiveTimeout, t15$0 == null ? baseOpt.receiveTimeout : t15$0), responseType: (t15$1 = this.responseType, t15$1 == null ? baseOpt.responseType : t15$1), validateStatus: (t15$2 = this.validateStatus, t15$2 == null ? baseOpt.validateStatus : t15$2), receiveDataWhenStatusError: (t15$3 = this.receiveDataWhenStatusError, t15$3 == null ? baseOpt.receiveDataWhenStatusError : t15$3), followRedirects: (t15$4 = this.followRedirects, t15$4 == null ? baseOpt.followRedirects : t15$4), maxRedirects: (t15$5 = this.maxRedirects, t15$5 == null ? baseOpt.maxRedirects : t15$5), queryParameters: query, requestEncoder: (t15$6 = this.requestEncoder, t15$6 == null ? baseOpt.requestEncoder : t15$6), responseDecoder: (t15$7 = this.responseDecoder, t15$7 == null ? baseOpt.responseDecoder : t15$7), listFormat: (t15$8 = this.listFormat, t15$8 == null ? baseOpt.listFormat : t15$8)});
      requestOptions.onReceiveProgress = onReceiveProgress;
      requestOptions.onSendProgress = onSendProgress;
      requestOptions.cancelToken = cancelToken;
      requestOptions.contentType = (t15$10 = (t15$9 = _contentType, t15$9 == null ? this.contentType : t15$9), t15$10 == null ? baseOpt.contentTypeWithRequestBody(_method) : t15$10);
      return requestOptions;
    }
  };
  (options$.Options.new = function(opts) {
    let method = opts && 'method' in opts ? opts.method : null;
    let sendTimeout = opts && 'sendTimeout' in opts ? opts.sendTimeout : null;
    let receiveTimeout = opts && 'receiveTimeout' in opts ? opts.receiveTimeout : null;
    let extra = opts && 'extra' in opts ? opts.extra : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let responseType = opts && 'responseType' in opts ? opts.responseType : null;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    let validateStatus = opts && 'validateStatus' in opts ? opts.validateStatus : null;
    let receiveDataWhenStatusError = opts && 'receiveDataWhenStatusError' in opts ? opts.receiveDataWhenStatusError : null;
    let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
    let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
    let requestEncoder = opts && 'requestEncoder' in opts ? opts.requestEncoder : null;
    let responseDecoder = opts && 'responseDecoder' in opts ? opts.responseDecoder : null;
    let listFormat = opts && 'listFormat' in opts ? opts.listFormat : null;
    this[method$] = method;
    this[sendTimeout$] = sendTimeout;
    this[receiveTimeout$] = receiveTimeout;
    this[extra$] = extra;
    this[headers$1] = headers;
    this[responseType$] = responseType;
    this[contentType$0] = contentType;
    this[validateStatus$] = validateStatus;
    this[receiveDataWhenStatusError$] = receiveDataWhenStatusError;
    this[followRedirects$] = followRedirects;
    this[maxRedirects$] = maxRedirects;
    this[requestEncoder$0] = requestEncoder;
    this[responseDecoder$0] = responseDecoder;
    this[listFormat$] = listFormat;
    ;
  }).prototype = options$.Options.prototype;
  dart.addTypeTests(options$.Options);
  dart.addTypeCaches(options$.Options);
  dart.setMethodSignature(options$.Options, () => ({
    __proto__: dart.getMethods(options$.Options.__proto__),
    copyWith: dart.fnType(options$.Options, [], {contentType: dart.nullable(core.String), extra: dart.nullable(core.Map$(core.String, dart.dynamic)), followRedirects: dart.nullable(core.bool), headers: dart.nullable(core.Map$(core.String, dart.dynamic)), listFormat: dart.nullable(options$.ListFormat), maxRedirects: dart.nullable(core.int), method: dart.nullable(core.String), receiveDataWhenStatusError: dart.nullable(core.bool), receiveTimeout: dart.nullable(core.int), requestEncoder: dart.nullable(dart.fnType(core.List$(core.int), [core.String, options$.RequestOptions])), responseDecoder: dart.nullable(dart.fnType(core.String, [core.List$(core.int), options$.RequestOptions, adapter.ResponseBody])), responseType: dart.nullable(options$.ResponseType), sendTimeout: dart.nullable(core.int), validateStatus: dart.nullable(dart.fnType(core.bool, [dart.nullable(core.int)]))}, {}),
    compose: dart.fnType(options$.RequestOptions, [options$.BaseOptions, core.String], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.dynamic, onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), onSendProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options), queryParameters: dart.nullable(core.Map$(core.String, dart.dynamic))}, {})
  }));
  dart.setLibraryUri(options$.Options, I[15]);
  dart.setFieldSignature(options$.Options, () => ({
    __proto__: dart.getFields(options$.Options.__proto__),
    method: dart.fieldType(dart.nullable(core.String)),
    headers: dart.fieldType(dart.nullable(core.Map$(core.String, dart.dynamic))),
    sendTimeout: dart.fieldType(dart.nullable(core.int)),
    receiveTimeout: dart.fieldType(dart.nullable(core.int)),
    contentType: dart.fieldType(dart.nullable(core.String)),
    responseType: dart.fieldType(dart.nullable(options$.ResponseType)),
    validateStatus: dart.fieldType(dart.nullable(dart.fnType(core.bool, [dart.nullable(core.int)]))),
    receiveDataWhenStatusError: dart.fieldType(dart.nullable(core.bool)),
    extra: dart.fieldType(dart.nullable(core.Map$(core.String, dart.dynamic))),
    followRedirects: dart.fieldType(dart.nullable(core.bool)),
    maxRedirects: dart.fieldType(dart.nullable(core.int)),
    requestEncoder: dart.fieldType(dart.nullable(dart.fnType(core.List$(core.int), [core.String, options$.RequestOptions]))),
    responseDecoder: dart.fieldType(dart.nullable(dart.fnType(core.String, [core.List$(core.int), options$.RequestOptions, adapter.ResponseBody]))),
    listFormat: dart.fieldType(dart.nullable(options$.ListFormat))
  }));
  var data$2 = dart.privateName(options$, "RequestOptions.data");
  var path$ = dart.privateName(options$, "RequestOptions.path");
  var cancelToken$ = dart.privateName(options$, "RequestOptions.cancelToken");
  var onReceiveProgress$ = dart.privateName(options$, "RequestOptions.onReceiveProgress");
  var onSendProgress$ = dart.privateName(options$, "RequestOptions.onSendProgress");
  const _RequestConfig_OptionsMixin$36$ = class _RequestConfig_OptionsMixin extends options$._RequestConfig {};
  (_RequestConfig_OptionsMixin$36$.new = function(opts) {
    options$.OptionsMixin[dart.mixinNew].call(this);
    _RequestConfig_OptionsMixin$36$.__proto__.new.call(this, opts);
  }).prototype = _RequestConfig_OptionsMixin$36$.prototype;
  dart.applyMixin(_RequestConfig_OptionsMixin$36$, options$.OptionsMixin);
  options$.RequestOptions = class RequestOptions extends _RequestConfig_OptionsMixin$36$ {
    get data() {
      return this[data$2];
    }
    set data(value) {
      this[data$2] = value;
    }
    get path() {
      return this[path$];
    }
    set path(value) {
      this[path$] = value;
    }
    get cancelToken() {
      return this[cancelToken$];
    }
    set cancelToken(value) {
      this[cancelToken$] = value;
    }
    get onReceiveProgress() {
      return this[onReceiveProgress$];
    }
    set onReceiveProgress(value) {
      this[onReceiveProgress$] = value;
    }
    get onSendProgress() {
      return this[onSendProgress$];
    }
    set onSendProgress(value) {
      this[onSendProgress$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let method = opts && 'method' in opts ? opts.method : null;
      let sendTimeout = opts && 'sendTimeout' in opts ? opts.sendTimeout : null;
      let receiveTimeout = opts && 'receiveTimeout' in opts ? opts.receiveTimeout : null;
      let connectTimeout = opts && 'connectTimeout' in opts ? opts.connectTimeout : null;
      let data = opts && 'data' in opts ? opts.data : null;
      let path = opts && 'path' in opts ? opts.path : null;
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let baseUrl = opts && 'baseUrl' in opts ? opts.baseUrl : null;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let responseType = opts && 'responseType' in opts ? opts.responseType : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let validateStatus = opts && 'validateStatus' in opts ? opts.validateStatus : null;
      let receiveDataWhenStatusError = opts && 'receiveDataWhenStatusError' in opts ? opts.receiveDataWhenStatusError : null;
      let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
      let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
      let requestEncoder = opts && 'requestEncoder' in opts ? opts.requestEncoder : null;
      let responseDecoder = opts && 'responseDecoder' in opts ? opts.responseDecoder : null;
      let listFormat = opts && 'listFormat' in opts ? opts.listFormat : null;
      let setRequestContentTypeWhenNoPayload = opts && 'setRequestContentTypeWhenNoPayload' in opts ? opts.setRequestContentTypeWhenNoPayload : null;
      return new options$.RequestOptions.new({method: method, sendTimeout: sendTimeout, receiveTimeout: receiveTimeout, connectTimeout: connectTimeout, data: data, path: path, queryParameters: queryParameters, onReceiveProgress: onReceiveProgress, onSendProgress: onSendProgress, cancelToken: cancelToken, baseUrl: baseUrl, extra: extra, headers: headers, responseType: responseType, contentType: contentType, validateStatus: validateStatus, receiveDataWhenStatusError: receiveDataWhenStatusError, followRedirects: followRedirects, maxRedirects: maxRedirects, requestEncoder: requestEncoder, responseDecoder: responseDecoder, listFormat: listFormat, setRequestContentTypeWhenNoPayload: setRequestContentTypeWhenNoPayload});
    }
    copyWith(opts) {
      let t15, t15$, t15$0, t15$1, t15$2, t15$3, t15$4, t15$5, t15$6, t15$7, t15$8, t15$9, t15$10, t15$11, t15$12, t15$13, t15$14, t15$15, t15$16, t15$17, t15$18;
      let method = opts && 'method' in opts ? opts.method : null;
      let sendTimeout = opts && 'sendTimeout' in opts ? opts.sendTimeout : null;
      let receiveTimeout = opts && 'receiveTimeout' in opts ? opts.receiveTimeout : null;
      let connectTimeout = opts && 'connectTimeout' in opts ? opts.connectTimeout : null;
      let data = opts && 'data' in opts ? opts.data : null;
      let path = opts && 'path' in opts ? opts.path : null;
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let baseUrl = opts && 'baseUrl' in opts ? opts.baseUrl : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let extra = opts && 'extra' in opts ? opts.extra : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let responseType = opts && 'responseType' in opts ? opts.responseType : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let validateStatus = opts && 'validateStatus' in opts ? opts.validateStatus : null;
      let receiveDataWhenStatusError = opts && 'receiveDataWhenStatusError' in opts ? opts.receiveDataWhenStatusError : null;
      let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
      let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
      let requestEncoder = opts && 'requestEncoder' in opts ? opts.requestEncoder : null;
      let responseDecoder = opts && 'responseDecoder' in opts ? opts.responseDecoder : null;
      let listFormat = opts && 'listFormat' in opts ? opts.listFormat : null;
      let setRequestContentTypeWhenNoPayload = opts && 'setRequestContentTypeWhenNoPayload' in opts ? opts.setRequestContentTypeWhenNoPayload : null;
      let contentTypeInHeader = headers != null && headers[$keys][$map](core.String, dart.fn(e => e[$toLowerCase](), T$.StringToString()))[$contains]("content-type");
      if (!!(contentType != null && contentTypeInHeader)) dart.assertFailed("You cannot set both contentType param and a content-type header", I[16], 496, 7, "!(contentType != null && contentTypeInHeader)");
      let ro = new options$.RequestOptions.new({method: (t15 = method, t15 == null ? this.method : t15), sendTimeout: (t15$ = sendTimeout, t15$ == null ? this.sendTimeout : t15$), receiveTimeout: (t15$0 = receiveTimeout, t15$0 == null ? this.receiveTimeout : t15$0), connectTimeout: (t15$1 = connectTimeout, t15$1 == null ? this.connectTimeout : t15$1), data: (t15$2 = data, t15$2 == null ? this.data : t15$2), path: (t15$3 = path, t15$3 == null ? this.path : t15$3), baseUrl: (t15$4 = baseUrl, t15$4 == null ? this.baseUrl : t15$4), queryParameters: (t15$5 = queryParameters, t15$5 == null ? T$.LinkedHashMapOfString$dynamic().from(this.queryParameters) : t15$5), onReceiveProgress: (t15$6 = onReceiveProgress, t15$6 == null ? this.onReceiveProgress : t15$6), onSendProgress: (t15$7 = onSendProgress, t15$7 == null ? this.onSendProgress : t15$7), cancelToken: (t15$8 = cancelToken, t15$8 == null ? this.cancelToken : t15$8), extra: (t15$9 = extra, t15$9 == null ? T$.LinkedHashMapOfString$dynamic().from(this.extra) : t15$9), headers: (t15$10 = headers, t15$10 == null ? T$.LinkedHashMapOfString$dynamic().from(this.headers) : t15$10), responseType: (t15$11 = responseType, t15$11 == null ? this.responseType : t15$11), validateStatus: (t15$12 = validateStatus, t15$12 == null ? this.validateStatus : t15$12), receiveDataWhenStatusError: (t15$13 = receiveDataWhenStatusError, t15$13 == null ? this.receiveDataWhenStatusError : t15$13), followRedirects: (t15$14 = followRedirects, t15$14 == null ? this.followRedirects : t15$14), maxRedirects: (t15$15 = maxRedirects, t15$15 == null ? this.maxRedirects : t15$15), requestEncoder: (t15$16 = requestEncoder, t15$16 == null ? this.requestEncoder : t15$16), responseDecoder: (t15$17 = responseDecoder, t15$17 == null ? this.responseDecoder : t15$17), listFormat: (t15$18 = listFormat, t15$18 == null ? this.listFormat : t15$18)});
      if (contentType != null) {
        ro.headers[$remove]("content-type");
        ro.contentType = contentType;
      } else if (!contentTypeInHeader) {
        ro.contentType = this.contentType;
      }
      return ro;
    }
    get uri() {
      let _url = this.path;
      if (!_url[$startsWith](core.RegExp.new("https?:"))) {
        _url = this.baseUrl + _url;
        let s = _url[$split](":/");
        if (s[$length] === 2) {
          _url = s[$_get](0) + ":/" + s[$_get](1)[$replaceAll]("//", "/");
        }
      }
      let query = transformer.Transformer.urlEncodeMap(this.queryParameters, this.listFormat);
      if (query[$isNotEmpty]) {
        _url = _url + ((_url[$contains]("?") ? "&" : "?") + query);
      }
      return core.Uri.parse(_url).normalizePath();
    }
  };
  (options$.RequestOptions.new = function(opts) {
    let t15, t15$, t15$0;
    let method = opts && 'method' in opts ? opts.method : null;
    let sendTimeout = opts && 'sendTimeout' in opts ? opts.sendTimeout : null;
    let receiveTimeout = opts && 'receiveTimeout' in opts ? opts.receiveTimeout : null;
    let connectTimeout = opts && 'connectTimeout' in opts ? opts.connectTimeout : null;
    let data = opts && 'data' in opts ? opts.data : null;
    let path = opts && 'path' in opts ? opts.path : null;
    let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
    let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
    let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
    let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
    let baseUrl = opts && 'baseUrl' in opts ? opts.baseUrl : null;
    let extra = opts && 'extra' in opts ? opts.extra : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let responseType = opts && 'responseType' in opts ? opts.responseType : null;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    let validateStatus = opts && 'validateStatus' in opts ? opts.validateStatus : null;
    let receiveDataWhenStatusError = opts && 'receiveDataWhenStatusError' in opts ? opts.receiveDataWhenStatusError : null;
    let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
    let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
    let requestEncoder = opts && 'requestEncoder' in opts ? opts.requestEncoder : null;
    let responseDecoder = opts && 'responseDecoder' in opts ? opts.responseDecoder : null;
    let listFormat = opts && 'listFormat' in opts ? opts.listFormat : null;
    let setRequestContentTypeWhenNoPayload = opts && 'setRequestContentTypeWhenNoPayload' in opts ? opts.setRequestContentTypeWhenNoPayload : null;
    this[data$2] = data;
    this[path$] = path;
    this[onReceiveProgress$] = onReceiveProgress;
    this[onSendProgress$] = onSendProgress;
    this[cancelToken$] = cancelToken;
    options$.RequestOptions.__proto__.new.call(this, {method: method, sendTimeout: sendTimeout, receiveTimeout: receiveTimeout, extra: extra, headers: headers, responseType: responseType, contentType: contentType, validateStatus: validateStatus, receiveDataWhenStatusError: receiveDataWhenStatusError, followRedirects: followRedirects, maxRedirects: maxRedirects, requestEncoder: requestEncoder, responseDecoder: responseDecoder, listFormat: listFormat});
    this.queryParameters = (t15 = queryParameters, t15 == null ? new (T$.IdentityMapOfString$dynamic()).new() : t15);
    this.baseUrl = (t15$ = baseUrl, t15$ == null ? "" : t15$);
    this.connectTimeout = (t15$0 = connectTimeout, t15$0 == null ? 0 : t15$0);
  }).prototype = options$.RequestOptions.prototype;
  dart.addTypeTests(options$.RequestOptions);
  dart.addTypeCaches(options$.RequestOptions);
  dart.setMethodSignature(options$.RequestOptions, () => ({
    __proto__: dart.getMethods(options$.RequestOptions.__proto__),
    copyWith: dart.fnType(options$.RequestOptions, [], {baseUrl: dart.nullable(core.String), cancelToken: dart.nullable(cancel_token.CancelToken), connectTimeout: dart.nullable(core.int), contentType: dart.nullable(core.String), data: dart.nullable(core.String), extra: dart.nullable(core.Map$(core.String, dart.dynamic)), followRedirects: dart.nullable(core.bool), headers: dart.nullable(core.Map$(core.String, dart.dynamic)), listFormat: dart.nullable(options$.ListFormat), maxRedirects: dart.nullable(core.int), method: dart.nullable(core.String), onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), onSendProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), path: dart.nullable(core.String), queryParameters: dart.nullable(core.Map$(core.String, dart.dynamic)), receiveDataWhenStatusError: dart.nullable(core.bool), receiveTimeout: dart.nullable(core.int), requestEncoder: dart.nullable(dart.fnType(core.List$(core.int), [core.String, options$.RequestOptions])), responseDecoder: dart.nullable(dart.fnType(core.String, [core.List$(core.int), options$.RequestOptions, adapter.ResponseBody])), responseType: dart.nullable(options$.ResponseType), sendTimeout: dart.nullable(core.int), setRequestContentTypeWhenNoPayload: dart.nullable(core.bool), validateStatus: dart.nullable(dart.fnType(core.bool, [dart.nullable(core.int)]))}, {})
  }));
  dart.setGetterSignature(options$.RequestOptions, () => ({
    __proto__: dart.getGetters(options$.RequestOptions.__proto__),
    uri: core.Uri
  }));
  dart.setLibraryUri(options$.RequestOptions, I[15]);
  dart.setFieldSignature(options$.RequestOptions, () => ({
    __proto__: dart.getFields(options$.RequestOptions.__proto__),
    data: dart.fieldType(dart.dynamic),
    path: dart.fieldType(core.String),
    cancelToken: dart.fieldType(dart.nullable(cancel_token.CancelToken)),
    onReceiveProgress: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.int, core.int]))),
    onSendProgress: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.int, core.int])))
  }));
  adapter.HttpClientAdapter = class HttpClientAdapter extends core.Object {};
  (adapter.HttpClientAdapter.new = function() {
    ;
  }).prototype = adapter.HttpClientAdapter.prototype;
  dart.addTypeTests(adapter.HttpClientAdapter);
  dart.addTypeCaches(adapter.HttpClientAdapter);
  dart.setLibraryUri(adapter.HttpClientAdapter, I[17]);
  var stream$ = dart.privateName(adapter, "ResponseBody.stream");
  var statusCode$0 = dart.privateName(adapter, "ResponseBody.statusCode");
  var statusMessage$0 = dart.privateName(adapter, "ResponseBody.statusMessage");
  var isRedirect$0 = dart.privateName(adapter, "ResponseBody.isRedirect");
  var redirects$ = dart.privateName(adapter, "ResponseBody.redirects");
  var extra = dart.privateName(adapter, "ResponseBody.extra");
  var __ResponseBody_headers = dart.privateName(adapter, "_#ResponseBody#headers");
  adapter.ResponseBody = class ResponseBody extends core.Object {
    get stream() {
      return this[stream$];
    }
    set stream(value) {
      this[stream$] = value;
    }
    get statusCode() {
      return this[statusCode$0];
    }
    set statusCode(value) {
      this[statusCode$0] = value;
    }
    get statusMessage() {
      return this[statusMessage$0];
    }
    set statusMessage(value) {
      this[statusMessage$0] = value;
    }
    get isRedirect() {
      return this[isRedirect$0];
    }
    set isRedirect(value) {
      super.isRedirect = value;
    }
    get redirects() {
      return this[redirects$];
    }
    set redirects(value) {
      this[redirects$] = value;
    }
    get extra() {
      return this[extra];
    }
    set extra(value) {
      this[extra] = value;
    }
    static ['_#new#tearOff'](stream, statusCode, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : C[35] || CT.C35;
      let statusMessage = opts && 'statusMessage' in opts ? opts.statusMessage : null;
      let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
      let redirects = opts && 'redirects' in opts ? opts.redirects : null;
      return new adapter.ResponseBody.new(stream, statusCode, {headers: headers, statusMessage: statusMessage, isRedirect: isRedirect, redirects: redirects});
    }
    get headers() {
      let t15;
      t15 = this[__ResponseBody_headers];
      return t15 == null ? dart.throw(new _internal.LateError.fieldNI("headers")) : t15;
    }
    set headers(headers$35param) {
      this[__ResponseBody_headers] = headers$35param;
    }
    static ['_#fromString#tearOff'](text, statusCode, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : C[35] || CT.C35;
      let statusMessage = opts && 'statusMessage' in opts ? opts.statusMessage : null;
      let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
      return new adapter.ResponseBody.fromString(text, statusCode, {headers: headers, statusMessage: statusMessage, isRedirect: isRedirect});
    }
    static ['_#fromBytes#tearOff'](bytes, statusCode, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : C[35] || CT.C35;
      let statusMessage = opts && 'statusMessage' in opts ? opts.statusMessage : null;
      let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
      return new adapter.ResponseBody.fromBytes(bytes, statusCode, {headers: headers, statusMessage: statusMessage, isRedirect: isRedirect});
    }
  };
  (adapter.ResponseBody.new = function(stream, statusCode, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : C[35] || CT.C35;
    let statusMessage = opts && 'statusMessage' in opts ? opts.statusMessage : null;
    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
    let redirects = opts && 'redirects' in opts ? opts.redirects : null;
    this[__ResponseBody_headers] = null;
    this[extra] = new (T$.IdentityMapOfString$dynamic()).new();
    this[stream$] = stream;
    this[statusCode$0] = statusCode;
    this[__ResponseBody_headers] = headers;
    this[statusMessage$0] = statusMessage;
    this[isRedirect$0] = isRedirect;
    this[redirects$] = redirects;
    ;
  }).prototype = adapter.ResponseBody.prototype;
  (adapter.ResponseBody.fromString = function(text, statusCode, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : C[35] || CT.C35;
    let statusMessage = opts && 'statusMessage' in opts ? opts.statusMessage : null;
    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
    this[__ResponseBody_headers] = null;
    this[extra] = new (T$.IdentityMapOfString$dynamic()).new();
    this[redirects$] = null;
    this[statusCode$0] = statusCode;
    this[__ResponseBody_headers] = headers;
    this[statusMessage$0] = statusMessage;
    this[isRedirect$0] = isRedirect;
    this[stream$] = T$.StreamOfUint8List().fromIterable(convert.utf8.encode(text)[$map](typed_data.Uint8List, dart.fn(e => _native_typed_data.NativeUint8List.fromList(T$.JSArrayOfint().of([e])), T$.intToUint8List()))[$toList]());
    ;
  }).prototype = adapter.ResponseBody.prototype;
  (adapter.ResponseBody.fromBytes = function(bytes, statusCode, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : C[35] || CT.C35;
    let statusMessage = opts && 'statusMessage' in opts ? opts.statusMessage : null;
    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
    this[__ResponseBody_headers] = null;
    this[extra] = new (T$.IdentityMapOfString$dynamic()).new();
    this[redirects$] = null;
    this[statusCode$0] = statusCode;
    this[__ResponseBody_headers] = headers;
    this[statusMessage$0] = statusMessage;
    this[isRedirect$0] = isRedirect;
    this[stream$] = T$.StreamOfUint8List().value(_native_typed_data.NativeUint8List.fromList(bytes));
    ;
  }).prototype = adapter.ResponseBody.prototype;
  dart.addTypeTests(adapter.ResponseBody);
  dart.addTypeCaches(adapter.ResponseBody);
  dart.setGetterSignature(adapter.ResponseBody, () => ({
    __proto__: dart.getGetters(adapter.ResponseBody.__proto__),
    headers: core.Map$(core.String, core.List$(core.String))
  }));
  dart.setSetterSignature(adapter.ResponseBody, () => ({
    __proto__: dart.getSetters(adapter.ResponseBody.__proto__),
    headers: core.Map$(core.String, core.List$(core.String))
  }));
  dart.setLibraryUri(adapter.ResponseBody, I[17]);
  dart.setFieldSignature(adapter.ResponseBody, () => ({
    __proto__: dart.getFields(adapter.ResponseBody.__proto__),
    stream: dart.fieldType(async.Stream$(typed_data.Uint8List)),
    [__ResponseBody_headers]: dart.fieldType(dart.nullable(core.Map$(core.String, core.List$(core.String)))),
    statusCode: dart.fieldType(dart.nullable(core.int)),
    statusMessage: dart.fieldType(dart.nullable(core.String)),
    isRedirect: dart.finalFieldType(core.bool),
    redirects: dart.fieldType(dart.nullable(core.List$(redirect_record.RedirectRecord))),
    extra: dart.fieldType(core.Map$(core.String, dart.dynamic))
  }));
  dart.trackLibraries("packages/dio/src/interceptors/log.dart", {
    "package:dio/src/interceptors/log.dart": log,
    "package:dio/src/adapters/browser_adapter.dart": browser_adapter,
    "package:dio/src/entry/dio_for_browser.dart": dio_for_browser,
    "package:dio/src/multipart_file_stub.dart": multipart_file_stub,
    "package:dio/src/multipart_file.dart": multipart_file,
    "package:dio/src/form_data.dart": form_data,
    "package:dio/src/dio_mixin.dart": dio_mixin,
    "package:dio/src/dio.dart": dio,
    "package:dio/src/transformer.dart": transformer,
    "package:dio/src/parameter.dart": parameter,
    "package:dio/src/utils.dart": utils,
    "package:dio/src/headers.dart": headers$,
    "package:dio/src/response.dart": response$,
    "package:dio/src/dio_error.dart": dio_error,
    "package:dio/src/cancel_token.dart": cancel_token,
    "package:dio/src/options.dart": options$,
    "package:dio/src/adapter.dart": adapter,
    "package:dio/dio.dart": dio$
  }, {
    "package:dio/src/dio_mixin.dart": ["interceptor.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["../interceptor.dart","log.dart","../adapters/browser_adapter.dart","../dio_mixin.dart","../entry/dio_for_browser.dart","../multipart_file_stub.dart","../multipart_file.dart","../form_data.dart","../dio.dart","../transformer.dart","../parameter.dart","../utils.dart","../headers.dart","../response.dart","../dio_error.dart","../cancel_token.dart","../options.dart","../adapter.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../packages/dio/src/interceptors/log.dart.lib.js"}');
  // Exports:
  return {
    src__interceptors__log: log,
    src__adapters__browser_adapter: browser_adapter,
    src__entry__dio_for_browser: dio_for_browser,
    src__multipart_file_stub: multipart_file_stub,
    src__multipart_file: multipart_file,
    src__form_data: form_data,
    src__dio_mixin: dio_mixin,
    src__dio: dio,
    src__transformer: transformer,
    src__parameter: parameter,
    src__utils: utils,
    src__headers: headers$,
    src__response: response$,
    src__dio_error: dio_error,
    src__cancel_token: cancel_token,
    src__options: options$,
    src__adapter: adapter,
    dio: dio$
  };
}));

//# sourceMappingURL=log.dart.lib.js.map
